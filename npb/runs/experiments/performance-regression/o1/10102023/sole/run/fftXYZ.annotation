fftXYZ() /home/nikos/phd/unified_abi/npb/runs/experiments/performance-regression/o1/10102023/sole/bin/ft_aarch64_aligned.out
Event: cycles

Percent        
               
               
             Disassembly of section .text:
               
             0000000000501d50 <fftXYZ>:
             fftXYZ():  
             }          
               
             void fftXYZ(int sign, int n1, int n2, int n3, dcomplex x[n3][n2][n1 + 1],
             dcomplex xout[(n1 + 1) * n2 * n3], dcomplex exp1[n1],
             dcomplex exp2[n2], dcomplex exp3[n3])
             {          
               sub   sp, sp, #0xe0
               stp   x20, x19, [sp, #192]
               stp   x29, x30, [sp, #208]
               add   x29, sp, #0xd0
               stp   x5, x4, [sp, #64]
               ldp   x19, x8, [x29, #24]
               stp   w1, w3, [x29, #-52]
               mov   w20, w0  
               stur  x2, [x29, #-64]
               stur  x8, [x29, #-88]
               ldr   x8, [x29, #16]
               stur  x8, [x29, #-96]
             int i, j, k, log;
             int bls, ble;
             int len;   
             int blkp;  
               
             if (timers_enabled)
               adrp  x8, __libc
               ldr   w8, [x8, #136]
             ↓ cbz   w8, 5c   
             timer_start(3);
               mov   w0, #0x3                        // #3
               nop            
               nop            
               nop            
               nop            
             → bl    timer_start
               ldur  x2, [x29, #-64]
               ldur  w1, [x29, #-52]
         5c:   mov   w8, w2   
               str   x19, [sp, #40]
               stur  w20, [x29, #-44]
               str   x8, [sp, #16]
               add   w8, w1, #0x1
               str   x8, [sp, #56]
               mov   w8, #0x2000                     // #8192
               
             fftblock = CACHESIZE / n1;
               sdiv  w8, w8, w1
             if (fftblock >= BLOCKMAX)
               cmp   w8, #0x20
               mov   w3, #0x20                       // #32
               csel  w19, w8, w3, lt  // lt = tstop
               adrp  x8, sums 
             fftblock = BLOCKMAX;
             blkp = fftblock + 1;
             log = ilog2(n1);
               mov   w0, w1   
               str   w19, [x8, #336]
             → bl    ilog2    
               str   w8, [sp, #104]
             if (timers_enabled)
               adrp  x8, __libc
               ldr   w8, [x8, #136]
             ↓ cbz   w8, b4   
             timer_start(7);
               mov   w0, #0x7                        // #7
               nop            
             → bl    timer_start
         b4:   ldp   w3, w8, [x29, #-52]
               ldur  x0, [x29, #-64]
             for (k = 0; k < n3; k++) {
               cmp   w8, #0x1 
             ↓ b.lt  2d8      
               sub   w8, w0, #0x1
               str   w8, [sp, #88]
               ldur  w8, [x29, #-48]
               ldr   x2, [sp, #56]
               ldr   x17, [sp, #72]
               add   w1, w19, #0x1
               mov   w8, w8   
               str   x8, [sp, #32]
               ldr   x8, [sp, #16]
               adrp  x16, sums
               mov   w7, w3   
               lsl   x18, x2, #4
               mul   x8, x8, x2
               lsl   x8, x8, #4
               sbfiz x20, x1, #4, #32
               adrp  x6, sums 
               add   x16, x16, #0x160
               mov   x4, xzr  
               str   x8, [sp, #24]
               str   x1, [sp, #96]
               str   x18, [sp, #80]
             ↓ b     138      
        11c:   ldr   x4, [sp, #48]
               ldp   x8, x2, [sp, #24]
               add   x4, x4, #0x1
               add   x17, x17, x8
               mov   x8, x4   
               subs  x8, x8, x2
             ↓ b.eq  2d8      
             for (bls = 0; bls < n2; bls += fftblock) {
        138:   cmp   w0, #0x1 
               str   x4, [sp, #48]
             ↑ b.lt  11c      
               mov   w1, wzr  
               mov   w5, wzr  
               stur  x17, [x29, #-80]
             ↓ b     178      
  0.01  154:   adrp  x6, sums 
               ldr   w8, [x6, #336]
  0.00         ldur  x0, [x29, #-64]
               mov   w1, wzr  
  0.00         add   w5, w5, w8
               mov   w8, w5   
  0.01         sub   w1, w1, w5
               subs  w8, w8, w0
             ↑ b.ge  11c      
             ble = bls + fftblock - 1;
  0.00  178:   ldr   w8, [x6, #336]
  0.00         add   w8, w8, w5
               sub   w8, w8, #0x1
             if (ble > n2)
               mov   w2, w8   
               subs  w2, w2, w0
               ldr   w2, [sp, #88]
               stur  w1, [x29, #-40]
               stur  x5, [x29, #-32]
  0.00         csel  w30, w2, w8, gt
             ble = n2 - 1;
             len = ble - bls + 1;
               add   w8, w1, w30
  0.00         add   w2, w8, #0x1
             for (j = bls; j <= ble; j++) {
               mov   w8, w5   
               subs  w8, w8, w30
             ↓ b.gt  220      
               ldur  x6, [x29, #-32]
               ldr   x0, [sp, #56]
               sxtw  x4, w30  
               sxtw  x8, w6   
               mov   x1, x8   
               mul   x1, x1, x0
               add   x5, x17, x1, lsl #4
               ldur  w1, [x29, #-40]
               add   w6, w1, w6
             for (i = 0; i < n1; i++) {
               cmp   w3, #0x1 
             ↓ b.ge  1fc      
             for (j = bls; j <= ble; j++) {
  0.00  1dc:   add   x1, x8, #0x1
               subs  x8, x8, x4
               add   x5, x5, x18
  0.00         add   w6, w6, #0x1
  0.00         mov   x8, x1   
             ↓ b.ge  220      
             for (i = 0; i < n1; i++) {
               cmp   w3, #0x1 
             ↑ b.lt  1dc      
        1fc:   add   x0, x16, w6, sxtw #4
  0.01         mov   x1, x5   
               mov   x19, x7  
             plane[j - bls + blkp * i] = x[k][j][i];
  0.44  208:   ldr   q0, [x1], #16
             for (i = 0; i < n1; i++) {
  4.22         subs  x19, x19, #0x1
             plane[j - bls + blkp * i] = x[k][j][i];
 21.63         str   q0, [x0] 
             for (i = 0; i < n1; i++) {
  0.03         add   x0, x0, x20
  2.69       ↑ b.ne  208      
  0.05       ↑ b     1dc      
        220:   ldur  x8, [x29, #-96]
  0.01         ldr   w1, [sp, #104]
             }          
             }          
             Swarztrauber(sign, log, len, n1, blkp, plane, exp1);
               adrp  x5, sums 
  0.01         ldr   x4, [sp, #96]
               str   x8, [sp] 
               ldur  w0, [x29, #-44]
               add   x5, x5, #0x160
               mov   x19, x7  
               stur  x30, [x29, #-72]
  0.00       → bl    Swarztrauber
  0.01         ldur  x5, [x29, #-32]
  0.02         ldp   x17, x2, [x29, #-80]
  0.01         ldr   x18, [sp, #80]
  0.02         ldur  w3, [x29, #-52]
               ldur  w6, [x29, #-40]
               adrp  x16, sums
             for (j = bls; j <= ble; j++) {
               mov   w8, w5   
               add   x16, x16, #0x160
               mov   x7, x19  
               subs  w8, w8, w2
  0.00       ↑ b.gt  154      
               sxtw  x8, w5   
               sxtw  x4, w2   
               mov   x2, x8   
               add   w6, w6, w5
               mul   x2, x2, x18
             for (i = 0; i < n1; i++) {
               cmp   w3, #0x1 
             ↓ b.ge  2b0      
             for (j = bls; j <= ble; j++) {
        290:   add   x1, x8, #0x1
  0.02         subs  x8, x8, x4
               add   w6, w6, #0x1
               add   x2, x2, x18
               mov   x8, x1   
             ↑ b.ge  154      
             for (i = 0; i < n1; i++) {
  0.00         cmp   w3, #0x1 
             ↑ b.lt  290      
        2b0:   add   x1, x16, w6, sxtw #4
  0.01         mov   x0, x2   
  0.01         mov   x19, x7  
             x[k][j][i] = plane[j - bls + blkp * i];
  2.52  2bc:   ldr   q0, [x1] 
             for (i = 0; i < n1; i++) {
  0.06         subs  x19, x19, #0x1
 13.26         add   x1, x1, x20
             x[k][j][i] = plane[j - bls + blkp * i];
  0.01         str   q0, [x17, x0]
             for (i = 0; i < n1; i++) {
  2.20         add   x0, x0, #0x10
             ↑ b.ne  2bc      
  0.04       ↑ b     290      
             }          
             }          
             }          
             }          
             if (timers_enabled)
        2d8:   adrp  x8, __libc
               ldr   w8, [x8, #136]
             ↓ cbz   w8, 2f4  
             timer_stop(7);
               mov   w0, #0x7                        // #7
               nop            
             → bl    timer_stop
               ldur  x0, [x29, #-64]
        2f4:   mov   w8, #0x2000                     // #8192
               
             fftblock = CACHESIZE / n2;
               sdiv  w8, w8, w0
             if (fftblock >= BLOCKMAX)
               cmp   w8, #0x20
               mov   w3, #0x20                       // #32
               csel  w8, w8, w3, lt  // lt = tstop
               adrp  x3, sums 
               str   w8, [x3, #336]
             fftblock = BLOCKMAX;
             blkp = fftblock + 1;
             log = ilog2(n2);
             → bl    ilog2    
               mov   w5, w8   
             if (timers_enabled)
               adrp  x8, __libc
               ldr   w8, [x8, #136]
             ↓ cbz   w8, 334  
             timer_start(8);
               mov   w0, #0x8                        // #8
               mov   w19, w5  
             → bl    timer_start
               mov   w5, w19  
        334:   ldp   w2, w8, [x29, #-52]
             for (k = 0; k < n3; k++) {
               cmp   w8, #0x1 
             ↓ b.lt  43c      
               ldr   x3, [sp, #16]
               ldr   x8, [sp, #56]
               sub   w19, w2, #0x1
               adrp  x1, sums 
               mul   x3, x3, x8
               str   x3, [sp, #96]
               ldur  w8, [x29, #-48]
               mov   w8, w8   
               str   x8, [sp, #104]
               stur  xzr, [x29, #-96]
               stur  w19, [x29, #-72]
               stur  w5, [x29, #-80]
               ldr   x20, [sp, #40]
             ↓ b     390      
        378:   ldur  x8, [x29, #-96]
               add   x8, x8, #0x1
               stur  x8, [x29, #-96]
               ldr   x3, [sp, #104]
               subs  x8, x8, x3
             ↓ b.eq  43c      
        390:   ldur  w0, [x29, #-44]
               ldur  x30, [x29, #-64]
               ldr   x4, [sp, #56]
             for (bls = 0; bls < n1; bls += fftblock) {
               cmp   w2, #0x1 
             ↑ b.lt  378      
               ldr   x8, [sp, #96]
               ldur  x3, [x29, #-96]
  0.00         mul   x8, x8, x3
               ldr   x3, [sp, #72]
               add   x8, x3, x8, lsl #4
               mov   w3, wzr  
               stur  x8, [x29, #-40]
             ble = bls + fftblock - 1;
  0.00  3c0:   ldr   w8, [x1, #336]
               stur  w3, [x29, #-32]
               add   w8, w8, w3
               sub   w8, w8, #0x1
             if (ble > n1)
               mov   w3, w8   
               subs  w3, w3, w2
               ldur  w3, [x29, #-32]
               csel  w8, w19, w8, gt
               mov   x19, x4  
             ble = n1 - 1;
             len = ble - bls + 1;
               sub   w8, w8, w3
               add   w2, w8, #0x1
               ldur  x8, [x29, #-40]
               ldur  w3, [x29, #-32]
             Swarztrauber(sign, log, len, n2, n1 + 1, &x[k][0][bls], exp2);
               str   x20, [sp]
               ldur  w1, [x29, #-80]
               add   x5, x8, w3, sxtw #4
               mov   w3, w30  
             → bl    Swarztrauber
               adrp  x1, sums 
               ldur  w3, [x29, #-32]
             for (bls = 0; bls < n1; bls += fftblock) {
  0.01         ldr   w8, [x1, #336]
  0.01         ldur  w2, [x29, #-52]
               mov   x4, x19  
               ldur  x30, [x29, #-64]
               ldur  w0, [x29, #-44]
               ldur  w19, [x29, #-72]
               add   w3, w3, w8
               mov   w8, w3   
               subs  w8, w8, w2
             ↑ b.lt  3c0      
             ↑ b     378      
             }          
             }          
             if (timers_enabled)
        43c:   adrp  x8, __libc
               ldr   w8, [x8, #136]
             ↓ cbz   w8, 450  
             timer_stop(8);
               mov   w0, #0x8                        // #8
             → bl    timer_stop
        450:   ldur  w0, [x29, #-48]
               mov   w8, #0x2000                     // #8192
               mov   w3, #0x20                       // #32
               
             fftblock = CACHESIZE / n3;
               sdiv  w8, w8, w0
             if (fftblock >= BLOCKMAX)
               cmp   w8, #0x20
               csel  w19, w8, w3, lt  // lt = tstop
               adrp  x8, sums 
               str   w19, [x8, #336]
             fftblock = BLOCKMAX;
             blkp = fftblock + 1;
             log = ilog2(n3);
             → bl    ilog2    
               stur  w8, [x29, #-72]
             if (timers_enabled)
               adrp  x8, __libc
               ldr   w8, [x8, #136]
             ↓ cbz   w8, 490  
             timer_start(9);
               mov   w0, #0x9                        // #9
               nop            
             → bl    timer_start
        490:   ldur  x3, [x29, #-64]
               ldur  w30, [x29, #-52]
               ldr   x2, [sp, #56]
             for (k = 0; k < n2; k++) {
               cmp   w3, #0x1 
             ↓ b.lt  700      
               add   w8, w19, #0x1
               stur  w8, [x29, #-80]
               sub   w8, w30, #0x1
               stur  w8, [x29, #-96]
               sxtw  x8, w3   
               mov   w3, w3   
               str   x3, [sp, #40]
               ldur  w3, [x29, #-48]
               sxtw  x1, w2   
               mul   x8, x8, x1
               adrp  x20, sums
               mov   w18, w3  
               lsl   x3, x2, #4
               str   x3, [sp, #32]
               ldr   x3, [sp, #16]
               add   w17, w19, #0x1
               str   x1, [sp, #48]
               lsl   x7, x8, #4
               mul   x3, x3, x2
               lsl   x16, x3, #4
               adrp  x2, sums 
               add   x20, x20, #0x160
               mov   x1, xzr  
               stp   xzr, x7, [sp, #80]
               stp   x18, x16, [sp, #96]
             ↓ b     544      
        50c:   ldr   x8, [sp, #72]
               ldr   x3, [sp, #32]
               ldr   x1, [sp, #56]
               add   x8, x8, x3
               str   x8, [sp, #72]
               ldr   x8, [sp, #48]
               ldr   x3, [sp, #80]
               add   x1, x1, #0x1
               add   x3, x3, x8
               str   x3, [sp, #80]
               ldr   x3, [sp, #40]
               mov   x8, x1   
               subs  x8, x8, x3
             ↓ b.eq  700      
             for (bls = 0; bls < n1; bls += fftblock) {
        544:   cmp   w30, #0x1
               str   x1, [sp, #56]
             ↑ b.lt  50c      
               mov   w1, wzr  
               mov   w3, wzr  
             ↓ b     584      
  0.00  55c:   adrp  x2, sums 
               ldr   w8, [x2, #336]
               mov   w1, wzr  
  0.01         add   w16, w16, w8
               sub   w1, w1, w16
               mov   w8, w16  
               mov   x3, x16  
               ldr   x16, [sp, #104]
  0.00         subs  w8, w8, w30
             ↑ b.ge  50c      
             ble = bls + fftblock - 1;
        584:   ldr   w8, [x2, #336]
  0.00         stur  x3, [x29, #-40]
               stur  w1, [x29, #-64]
               add   w8, w8, w3
               sub   w8, w8, #0x1
             if (ble > n1)
               mov   w3, w8   
               subs  w3, w3, w30
               ldur  w3, [x29, #-96]
               csel  w8, w3, w8, gt
               stur  x8, [x29, #-32]
             ble = n1 - 1;
             len = ble - bls + 1;
               add   w8, w8, w1
               add   w2, w8, #0x1
               ldur  w8, [x29, #-48]
             for (i = 0; i < n3; i++) {
               cmp   w8, #0x1 
             ↓ b.lt  640      
               ldp   x1, x8, [x29, #-40]
  0.00         mov   x7, xzr  
               sxtw  x3, w1   
               sub   x4, x3, #0x1
               ldr   x3, [sp, #72]
               sxtw  x8, w8   
               add   x5, x3, w1, sxtw #4
               ldur  w3, [x29, #-64]
               add   w6, w3, w1
             ↓ b     600      
  0.07  5e8:   add   x7, x7, #0x1
  0.16         mov   x3, x7   
  0.03         add   x5, x5, x16
  0.03         add   w6, w6, w17
  0.05         subs  x3, x3, x18
             ↓ b.eq  640      
  0.04  600:   ldur  x3, [x29, #-40]
             for (j = bls; j <= ble; j++) {
  0.05         mov   w1, w3   
  0.04         ldur  x3, [x29, #-32]
  0.03         subs  w1, w1, w3
  0.04       ↑ b.gt  5e8      
  0.02         mov   w0, w6   
  0.02         mov   x1, x5   
  0.05         mov   x3, x4   
             plane[j - bls + blkp * i] = x[i][k][j];
  1.62  620:   ldr   q0, [x1], #16
             for (j = bls; j <= ble; j++) {
  6.00         add   x3, x3, #0x1
  0.65         mov   x19, x3  
 22.44         subs  x19, x19, x8
             plane[j - bls + blkp * i] = x[i][k][j];
  0.87         str   q0, [x20, w0, sxtw #4]
             for (j = bls; j <= ble; j++) {
  3.06         add   w0, w0, #0x1
             ↑ b.lt  620      
  0.01       ↑ b     5e8      
        640:   ldur  x8, [x29, #-88]
             }          
             }          
             Swarztrauber(sign, log, len, n3, blkp, plane, exp3);
               adrp  x5, sums 
               add   x5, x5, #0x160
               mov   w19, w17 
  0.00         str   x8, [sp] 
               ldp   w3, w0, [x29, #-48]
               ldur  w1, [x29, #-72]
               ldur  w4, [x29, #-80]
             → bl    Swarztrauber
  0.00         ldp   w30, w8, [x29, #-52]
  0.04         ldp   x7, x18, [sp, #88]
  0.00         ldur  x16, [x29, #-40]
               ldur  w6, [x29, #-64]
               mov   w17, w19 
             for (i = 0; i <= n3 - 1; i++) {
               cmp   w8, #0x1 
             ↑ b.lt  55c      
               ldr   x2, [sp, #80]
               sxtw  x3, w16  
               ldur  x8, [x29, #-32]
               sub   x4, x3, #0x1
               add   x3, x3, x2
               ldr   x2, [sp, #64]
               sxtw  x8, w8   
               add   w6, w6, w16
               mov   x1, xzr  
               add   x5, x2, x3, lsl #4
  0.00       ↓ b     6c4      
  0.09  6ac:   add   x1, x1, #0x1
  0.02         mov   x3, x1   
  0.04         add   w6, w6, w17
  0.06         add   x5, x5, x7
  0.04         subs  x3, x3, x18
  0.04       ↑ b.eq  55c      
  0.01  6c4:   ldur  x2, [x29, #-32]
             for (j = bls; j <= ble; j++) {
  0.03         mov   w3, w16  
  0.12         subs  w3, w3, w2
  0.02       ↑ b.gt  6ac      
  0.04         mov   x0, x5   
  0.07         mov   w19, w6  
  0.03         mov   x2, x4   
             xout[j + (n1 + 1) * (k + n2 * i)] =
             plane[j - bls + blkp * i];
  1.33  6e0:   ldr   q0, [x20, w19, sxtw #4]
             for (j = bls; j <= ble; j++) {
  5.00         add   x2, x2, #0x1
  1.20         mov   x3, x2   
  1.50         add   w19, w19, #0x1
             plane[j - bls + blkp * i];
  5.34         str   q0, [x0], #16
             for (j = bls; j <= ble; j++) {
  2.29         subs  x3, x3, x8
             ↑ b.lt  6e0      
  0.03       ↑ b     6ac      
             }          
             }          
             }          
             }          
             if (timers_enabled)
        700:   adrp  x8, __libc
               ldr   w8, [x8, #136]
             ↓ cbz   w8, 734  
             timer_stop(9);
               mov   w0, #0x9                        // #9
             → bl    timer_stop
             if (timers_enabled)
               adrp  x8, __libc
               ldr   w8, [x8, #136]
             ↓ cbz   w8, 734  
             timer_stop(3);
               ldp   x29, x30, [sp, #208]
               ldp   x20, x19, [sp, #192]
               mov   w0, #0x3                        // #3
               add   sp, sp, #0xe0
             → b     timer_stop
             }          
        734:   ldp   x29, x30, [sp, #208]
               ldp   x20, x19, [sp, #192]
               add   sp, sp, #0xe0
             ← ret            
