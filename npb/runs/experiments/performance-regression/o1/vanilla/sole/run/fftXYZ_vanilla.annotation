fftXYZ() /home/nikos/phd/unified_abi/layout/npb/ft/ft_aarch64_init.out
Event: cycles

Percent        
               
               
             Disassembly of section .text:
               
             0000000000400ba4 <fftXYZ>:
             fftXYZ():  
             }          
               
             void fftXYZ(int sign, int n1, int n2, int n3, dcomplex x[n3][n2][n1 + 1],
             dcomplex xout[(n1 + 1) * n2 * n3], dcomplex exp1[n1],
             dcomplex exp2[n2], dcomplex exp3[n3])
             {          
               sub   sp, sp, #0xd0
               stp   x28, x27, [sp, #112]
               stp   x26, x25, [sp, #128]
               stp   x24, x23, [sp, #144]
               stp   x22, x21, [sp, #160]
               stp   x20, x19, [sp, #176]
               stp   x29, x30, [sp, #192]
               add   x29, sp, #0xc0
               str   x6, [sp, #96]
               str   x5, [sp, #40]
               str   x4, [sp, #56]
             int i, j, k, log;
             int bls, ble;
             int len;   
             int blkp;  
               
             if (timers_enabled)
               adrp  x20, mal+0x3b0
               ldr   w8, [x20, #768]
               ldr   x9, [x29, #16]
               mov   x23, x7  
               mov   w26, w2  
               mov   w22, w1  
               mov   w19, w0  
             void fftXYZ(int sign, int n1, int n2, int n3, dcomplex x[n3][n2][n1 + 1],
               add   w21, w1, #0x1
               stur  w3, [x29, #-88]
               str   x9, [sp, #88]
             if (timers_enabled)
             ↓ cbz   w8, 60   
             timer_start(3);
               mov   w0, #0x3                        // #3
             → bl    timer_start
         60:   mov   w8, w26  
               str   x23, [sp, #8]
               stur  w19, [x29, #-84]
               str   x8, [sp, #24]
               mov   w8, #0x2000                     // #8192
               
             fftblock = CACHESIZE / n1;
               sdiv  w8, w8, w22
               mov   w9, #0x20                       // #32
             if (fftblock >= BLOCKMAX)
               cmp   w8, #0x20
               csel  w19, w8, w9, lt  // lt = tstop
               adrp  x28, twiddle+0x1007fef0
             fftblock = BLOCKMAX;
             blkp = fftblock + 1;
             log = ilog2(n1);
               mov   w0, w22  
               str   w19, [x28, #608]
             → bl    ilog2    
             if (timers_enabled)
               ldr   w8, [x20, #768]
               str   w0, [sp, #80]
             ↓ cbz   w8, a8   
             timer_start(7);
               mov   w0, #0x7                        // #7
             → bl    timer_start
         a8:   ldur  w8, [x29, #-88]
               adrp  x25, twiddle+0x1007fef0
             for (k = 0; k < n3; k++) {
               lsl   x27, x21, #4
               add   x25, x25, #0x270
               cmp   w8, #0x1 
               str   x21, [sp, #32]
             ↓ b.lt  258      
               sub   w8, w26, #0x1
               str   w8, [sp, #64]
               ldur  w8, [x29, #-88]
               add   w11, w19, #0x1
               ldr   x19, [sp, #56]
               mov   x10, xzr 
               mov   w8, w8   
               str   x8, [sp, #16]
               ldp   x8, x9, [sp, #24]
               mov   w20, w22 
               sbfiz x24, x11, #4, #32
               str   x11, [sp, #72]
               mul   x8, x8, x9
               lsl   x8, x8, #4
               str   x8, [sp] 
             ↓ b     120      
  0.01  104:   ldr   x10, [sp, #48]
               ldr   x8, [sp, #16]
               add   x10, x10, #0x1
               cmp   x10, x8  
               ldr   x8, [sp] 
               add   x19, x19, x8
             ↓ b.eq  258      
             for (bls = 0; bls < n2; bls += fftblock) {
        120:   cmp   w26, #0x1
               str   x10, [sp, #48]
             ↑ b.lt  104      
               mov   w23, wzr 
               mov   w21, wzr 
             ↓ b     150      
  0.01  138:   adrp  x28, twiddle+0x1007fef0
               ldr   w8, [x28, #608]
  0.01         add   w21, w8, w21
               cmp   w21, w26 
               neg   w23, w21 
             ↑ b.ge  104      
             ble = bls + fftblock - 1;
        150:   ldr   w8, [x28, #608]
               ldr   w9, [sp, #64]
               add   w8, w21, w8
               sub   w8, w8, #0x1
             if (ble > n2)
               cmp   w8, w26  
  0.00         csel  w28, w9, w8, gt
             ble = n2 - 1;
             len = ble - bls + 1;
               add   w8, w23, w28
             for (j = bls; j <= ble; j++) {
               cmp   w21, w28 
             len = ble - bls + 1;
               add   w2, w8, #0x1
             for (j = bls; j <= ble; j++) {
             ↓ b.gt  1d8      
               ldr   x10, [sp, #32]
               sxtw  x8, w21  
               sxtw  x9, w28  
               add   w11, w23, w21
               mul   x10, x10, x8
               add   x10, x19, x10, lsl #4
             for (i = 0; i < n1; i++) {
               cmp   w22, #0x1
             ↓ b.ge  1b4      
             for (j = bls; j <= ble; j++) {
  0.00  198:   cmp   x8, x9   
               add   x8, x8, #0x1
  0.01         add   x10, x10, x27
  0.00         add   w11, w11, #0x1
             ↓ b.ge  1d8      
             for (i = 0; i < n1; i++) {
  0.00         cmp   w22, #0x1
             ↑ b.lt  198      
  0.00  1b4:   add   x12, x25, w11, sxtw #4
               mov   x13, x10 
  0.00         mov   x14, x20 
             plane[j - bls + blkp * i] = x[k][j][i];
  0.38  1c0:   ldr   q0, [x13], #16
             for (i = 0; i < n1; i++) {
  4.25         subs  x14, x14, #0x1
             plane[j - bls + blkp * i] = x[k][j][i];
 22.17         str   q0, [x12]
             for (i = 0; i < n1; i++) {
  0.02         add   x12, x12, x24
  2.37       ↑ b.ne  1c0      
  0.05       ↑ b     198      
  0.00  1d8:   ldur  w0, [x29, #-84]
  0.01         ldr   w1, [sp, #80]
               ldr   x6, [sp, #96]
             }          
             }          
             Swarztrauber(sign, log, len, n1, blkp, plane, exp1);
               mov   w3, w22  
  0.02         ldr   x4, [sp, #72]
               mov   x5, x25  
             → bl    Swarztrauber
             for (j = bls; j <= ble; j++) {
  0.01         cmp   w21, w28 
             ↑ b.gt  138      
               sxtw  x8, w21  
               sxtw  x9, w28  
               add   w10, w23, w21
  0.00         mul   x11, x27, x8
             for (i = 0; i < n1; i++) {
               cmp   w22, #0x1
             ↓ b.ge  230      
             for (j = bls; j <= ble; j++) {
        214:   cmp   x8, x9   
  0.00         add   x8, x8, #0x1
               add   w10, w10, #0x1
  0.01         add   x11, x11, x27
             ↑ b.ge  138      
             for (i = 0; i < n1; i++) {
  0.01         cmp   w22, #0x1
  0.01       ↑ b.lt  214      
        230:   add   x12, x25, w10, sxtw #4
  0.01         mov   x13, x11 
               mov   x14, x20 
             x[k][j][i] = plane[j - bls + blkp * i];
  2.94  23c:   ldr   q0, [x12]
             for (i = 0; i < n1; i++) {
  0.10         subs  x14, x14, #0x1
 13.43         add   x12, x12, x24
             x[k][j][i] = plane[j - bls + blkp * i];
  0.03         str   q0, [x19, x13]
             for (i = 0; i < n1; i++) {
  2.08         add   x13, x13, #0x10
             ↑ b.ne  23c      
  0.09       ↑ b     214      
        258:   adrp  x19, mal+0x3b0
             }          
             }          
             }          
             }          
             if (timers_enabled)
               ldr   w8, [x19, #768]
             ↓ cbz   w8, 26c  
             timer_stop(7);
               mov   w0, #0x7                        // #7
             → bl    timer_stop
        26c:   mov   w8, #0x2000                     // #8192
               
             fftblock = CACHESIZE / n2;
               sdiv  w8, w8, w26
             if (fftblock >= BLOCKMAX)
               cmp   w8, #0x20
               mov   w9, #0x20                       // #32
               csel  w8, w8, w9, lt  // lt = tstop
             fftblock = BLOCKMAX;
             blkp = fftblock + 1;
             log = ilog2(n2);
               mov   w0, w26  
               str   x27, [sp]
               str   w8, [x28, #608]
               str   x26, [sp, #16]
             → bl    ilog2    
             if (timers_enabled)
               ldr   w8, [x19, #768]
             log = ilog2(n2);
               mov   w1, w0   
             if (timers_enabled)
             ↓ cbz   w8, 2b0  
             timer_start(8);
               mov   w0, #0x8                        // #8
               mov   w19, w1  
             → bl    timer_start
               mov   w1, w19  
        2b0:   ldur  w8, [x29, #-88]
             for (k = 0; k < n3; k++) {
               cmp   w8, #0x1 
             ↓ b.lt  380      
               ldp   x8, x9, [sp, #24]
               str   xzr, [sp, #80]
               ldr   x21, [sp, #32]
               ldp   x27, x23, [sp, #8]
               mul   x8, x8, x9
               str   x8, [sp, #64]
               ldur  w8, [x29, #-88]
               sub   w24, w22, #0x1
               adrp  x19, twiddle+0x1007fef0
               mov   w8, w8   
               str   x8, [sp, #72]
               ldur  w26, [x29, #-84]
             for (bls = 0; bls < n1; bls += fftblock) {
               cmp   w22, #0x1
             ↓ b.ge  310      
  0.00  2f4:   ldp   x9, x8, [sp, #72]
             for (k = 0; k < n3; k++) {
               add   x8, x8, #0x1
               cmp   x8, x9   
               str   x8, [sp, #80]
             ↓ b.eq  380      
             for (bls = 0; bls < n1; bls += fftblock) {
               cmp   w22, #0x1
             ↑ b.lt  2f4      
        310:   ldr   x8, [sp, #80]
               ldr   x9, [sp, #64]
               mov   w28, wzr 
               mul   x8, x9, x8
               ldr   x9, [sp, #56]
               add   x8, x9, x8, lsl #4
               str   x8, [sp, #96]
             ble = bls + fftblock - 1;
        32c:   ldr   w8, [x19, #608]
             if (ble > n1)
             ble = n1 - 1;
             len = ble - bls + 1;
             Swarztrauber(sign, log, len, n2, n1 + 1, &x[k][0][bls], exp2);
               mov   w0, w26  
               mov   w3, w23  
               mov   w4, w21  
             ble = bls + fftblock - 1;
               add   w8, w28, w8
               sub   w8, w8, #0x1
             if (ble > n1)
               cmp   w8, w22  
               csel  w8, w24, w8, gt
             len = ble - bls + 1;
  0.00         sub   w8, w8, w28
  0.00         add   w2, w8, #0x1
               ldr   x8, [sp, #96]
             Swarztrauber(sign, log, len, n2, n1 + 1, &x[k][0][bls], exp2);
               mov   x6, x27  
               mov   w20, w1  
               add   x5, x8, w28, sxtw #4
             → bl    Swarztrauber
             for (bls = 0; bls < n1; bls += fftblock) {
  0.00         ldr   w8, [x19, #608]
               mov   w1, w20  
  0.01         add   w28, w8, w28
               cmp   w28, w22 
             ↑ b.lt  32c      
             ↑ b     2f4      
        380:   adrp  x20, mal+0x3b0
             }          
             }          
             if (timers_enabled)
               ldr   w8, [x20, #768]
             ↓ cbz   w8, 394  
             timer_stop(8);
               mov   w0, #0x8                        // #8
             → bl    timer_stop
        394:   ldur  w0, [x29, #-88]
               mov   w8, #0x2000                     // #8192
               mov   w9, #0x20                       // #32
               adrp  x28, twiddle+0x1007fef0
               
             fftblock = CACHESIZE / n3;
               sdiv  w8, w8, w0
             if (fftblock >= BLOCKMAX)
               cmp   w8, #0x20
               csel  w19, w8, w9, lt  // lt = tstop
               str   w19, [x28, #608]
             fftblock = BLOCKMAX;
             blkp = fftblock + 1;
             log = ilog2(n3);
             → bl    ilog2    
             if (timers_enabled)
               ldr   w8, [x20, #768]
               ldr   x20, [sp, #16]
               ldr   x27, [sp]
               str   w0, [sp, #80]
             ↓ cbz   w8, 3d4  
             timer_start(9);
               mov   w0, #0x9                        // #9
             → bl    timer_start
             for (k = 0; k < n2; k++) {
        3d4:   cmp   w20, #0x1
             ↓ b.lt  5b4      
               add   w8, w19, #0x1
               str   w8, [sp, #72]
               sub   w8, w22, #0x1
               str   xzr, [sp, #48]
               str   w8, [sp, #64]
               ldur  w9, [x29, #-88]
               ldr   x10, [sp, #32]
               sxtw  x8, w20  
               mov   x11, xzr 
               mov   w26, w9  
               ldr   x9, [sp, #24]
               sxtw  x12, w10 
               mul   x8, x8, x12
               add   w19, w19, #0x1
               mul   x9, x9, x10
               lsl   x20, x9, #4
               lsl   x24, x8, #4
               str   x12, [sp, #16]
             ↓ b     454      
        428:   ldr   x8, [sp, #56]
               ldr   x11, [sp, #32]
               add   x8, x8, x27
               str   x8, [sp, #56]
               ldp   x9, x8, [sp, #16]
               add   x11, x11, #0x1
               cmp   x11, x8  
               ldr   x8, [sp, #48]
               add   x8, x8, x9
               str   x8, [sp, #48]
             ↓ b.eq  5b4      
             for (bls = 0; bls < n1; bls += fftblock) {
        454:   cmp   w22, #0x1
               str   x11, [sp, #32]
             ↑ b.lt  428      
               mov   w16, wzr 
               mov   w21, wzr 
             ↓ b     480      
  0.00  46c:   ldr   w8, [x28, #608]
               add   w21, w8, w21
  0.00         cmp   w21, w22 
               neg   w16, w21 
             ↑ b.ge  428      
             ble = bls + fftblock - 1;
        480:   ldr   w8, [x28, #608]
  0.00         ldr   w9, [sp, #64]
               add   w8, w21, w8
               sub   w8, w8, #0x1
             if (ble > n1)
               cmp   w8, w22  
  0.02         csel  w23, w9, w8, gt
               ldur  w9, [x29, #-88]
             ble = n1 - 1;
             len = ble - bls + 1;
               add   w8, w16, w23
               add   w2, w8, #0x1
             for (i = 0; i < n3; i++) {
               cmp   w9, #0x1 
             ↓ b.lt  514      
               ldr   x10, [sp, #56]
               sxtw  x11, w21 
  0.00         mov   x8, xzr  
               sxtw  x9, w23  
               add   x10, x10, w21, sxtw #4
               sub   x11, x11, #0x1
               add   w12, w16, w21
             for (j = bls; j <= ble; j++) {
               cmp   w21, w23 
             ↓ b.le  4ec      
             for (i = 0; i < n3; i++) {
        4d0:   add   x8, x8, #0x1
  0.26         add   x10, x10, x20
               cmp   x8, x26  
  0.00         add   w12, w12, w19
             ↓ b.eq  514      
             for (j = bls; j <= ble; j++) {
               cmp   w21, w23 
             ↑ b.gt  4d0      
  0.14  4ec:   mov   w13, w12 
               mov   x14, x10 
               mov   x15, x11 
             plane[j - bls + blkp * i] = x[i][k][j];
  1.39  4f8:   ldr   q0, [x14], #16
             for (j = bls; j <= ble; j++) {
  6.36         add   x15, x15, #0x1
               cmp   x15, x9  
             plane[j - bls + blkp * i] = x[i][k][j];
 21.95         str   q0, [x25, w13, sxtw #4]
             for (j = bls; j <= ble; j++) {
  3.30         add   w13, w13, #0x1
             ↑ b.lt  4f8      
             ↑ b     4d0      
  0.01  514:   str   w16, [sp, #96]
               ldp   w28, w0, [x29, #-88]
  0.00         ldr   w1, [sp, #80]
               ldr   w4, [sp, #72]
  0.01         ldr   x6, [sp, #88]
             }          
             }          
             Swarztrauber(sign, log, len, n3, blkp, plane, exp3);
               mov   w3, w28  
               mov   x5, x25  
             → bl    Swarztrauber
             for (i = 0; i <= n3 - 1; i++) {
  0.00         cmp   w28, #0x1
  0.01         adrp  x28, twiddle+0x1007fef0
             ↑ b.lt  46c      
               ldr   x13, [sp, #48]
               sxtw  x12, w21 
               ldr   w10, [sp, #96]
               sub   x11, x12, #0x1
               add   x12, x13, x12
               ldr   x13, [sp, #40]
               mov   x8, xzr  
               sxtw  x9, w23  
               add   w10, w10, w21
               add   x12, x13, x12, lsl #4
             for (j = bls; j <= ble; j++) {
  0.00         cmp   w21, w23 
             ↓ b.le  58c      
             for (i = 0; i <= n3 - 1; i++) {
  0.15  570:   add   x8, x8, #0x1
  0.03         add   w10, w10, w19
  0.03         cmp   x8, x26  
  0.03         add   x12, x12, x24
  0.04       ↑ b.eq  46c      
             for (j = bls; j <= ble; j++) {
  0.01         cmp   w21, w23 
             ↑ b.gt  570      
  0.04  58c:   mov   x13, x12 
  0.05         mov   w14, w10 
  0.04         mov   x15, x11 
             xout[j + (n1 + 1) * (k + n2 * i)] =
             plane[j - bls + blkp * i];
  1.41  598:   ldr   q0, [x25, w14, sxtw #4]
             for (j = bls; j <= ble; j++) {
  5.82         add   x15, x15, #0x1
  1.27         add   w14, w14, #0x1
  1.61         cmp   x15, x9  
             plane[j - bls + blkp * i];
  5.90         str   q0, [x13], #16
             for (j = bls; j <= ble; j++) {
  1.96       ↑ b.lt  598      
  0.05       ↑ b     570      
        5b4:   adrp  x19, mal+0x3b0
             }          
             }          
             }          
             }          
             if (timers_enabled)
               ldr   w8, [x19, #768]
             ↓ cbz   w8, 5f4  
             timer_stop(9);
               mov   w0, #0x9                        // #9
             → bl    timer_stop
             if (timers_enabled)
               ldr   w8, [x19, #768]
             ↓ cbz   w8, 5f4  
             timer_stop(3);
               ldp   x29, x30, [sp, #192]
               ldp   x20, x19, [sp, #176]
               ldp   x22, x21, [sp, #160]
               ldp   x24, x23, [sp, #144]
               ldp   x26, x25, [sp, #128]
               ldp   x28, x27, [sp, #112]
               mov   w0, #0x3                        // #3
               add   sp, sp, #0xd0
             → b     timer_stop
             }          
        5f4:   ldp   x29, x30, [sp, #192]
               ldp   x20, x19, [sp, #176]
               ldp   x22, x21, [sp, #160]
               ldp   x24, x23, [sp, #144]
               ldp   x26, x25, [sp, #128]
               ldp   x28, x27, [sp, #112]
               add   sp, sp, #0xd0
             ← ret            
