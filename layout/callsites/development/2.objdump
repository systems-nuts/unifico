
is_x86_64_init.out:	file format ELF64-x86-64


Disassembly of section .text:

0000000000400150 exit:
; {
  400150: 53                           	pushq	%rbx
  400151: 89 fb                        	movl	%edi, %ebx
; 	__funcs_on_exit();
  400153: e8 e4 14 00 00               	callq	5348 <dummy>
; 	__libc_exit_fini();
  400158: e8 e0 14 00 00               	callq	5344 <libc_exit_fini>
; 	__stdio_exit();
  40015d: 31 c0                        	xorl	%eax, %eax
  40015f: e8 0c 65 00 00               	callq	25868 <__stdio_exit_needed>
; 	_Exit(code);
  400164: 89 df                        	movl	%ebx, %edi
  400166: e8 f5 3d 00 00               	callq	15861 <_Exit>
  40016b: 00 00                        	addb	%al, (%rax)
  40016d: 00 00                        	addb	%al, (%rax)
  40016f: 00 55 48                     	addb	%dl, 72(%rbp)

0000000000400170 randlc:
; {
  400170: 55                           	pushq	%rbp
  400171: 48 89 e5                     	movq	%rsp, %rbp
  400174: 48 83 ec 60                  	subq	$96, %rsp
  400178: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
  40017c: 48 89 75 d0                  	movq	%rsi, -48(%rbp)
;       if (KS == 0) 
  400180: 83 3d 89 8c 00 00 00         	cmpl	$0, 35977(%rip)
  400187: 0f 85 d1 00 00 00            	jne	209 <randlc+0xee>
  40018d: e9 00 00 00 00               	jmp	0 <randlc+0x22>
  400192: 48 b8 00 00 00 00 00 00 f0 3f	movabsq	$4607182418800017408, %rax
;         R23 = 1.0;
  40019c: 48 89 05 75 8c 00 00         	movq	%rax, 35957(%rip)
;         R46 = 1.0;
  4001a3: 48 89 05 76 8c 00 00         	movq	%rax, 35958(%rip)
;         T23 = 1.0;
  4001aa: 48 89 05 77 8c 00 00         	movq	%rax, 35959(%rip)
;         T46 = 1.0;
  4001b1: 48 89 05 78 8c 00 00         	movq	%rax, 35960(%rip)
;         for (i=1; i<=23; i++)
  4001b8: c7 45 fc 01 00 00 00         	movl	$1, -4(%rbp)
  4001bf: f2 0f 10 05 79 65 00 00      	movsd	25977(%rip), %xmm0
  4001c7: 83 7d fc 17                  	cmpl	$23, -4(%rbp)
  4001cb: 0f 8f 35 00 00 00            	jg	53 <randlc+0x96>
  4001d1: e9 00 00 00 00               	jmp	0 <randlc+0x66>
  4001d6: f2 0f 10 0d 3a 8c 00 00      	movsd	35898(%rip), %xmm1
;           R23 = 0.50 * R23;
  4001de: f2 0f 59 c8                  	mulsd	%xmm0, %xmm1
  4001e2: f2 0f 11 0d 2e 8c 00 00      	movsd	%xmm1, 35886(%rip)
;           T23 = 2.0 * T23;
  4001ea: f2 0f 10 0d 36 8c 00 00      	movsd	35894(%rip), %xmm1
  4001f2: f2 0f 58 c9                  	addsd	%xmm1, %xmm1
  4001f6: f2 0f 11 0d 2a 8c 00 00      	movsd	%xmm1, 35882(%rip)
;         for (i=1; i<=23; i++)
  4001fe: ff 45 fc                     	incl	-4(%rbp)
  400201: e9 c1 ff ff ff               	jmp	-63 <randlc+0x57>
;         for (i=1; i<=46; i++)
  400206: c7 45 fc 01 00 00 00         	movl	$1, -4(%rbp)
  40020d: f2 0f 10 05 2b 65 00 00      	movsd	25899(%rip), %xmm0
  400215: 83 7d fc 2e                  	cmpl	$46, -4(%rbp)
  400219: 0f 8f 35 00 00 00            	jg	53 <randlc+0xe4>
  40021f: e9 00 00 00 00               	jmp	0 <randlc+0xb4>
  400224: f2 0f 10 0d f4 8b 00 00      	movsd	35828(%rip), %xmm1
;           R46 = 0.50 * R46;
  40022c: f2 0f 59 c8                  	mulsd	%xmm0, %xmm1
  400230: f2 0f 11 0d e8 8b 00 00      	movsd	%xmm1, 35816(%rip)
;           T46 = 2.0 * T46;
  400238: f2 0f 10 0d f0 8b 00 00      	movsd	35824(%rip), %xmm1
  400240: f2 0f 58 c9                  	addsd	%xmm1, %xmm1
  400244: f2 0f 11 0d e4 8b 00 00      	movsd	%xmm1, 35812(%rip)
;         for (i=1; i<=46; i++)
  40024c: ff 45 fc                     	incl	-4(%rbp)
  40024f: e9 c1 ff ff ff               	jmp	-63 <randlc+0xa5>
;         KS = 1;
  400254: c7 05 b2 8b 00 00 01 00 00 00	movl	$1, 35762(%rip)
;       T1 = R23 * *A;
  40025e: f2 0f 10 05 b2 8b 00 00      	movsd	35762(%rip), %xmm0
  400266: 48 8b 45 d0                  	movq	-48(%rbp), %rax
  40026a: f2 0f 10 08                  	movsd	(%rax), %xmm1
  40026e: f2 0f 59 c8                  	mulsd	%xmm0, %xmm1
  400272: f2 0f 11 4d e8               	movsd	%xmm1, -24(%rbp)
;       j  = T1;
  400277: f2 0f 2c c9                  	cvttsd2si	%xmm1, %ecx
  40027b: 89 4d f8                     	movl	%ecx, -8(%rbp)
;       A1 = j;
  40027e: 0f 57 c9                     	xorps	%xmm1, %xmm1
  400281: f2 0f 2a c9                  	cvtsi2sd	%ecx, %xmm1
  400285: f2 0f 11 4d d8               	movsd	%xmm1, -40(%rbp)
;       A2 = *A - T23 * A1;
  40028a: f2 0f 10 10                  	movsd	(%rax), %xmm2
  40028e: f2 0f 59 0d 92 8b 00 00      	mulsd	35730(%rip), %xmm1
  400296: f2 0f 5c d1                  	subsd	%xmm1, %xmm2
  40029a: f2 0f 11 55 e0               	movsd	%xmm2, -32(%rbp)
;       T1 = R23 * *X;
  40029f: 48 8b 45 f0                  	movq	-16(%rbp), %rax
  4002a3: f2 0f 59 00                  	mulsd	(%rax), %xmm0
  4002a7: f2 0f 11 45 e8               	movsd	%xmm0, -24(%rbp)
;       j  = T1;
  4002ac: f2 0f 2c c0                  	cvttsd2si	%xmm0, %eax
  4002b0: 89 45 f8                     	movl	%eax, -8(%rbp)
;       X1 = j;
  4002b3: 0f 57 c0                     	xorps	%xmm0, %xmm0
  4002b6: f2 0f 2a c0                  	cvtsi2sd	%eax, %xmm0
  4002ba: f2 0f 11 45 b8               	movsd	%xmm0, -72(%rbp)
;       X2 = *X - T23 * X1;
  4002bf: 48 8b 45 f0                  	movq	-16(%rbp), %rax
  4002c3: f2 0f 10 08                  	movsd	(%rax), %xmm1
;       T1 = A1 * X2 + A2 * X1;
  4002c7: f2 0f 59 d0                  	mulsd	%xmm0, %xmm2
;       X2 = *X - T23 * X1;
  4002cb: f2 0f 59 05 55 8b 00 00      	mulsd	35669(%rip), %xmm0
  4002d3: f2 0f 5c c8                  	subsd	%xmm0, %xmm1
  4002d7: f2 0f 11 4d c0               	movsd	%xmm1, -64(%rbp)
  4002dc: f2 0f 10 45 d8               	movsd	-40(%rbp), %xmm0
;       T1 = A1 * X2 + A2 * X1;
  4002e1: f2 0f 59 c1                  	mulsd	%xmm1, %xmm0
  4002e5: f2 0f 58 c2                  	addsd	%xmm2, %xmm0
  4002e9: f2 0f 11 45 e8               	movsd	%xmm0, -24(%rbp)
  4002ee: f2 0f 10 15 22 8b 00 00      	movsd	35618(%rip), %xmm2
;       j  = R23 * T1;
  4002f6: f2 0f 59 d0                  	mulsd	%xmm0, %xmm2
  4002fa: f2 0f 2c c2                  	cvttsd2si	%xmm2, %eax
  4002fe: 89 45 f8                     	movl	%eax, -8(%rbp)
;       T2 = j;
  400301: 0f 57 d2                     	xorps	%xmm2, %xmm2
  400304: f2 0f 2a d0                  	cvtsi2sd	%eax, %xmm2
  400308: f2 0f 11 55 a0               	movsd	%xmm2, -96(%rbp)
;       Z = T1 - T23 * T2;
  40030d: f2 0f 59 15 13 8b 00 00      	mulsd	35603(%rip), %xmm2
  400315: f2 0f 5c c2                  	subsd	%xmm2, %xmm0
  400319: f2 0f 11 45 c8               	movsd	%xmm0, -56(%rbp)
;       T3 = T23 * Z + A2 * X2;
  40031e: f2 0f 59 05 02 8b 00 00      	mulsd	35586(%rip), %xmm0
  400326: f2 0f 59 4d e0               	mulsd	-32(%rbp), %xmm1
  40032b: f2 0f 58 c8                  	addsd	%xmm0, %xmm1
  40032f: f2 0f 11 4d a8               	movsd	%xmm1, -88(%rbp)
  400334: f2 0f 10 05 e4 8a 00 00      	movsd	35556(%rip), %xmm0
;       j  = R46 * T3;
  40033c: f2 0f 59 c1                  	mulsd	%xmm1, %xmm0
  400340: f2 0f 2c c0                  	cvttsd2si	%xmm0, %eax
  400344: 89 45 f8                     	movl	%eax, -8(%rbp)
;       T4 = j;
  400347: 0f 57 c0                     	xorps	%xmm0, %xmm0
  40034a: f2 0f 2a c0                  	cvtsi2sd	%eax, %xmm0
  40034e: f2 0f 11 45 b0               	movsd	%xmm0, -80(%rbp)
;       *X = T3 - T46 * T4;
  400353: f2 0f 59 05 d5 8a 00 00      	mulsd	35541(%rip), %xmm0
  40035b: f2 0f 5c c8                  	subsd	%xmm0, %xmm1
  40035f: 48 8b 45 f0                  	movq	-16(%rbp), %rax
  400363: f2 0f 11 08                  	movsd	%xmm1, (%rax)
;       return(R46 * *X);
  400367: f2 0f 10 05 b1 8a 00 00      	movsd	35505(%rip), %xmm0
  40036f: 48 8b 45 f0                  	movq	-16(%rbp), %rax
  400373: f2 0f 59 00                  	mulsd	(%rax), %xmm0
  400377: 48 83 c4 60                  	addq	$96, %rsp
  40037b: 5d                           	popq	%rbp
  40037c: c3                           	retq
  40037d: 0f 1f 00                     	nopl	(%rax)

0000000000400380 create_seq:
; {
  400380: 55                           	pushq	%rbp
  400381: 48 89 e5                     	movq	%rsp, %rbp
  400384: 41 57                        	pushq	%r15
  400386: 53                           	pushq	%rbx
  400387: 48 83 ec 30                  	subq	$48, %rsp
  40038b: f2 0f 11 45 c8               	movsd	%xmm0, -56(%rbp)
  400390: f2 0f 11 4d d0               	movsd	%xmm1, -48(%rbp)
;         k = MAX_KEY/4;
  400395: c7 45 dc 00 02 00 00         	movl	$512, -36(%rbp)
; 	for (i=0; i<NUM_KEYS; i++)
  40039c: c7 45 ec 00 00 00 00         	movl	$0, -20(%rbp)
  4003a3: 4c 8d 7d c8                  	leaq	-56(%rbp), %r15
  4003a7: 48 8d 5d d0                  	leaq	-48(%rbp), %rbx
  4003ab: 81 7d ec ff ff 00 00         	cmpl	$65535, -20(%rbp)
  4003b2: 0f 8f 7a 00 00 00            	jg	122 <create_seq+0xb2>
  4003b8: e9 00 00 00 00               	jmp	0 <create_seq+0x3d>
; 	    x = randlc(&seed, &a);
  4003bd: 4c 89 ff                     	movq	%r15, %rdi
  4003c0: 48 89 de                     	movq	%rbx, %rsi
  4003c3: e8 a8 fd ff ff               	callq	-600 <randlc>
  4003c8: f2 0f 11 45 e0               	movsd	%xmm0, -32(%rbp)
; 	    x += randlc(&seed, &a);
  4003cd: 4c 89 ff                     	movq	%r15, %rdi
  4003d0: 48 89 de                     	movq	%rbx, %rsi
  4003d3: e8 98 fd ff ff               	callq	-616 <randlc>
  4003d8: f2 0f 58 45 e0               	addsd	-32(%rbp), %xmm0
  4003dd: f2 0f 11 45 e0               	movsd	%xmm0, -32(%rbp)
;     	    x += randlc(&seed, &a);
  4003e2: 4c 89 ff                     	movq	%r15, %rdi
  4003e5: 48 89 de                     	movq	%rbx, %rsi
  4003e8: e8 83 fd ff ff               	callq	-637 <randlc>
  4003ed: f2 0f 58 45 e0               	addsd	-32(%rbp), %xmm0
  4003f2: f2 0f 11 45 e0               	movsd	%xmm0, -32(%rbp)
; 	    x += randlc(&seed, &a);  
  4003f7: 4c 89 ff                     	movq	%r15, %rdi
  4003fa: 48 89 de                     	movq	%rbx, %rsi
  4003fd: e8 6e fd ff ff               	callq	-658 <randlc>
  400402: f2 0f 58 45 e0               	addsd	-32(%rbp), %xmm0
  400407: f2 0f 11 45 e0               	movsd	%xmm0, -32(%rbp)
;             key_array[i] = k*x;
  40040c: 0f 57 c9                     	xorps	%xmm1, %xmm1
  40040f: f2 0f 2a 4d dc               	cvtsi2sdl	-36(%rbp), %xmm1
  400414: f2 0f 59 c8                  	mulsd	%xmm0, %xmm1
  400418: f2 0f 2c c1                  	cvttsd2si	%xmm1, %eax
  40041c: 48 63 4d ec                  	movslq	-20(%rbp), %rcx
  400420: 48 8d 15 29 9a 00 00         	leaq	39465(%rip), %rdx
  400427: 89 04 8a                     	movl	%eax, (%rdx,%rcx,4)
; 	for (i=0; i<NUM_KEYS; i++)
  40042a: ff 45 ec                     	incl	-20(%rbp)
  40042d: e9 79 ff ff ff               	jmp	-135 <create_seq+0x2b>
; }
  400432: 48 83 c4 30                  	addq	$48, %rsp
  400436: 5b                           	popq	%rbx
  400437: 41 5f                        	popq	%r15
  400439: 5d                           	popq	%rbp
  40043a: c3                           	retq
  40043b: 0f 1f 44 00 00               	nopl	(%rax,%rax)

0000000000400440 full_verify:
; {
  400440: 55                           	pushq	%rbp
  400441: 48 89 e5                     	movq	%rsp, %rbp
  400444: 48 83 ec 10                  	subq	$16, %rsp
;     for( i=0; i<NUM_KEYS; i++ )
  400448: c7 45 fc 00 00 00 00         	movl	$0, -4(%rbp)
  40044f: 4c 8d 05 fa 99 04 00         	leaq	301562(%rip), %r8
  400456: 48 8d 0d f3 99 00 00         	leaq	39411(%rip), %rcx
  40045d: 81 7d fc ff ff 00 00         	cmpl	$65535, -4(%rbp)
  400464: 0f 8f 2d 00 00 00            	jg	45 <full_verify+0x57>
  40046a: e9 00 00 00 00               	jmp	0 <full_verify+0x2f>
;         key_array[--key_buff_ptr_global[key_buff2[i]]] = key_buff2[i];
  40046f: 48 63 55 fc                  	movslq	-4(%rbp), %rdx
  400473: 49 63 14 90                  	movslq	(%r8,%rdx,4), %rdx
  400477: 48 8b 35 aa ca 08 00         	movq	576170(%rip), %rsi
  40047e: 48 63 3c 96                  	movslq	(%rsi,%rdx,4), %rdi
  400482: 48 8d 47 ff                  	leaq	-1(%rdi), %rax
  400486: 89 04 96                     	movl	%eax, (%rsi,%rdx,4)
  400489: 89 d0                        	movl	%edx, %eax
  40048b: 89 54 b9 fc                  	movl	%edx, -4(%rcx,%rdi,4)
;     for( i=0; i<NUM_KEYS; i++ )
  40048f: ff 45 fc                     	incl	-4(%rbp)
  400492: e9 c6 ff ff ff               	jmp	-58 <full_verify+0x1d>
;     j = 0;
  400497: c7 45 f8 00 00 00 00         	movl	$0, -8(%rbp)
;     for( i=1; i<NUM_KEYS; i++ )
  40049e: c7 45 fc 01 00 00 00         	movl	$1, -4(%rbp)
  4004a5: 48 8d 05 a4 99 00 00         	leaq	39332(%rip), %rax
  4004ac: eb 08                        	jmp	8 <full_verify+0x76>
  4004ae: ff 45 fc                     	incl	-4(%rbp)
  4004b1: e9 00 00 00 00               	jmp	0 <full_verify+0x76>
  4004b6: 81 7d fc ff ff 00 00         	cmpl	$65535, -4(%rbp)
  4004bd: 0f 8f 20 00 00 00            	jg	32 <full_verify+0xa3>
  4004c3: e9 00 00 00 00               	jmp	0 <full_verify+0x88>
;         if( key_array[i-1] > key_array[i] )
  4004c8: 48 63 4d fc                  	movslq	-4(%rbp), %rcx
  4004cc: 8b 54 88 fc                  	movl	-4(%rax,%rcx,4), %edx
  4004d0: 3b 14 88                     	cmpl	(%rax,%rcx,4), %edx
  4004d3: 0f 8e d5 ff ff ff            	jle	-43 <full_verify+0x6e>
  4004d9: e9 00 00 00 00               	jmp	0 <full_verify+0x9e>
;             j++;
  4004de: ff 45 f8                     	incl	-8(%rbp)
  4004e1: eb cb                        	jmp	-53 <full_verify+0x6e>
;     if( j != 0 )
  4004e3: 83 7d f8 00                  	cmpl	$0, -8(%rbp)
  4004e7: 0f 84 1c 00 00 00            	je	28 <full_verify+0xc9>
  4004ed: e9 00 00 00 00               	jmp	0 <full_verify+0xb2>
;                 (long)j );
  4004f2: 48 63 75 f8                  	movslq	-8(%rbp), %rsi
;         printf( "Full_verify: number of keys out of sort: %ld\n",
  4004f6: 48 8d 3d ab 62 00 00         	leaq	25259(%rip), %rdi
  4004fd: 31 c0                        	xorl	%eax, %eax
  4004ff: e8 dc 13 00 00               	callq	5084 <printf>
;     }
  400504: e9 06 00 00 00               	jmp	6 <full_verify+0xcf>
;         passed_verification++;
  400509: ff 05 29 ca 08 00            	incl	576041(%rip)
; }
  40050f: 48 83 c4 10                  	addq	$16, %rsp
  400513: 5d                           	popq	%rbp
  400514: c3                           	retq
  400515: 66 66 2e 0f 1f 84 00 00 00 00 00     	nopw	%cs:(%rax,%rax)

0000000000400520 rank:
; {
  400520: 55                           	pushq	%rbp
  400521: 48 89 e5                     	movq	%rsp, %rbp
  400524: 41 57                        	pushq	%r15
  400526: 53                           	pushq	%rbx
  400527: 48 83 ec 30                  	subq	$48, %rsp
  40052b: 89 7d e8                     	movl	%edi, -24(%rbp)
;     int shift = MAX_KEY_LOG_2 - NUM_BUCKETS_LOG_2;
  40052e: c7 45 dc 02 00 00 00         	movl	$2, -36(%rbp)
;     key_array[iteration] = iteration;
  400535: 48 8d 05 14 99 00 00         	leaq	39188(%rip), %rax
  40053c: 48 63 cf                     	movslq	%edi, %rcx
  40053f: 89 ca                        	movl	%ecx, %edx
  400541: 89 0c 88                     	movl	%ecx, (%rax,%rcx,4)
  400544: be 00 08 00 00               	movl	$2048, %esi
;     key_array[iteration+MAX_ITERATIONS] = MAX_KEY - iteration;
  400549: 29 ce                        	subl	%ecx, %esi
  40054b: 89 74 88 28                  	movl	%esi, 40(%rax,%rcx,4)
;     for( i=0; i<TEST_ARRAY_SIZE; i++ )
  40054f: c7 45 ec 00 00 00 00         	movl	$0, -20(%rbp)
  400556: 48 8d 0d 83 c9 08 00         	leaq	575875(%rip), %rcx
  40055d: 48 8d 15 5c c9 08 00         	leaq	575836(%rip), %rdx
  400564: 83 7d ec 04                  	cmpl	$4, -20(%rbp)
  400568: 0f 8f 1d 00 00 00            	jg	29 <rank+0x6b>
  40056e: e9 00 00 00 00               	jmp	0 <rank+0x53>
;         partial_verify_vals[i] = key_array[test_index_array[i]];
  400573: 48 63 75 ec                  	movslq	-20(%rbp), %rsi
  400577: 48 63 3c b1                  	movslq	(%rcx,%rsi,4), %rdi
  40057b: 8b 3c b8                     	movl	(%rax,%rdi,4), %edi
  40057e: 89 3c b2                     	movl	%edi, (%rdx,%rsi,4)
;     for( i=0; i<TEST_ARRAY_SIZE; i++ )
  400581: ff c6                        	incl	%esi
  400583: 89 75 ec                     	movl	%esi, -20(%rbp)
  400586: e9 d9 ff ff ff               	jmp	-39 <rank+0x44>
;     for( i=0; i<NUM_BUCKETS; i++ )  
  40058b: c7 45 ec 00 00 00 00         	movl	$0, -20(%rbp)
  400592: 48 8d 05 b7 c0 08 00         	leaq	573623(%rip), %rax
  400599: 81 7d ec ff 01 00 00         	cmpl	$511, -20(%rbp)
  4005a0: 0f 8f 1a 00 00 00            	jg	26 <rank+0xa0>
  4005a6: e9 00 00 00 00               	jmp	0 <rank+0x8b>
;         bucket_size[i] = 0;
  4005ab: 48 63 4d ec                  	movslq	-20(%rbp), %rcx
  4005af: c7 04 88 00 00 00 00         	movl	$0, (%rax,%rcx,4)
;     for( i=0; i<NUM_BUCKETS; i++ )  
  4005b6: ff c1                        	incl	%ecx
  4005b8: 89 4d ec                     	movl	%ecx, -20(%rbp)
  4005bb: e9 d9 ff ff ff               	jmp	-39 <rank+0x79>
;     for( i=0; i<NUM_KEYS; i++ )
  4005c0: c7 45 ec 00 00 00 00         	movl	$0, -20(%rbp)
  4005c7: 48 8d 05 82 98 00 00         	leaq	39042(%rip), %rax
  4005ce: 48 8d 15 7b c0 08 00         	leaq	573563(%rip), %rdx
  4005d5: 81 7d ec ff ff 00 00         	cmpl	$65535, -20(%rbp)
  4005dc: 0f 8f 26 00 00 00            	jg	38 <rank+0xe8>
  4005e2: e9 00 00 00 00               	jmp	0 <rank+0xc7>
;         bucket_size[key_array[i] >> shift]++;
  4005e7: 48 63 4d ec                  	movslq	-20(%rbp), %rcx
  4005eb: 8b 34 88                     	movl	(%rax,%rcx,4), %esi
  4005ee: 89 cf                        	movl	%ecx, %edi
  4005f0: 0f b6 4d dc                  	movzbl	-36(%rbp), %ecx
  4005f4: d3 fe                        	sarl	%cl, %esi
  4005f6: 48 63 ce                     	movslq	%esi, %rcx
  4005f9: ff 04 8a                     	incl	(%rdx,%rcx,4)
;     for( i=0; i<NUM_KEYS; i++ )
  4005fc: 89 f9                        	movl	%edi, %ecx
  4005fe: ff c1                        	incl	%ecx
  400600: 89 4d ec                     	movl	%ecx, -20(%rbp)
  400603: e9 cd ff ff ff               	jmp	-51 <rank+0xb5>
;     bucket_ptrs[0] = 0;
  400608: c7 05 3e b8 08 00 00 00 00 00	movl	$0, 571454(%rip)
;     for( i=1; i< NUM_BUCKETS; i++ )  
  400612: c7 45 ec 01 00 00 00         	movl	$1, -20(%rbp)
  400619: 48 8d 05 30 b8 08 00         	leaq	571440(%rip), %rax
  400620: 48 8d 0d 29 c0 08 00         	leaq	573481(%rip), %rcx
  400627: 81 7d ec ff 01 00 00         	cmpl	$511, -20(%rbp)
  40062e: 0f 8f 1e 00 00 00            	jg	30 <rank+0x132>
  400634: e9 00 00 00 00               	jmp	0 <rank+0x119>
;         bucket_ptrs[i] = bucket_ptrs[i-1] + bucket_size[i-1];
  400639: 48 63 55 ec                  	movslq	-20(%rbp), %rdx
  40063d: 8b 74 90 fc                  	movl	-4(%rax,%rdx,4), %esi
  400641: 03 74 91 fc                  	addl	-4(%rcx,%rdx,4), %esi
  400645: 89 34 90                     	movl	%esi, (%rax,%rdx,4)
;     for( i=1; i< NUM_BUCKETS; i++ )  
  400648: ff c2                        	incl	%edx
  40064a: 89 55 ec                     	movl	%edx, -20(%rbp)
  40064d: e9 d5 ff ff ff               	jmp	-43 <rank+0x107>
;     for( i=0; i<NUM_KEYS; i++ )  
  400652: c7 45 ec 00 00 00 00         	movl	$0, -20(%rbp)
  400659: 4c 8d 05 f0 97 00 00         	leaq	38896(%rip), %r8
  400660: 48 8d 15 e9 b7 08 00         	leaq	571369(%rip), %rdx
  400667: 48 8d 35 e2 97 04 00         	leaq	301026(%rip), %rsi
  40066e: 81 7d ec ff ff 00 00         	cmpl	$65535, -20(%rbp)
  400675: 0f 8f 38 00 00 00            	jg	56 <rank+0x193>
  40067b: e9 00 00 00 00               	jmp	0 <rank+0x160>
;         key = key_array[i];
  400680: 48 63 4d ec                  	movslq	-20(%rbp), %rcx
  400684: 41 8b 04 88                  	movl	(%r8,%rcx,4), %eax
  400688: 89 cb                        	movl	%ecx, %ebx
  40068a: 89 45 c4                     	movl	%eax, -60(%rbp)
;         key_buff2[bucket_ptrs[key >> shift]++] = key;
  40068d: 0f b6 4d dc                  	movzbl	-36(%rbp), %ecx
  400691: 89 c7                        	movl	%eax, %edi
  400693: d3 ff                        	sarl	%cl, %edi
  400695: 48 63 cf                     	movslq	%edi, %rcx
  400698: 48 63 3c 8a                  	movslq	(%rdx,%rcx,4), %rdi
  40069c: 89 04 be                     	movl	%eax, (%rsi,%rdi,4)
  40069f: 89 f8                        	movl	%edi, %eax
  4006a1: 8d 40 01                     	leal	1(%rax), %eax
  4006a4: 89 04 8a                     	movl	%eax, (%rdx,%rcx,4)
;     for( i=0; i<NUM_KEYS; i++ )  
  4006a7: 89 d8                        	movl	%ebx, %eax
  4006a9: ff c0                        	incl	%eax
  4006ab: 89 45 ec                     	movl	%eax, -20(%rbp)
  4006ae: e9 bb ff ff ff               	jmp	-69 <rank+0x14e>
;     key_buff_ptr2 = key_buff2;
  4006b3: 48 8d 05 96 97 04 00         	leaq	300950(%rip), %rax
  4006ba: 48 89 45 c8                  	movq	%rax, -56(%rbp)
;     for( i=0; i<MAX_KEY; i++ )
  4006be: c7 45 ec 00 00 00 00         	movl	$0, -20(%rbp)
  4006c5: 48 8d 05 84 97 08 00         	leaq	563076(%rip), %rax
  4006cc: 81 7d ec ff 07 00 00         	cmpl	$2047, -20(%rbp)
  4006d3: 0f 8f 1a 00 00 00            	jg	26 <rank+0x1d3>
  4006d9: e9 00 00 00 00               	jmp	0 <rank+0x1be>
;         key_buff1[i] = 0;
  4006de: 48 63 4d ec                  	movslq	-20(%rbp), %rcx
  4006e2: c7 04 88 00 00 00 00         	movl	$0, (%rax,%rcx,4)
;     for( i=0; i<MAX_KEY; i++ )
  4006e9: ff c1                        	incl	%ecx
  4006eb: 89 4d ec                     	movl	%ecx, -20(%rbp)
  4006ee: e9 d9 ff ff ff               	jmp	-39 <rank+0x1ac>
;     key_buff_ptr = key_buff1;
  4006f3: 48 8d 05 56 97 08 00         	leaq	563030(%rip), %rax
  4006fa: 48 89 45 d0                  	movq	%rax, -48(%rbp)
;     for( i=0; i<NUM_KEYS; i++ )
  4006fe: c7 45 ec 00 00 00 00         	movl	$0, -20(%rbp)
  400705: 81 7d ec ff ff 00 00         	cmpl	$65535, -20(%rbp)
  40070c: 0f 8f 20 00 00 00            	jg	32 <rank+0x212>
  400712: e9 00 00 00 00               	jmp	0 <rank+0x1f7>
;         key_buff_ptr[key_buff_ptr2[i]]++;  /* Now they have individual key   */
  400717: 48 8b 45 d0                  	movq	-48(%rbp), %rax
  40071b: 48 8b 4d c8                  	movq	-56(%rbp), %rcx
  40071f: 48 63 55 ec                  	movslq	-20(%rbp), %rdx
  400723: 48 63 0c 91                  	movslq	(%rcx,%rdx,4), %rcx
  400727: ff 04 88                     	incl	(%rax,%rcx,4)
;     for( i=0; i<NUM_KEYS; i++ )
  40072a: ff 45 ec                     	incl	-20(%rbp)
  40072d: e9 d3 ff ff ff               	jmp	-45 <rank+0x1e5>
;     for( i=0; i<MAX_KEY-1; i++ )   
  400732: c7 45 ec 00 00 00 00         	movl	$0, -20(%rbp)
  400739: 81 7d ec fe 07 00 00         	cmpl	$2046, -20(%rbp)
  400740: 0f 8f 1c 00 00 00            	jg	28 <rank+0x242>
  400746: e9 00 00 00 00               	jmp	0 <rank+0x22b>
;         key_buff_ptr[i+1] += key_buff_ptr[i];  
  40074b: 48 8b 45 d0                  	movq	-48(%rbp), %rax
  40074f: 48 63 4d ec                  	movslq	-20(%rbp), %rcx
  400753: 8b 14 88                     	movl	(%rax,%rcx,4), %edx
  400756: 01 54 88 04                  	addl	%edx, 4(%rax,%rcx,4)
;     for( i=0; i<MAX_KEY-1; i++ )   
  40075a: ff 45 ec                     	incl	-20(%rbp)
  40075d: e9 d7 ff ff ff               	jmp	-41 <rank+0x219>
;     for( i=0; i<TEST_ARRAY_SIZE; i++ )
  400762: c7 45 ec 00 00 00 00         	movl	$0, -20(%rbp)
  400769: 48 8d 1d 50 c7 08 00         	leaq	575312(%rip), %rbx
  400770: 4c 8d 3d 89 c7 08 00         	leaq	575369(%rip), %r15
  400777: eb 08                        	jmp	8 <rank+0x261>
  400779: ff 45 ec                     	incl	-20(%rbp)
  40077c: e9 00 00 00 00               	jmp	0 <rank+0x261>
  400781: 83 7d ec 04                  	cmpl	$4, -20(%rbp)
  400785: 0f 8f d6 00 00 00            	jg	214 <rank+0x341>
  40078b: e9 00 00 00 00               	jmp	0 <rank+0x270>
;         k = partial_verify_vals[i];          /* test vals were put here */
  400790: 48 63 45 ec                  	movslq	-20(%rbp), %rax
  400794: 8b 04 83                     	movl	(%rbx,%rax,4), %eax
  400797: 89 45 d8                     	movl	%eax, -40(%rbp)
;         if( 0 < k  &&  k <= NUM_KEYS-1 )
  40079a: 85 c0                        	testl	%eax, %eax
  40079c: 0f 8e d7 ff ff ff            	jle	-41 <rank+0x259>
  4007a2: e9 00 00 00 00               	jmp	0 <rank+0x287>
  4007a7: 81 7d d8 ff ff 00 00         	cmpl	$65535, -40(%rbp)
  4007ae: 0f 8f c5 ff ff ff            	jg	-59 <rank+0x259>
  4007b4: e9 00 00 00 00               	jmp	0 <rank+0x299>
;             INT_TYPE key_rank = key_buff_ptr[k-1];
  4007b9: 48 8b 45 d0                  	movq	-48(%rbp), %rax
  4007bd: 48 63 4d d8                  	movslq	-40(%rbp), %rcx
  4007c1: 8b 44 88 fc                  	movl	-4(%rax,%rcx,4), %eax
  4007c5: 89 45 e0                     	movl	%eax, -32(%rbp)
;             int failed = 0;
  4007c8: c7 45 e4 00 00 00 00         	movl	$0, -28(%rbp)
;                     if( i <= 2 )
  4007cf: 83 7d ec 02                  	cmpl	$2, -20(%rbp)
  4007d3: 0f 8f 2a 00 00 00            	jg	42 <rank+0x2e3>
  4007d9: e9 00 00 00 00               	jmp	0 <rank+0x2be>
;                         if( key_rank != test_rank_array[i]+iteration )
  4007de: 48 63 45 ec                  	movslq	-20(%rbp), %rax
  4007e2: 41 8b 04 87                  	movl	(%r15,%rax,4), %eax
  4007e6: 03 45 e8                     	addl	-24(%rbp), %eax
  4007e9: 39 45 e0                     	cmpl	%eax, -32(%rbp)
  4007ec: 0f 84 36 00 00 00            	je	54 <rank+0x308>
  4007f2: e9 00 00 00 00               	jmp	0 <rank+0x2d7>
;                             failed = 1;
  4007f7: c7 45 e4 01 00 00 00         	movl	$1, -28(%rbp)
  4007fe: e9 36 00 00 00               	jmp	54 <rank+0x319>
;                         if( key_rank != test_rank_array[i]-iteration )
  400803: 48 63 45 ec                  	movslq	-20(%rbp), %rax
  400807: 41 8b 04 87                  	movl	(%r15,%rax,4), %eax
  40080b: 2b 45 e8                     	subl	-24(%rbp), %eax
  40080e: 39 45 e0                     	cmpl	%eax, -32(%rbp)
  400811: 0f 84 1c 00 00 00            	je	28 <rank+0x313>
  400817: e9 00 00 00 00               	jmp	0 <rank+0x2fc>
;                             failed = 1;
  40081c: c7 45 e4 01 00 00 00         	movl	$1, -28(%rbp)
  400823: e9 11 00 00 00               	jmp	17 <rank+0x319>
;                             passed_verification++;
  400828: ff 05 0a c7 08 00            	incl	575242(%rip)
  40082e: e9 06 00 00 00               	jmp	6 <rank+0x319>
;                             passed_verification++;
  400833: ff 05 ff c6 08 00            	incl	575231(%rip)
;             if( failed == 1 )
  400839: 83 7d e4 01                  	cmpl	$1, -28(%rbp)
  40083d: 0f 85 36 ff ff ff            	jne	-202 <rank+0x259>
  400843: e9 00 00 00 00               	jmp	0 <rank+0x328>
;                          iteration, (int)i );
  400848: 8b 75 e8                     	movl	-24(%rbp), %esi
  40084b: 8b 55 ec                     	movl	-20(%rbp), %edx
  40084e: 31 c0                        	xorl	%eax, %eax
;                 printf( "Failed partial verification: "
  400850: 48 8d 3d 7f 5f 00 00         	leaq	24447(%rip), %rdi
  400857: e8 84 10 00 00               	callq	4228 <printf>
  40085c: e9 18 ff ff ff               	jmp	-232 <rank+0x259>
;     if( iteration == MAX_ITERATIONS ) 
  400861: 83 7d e8 0a                  	cmpl	$10, -24(%rbp)
  400865: 0f 85 10 00 00 00            	jne	16 <rank+0x35b>
  40086b: e9 00 00 00 00               	jmp	0 <rank+0x350>
;         key_buff_ptr_global = key_buff_ptr;
  400870: 48 8b 45 d0                  	movq	-48(%rbp), %rax
  400874: 48 89 05 ad c6 08 00         	movq	%rax, 575149(%rip)
; }      
  40087b: 48 83 c4 30                  	addq	$48, %rsp
  40087f: 5b                           	popq	%rbx
  400880: 41 5f                        	popq	%r15
  400882: 5d                           	popq	%rbp
  400883: c3                           	retq
  400884: 66 66 66 2e 0f 1f 84 00 00 00 00 00  	nopw	%cs:(%rax,%rax)

0000000000400890 main:
; {
  400890: 55                           	pushq	%rbp
  400891: 48 89 e5                     	movq	%rsp, %rbp
  400894: 53                           	pushq	%rbx
  400895: 48 81 ec 98 00 00 00         	subq	$152, %rsp
  40089c: c7 45 c0 00 00 00 00         	movl	$0, -64(%rbp)
  4008a3: 89 7d c4                     	movl	%edi, -60(%rbp)
  4008a6: 48 89 75 b8                  	movq	%rsi, -72(%rbp)
;     timer_on = 0;            
  4008aa: c7 45 f4 00 00 00 00         	movl	$0, -12(%rbp)
;     if ((fp = fopen("timer.flag", "r")) != NULL) {
  4008b1: 48 8d 3d 56 5f 00 00         	leaq	24406(%rip), %rdi
  4008b8: 48 8d 35 5a 5f 00 00         	leaq	24410(%rip), %rsi
  4008bf: e8 70 0f 00 00               	callq	3952 <fopen64>
  4008c4: 48 89 45 c8                  	movq	%rax, -56(%rbp)
  4008c8: 48 85 c0                     	testq	%rax, %rax
  4008cb: 0f 84 15 00 00 00            	je	21 <main+0x56>
  4008d1: e9 00 00 00 00               	jmp	0 <main+0x46>
;         fclose(fp);
  4008d6: 48 8b 7d c8                  	movq	-56(%rbp), %rdi
  4008da: e8 8e 0d 00 00               	callq	3470 <fclose>
;         timer_on = 1;
  4008df: c7 45 f4 01 00 00 00         	movl	$1, -12(%rbp)
  4008e6: 31 ff                        	xorl	%edi, %edi
;     timer_clear( 0 );
  4008e8: e8 93 03 00 00               	callq	915 <timer_clear>
;     if (timer_on) {
  4008ed: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  4008f1: 0f 84 23 00 00 00            	je	35 <main+0x8a>
  4008f7: e9 00 00 00 00               	jmp	0 <main+0x6c>
  4008fc: bf 01 00 00 00               	movl	$1, %edi
;         timer_clear( 1 );
  400901: e8 7a 03 00 00               	callq	890 <timer_clear>
  400906: bf 02 00 00 00               	movl	$2, %edi
;         timer_clear( 2 );
  40090b: e8 70 03 00 00               	callq	880 <timer_clear>
  400910: bf 03 00 00 00               	movl	$3, %edi
;         timer_clear( 3 );
  400915: e8 66 03 00 00               	callq	870 <timer_clear>
;     if (timer_on) timer_start( 3 );
  40091a: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  40091e: 0f 84 0f 00 00 00            	je	15 <main+0xa3>
  400924: e9 00 00 00 00               	jmp	0 <main+0x99>
  400929: bf 03 00 00 00               	movl	$3, %edi
  40092e: e8 7d 03 00 00               	callq	893 <timer_start>
;     for( i=0; i<TEST_ARRAY_SIZE; i++ )
  400933: c7 45 ec 00 00 00 00         	movl	$0, -20(%rbp)
  40093a: 48 8d 05 4f 82 00 00         	leaq	33359(%rip), %rax
  400941: 48 8d 0d 98 c5 08 00         	leaq	574872(%rip), %rcx
  400948: 48 8d 15 61 82 00 00         	leaq	33377(%rip), %rdx
  40094f: 48 8d 35 aa c5 08 00         	leaq	574890(%rip), %rsi
  400956: 83 7d ec 04                  	cmpl	$4, -20(%rbp)
  40095a: 0f 8f 1d 00 00 00            	jg	29 <main+0xed>
  400960: e9 00 00 00 00               	jmp	0 <main+0xd5>
;                 test_index_array[i] = S_test_index_array[i];
  400965: 48 63 7d ec                  	movslq	-20(%rbp), %rdi
  400969: 8b 1c b8                     	movl	(%rax,%rdi,4), %ebx
  40096c: 89 1c b9                     	movl	%ebx, (%rcx,%rdi,4)
;                 test_rank_array[i]  = S_test_rank_array[i];
  40096f: 8b 1c ba                     	movl	(%rdx,%rdi,4), %ebx
  400972: 89 1c be                     	movl	%ebx, (%rsi,%rdi,4)
;     for( i=0; i<TEST_ARRAY_SIZE; i++ )
  400975: ff 45 ec                     	incl	-20(%rbp)
  400978: e9 d9 ff ff ff               	jmp	-39 <main+0xc6>
;     printf
  40097d: 48 8d 3d 97 5e 00 00         	leaq	24215(%rip), %rdi
  400984: 31 c0                        	xorl	%eax, %eax
  400986: 89 c3                        	movl	%eax, %ebx
  400988: e8 53 0f 00 00               	callq	3923 <printf>
;     printf( " Size:  %ld  (class %c)\n", (long)TOTAL_KEYS, CLASS );
  40098d: 48 8d 3d c0 5e 00 00         	leaq	24256(%rip), %rdi
  400994: be 00 00 01 00               	movl	$65536, %esi
  400999: ba 53 00 00 00               	movl	$83, %edx
  40099e: 89 d8                        	movl	%ebx, %eax
  4009a0: e8 3b 0f 00 00               	callq	3899 <printf>
;     printf( " Iterations:   %d\n", MAX_ITERATIONS );
  4009a5: 48 8d 3d c1 5e 00 00         	leaq	24257(%rip), %rdi
  4009ac: be 0a 00 00 00               	movl	$10, %esi
  4009b1: 89 d8                        	movl	%ebx, %eax
  4009b3: e8 28 0f 00 00               	callq	3880 <printf>
;     if (timer_on) timer_start( 1 );
  4009b8: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  4009bc: 0f 84 0f 00 00 00            	je	15 <main+0x141>
  4009c2: e9 00 00 00 00               	jmp	0 <main+0x137>
  4009c7: bf 01 00 00 00               	movl	$1, %edi
  4009cc: e8 df 02 00 00               	callq	735 <timer_start>
  4009d1: f2 0f 10 05 6f 5d 00 00      	movsd	23919(%rip), %xmm0
  4009d9: f2 0f 10 0d 6f 5d 00 00      	movsd	23919(%rip), %xmm1
;     create_seq( 314159265.00,                    /* Random number gen seed */
  4009e1: e8 9a f9 ff ff               	callq	-1638 <create_seq>
;     if (timer_on) timer_stop( 1 );
  4009e6: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  4009ea: 0f 84 0f 00 00 00            	je	15 <main+0x16f>
  4009f0: e9 00 00 00 00               	jmp	0 <main+0x165>
  4009f5: bf 01 00 00 00               	movl	$1, %edi
  4009fa: e8 01 03 00 00               	callq	769 <timer_stop>
  4009ff: bf 01 00 00 00               	movl	$1, %edi
;     rank( 1 );  
  400a04: e8 17 fb ff ff               	callq	-1257 <rank>
;     passed_verification = 0;
  400a09: c7 05 25 c5 08 00 00 00 00 00	movl	$0, 574757(%rip)
  400a13: 31 ff                        	xorl	%edi, %edi
;     timer_start( 0 );
  400a15: e8 96 02 00 00               	callq	662 <timer_start>
;     for( iteration=1; iteration<=MAX_ITERATIONS; iteration++ )
  400a1a: c7 45 f0 01 00 00 00         	movl	$1, -16(%rbp)
  400a21: 83 7d f0 0a                  	cmpl	$10, -16(%rbp)
  400a25: 0f 8f 15 00 00 00            	jg	21 <main+0x1b0>
  400a2b: e9 00 00 00 00               	jmp	0 <main+0x1a0>
;         rank( iteration );
  400a30: 8b 7d f0                     	movl	-16(%rbp), %edi
  400a33: e8 e8 fa ff ff               	callq	-1304 <rank>
;     for( iteration=1; iteration<=MAX_ITERATIONS; iteration++ )
  400a38: ff 45 f0                     	incl	-16(%rbp)
  400a3b: e9 e1 ff ff ff               	jmp	-31 <main+0x191>
  400a40: 31 db                        	xorl	%ebx, %ebx
;     timer_stop( 0 );
  400a42: 89 df                        	movl	%ebx, %edi
  400a44: e8 b7 02 00 00               	callq	695 <timer_stop>
;     timecounter = timer_read( 0 );
  400a49: 89 df                        	movl	%ebx, %edi
  400a4b: e8 00 03 00 00               	callq	768 <timer_read>
  400a50: f2 0f 11 45 d8               	movsd	%xmm0, -40(%rbp)
;     if (timer_on) timer_start( 2 );
  400a55: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  400a59: 0f 84 0f 00 00 00            	je	15 <main+0x1de>
  400a5f: e9 00 00 00 00               	jmp	0 <main+0x1d4>
  400a64: bf 02 00 00 00               	movl	$2, %edi
  400a69: e8 42 02 00 00               	callq	578 <timer_start>
;     full_verify();
  400a6e: e8 cd f9 ff ff               	callq	-1587 <full_verify>
;     if (timer_on) timer_stop( 2 );
  400a73: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  400a77: 0f 84 0f 00 00 00            	je	15 <main+0x1fc>
  400a7d: e9 00 00 00 00               	jmp	0 <main+0x1f2>
  400a82: bf 02 00 00 00               	movl	$2, %edi
  400a87: e8 74 02 00 00               	callq	628 <timer_stop>
;     if (timer_on) timer_stop( 3 );
  400a8c: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  400a90: 0f 84 0f 00 00 00            	je	15 <main+0x215>
  400a96: e9 00 00 00 00               	jmp	0 <main+0x20b>
  400a9b: bf 03 00 00 00               	movl	$3, %edi
  400aa0: e8 5b 02 00 00               	callq	603 <timer_stop>
;     if( passed_verification != 5*MAX_ITERATIONS + 1 )
  400aa5: 83 3d 8c c4 08 00 33         	cmpl	$51, 574604(%rip)
  400aac: 0f 84 0f 00 00 00            	je	15 <main+0x231>
  400ab2: e9 00 00 00 00               	jmp	0 <main+0x227>
;         passed_verification = 0;
  400ab7: c7 05 77 c4 08 00 00 00 00 00	movl	$0, 574583(%rip)
;                      timecounter,
  400ac1: f2 0f 10 45 d8               	movsd	-40(%rbp), %xmm0
  400ac6: f2 0f 10 0d 8a 5c 00 00      	movsd	23690(%rip), %xmm1
;                                                   /timecounter/1000000.,
  400ace: f2 0f 5e c8                  	divsd	%xmm0, %xmm1
  400ad2: f2 0f 5e 0d 86 5c 00 00      	divsd	23686(%rip), %xmm1
;                      passed_verification,
  400ada: 8b 05 58 c4 08 00            	movl	574552(%rip), %eax
;     c_print_results( "IS",
  400ae0: 48 89 e1                     	movq	%rsp, %rcx
  400ae3: 48 8d 15 ee 5d 00 00         	leaq	24046(%rip), %rdx
  400aea: 48 89 51 48                  	movq	%rdx, 72(%rcx)
  400aee: 48 8d 15 c6 5d 00 00         	leaq	24006(%rip), %rdx
  400af5: 48 89 51 40                  	movq	%rdx, 64(%rcx)
  400af9: 48 8d 15 af 5d 00 00         	leaq	23983(%rip), %rdx
  400b00: 48 89 51 38                  	movq	%rdx, 56(%rcx)
  400b04: 48 8d 15 a0 5d 00 00         	leaq	23968(%rip), %rdx
  400b0b: 48 89 51 30                  	movq	%rdx, 48(%rcx)
  400b0f: 48 8d 15 8f 5d 00 00         	leaq	23951(%rip), %rdx
  400b16: 48 89 51 28                  	movq	%rdx, 40(%rcx)
  400b1a: 48 8d 15 80 5d 00 00         	leaq	23936(%rip), %rdx
  400b21: 48 89 51 20                  	movq	%rdx, 32(%rcx)
  400b25: 48 8d 15 69 5d 00 00         	leaq	23913(%rip), %rdx
  400b2c: 48 89 51 18                  	movq	%rdx, 24(%rcx)
  400b30: 48 8d 15 58 5d 00 00         	leaq	23896(%rip), %rdx
  400b37: 48 89 51 10                  	movq	%rdx, 16(%rcx)
  400b3b: 89 41 08                     	movl	%eax, 8(%rcx)
  400b3e: 48 8d 05 3e 5d 00 00         	leaq	23870(%rip), %rax
  400b45: 48 89 01                     	movq	%rax, (%rcx)
  400b48: 48 8d 3d 31 5d 00 00         	leaq	23857(%rip), %rdi
  400b4f: be 53 00 00 00               	movl	$83, %esi
  400b54: ba 00 04 00 00               	movl	$1024, %edx
  400b59: b9 40 00 00 00               	movl	$64, %ecx
  400b5e: 45 31 c0                     	xorl	%r8d, %r8d
  400b61: 41 b9 0a 00 00 00            	movl	$10, %r9d
  400b67: e8 04 02 00 00               	callq	516 <c_print_results>
;     if (timer_on) {
  400b6c: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  400b70: 0f 84 f9 00 00 00            	je	249 <main+0x3df>
  400b76: e9 00 00 00 00               	jmp	0 <main+0x2eb>
  400b7b: bf 03 00 00 00               	movl	$3, %edi
;        t_total = timer_read( 3 );
  400b80: e8 cb 01 00 00               	callq	459 <timer_read>
  400b85: f2 0f 11 45 e0               	movsd	%xmm0, -32(%rbp)
;        printf("\nAdditional timers -\n");
  400b8a: 48 8d 3d 5b 5d 00 00         	leaq	23899(%rip), %rdi
  400b91: 31 c0                        	xorl	%eax, %eax
  400b93: e8 48 0d 00 00               	callq	3400 <printf>
;        printf(" Total execution: %8.3f\n", t_total);
  400b98: f2 0f 10 45 e0               	movsd	-32(%rbp), %xmm0
  400b9d: 48 8d 3d 5e 5d 00 00         	leaq	23902(%rip), %rdi
  400ba4: b0 01                        	movb	$1, %al
  400ba6: e8 35 0d 00 00               	callq	3381 <printf>
;        if (t_total == 0.0) t_total = 1.0;
  400bab: f2 0f 10 45 e0               	movsd	-32(%rbp), %xmm0
  400bb0: 66 0f 57 c9                  	xorpd	%xmm1, %xmm1
  400bb4: 66 0f 2e c1                  	ucomisd	%xmm1, %xmm0
  400bb8: 0f 85 19 00 00 00            	jne	25 <main+0x347>
  400bbe: 0f 8a 13 00 00 00            	jp	19 <main+0x347>
  400bc4: e9 00 00 00 00               	jmp	0 <main+0x339>
  400bc9: 48 b8 00 00 00 00 00 00 f0 3f	movabsq	$4607182418800017408, %rax
  400bd3: 48 89 45 e0                  	movq	%rax, -32(%rbp)
  400bd7: bf 01 00 00 00               	movl	$1, %edi
;        timecounter = timer_read(1);
  400bdc: e8 6f 01 00 00               	callq	367 <timer_read>
  400be1: f2 0f 11 45 d8               	movsd	%xmm0, -40(%rbp)
;        t_percent = timecounter/t_total * 100.;
  400be6: 66 0f 28 c8                  	movapd	%xmm0, %xmm1
  400bea: f2 0f 5e 4d e0               	divsd	-32(%rbp), %xmm1
  400bef: f2 0f 59 0d 71 5b 00 00      	mulsd	23409(%rip), %xmm1
  400bf7: f2 0f 11 4d d0               	movsd	%xmm1, -48(%rbp)
;        printf(" Initialization : %8.3f (%5.2f%%)\n", timecounter, t_percent);
  400bfc: 48 8d 3d 18 5d 00 00         	leaq	23832(%rip), %rdi
  400c03: b3 02                        	movb	$2, %bl
  400c05: 89 d8                        	movl	%ebx, %eax
  400c07: e8 d4 0c 00 00               	callq	3284 <printf>
  400c0c: 31 ff                        	xorl	%edi, %edi
;        timecounter = timer_read(0);
  400c0e: e8 3d 01 00 00               	callq	317 <timer_read>
  400c13: f2 0f 11 45 d8               	movsd	%xmm0, -40(%rbp)
;        t_percent = timecounter/t_total * 100.;
  400c18: 66 0f 28 c8                  	movapd	%xmm0, %xmm1
  400c1c: f2 0f 5e 4d e0               	divsd	-32(%rbp), %xmm1
  400c21: f2 0f 59 0d 3f 5b 00 00      	mulsd	23359(%rip), %xmm1
  400c29: f2 0f 11 4d d0               	movsd	%xmm1, -48(%rbp)
;        printf(" Benchmarking   : %8.3f (%5.2f%%)\n", timecounter, t_percent);
  400c2e: 48 8d 3d 09 5d 00 00         	leaq	23817(%rip), %rdi
  400c35: 89 d8                        	movl	%ebx, %eax
  400c37: e8 a4 0c 00 00               	callq	3236 <printf>
  400c3c: bf 02 00 00 00               	movl	$2, %edi
;        timecounter = timer_read(2);
  400c41: e8 0a 01 00 00               	callq	266 <timer_read>
  400c46: f2 0f 11 45 d8               	movsd	%xmm0, -40(%rbp)
;        t_percent = timecounter/t_total * 100.;
  400c4b: 66 0f 28 c8                  	movapd	%xmm0, %xmm1
  400c4f: f2 0f 5e 4d e0               	divsd	-32(%rbp), %xmm1
  400c54: f2 0f 59 0d 0c 5b 00 00      	mulsd	23308(%rip), %xmm1
  400c5c: f2 0f 11 4d d0               	movsd	%xmm1, -48(%rbp)
;        printf(" Sorting        : %8.3f (%5.2f%%)\n", timecounter, t_percent);
  400c61: 48 8d 3d f9 5c 00 00         	leaq	23801(%rip), %rdi
  400c68: 89 d8                        	movl	%ebx, %eax
  400c6a: e8 71 0c 00 00               	callq	3185 <printf>
  400c6f: 31 c0                        	xorl	%eax, %eax
;     return 0;
  400c71: 48 81 c4 98 00 00 00         	addq	$152, %rsp
  400c78: 5b                           	popq	%rbx
  400c79: 5d                           	popq	%rbp
  400c7a: c3                           	retq
  400c7b: 90                           	nop
  400c7c: 0f 1f 40 00                  	nopl	(%rax)

0000000000400c80 timer_clear:
; {
  400c80: 55                           	pushq	%rbp
  400c81: 48 89 e5                     	movq	%rsp, %rbp
  400c84: 48 83 ec 04                  	subq	$4, %rsp
  400c88: 89 7d fc                     	movl	%edi, -4(%rbp)
;     elapsed[n] = 0.0;
  400c8b: 48 63 c7                     	movslq	%edi, %rax
  400c8e: 48 8d 0d ab 81 00 00         	leaq	33195(%rip), %rcx
  400c95: 48 c7 04 c1 00 00 00 00      	movq	$0, (%rcx,%rax,8)
; }
  400c9d: 48 83 c4 04                  	addq	$4, %rsp
  400ca1: 5d                           	popq	%rbp
  400ca2: c3                           	retq
  400ca3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00       	nopw	%cs:(%rax,%rax)

0000000000400cb0 timer_start:
; {
  400cb0: 55                           	pushq	%rbp
  400cb1: 48 89 e5                     	movq	%rsp, %rbp
  400cb4: 48 83 ec 10                  	subq	$16, %rsp
  400cb8: 89 7d fc                     	movl	%edi, -4(%rbp)
;     start[n] = elapsed_time();
  400cbb: e8 20 00 00 00               	callq	32 <elapsed_time>
  400cc0: 48 63 45 fc                  	movslq	-4(%rbp), %rax
  400cc4: 48 8d 0d 75 83 00 00         	leaq	33653(%rip), %rcx
  400ccb: f2 0f 11 04 c1               	movsd	%xmm0, (%rcx,%rax,8)
; }
  400cd0: 48 83 c4 10                  	addq	$16, %rsp
  400cd4: 5d                           	popq	%rbp
  400cd5: c3                           	retq
  400cd6: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)

0000000000400ce0 elapsed_time:
; {
  400ce0: 55                           	pushq	%rbp
  400ce1: 48 89 e5                     	movq	%rsp, %rbp
  400ce4: 48 83 ec 10                  	subq	$16, %rsp
  400ce8: 48 8d 7d f8                  	leaq	-8(%rbp), %rdi
;     wtime( &t );
  400cec: e8 df 02 00 00               	callq	735 <wtime_>
;     return( t );
  400cf1: f2 0f 10 45 f8               	movsd	-8(%rbp), %xmm0
  400cf6: 48 83 c4 10                  	addq	$16, %rsp
  400cfa: 5d                           	popq	%rbp
  400cfb: c3                           	retq
  400cfc: 0f 1f 40 00                  	nopl	(%rax)

0000000000400d00 timer_stop:
; {
  400d00: 55                           	pushq	%rbp
  400d01: 48 89 e5                     	movq	%rsp, %rbp
  400d04: 48 83 ec 20                  	subq	$32, %rsp
  400d08: 89 7d fc                     	movl	%edi, -4(%rbp)
;     now = elapsed_time();
  400d0b: e8 d0 ff ff ff               	callq	-48 <elapsed_time>
  400d10: f2 0f 11 45 f0               	movsd	%xmm0, -16(%rbp)
;     t = now - start[n];
  400d15: 48 8d 05 24 83 00 00         	leaq	33572(%rip), %rax
  400d1c: 48 63 4d fc                  	movslq	-4(%rbp), %rcx
  400d20: f2 0f 5c 04 c8               	subsd	(%rax,%rcx,8), %xmm0
  400d25: f2 0f 11 45 e8               	movsd	%xmm0, -24(%rbp)
;     elapsed[n] += t;
  400d2a: 48 8d 05 0f 81 00 00         	leaq	33039(%rip), %rax
  400d31: f2 0f 58 04 c8               	addsd	(%rax,%rcx,8), %xmm0
  400d36: f2 0f 11 04 c8               	movsd	%xmm0, (%rax,%rcx,8)
; }
  400d3b: 48 83 c4 20                  	addq	$32, %rsp
  400d3f: 5d                           	popq	%rbp
  400d40: c3                           	retq
  400d41: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)

0000000000400d50 timer_read:
; {
  400d50: 55                           	pushq	%rbp
  400d51: 48 89 e5                     	movq	%rsp, %rbp
  400d54: 48 83 ec 04                  	subq	$4, %rsp
  400d58: 89 7d fc                     	movl	%edi, -4(%rbp)
;     return( elapsed[n] );
  400d5b: 48 63 c7                     	movslq	%edi, %rax
  400d5e: 48 8d 0d db 80 00 00         	leaq	32987(%rip), %rcx
  400d65: f2 0f 10 04 c1               	movsd	(%rcx,%rax,8), %xmm0
  400d6a: 48 83 c4 04                  	addq	$4, %rsp
  400d6e: 5d                           	popq	%rbp
  400d6f: c3                           	retq

0000000000400d70 c_print_results:
; {
  400d70: 55                           	pushq	%rbp
  400d71: 48 89 e5                     	movq	%rsp, %rbp
  400d74: 41 57                        	pushq	%r15
  400d76: 53                           	pushq	%rbx
  400d77: 48 83 ec 40                  	subq	$64, %rsp
  400d7b: 48 89 f8                     	movq	%rdi, %rax
  400d7e: 89 f3                        	movl	%esi, %ebx
  400d80: 48 89 7d b8                  	movq	%rdi, -72(%rbp)
  400d84: 40 88 75 ef                  	movb	%sil, -17(%rbp)
  400d88: 89 55 e0                     	movl	%edx, -32(%rbp)
  400d8b: 89 4d e8                     	movl	%ecx, -24(%rbp)
  400d8e: 44 89 45 e4                  	movl	%r8d, -28(%rbp)
  400d92: 44 89 4d d4                  	movl	%r9d, -44(%rbp)
  400d96: f2 0f 11 45 c0               	movsd	%xmm0, -64(%rbp)
  400d9b: f2 0f 11 4d c8               	movsd	%xmm1, -56(%rbp)
;     printf( "\n\n %s Benchmark Completed\n", name ); 
  400da0: 48 8d 3d dd 5b 00 00         	leaq	23517(%rip), %rdi
  400da7: 31 c9                        	xorl	%ecx, %ecx
  400da9: 89 cb                        	movl	%ecx, %ebx
  400dab: 48 89 c6                     	movq	%rax, %rsi
  400dae: 89 d8                        	movl	%ebx, %eax
  400db0: e8 2b 0b 00 00               	callq	2859 <printf>
;     printf( " Class           =                        %c\n", class );
  400db5: 0f be 75 ef                  	movsbl	-17(%rbp), %esi
  400db9: 48 8d 3d df 5b 00 00         	leaq	23519(%rip), %rdi
  400dc0: 89 d8                        	movl	%ebx, %eax
  400dc2: e8 19 0b 00 00               	callq	2841 <printf>
;     if( n3 == 0 ) {
  400dc7: 83 7d e4 00                  	cmpl	$0, -28(%rbp)
  400dcb: 0f 85 05 00 00 00            	jne	5 <c_print_results+0x66>
  400dd1: e9 19 00 00 00               	jmp	25 <c_print_results+0x7f>
;         printf( " Size            =             %4dx%4dx%4d\n", n1,n2,n3 );
  400dd6: 8b 75 e0                     	movl	-32(%rbp), %esi
  400dd9: 8b 55 e8                     	movl	-24(%rbp), %edx
  400ddc: 8b 4d e4                     	movl	-28(%rbp), %ecx
  400ddf: 48 8d 3d 0d 5c 00 00         	leaq	23565(%rip), %rdi
  400de6: 31 c0                        	xorl	%eax, %eax
  400de8: e8 f3 0a 00 00               	callq	2803 <printf>
  400ded: eb 3b                        	jmp	59 <c_print_results+0xba>
;         long nn = n1;
  400def: 48 63 45 e0                  	movslq	-32(%rbp), %rax
  400df3: 48 89 45 d8                  	movq	%rax, -40(%rbp)
;         if ( n2 != 0 ) nn *= n2;
  400df7: 83 7d e8 00                  	cmpl	$0, -24(%rbp)
  400dfb: 0f 84 12 00 00 00            	je	18 <c_print_results+0xa3>
  400e01: e9 00 00 00 00               	jmp	0 <c_print_results+0x96>
  400e06: 48 63 45 e8                  	movslq	-24(%rbp), %rax
  400e0a: 48 0f af 45 d8               	imulq	-40(%rbp), %rax
  400e0f: 48 89 45 d8                  	movq	%rax, -40(%rbp)
;         printf( " Size            =             %12ld\n", nn );   /* as in IS */
  400e13: 48 8b 75 d8                  	movq	-40(%rbp), %rsi
  400e17: 48 8d 3d af 5b 00 00         	leaq	23471(%rip), %rdi
  400e1e: 31 c0                        	xorl	%eax, %eax
  400e20: e8 bb 0a 00 00               	callq	2747 <printf>
;     }
  400e25: e9 00 00 00 00               	jmp	0 <c_print_results+0xba>
;     printf( " Iterations      =             %12d\n", niter );
  400e2a: 8b 75 d4                     	movl	-44(%rbp), %esi
  400e2d: 48 8d 3d eb 5b 00 00         	leaq	23531(%rip), %rdi
  400e34: 31 c0                        	xorl	%eax, %eax
  400e36: 89 c3                        	movl	%eax, %ebx
  400e38: e8 a3 0a 00 00               	callq	2723 <printf>
;     printf( " Time in seconds =             %12.2f\n", t );
  400e3d: f2 0f 10 45 c0               	movsd	-64(%rbp), %xmm0
  400e42: 48 8d 3d fb 5b 00 00         	leaq	23547(%rip), %rdi
  400e49: 41 b7 01                     	movb	$1, %r15b
  400e4c: 44 89 f8                     	movl	%r15d, %eax
  400e4f: e8 8c 0a 00 00               	callq	2700 <printf>
;     printf( " Mop/s total     =             %12.2f\n", mops );
  400e54: f2 0f 10 45 c8               	movsd	-56(%rbp), %xmm0
  400e59: 48 8d 3d 0b 5c 00 00         	leaq	23563(%rip), %rdi
  400e60: 44 89 f8                     	movl	%r15d, %eax
  400e63: e8 78 0a 00 00               	callq	2680 <printf>
;     printf( " Operation type  = %24s\n", optype);
  400e68: 48 8b 75 10                  	movq	16(%rbp), %rsi
  400e6c: 48 8d 3d 1f 5c 00 00         	leaq	23583(%rip), %rdi
  400e73: 89 d8                        	movl	%ebx, %eax
  400e75: e8 66 0a 00 00               	callq	2662 <printf>
;     if( passed_verification < 0 )
  400e7a: 83 7d 18 00                  	cmpl	$0, 24(%rbp)
  400e7e: 0f 89 05 00 00 00            	jns	5 <c_print_results+0x119>
  400e84: e9 22 00 00 00               	jmp	34 <c_print_results+0x13b>
;     else if( passed_verification )
  400e89: 83 7d 18 00                  	cmpl	$0, 24(%rbp)
  400e8d: 0f 84 2b 00 00 00            	je	43 <c_print_results+0x14e>
  400e93: e9 00 00 00 00               	jmp	0 <c_print_results+0x128>
;         printf( " Verification    =               SUCCESSFUL\n" );
  400e98: 48 8d 3d 39 5c 00 00         	leaq	23609(%rip), %rdi
  400e9f: 31 c0                        	xorl	%eax, %eax
  400ea1: e8 3a 0a 00 00               	callq	2618 <printf>
  400ea6: e9 21 00 00 00               	jmp	33 <c_print_results+0x15c>
;         printf( " Verification    =            NOT PERFORMED\n" );
  400eab: 48 8d 3d f9 5b 00 00         	leaq	23545(%rip), %rdi
  400eb2: 31 c0                        	xorl	%eax, %eax
  400eb4: e8 27 0a 00 00               	callq	2599 <printf>
  400eb9: e9 0e 00 00 00               	jmp	14 <c_print_results+0x15c>
;         printf( " Verification    =             UNSUCCESSFUL\n" );
  400ebe: 48 8d 3d 40 5c 00 00         	leaq	23616(%rip), %rdi
  400ec5: 31 c0                        	xorl	%eax, %eax
  400ec7: e8 14 0a 00 00               	callq	2580 <printf>
;     printf( " Version         =             %12s\n", npbversion );
  400ecc: 48 8b 75 20                  	movq	32(%rbp), %rsi
  400ed0: 48 8d 3d 5b 5c 00 00         	leaq	23643(%rip), %rdi
  400ed7: 31 c0                        	xorl	%eax, %eax
  400ed9: 89 c3                        	movl	%eax, %ebx
  400edb: e8 00 0a 00 00               	callq	2560 <printf>
;     printf( " Compile date    =             %12s\n", compiletime );
  400ee0: 48 8b 75 28                  	movq	40(%rbp), %rsi
  400ee4: 48 8d 3d 6c 5c 00 00         	leaq	23660(%rip), %rdi
  400eeb: 89 d8                        	movl	%ebx, %eax
  400eed: e8 ee 09 00 00               	callq	2542 <printf>
;     printf( "\n Compile options:\n" );
  400ef2: 48 8d 3d 83 5c 00 00         	leaq	23683(%rip), %rdi
  400ef9: 89 d8                        	movl	%ebx, %eax
  400efb: e8 e0 09 00 00               	callq	2528 <printf>
;     printf( "    CC           = %s\n", cc );
  400f00: 48 8b 75 30                  	movq	48(%rbp), %rsi
  400f04: 48 8d 3d 85 5c 00 00         	leaq	23685(%rip), %rdi
  400f0b: 89 d8                        	movl	%ebx, %eax
  400f0d: e8 ce 09 00 00               	callq	2510 <printf>
;     printf( "    CLINK        = %s\n", clink );
  400f12: 48 8b 75 38                  	movq	56(%rbp), %rsi
  400f16: 48 8d 3d 8a 5c 00 00         	leaq	23690(%rip), %rdi
  400f1d: 89 d8                        	movl	%ebx, %eax
  400f1f: e8 bc 09 00 00               	callq	2492 <printf>
;     printf( "    C_LIB        = %s\n", c_lib );
  400f24: 48 8b 75 40                  	movq	64(%rbp), %rsi
  400f28: 48 8d 3d 8f 5c 00 00         	leaq	23695(%rip), %rdi
  400f2f: 89 d8                        	movl	%ebx, %eax
  400f31: e8 aa 09 00 00               	callq	2474 <printf>
;     printf( "    C_INC        = %s\n", c_inc );
  400f36: 48 8b 75 48                  	movq	72(%rbp), %rsi
  400f3a: 48 8d 3d 94 5c 00 00         	leaq	23700(%rip), %rdi
  400f41: 89 d8                        	movl	%ebx, %eax
  400f43: e8 98 09 00 00               	callq	2456 <printf>
;     printf( "    CFLAGS       = %s\n", cflags );
  400f48: 48 8b 75 50                  	movq	80(%rbp), %rsi
  400f4c: 48 8d 3d 99 5c 00 00         	leaq	23705(%rip), %rdi
  400f53: 89 d8                        	movl	%ebx, %eax
  400f55: e8 86 09 00 00               	callq	2438 <printf>
;     printf( "    CLINKFLAGS   = %s\n", clinkflags );
  400f5a: 48 8b 75 58                  	movq	88(%rbp), %rsi
  400f5e: 48 8d 3d 9e 5c 00 00         	leaq	23710(%rip), %rdi
  400f65: 89 d8                        	movl	%ebx, %eax
  400f67: e8 74 09 00 00               	callq	2420 <printf>
;     printf( "\n--------------------------------------\n");
  400f6c: 48 8d 3d a7 5c 00 00         	leaq	23719(%rip), %rdi
  400f73: 89 d8                        	movl	%ebx, %eax
  400f75: e8 66 09 00 00               	callq	2406 <printf>
;     printf( " Please send all errors/feedbacks to:\n");
  400f7a: 48 8d 3d c2 5c 00 00         	leaq	23746(%rip), %rdi
  400f81: 89 d8                        	movl	%ebx, %eax
  400f83: e8 58 09 00 00               	callq	2392 <printf>
;     printf( " Center for Manycore Programming\n");
  400f88: 48 8d 3d db 5c 00 00         	leaq	23771(%rip), %rdi
  400f8f: 89 d8                        	movl	%ebx, %eax
  400f91: e8 4a 09 00 00               	callq	2378 <printf>
;     printf( " cmp@aces.snu.ac.kr\n");
  400f96: 48 8d 3d ef 5c 00 00         	leaq	23791(%rip), %rdi
  400f9d: 89 d8                        	movl	%ebx, %eax
  400f9f: e8 3c 09 00 00               	callq	2364 <printf>
;     printf( " http://aces.snu.ac.kr\n");
  400fa4: 48 8d 3d f6 5c 00 00         	leaq	23798(%rip), %rdi
  400fab: 89 d8                        	movl	%ebx, %eax
  400fad: e8 2e 09 00 00               	callq	2350 <printf>
;     printf( "--------------------------------------\n");
  400fb2: 48 8d 3d 00 5d 00 00         	leaq	23808(%rip), %rdi
  400fb9: 89 d8                        	movl	%ebx, %eax
  400fbb: e8 20 09 00 00               	callq	2336 <printf>
; }
  400fc0: 48 83 c4 40                  	addq	$64, %rsp
  400fc4: 5b                           	popq	%rbx
  400fc5: 41 5f                        	popq	%r15
  400fc7: 5d                           	popq	%rbp
  400fc8: c3                           	retq
  400fc9: 0f 1f 00                     	nopl	(%rax)
  400fcc: 0f 1f 40 00                  	nopl	(%rax)

0000000000400fd0 wtime_:
; {
  400fd0: 55                           	pushq	%rbp
  400fd1: 48 89 e5                     	movq	%rsp, %rbp
  400fd4: 48 83 ec 20                  	subq	$32, %rsp
  400fd8: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
  400fdc: 31 c0                        	xorl	%eax, %eax
  400fde: 89 c6                        	movl	%eax, %esi
  400fe0: 48 8d 7d f0                  	leaq	-16(%rbp), %rdi
;   gettimeofday(&tv, (void *)0);
  400fe4: e8 4f 2c 00 00               	callq	11343 <gettimeofday>
;   if (sec < 0) sec = tv.tv_sec;
  400fe9: 83 3d 14 7d 00 00 00         	cmpl	$0, 32020(%rip)
  400ff0: 0f 89 0e 00 00 00            	jns	14 <wtime_+0x34>
  400ff6: e9 00 00 00 00               	jmp	0 <wtime_+0x2b>
  400ffb: 8b 45 f0                     	movl	-16(%rbp), %eax
  400ffe: 89 05 00 7d 00 00            	movl	%eax, 32000(%rip)
;   *t = (tv.tv_sec - sec) + 1.0e-6*tv.tv_usec;
  401004: 48 8b 45 f0                  	movq	-16(%rbp), %rax
  401008: 48 63 0d f5 7c 00 00         	movslq	31989(%rip), %rcx
  40100f: 48 29 c8                     	subq	%rcx, %rax
  401012: f2 48 0f 2a c0               	cvtsi2sd	%rax, %xmm0
  401017: f2 48 0f 2a 4d f8            	cvtsi2sdq	-8(%rbp), %xmm1
  40101d: f2 0f 59 0d 4b 57 00 00      	mulsd	22347(%rip), %xmm1
  401025: f2 0f 58 c8                  	addsd	%xmm0, %xmm1
  401029: 48 8b 45 e8                  	movq	-24(%rbp), %rax
  40102d: f2 0f 11 08                  	movsd	%xmm1, (%rax)
; }
  401031: 48 83 c4 20                  	addq	$32, %rsp
  401035: 5d                           	popq	%rbp
  401036: c3                           	retq
  401037: 90                           	nop

0000000000401038 _start:
  401038: 48 31 ed                     	xorq	%rbp, %rbp
  40103b: 48 89 e7                     	movq	%rsp, %rdi
  40103e: 48 8d 35 bb ef bf ff         	leaq	-4198469(%rip), %rsi
  401045: 48 83 e4 f0                  	andq	$-16, %rsp
  401049: e8 00 00 00 00               	callq	0 <_start_c>

000000000040104e _start_c:
; {
  40104e: 55                           	pushq	%rbp
  40104f: 41 57                        	pushq	%r15
  401051: 53                           	pushq	%rbx
  401052: 48 83 ec 50                  	subq	$80, %rsp
  401056: 49 bd 00 f0 ff ff ff 7f 00 00	movabsq	$140737488351232, %r13
; 	register int argc = p[0];
  401060: 4c 8b 17                     	movq	(%rdi), %r10
  401063: b9 08 00 00 00               	movl	$8, %ecx
; 	register char **argv = (void *)(p+1);
  401068: 4c 8d 24 0f                  	leaq	(%rdi,%rcx), %r12
; 	stack_ptr = arch_stack_get();
  40106c: 49 89 e0                     	movq	%rsp, %r8
; 	if ( STACK_START_ADDR > (unsigned long) stack_ptr)
  40106f: 49 8d 85 00 00 00 ff         	leaq	-16777216(%r13), %rax
  401076: 49 39 c0                     	cmpq	%rax, %r8
  401079: 0f 82 83 03 00 00            	jb	899 <my_memcpy_nostack_error+0x5f>
  40107f: 44 89 d0                     	movl	%r10d, %eax
  401082: 48 63 d0                     	movslq	%eax, %rdx
  401085: 4c 8d 1c d7                  	leaq	(%rdi,%rdx,8), %r11
  401089: 49 83 c3 08                  	addq	$8, %r11
  40108d: 49 01 cb                     	addq	%rcx, %r11
; 	for (i=0; i<argc; i++) {
  401090: 45 85 d2                     	testl	%r10d, %r10d
  401093: 7e 17                        	jle	23 <_start_c+0x5e>
  401095: 31 c9                        	xorl	%ecx, %ecx
; 		if (max < (long)argv[i])
  401097: 49 8b 14 cc                  	movq	(%r12,%rcx,8), %rdx
  40109b: 49 39 d6                     	cmpq	%rdx, %r14
  40109e: 4c 0f 4c f2                  	cmovlq	%rdx, %r14
; 	for (i=0; i<argc; i++) {
  4010a2: 48 ff c1                     	incq	%rcx
  4010a5: 48 39 c8                     	cmpq	%rcx, %rax
  4010a8: 75 ed                        	jne	-19 <_start_c+0x49>
  4010aa: eb 00                        	jmp	0 <_start_c+0x5e>
; 	for (i=0; envp[i]; i++) {
  4010ac: 49 8b 1b                     	movq	(%r11), %rbx
; 	for (i=0; (auxv[i].a_type != AT_NULL); i++) {
  4010af: 49 63 f2                     	movslq	%r10d, %rsi
; 	for (i=0; envp[i]; i++) {
  4010b2: 48 85 db                     	testq	%rbx, %rbx
  4010b5: 74 29                        	je	41 <_start_c+0x92>
  4010b7: 48 8d 2c f7                  	leaq	(%rdi,%rsi,8), %rbp
  4010bb: 48 83 c5 18                  	addq	$24, %rbp
  4010bf: ba 01 00 00 00               	movl	$1, %edx
  4010c4: 48 89 d9                     	movq	%rbx, %rcx
; 		if (max < (long)envp[i])
  4010c7: 49 39 ce                     	cmpq	%rcx, %r14
  4010ca: 4c 0f 4c f1                  	cmovlq	%rcx, %r14
; 	for (i=0; envp[i]; i++) {
  4010ce: 48 8b 4c d5 f8               	movq	-8(%rbp,%rdx,8), %rcx
  4010d3: 48 ff c2                     	incq	%rdx
  4010d6: 48 85 c9                     	testq	%rcx, %rcx
  4010d9: 75 ec                        	jne	-20 <_start_c+0x79>
; 	auxv = (Auxv *)(&envp[i+1]);
  4010db: 41 89 d7                     	movl	%edx, %r15d
  4010de: eb 06                        	jmp	6 <_start_c+0x98>
  4010e0: 41 bf 01 00 00 00            	movl	$1, %r15d
; 	for (i=0; (auxv[i].a_type != AT_NULL); i++) {
  4010e6: 4b 8b 2c fb                  	movq	(%r11,%r15,8), %rbp
  4010ea: 48 85 ed                     	testq	%rbp, %rbp
  4010ed: 74 35                        	je	53 <_start_c+0xd6>
  4010ef: 4c 01 fe                     	addq	%r15, %rsi
  4010f2: 48 8d 34 f7                  	leaq	(%rdi,%rsi,8), %rsi
  4010f6: 48 83 c6 20                  	addq	$32, %rsi
  4010fa: 49 8d 55 ff                  	leaq	-1(%r13), %rdx
; 		if (max < (long)auxv[i].a_un.a_val)
  4010fe: 48 8b 4e f8                  	movq	-8(%rsi), %rcx
; 		if ( (auxv[i].a_type == AT_ENTRY) &&
  401102: 48 83 fd 09                  	cmpq	$9, %rbp
  401106: 75 09                        	jne	9 <_start_c+0xc3>
  401108: 48 39 d1                     	cmpq	%rdx, %rcx
  40110b: 0f 87 f1 02 00 00            	ja	753 <my_memcpy_nostack_error+0x5f>
; 		if (max < (long)auxv[i].a_un.a_val)
  401111: 49 39 ce                     	cmpq	%rcx, %r14
  401114: 4c 0f 4c f1                  	cmovlq	%rcx, %r14
; 	for (i=0; (auxv[i].a_type != AT_NULL); i++) {
  401118: 48 8b 2e                     	movq	(%rsi), %rbp
  40111b: 48 83 c6 10                  	addq	$16, %rsi
  40111f: 48 85 ed                     	testq	%rbp, %rbp
  401122: 75 da                        	jne	-38 <_start_c+0xb0>
; 	max = (max & ~(STACK_PAGE_SIZE -1)) + STACK_PAGE_SIZE; 
  401124: 49 81 c6 00 10 00 00         	addq	$4096, %r14
  40112b: 49 81 e6 00 f0 ff ff         	andq	$-4096, %r14
; 		(STACK_MAPPED_PAGES + (max_size(stack_ptr)/STACK_PAGE_SIZE) +1);
  401132: 4d 89 f1                     	movq	%r14, %r9
  401135: 4d 29 c1                     	subq	%r8, %r9
; 	if (STACK_END_ADDR == max)
  401138: 4d 39 ee                     	cmpq	%r13, %r14
  40113b: 0f 84 0d 02 00 00            	je	525 <_start_c+0x300>
; 	for (i=0; i<argc; i++) {
  401141: 45 85 d2                     	testl	%r10d, %r10d
; 	for (i=0; i<argc; i++)
  401144: 7e 17                        	jle	23 <_start_c+0x10f>
  401146: 4c 89 e9                     	movq	%r13, %rcx
  401149: 4c 29 f1                     	subq	%r14, %rcx
  40114c: 31 f6                        	xorl	%esi, %esi
; 		argv[i] = (void*) (STACK_END_ADDR - vdso_size - (max - (unsigned long) argv[i])); 
  40114e: 49 01 0c f4                  	addq	%rcx, (%r12,%rsi,8)
; 	for (i=0; i<argc; i++)
  401152: 48 ff c6                     	incq	%rsi
  401155: 48 39 f0                     	cmpq	%rsi, %rax
  401158: 75 f4                        	jne	-12 <_start_c+0x100>
; 	for (i=0; envp[i]; i++)
  40115a: 49 8b 1b                     	movq	(%r11), %rbx
  40115d: 4c 89 ee                     	movq	%r13, %rsi
  401160: 4c 29 f6                     	subq	%r14, %rsi
  401163: 48 85 db                     	testq	%rbx, %rbx
  401166: 74 1e                        	je	30 <_start_c+0x138>
  401168: 48 63 c8                     	movslq	%eax, %rcx
  40116b: 48 8d 0c cf                  	leaq	(%rdi,%rcx,8), %rcx
  40116f: 48 83 c1 18                  	addq	$24, %rcx
; 		envp[i] = (void*) (STACK_END_ADDR - vdso_size - (max - (unsigned long) envp[i]));
  401173: 48 01 f3                     	addq	%rsi, %rbx
  401176: 48 89 59 f8                  	movq	%rbx, -8(%rcx)
; 	for (i=0; envp[i]; i++)
  40117a: 48 8b 19                     	movq	(%rcx), %rbx
  40117d: 48 83 c1 08                  	addq	$8, %rcx
  401181: 48 85 db                     	testq	%rbx, %rbx
  401184: 75 ed                        	jne	-19 <_start_c+0x125>
  401186: 4b 8d 0c fb                  	leaq	(%r11,%r15,8), %rcx
  40118a: 48 89 4c 24 10               	movq	%rcx, 16(%rsp)
; 	for (i=0; (auxv[i].a_type != AT_NULL); i++)
  40118f: 48 98                        	cltq
  401191: 4c 01 f8                     	addq	%r15, %rax
  401194: 48 8d 04 c7                  	leaq	(%rdi,%rax,8), %rax
  401198: 48 83 c0 18                  	addq	$24, %rax
  40119c: 31 db                        	xorl	%ebx, %ebx
  40119e: b9 00 80 00 83               	movl	$2197848064, %ecx
  4011a3: 48 8b 54 18 f8               	movq	-8(%rax,%rbx), %rdx
  4011a8: 48 83 fa 1f                  	cmpq	$31, %rdx
  4011ac: 77 06                        	ja	6 <_start_c+0x166>
  4011ae: 48 0f a3 d1                  	btq	%rdx, %rcx
  4011b2: 72 0d                        	jb	13 <_start_c+0x173>
  4011b4: 48 83 fa 09                  	cmpq	$9, %rdx
  4011b8: 77 17                        	ja	23 <_start_c+0x183>
  4011ba: ff 24 d5 e8 6c 40 00         	jmpq	*4222184(,%rdx,8)
; 			if (auxv[i].a_un.a_val > STACK_END_ADDR)
  4011c1: 48 8b 14 18                  	movq	(%rax,%rbx), %rdx
  4011c5: 4c 39 ea                     	cmpq	%r13, %rdx
  4011c8: 76 07                        	jbe	7 <_start_c+0x183>
; 				auxv[i].a_un.a_val = STACK_END_ADDR - vdso_size - (max - auxv[i].a_un.a_val);
  4011ca: 48 01 f2                     	addq	%rsi, %rdx
  4011cd: 48 89 14 18                  	movq	%rdx, (%rax,%rbx)
; 	for (i=0; (auxv[i].a_type != AT_NULL); i++)
  4011d1: 48 83 c3 10                  	addq	$16, %rbx
  4011d5: eb cc                        	jmp	-52 <_start_c+0x155>
  4011d7: 48 89 7c 24 08               	movq	%rdi, 8(%rsp)
  4011dc: 4c 89 5c 24 18               	movq	%r11, 24(%rsp)
  4011e1: 4c 89 44 24 20               	movq	%r8, 32(%rsp)
  4011e6: 4c 89 54 24 28               	movq	%r10, 40(%rsp)
; 	stack_addr = __syscall(SYS_mremap, (max - total_size), total_size, total_size, (MREMAP_FIXED | MREMAP_MAYMOVE), STACK_END_ADDR - vdso_size - total_size); // total_size must be page-aligned
  4011eb: 4c 89 c8                     	movq	%r9, %rax
  4011ee: 48 c1 e0 20                  	shlq	$32, %rax
  4011f2: 48 ba 00 00 00 00 00 10 02 00	movabsq	$580542139465728, %rdx
  4011fc: 48 01 c2                     	addq	%rax, %rdx
  4011ff: 48 c1 fa 20                  	sarq	$32, %rdx
  401203: 48 81 e2 00 f0 ff ff         	andq	$-4096, %rdx
  40120a: 4c 89 f7                     	movq	%r14, %rdi
  40120d: 48 29 d7                     	subq	%rdx, %rdi
  401210: 4d 89 ef                     	movq	%r13, %r15
  401213: 4d 89 e8                     	movq	%r13, %r8
  401216: 49 29 d0                     	subq	%rdx, %r8
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  401219: b8 19 00 00 00               	movl	$25, %eax
  40121e: 41 ba 03 00 00 00            	movl	$3, %r10d
  401224: 48 89 d6                     	movq	%rdx, %rsi
  401227: 0f 05                        	syscall
; 	if ( ((unsigned long) stack_addr) > -4096UL) {
  401229: 48 3d 01 f0 ff ff            	cmpq	$-4095, %rax
  40122f: 72 39                        	jb	57 <_start_c+0x21c>
  401231: bd 00 10 00 00               	movl	$4096, %ebp
; 		if (total_size > max_size(stack_ptr)) {
  401236: 49 01 e8                     	addq	%rbp, %r8
  401239: 48 01 ef                     	addq	%rbp, %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40123c: 41 ba 03 00 00 00            	movl	$3, %r10d
; 		if (total_size > max_size(stack_ptr)) {
  401242: 49 39 d1                     	cmpq	%rdx, %r9
  401245: 0f 83 b3 01 00 00            	jae	435 <my_memcpy_nostack_error+0x5b>
  40124b: 48 81 c2 00 f0 ff ff         	addq	$-4096, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  401252: b8 19 00 00 00               	movl	$25, %eax
  401257: 48 89 d6                     	movq	%rdx, %rsi
  40125a: 0f 05                        	syscall
; 	if ( ((unsigned long) stack_addr) > -4096UL) {
  40125c: 49 01 e8                     	addq	%rbp, %r8
  40125f: 48 01 ef                     	addq	%rbp, %rdi
  401262: 48 3d 01 f0 ff ff            	cmpq	$-4095, %rax
  401268: 73 d8                        	jae	-40 <_start_c+0x1f4>
  40126a: 4d 29 f4                     	subq	%r14, %r12
  40126d: 4d 89 fd                     	movq	%r15, %r13
  401270: 4d 01 fc                     	addq	%r15, %r12
  401273: 48 8b 6c 24 18               	movq	24(%rsp), %rbp
  401278: 4c 01 fd                     	addq	%r15, %rbp
  40127b: 4c 29 f5                     	subq	%r14, %rbp
  40127e: 4c 8b 7c 24 10               	movq	16(%rsp), %r15
  401283: 4d 01 ef                     	addq	%r13, %r15
  401286: 4d 29 f7                     	subq	%r14, %r15
; 	__syscall(SYS_prctl, PR_SET_MM, PR_SET_MM_START_STACK, (STACK_END_ADDR -vdso_size - max_size(stack_ptr)), 0, 0); 
  401289: 4c 89 ea                     	movq	%r13, %rdx
  40128c: 4c 29 ca                     	subq	%r9, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40128f: b8 9d 00 00 00               	movl	$157, %eax
  401294: bf 23 00 00 00               	movl	$35, %edi
  401299: be 05 00 00 00               	movl	$5, %esi
  40129e: 45 31 d2                     	xorl	%r10d, %r10d
  4012a1: 45 31 c0                     	xorl	%r8d, %r8d
  4012a4: 0f 05                        	syscall
; 	__syscall(SYS_prctl, PR_SET_MM, PR_SET_MM_ARG_START, argv[0], 0, 0);
  4012a6: 49 8b 14 24                  	movq	(%r12), %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4012aa: b8 9d 00 00 00               	movl	$157, %eax
  4012af: bf 23 00 00 00               	movl	$35, %edi
  4012b4: be 08 00 00 00               	movl	$8, %esi
  4012b9: 45 31 d2                     	xorl	%r10d, %r10d
  4012bc: 45 31 c0                     	xorl	%r8d, %r8d
  4012bf: 0f 05                        	syscall
; 	__syscall(SYS_prctl, PR_SET_MM, PR_SET_MM_ARG_END,   envp[0], 0, 0);
  4012c1: 48 8b 55 00                  	movq	(%rbp), %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4012c5: b8 9d 00 00 00               	movl	$157, %eax
  4012ca: bf 23 00 00 00               	movl	$35, %edi
  4012cf: be 09 00 00 00               	movl	$9, %esi
  4012d4: 45 31 d2                     	xorl	%r10d, %r10d
  4012d7: 45 31 c0                     	xorl	%r8d, %r8d
  4012da: 0f 05                        	syscall
; 	__syscall(SYS_prctl, PR_SET_MM, PR_SET_MM_ENV_START, envp[0], 0, 0);	
  4012dc: 48 8b 55 00                  	movq	(%rbp), %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4012e0: b8 9d 00 00 00               	movl	$157, %eax
  4012e5: bf 23 00 00 00               	movl	$35, %edi
  4012ea: be 0a 00 00 00               	movl	$10, %esi
  4012ef: 45 31 d2                     	xorl	%r10d, %r10d
  4012f2: 45 31 c0                     	xorl	%r8d, %r8d
  4012f5: 0f 05                        	syscall
  4012f7: 48 ba 00 f0 ff ff ff 7f 00 00	movabsq	$140737488351232, %rdx
  401301: b8 9d 00 00 00               	movl	$157, %eax
  401306: bf 23 00 00 00               	movl	$35, %edi
  40130b: be 0b 00 00 00               	movl	$11, %esi
  401310: 45 31 d2                     	xorl	%r10d, %r10d
  401313: 45 31 c0                     	xorl	%r8d, %r8d
  401316: 0f 05                        	syscall
  401318: 48 b8 f0 ff ff ff 0f 00 00 00	movabsq	$68719476720, %rax
; 	__syscall(SYS_prctl, PR_SET_MM, PR_SET_MM_AUXV,      &auxv[0], i*sizeof(Auxv), 0);
  401322: 48 21 c3                     	andq	%rax, %rbx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  401325: b8 9d 00 00 00               	movl	$157, %eax
  40132a: bf 23 00 00 00               	movl	$35, %edi
  40132f: be 0c 00 00 00               	movl	$12, %esi
  401334: 4c 89 fa                     	movq	%r15, %rdx
  401337: 49 89 da                     	movq	%rbx, %r10
  40133a: 45 31 c0                     	xorl	%r8d, %r8d
  40133d: 0f 05                        	syscall
  40133f: 4c 8b 54 24 28               	movq	40(%rsp), %r10
  401344: 4c 8b 44 24 20               	movq	32(%rsp), %r8
  401349: 48 8b 7c 24 08               	movq	8(%rsp), %rdi
  40134e: 4c 29 c7                     	subq	%r8, %rdi
; 	if (frame_size != -1) { // Needed for both
  401351: 48 83 ff ff                  	cmpq	$-1, %rdi
  401355: 0f 84 c5 00 00 00            	je	197 <my_memcpy_nostack_error+0x7d>
; 		copied = my_memcpy_nostack((STACK_END_ADDR - 
  40135b: 4c 89 e8                     	movq	%r13, %rax
  40135e: 4c 29 c8                     	subq	%r9, %rax
  401361: 48 b9 00 b0 ff ff ff 7f 00 00	movabsq	$140737488334848, %rcx

000000000040136b my_memcpy_nostack:
  40136b: 48 39 c1                     	cmpq	%rax, %rcx
  40136e: 0f 8f 2f 00 00 00            	jg	47 <my_memcpy_nostack_error>
  401374: 41 50                        	pushq	%r8
  401376: 41 51                        	pushq	%r9
  401378: 49 c7 c0 00 00 00 00         	movq	$0, %r8
  40137f: 4c 39 c7                     	cmpq	%r8, %rdi
  401382: 0f 8e 14 00 00 00            	jle	20 <my_memcpy_nostack_exit>

0000000000401388 my_memcpy_nostack_copy:
  401388: 46 8a 0c 00                  	movb	(%rax,%r8), %r9b
  40138c: 46 88 0c 01                  	movb	%r9b, (%rcx,%r8)
  401390: 49 ff c0                     	incq	%r8
  401393: 4c 39 c7                     	cmpq	%r8, %rdi
  401396: 0f 8f ec ff ff ff            	jg	-20 <my_memcpy_nostack_copy>

000000000040139c my_memcpy_nostack_exit:
  40139c: 4c 89 c0                     	movq	%r8, %rax
  40139f: 41 59                        	popq	%r9
  4013a1: 41 58                        	popq	%r8

00000000004013a3 my_memcpy_nostack_error:
; 		if (copied != frame_size) {
  4013a3: 48 63 c8                     	movslq	%eax, %rcx
  4013a6: b0 35                        	movb	$53, %al
  4013a8: 48 39 f9                     	cmpq	%rdi, %rcx
  4013ab: 74 73                        	je	115 <my_memcpy_nostack_error+0x7d>
; 	char serror [] = "crt1.c: _start_c ERROR 0\n";
  4013ad: 0f 10 05 96 59 00 00         	movups	22934(%rip), %xmm0
  4013b4: 48 8d 5c 24 30               	leaq	48(%rsp), %rbx
  4013b9: 0f 11 43 0a                  	movups	%xmm0, 10(%rbx)
  4013bd: 0f 28 05 7c 59 00 00         	movaps	22908(%rip), %xmm0
  4013c4: 0f 29 03                     	movaps	%xmm0, (%rbx)
; 	serror[23] += i;
  4013c7: 88 43 17                     	movb	%al, 23(%rbx)
; 	__syscall(SYS_write, 2, serror, strlen(serror));
  4013ca: 48 89 df                     	movq	%rbx, %rdi
  4013cd: e8 0e 26 00 00               	callq	9742 <strlen>
  4013d2: 48 89 c2                     	movq	%rax, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4013d5: b8 01 00 00 00               	movl	$1, %eax
  4013da: bf 02 00 00 00               	movl	$2, %edi
  4013df: 48 89 de                     	movq	%rbx, %rsi
  4013e2: 0f 05                        	syscall
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  4013e4: b8 e7 00 00 00               	movl	$231, %eax
  4013e9: bf 01 00 00 00               	movl	$1, %edi
  4013ee: 0f 05                        	syscall
  4013f0: bf 01 00 00 00               	movl	$1, %edi
  4013f5: b8 3c 00 00 00               	movl	$60, %eax
  4013fa: 0f 05                        	syscall
;     for (;;) __syscall(SYS_exit, 1); //ec);
  4013fc: eb f7                        	jmp	-9 <my_memcpy_nostack_error+0x52>
  4013fe: b0 34                        	movb	$52, %al
  401400: eb ab                        	jmp	-85 <my_memcpy_nostack_error+0xa>
  401402: 4c 89 d6                     	movq	%r10, %rsi
; 	__libc_start_main(main, argc, argv, _init, _fini, 0);
  401405: bf 90 08 40 00               	movl	$4196496, %edi
  40140a: b9 30 14 40 00               	movl	$4199472, %ecx
  40140f: 41 b8 3c 16 40 00            	movl	$4199996, %r8d
  401415: 4c 89 e2                     	movq	%r12, %rdx
  401418: 45 31 c9                     	xorl	%r9d, %r9d
  40141b: e8 b6 01 00 00               	callq	438 <__libc_start_main>
  401420: 4c 89 d6                     	movq	%r10, %rsi
  401423: b8 00 40 00 00               	movl	$16384, %eax
; 	arch_stack_switch(STACK_END_ADDR, (long)((STACK_RELOC_PAGE_ALIGN*STACK_PAGE_SIZE) +STACK_RELOC_OFFSET));
  401428: 49 29 c5                     	subq	%rax, %r13
  40142b: 4c 89 ec                     	movq	%r13, %rsp
  40142e: eb d5                        	jmp	-43 <my_memcpy_nostack_error+0x62>

0000000000401430 dummy:
; static void dummy(void) {}
  401430: c3                           	retq

0000000000401431 dummy1:
; static void dummy1(void *p) {}
  401431: c3                           	retq

0000000000401432 __init_libc:
; {
  401432: 41 57                        	pushq	%r15
  401434: 53                           	pushq	%rbx
  401435: 48 81 ec 58 01 00 00         	subq	$344, %rsp
  40143c: 49 89 f7                     	movq	%rsi, %r15
  40143f: 48 89 fb                     	movq	%rdi, %rbx
  401442: 48 8d 7c 24 20               	leaq	32(%rsp), %rdi
; 	size_t i, *auxv, aux[AUX_CNT] = { 0 };
  401447: ba 30 01 00 00               	movl	$304, %edx
  40144c: 31 f6                        	xorl	%esi, %esi
  40144e: e8 49 26 00 00               	callq	9801 <memset>
; 	__environ = envp;
  401453: 48 89 1d 1e 82 00 00         	movq	%rbx, 33310(%rip)
; 	for (i=0; envp[i]; i++);
  40145a: 48 83 3b 00                  	cmpq	$0, (%rbx)
  40145e: 48 8d 5b 08                  	leaq	8(%rbx), %rbx
  401462: 75 f6                        	jne	-10 <__init_libc+0x28>
; 	libc.auxv = auxv = (void *)(envp+i+1);
  401464: 48 89 1d f5 b9 08 00         	movq	%rbx, 571893(%rip)
; 	for (i=0; auxv[i]; i+=2) if (auxv[i]<AUX_CNT) aux[auxv[i]] = auxv[i+1];
  40146b: 48 8b 03                     	movq	(%rbx), %rax
  40146e: 48 85 c0                     	testq	%rax, %rax
  401471: 74 44                        	je	68 <__init_libc+0x85>
  401473: 48 83 c3 10                  	addq	$16, %rbx
  401477: 48 83 f8 25                  	cmpq	$37, %rax
  40147b: 77 09                        	ja	9 <__init_libc+0x54>
  40147d: 48 8b 4b f8                  	movq	-8(%rbx), %rcx
  401481: 48 89 4c c4 20               	movq	%rcx, 32(%rsp,%rax,8)
  401486: 48 8b 03                     	movq	(%rbx), %rax
  401489: 48 83 c3 10                  	addq	$16, %rbx
  40148d: 48 85 c0                     	testq	%rax, %rax
  401490: 75 e5                        	jne	-27 <__init_libc+0x45>
; 	__hwcap = aux[AT_HWCAP];
  401492: 48 8b 8c 24 a0 00 00 00      	movq	160(%rsp), %rcx
; 	if (aux[AT_SYSINFO]) __sysinfo = aux[AT_SYSINFO];
  40149a: 48 8b 84 24 20 01 00 00      	movq	288(%rsp), %rax
; 	__hwcap = aux[AT_HWCAP];
  4014a2: 48 89 0d 6f ba 08 00         	movq	%rcx, 572015(%rip)
; 	if (aux[AT_SYSINFO]) __sysinfo = aux[AT_SYSINFO];
  4014a9: 48 85 c0                     	testq	%rax, %rax
  4014ac: 74 14                        	je	20 <__init_libc+0x90>
  4014ae: 48 89 05 6b ba 08 00         	movq	%rax, 572011(%rip)
  4014b5: eb 0b                        	jmp	11 <__init_libc+0x90>
; 	__hwcap = aux[AT_HWCAP];
  4014b7: 48 c7 05 56 ba 08 00 00 00 00 00     	movq	$0, 571990(%rip)
; 	libc.page_size = aux[AT_PAGESZ];
  4014c2: 48 8b 44 24 50               	movq	80(%rsp), %rax
  4014c7: 48 89 05 ba b9 08 00         	movq	%rax, 571834(%rip)
; 	if (!pn) pn = (void*)aux[AT_EXECFN];
  4014ce: 4d 85 ff                     	testq	%r15, %r15
  4014d1: 75 08                        	jne	8 <__init_libc+0xa9>
  4014d3: 4c 8b bc 24 18 01 00 00      	movq	280(%rsp), %r15
; 	if (!pn) pn = "";
  4014db: 4d 85 ff                     	testq	%r15, %r15
  4014de: b8 5a 6d 40 00               	movl	$4222298, %eax
  4014e3: 49 0f 45 c7                  	cmovneq	%r15, %rax
; 	__progname = __progname_full = pn;
  4014e7: 48 89 05 5a 7d 00 00         	movq	%rax, 32090(%rip)
  4014ee: 48 89 05 4b 7d 00 00         	movq	%rax, 32075(%rip)
  4014f5: 48 ff c0                     	incq	%rax
; 	for (i=0; pn[i]; i++) if (pn[i]=='/') __progname = pn+i+1;
  4014f8: 8a 48 ff                     	movb	-1(%rax), %cl
  4014fb: 80 f9 2f                     	cmpb	$47, %cl
  4014fe: 74 ee                        	je	-18 <__init_libc+0xbc>
  401500: 84 c9                        	testb	%cl, %cl
  401502: 75 f1                        	jne	-15 <__init_libc+0xc3>
  401504: 48 8d 5c 24 20               	leaq	32(%rsp), %rbx
; 	__init_tls(aux);
  401509: 48 89 df                     	movq	%rbx, %rdi
  40150c: e8 71 28 00 00               	callq	10353 <static_init_tls>
; 	__init_ssp((void *)aux[AT_RANDOM]);
  401511: 48 8b bb c8 00 00 00         	movq	200(%rbx), %rdi
  401518: e8 14 ff ff ff               	callq	-236 <dummy1>
; 	if (aux[AT_UID]==aux[AT_EUID] && aux[AT_GID]==aux[AT_EGID]
  40151d: 48 8b 43 58                  	movq	88(%rbx), %rax
  401521: 48 3b 43 60                  	cmpq	96(%rbx), %rax
  401525: 75 1d                        	jne	29 <__init_libc+0x112>
  401527: 48 8b 84 24 88 00 00 00      	movq	136(%rsp), %rax
  40152f: 48 3b 84 24 90 00 00 00      	cmpq	144(%rsp), %rax
; 		&& !aux[AT_SECURE]) return;
  401537: 75 0b                        	jne	11 <__init_libc+0x112>
  401539: 48 83 bc 24 d8 00 00 00 00   	cmpq	$0, 216(%rsp)
; 	if (aux[AT_UID]==aux[AT_EUID] && aux[AT_GID]==aux[AT_EGID]
  401542: 74 5e                        	je	94 <__init_libc+0x170>
; 	struct pollfd pfd[3] = { {.fd=0}, {.fd=1}, {.fd=2} };
  401544: 48 8b 05 25 58 00 00         	movq	22565(%rip), %rax
  40154b: 48 89 e7                     	movq	%rsp, %rdi
  40154e: 48 89 47 10                  	movq	%rax, 16(%rdi)
  401552: 0f 28 05 07 58 00 00         	movaps	22535(%rip), %xmm0
  401559: 0f 29 07                     	movaps	%xmm0, (%rdi)
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40155c: b8 07 00 00 00               	movl	$7, %eax
  401561: be 03 00 00 00               	movl	$3, %esi
  401566: 31 d2                        	xorl	%edx, %edx
  401568: 0f 05                        	syscall
; 	if (r<0) a_crash();
  40156a: 85 c0                        	testl	%eax, %eax
  40156c: 79 01                        	jns	1 <__init_libc+0x13d>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  40156e: f4                           	hlt
  40156f: 31 d2                        	xorl	%edx, %edx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  401571: bf 78 6d 40 00               	movl	$4222328, %edi
  401576: be 02 00 00 00               	movl	$2, %esi
; 	for (i=0; i<3; i++) if (pfd[i].revents&POLLNVAL)
  40157b: f6 44 d4 06 20               	testb	$32, 6(%rsp,%rdx,8)
  401580: 74 0d                        	je	13 <__init_libc+0x15d>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  401582: b8 02 00 00 00               	movl	$2, %eax
  401587: 0f 05                        	syscall
; 		if (__sys_open("/dev/null", O_RDWR)<0)
  401589: 48 85 c0                     	testq	%rax, %rax
  40158c: 79 01                        	jns	1 <__init_libc+0x15d>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  40158e: f4                           	hlt
; 	for (i=0; i<3; i++) if (pfd[i].revents&POLLNVAL)
  40158f: 48 ff c2                     	incq	%rdx
  401592: 48 83 fa 03                  	cmpq	$3, %rdx
  401596: 75 e3                        	jne	-29 <__init_libc+0x149>
; 	libc.secure = 1;
  401598: c7 05 b6 b8 08 00 01 00 00 00	movl	$1, 571574(%rip)
; }
  4015a2: 48 81 c4 58 01 00 00         	addq	$344, %rsp
  4015a9: 5b                           	popq	%rbx
  4015aa: 41 5f                        	popq	%r15
  4015ac: c3                           	retq

00000000004015ad libc_start_init:
; {
  4015ad: 41 57                        	pushq	%r15
  4015af: 53                           	pushq	%rbx
  4015b0: 50                           	pushq	%rax
; 	_init();
  4015b1: e8 7a fe ff ff               	callq	-390 <dummy>
; 	for (; a<(uintptr_t)&__init_array_end; a+=sizeof(void(*)()))
  4015b6: 41 bf 00 00 00 00            	movl	$0, %r15d
  4015bc: bb 00 00 00 00               	movl	$0, %ebx
  4015c1: 4c 39 fb                     	cmpq	%r15, %rbx
  4015c4: 73 08                        	jae	8 <libc_start_init+0x21>
; 		(*(void (**)(void))a)();
  4015c6: ff 13                        	callq	*(%rbx)
; 	for (; a<(uintptr_t)&__init_array_end; a+=sizeof(void(*)()))
  4015c8: 48 83 c3 08                  	addq	$8, %rbx
  4015cc: eb f3                        	jmp	-13 <libc_start_init+0x14>
; }
  4015ce: 48 83 c4 08                  	addq	$8, %rsp
  4015d2: 5b                           	popq	%rbx
  4015d3: 41 5f                        	popq	%r15
  4015d5: c3                           	retq

00000000004015d6 __libc_start_main:
; {
  4015d6: 55                           	pushq	%rbp
  4015d7: 41 57                        	pushq	%r15
  4015d9: 53                           	pushq	%rbx
  4015da: 48 89 d3                     	movq	%rdx, %rbx
  4015dd: 49 89 ff                     	movq	%rdi, %r15
; 	char **envp = argv+argc+1;
  4015e0: 48 63 ee                     	movslq	%esi, %rbp
  4015e3: 48 8d 3c ea                  	leaq	(%rdx,%rbp,8), %rdi
  4015e7: 48 83 c7 08                  	addq	$8, %rdi
; 	__init_libc(envp, argv[0]);
  4015eb: 48 8b 32                     	movq	(%rdx), %rsi
  4015ee: e8 3f fe ff ff               	callq	-449 <__init_libc>
; 	__asm__ ( "" : "+r"(stage2) : : "memory" );
  4015f3: b8 06 16 40 00               	movl	$4199942, %eax
; 	return stage2(main, argc, argv);
  4015f8: 4c 89 ff                     	movq	%r15, %rdi
  4015fb: 89 ee                        	movl	%ebp, %esi
  4015fd: 48 89 da                     	movq	%rbx, %rdx
  401600: 5b                           	popq	%rbx
  401601: 41 5f                        	popq	%r15
  401603: 5d                           	popq	%rbp
  401604: ff e0                        	jmpq	*%rax

0000000000401606 libc_start_main_stage2:
; {
  401606: 55                           	pushq	%rbp
  401607: 41 57                        	pushq	%r15
  401609: 53                           	pushq	%rbx
  40160a: 48 83 ec 10                  	subq	$16, %rsp
  40160e: 48 89 d3                     	movq	%rdx, %rbx
  401611: 48 89 7c 24 08               	movq	%rdi, 8(%rsp)
; 	char **envp = argv+argc+1;
  401616: 48 63 ee                     	movslq	%esi, %rbp
  401619: 4c 8d 3c ea                  	leaq	(%rdx,%rbp,8), %r15
  40161d: 49 83 c7 08                  	addq	$8, %r15
; 	__libc_start_init();
  401621: e8 87 ff ff ff               	callq	-121 <libc_start_init>
; 	exit(main(argc, argv, envp));
  401626: 89 ef                        	movl	%ebp, %edi
  401628: 48 89 de                     	movq	%rbx, %rsi
  40162b: 4c 89 fa                     	movq	%r15, %rdx
  40162e: ff 54 24 08                  	callq	*8(%rsp)
  401632: 89 c7                        	movl	%eax, %edi
  401634: e8 17 eb ff ff               	callq	-5353 <exit>
  401639: 0f 1f 00                     	nopl	(%rax)

000000000040163c dummy:
; }
  40163c: c3                           	retq

000000000040163d libc_exit_fini:
; {
  40163d: 41 57                        	pushq	%r15
  40163f: 53                           	pushq	%rbx
  401640: 50                           	pushq	%rax
; 	for (; a>(uintptr_t)&__fini_array_start; a-=sizeof(void(*)()))
  401641: 41 bf 00 00 00 00            	movl	$0, %r15d
  401647: bb 00 00 00 00               	movl	$0, %ebx
; 		(*(void (**)())(a-sizeof(void(*)())))();
  40164c: 31 c0                        	xorl	%eax, %eax
  40164e: 4c 39 fb                     	cmpq	%r15, %rbx
; 	for (; a>(uintptr_t)&__fini_array_start; a-=sizeof(void(*)()))
  401651: 76 09                        	jbe	9 <libc_exit_fini+0x1f>
; 		(*(void (**)())(a-sizeof(void(*)())))();
  401653: ff 53 f8                     	callq	*-8(%rbx)
  401656: 48 83 c3 f8                  	addq	$-8, %rbx
  40165a: eb f0                        	jmp	-16 <libc_exit_fini+0xf>
; 	_fini();
  40165c: 48 83 c4 08                  	addq	$8, %rsp
  401660: 5b                           	popq	%rbx
  401661: 41 5f                        	popq	%r15
  401663: e9 d4 ff ff ff               	jmp	-44 <dummy>
  401668: 90                           	nop
  401669: 00 00                        	addb	%al, (%rax)
  40166b: 00 c3                        	addb	%al, %bl

000000000040166c dummy:
; static void dummy(FILE *f) { }
  40166c: c3                           	retq

000000000040166d fclose:
; {
  40166d: 55                           	pushq	%rbp
  40166e: 41 57                        	pushq	%r15
  401670: 53                           	pushq	%rbx
  401671: 48 83 ec 10                  	subq	$16, %rsp
  401675: 48 89 fb                     	movq	%rdi, %rbx
; 	FLOCK(f);
  401678: 83 bf 8c 00 00 00 00         	cmpl	$0, 140(%rdi)
  40167f: 78 13                        	js	19 <fclose+0x27>
  401681: 48 89 df                     	movq	%rbx, %rdi
  401684: e8 1b 42 00 00               	callq	16923 <__lockfile>
  401689: 85 c0                        	testl	%eax, %eax
  40168b: 0f 95 c0                     	setne	%al
  40168e: 89 44 24 0c                  	movl	%eax, 12(%rsp)
  401692: eb 08                        	jmp	8 <fclose+0x2f>
  401694: c7 44 24 0c 00 00 00 00      	movl	$0, 12(%rsp)
; 	r = fflush(f);
  40169c: 48 89 df                     	movq	%rbx, %rdi
  40169f: e8 7c 00 00 00               	callq	124 <fflush_unlocked>
  4016a4: 89 c5                        	movl	%eax, %ebp
; 	r |= f->close(f);
  4016a6: 48 89 df                     	movq	%rbx, %rdi
  4016a9: ff 53 18                     	callq	*24(%rbx)
  4016ac: 41 89 c7                     	movl	%eax, %r15d
; 	FUNLOCK(f);
  4016af: 80 7c 24 0c 00               	cmpb	$0, 12(%rsp)
  4016b4: 74 08                        	je	8 <fclose+0x51>
  4016b6: 48 89 df                     	movq	%rbx, %rdi
  4016b9: e8 7f 42 00 00               	callq	17023 <__unlockfile>
  4016be: 41 09 ef                     	orl	%ebp, %r15d
; 	if (f->flags & F_PERM) return r;
  4016c1: f6 03 01                     	testb	$1, (%rbx)
  4016c4: 75 4c                        	jne	76 <fclose+0xa5>
; 	__unlist_locked_file(f);
  4016c6: 48 89 df                     	movq	%rbx, %rdi
  4016c9: e8 9e ff ff ff               	callq	-98 <dummy>
; 	FILE **head = __ofl_lock();
  4016ce: e8 f1 01 00 00               	callq	497 <__ofl_lock>
; 	if (f->prev) f->prev->next = f->next;
  4016d3: 48 8b 4b 68                  	movq	104(%rbx), %rcx
  4016d7: 48 85 c9                     	testq	%rcx, %rcx
  4016da: 74 08                        	je	8 <fclose+0x77>
  4016dc: 48 8b 53 70                  	movq	112(%rbx), %rdx
  4016e0: 48 89 51 70                  	movq	%rdx, 112(%rcx)
; 	if (f->next) f->next->prev = f->prev;
  4016e4: 48 8b 53 70                  	movq	112(%rbx), %rdx
  4016e8: 48 85 d2                     	testq	%rdx, %rdx
  4016eb: 74 04                        	je	4 <fclose+0x84>
  4016ed: 48 89 4a 68                  	movq	%rcx, 104(%rdx)
; 	if (*head == f) *head = f->next;
  4016f1: 48 39 18                     	cmpq	%rbx, (%rax)
  4016f4: 75 03                        	jne	3 <fclose+0x8c>
  4016f6: 48 89 10                     	movq	%rdx, (%rax)
; 	__ofl_unlock();
  4016f9: e8 d8 01 00 00               	callq	472 <__ofl_unlock>
; 	free(f->getln_buf);
  4016fe: 48 8b bb a8 00 00 00         	movq	168(%rbx), %rdi
  401705: e8 f6 35 00 00               	callq	13814 <free>
; 	free(f);
  40170a: 48 89 df                     	movq	%rbx, %rdi
  40170d: e8 ee 35 00 00               	callq	13806 <free>
; }
  401712: 44 89 f8                     	movl	%r15d, %eax
  401715: 48 83 c4 10                  	addq	$16, %rsp
  401719: 5b                           	popq	%rbx
  40171a: 41 5f                        	popq	%r15
  40171c: 5d                           	popq	%rbp
  40171d: c3                           	retq
  40171e: 66 90                        	nop

0000000000401720 fflush_unlocked:
; {
  401720: 55                           	pushq	%rbp
  401721: 41 57                        	pushq	%r15
  401723: 53                           	pushq	%rbx
; 	if (!f) {
  401724: 48 85 ff                     	testq	%rdi, %rdi
  401727: 74 18                        	je	24 <fflush_unlocked+0x21>
  401729: 48 89 fb                     	movq	%rdi, %rbx
; 	FLOCK(f);
  40172c: 83 bf 8c 00 00 00 00         	cmpl	$0, 140(%rdi)
  401733: 78 27                        	js	39 <fflush_unlocked+0x3c>
  401735: 48 89 df                     	movq	%rbx, %rdi
  401738: e8 67 41 00 00               	callq	16743 <__lockfile>
  40173d: 89 c5                        	movl	%eax, %ebp
  40173f: eb 1d                        	jmp	29 <fflush_unlocked+0x3e>
; 		if (__stdout_used) r |= fflush(__stdout_used);
  401741: 48 83 3d a7 76 00 00 00      	cmpq	$0, 30375(%rip)
  401749: 74 5f                        	je	95 <fflush_unlocked+0x8a>
  40174b: 48 8b 3d 9e 76 00 00         	movq	30366(%rip), %rdi
  401752: e8 c9 ff ff ff               	callq	-55 <fflush_unlocked>
  401757: 41 89 c7                     	movl	%eax, %r15d
  40175a: eb 51                        	jmp	81 <fflush_unlocked+0x8d>
  40175c: 31 ed                        	xorl	%ebp, %ebp
; 	if (f->wpos != f->wbase) {
  40175e: 48 8b 43 28                  	movq	40(%rbx), %rax
  401762: 48 3b 43 38                  	cmpq	56(%rbx), %rax
  401766: 74 15                        	je	21 <fflush_unlocked+0x5d>
; 		f->write(f, 0, 0);
  401768: 48 89 df                     	movq	%rbx, %rdi
  40176b: 31 f6                        	xorl	%esi, %esi
  40176d: 31 d2                        	xorl	%edx, %edx
  40176f: ff 53 48                     	callq	*72(%rbx)
; 		if (!f->wpos) {
  401772: 48 83 7b 28 00               	cmpq	$0, 40(%rbx)
  401777: 0f 84 9b 00 00 00            	je	155 <fflush_unlocked+0xf8>
; 	if (f->rpos != f->rend) f->seek(f, f->rpos-f->rend, SEEK_CUR);
  40177d: 48 8b 73 08                  	movq	8(%rbx), %rsi
  401781: 48 2b 73 10                  	subq	16(%rbx), %rsi
  401785: 74 0b                        	je	11 <fflush_unlocked+0x72>
  401787: 48 89 df                     	movq	%rbx, %rdi
  40178a: ba 01 00 00 00               	movl	$1, %edx
  40178f: ff 53 50                     	callq	*80(%rbx)
; 	f->wpos = f->wbase = f->wend = 0;
  401792: 48 c7 43 38 00 00 00 00      	movq	$0, 56(%rbx)
  40179a: 0f 57 c0                     	xorps	%xmm0, %xmm0
  40179d: 0f 11 43 20                  	movups	%xmm0, 32(%rbx)
; 	f->rpos = f->rend = 0;
  4017a1: 0f 11 43 08                  	movups	%xmm0, 8(%rbx)
  4017a5: 45 31 ff                     	xorl	%r15d, %r15d
  4017a8: eb 74                        	jmp	116 <fflush_unlocked+0xfe>
  4017aa: 45 31 ff                     	xorl	%r15d, %r15d
; 		if (__stderr_used) r |= fflush(__stderr_used);
  4017ad: 48 83 3d 9b 7a 00 00 00      	cmpq	$0, 31387(%rip)
  4017b5: 74 0f                        	je	15 <fflush_unlocked+0xa6>
  4017b7: 48 8b 3d 92 7a 00 00         	movq	31378(%rip), %rdi
  4017be: e8 5d ff ff ff               	callq	-163 <fflush_unlocked>
  4017c3: 41 09 c7                     	orl	%eax, %r15d
; 		for (f=*__ofl_lock(); f; f=f->next) {
  4017c6: e8 f9 00 00 00               	callq	249 <__ofl_lock>
  4017cb: 48 8b 18                     	movq	(%rax), %rbx
  4017ce: 48 85 db                     	testq	%rbx, %rbx
  4017d1: 74 3e                        	je	62 <fflush_unlocked+0xf1>
; 			FLOCK(f);
  4017d3: 83 bb 8c 00 00 00 00         	cmpl	$0, 140(%rbx)
  4017da: 78 0c                        	js	12 <fflush_unlocked+0xc8>
  4017dc: 48 89 df                     	movq	%rbx, %rdi
  4017df: e8 c0 40 00 00               	callq	16576 <__lockfile>
  4017e4: 89 c5                        	movl	%eax, %ebp
  4017e6: eb 02                        	jmp	2 <fflush_unlocked+0xca>
  4017e8: 31 ed                        	xorl	%ebp, %ebp
; 			if (f->wpos != f->wbase) r |= fflush(f);
  4017ea: 48 8b 43 28                  	movq	40(%rbx), %rax
  4017ee: 48 3b 43 38                  	cmpq	56(%rbx), %rax
  4017f2: 74 0b                        	je	11 <fflush_unlocked+0xdf>
  4017f4: 48 89 df                     	movq	%rbx, %rdi
  4017f7: e8 24 ff ff ff               	callq	-220 <fflush_unlocked>
  4017fc: 41 09 c7                     	orl	%eax, %r15d
; 			FUNLOCK(f);
  4017ff: 85 ed                        	testl	%ebp, %ebp
  401801: 74 08                        	je	8 <fflush_unlocked+0xeb>
  401803: 48 89 df                     	movq	%rbx, %rdi
  401806: e8 32 41 00 00               	callq	16690 <__unlockfile>
  40180b: 48 8b 5b 70                  	movq	112(%rbx), %rbx
  40180f: eb bd                        	jmp	-67 <fflush_unlocked+0xae>
; 		__ofl_unlock();
  401811: e8 c0 00 00 00               	callq	192 <__ofl_unlock>
  401816: eb 12                        	jmp	18 <fflush_unlocked+0x10a>
  401818: 41 bf ff ff ff ff            	movl	$4294967295, %r15d
  40181e: 85 ed                        	testl	%ebp, %ebp
  401820: 74 08                        	je	8 <fflush_unlocked+0x10a>
  401822: 48 89 df                     	movq	%rbx, %rdi
  401825: e8 13 41 00 00               	callq	16659 <__unlockfile>
; }
  40182a: 44 89 f8                     	movl	%r15d, %eax
  40182d: 5b                           	popq	%rbx
  40182e: 41 5f                        	popq	%r15
  401830: 5d                           	popq	%rbp
  401831: c3                           	retq
  401832: 66 90                        	nop

0000000000401834 fopen64:
; {
  401834: 55                           	pushq	%rbp
  401835: 41 57                        	pushq	%r15
  401837: 53                           	pushq	%rbx
  401838: 48 89 f3                     	movq	%rsi, %rbx
  40183b: 49 89 ff                     	movq	%rdi, %r15
; 	if (!strchr("rwa", *mode)) {
  40183e: 0f be 36                     	movsbl	(%rsi), %esi
  401841: bf 82 6d 40 00               	movl	$4222338, %edi
  401846: e8 85 20 00 00               	callq	8325 <strchr>
  40184b: 48 85 c0                     	testq	%rax, %rax
  40184e: 74 62                        	je	98 <fopen64+0x7e>
; 	flags = __fmodeflags(mode);
  401850: 48 89 df                     	movq	%rbx, %rdi
  401853: e8 c8 3f 00 00               	callq	16328 <__fmodeflags>
  401858: 89 c5                        	movl	%eax, %ebp
; 	fd = sys_open(filename, flags, 0666);
  40185a: 48 63 f0                     	movslq	%eax, %rsi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40185d: b8 02 00 00 00               	movl	$2, %eax
  401862: ba b6 01 00 00               	movl	$438, %edx
  401867: 4c 89 ff                     	movq	%r15, %rdi
  40186a: 0f 05                        	syscall
; 	fd = sys_open(filename, flags, 0666);
  40186c: 48 89 c7                     	movq	%rax, %rdi
  40186f: e8 0c 27 00 00               	callq	9996 <__syscall_ret>
  401874: 49 89 c7                     	movq	%rax, %r15
; 	if (fd < 0) return 0;
  401877: 45 85 ff                     	testl	%r15d, %r15d
  40187a: 78 41                        	js	65 <fopen64+0x89>
; 	if (flags & O_CLOEXEC)
  40187c: 0f ba e5 13                  	btl	$19, %ebp
  401880: 73 14                        	jae	20 <fopen64+0x62>
; 		__syscall(SYS_fcntl, fd, F_SETFD, FD_CLOEXEC);
  401882: 49 63 ff                     	movslq	%r15d, %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  401885: b8 48 00 00 00               	movl	$72, %eax
  40188a: be 02 00 00 00               	movl	$2, %esi
  40188f: ba 01 00 00 00               	movl	$1, %edx
  401894: 0f 05                        	syscall
; 	f = __fdopen(fd, mode);
  401896: 44 89 ff                     	movl	%r15d, %edi
  401899: 48 89 de                     	movq	%rbx, %rsi
  40189c: e8 03 3e 00 00               	callq	15875 <fdopen>
; 	if (f) return f;
  4018a1: 48 85 c0                     	testq	%rax, %rax
  4018a4: 75 19                        	jne	25 <fopen64+0x8b>
; 	__syscall(SYS_close, fd);
  4018a6: 49 63 ff                     	movslq	%r15d, %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  4018a9: b8 03 00 00 00               	movl	$3, %eax
  4018ae: 0f 05                        	syscall
  4018b0: eb 0b                        	jmp	11 <fopen64+0x89>
; 		errno = EINVAL;
  4018b2: e8 45 26 00 00               	callq	9797 <__errno_location>
  4018b7: c7 00 16 00 00 00            	movl	$22, (%rax)
  4018bd: 31 c0                        	xorl	%eax, %eax
; }
  4018bf: 5b                           	popq	%rbx
  4018c0: 41 5f                        	popq	%r15
  4018c2: 5d                           	popq	%rbp
  4018c3: c3                           	retq

00000000004018c4 __ofl_lock:
; {
  4018c4: 50                           	pushq	%rax
; 	LOCK(ofl_lock);
  4018c5: bf 58 92 40 00               	movl	$4231768, %edi
  4018ca: e8 91 22 00 00               	callq	8849 <__lock>
; 	return &ofl_head;
  4018cf: b8 60 92 40 00               	movl	$4231776, %eax
  4018d4: 59                           	popq	%rcx
  4018d5: c3                           	retq

00000000004018d6 __ofl_unlock:
; 	UNLOCK(ofl_lock);
  4018d6: bf 58 92 40 00               	movl	$4231768, %edi
  4018db: e9 17 23 00 00               	jmp	8983 <__unlock>

00000000004018e0 printf:
; {
  4018e0: 48 81 ec c8 00 00 00         	subq	$200, %rsp
  4018e7: 49 89 fa                     	movq	%rdi, %r10
  4018ea: 84 c0                        	testb	%al, %al
  4018ec: 74 31                        	je	49 <printf+0x3f>
  4018ee: 0f 29 44 24 30               	movaps	%xmm0, 48(%rsp)
  4018f3: 0f 29 4c 24 40               	movaps	%xmm1, 64(%rsp)
  4018f8: 0f 29 54 24 50               	movaps	%xmm2, 80(%rsp)
  4018fd: 0f 29 5c 24 60               	movaps	%xmm3, 96(%rsp)
  401902: 0f 29 64 24 70               	movaps	%xmm4, 112(%rsp)
  401907: 0f 29 ac 24 80 00 00 00      	movaps	%xmm5, 128(%rsp)
  40190f: 0f 29 b4 24 90 00 00 00      	movaps	%xmm6, 144(%rsp)
  401917: 0f 29 bc 24 a0 00 00 00      	movaps	%xmm7, 160(%rsp)
  40191f: 48 89 e0                     	movq	%rsp, %rax
  401922: 48 89 70 08                  	movq	%rsi, 8(%rax)
  401926: 48 89 50 10                  	movq	%rdx, 16(%rax)
  40192a: 48 89 48 18                  	movq	%rcx, 24(%rax)
  40192e: 4c 89 40 20                  	movq	%r8, 32(%rax)
  401932: 4c 89 48 28                  	movq	%r9, 40(%rax)
  401936: 48 8d 94 24 b0 00 00 00      	leaq	176(%rsp), %rdx
; 	va_start(ap, fmt);
  40193e: 48 89 42 10                  	movq	%rax, 16(%rdx)
  401942: 48 8d 84 24 d0 00 00 00      	leaq	208(%rsp), %rax
  40194a: 48 89 42 08                  	movq	%rax, 8(%rdx)
  40194e: 48 b8 08 00 00 00 30 00 00 00	movabsq	$206158430216, %rax
  401958: 48 89 02                     	movq	%rax, (%rdx)
; 	ret = vfprintf(stdout, fmt, ap);
  40195b: bf 08 8d 40 00               	movl	$4230408, %edi
  401960: 4c 89 d6                     	movq	%r10, %rsi
  401963: e8 08 00 00 00               	callq	8 <vfprintf>
; 	return ret;
  401968: 48 81 c4 c8 00 00 00         	addq	$200, %rsp
  40196f: c3                           	retq

0000000000401970 vfprintf:
; {
  401970: 55                           	pushq	%rbp
  401971: 41 57                        	pushq	%r15
  401973: 53                           	pushq	%rbx
  401974: 48 81 ec 00 01 00 00         	subq	$256, %rsp
  40197b: 48 89 f5                     	movq	%rsi, %rbp
  40197e: 48 89 fb                     	movq	%rdi, %rbx
; 	int nl_type[NL_ARGMAX+1] = {0};
  401981: 0f 57 c0                     	xorps	%xmm0, %xmm0
  401984: 4c 8d 44 24 30               	leaq	48(%rsp), %r8
  401989: 41 0f 29 40 10               	movaps	%xmm0, 16(%r8)
  40198e: 41 0f 29 00                  	movaps	%xmm0, (%r8)
  401992: 49 c7 40 20 00 00 00 00      	movq	$0, 32(%r8)
; 	va_copy(ap2, ap);
  40199a: 0f 10 02                     	movups	(%rdx), %xmm0
  40199d: 48 8d 44 24 10               	leaq	16(%rsp), %rax
  4019a2: 0f 29 00                     	movaps	%xmm0, (%rax)
  4019a5: 48 8b 4a 10                  	movq	16(%rdx), %rcx
  4019a9: 48 89 48 10                  	movq	%rcx, 16(%rax)
  4019ad: 45 31 ff                     	xorl	%r15d, %r15d
  4019b0: 48 8d 4c 24 60               	leaq	96(%rsp), %rcx
; 	if (printf_core(0, fmt, &ap2, nl_arg, nl_type) < 0) {
  4019b5: 31 ff                        	xorl	%edi, %edi
  4019b7: 48 89 c2                     	movq	%rax, %rdx
  4019ba: e8 1e 01 00 00               	callq	286 <printf_core>
  4019bf: 85 c0                        	testl	%eax, %eax
  4019c1: 78 43                        	js	67 <vfprintf+0x96>
  4019c3: 48 89 2c 24                  	movq	%rbp, (%rsp)
; 	FLOCK(f);
  4019c7: 83 bb 8c 00 00 00 00         	cmpl	$0, 140(%rbx)
  4019ce: 78 0b                        	js	11 <vfprintf+0x6b>
  4019d0: 48 89 df                     	movq	%rbx, %rdi
  4019d3: e8 cc 3e 00 00               	callq	16076 <__lockfile>
  4019d8: 41 89 c7                     	movl	%eax, %r15d
  4019db: 4c 89 7c 24 08               	movq	%r15, 8(%rsp)
; 	olderr = f->flags & F_ERR;
  4019e0: 44 8b 3b                     	movl	(%rbx), %r15d
; 	if (f->mode < 1) f->flags &= ~F_ERR;
  4019e3: 83 bb 88 00 00 00 00         	cmpl	$0, 136(%rbx)
  4019ea: 7f 08                        	jg	8 <vfprintf+0x84>
  4019ec: 44 89 f8                     	movl	%r15d, %eax
  4019ef: 83 e0 df                     	andl	$-33, %eax
  4019f2: 89 03                        	movl	%eax, (%rbx)
; 	if (!f->buf_size) {
  4019f4: 48 83 7b 60 00               	cmpq	$0, 96(%rbx)
  4019f9: 74 15                        	je	21 <vfprintf+0xa0>
  4019fb: 31 ed                        	xorl	%ebp, %ebp
  4019fd: 48 83 7b 20 00               	cmpq	$0, 32(%rbx)
  401a02: 75 44                        	jne	68 <vfprintf+0xd8>
  401a04: eb 31                        	jmp	49 <vfprintf+0xc7>
  401a06: bd ff ff ff ff               	movl	$4294967295, %ebp
  401a0b: e9 bf 00 00 00               	jmp	191 <vfprintf+0x15f>
; 		saved_buf = f->buf;
  401a10: 48 8b 6b 58                  	movq	88(%rbx), %rbp
  401a14: 48 8d 84 24 b0 00 00 00      	leaq	176(%rsp), %rax
; 		f->buf = internal_buf;
  401a1c: 48 89 43 58                  	movq	%rax, 88(%rbx)
; 		f->buf_size = sizeof internal_buf;
  401a20: 48 c7 43 60 50 00 00 00      	movq	$80, 96(%rbx)
; 		f->wpos = f->wbase = f->wend = 0;
  401a28: 48 c7 43 38 00 00 00 00      	movq	$0, 56(%rbx)
  401a30: 0f 57 c0                     	xorps	%xmm0, %xmm0
  401a33: 0f 11 43 20                  	movups	%xmm0, 32(%rbx)
; 	if (!f->wend && __towrite(f)) ret = -1;
  401a37: 48 89 df                     	movq	%rbx, %rdi
  401a3a: e8 71 41 00 00               	callq	16753 <__towrite>
  401a3f: ba ff ff ff ff               	movl	$4294967295, %edx
  401a44: 85 c0                        	testl	%eax, %eax
  401a46: 75 1d                        	jne	29 <vfprintf+0xf5>
  401a48: 48 8d 54 24 10               	leaq	16(%rsp), %rdx
  401a4d: 48 8d 4c 24 60               	leaq	96(%rsp), %rcx
  401a52: 4c 8d 44 24 30               	leaq	48(%rsp), %r8
; 	else ret = printf_core(f, fmt, &ap2, nl_arg, nl_type);
  401a57: 48 89 df                     	movq	%rbx, %rdi
  401a5a: 48 8b 34 24                  	movq	(%rsp), %rsi
  401a5e: e8 7a 00 00 00               	callq	122 <printf_core>
  401a63: 89 c2                        	movl	%eax, %edx
  401a65: 41 83 e7 20                  	andl	$32, %r15d
; 	if (saved_buf) {
  401a69: 48 85 ed                     	testq	%rbp, %rbp
  401a6c: 74 3a                        	je	58 <vfprintf+0x138>
  401a6e: 48 89 2c 24                  	movq	%rbp, (%rsp)
; 		f->write(f, 0, 0);
  401a72: 48 89 df                     	movq	%rbx, %rdi
  401a75: 31 f6                        	xorl	%esi, %esi
  401a77: 89 d5                        	movl	%edx, %ebp
  401a79: 31 d2                        	xorl	%edx, %edx
  401a7b: ff 53 48                     	callq	*72(%rbx)
  401a7e: 89 ea                        	movl	%ebp, %edx
; 		if (!f->wpos) ret = -1;
  401a80: 48 83 7b 28 01               	cmpq	$1, 40(%rbx)
  401a85: b8 00 00 00 00               	movl	$0, %eax
  401a8a: 19 c0                        	sbbl	%eax, %eax
  401a8c: 09 c2                        	orl	%eax, %edx
  401a8e: 48 8b 04 24                  	movq	(%rsp), %rax
; 		f->buf = saved_buf;
  401a92: 48 89 43 58                  	movq	%rax, 88(%rbx)
; 		if (!f->wpos) ret = -1;
  401a96: 31 c0                        	xorl	%eax, %eax
; 		f->buf_size = 0;
  401a98: 48 89 43 60                  	movq	%rax, 96(%rbx)
; 		f->wpos = f->wbase = f->wend = 0;
  401a9c: 48 89 43 20                  	movq	%rax, 32(%rbx)
  401aa0: 48 89 43 38                  	movq	%rax, 56(%rbx)
  401aa4: 48 89 43 28                  	movq	%rax, 40(%rbx)
; 	if (f->flags & F_ERR) ret = -1;
  401aa8: 8b 03                        	movl	(%rbx), %eax
  401aaa: 89 c1                        	movl	%eax, %ecx
  401aac: 83 e1 20                     	andl	$32, %ecx
  401aaf: 31 ed                        	xorl	%ebp, %ebp
  401ab1: 83 f9 01                     	cmpl	$1, %ecx
  401ab4: 19 ed                        	sbbl	%ebp, %ebp
  401ab6: f7 d5                        	notl	%ebp
  401ab8: 09 d5                        	orl	%edx, %ebp
; 	f->flags |= olderr;
  401aba: 41 09 c7                     	orl	%eax, %r15d
  401abd: 44 89 3b                     	movl	%r15d, (%rbx)
; 	FUNLOCK(f);
  401ac0: 83 7c 24 08 00               	cmpl	$0, 8(%rsp)
  401ac5: 74 08                        	je	8 <vfprintf+0x15f>
  401ac7: 48 89 df                     	movq	%rbx, %rdi
  401aca: e8 6e 3e 00 00               	callq	15982 <__unlockfile>
; }
  401acf: 89 e8                        	movl	%ebp, %eax
  401ad1: 48 81 c4 00 01 00 00         	addq	$256, %rsp
  401ad8: 5b                           	popq	%rbx
  401ad9: 41 5f                        	popq	%r15
  401adb: 5d                           	popq	%rbp
  401adc: c3                           	retq

0000000000401add printf_core:
; {
  401add: 55                           	pushq	%rbp
  401ade: 41 57                        	pushq	%r15
  401ae0: 53                           	pushq	%rbx
  401ae1: 48 81 ec e0 1d 00 00         	subq	$7648, %rsp
  401ae8: 4c 89 84 24 90 00 00 00      	movq	%r8, 144(%rsp)
  401af0: 48 89 8c 24 b0 00 00 00      	movq	%rcx, 176(%rsp)
  401af8: 48 89 94 24 b8 00 00 00      	movq	%rdx, 184(%rsp)
  401b00: 48 89 f5                     	movq	%rsi, %rbp
  401b03: 49 89 fc                     	movq	%rdi, %r12
  401b06: 48 8d 44 24 60               	leaq	96(%rsp), %rax
  401b0b: 48 83 f0 fe                  	xorq	$-2, %rax
  401b0f: 48 89 84 24 18 01 00 00      	movq	%rax, 280(%rsp)
  401b17: c7 44 24 54 00 00 00 00      	movl	$0, 84(%rsp)
  401b1f: 45 31 c9                     	xorl	%r9d, %r9d
  401b22: 31 db                        	xorl	%ebx, %ebx
  401b24: 48 89 7c 24 18               	movq	%rdi, 24(%rsp)
; 		if (l > INT_MAX - cnt) goto overflow;
  401b29: b9 ff ff ff 7f               	movl	$2147483647, %ecx
  401b2e: 44 29 c9                     	subl	%r9d, %ecx
  401b31: 39 cb                        	cmpl	%ecx, %ebx
  401b33: 0f 8f 72 1a 00 00            	jg	6770 <printf_core+0x1ace>
  401b39: 44 89 c8                     	movl	%r9d, %eax
  401b3c: 49 89 ed                     	movq	%rbp, %r13
; 		cnt += l;
  401b3f: 41 89 d9                     	movl	%ebx, %r9d
  401b42: 41 01 c1                     	addl	%eax, %r9d
; 		if (!*s) break;
  401b45: 8a 45 00                     	movb	(%rbp), %al
  401b48: 84 c0                        	testb	%al, %al
  401b4a: 0f 84 6b 1a 00 00            	je	6763 <printf_core+0x1ade>
  401b50: 4c 89 ed                     	movq	%r13, %rbp
; 		for (a=s; *s && *s!='%'; s++);
  401b53: 84 c0                        	testb	%al, %al
  401b55: 74 0c                        	je	12 <printf_core+0x86>
  401b57: 3c 25                        	cmpb	$37, %al
  401b59: 74 0d                        	je	13 <printf_core+0x8b>
  401b5b: 8a 45 01                     	movb	1(%rbp), %al
  401b5e: 48 ff c5                     	incq	%rbp
  401b61: eb f0                        	jmp	-16 <printf_core+0x76>
  401b63: 48 89 eb                     	movq	%rbp, %rbx
  401b66: eb 16                        	jmp	22 <printf_core+0xa1>
  401b68: 48 89 eb                     	movq	%rbp, %rbx
; 		for (z=s; s[0]=='%' && s[1]=='%'; z++, s+=2);
  401b6b: 80 7d 01 25                  	cmpb	$37, 1(%rbp)
  401b6f: 75 0d                        	jne	13 <printf_core+0xa1>
  401b71: 48 ff c3                     	incq	%rbx
  401b74: 80 7d 02 25                  	cmpb	$37, 2(%rbp)
  401b78: 48 8d 6d 02                  	leaq	2(%rbp), %rbp
  401b7c: 74 ed                        	je	-19 <printf_core+0x8e>
; 		if (z-a > INT_MAX-cnt) goto overflow;
  401b7e: 4c 29 eb                     	subq	%r13, %rbx
  401b81: bf ff ff ff 7f               	movl	$2147483647, %edi
  401b86: 44 29 cf                     	subl	%r9d, %edi
  401b89: 48 63 c7                     	movslq	%edi, %rax
  401b8c: 48 39 c3                     	cmpq	%rax, %rbx
  401b8f: 0f 8f 16 1a 00 00            	jg	6678 <printf_core+0x1ace>
  401b95: 4d 85 e4                     	testq	%r12, %r12
; 		if (f) out(f, a, l);
  401b98: 74 32                        	je	50 <printf_core+0xef>
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  401b9a: 41 f6 04 24 20               	testb	$32, (%r12)
  401b9f: 75 2b                        	jne	43 <printf_core+0xef>
; 		if (f) out(f, a, l);
  401ba1: 48 63 f3                     	movslq	%ebx, %rsi
  401ba4: 89 7c 24 30                  	movl	%edi, 48(%rsp)
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  401ba8: 4c 89 ef                     	movq	%r13, %rdi
  401bab: 4c 89 e2                     	movq	%r12, %rdx
  401bae: 45 89 cf                     	movl	%r9d, %r15d
  401bb1: 4c 89 6c 24 28               	movq	%r13, 40(%rsp)
  401bb6: e8 3d 40 00 00               	callq	16445 <__fwritex>
  401bbb: 8b 7c 24 30                  	movl	48(%rsp), %edi
  401bbf: 4c 8b 6c 24 28               	movq	40(%rsp), %r13
  401bc4: 45 89 f9                     	movl	%r15d, %r9d
  401bc7: 4c 8b 64 24 18               	movq	24(%rsp), %r12
; 		if (l) continue;
  401bcc: 85 db                        	testl	%ebx, %ebx
  401bce: 0f 85 55 ff ff ff            	jne	-171 <printf_core+0x4c>
; 		if (isdigit(s[1]) && s[2]=='$') {
  401bd4: 48 8d 45 01                  	leaq	1(%rbp), %rax
  401bd8: 8a 5d 01                     	movb	1(%rbp), %bl
  401bdb: 0f be f3                     	movsbl	%bl, %esi
  401bde: 8d 4e d0                     	leal	-48(%rsi), %ecx
  401be1: 41 bb ff ff ff ff            	movl	$4294967295, %r11d
  401be7: 83 f9 09                     	cmpl	$9, %ecx
  401bea: 77 38                        	ja	56 <printf_core+0x147>
; 			s+=3;
  401bec: 48 8d 55 03                  	leaq	3(%rbp), %rdx
; 		if (isdigit(s[1]) && s[2]=='$') {
  401bf0: 31 f6                        	xorl	%esi, %esi
  401bf2: 80 7d 02 24                  	cmpb	$36, 2(%rbp)
  401bf6: 40 0f 94 c6                  	sete	%sil
  401bfa: 48 0f 44 c2                  	cmoveq	%rdx, %rax
  401bfe: ba 01 00 00 00               	movl	$1, %edx
  401c03: 89 fb                        	movl	%edi, %ebx
  401c05: 8b 7c 24 54                  	movl	84(%rsp), %edi
  401c09: 0f 44 fa                     	cmovel	%edx, %edi
  401c0c: 89 7c 24 54                  	movl	%edi, 84(%rsp)
  401c10: 89 df                        	movl	%ebx, %edi
  401c12: ba ff ff ff ff               	movl	$4294967295, %edx
  401c17: 0f 45 ca                     	cmovnel	%edx, %ecx
; 		for (fl=0; (unsigned)*s-' '<32 && (FLAGMASK&(1U<<*s-' ')); s++)
  401c1a: 8a 5c 75 01                  	movb	1(%rbp,%rsi,2), %bl
  401c1e: 0f be f3                     	movsbl	%bl, %esi
  401c21: 41 89 cb                     	movl	%ecx, %r11d
  401c24: bd 89 28 01 00               	movl	$75913, %ebp
  401c29: 8d 4e e0                     	leal	-32(%rsi), %ecx
  401c2c: 45 31 c0                     	xorl	%r8d, %r8d
  401c2f: 83 f9 1f                     	cmpl	$31, %ecx
  401c32: 4c 8b 94 24 b0 00 00 00      	movq	176(%rsp), %r10
  401c3a: 77 44                        	ja	68 <printf_core+0x1a3>
  401c3c: 41 89 fe                     	movl	%edi, %r14d
  401c3f: bf 01 00 00 00               	movl	$1, %edi
  401c44: d3 e7                        	shll	%cl, %edi
  401c46: 0f a3 cd                     	btl	%ecx, %ebp
  401c49: 73 32                        	jae	50 <printf_core+0x1a0>
  401c4b: 48 ff c0                     	incq	%rax
  401c4e: 45 31 c0                     	xorl	%r8d, %r8d
  401c51: 48 89 c2                     	movq	%rax, %rdx
  401c54: 44 89 c1                     	movl	%r8d, %ecx
  401c57: 48 89 d0                     	movq	%rdx, %rax
; 			fl |= 1U<<*s-' ';
  401c5a: 41 89 f8                     	movl	%edi, %r8d
  401c5d: 41 09 c8                     	orl	%ecx, %r8d
; 		for (fl=0; (unsigned)*s-' '<32 && (FLAGMASK&(1U<<*s-' ')); s++)
  401c60: 8a 1a                        	movb	(%rdx), %bl
  401c62: 0f be f3                     	movsbl	%bl, %esi
  401c65: 8d 4e e0                     	leal	-32(%rsi), %ecx
  401c68: 83 f9 20                     	cmpl	$32, %ecx
  401c6b: 73 10                        	jae	16 <printf_core+0x1a0>
  401c6d: bf 01 00 00 00               	movl	$1, %edi
  401c72: d3 e7                        	shll	%cl, %edi
  401c74: 48 8d 50 01                  	leaq	1(%rax), %rdx
  401c78: 0f a3 cd                     	btl	%ecx, %ebp
  401c7b: 72 d7                        	jb	-41 <printf_core+0x177>
  401c7d: 44 89 f7                     	movl	%r14d, %edi
; 		if (*s=='*') {
  401c80: 80 fb 2a                     	cmpb	$42, %bl
  401c83: 75 4e                        	jne	78 <printf_core+0x1f6>
; 			if (isdigit(s[1]) && s[2]=='$') {
  401c85: 0f be 48 01                  	movsbl	1(%rax), %ecx
  401c89: 8d 51 d0                     	leal	-48(%rcx), %edx
  401c8c: 83 fa 09                     	cmpl	$9, %edx
  401c8f: 0f 87 95 00 00 00            	ja	149 <printf_core+0x24d>
  401c95: 80 78 02 24                  	cmpb	$36, 2(%rax)
  401c99: 0f 85 8b 00 00 00            	jne	139 <printf_core+0x24d>
  401c9f: 48 63 c9                     	movslq	%ecx, %rcx
  401ca2: 48 8b 94 24 90 00 00 00      	movq	144(%rsp), %rdx
; 				nl_type[s[1]-'0'] = INT;
  401caa: c7 84 8a 40 ff ff ff 0a 00 00 00     	movl	$10, -192(%rdx,%rcx,4)
; 				w = nl_arg[s[1]-'0'].i;
  401cb5: 48 0f be 48 01               	movsbq	1(%rax), %rcx
  401cba: 45 8b 94 ca 80 fe ff ff      	movl	-384(%r10,%rcx,8), %r10d
; 				s+=3;
  401cc2: 48 83 c0 03                  	addq	$3, %rax
  401cc6: c7 44 24 54 01 00 00 00      	movl	$1, 84(%rsp)
  401cce: e9 b1 00 00 00               	jmp	177 <printf_core+0x2a7>
; 	for (i=0; isdigit(**s); (*s)++) {
  401cd3: 83 c6 d0                     	addl	$-48, %esi
  401cd6: 45 31 d2                     	xorl	%r10d, %r10d
  401cd9: 83 fe 09                     	cmpl	$9, %esi
  401cdc: 0f 87 b1 00 00 00            	ja	177 <printf_core+0x2b6>
  401ce2: 31 c9                        	xorl	%ecx, %ecx
  401ce4: ba ff ff ff ff               	movl	$4294967295, %edx
  401ce9: 41 ba ff ff ff ff            	movl	$4294967295, %r10d
; 		if (i > INT_MAX/10U || **s-'0' > INT_MAX-10*i) i = -1;
  401cef: 81 f9 cc cc cc 0c            	cmpl	$214748364, %ecx
  401cf5: 77 17                        	ja	23 <printf_core+0x231>
  401cf7: 01 c9                        	addl	%ecx, %ecx
  401cf9: 44 8d 14 89                  	leal	(%rcx,%rcx,4), %r10d
  401cfd: b9 ff ff ff 7f               	movl	$2147483647, %ecx
  401d02: 44 29 d1                     	subl	%r10d, %ecx
; 		else i = 10*i + (**s-'0');
  401d05: 41 01 f2                     	addl	%esi, %r10d
; 		if (i > INT_MAX/10U || **s-'0' > INT_MAX-10*i) i = -1;
  401d08: 39 ce                        	cmpl	%ecx, %esi
  401d0a: 44 0f 4f d2                  	cmovgl	%edx, %r10d
; 	for (i=0; isdigit(**s); (*s)++) {
  401d0e: 0f be 70 01                  	movsbl	1(%rax), %esi
  401d12: 48 ff c0                     	incq	%rax
  401d15: 83 c6 d0                     	addl	$-48, %esi
  401d18: 44 89 d1                     	movl	%r10d, %ecx
  401d1b: 83 fe 0a                     	cmpl	$10, %esi
  401d1e: 72 c9                        	jb	-55 <printf_core+0x20c>
; 		} else if ((w=getint(&s))<0) goto overflow;
  401d20: 45 85 d2                     	testl	%r10d, %r10d
  401d23: 79 6e                        	jns	110 <printf_core+0x2b6>
  401d25: e9 81 18 00 00               	jmp	6273 <printf_core+0x1ace>
; 			} else if (!l10n) {
  401d2a: 83 7c 24 54 00               	cmpl	$0, 84(%rsp)
  401d2f: 0f 85 08 19 00 00            	jne	6408 <printf_core+0x1b60>
  401d35: 48 ff c0                     	incq	%rax
  401d38: 4d 85 e4                     	testq	%r12, %r12
; 				w = f ? va_arg(*ap, int) : 0;
  401d3b: 74 1f                        	je	31 <printf_core+0x27f>
  401d3d: 48 8b b4 24 b8 00 00 00      	movq	184(%rsp), %rsi
  401d45: 48 63 16                     	movslq	(%rsi), %rdx
  401d48: 48 83 fa 28                  	cmpq	$40, %rdx
  401d4c: 77 1b                        	ja	27 <printf_core+0x28c>
  401d4e: 48 89 d1                     	movq	%rdx, %rcx
  401d51: 48 03 4e 10                  	addq	16(%rsi), %rcx
  401d55: 83 c2 08                     	addl	$8, %edx
  401d58: 89 16                        	movl	%edx, (%rsi)
  401d5a: eb 1d                        	jmp	29 <printf_core+0x29c>
  401d5c: c7 44 24 54 00 00 00 00      	movl	$0, 84(%rsp)
  401d64: 45 31 d2                     	xorl	%r10d, %r10d
  401d67: eb 2a                        	jmp	42 <printf_core+0x2b6>
  401d69: 48 8b 4e 08                  	movq	8(%rsi), %rcx
  401d6d: ba 08 00 00 00               	movl	$8, %edx
  401d72: 48 01 ca                     	addq	%rcx, %rdx
  401d75: 48 89 56 08                  	movq	%rdx, 8(%rsi)
  401d79: 44 8b 11                     	movl	(%rcx), %r10d
  401d7c: c7 44 24 54 00 00 00 00      	movl	$0, 84(%rsp)
; 			if (w<0) fl|=LEFT_ADJ, w=-w;
  401d84: 45 85 d2                     	testl	%r10d, %r10d
  401d87: 79 0a                        	jns	10 <printf_core+0x2b6>
  401d89: 41 81 c8 00 20 00 00         	orl	$8192, %r8d
  401d90: 41 f7 da                     	negl	%r10d
  401d93: 31 f6                        	xorl	%esi, %esi
  401d95: 41 be ff ff ff ff            	movl	$4294967295, %r14d
; 		if (*s=='.' && s[1]=='*') {
  401d9b: 80 38 2e                     	cmpb	$46, (%rax)
  401d9e: 75 57                        	jne	87 <printf_core+0x31a>
  401da0: 0f be 48 01                  	movsbl	1(%rax), %ecx
  401da4: 83 f9 2a                     	cmpl	$42, %ecx
  401da7: 75 55                        	jne	85 <printf_core+0x321>
; 			if (isdigit(s[2]) && s[3]=='$') {
  401da9: 0f be 48 02                  	movsbl	2(%rax), %ecx
  401dad: 8d 51 d0                     	leal	-48(%rcx), %edx
  401db0: 83 fa 09                     	cmpl	$9, %edx
  401db3: 0f 87 a5 00 00 00            	ja	165 <printf_core+0x381>
  401db9: 80 78 03 24                  	cmpb	$36, 3(%rax)
  401dbd: 0f 85 9b 00 00 00            	jne	155 <printf_core+0x381>
  401dc3: 48 63 c9                     	movslq	%ecx, %rcx
  401dc6: 48 8b 94 24 90 00 00 00      	movq	144(%rsp), %rdx
; 				nl_type[s[2]-'0'] = INT;
  401dce: c7 84 8a 40 ff ff ff 0a 00 00 00     	movl	$10, -192(%rdx,%rcx,4)
; 				p = nl_arg[s[2]-'0'].i;
  401dd9: 48 0f be 48 02               	movsbq	2(%rax), %rcx
  401dde: 48 8b 94 24 b0 00 00 00      	movq	176(%rsp), %rdx
  401de6: 44 8b b4 ca 80 fe ff ff      	movl	-384(%rdx,%rcx,8), %r14d
; 				s+=4;
  401dee: 48 83 c0 04                  	addq	$4, %rax
  401df2: e9 b6 00 00 00               	jmp	182 <printf_core+0x3d0>
  401df7: 31 d2                        	xorl	%edx, %edx
  401df9: e9 b7 00 00 00               	jmp	183 <printf_core+0x3d8>
  401dfe: 48 ff c0                     	incq	%rax
; 	for (i=0; isdigit(**s); (*s)++) {
  401e01: 83 c1 d0                     	addl	$-48, %ecx
  401e04: ba 01 00 00 00               	movl	$1, %edx
  401e09: 45 31 f6                     	xorl	%r14d, %r14d
  401e0c: 83 f9 09                     	cmpl	$9, %ecx
  401e0f: 0f 87 a0 00 00 00            	ja	160 <printf_core+0x3d8>
  401e15: 89 fb                        	movl	%edi, %ebx
  401e17: 31 ff                        	xorl	%edi, %edi
  401e19: bd ff ff ff ff               	movl	$4294967295, %ebp
  401e1e: 41 be ff ff ff ff            	movl	$4294967295, %r14d
; 		if (i > INT_MAX/10U || **s-'0' > INT_MAX-10*i) i = -1;
  401e24: 81 ff cc cc cc 0c            	cmpl	$214748364, %edi
  401e2a: 77 17                        	ja	23 <printf_core+0x366>
  401e2c: 01 ff                        	addl	%edi, %edi
  401e2e: 44 8d 34 bf                  	leal	(%rdi,%rdi,4), %r14d
  401e32: ba ff ff ff 7f               	movl	$2147483647, %edx
  401e37: 44 29 f2                     	subl	%r14d, %edx
; 		else i = 10*i + (**s-'0');
  401e3a: 41 01 ce                     	addl	%ecx, %r14d
; 		if (i > INT_MAX/10U || **s-'0' > INT_MAX-10*i) i = -1;
  401e3d: 39 d1                        	cmpl	%edx, %ecx
  401e3f: 44 0f 4f f5                  	cmovgl	%ebp, %r14d
; 	for (i=0; isdigit(**s); (*s)++) {
  401e43: 0f be 48 01                  	movsbl	1(%rax), %ecx
  401e47: 48 ff c0                     	incq	%rax
  401e4a: 83 c1 d0                     	addl	$-48, %ecx
  401e4d: 44 89 f7                     	movl	%r14d, %edi
  401e50: 83 f9 0a                     	cmpl	$10, %ecx
  401e53: 72 c9                        	jb	-55 <printf_core+0x341>
  401e55: 89 df                        	movl	%ebx, %edi
  401e57: ba 01 00 00 00               	movl	$1, %edx
  401e5c: eb 57                        	jmp	87 <printf_core+0x3d8>
; 			} else if (!l10n) {
  401e5e: 83 7c 24 54 00               	cmpl	$0, 84(%rsp)
  401e63: 0f 85 d4 17 00 00            	jne	6100 <printf_core+0x1b60>
  401e69: 48 83 c0 02                  	addq	$2, %rax
  401e6d: 4d 85 e4                     	testq	%r12, %r12
; 				p = f ? va_arg(*ap, int) : 0;
  401e70: 74 21                        	je	33 <printf_core+0x3b6>
  401e72: 89 fb                        	movl	%edi, %ebx
  401e74: 48 8b bc 24 b8 00 00 00      	movq	184(%rsp), %rdi
  401e7c: 48 63 17                     	movslq	(%rdi), %rdx
  401e7f: 48 83 fa 28                  	cmpq	$40, %rdx
  401e83: 77 13                        	ja	19 <printf_core+0x3bb>
  401e85: 48 89 d1                     	movq	%rdx, %rcx
  401e88: 48 03 4f 10                  	addq	16(%rdi), %rcx
  401e8c: 83 c2 08                     	addl	$8, %edx
  401e8f: 89 17                        	movl	%edx, (%rdi)
  401e91: eb 15                        	jmp	21 <printf_core+0x3cb>
  401e93: 45 31 f6                     	xorl	%r14d, %r14d
  401e96: eb 15                        	jmp	21 <printf_core+0x3d0>
  401e98: 48 8b 4f 08                  	movq	8(%rdi), %rcx
  401e9c: ba 08 00 00 00               	movl	$8, %edx
  401ea1: 48 01 ca                     	addq	%rcx, %rdx
  401ea4: 48 89 57 08                  	movq	%rdx, 8(%rdi)
  401ea8: 44 8b 31                     	movl	(%rcx), %r14d
  401eab: 89 df                        	movl	%ebx, %edi
; 			xp = (p>=0);
  401ead: 44 89 f2                     	movl	%r14d, %edx
  401eb0: f7 d2                        	notl	%edx
  401eb2: c1 ea 1f                     	shrl	$31, %edx
  401eb5: 48 89 c5                     	movq	%rax, %rbp
; 			if (OOB(*s)) goto inval;
  401eb8: 0f be 45 00                  	movsbl	(%rbp), %eax
  401ebc: 8d 48 bf                     	leal	-65(%rax), %ecx
  401ebf: 83 f9 39                     	cmpl	$57, %ecx
  401ec2: 0f 87 75 17 00 00            	ja	6005 <printf_core+0x1b60>
  401ec8: 41 89 f7                     	movl	%esi, %r15d
  401ecb: 48 98                        	cltq
; 			st=states[st]S(*s++);
  401ecd: 89 f1                        	movl	%esi, %ecx
  401ecf: 48 ff c5                     	incq	%rbp
  401ed2: 48 6b c9 3a                  	imulq	$58, %rcx, %rcx
  401ed6: 0f b6 b4 01 af 6f 40 00      	movzbl	4222895(%rcx,%rax), %esi
; 		} while (st-1<STOP);
  401ede: 8d 46 ff                     	leal	-1(%rsi), %eax
  401ee1: 83 f8 08                     	cmpl	$8, %eax
  401ee4: 72 d2                        	jb	-46 <printf_core+0x3db>
; 		if (!st) goto inval;
  401ee6: 40 84 f6                     	testb	%sil, %sil
  401ee9: 0f 84 4e 17 00 00            	je	5966 <printf_core+0x1b60>
; 		if (st==NOARG) {
  401eef: 40 80 fe 1b                  	cmpb	$27, %sil
  401ef3: 89 54 24 38                  	movl	%edx, 56(%rsp)
  401ef7: 75 0a                        	jne	10 <printf_core+0x426>
  401ef9: 45 85 db                     	testl	%r11d, %r11d
; 			if (argpos>=0) goto inval;
  401efc: 78 29                        	js	41 <printf_core+0x44a>
  401efe: e9 3a 17 00 00               	jmp	5946 <printf_core+0x1b60>
  401f03: 45 85 db                     	testl	%r11d, %r11d
; 			if (argpos>=0) nl_type[argpos]=st, arg=nl_arg[argpos];
  401f06: 78 2c                        	js	44 <printf_core+0x457>
  401f08: 49 63 c3                     	movslq	%r11d, %rax
  401f0b: 48 8b 8c 24 90 00 00 00      	movq	144(%rsp), %rcx
  401f13: 89 34 81                     	movl	%esi, (%rcx,%rax,4)
  401f16: 48 8b 8c 24 b0 00 00 00      	movq	176(%rsp), %rcx
  401f1e: 48 8b 04 c1                  	movq	(%rcx,%rax,8), %rax
  401f22: 48 89 44 24 48               	movq	%rax, 72(%rsp)
  401f27: 31 db                        	xorl	%ebx, %ebx
  401f29: 4d 85 e4                     	testq	%r12, %r12
  401f2c: 0f 84 f7 fb ff ff            	je	-1033 <printf_core+0x4c>
  401f32: eb 56                        	jmp	86 <printf_core+0x4ad>
  401f34: 4d 85 e4                     	testq	%r12, %r12
; 			else if (f) pop_arg(&arg, st, ap);
  401f37: 0f 84 d6 16 00 00            	je	5846 <printf_core+0x1b36>
  401f3d: 89 7c 24 30                  	movl	%edi, 48(%rsp)
  401f41: 48 8d 7c 24 48               	leaq	72(%rsp), %rdi
  401f46: 48 8b 94 24 b8 00 00 00      	movq	184(%rsp), %rdx
  401f4e: 44 89 cb                     	movl	%r9d, %ebx
  401f51: 44 89 54 24 10               	movl	%r10d, 16(%rsp)
  401f56: 44 89 44 24 14               	movl	%r8d, 20(%rsp)
  401f5b: 4c 89 74 24 20               	movq	%r14, 32(%rsp)
  401f60: 4c 89 6c 24 28               	movq	%r13, 40(%rsp)
  401f65: e8 f3 16 00 00               	callq	5875 <pop_arg>
  401f6a: 8b 7c 24 30                  	movl	48(%rsp), %edi
  401f6e: 4c 8b 6c 24 28               	movq	40(%rsp), %r13
  401f73: 4c 8b 74 24 20               	movq	32(%rsp), %r14
  401f78: 44 8b 44 24 14               	movl	20(%rsp), %r8d
  401f7d: 44 8b 54 24 10               	movl	16(%rsp), %r10d
  401f82: 41 89 d9                     	movl	%ebx, %r9d
  401f85: 4c 8b 64 24 18               	movq	24(%rsp), %r12
; 		t = s[-1];
  401f8a: 0f be 45 ff                  	movsbl	-1(%rbp), %eax
; 		if (ps && (t&15)==3) t&=~32;
  401f8e: 89 c1                        	movl	%eax, %ecx
  401f90: 83 e1 0f                     	andl	$15, %ecx
  401f93: 89 c6                        	movl	%eax, %esi
  401f95: 83 e6 df                     	andl	$-33, %esi
  401f98: 83 f9 03                     	cmpl	$3, %ecx
  401f9b: 0f 45 f0                     	cmovnel	%eax, %esi
  401f9e: 45 85 ff                     	testl	%r15d, %r15d
  401fa1: 0f 44 f0                     	cmovel	%eax, %esi
; 		if (fl & LEFT_ADJ) fl &= ~ZERO_PAD;
  401fa4: 44 89 c3                     	movl	%r8d, %ebx
  401fa7: 81 e3 ff ff fe ff            	andl	$4294901759, %ebx
  401fad: 41 0f ba e0 0d               	btl	$13, %r8d
  401fb2: 44 0f 42 c3                  	cmovbl	%ebx, %r8d
; 		switch(t) {
  401fb6: 83 fe 52                     	cmpl	$82, %esi
  401fb9: 44 89 44 24 14               	movl	%r8d, 20(%rsp)
  401fbe: 44 89 4c 24 44               	movl	%r9d, 68(%rsp)
  401fc3: 7e 47                        	jle	71 <printf_core+0x52f>
  401fc5: 8d 46 ad                     	leal	-83(%rsi), %eax
  401fc8: 83 f8 25                     	cmpl	$37, %eax
  401fcb: 0f 87 87 05 00 00            	ja	1415 <printf_core+0xa7b>
  401fd1: ff 24 c5 d0 6d 40 00         	jmpq	*4222416(,%rax,8)
; 			if (arg.i>INTMAX_MAX) {
  401fd8: 48 8b 4c 24 48               	movq	72(%rsp), %rcx
  401fdd: 48 85 c9                     	testq	%rcx, %rcx
  401fe0: 0f 88 8b 05 00 00            	js	1419 <printf_core+0xa94>
; 			} else if (fl & MARK_POS) {
  401fe6: 41 0f ba e0 0b               	btl	$11, %r8d
  401feb: 0f 82 51 08 00 00            	jb	2129 <printf_core+0xd65>
; 			} else if (fl & PAD_POS) {
  401ff1: 45 89 c3                     	movl	%r8d, %r11d
  401ff4: 41 83 e3 01                  	andl	$1, %r11d
  401ff8: 41 bf d2 6f 40 00            	movl	$4222930, %r15d
  401ffe: b8 d0 6f 40 00               	movl	$4222928, %eax
  402003: 4c 0f 44 f8                  	cmoveq	%rax, %r15
  402007: e9 42 08 00 00               	jmp	2114 <printf_core+0xd71>
; 		switch(t) {
  40200c: 8d 46 bb                     	leal	-69(%rsi), %eax
  40200f: 83 f8 03                     	cmpl	$3, %eax
  402012: 72 40                        	jb	64 <printf_core+0x577>
  402014: 83 fe 41                     	cmpl	$65, %esi
  402017: 74 3b                        	je	59 <printf_core+0x577>
  402019: 83 fe 43                     	cmpl	$67, %esi
  40201c: 0f 85 36 05 00 00            	jne	1334 <printf_core+0xa7b>
; 			wc[0] = arg.i;
  402022: 8b 44 24 48                  	movl	72(%rsp), %eax
  402026: 89 84 24 d8 00 00 00         	movl	%eax, 216(%rsp)
; 			wc[1] = 0;
  40202d: c7 84 24 dc 00 00 00 00 00 00 00     	movl	$0, 220(%rsp)
  402038: 48 8d 84 24 d8 00 00 00      	leaq	216(%rsp), %rax
; 			arg.p = wc;
  402040: 48 89 44 24 48               	movq	%rax, 72(%rsp)
  402045: 49 c7 c7 ff ff ff ff         	movq	$-1, %r15
  40204c: 48 89 c3                     	movq	%rax, %rbx
  40204f: e9 99 02 00 00               	jmp	665 <printf_core+0x810>
; 			if (xp && p<0) goto overflow;
  402054: 45 85 f6                     	testl	%r14d, %r14d
  402057: 79 0b                        	jns	11 <printf_core+0x587>
  402059: 83 7c 24 38 00               	cmpl	$0, 56(%rsp)
  40205e: 0f 85 47 15 00 00            	jne	5447 <printf_core+0x1ace>
; 			l = fmt_fp(f, arg.f, w, p, fl, t);
  402064: f3 0f 7e 44 24 48            	movq	72(%rsp), %xmm0
; 	int e2=0, e, i, j, l;
  40206a: c7 44 24 50 00 00 00 00      	movl	$0, 80(%rsp)
; 	__u.__f = __f;
  402072: 66 48 0f 7e c0               	movq	%xmm0, %rax
; 	if (signbit(y)) {
  402077: 48 85 c0                     	testq	%rax, %rax
  40207a: 78 23                        	js	35 <printf_core+0x5c2>
; 	} else if (fl & MARK_POS) {
  40207c: 41 0f ba e0 0b               	btl	$11, %r8d
  402081: 72 36                        	jb	54 <printf_core+0x5dc>
; 	} else if (fl & PAD_POS) {
  402083: 45 89 c3                     	movl	%r8d, %r11d
  402086: 41 83 e3 01                  	andl	$1, %r11d
  40208a: ba c6 71 40 00               	movl	$4223430, %edx
  40208f: b9 c1 71 40 00               	movl	$4223425, %ecx
  402094: 48 0f 44 d1                  	cmoveq	%rcx, %rdx
  402098: 48 89 54 24 58               	movq	%rdx, 88(%rsp)
  40209d: eb 2a                        	jmp	42 <printf_core+0x5ec>
; 		y=-y;
  40209f: 66 0f ef 05 e9 4c 00 00      	pxor	19689(%rip), %xmm0
; 	__u.__f = __f;
  4020a7: 66 48 0f 7e c0               	movq	%xmm0, %rax
  4020ac: 41 bb 01 00 00 00            	movl	$1, %r11d
  4020b2: b9 c0 71 40 00               	movl	$4223424, %ecx
  4020b7: eb 0b                        	jmp	11 <printf_core+0x5e7>
  4020b9: 41 bb 01 00 00 00            	movl	$1, %r11d
  4020bf: b9 c3 71 40 00               	movl	$4223427, %ecx
  4020c4: 48 89 4c 24 58               	movq	%rcx, 88(%rsp)
  4020c9: 48 b9 00 00 00 00 00 00 f0 7f	movabsq	$9218868437227405312, %rcx
; 	if (!isfinite(y)) {
  4020d3: 48 21 c8                     	andq	%rcx, %rax
  4020d6: 48 39 c8                     	cmpq	%rcx, %rax
  4020d9: 44 89 54 24 10               	movl	%r10d, 16(%rsp)
  4020de: 4c 89 5c 24 30               	movq	%r11, 48(%rsp)
  4020e3: 0f 85 ac 00 00 00            	jne	172 <printf_core+0x6b8>
; 		char *s = (t&32)?"inf":"INF";
  4020e9: 40 f6 c6 20                  	testb	$32, %sil
  4020ed: b8 d7 71 40 00               	movl	$4223447, %eax
  4020f2: b9 d3 71 40 00               	movl	$4223443, %ecx
  4020f7: 48 0f 45 c1                  	cmovneq	%rcx, %rax
; 		if (y!=y) s=(t&32)?"nan":"NAN";
  4020fb: 41 bf df 71 40 00            	movl	$4223455, %r15d
  402101: b9 db 71 40 00               	movl	$4223451, %ecx
  402106: 4c 0f 45 f9                  	cmovneq	%rcx, %r15
  40210a: 66 0f 2e c0                  	ucomisd	%xmm0, %xmm0
  40210e: 4c 0f 4b f8                  	cmovnpq	%rax, %r15
  402112: 41 89 d8                     	movl	%ebx, %r8d
; 		pad(f, ' ', w, 3+pl, fl&~ZERO_PAD);
  402115: 41 8d 5b 03                  	leal	3(%r11), %ebx
  402119: 4c 89 e7                     	movq	%r12, %rdi
  40211c: be 20 00 00 00               	movl	$32, %esi
  402121: 44 89 d2                     	movl	%r10d, %edx
  402124: 89 d9                        	movl	%ebx, %ecx
  402126: e8 d0 16 00 00               	callq	5840 <pad>
  40212b: 48 8b 54 24 18               	movq	24(%rsp), %rdx
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  402130: 8b 02                        	movl	(%rdx), %eax
  402132: a8 20                        	testb	$32, %al
  402134: 75 15                        	jne	21 <printf_core+0x66e>
; 		out(f, prefix, pl);
  402136: 8b 74 24 30                  	movl	48(%rsp), %esi
  40213a: 48 8b 7c 24 58               	movq	88(%rsp), %rdi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  40213f: e8 b4 3a 00 00               	callq	15028 <__fwritex>
  402144: 48 8b 54 24 18               	movq	24(%rsp), %rdx
  402149: 8b 02                        	movl	(%rdx), %eax
  40214b: a8 20                        	testb	$32, %al
  40214d: 75 12                        	jne	18 <printf_core+0x684>
  40214f: be 03 00 00 00               	movl	$3, %esi
  402154: 4c 89 ff                     	movq	%r15, %rdi
  402157: e8 9c 3a 00 00               	callq	15004 <__fwritex>
  40215c: 48 8b 54 24 18               	movq	24(%rsp), %rdx
  402161: 44 8b 44 24 14               	movl	20(%rsp), %r8d
; 		pad(f, ' ', w, 3+pl, fl^LEFT_ADJ);
  402166: 41 81 f0 00 20 00 00         	xorl	$8192, %r8d
  40216d: 48 89 d7                     	movq	%rdx, %rdi
  402170: be 20 00 00 00               	movl	$32, %esi
  402175: 44 8b 7c 24 10               	movl	16(%rsp), %r15d
  40217a: 44 89 fa                     	movl	%r15d, %edx
  40217d: 89 d9                        	movl	%ebx, %ecx
  40217f: e8 77 16 00 00               	callq	5751 <pad>
  402184: 4c 8b 64 24 18               	movq	24(%rsp), %r12
; 		return MAX(w, 3+pl);
  402189: 44 39 fb                     	cmpl	%r15d, %ebx
  40218c: 41 0f 4c df                  	cmovll	%r15d, %ebx
  402190: e9 09 14 00 00               	jmp	5129 <printf_core+0x1ac1>
  402195: 48 89 74 24 38               	movq	%rsi, 56(%rsp)
  40219a: 4c 89 f3                     	movq	%r14, %rbx
; 	y = frexpl(y, &e2) * 2;
  40219d: 66 0f d6 84 24 28 01 00 00   	movq	%xmm0, 296(%rsp)
  4021a6: dd 84 24 28 01 00 00         	fldl	296(%rsp)
  4021ad: db 3c 24                     	fstpt	(%rsp)
  4021b0: 48 8d 7c 24 50               	leaq	80(%rsp), %rdi
  4021b5: e8 36 32 00 00               	callq	12854 <frexpl>
  4021ba: dc c0                        	fadd	%st, %st(0)
  4021bc: dd 9c 24 20 01 00 00         	fstpl	288(%rsp)
  4021c3: f2 0f 10 84 24 20 01 00 00   	movsd	288(%rsp), %xmm0
  4021cc: 0f 57 d2                     	xorps	%xmm2, %xmm2
; 	if (y) e2--;
  4021cf: 66 0f 2e c2                  	ucomisd	%xmm2, %xmm0
  4021d3: 41 bd 00 00 00 00            	movl	$0, %r13d
  4021d9: 41 bb 1d 00 00 00            	movl	$29, %r11d
  4021df: 49 be 53 5a 9b a0 2f b8 44 00	movabsq	$19342813113834067, %r14
  4021e9: 75 02                        	jne	2 <printf_core+0x710>
  4021eb: 7b 04                        	jnp	4 <printf_core+0x714>
  4021ed: ff 4c 24 50                  	decl	80(%rsp)
  4021f1: 48 8b 4c 24 38               	movq	56(%rsp), %rcx
; 	if ((t|32)=='a') {
  4021f6: 41 89 c8                     	movl	%ecx, %r8d
  4021f9: 41 83 c8 20                  	orl	$32, %r8d
  4021fd: 41 83 f8 61                  	cmpl	$97, %r8d
  402201: f2 0f 10 1d 97 45 00 00      	movsd	17815(%rip), %xmm3
  402209: 41 bf 09 00 00 00            	movl	$9, %r15d
  40220f: 0f 85 82 00 00 00            	jne	130 <printf_core+0x7ba>
  402215: 48 8b 44 24 58               	movq	88(%rsp), %rax
; 		if (t&32) prefix += 9;
  40221a: 48 8d 50 09                  	leaq	9(%rax), %rdx
  40221e: 41 89 ca                     	movl	%ecx, %r10d
  402221: 41 83 e2 20                  	andl	$32, %r10d
  402225: 48 0f 44 d0                  	cmoveq	%rax, %rdx
  402229: 49 89 de                     	movq	%rbx, %r14
; 		if (p<0 || p>=LDBL_MANT_DIG/4-1) re=0;
  40222c: 41 83 fe 0e                  	cmpl	$14, %r14d
  402230: 4c 8b 64 24 18               	movq	24(%rsp), %r12
  402235: 48 89 54 24 20               	movq	%rdx, 32(%rsp)
; 		if (re) {
  40223a: 0f 87 ce 07 00 00            	ja	1998 <printf_core+0xf31>
  402240: b8 0f 00 00 00               	movl	$15, %eax
  402245: 44 29 f0                     	subl	%r14d, %eax
  402248: 44 8b 4c 24 44               	movl	68(%rsp), %r9d
  40224d: 44 8b 44 24 14               	movl	20(%rsp), %r8d
  402252: 4c 8b 6c 24 30               	movq	48(%rsp), %r13
  402257: 0f 84 ca 07 00 00            	je	1994 <printf_core+0xf4a>
; 			while (re--) round*=16;
  40225d: 41 8d 46 f1                  	leal	-15(%r14), %eax
  402261: f2 0f 10 0d 2f 45 00 00      	movsd	17711(%rip), %xmm1
  402269: f2 0f 59 cb                  	mulsd	%xmm3, %xmm1
  40226d: ff c0                        	incl	%eax
  40226f: 75 f8                        	jne	-8 <printf_core+0x78c>
; 			if (*prefix=='-') {
  402271: 80 3a 2d                     	cmpb	$45, (%rdx)
  402274: 0f 85 a5 07 00 00            	jne	1957 <printf_core+0xf42>
  40227a: 66 0f 28 25 0e 4b 00 00      	movapd	19214(%rip), %xmm4
; 				y=-y;
  402282: 66 0f 57 c4                  	xorpd	%xmm4, %xmm0
; 				y-=round;
  402286: f2 0f 5c c1                  	subsd	%xmm1, %xmm0
; 				y+=round;
  40228a: f2 0f 58 c1                  	addsd	%xmm1, %xmm0
; 				y=-y;
  40228e: 66 0f 57 c4                  	xorpd	%xmm4, %xmm0
  402292: e9 90 07 00 00               	jmp	1936 <printf_core+0xf4a>
; 			if (xp && p<0) goto overflow;
  402297: 85 db                        	testl	%ebx, %ebx
; 	if (p<0) p=6;
  402299: b8 06 00 00 00               	movl	$6, %eax
  40229e: 0f 48 d8                     	cmovsl	%eax, %ebx
  4022a1: 48 89 5c 24 20               	movq	%rbx, 32(%rsp)
; 	if (y) y *= 0x1p28, e2-=28;
  4022a6: 66 0f 2e c2                  	ucomisd	%xmm2, %xmm0
  4022aa: 4c 8b 64 24 18               	movq	24(%rsp), %r12
  4022af: 75 06                        	jne	6 <printf_core+0x7da>
  4022b1: 0f 8b d3 02 00 00            	jnp	723 <printf_core+0xaad>
  4022b7: f2 0f 59 05 b9 44 00 00      	mulsd	17593(%rip), %xmm0
  4022bf: 44 8b 4c 24 50               	movl	80(%rsp), %r9d
  4022c4: 41 83 c1 e4                  	addl	$-28, %r9d
  4022c8: 44 89 4c 24 50               	movl	%r9d, 80(%rsp)
  4022cd: e9 bd 02 00 00               	jmp	701 <printf_core+0xab2>
; 			ws = arg.p;
  4022d2: 48 8b 44 24 48               	movq	72(%rsp), %rax
  4022d7: 48 89 44 24 20               	movq	%rax, 32(%rsp)
; 			for (i=l=0; i<p && *ws && (l=wctomb(mb, *ws++))>=0 && l<=p-i; i+=l);
  4022dc: 45 85 f6                     	testl	%r14d, %r14d
  4022df: 0f 84 a2 09 00 00            	je	2466 <printf_core+0x11aa>
  4022e5: 4d 63 fe                     	movslq	%r14d, %r15
  4022e8: 48 8b 5c 24 20               	movq	32(%rsp), %rbx
  4022ed: 48 89 5c 24 20               	movq	%rbx, 32(%rsp)
  4022f2: 31 d2                        	xorl	%edx, %edx
  4022f4: 44 89 54 24 10               	movl	%r10d, 16(%rsp)
  4022f9: 48 89 54 24 28               	movq	%rdx, 40(%rsp)
  4022fe: 8b 33                        	movl	(%rbx), %esi
  402300: 85 f6                        	testl	%esi, %esi
  402302: 0f 84 6c 09 00 00            	je	2412 <printf_core+0x1197>
  402308: 48 8d bc 24 a4 00 00 00      	leaq	164(%rsp), %rdi
  402310: e8 77 33 00 00               	callq	13175 <wctomb>
  402315: 85 c0                        	testl	%eax, %eax
  402317: 0f 88 2b 13 00 00            	js	4907 <printf_core+0x1b6b>
  40231d: 48 98                        	cltq
  40231f: 4c 89 f9                     	movq	%r15, %rcx
  402322: 48 8b 54 24 28               	movq	40(%rsp), %rdx
  402327: 48 29 d1                     	subq	%rdx, %rcx
  40232a: 48 39 c1                     	cmpq	%rax, %rcx
  40232d: 4c 8b 64 24 18               	movq	24(%rsp), %r12
  402332: 44 8b 54 24 10               	movl	16(%rsp), %r10d
  402337: 44 8b 44 24 14               	movl	20(%rsp), %r8d
  40233c: 0f 82 37 09 00 00            	jb	2359 <printf_core+0x119c>
  402342: 48 01 c2                     	addq	%rax, %rdx
  402345: 48 83 c3 04                  	addq	$4, %rbx
  402349: 4c 39 fa                     	cmpq	%r15, %rdx
  40234c: 72 ab                        	jb	-85 <printf_core+0x81c>
  40234e: e9 26 09 00 00               	jmp	2342 <printf_core+0x119c>
; 			*(a=z-(p=1))=arg.i;
  402353: 8a 44 24 48                  	movb	72(%rsp), %al
  402357: 88 84 24 0a 01 00 00         	movb	%al, 266(%rsp)
  40235e: 45 31 db                     	xorl	%r11d, %r11d
  402361: 41 bf d0 6f 40 00            	movl	$4222928, %r15d
  402367: 41 be 01 00 00 00            	movl	$1, %r14d
; 		if (p < z-a) p = z-a;
  40236d: 48 8d 84 24 0b 01 00 00      	leaq	267(%rsp), %rax
  402375: 48 89 c2                     	movq	%rax, %rdx
  402378: 4c 8d ac 24 0a 01 00 00      	leaq	266(%rsp), %r13
  402380: 41 89 d8                     	movl	%ebx, %r8d
  402383: e9 83 05 00 00               	jmp	1411 <printf_core+0xe2e>
  402388: 89 5c 24 28                  	movl	%ebx, 40(%rsp)
  40238c: 89 7c 24 30                  	movl	%edi, 48(%rsp)
  402390: 44 89 54 24 10               	movl	%r10d, 16(%rsp)
  402395: 4c 89 74 24 20               	movq	%r14, 32(%rsp)
; 			if (1) a = strerror(errno); else
  40239a: e8 5d 1b 00 00               	callq	7005 <__errno_location>
  40239f: 8b 38                        	movl	(%rax), %edi
  4023a1: e8 a4 1b 00 00               	callq	7076 <strerror>
  4023a6: 4c 8b 74 24 20               	movq	32(%rsp), %r14
  4023ab: 48 89 c3                     	movq	%rax, %rbx
  4023ae: e9 40 01 00 00               	jmp	320 <printf_core+0xa16>
  4023b3: 31 db                        	xorl	%ebx, %ebx
; 			switch(ps) {
  4023b5: 41 80 ff 07                  	cmpb	$7, %r15b
  4023b9: 0f 87 6a f7 ff ff            	ja	-2198 <printf_core+0x4c>
  4023bf: 41 0f b6 c7                  	movzbl	%r15b, %eax
  4023c3: ff 24 c5 00 6f 40 00         	jmpq	*4222720(,%rax,8)
  4023ca: 49 63 c1                     	movslq	%r9d, %rax
  4023cd: 48 8b 4c 24 48               	movq	72(%rsp), %rcx
  4023d2: 48 89 01                     	movq	%rax, (%rcx)
  4023d5: e9 4f f7 ff ff               	jmp	-2225 <printf_core+0x4c>
; 			a = fmt_o(arg.i, z);
  4023da: 48 8b 44 24 48               	movq	72(%rsp), %rax
  4023df: 4c 8d ac 24 0b 01 00 00      	leaq	267(%rsp), %r13
; 	for (; x; x>>=3) *--s = '0' + (x&7);
  4023e7: 48 85 c0                     	testq	%rax, %rax
  4023ea: 74 1d                        	je	29 <printf_core+0x92c>
  4023ec: 4c 8d ac 24 0b 01 00 00      	leaq	267(%rsp), %r13
  4023f4: 89 c1                        	movl	%eax, %ecx
  4023f6: 80 e1 07                     	andb	$7, %cl
  4023f9: 80 c9 30                     	orb	$48, %cl
  4023fc: 41 88 4d ff                  	movb	%cl, -1(%r13)
  402400: 49 ff cd                     	decq	%r13
  402403: 48 c1 e8 03                  	shrq	$3, %rax
  402407: 75 eb                        	jne	-21 <printf_core+0x917>
  402409: 45 31 db                     	xorl	%r11d, %r11d
  40240c: 41 bf d0 6f 40 00            	movl	$4222928, %r15d
; 			if ((fl&ALT_FORM) && p<z-a+1) p=z-a+1;
  402412: 41 f6 c0 08                  	testb	$8, %r8b
  402416: 8b 5c 24 38                  	movl	56(%rsp), %ebx
  40241a: 0f 84 86 04 00 00            	je	1158 <printf_core+0xdc9>
  402420: 49 63 c6                     	movslq	%r14d, %rax
  402423: 48 8d 8c 24 0b 01 00 00      	leaq	267(%rsp), %rcx
  40242b: 4c 29 e9                     	subq	%r13, %rcx
  40242e: 48 39 c1                     	cmpq	%rax, %rcx
  402431: 0f 8c 6f 04 00 00            	jl	1135 <printf_core+0xdc9>
  402437: ff c1                        	incl	%ecx
; 		if (fl & LEFT_ADJ) fl &= ~ZERO_PAD;
  402439: 44 89 c0                     	movl	%r8d, %eax
  40243c: 41 89 ce                     	movl	%ecx, %r14d
  40243f: e9 65 04 00 00               	jmp	1125 <printf_core+0xdcc>
  402444: b8 10 00 00 00               	movl	$16, %eax
; 			p = MAX(p, 2*sizeof(void*));
  402449: 41 39 c6                     	cmpl	%eax, %r14d
  40244c: 44 0f 46 f0                  	cmovbel	%eax, %r14d
; 			fl |= ALT_FORM;
  402450: 41 83 c8 08                  	orl	$8, %r8d
  402454: be 78 00 00 00               	movl	$120, %esi
; 			a = fmt_x(arg.i, z, t&32);
  402459: 48 8b 44 24 48               	movq	72(%rsp), %rax
  40245e: 45 31 db                     	xorl	%r11d, %r11d
  402461: 41 bf d0 6f 40 00            	movl	$4222928, %r15d
; 	for (; x; x>>=4) *--s = xdigits[(x&15)]|lower;
  402467: 48 85 c0                     	testq	%rax, %rax
  40246a: 74 59                        	je	89 <printf_core+0x9e8>
  40246c: 89 f1                        	movl	%esi, %ecx
  40246e: 80 e1 20                     	andb	$32, %cl
  402471: 4c 8d ac 24 0b 01 00 00      	leaq	267(%rsp), %r13
  402479: 8b 5c 24 38                  	movl	56(%rsp), %ebx
  40247d: 89 c2                        	movl	%eax, %edx
  40247f: 83 e2 0f                     	andl	$15, %edx
  402482: 8a 92 c0 6d 40 00            	movb	4222400(%rdx), %dl
  402488: 08 ca                        	orb	%cl, %dl
  40248a: 41 88 55 ff                  	movb	%dl, -1(%r13)
  40248e: 49 ff cd                     	decq	%r13
  402491: 48 c1 e8 04                  	shrq	$4, %rax
  402495: 75 e6                        	jne	-26 <printf_core+0x9a0>
; 			if (arg.i && (fl & ALT_FORM)) prefix+=(t>>4), pl=2;
  402497: 41 f6 c0 08                  	testb	$8, %r8b
  40249b: 0f 84 05 04 00 00            	je	1029 <printf_core+0xdc9>
  4024a1: 48 83 7c 24 48 00            	cmpq	$0, 72(%rsp)
  4024a7: 0f 84 f9 03 00 00            	je	1017 <printf_core+0xdc9>
  4024ad: c1 fe 04                     	sarl	$4, %esi
  4024b0: 48 63 c6                     	movslq	%esi, %rax
  4024b3: 4c 8d b8 d0 6f 40 00         	leaq	4222928(%rax), %r15
  4024ba: 41 bb 02 00 00 00            	movl	$2, %r11d
  4024c0: e9 e1 03 00 00               	jmp	993 <printf_core+0xdc9>
  4024c5: 4c 8d ac 24 0b 01 00 00      	leaq	267(%rsp), %r13
; 		if (fl & LEFT_ADJ) fl &= ~ZERO_PAD;
  4024cd: 44 89 c0                     	movl	%r8d, %eax
  4024d0: e9 c3 03 00 00               	jmp	963 <printf_core+0xdbb>
  4024d5: 89 5c 24 28                  	movl	%ebx, 40(%rsp)
  4024d9: 89 7c 24 30                  	movl	%edi, 48(%rsp)
  4024dd: 44 89 54 24 10               	movl	%r10d, 16(%rsp)
; 			a = arg.p ? arg.p : "(null)";
  4024e2: 48 8b 5c 24 48               	movq	72(%rsp), %rbx
  4024e7: 48 85 db                     	testq	%rbx, %rbx
  4024ea: b8 da 6f 40 00               	movl	$4222938, %eax
  4024ef: 48 0f 44 d8                  	cmoveq	%rax, %rbx
; 			z = a + strnlen(a, p<0 ? INT_MAX : p);
  4024f3: 45 85 f6                     	testl	%r14d, %r14d
  4024f6: 44 89 f6                     	movl	%r14d, %esi
  4024f9: b8 ff ff ff 7f               	movl	$2147483647, %eax
  4024fe: 0f 48 f0                     	cmovsl	%eax, %esi
  402501: 48 89 df                     	movq	%rbx, %rdi
  402504: 4d 89 f7                     	movq	%r14, %r15
  402507: e8 64 15 00 00               	callq	5476 <strnlen>
  40250c: 49 89 dd                     	movq	%rbx, %r13
  40250f: 48 8d 14 03                  	leaq	(%rbx,%rax), %rdx
  402513: 45 85 ff                     	testl	%r15d, %r15d
  402516: 4c 8b 64 24 18               	movq	24(%rsp), %r12
  40251b: 44 8b 54 24 10               	movl	16(%rsp), %r10d
  402520: 8b 7c 24 30                  	movl	48(%rsp), %edi
  402524: 44 8b 44 24 28               	movl	40(%rsp), %r8d
; 			if (p<0 && *z) goto overflow;
  402529: 79 09                        	jns	9 <printf_core+0xa57>
  40252b: 80 3a 00                     	cmpb	$0, (%rdx)
  40252e: 0f 85 77 10 00 00            	jne	4215 <printf_core+0x1ace>
  402534: 45 31 db                     	xorl	%r11d, %r11d
  402537: 41 bf d0 6f 40 00            	movl	$4222928, %r15d
  40253d: 41 89 c6                     	movl	%eax, %r14d
  402540: e9 c6 03 00 00               	jmp	966 <printf_core+0xe2e>
  402545: 45 31 db                     	xorl	%r11d, %r11d
  402548: 41 bf d0 6f 40 00            	movl	$4222928, %r15d
; 			a = fmt_u(arg.i, z);
  40254e: 48 8b 4c 24 48               	movq	72(%rsp), %rcx
  402553: e9 f6 02 00 00               	jmp	758 <printf_core+0xd71>
  402558: 45 31 db                     	xorl	%r11d, %r11d
  40255b: 41 bf d0 6f 40 00            	movl	$4222928, %r15d
; 		if (p < z-a) p = z-a;
  402561: 48 8d 84 24 0b 01 00 00      	leaq	267(%rsp), %rax
  402569: 48 89 c2                     	movq	%rax, %rdx
  40256c: e9 9a 03 00 00               	jmp	922 <printf_core+0xe2e>
; 				arg.i=-arg.i;
  402571: 48 f7 d9                     	negq	%rcx
  402574: 48 89 4c 24 48               	movq	%rcx, 72(%rsp)
  402579: 41 bf d0 6f 40 00            	movl	$4222928, %r15d
  40257f: 41 bb 01 00 00 00            	movl	$1, %r11d
  402585: e9 cd 02 00 00               	jmp	717 <printf_core+0xd7a>
; 	if (e2<0) a=r=z=big;
  40258a: 44 8b 4c 24 50               	movl	80(%rsp), %r9d
  40258f: f2 0f 10 1d e9 41 00 00      	movsd	16873(%rip), %xmm3
  402597: 45 85 c9                     	testl	%r9d, %r9d
  40259a: 48 8d 84 24 d8 1c 00 00      	leaq	7384(%rsp), %rax
  4025a2: 48 89 c7                     	movq	%rax, %rdi
  4025a5: 48 8d 84 24 30 01 00 00      	leaq	304(%rsp), %rax
  4025ad: 48 0f 48 f8                  	cmovsq	%rax, %rdi
  4025b1: 48 89 7c 24 28               	movq	%rdi, 40(%rsp)
; 		*z = y;
  4025b6: f2 48 0f 2c c0               	cvttsd2si	%xmm0, %rax
  4025bb: 89 07                        	movl	%eax, (%rdi)
; 		y = 1000000000*(y-*z++);
  4025bd: 48 83 c7 04                  	addq	$4, %rdi
  4025c1: 89 c0                        	movl	%eax, %eax
  4025c3: 0f 57 c9                     	xorps	%xmm1, %xmm1
  4025c6: f2 48 0f 2a c8               	cvtsi2sd	%rax, %xmm1
  4025cb: f2 0f 5c c1                  	subsd	%xmm1, %xmm0
  4025cf: f2 0f 59 c3                  	mulsd	%xmm3, %xmm0
; 	} while (y);
  4025d3: 66 0f 2e c2                  	ucomisd	%xmm2, %xmm0
  4025d7: 75 dd                        	jne	-35 <printf_core+0xad9>
  4025d9: 7a db                        	jp	-37 <printf_core+0xad9>
; 	while (e2>0) {
  4025db: 45 85 c9                     	testl	%r9d, %r9d
  4025de: 7e 79                        	jle	121 <printf_core+0xb7c>
  4025e0: 4c 8b 54 24 28               	movq	40(%rsp), %r10
; 		int sh=MIN(29,e2);
  4025e5: 41 83 f9 1e                  	cmpl	$30, %r9d
  4025e9: 45 0f 4d cb                  	cmovgel	%r11d, %r9d
  4025ed: 48 8d 77 fc                  	leaq	-4(%rdi), %rsi
; 		for (d=z-1; d>=a; d--) {
  4025f1: 4c 39 d6                     	cmpq	%r10, %rsi
  4025f4: 72 3c                        	jb	60 <printf_core+0xb55>
  4025f6: 44 89 c9                     	movl	%r9d, %ecx
  4025f9: 31 d2                        	xorl	%edx, %edx
; 			uint64_t x = ((uint64_t)*d<<sh)+carry;
  4025fb: 8b 06                        	movl	(%rsi), %eax
  4025fd: 48 d3 e0                     	shlq	%cl, %rax
  402600: 89 d3                        	movl	%edx, %ebx
  402602: 48 01 c3                     	addq	%rax, %rbx
; 			carry = x / 1000000000;
  402605: 48 89 d8                     	movq	%rbx, %rax
  402608: 48 c1 e8 09                  	shrq	$9, %rax
  40260c: 49 f7 e6                     	mulq	%r14
  40260f: 48 c1 ea 0b                  	shrq	$11, %rdx
  402613: 69 c2 00 ca 9a 3b            	imull	$1000000000, %edx, %eax
  402619: 29 c3                        	subl	%eax, %ebx
; 			*d = x % 1000000000;
  40261b: 89 1e                        	movl	%ebx, (%rsi)
  40261d: 48 83 c6 fc                  	addq	$-4, %rsi
; 		for (d=z-1; d>=a; d--) {
  402621: 4c 39 d6                     	cmpq	%r10, %rsi
  402624: 73 d5                        	jae	-43 <printf_core+0xb1e>
; 		if (carry) *--a = carry;
  402626: 85 d2                        	testl	%edx, %edx
  402628: 74 08                        	je	8 <printf_core+0xb55>
  40262a: 41 89 52 fc                  	movl	%edx, -4(%r10)
  40262e: 49 83 c2 fc                  	addq	$-4, %r10
  402632: 48 89 fe                     	movq	%rdi, %rsi
; 		while (z>a && !z[-1]) z--;
  402635: 4c 39 d7                     	cmpq	%r10, %rdi
  402638: 76 0a                        	jbe	10 <printf_core+0xb67>
  40263a: 48 8d 7e fc                  	leaq	-4(%rsi), %rdi
  40263e: 83 7e fc 00                  	cmpl	$0, -4(%rsi)
  402642: 74 ee                        	je	-18 <printf_core+0xb55>
; 		e2-=sh;
  402644: 8b 4c 24 50                  	movl	80(%rsp), %ecx
  402648: 48 89 f7                     	movq	%rsi, %rdi
; 	while (e2>0) {
  40264b: 44 29 c9                     	subl	%r9d, %ecx
; 		e2-=sh;
  40264e: 89 4c 24 50                  	movl	%ecx, 80(%rsp)
  402652: 41 89 c9                     	movl	%ecx, %r9d
; 	while (e2>0) {
  402655: 7f 8e                        	jg	-114 <printf_core+0xb08>
  402657: eb 0b                        	jmp	11 <printf_core+0xb87>
; 	while (e2<0) {
  402659: 44 89 c9                     	movl	%r9d, %ecx
; 		y = 1000000000*(y-*z++);
  40265c: 48 89 fe                     	movq	%rdi, %rsi
  40265f: 4c 8b 54 24 28               	movq	40(%rsp), %r10
; 	while (e2<0) {
  402664: 85 c9                        	testl	%ecx, %ecx
  402666: 78 0d                        	js	13 <printf_core+0xb98>
; 	if (e2<0) a=r=z=big;
  402668: 4d 89 d3                     	movq	%r10, %r11
  40266b: 4c 8b 74 24 28               	movq	40(%rsp), %r14
  402670: e9 bd 00 00 00               	jmp	189 <printf_core+0xc55>
  402675: 48 8b 44 24 20               	movq	32(%rsp), %rax
  40267a: 83 c0 1d                     	addl	$29, %eax
  40267d: 4c 69 c8 39 8e e3 38         	imulq	$954437177, %rax, %r9
  402684: 49 c1 e9 21                  	shrq	$33, %r9
  402688: 41 ff c1                     	incl	%r9d
  40268b: 4c 8b 74 24 28               	movq	40(%rsp), %r14
; 		int sh=MIN(9,-e2), need=1+(p+LDBL_MANT_DIG/3U+8)/9;
  402690: f7 d9                        	negl	%ecx
  402692: 83 f9 0a                     	cmpl	$10, %ecx
  402695: 41 0f 4d cf                  	cmovgel	%r15d, %ecx
; 		for (d=a; d<z; d++) {
  402699: 49 39 f2                     	cmpq	%rsi, %r10
  40269c: 73 57                        	jae	87 <printf_core+0xc18>
  40269e: 41 bb ff ff ff ff            	movl	$4294967295, %r11d
  4026a4: 41 d3 e3                     	shll	%cl, %r11d
  4026a7: b8 ff ff ff ff               	movl	$4294967295, %eax
  4026ac: 41 31 c3                     	xorl	%eax, %r11d
  4026af: 41 be 00 ca 9a 3b            	movl	$1000000000, %r14d
  4026b5: 41 d3 ee                     	shrl	%cl, %r14d
  4026b8: 31 ff                        	xorl	%edi, %edi
  4026ba: 4c 89 d3                     	movq	%r10, %rbx
  4026bd: 89 fa                        	movl	%edi, %edx
; 			uint32_t rm = *d & (1<<sh)-1;
  4026bf: 8b 03                        	movl	(%rbx), %eax
  4026c1: 89 c7                        	movl	%eax, %edi
  4026c3: 44 21 df                     	andl	%r11d, %edi
; 			carry = (1000000000>>sh) * rm;
  4026c6: 41 0f af fe                  	imull	%r14d, %edi
; 			*d = (*d>>sh) + carry;
  4026ca: d3 e8                        	shrl	%cl, %eax
  4026cc: 01 d0                        	addl	%edx, %eax
  4026ce: 89 03                        	movl	%eax, (%rbx)
; 		for (d=a; d<z; d++) {
  4026d0: 48 83 c3 04                  	addq	$4, %rbx
  4026d4: 48 39 f3                     	cmpq	%rsi, %rbx
  4026d7: 72 e4                        	jb	-28 <printf_core+0xbe0>
; 		if (!*a) a++;
  4026d9: 45 39 2a                     	cmpl	%r13d, (%r10)
  4026dc: 4d 8d 5a 04                  	leaq	4(%r10), %r11
  4026e0: 4d 0f 45 da                  	cmovneq	%r10, %r11
; 		if (carry) *z++ = carry;
  4026e4: 85 ff                        	testl	%edi, %edi
  4026e6: 4c 8b 74 24 28               	movq	40(%rsp), %r14
  4026eb: 74 14                        	je	20 <printf_core+0xc24>
  4026ed: 89 3e                        	movl	%edi, (%rsi)
  4026ef: 48 83 c6 04                  	addq	$4, %rsi
  4026f3: eb 0c                        	jmp	12 <printf_core+0xc24>
; 		if (!*a) a++;
  4026f5: 4d 8d 5a 04                  	leaq	4(%r10), %r11
  4026f9: 41 83 3a 00                  	cmpl	$0, (%r10)
  4026fd: 4d 0f 45 da                  	cmovneq	%r10, %r11
  402701: 41 83 f8 66                  	cmpl	$102, %r8d
; 		b = (t|32)=='f' ? r : a;
  402705: 4c 89 d8                     	movq	%r11, %rax
  402708: 49 0f 44 c6                  	cmoveq	%r14, %rax
; 		if (z-b > need) z = b+need;
  40270c: 48 89 f2                     	movq	%rsi, %rdx
  40270f: 48 29 c2                     	subq	%rax, %rdx
  402712: 48 c1 fa 02                  	sarq	$2, %rdx
  402716: 4c 39 ca                     	cmpq	%r9, %rdx
  402719: 4a 8d 04 88                  	leaq	(%rax,%r9,4), %rax
  40271d: 48 0f 4f f0                  	cmovgq	%rax, %rsi
; 	while (e2<0) {
  402721: 03 4c 24 50                  	addl	80(%rsp), %ecx
; 		e2+=sh;
  402725: 89 4c 24 50                  	movl	%ecx, 80(%rsp)
  402729: 4d 89 da                     	movq	%r11, %r10
; 	while (e2<0) {
  40272c: 0f 88 5e ff ff ff            	js	-162 <printf_core+0xbb3>
  402732: 45 31 d2                     	xorl	%r10d, %r10d
; 	if (a<z) for (i=10, e=9*(r-a); *a>=i; i*=10, e++);
  402735: 49 39 f3                     	cmpq	%rsi, %r11
  402738: 73 27                        	jae	39 <printf_core+0xc84>
  40273a: 4c 89 f0                     	movq	%r14, %rax
  40273d: 4c 29 d8                     	subq	%r11, %rax
  402740: 48 c1 e8 02                  	shrq	$2, %rax
  402744: 44 8d 14 c0                  	leal	(%rax,%rax,8), %r10d
  402748: 41 8b 03                     	movl	(%r11), %eax
  40274b: 83 f8 0a                     	cmpl	$10, %eax
  40274e: 72 11                        	jb	17 <printf_core+0xc84>
  402750: b9 0a 00 00 00               	movl	$10, %ecx
  402755: 01 c9                        	addl	%ecx, %ecx
  402757: 8d 0c 89                     	leal	(%rcx,%rcx,4), %ecx
  40275a: 41 ff c2                     	incl	%r10d
  40275d: 39 c8                        	cmpl	%ecx, %eax
  40275f: 73 f4                        	jae	-12 <printf_core+0xc78>
; 	j = p - ((t|32)!='f')*e - ((t|32)=='g' && p);
  402761: 41 83 f8 66                  	cmpl	$102, %r8d
  402765: 44 89 d1                     	movl	%r10d, %ecx
  402768: 41 0f 44 cd                  	cmovel	%r13d, %ecx
  40276c: 48 8b 54 24 20               	movq	32(%rsp), %rdx
  402771: 89 d0                        	movl	%edx, %eax
  402773: 29 c8                        	subl	%ecx, %eax
  402775: 41 83 f8 67                  	cmpl	$103, %r8d
  402779: 0f 94 c1                     	sete	%cl
  40277c: 85 d2                        	testl	%edx, %edx
  40277e: 0f 95 c2                     	setne	%dl
  402781: 20 ca                        	andb	%cl, %dl
  402783: 0f b6 ca                     	movzbl	%dl, %ecx
  402786: 29 c8                        	subl	%ecx, %eax
; 	if (j < 9*(z-r-1)) {
  402788: 48 63 c8                     	movslq	%eax, %rcx
  40278b: 48 89 f2                     	movq	%rsi, %rdx
  40278e: 4c 29 f2                     	subq	%r14, %rdx
  402791: 48 c1 fa 02                  	sarq	$2, %rdx
  402795: 48 8d 14 d2                  	leaq	(%rdx,%rdx,8), %rdx
  402799: 48 83 c2 f7                  	addq	$-9, %rdx
  40279d: 48 39 ca                     	cmpq	%rcx, %rdx
  4027a0: 0f 8e 64 06 00 00            	jle	1636 <printf_core+0x132d>
  4027a6: 4d 89 df                     	movq	%r11, %r15
; 		d = r + 1 + ((j+9*LDBL_MAX_EXP)/9 - LDBL_MAX_EXP);
  4027a9: 05 00 40 02 00               	addl	$147456, %eax
; 		j %= 9;
  4027ae: 48 98                        	cltq
  4027b0: 48 69 c8 39 8e e3 38         	imulq	$954437177, %rax, %rcx
  4027b7: 48 89 ca                     	movq	%rcx, %rdx
  4027ba: 48 c1 ea 3f                  	shrq	$63, %rdx
  4027be: 48 c1 f9 21                  	sarq	$33, %rcx
  4027c2: 01 d1                        	addl	%edx, %ecx
; 		d = r + 1 + ((j+9*LDBL_MAX_EXP)/9 - LDBL_MAX_EXP);
  4027c4: 4c 63 c9                     	movslq	%ecx, %r9
  4027c7: 4b 8d 1c 8e                  	leaq	(%r14,%r9,4), %rbx
  4027cb: 48 81 c3 04 00 ff ff         	addq	$-65532, %rbx
; 		j %= 9;
  4027d2: 43 8d 0c c9                  	leal	(%r9,%r9,8), %ecx
  4027d6: 29 c8                        	subl	%ecx, %eax
  4027d8: 8d 48 01                     	leal	1(%rax), %ecx
  4027db: bf 0a 00 00 00               	movl	$10, %edi
; 		for (i=10, j++; j<9; i*=10, j++);
  4027e0: 83 f9 08                     	cmpl	$8, %ecx
  4027e3: 7f 11                        	jg	17 <printf_core+0xd19>
  4027e5: 83 c0 f8                     	addl	$-8, %eax
  4027e8: bf 0a 00 00 00               	movl	$10, %edi
  4027ed: 01 ff                        	addl	%edi, %edi
  4027ef: 8d 3c bf                     	leal	(%rdi,%rdi,4), %edi
  4027f2: ff c0                        	incl	%eax
  4027f4: 75 f7                        	jne	-9 <printf_core+0xd10>
; 		x = *d % i;
  4027f6: 44 8b 1b                     	movl	(%rbx), %r11d
  4027f9: 44 89 d8                     	movl	%r11d, %eax
  4027fc: 31 d2                        	xorl	%edx, %edx
  4027fe: f7 f7                        	divl	%edi
; 		if (x || d+1!=z) {
  402800: 48 8d 43 04                  	leaq	4(%rbx), %rax
  402804: 48 39 f0                     	cmpq	%rsi, %rax
  402807: 75 08                        	jne	8 <printf_core+0xd34>
  402809: 85 d2                        	testl	%edx, %edx
  40280b: 0f 84 eb 05 00 00            	je	1515 <printf_core+0x131f>
; 			if (x<i/2) small=0x0.8p0;
  402811: 89 f9                        	movl	%edi, %ecx
  402813: d1 e9                        	shrl	%ecx
  402815: f2 0f 10 05 23 3f 00 00      	movsd	16163(%rip), %xmm0
  40281d: 39 ca                        	cmpl	%ecx, %edx
  40281f: 0f 82 41 05 00 00            	jb	1345 <printf_core+0x1289>
  402825: 4c 89 d1                     	movq	%r10, %rcx
; 			else if (x==i/2 && d+1==z) small=0x1.0p0;
  402828: 41 0f 94 c2                  	sete	%r10b
; 		if (x || d+1!=z) {
  40282c: 48 39 f0                     	cmpq	%rsi, %rax
; 			else if (x==i/2 && d+1==z) small=0x1.0p0;
  40282f: 0f 84 21 05 00 00            	je	1313 <printf_core+0x1279>
  402835: f2 0f 10 05 4b 3f 00 00      	movsd	16203(%rip), %xmm0
  40283d: e9 21 05 00 00               	jmp	1313 <printf_core+0x1286>
  402842: 41 bb 01 00 00 00            	movl	$1, %r11d
  402848: 41 bf d1 6f 40 00            	movl	$4222929, %r15d
  40284e: 8b 5c 24 38                  	movl	56(%rsp), %ebx
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  402852: 48 85 c9                     	testq	%rcx, %rcx
  402855: 74 47                        	je	71 <printf_core+0xdc1>
  402857: 89 fb                        	movl	%edi, %ebx
  402859: 4c 8d ac 24 0b 01 00 00      	leaq	267(%rsp), %r13
  402861: 48 bf cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rdi
  40286b: 48 89 c8                     	movq	%rcx, %rax
  40286e: 48 f7 e7                     	mulq	%rdi
  402871: 48 c1 ea 03                  	shrq	$3, %rdx
  402875: 8d 04 12                     	leal	(%rdx,%rdx), %eax
  402878: 8d 04 80                     	leal	(%rax,%rax,4), %eax
  40287b: 89 ce                        	movl	%ecx, %esi
  40287d: 29 c6                        	subl	%eax, %esi
  40287f: 40 80 ce 30                  	orb	$48, %sil
  402883: 41 88 75 ff                  	movb	%sil, -1(%r13)
  402887: 49 ff cd                     	decq	%r13
  40288a: 48 83 f9 09                  	cmpq	$9, %rcx
  40288e: 48 89 d1                     	movq	%rdx, %rcx
  402891: 77 d8                        	ja	-40 <printf_core+0xd8e>
; 		if (fl & LEFT_ADJ) fl &= ~ZERO_PAD;
  402893: 44 89 c0                     	movl	%r8d, %eax
  402896: 89 df                        	movl	%ebx, %edi
  402898: 8b 5c 24 38                  	movl	56(%rsp), %ebx
  40289c: eb 0b                        	jmp	11 <printf_core+0xdcc>
  40289e: 4c 8d ac 24 0b 01 00 00      	leaq	267(%rsp), %r13
  4028a6: 44 89 c0                     	movl	%r8d, %eax
; 			if (xp && p<0) goto overflow;
  4028a9: 85 db                        	testl	%ebx, %ebx
  4028ab: 74 09                        	je	9 <printf_core+0xdd9>
  4028ad: 45 85 f6                     	testl	%r14d, %r14d
  4028b0: 0f 88 f5 0c 00 00            	js	3317 <printf_core+0x1ace>
; 			if (xp) fl &= ~ZERO_PAD;
  4028b6: 41 89 c0                     	movl	%eax, %r8d
  4028b9: 41 81 e0 ff ff fe ff         	andl	$4294901759, %r8d
; 			if (xp && p<0) goto overflow;
  4028c0: 83 7c 24 38 00               	cmpl	$0, 56(%rsp)
; 			if (xp) fl &= ~ZERO_PAD;
  4028c5: 44 0f 44 c0                  	cmovel	%eax, %r8d
; 			if (!arg.i && !p) {
  4028c9: 48 8b 44 24 48               	movq	72(%rsp), %rax
  4028ce: 45 85 f6                     	testl	%r14d, %r14d
  4028d1: 75 15                        	jne	21 <printf_core+0xe0b>
  4028d3: 48 85 c0                     	testq	%rax, %rax
  4028d6: 75 10                        	jne	16 <printf_core+0xe0b>
  4028d8: 45 31 f6                     	xorl	%r14d, %r14d
  4028db: 4c 8d ac 24 0b 01 00 00      	leaq	267(%rsp), %r13
; 		if (p < z-a) p = z-a;
  4028e3: 4c 89 ea                     	movq	%r13, %rdx
  4028e6: eb 23                        	jmp	35 <printf_core+0xe2e>
  4028e8: 48 8d 94 24 0b 01 00 00      	leaq	267(%rsp), %rdx
; 			p = MAX(p, z-a + !arg.i);
  4028f0: 48 89 d1                     	movq	%rdx, %rcx
  4028f3: 4c 29 e9                     	subq	%r13, %rcx
  4028f6: 48 83 f8 01                  	cmpq	$1, %rax
  4028fa: 48 83 d1 00                  	adcq	$0, %rcx
  4028fe: 49 63 c6                     	movslq	%r14d, %rax
  402901: 48 39 c1                     	cmpq	%rax, %rcx
  402904: 41 0f 4c ce                  	cmovll	%r14d, %ecx
  402908: 41 89 ce                     	movl	%ecx, %r14d
; 		if (p < z-a) p = z-a;
  40290b: 49 63 de                     	movslq	%r14d, %rbx
  40290e: 4c 29 ea                     	subq	%r13, %rdx
  402911: 48 39 da                     	cmpq	%rbx, %rdx
  402914: 0f 4f da                     	cmovgl	%edx, %ebx
; 		if (p > INT_MAX-pl) goto overflow;
  402917: b8 ff ff ff 7f               	movl	$2147483647, %eax
  40291c: 44 29 d8                     	subl	%r11d, %eax
  40291f: 39 c3                        	cmpl	%eax, %ebx
  402921: 0f 8f 84 0c 00 00            	jg	3204 <printf_core+0x1ace>
; 		if (w < pl+p) w = pl+p;
  402927: 42 8d 0c 1b                  	leal	(%rbx,%r11), %ecx
  40292b: 41 39 ca                     	cmpl	%ecx, %r10d
  40292e: 44 0f 4c d1                  	cmovll	%ecx, %r10d
; 		if (w > INT_MAX-cnt) goto overflow;
  402932: 41 39 fa                     	cmpl	%edi, %r10d
  402935: 0f 8f 70 0c 00 00            	jg	3184 <printf_core+0x1ace>
  40293b: 48 89 54 24 38               	movq	%rdx, 56(%rsp)
  402940: 4c 89 7c 24 58               	movq	%r15, 88(%rsp)
  402945: 4c 89 5c 24 20               	movq	%r11, 32(%rsp)
  40294a: 4c 89 6c 24 28               	movq	%r13, 40(%rsp)
; 		pad(f, ' ', w, pl+p, fl);
  40294f: 4c 89 e7                     	movq	%r12, %rdi
  402952: be 20 00 00 00               	movl	$32, %esi
  402957: 44 89 54 24 10               	movl	%r10d, 16(%rsp)
  40295c: 44 89 d2                     	movl	%r10d, %edx
  40295f: 89 4c 24 30                  	movl	%ecx, 48(%rsp)
  402963: 44 89 44 24 14               	movl	%r8d, 20(%rsp)
  402968: 4d 89 e7                     	movq	%r12, %r15
  40296b: e8 8b 0e 00 00               	callq	3723 <pad>
  402970: 4c 89 fa                     	movq	%r15, %rdx
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  402973: 41 f6 07 20                  	testb	$32, (%r15)
  402977: 75 12                        	jne	18 <printf_core+0xeae>
; 		out(f, prefix, pl);
  402979: 48 63 74 24 20               	movslq	32(%rsp), %rsi
  40297e: 48 8b 7c 24 58               	movq	88(%rsp), %rdi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  402983: e8 70 32 00 00               	callq	12912 <__fwritex>
  402988: 4c 89 fa                     	movq	%r15, %rdx
  40298b: 44 8b 44 24 14               	movl	20(%rsp), %r8d
; 		pad(f, '0', w, pl+p, fl^ZERO_PAD);
  402990: 41 81 f0 00 00 01 00         	xorl	$65536, %r8d
  402997: 48 89 d7                     	movq	%rdx, %rdi
  40299a: be 30 00 00 00               	movl	$48, %esi
  40299f: 8b 54 24 10                  	movl	16(%rsp), %edx
  4029a3: 8b 4c 24 30                  	movl	48(%rsp), %ecx
  4029a7: e8 4f 0e 00 00               	callq	3663 <pad>
; 		pad(f, '0', p, z-a, 0);
  4029ac: 4c 89 ff                     	movq	%r15, %rdi
  4029af: be 30 00 00 00               	movl	$48, %esi
  4029b4: 89 da                        	movl	%ebx, %edx
  4029b6: 48 8b 5c 24 38               	movq	56(%rsp), %rbx
  4029bb: 89 d9                        	movl	%ebx, %ecx
  4029bd: 45 31 c0                     	xorl	%r8d, %r8d
  4029c0: e8 36 0e 00 00               	callq	3638 <pad>
  4029c5: 4c 89 fa                     	movq	%r15, %rdx
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4029c8: 41 f6 07 20                  	testb	$32, (%r15)
  4029cc: 75 10                        	jne	16 <printf_core+0xf01>
  4029ce: 48 8b 7c 24 28               	movq	40(%rsp), %rdi
  4029d3: 48 89 de                     	movq	%rbx, %rsi
  4029d6: e8 1d 32 00 00               	callq	12829 <__fwritex>
  4029db: 4c 89 fa                     	movq	%r15, %rdx
  4029de: 44 8b 44 24 14               	movl	20(%rsp), %r8d
; 		pad(f, ' ', w, pl+p, fl^LEFT_ADJ);
  4029e3: 41 81 f0 00 20 00 00         	xorl	$8192, %r8d
  4029ea: 48 89 d7                     	movq	%rdx, %rdi
  4029ed: be 20 00 00 00               	movl	$32, %esi
  4029f2: 8b 5c 24 10                  	movl	16(%rsp), %ebx
  4029f6: 89 da                        	movl	%ebx, %edx
  4029f8: 8b 4c 24 30                  	movl	48(%rsp), %ecx
  4029fc: e8 fa 0d 00 00               	callq	3578 <pad>
  402a01: 4d 89 fc                     	movq	%r15, %r12
  402a04: 44 8b 4c 24 44               	movl	68(%rsp), %r9d
  402a09: e9 1b f1 ff ff               	jmp	-3813 <printf_core+0x4c>
  402a0e: 44 8b 4c 24 44               	movl	68(%rsp), %r9d
  402a13: 44 8b 44 24 14               	movl	20(%rsp), %r8d
  402a18: 4c 8b 6c 24 30               	movq	48(%rsp), %r13
  402a1d: eb 08                        	jmp	8 <printf_core+0xf4a>
; 				y+=round;
  402a1f: f2 0f 58 c1                  	addsd	%xmm1, %xmm0
; 				y-=round;
  402a23: f2 0f 5c c1                  	subsd	%xmm1, %xmm0
; 		estr=fmt_u(e2<0 ? -e2 : e2, ebuf);
  402a27: 44 8b 5c 24 50               	movl	80(%rsp), %r11d
  402a2c: 44 89 d8                     	movl	%r11d, %eax
  402a2f: f7 d8                        	negl	%eax
  402a31: 41 0f 4c c3                  	cmovll	%r11d, %eax
  402a35: 4c 8d bc 24 d0 00 00 00      	leaq	208(%rsp), %r15
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  402a3d: 85 c0                        	testl	%eax, %eax
  402a3f: 74 4b                        	je	75 <printf_core+0xfaf>
; 		estr=fmt_u(e2<0 ? -e2 : e2, ebuf);
  402a41: 89 c1                        	movl	%eax, %ecx
  402a43: 31 db                        	xorl	%ebx, %ebx
  402a45: 4c 8d bc 24 d0 00 00 00      	leaq	208(%rsp), %r15
  402a4d: 48 be cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rsi
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  402a57: 48 89 c8                     	movq	%rcx, %rax
  402a5a: 48 f7 e6                     	mulq	%rsi
  402a5d: 48 c1 ea 03                  	shrq	$3, %rdx
  402a61: 8d 04 12                     	leal	(%rdx,%rdx), %eax
  402a64: 8d 04 80                     	leal	(%rax,%rax,4), %eax
  402a67: 89 cf                        	movl	%ecx, %edi
  402a69: 29 c7                        	subl	%eax, %edi
  402a6b: 40 80 cf 30                  	orb	$48, %dil
  402a6f: 41 88 7f ff                  	movb	%dil, -1(%r15)
  402a73: 49 ff cf                     	decq	%r15
  402a76: 48 ff c3                     	incq	%rbx
  402a79: 48 83 f9 09                  	cmpq	$9, %rcx
  402a7d: 48 89 d1                     	movq	%rdx, %rcx
  402a80: 77 d5                        	ja	-43 <printf_core+0xf7a>
; 		if (estr==ebuf) *--estr='0';
  402a82: 48 85 db                     	testq	%rbx, %rbx
  402a85: 48 8b 4c 24 38               	movq	56(%rsp), %rcx
  402a8a: 75 08                        	jne	8 <printf_core+0xfb7>
  402a8c: 41 c6 47 ff 30               	movb	$48, -1(%r15)
  402a91: 49 ff cf                     	decq	%r15
  402a94: 41 83 cd 02                  	orl	$2, %r13d
; 		*--estr = (e2<0 ? '-' : '+');
  402a98: 41 c1 eb 1f                  	shrl	$31, %r11d
  402a9c: 45 00 db                     	addb	%r11b, %r11b
  402a9f: 41 80 c3 2b                  	addb	$43, %r11b
  402aa3: 45 88 5f ff                  	movb	%r11b, -1(%r15)
; 		*--estr = t+('p'-'a');
  402aa7: 80 c1 0f                     	addb	$15, %cl
  402aaa: 41 88 4f fe                  	movb	%cl, -2(%r15)
  402aae: 49 83 c7 fe                  	addq	$-2, %r15
  402ab2: 48 8d 44 24 60               	leaq	96(%rsp), %rax
  402ab7: 48 89 c6                     	movq	%rax, %rsi
  402aba: 48 8d bc 24 d0 00 00 00      	leaq	208(%rsp), %rdi
  402ac2: bb 01 00 00 00               	movl	$1, %ebx
  402ac7: 48 89 f0                     	movq	%rsi, %rax
; 			int x=y;
  402aca: f2 0f 2c c8                  	cvttsd2si	%xmm0, %ecx
; 			*s++=xdigits[x]|(t&32);
  402ace: 48 63 c9                     	movslq	%ecx, %rcx
  402ad1: 8a 91 c0 6d 40 00            	movb	4222400(%rcx), %dl
  402ad7: 44 08 d2                     	orb	%r10b, %dl
  402ada: 48 01 de                     	addq	%rbx, %rsi
  402add: 88 10                        	movb	%dl, (%rax)
; 			y=16*(y-x);
  402adf: 0f 57 c9                     	xorps	%xmm1, %xmm1
  402ae2: f2 0f 2a c9                  	cvtsi2sd	%ecx, %xmm1
  402ae6: f2 0f 5c c1                  	subsd	%xmm1, %xmm0
  402aea: f2 0f 59 c3                  	mulsd	%xmm3, %xmm0
; 			if (s-buf==1 && (y||p>0||(fl&ALT_FORM))) *s++='.';
  402aee: 48 8d 4c 24 60               	leaq	96(%rsp), %rcx
  402af3: 48 f7 d9                     	negq	%rcx
  402af6: 48 01 c1                     	addq	%rax, %rcx
  402af9: 48 83 c1 01                  	addq	$1, %rcx
  402afd: 48 39 d9                     	cmpq	%rbx, %rcx
  402b00: 75 1e                        	jne	30 <printf_core+0x1043>
  402b02: 41 f6 c0 08                  	testb	$8, %r8b
  402b06: 75 0d                        	jne	13 <printf_core+0x1038>
  402b08: 45 85 f6                     	testl	%r14d, %r14d
  402b0b: 7f 08                        	jg	8 <printf_core+0x1038>
  402b0d: 66 0f 2e c2                  	ucomisd	%xmm2, %xmm0
  402b11: 75 02                        	jne	2 <printf_core+0x1038>
  402b13: 7b 0b                        	jnp	11 <printf_core+0x1043>
  402b15: c6 40 01 2e                  	movb	$46, 1(%rax)
  402b19: 48 83 c0 02                  	addq	$2, %rax
  402b1d: 48 89 c6                     	movq	%rax, %rsi
; 		} while (y);
  402b20: 66 0f 2e c2                  	ucomisd	%xmm2, %xmm0
  402b24: 75 a1                        	jne	-95 <printf_core+0xfea>
  402b26: 7a 9f                        	jp	-97 <printf_core+0xfea>
; 		if (p > INT_MAX-2-(ebuf-estr)-pl)
  402b28: 4d 63 d6                     	movslq	%r14d, %r10
  402b2b: 4c 29 ff                     	subq	%r15, %rdi
  402b2e: 44 89 e8                     	movl	%r13d, %eax
  402b31: 48 8d 0c 38                  	leaq	(%rax,%rdi), %rcx
  402b35: ba fd ff ff 7f               	movl	$2147483645, %edx
  402b3a: 48 29 ca                     	subq	%rcx, %rdx
  402b3d: bb ff ff ff ff               	movl	$4294967295, %ebx
  402b42: 4c 39 d2                     	cmpq	%r10, %rdx
  402b45: 0f 8c 58 0a 00 00            	jl	2648 <printf_core+0x1ac6>
; 		if (p && s-buf-2 < p)
  402b4b: 45 85 f6                     	testl	%r14d, %r14d
  402b4e: 48 89 74 24 28               	movq	%rsi, 40(%rsp)
  402b53: 48 89 7c 24 38               	movq	%rdi, 56(%rsp)
  402b58: 48 89 44 24 58               	movq	%rax, 88(%rsp)
  402b5d: 74 1a                        	je	26 <printf_core+0x109c>
  402b5f: 48 8b 8c 24 18 01 00 00      	movq	280(%rsp), %rcx
  402b67: 48 01 f1                     	addq	%rsi, %rcx
  402b6a: 4c 39 d1                     	cmpq	%r10, %rcx
  402b6d: 7d 0a                        	jge	10 <printf_core+0x109c>
; 			l = (p+2) + (ebuf-estr);
  402b6f: 49 8d 1c 3a                  	leaq	(%r10,%rdi), %rbx
  402b73: 48 83 c3 02                  	addq	$2, %rbx
  402b77: eb 0e                        	jmp	14 <printf_core+0x10aa>
; 			l = (s-buf) + (ebuf-estr);
  402b79: 48 89 fb                     	movq	%rdi, %rbx
  402b7c: 48 8d 44 24 60               	leaq	96(%rsp), %rax
  402b81: 48 29 c3                     	subq	%rax, %rbx
  402b84: 48 01 f3                     	addq	%rsi, %rbx
  402b87: 8b 54 24 10                  	movl	16(%rsp), %edx
; 		pad(f, ' ', w, pl+l, fl);
  402b8b: 41 01 dd                     	addl	%ebx, %r13d
  402b8e: 4c 89 e7                     	movq	%r12, %rdi
  402b91: be 20 00 00 00               	movl	$32, %esi
  402b96: 4c 89 6c 24 30               	movq	%r13, 48(%rsp)
  402b9b: 44 89 e9                     	movl	%r13d, %ecx
  402b9e: e8 58 0c 00 00               	callq	3160 <pad>
  402ba3: 48 8b 54 24 18               	movq	24(%rsp), %rdx
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  402ba8: f6 02 20                     	testb	$32, (%rdx)
  402bab: 75 14                        	jne	20 <printf_core+0x10e4>
  402bad: 48 8b 7c 24 20               	movq	32(%rsp), %rdi
  402bb2: 48 8b 74 24 58               	movq	88(%rsp), %rsi
  402bb7: e8 3c 30 00 00               	callq	12348 <__fwritex>
  402bbc: 48 8b 54 24 18               	movq	24(%rsp), %rdx
  402bc1: 44 8b 44 24 14               	movl	20(%rsp), %r8d
; 		pad(f, '0', w, pl+l, fl^ZERO_PAD);
  402bc6: 41 81 f0 00 00 01 00         	xorl	$65536, %r8d
  402bcd: 48 89 d7                     	movq	%rdx, %rdi
  402bd0: be 30 00 00 00               	movl	$48, %esi
  402bd5: 8b 54 24 10                  	movl	16(%rsp), %edx
  402bd9: 48 8b 4c 24 30               	movq	48(%rsp), %rcx
  402bde: e8 18 0c 00 00               	callq	3096 <pad>
  402be3: 48 8b 54 24 18               	movq	24(%rsp), %rdx
; 		out(f, buf, s-buf);
  402be8: 48 8d 44 24 60               	leaq	96(%rsp), %rax
  402bed: 48 8b 4c 24 28               	movq	40(%rsp), %rcx
  402bf2: 48 29 c1                     	subq	%rax, %rcx
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  402bf5: f6 02 20                     	testb	$32, (%rdx)
  402bf8: 75 1e                        	jne	30 <printf_core+0x113b>
  402bfa: 48 8d 7c 24 60               	leaq	96(%rsp), %rdi
  402bff: 48 89 4c 24 28               	movq	%rcx, 40(%rsp)
  402c04: 48 8b 74 24 28               	movq	40(%rsp), %rsi
  402c09: e8 ea 2f 00 00               	callq	12266 <__fwritex>
  402c0e: 48 8b 4c 24 28               	movq	40(%rsp), %rcx
  402c13: 48 8b 54 24 18               	movq	24(%rsp), %rdx
; 		pad(f, '0', l-(ebuf-estr)-(s-buf), 0, 0);
  402c18: 03 4c 24 38                  	addl	56(%rsp), %ecx
  402c1c: 29 cb                        	subl	%ecx, %ebx
  402c1e: 48 89 d7                     	movq	%rdx, %rdi
  402c21: be 30 00 00 00               	movl	$48, %esi
  402c26: 89 da                        	movl	%ebx, %edx
  402c28: 31 c9                        	xorl	%ecx, %ecx
  402c2a: 45 31 c0                     	xorl	%r8d, %r8d
  402c2d: e8 c9 0b 00 00               	callq	3017 <pad>
  402c32: 48 8b 54 24 18               	movq	24(%rsp), %rdx
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  402c37: f6 02 20                     	testb	$32, (%rdx)
  402c3a: 75 12                        	jne	18 <printf_core+0x1171>
  402c3c: 4c 89 ff                     	movq	%r15, %rdi
  402c3f: 48 8b 74 24 38               	movq	56(%rsp), %rsi
  402c44: e8 af 2f 00 00               	callq	12207 <__fwritex>
  402c49: 48 8b 54 24 18               	movq	24(%rsp), %rdx
  402c4e: 44 8b 44 24 14               	movl	20(%rsp), %r8d
; 		pad(f, ' ', w, pl+l, fl^LEFT_ADJ);
  402c53: 41 81 f0 00 20 00 00         	xorl	$8192, %r8d
  402c5a: 48 89 d7                     	movq	%rdx, %rdi
  402c5d: be 20 00 00 00               	movl	$32, %esi
  402c62: 44 8b 7c 24 10               	movl	16(%rsp), %r15d
  402c67: 44 89 fa                     	movl	%r15d, %edx
  402c6a: 48 8b 5c 24 30               	movq	48(%rsp), %rbx
  402c6f: e9 17 09 00 00               	jmp	2327 <printf_core+0x1aae>
  402c74: 48 8b 54 24 28               	movq	40(%rsp), %rdx
; 			if (i > INT_MAX) goto overflow;
  402c79: 48 81 fa ff ff ff 7f         	cmpq	$2147483647, %rdx
  402c80: 76 07                        	jbe	7 <printf_core+0x11ac>
  402c82: e9 24 09 00 00               	jmp	2340 <printf_core+0x1ace>
  402c87: 31 d2                        	xorl	%edx, %edx
; 			pad(f, ' ', w, p, fl);
  402c89: 4c 89 e7                     	movq	%r12, %rdi
  402c8c: 48 89 d3                     	movq	%rdx, %rbx
  402c8f: be 20 00 00 00               	movl	$32, %esi
  402c94: 44 89 54 24 10               	movl	%r10d, 16(%rsp)
  402c99: 44 89 d2                     	movl	%r10d, %edx
  402c9c: 89 d9                        	movl	%ebx, %ecx
  402c9e: e8 58 0b 00 00               	callq	2904 <pad>
  402ca3: 48 89 d8                     	movq	%rbx, %rax
  402ca6: 48 89 5c 24 28               	movq	%rbx, 40(%rsp)
; 			for (i=0; i<0U+p && *ws && i+(l=wctomb(mb, *ws++))<=p; i+=l)
  402cab: b8 ff ff ff ff               	movl	$4294967295, %eax
  402cb0: 48 21 c3                     	andq	%rax, %rbx
  402cb3: 48 89 5c 24 30               	movq	%rbx, 48(%rsp)
  402cb8: 48 8b 4c 24 20               	movq	32(%rsp), %rcx
  402cbd: 74 5d                        	je	93 <printf_core+0x123f>
  402cbf: 48 63 44 24 28               	movslq	40(%rsp), %rax
  402cc4: 48 89 44 24 38               	movq	%rax, 56(%rsp)
  402cc9: 45 31 ff                     	xorl	%r15d, %r15d
  402ccc: 8b 31                        	movl	(%rcx), %esi
  402cce: 85 f6                        	testl	%esi, %esi
  402cd0: 74 4a                        	je	74 <printf_core+0x123f>
  402cd2: 48 8d bc 24 a4 00 00 00      	leaq	164(%rsp), %rdi
  402cda: 48 89 cb                     	movq	%rcx, %rbx
  402cdd: e8 aa 29 00 00               	callq	10666 <wctomb>
  402ce2: 48 63 f0                     	movslq	%eax, %rsi
  402ce5: 49 01 f7                     	addq	%rsi, %r15
  402ce8: 4c 3b 7c 24 38               	cmpq	56(%rsp), %r15
  402ced: 77 2d                        	ja	45 <printf_core+0x123f>
  402cef: 48 89 d9                     	movq	%rbx, %rcx
  402cf2: 48 8b 44 24 18               	movq	24(%rsp), %rax
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  402cf7: f6 00 20                     	testb	$32, (%rax)
  402cfa: 75 15                        	jne	21 <printf_core+0x1234>
  402cfc: 48 8d bc 24 a4 00 00 00      	leaq	164(%rsp), %rdi
  402d04: 48 8b 54 24 18               	movq	24(%rsp), %rdx
  402d09: e8 ea 2e 00 00               	callq	12010 <__fwritex>
  402d0e: 48 89 d9                     	movq	%rbx, %rcx
  402d11: 48 83 c1 04                  	addq	$4, %rcx
; 			for (i=0; i<0U+p && *ws && i+(l=wctomb(mb, *ws++))<=p; i+=l)
  402d15: 4c 3b 7c 24 30               	cmpq	48(%rsp), %r15
  402d1a: 72 b0                        	jb	-80 <printf_core+0x11ef>
  402d1c: 44 8b 44 24 14               	movl	20(%rsp), %r8d
; 			pad(f, ' ', w, p, fl^LEFT_ADJ);
  402d21: 41 81 f0 00 20 00 00         	xorl	$8192, %r8d
  402d28: 48 8b 7c 24 18               	movq	24(%rsp), %rdi
  402d2d: be 20 00 00 00               	movl	$32, %esi
  402d32: 8b 5c 24 10                  	movl	16(%rsp), %ebx
  402d36: 89 da                        	movl	%ebx, %edx
  402d38: 4c 8b 7c 24 28               	movq	40(%rsp), %r15
  402d3d: 44 89 f9                     	movl	%r15d, %ecx
  402d40: e8 b6 0a 00 00               	callq	2742 <pad>
  402d45: 4c 8b 64 24 18               	movq	24(%rsp), %r12
; 			l = w>p ? w : p;
  402d4a: 44 39 fb                     	cmpl	%r15d, %ebx
  402d4d: 41 0f 4c df                  	cmovll	%r15d, %ebx
  402d51: e9 ae fc ff ff               	jmp	-850 <printf_core+0xf27>
  402d56: 41 0f b6 c2                  	movzbl	%r10b, %eax
  402d5a: f2 0f 10 04 c5 a0 6d 40 00   	movsd	4222368(,%rax,8), %xmm0
  402d63: 49 89 ca                     	movq	%rcx, %r10
; 			if (pl && *prefix=='-') round*=-1, small*=-1;
  402d66: 83 7c 24 30 00               	cmpl	$0, 48(%rsp)
  402d6b: 74 22                        	je	34 <printf_core+0x12b2>
  402d6d: 31 c0                        	xorl	%eax, %eax
  402d6f: 48 8b 4c 24 58               	movq	88(%rsp), %rcx
  402d74: 80 39 2d                     	cmpb	$45, (%rcx)
  402d77: 0f 94 c0                     	sete	%al
  402d7a: 75 08                        	jne	8 <printf_core+0x12a7>
  402d7c: 66 0f 57 05 0c 40 00 00      	xorpd	16396(%rip), %xmm0
  402d84: f2 0f 10 0c c5 b0 6d 40 00   	movsd	4222384(,%rax,8), %xmm1
  402d8d: eb 08                        	jmp	8 <printf_core+0x12ba>
  402d8f: f2 0f 10 0d f9 39 00 00      	movsd	14841(%rip), %xmm1
; 			*d -= x;
  402d97: 41 29 d3                     	subl	%edx, %r11d
  402d9a: 44 89 1b                     	movl	%r11d, (%rbx)
; 			if (round+small != round) {
  402d9d: f2 0f 58 c1                  	addsd	%xmm1, %xmm0
  402da1: 66 0f 2e c1                  	ucomisd	%xmm1, %xmm0
  402da5: 75 02                        	jne	2 <printf_core+0x12cc>
  402da7: 7b 53                        	jnp	83 <printf_core+0x131f>
; 				*d = *d + i;
  402da9: 41 01 fb                     	addl	%edi, %r11d
  402dac: 44 89 1b                     	movl	%r11d, (%rbx)
; 				while (*d > 999999999) {
  402daf: 41 81 fb 00 ca 9a 3b         	cmpl	$1000000000, %r11d
  402db6: 0f 82 3b 05 00 00            	jb	1339 <printf_core+0x181a>
  402dbc: 49 81 c1 00 c0 ff ff         	addq	$-16384, %r9
  402dc3: 4b 8d 1c 8e                  	leaq	(%r14,%r9,4), %rbx
  402dc7: 4d 89 fb                     	movq	%r15, %r11
; 					*d--=0;
  402dca: c7 43 04 00 00 00 00         	movl	$0, 4(%rbx)
; 					if (d<a) *--a=0;
  402dd1: 4c 39 db                     	cmpq	%r11, %rbx
  402dd4: 73 0c                        	jae	12 <printf_core+0x1305>
  402dd6: 41 c7 43 fc 00 00 00 00      	movl	$0, -4(%r11)
  402dde: 49 83 c3 fc                  	addq	$-4, %r11
; 					(*d)++;
  402de2: 8b 03                        	movl	(%rbx), %eax
  402de4: ff c0                        	incl	%eax
  402de6: 89 03                        	movl	%eax, (%rbx)
; 				while (*d > 999999999) {
  402de8: 48 83 c3 fc                  	addq	$-4, %rbx
  402dec: 3d ff c9 9a 3b               	cmpl	$999999999, %eax
  402df1: 77 d7                        	ja	-41 <printf_core+0x12ed>
; 				for (i=10, e=9*(r-a); *a>=i; i*=10, e++);
  402df3: 48 83 c3 04                  	addq	$4, %rbx
  402df7: e9 fe 04 00 00               	jmp	1278 <printf_core+0x181d>
  402dfc: 4d 89 fb                     	movq	%r15, %r11
; 		if (z>d+1) z=d+1;
  402dff: 48 83 c3 04                  	addq	$4, %rbx
  402e03: 48 39 de                     	cmpq	%rbx, %rsi
  402e06: 48 0f 47 f3                  	cmovaq	%rbx, %rsi
  402e0a: 48 89 f7                     	movq	%rsi, %rdi
; 	for (; z>a && !z[-1]; z--);
  402e0d: 4c 39 de                     	cmpq	%r11, %rsi
  402e10: 76 0f                        	jbe	15 <printf_core+0x1344>
  402e12: 48 8d 77 fc                  	leaq	-4(%rdi), %rsi
  402e16: 83 7f fc 00                  	cmpl	$0, -4(%rdi)
  402e1a: 74 ee                        	je	-18 <printf_core+0x132d>
  402e1c: 41 b1 01                     	movb	$1, %r9b
  402e1f: eb 03                        	jmp	3 <printf_core+0x1347>
  402e21: 45 31 c9                     	xorl	%r9d, %r9d
; 	j = p - ((t|32)!='f')*e - ((t|32)=='g' && p);
  402e24: 41 83 f8 67                  	cmpl	$103, %r8d
; 	if ((t|32)=='g') {
  402e28: 0f 85 da 00 00 00            	jne	218 <printf_core+0x142b>
  402e2e: 48 8b 44 24 20               	movq	32(%rsp), %rax
; 	j = p - ((t|32)!='f')*e - ((t|32)=='g' && p);
  402e33: 85 c0                        	testl	%eax, %eax
; 		if (!p) p++;
  402e35: b9 01 00 00 00               	movl	$1, %ecx
  402e3a: 0f 44 c1                     	cmovel	%ecx, %eax
; 		if (p>e && e>=-4) {
  402e3d: 44 39 d0                     	cmpl	%r10d, %eax
  402e40: 0f 9f c1                     	setg	%cl
  402e43: 41 83 fa fb                  	cmpl	$-5, %r10d
  402e47: 0f 9f c2                     	setg	%dl
  402e4a: 20 ca                        	andb	%cl, %dl
  402e4c: 44 89 d3                     	movl	%r10d, %ebx
  402e4f: be ff ff ff ff               	movl	$4294967295, %esi
  402e54: 31 f3                        	xorl	%esi, %ebx
  402e56: 0f b6 ca                     	movzbl	%dl, %ecx
  402e59: 48 8b 54 24 38               	movq	56(%rsp), %rdx
  402e5e: 8d 14 11                     	leal	(%rcx,%rdx), %edx
  402e61: 83 c2 fe                     	addl	$-2, %edx
  402e64: 48 89 54 24 38               	movq	%rdx, 56(%rsp)
  402e69: 84 c9                        	testb	%cl, %cl
  402e6b: 0f 44 de                     	cmovel	%esi, %ebx
  402e6e: 01 c3                        	addl	%eax, %ebx
  402e70: 48 89 5c 24 20               	movq	%rbx, 32(%rsp)
  402e75: 8b 44 24 14                  	movl	20(%rsp), %eax
; 		if (!(fl&ALT_FORM)) {
  402e79: 41 89 c0                     	movl	%eax, %r8d
  402e7c: 41 83 e0 08                  	andl	$8, %r8d
  402e80: 0f 85 8d 00 00 00            	jne	141 <printf_core+0x1436>
  402e86: be 09 00 00 00               	movl	$9, %esi
; 			if (z>a && z[-1]) for (i=10, j=0; z[-1]%i==0; i*=10, j++);
  402e8b: 45 84 c9                     	testb	%r9b, %r9b
  402e8e: 74 30                        	je	48 <printf_core+0x13e3>
  402e90: 8b 4f fc                     	movl	-4(%rdi), %ecx
  402e93: 85 c9                        	testl	%ecx, %ecx
  402e95: 74 29                        	je	41 <printf_core+0x13e3>
  402e97: 69 c1 cd cc cc cc            	imull	$3435973837, %ecx, %eax
  402e9d: d1 c8                        	rorl	%eax
  402e9f: 31 f6                        	xorl	%esi, %esi
  402ea1: 3d 99 99 99 19               	cmpl	$429496729, %eax
  402ea6: 77 18                        	ja	24 <printf_core+0x13e3>
  402ea8: bb 0a 00 00 00               	movl	$10, %ebx
  402ead: 31 f6                        	xorl	%esi, %esi
  402eaf: 01 db                        	addl	%ebx, %ebx
  402eb1: 8d 1c 9b                     	leal	(%rbx,%rbx,4), %ebx
  402eb4: ff c6                        	incl	%esi
  402eb6: 89 c8                        	movl	%ecx, %eax
  402eb8: 31 d2                        	xorl	%edx, %edx
  402eba: f7 f3                        	divl	%ebx
  402ebc: 85 d2                        	testl	%edx, %edx
  402ebe: 74 ef                        	je	-17 <printf_core+0x13d2>
  402ec0: 48 8b 44 24 38               	movq	56(%rsp), %rax
; 			if ((t|32)=='f')
  402ec5: 89 c2                        	movl	%eax, %edx
  402ec7: 83 ca 20                     	orl	$32, %edx
  402eca: 48 89 f8                     	movq	%rdi, %rax
  402ecd: 4c 29 f0                     	subq	%r14, %rax
  402ed0: 48 c1 f8 02                  	sarq	$2, %rax
  402ed4: 48 8b 5c 24 20               	movq	32(%rsp), %rbx
  402ed9: 48 63 db                     	movslq	%ebx, %rbx
  402edc: 48 8d 04 c0                  	leaq	(%rax,%rax,8), %rax
  402ee0: 48 83 c0 f7                  	addq	$-9, %rax
; 				p = MIN(p,MAX(0,9*(z-r-1)-j));
  402ee4: 89 f1                        	movl	%esi, %ecx
; 			if ((t|32)=='f')
  402ee6: 83 fa 66                     	cmpl	$102, %edx
  402ee9: 74 06                        	je	6 <printf_core+0x1414>
; 				p = MIN(p,MAX(0,9*(z-r-1)+e-j));
  402eeb: 49 63 d2                     	movslq	%r10d, %rdx
  402eee: 48 01 d0                     	addq	%rdx, %rax
  402ef1: 45 31 c0                     	xorl	%r8d, %r8d
  402ef4: 48 29 c8                     	subq	%rcx, %rax
  402ef7: 49 0f 48 c0                  	cmovsq	%r8, %rax
  402efb: 48 39 d8                     	cmpq	%rbx, %rax
  402efe: 0f 4e d8                     	cmovlel	%eax, %ebx
  402f01: 48 89 5c 24 20               	movq	%rbx, 32(%rsp)
  402f06: eb 0b                        	jmp	11 <printf_core+0x1436>
  402f08: 8b 44 24 14                  	movl	20(%rsp), %eax
; 	if (p > INT_MAX-1-(p || (fl&ALT_FORM)))
  402f0c: 41 89 c0                     	movl	%eax, %r8d
  402f0f: 41 83 e0 08                  	andl	$8, %r8d
  402f13: 31 c0                        	xorl	%eax, %eax
  402f15: 48 8b 54 24 20               	movq	32(%rsp), %rdx
  402f1a: 89 d6                        	movl	%edx, %esi
  402f1c: 44 09 c6                     	orl	%r8d, %esi
  402f1f: 0f 95 c0                     	setne	%al
  402f22: b9 fe ff ff 7f               	movl	$2147483646, %ecx
  402f27: 29 c1                        	subl	%eax, %ecx
  402f29: bb ff ff ff ff               	movl	$4294967295, %ebx
  402f2e: 39 ca                        	cmpl	%ecx, %edx
  402f30: 48 8b 4c 24 38               	movq	56(%rsp), %rcx
  402f35: 0f 8f 63 06 00 00            	jg	1635 <printf_core+0x1ac1>
  402f3b: 4c 89 9c 24 88 00 00 00      	movq	%r11, 136(%rsp)
  402f43: b8 01 00 00 00               	movl	$1, %eax
; 	l = 1 + p + (p || (fl&ALT_FORM));
  402f48: 39 c6                        	cmpl	%eax, %esi
  402f4a: 41 89 d3                     	movl	%edx, %r11d
  402f4d: 41 83 db ff                  	sbbl	$-1, %r11d
  402f51: 41 01 c3                     	addl	%eax, %r11d
; 	if ((t|32)=='f') {
  402f54: 89 ca                        	movl	%ecx, %edx
  402f56: 83 ca 20                     	orl	$32, %edx
  402f59: 83 fa 66                     	cmpl	$102, %edx
  402f5c: 75 52                        	jne	82 <printf_core+0x14d3>
; 		if (e > INT_MAX-l) return -1;
  402f5e: b8 ff ff ff 7f               	movl	$2147483647, %eax
  402f63: 44 29 d8                     	subl	%r11d, %eax
  402f66: 41 39 c2                     	cmpl	%eax, %r10d
  402f69: 0f 8f 2f 06 00 00            	jg	1583 <printf_core+0x1ac1>
  402f6f: 89 94 24 a0 00 00 00         	movl	%edx, 160(%rsp)
  402f76: 89 b4 24 98 00 00 00         	movl	%esi, 152(%rsp)
  402f7d: 44 89 8c 24 9c 00 00 00      	movl	%r9d, 156(%rsp)
  402f85: 4c 89 84 24 d0 00 00 00      	movq	%r8, 208(%rsp)
  402f8d: 48 89 bc 24 a8 00 00 00      	movq	%rdi, 168(%rsp)
; 		if (e>0) l+=e;
  402f95: 45 85 d2                     	testl	%r10d, %r10d
  402f98: 45 0f 48 d5                  	cmovsl	%r13d, %r10d
  402f9c: 44 8b 4c 24 44               	movl	68(%rsp), %r9d
  402fa1: 44 8b 44 24 14               	movl	20(%rsp), %r8d
  402fa6: 4c 8b 74 24 30               	movq	48(%rsp), %r14
  402fab: e9 fd 00 00 00               	jmp	253 <printf_core+0x15d0>
  402fb0: 89 94 24 a0 00 00 00         	movl	%edx, 160(%rsp)
  402fb7: 89 b4 24 98 00 00 00         	movl	%esi, 152(%rsp)
  402fbe: 44 89 8c 24 9c 00 00 00      	movl	%r9d, 156(%rsp)
  402fc6: 4c 89 84 24 d0 00 00 00      	movq	%r8, 208(%rsp)
  402fce: 48 89 bc 24 a8 00 00 00      	movq	%rdi, 168(%rsp)
; 		estr=fmt_u(e<0 ? -e : e, ebuf);
  402fd6: 44 89 d0                     	movl	%r10d, %eax
  402fd9: f7 d8                        	negl	%eax
  402fdb: 4d 89 d5                     	movq	%r10, %r13
  402fde: 41 0f 4c c2                  	cmovll	%r10d, %eax
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  402fe2: 85 c0                        	testl	%eax, %eax
  402fe4: 74 58                        	je	88 <printf_core+0x1561>
; 		estr=fmt_u(e<0 ? -e : e, ebuf);
  402fe6: 89 c1                        	movl	%eax, %ecx
  402fe8: 48 8d b4 24 d0 00 00 00      	leaq	208(%rsp), %rsi
  402ff0: 49 89 f2                     	movq	%rsi, %r10
  402ff3: 49 89 f7                     	movq	%rsi, %r15
  402ff6: 44 8b 4c 24 44               	movl	68(%rsp), %r9d
  402ffb: 48 be cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rsi
  403005: 44 8b 44 24 14               	movl	20(%rsp), %r8d
  40300a: 4c 8b 74 24 30               	movq	48(%rsp), %r14
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  40300f: 48 89 c8                     	movq	%rcx, %rax
  403012: 48 f7 e6                     	mulq	%rsi
  403015: 48 c1 ea 03                  	shrq	$3, %rdx
  403019: 8d 04 12                     	leal	(%rdx,%rdx), %eax
  40301c: 8d 04 80                     	leal	(%rax,%rax,4), %eax
  40301f: 89 cf                        	movl	%ecx, %edi
  403021: 29 c7                        	subl	%eax, %edi
  403023: 40 80 cf 30                  	orb	$48, %dil
  403027: 41 88 7f ff                  	movb	%dil, -1(%r15)
  40302b: 49 ff cf                     	decq	%r15
  40302e: 48 83 f9 09                  	cmpq	$9, %rcx
  403032: 48 89 d1                     	movq	%rdx, %rcx
  403035: 77 d8                        	ja	-40 <printf_core+0x1532>
  403037: 48 8b 4c 24 38               	movq	56(%rsp), %rcx
  40303c: eb 1d                        	jmp	29 <printf_core+0x157e>
  40303e: 48 8d b4 24 d0 00 00 00      	leaq	208(%rsp), %rsi
  403046: 49 89 f2                     	movq	%rsi, %r10
; 		while(ebuf-estr<2) *--estr='0';
  403049: 49 89 f7                     	movq	%rsi, %r15
  40304c: 44 8b 4c 24 44               	movl	68(%rsp), %r9d
  403051: 44 8b 44 24 14               	movl	20(%rsp), %r8d
  403056: 4c 8b 74 24 30               	movq	48(%rsp), %r14
  40305b: 4c 89 d0                     	movq	%r10, %rax
  40305e: 4c 29 f8                     	subq	%r15, %rax
  403061: 48 83 f8 01                  	cmpq	$1, %rax
  403065: 7f 19                        	jg	25 <printf_core+0x15a3>
  403067: 49 ff cf                     	decq	%r15
  40306a: 41 c6 07 30                  	movb	$48, (%r15)
  40306e: 4c 89 d0                     	movq	%r10, %rax
  403071: 4c 29 f8                     	subq	%r15, %rax
  403074: 49 ff cf                     	decq	%r15
  403077: 48 83 f8 02                  	cmpq	$2, %rax
  40307b: 7c ed                        	jl	-19 <printf_core+0x158d>
; 		*--estr = (e<0 ? '-' : '+');
  40307d: 49 ff c7                     	incq	%r15
  403080: 41 c1 ed 1f                  	shrl	$31, %r13d
  403084: 45 00 ed                     	addb	%r13b, %r13b
  403087: 41 80 c5 2b                  	addb	$43, %r13b
  40308b: 45 88 6f ff                  	movb	%r13b, -1(%r15)
; 		*--estr = t;
  40308f: 41 88 4f fe                  	movb	%cl, -2(%r15)
  403093: 49 83 c7 fe                  	addq	$-2, %r15
; 		if (ebuf-estr > INT_MAX-l) return -1;
  403097: 4d 29 fa                     	subq	%r15, %r10
  40309a: b8 ff ff ff 7f               	movl	$2147483647, %eax
  40309f: 44 29 d8                     	subl	%r11d, %eax
  4030a2: 48 98                        	cltq
  4030a4: 49 39 c2                     	cmpq	%rax, %r10
  4030a7: 0f 8f f6 04 00 00            	jg	1270 <printf_core+0x1ac6>
  4030ad: 45 01 da                     	addl	%r11d, %r10d
; 	if (l > INT_MAX-pl) return -1;
  4030b0: 44 89 f0                     	movl	%r14d, %eax
  4030b3: 35 ff ff ff 7f               	xorl	$2147483647, %eax
  4030b8: 41 39 c2                     	cmpl	%eax, %r10d
  4030bb: 0f 8f e2 04 00 00            	jg	1250 <printf_core+0x1ac6>
; 	pad(f, ' ', w, pl+l, fl);
  4030c1: 45 01 f2                     	addl	%r14d, %r10d
  4030c4: 4c 89 e7                     	movq	%r12, %rdi
  4030c7: be 20 00 00 00               	movl	$32, %esi
  4030cc: 8b 54 24 10                  	movl	16(%rsp), %edx
  4030d0: 4c 89 54 24 38               	movq	%r10, 56(%rsp)
  4030d5: 44 89 d1                     	movl	%r10d, %ecx
  4030d8: 4c 89 f3                     	movq	%r14, %rbx
  4030db: e8 1b 07 00 00               	callq	1819 <pad>
  4030e0: 48 8b 54 24 18               	movq	24(%rsp), %rdx
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4030e5: f6 02 20                     	testb	$32, (%rdx)
  4030e8: 75 11                        	jne	17 <printf_core+0x161e>
; 	out(f, prefix, pl);
  4030ea: 89 de                        	movl	%ebx, %esi
  4030ec: 48 8b 7c 24 58               	movq	88(%rsp), %rdi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4030f1: e8 02 2b 00 00               	callq	11010 <__fwritex>
  4030f6: 48 8b 54 24 18               	movq	24(%rsp), %rdx
  4030fb: 44 8b 44 24 14               	movl	20(%rsp), %r8d
; 	pad(f, '0', w, pl+l, fl^ZERO_PAD);
  403100: 41 81 f0 00 00 01 00         	xorl	$65536, %r8d
  403107: 48 89 d7                     	movq	%rdx, %rdi
  40310a: be 30 00 00 00               	movl	$48, %esi
  40310f: 8b 54 24 10                  	movl	16(%rsp), %edx
  403113: 48 8b 4c 24 38               	movq	56(%rsp), %rcx
  403118: e8 de 06 00 00               	callq	1758 <pad>
; 	if ((t|32)=='f') {
  40311d: 83 bc 24 a0 00 00 00 66      	cmpl	$102, 160(%rsp)
; 	if ((t|32)=='f') {
  403125: 0f 85 ff 01 00 00            	jne	511 <printf_core+0x184d>
  40312b: 4c 8b 74 24 28               	movq	40(%rsp), %r14
  403130: 4c 8b bc 24 88 00 00 00      	movq	136(%rsp), %r15
; 		if (a>r) a=r;
  403138: 4d 39 f7                     	cmpq	%r14, %r15
  40313b: 4d 0f 47 fe                  	cmovaq	%r14, %r15
  40313f: 4c 89 bc 24 88 00 00 00      	movq	%r15, 136(%rsp)
  403147: 4c 8b 44 24 18               	movq	24(%rsp), %r8
  40314c: 4c 8d 4c 24 69               	leaq	105(%rsp), %r9
  403151: 48 8d 5c 24 60               	leaq	96(%rsp), %rbx
  403156: 49 ba cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %r10
  403160: 4c 8b 5c 24 20               	movq	32(%rsp), %r11
; 			char *s = fmt_u(*d, buf+9);
  403165: 41 8b 0f                     	movl	(%r15), %ecx
  403168: 31 f6                        	xorl	%esi, %esi
  40316a: 48 85 c9                     	testq	%rcx, %rcx
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  40316d: 74 29                        	je	41 <printf_core+0x16bb>
  40316f: 48 89 c8                     	movq	%rcx, %rax
  403172: 49 f7 e2                     	mulq	%r10
  403175: 48 c1 ea 03                  	shrq	$3, %rdx
  403179: 8d 04 12                     	leal	(%rdx,%rdx), %eax
  40317c: 8d 04 80                     	leal	(%rax,%rax,4), %eax
  40317f: 89 cf                        	movl	%ecx, %edi
  403181: 29 c7                        	subl	%eax, %edi
  403183: 40 80 cf 30                  	orb	$48, %dil
  403187: 40 88 7c 34 68               	movb	%dil, 104(%rsp,%rsi)
  40318c: 48 ff ce                     	decq	%rsi
  40318f: 48 83 f9 09                  	cmpq	$9, %rcx
  403193: 48 89 d1                     	movq	%rdx, %rcx
  403196: 77 d7                        	ja	-41 <printf_core+0x1692>
  403198: 49 8d 3c 31                  	leaq	(%r9,%rsi), %rdi
; 			if (d!=a) while (s>buf) *--s='0';
  40319c: 4c 3b bc 24 88 00 00 00      	cmpq	136(%rsp), %r15
  4031a4: 74 16                        	je	22 <printf_core+0x16df>
  4031a6: 48 39 df                     	cmpq	%rbx, %rdi
  4031a9: 76 1d                        	jbe	29 <printf_core+0x16eb>
  4031ab: c6 47 ff 30                  	movb	$48, -1(%rdi)
  4031af: 48 ff cf                     	decq	%rdi
  4031b2: 48 39 df                     	cmpq	%rbx, %rdi
  4031b5: 77 f4                        	ja	-12 <printf_core+0x16ce>
  4031b7: 48 89 df                     	movq	%rbx, %rdi
  4031ba: eb 0c                        	jmp	12 <printf_core+0x16eb>
; 			else if (s==buf+9) *--s='0';
  4031bc: 48 85 f6                     	testq	%rsi, %rsi
  4031bf: 75 07                        	jne	7 <printf_core+0x16eb>
  4031c1: c6 47 ff 30                  	movb	$48, -1(%rdi)
  4031c5: 48 ff cf                     	decq	%rdi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4031c8: 41 f6 00 20                  	testb	$32, (%r8)
  4031cc: 75 31                        	jne	49 <printf_core+0x1722>
; 			out(f, s, buf+9-s);
  4031ce: 4c 89 ce                     	movq	%r9, %rsi
  4031d1: 48 29 fe                     	subq	%rdi, %rsi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4031d4: 4c 89 c2                     	movq	%r8, %rdx
  4031d7: e8 1c 2a 00 00               	callq	10780 <__fwritex>
  4031dc: 4c 8b 74 24 28               	movq	40(%rsp), %r14
  4031e1: 4c 8b 5c 24 20               	movq	32(%rsp), %r11
  4031e6: 49 ba cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %r10
  4031f0: 48 8d 5c 24 60               	leaq	96(%rsp), %rbx
  4031f5: 4c 8d 4c 24 69               	leaq	105(%rsp), %r9
  4031fa: 4c 8b 44 24 18               	movq	24(%rsp), %r8
; 		for (d=a; d<=r; d++) {
  4031ff: 49 83 c7 04                  	addq	$4, %r15
  403203: 4d 39 f7                     	cmpq	%r14, %r15
  403206: 0f 86 59 ff ff ff            	jbe	-167 <printf_core+0x1688>
; 		if (p || (fl&ALT_FORM)) out(f, ".", 1);
  40320c: 83 bc 24 98 00 00 00 00      	cmpl	$0, 152(%rsp)
  403214: 74 36                        	je	54 <printf_core+0x176f>
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  403216: 41 f6 00 20                  	testb	$32, (%r8)
  40321a: 75 30                        	jne	48 <printf_core+0x176f>
  40321c: bf e3 71 40 00               	movl	$4223459, %edi
  403221: be 01 00 00 00               	movl	$1, %esi
  403226: 4c 89 c2                     	movq	%r8, %rdx
  403229: e8 ca 29 00 00               	callq	10698 <__fwritex>
  40322e: 4c 8b 5c 24 20               	movq	32(%rsp), %r11
  403233: 49 ba cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %r10
  40323d: 48 8d 5c 24 60               	leaq	96(%rsp), %rbx
  403242: 4c 8d 4c 24 69               	leaq	105(%rsp), %r9
  403247: 4c 8b 44 24 18               	movq	24(%rsp), %r8
; 		for (; d<z && p>0; d++, p-=9) {
  40324c: 45 85 db                     	testl	%r11d, %r11d
  40324f: 0f 8e 8c 02 00 00            	jle	652 <printf_core+0x1a04>
  403255: 4c 3b bc 24 a8 00 00 00      	cmpq	168(%rsp), %r15
  40325d: 0f 83 7e 02 00 00            	jae	638 <printf_core+0x1a04>
; 			char *s = fmt_u(*d, buf+9);
  403263: 41 8b 0f                     	movl	(%r15), %ecx
  403266: 4c 89 cf                     	movq	%r9, %rdi
  403269: 48 85 c9                     	testq	%rcx, %rcx
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  40326c: 74 2d                        	je	45 <printf_core+0x17be>
  40326e: 4c 89 cf                     	movq	%r9, %rdi
  403271: 48 89 c8                     	movq	%rcx, %rax
  403274: 49 f7 e2                     	mulq	%r10
  403277: 48 c1 ea 03                  	shrq	$3, %rdx
  40327b: 8d 04 12                     	leal	(%rdx,%rdx), %eax
  40327e: 8d 04 80                     	leal	(%rax,%rax,4), %eax
  403281: 89 ce                        	movl	%ecx, %esi
  403283: 29 c6                        	subl	%eax, %esi
  403285: 40 80 ce 30                  	orb	$48, %sil
  403289: 40 88 77 ff                  	movb	%sil, -1(%rdi)
  40328d: 48 ff cf                     	decq	%rdi
  403290: 48 83 f9 09                  	cmpq	$9, %rcx
  403294: 48 89 d1                     	movq	%rdx, %rcx
  403297: 77 d8                        	ja	-40 <printf_core+0x1794>
  403299: eb 07                        	jmp	7 <printf_core+0x17c5>
; 			while (s>buf) *--s='0';
  40329b: c6 47 ff 30                  	movb	$48, -1(%rdi)
  40329f: 48 ff cf                     	decq	%rdi
  4032a2: 48 39 df                     	cmpq	%rbx, %rdi
  4032a5: 77 f4                        	ja	-12 <printf_core+0x17be>
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4032a7: 41 f6 00 20                  	testb	$32, (%r8)
  4032ab: 75 37                        	jne	55 <printf_core+0x1807>
; 			out(f, s, MIN(9,p));
  4032ad: 41 83 fb 0a                  	cmpl	$10, %r11d
  4032b1: b8 09 00 00 00               	movl	$9, %eax
  4032b6: 41 0f 4c c3                  	cmovll	%r11d, %eax
  4032ba: 48 63 f0                     	movslq	%eax, %rsi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4032bd: 4c 89 c2                     	movq	%r8, %rdx
  4032c0: 4c 89 db                     	movq	%r11, %rbx
  4032c3: e8 30 29 00 00               	callq	10544 <__fwritex>
  4032c8: 49 89 db                     	movq	%rbx, %r11
  4032cb: 49 ba cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %r10
  4032d5: 48 8d 5c 24 60               	leaq	96(%rsp), %rbx
  4032da: 4c 8d 4c 24 69               	leaq	105(%rsp), %r9
  4032df: 4c 8b 44 24 18               	movq	24(%rsp), %r8
; 		for (; d<z && p>0; d++, p-=9) {
  4032e4: 41 83 c3 f7                  	addl	$-9, %r11d
  4032e8: 0f 8e f3 01 00 00            	jle	499 <printf_core+0x1a04>
  4032ee: 49 83 c7 04                  	addq	$4, %r15
  4032f2: e9 5e ff ff ff               	jmp	-162 <printf_core+0x1778>
  4032f7: 4d 89 fb                     	movq	%r15, %r11
; 				for (i=10, e=9*(r-a); *a>=i; i*=10, e++);
  4032fa: 4c 89 f0                     	movq	%r14, %rax
  4032fd: 4c 29 d8                     	subq	%r11, %rax
  403300: 48 c1 e8 02                  	shrq	$2, %rax
  403304: 44 8d 14 c0                  	leal	(%rax,%rax,8), %r10d
  403308: 41 8b 03                     	movl	(%r11), %eax
  40330b: 83 f8 0a                     	cmpl	$10, %eax
  40330e: 0f 82 eb fa ff ff            	jb	-1301 <printf_core+0x1322>
  403314: b9 0a 00 00 00               	movl	$10, %ecx
  403319: 01 c9                        	addl	%ecx, %ecx
  40331b: 8d 0c 89                     	leal	(%rcx,%rcx,4), %ecx
  40331e: 41 ff c2                     	incl	%r10d
  403321: 39 c8                        	cmpl	%ecx, %eax
  403323: 73 f4                        	jae	-12 <printf_core+0x183c>
  403325: e9 d5 fa ff ff               	jmp	-1323 <printf_core+0x1322>
  40332a: 48 8b 84 24 88 00 00 00      	movq	136(%rsp), %rax
; 		if (z<=a) z=a+1;
  403332: 48 8d 48 04                  	leaq	4(%rax), %rcx
  403336: 80 bc 24 9c 00 00 00 00      	cmpb	$0, 156(%rsp)
  40333e: 48 0f 45 8c 24 a8 00 00 00   	cmovneq	168(%rsp), %rcx
  403347: 48 89 4c 24 28               	movq	%rcx, 40(%rsp)
  40334c: 4c 8b 74 24 20               	movq	32(%rsp), %r14
; 		for (d=a; d<z && p>=0; d++) {
  403351: 45 85 f6                     	testl	%r14d, %r14d
  403354: 4c 8d 4c 24 69               	leaq	105(%rsp), %r9
  403359: 4c 8d 54 24 60               	leaq	96(%rsp), %r10
  40335e: 49 bb cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %r11
  403368: 0f 88 b9 01 00 00            	js	441 <printf_core+0x1a4a>
  40336e: 49 89 c4                     	movq	%rax, %r12
  403371: 4c 8b 44 24 18               	movq	24(%rsp), %r8
; 			char *s = fmt_u(*d, buf+9);
  403376: 41 8b 0c 24                  	movl	(%r12), %ecx
  40337a: 4c 89 cb                     	movq	%r9, %rbx
  40337d: 48 85 c9                     	testq	%rcx, %rcx
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  403380: 74 35                        	je	53 <printf_core+0x18da>
  403382: 31 f6                        	xorl	%esi, %esi
  403384: 4c 89 cb                     	movq	%r9, %rbx
  403387: 48 89 c8                     	movq	%rcx, %rax
  40338a: 49 f7 e3                     	mulq	%r11
  40338d: 48 c1 ea 03                  	shrq	$3, %rdx
  403391: 8d 04 12                     	leal	(%rdx,%rdx), %eax
  403394: 8d 04 80                     	leal	(%rax,%rax,4), %eax
  403397: 89 cf                        	movl	%ecx, %edi
  403399: 29 c7                        	subl	%eax, %edi
  40339b: 40 80 cf 30                  	orb	$48, %dil
  40339f: 40 88 7b ff                  	movb	%dil, -1(%rbx)
  4033a3: 48 ff cb                     	decq	%rbx
  4033a6: 48 ff c6                     	incq	%rsi
  4033a9: 48 83 f9 09                  	cmpq	$9, %rcx
  4033ad: 48 89 d1                     	movq	%rdx, %rcx
  4033b0: 77 d5                        	ja	-43 <printf_core+0x18aa>
; 			if (s==buf+9) *--s='0';
  4033b2: 48 85 f6                     	testq	%rsi, %rsi
  4033b5: 75 07                        	jne	7 <printf_core+0x18e1>
  4033b7: c6 43 ff 30                  	movb	$48, -1(%rbx)
  4033bb: 48 ff cb                     	decq	%rbx
; 			if (d!=a) while (s>buf) *--s='0';
  4033be: 4c 3b a4 24 88 00 00 00      	cmpq	136(%rsp), %r12
  4033c6: 74 12                        	je	18 <printf_core+0x18fd>
  4033c8: 4c 39 d3                     	cmpq	%r10, %rbx
  4033cb: 0f 86 a3 00 00 00            	jbe	163 <printf_core+0x1997>
  4033d1: c6 43 ff 30                  	movb	$48, -1(%rbx)
  4033d5: 48 ff cb                     	decq	%rbx
  4033d8: eb ee                        	jmp	-18 <printf_core+0x18eb>
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4033da: 41 f6 00 20                  	testb	$32, (%r8)
  4033de: 75 3d                        	jne	61 <printf_core+0x1940>
  4033e0: be 01 00 00 00               	movl	$1, %esi
  4033e5: 48 89 df                     	movq	%rbx, %rdi
  4033e8: 4c 89 c2                     	movq	%r8, %rdx
  4033eb: 4c 89 74 24 20               	movq	%r14, 32(%rsp)
  4033f0: 4c 89 64 24 30               	movq	%r12, 48(%rsp)
  4033f5: e8 fe 27 00 00               	callq	10238 <__fwritex>
  4033fa: 4c 8b 64 24 30               	movq	48(%rsp), %r12
  4033ff: 4c 8b 74 24 20               	movq	32(%rsp), %r14
  403404: 49 bb cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %r11
  40340e: 4c 8d 54 24 60               	leaq	96(%rsp), %r10
  403413: 4c 8d 4c 24 69               	leaq	105(%rsp), %r9
  403418: 4c 8b 44 24 18               	movq	24(%rsp), %r8
  40341d: 48 ff c3                     	incq	%rbx
  403420: 83 bc 24 d0 00 00 00 00      	cmpl	$0, 208(%rsp)
; 				if (p>0||(fl&ALT_FORM)) out(f, ".", 1);
  403428: 75 05                        	jne	5 <printf_core+0x1952>
  40342a: 45 85 f6                     	testl	%r14d, %r14d
  40342d: 7e 45                        	jle	69 <printf_core+0x1997>
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  40342f: 41 f6 00 20                  	testb	$32, (%r8)
  403433: 75 3f                        	jne	63 <printf_core+0x1997>
  403435: bf e3 71 40 00               	movl	$4223459, %edi
  40343a: be 01 00 00 00               	movl	$1, %esi
  40343f: 4c 89 c2                     	movq	%r8, %rdx
  403442: 4c 89 74 24 20               	movq	%r14, 32(%rsp)
  403447: 4c 89 64 24 30               	movq	%r12, 48(%rsp)
  40344c: e8 a7 27 00 00               	callq	10151 <__fwritex>
  403451: 4c 8b 64 24 30               	movq	48(%rsp), %r12
  403456: 4c 8b 74 24 20               	movq	32(%rsp), %r14
  40345b: 49 bb cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %r11
  403465: 4c 8d 54 24 60               	leaq	96(%rsp), %r10
  40346a: 4c 8d 4c 24 69               	leaq	105(%rsp), %r9
  40346f: 4c 8b 44 24 18               	movq	24(%rsp), %r8
; 			out(f, s, MIN(buf+9-s, p));
  403474: 4c 89 c8                     	movq	%r9, %rax
  403477: 48 29 d8                     	subq	%rbx, %rax
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  40347a: 41 f6 00 20                  	testb	$32, (%r8)
  40347e: 75 48                        	jne	72 <printf_core+0x19eb>
; 			out(f, s, MIN(buf+9-s, p));
  403480: 49 63 f6                     	movslq	%r14d, %rsi
  403483: 48 39 f0                     	cmpq	%rsi, %rax
  403486: 48 0f 4e f0                  	cmovleq	%rax, %rsi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  40348a: 48 89 df                     	movq	%rbx, %rdi
  40348d: 4c 89 c2                     	movq	%r8, %rdx
  403490: 4c 89 74 24 20               	movq	%r14, 32(%rsp)
  403495: 4c 89 e3                     	movq	%r12, %rbx
  403498: 48 89 44 24 30               	movq	%rax, 48(%rsp)
  40349d: e8 56 27 00 00               	callq	10070 <__fwritex>
  4034a2: 48 8b 44 24 30               	movq	48(%rsp), %rax
  4034a7: 49 89 dc                     	movq	%rbx, %r12
  4034aa: 4c 8b 74 24 20               	movq	32(%rsp), %r14
  4034af: 49 bb cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %r11
  4034b9: 4c 8d 54 24 60               	leaq	96(%rsp), %r10
  4034be: 4c 8d 4c 24 69               	leaq	105(%rsp), %r9
  4034c3: 4c 8b 44 24 18               	movq	24(%rsp), %r8
; 			p -= buf+9-s;
  4034c8: 41 29 c6                     	subl	%eax, %r14d
; 		for (d=a; d<z && p>=0; d++) {
  4034cb: 49 83 c4 04                  	addq	$4, %r12
  4034cf: 4c 3b 64 24 28               	cmpq	40(%rsp), %r12
  4034d4: 73 56                        	jae	86 <printf_core+0x1a4f>
  4034d6: 45 85 f6                     	testl	%r14d, %r14d
  4034d9: 0f 89 97 fe ff ff            	jns	-361 <printf_core+0x1899>
  4034df: eb 4b                        	jmp	75 <printf_core+0x1a4f>
; 		pad(f, '0', p+9, 9, 0);
  4034e1: 41 83 c3 09                  	addl	$9, %r11d
  4034e5: 4c 89 c7                     	movq	%r8, %rdi
  4034e8: be 30 00 00 00               	movl	$48, %esi
  4034ed: 44 89 da                     	movl	%r11d, %edx
  4034f0: b9 09 00 00 00               	movl	$9, %ecx
  4034f5: 45 31 c0                     	xorl	%r8d, %r8d
  4034f8: e8 fe 02 00 00               	callq	766 <pad>
  4034fd: eb 66                        	jmp	102 <printf_core+0x1a88>
; 			case BARE: *(int *)arg.p = cnt; break;
  4034ff: 48 8b 44 24 48               	movq	72(%rsp), %rax
  403504: 44 89 08                     	movl	%r9d, (%rax)
  403507: e9 1d e6 ff ff               	jmp	-6627 <printf_core+0x4c>
; 			case HPRE: *(unsigned short *)arg.p = cnt; break;
  40350c: 48 8b 44 24 48               	movq	72(%rsp), %rax
  403511: 66 44 89 08                  	movw	%r9w, (%rax)
  403515: e9 0f e6 ff ff               	jmp	-6641 <printf_core+0x4c>
; 			case HHPRE: *(unsigned char *)arg.p = cnt; break;
  40351a: 48 8b 44 24 48               	movq	72(%rsp), %rax
  40351f: 44 88 08                     	movb	%r9b, (%rax)
  403522: e9 02 e6 ff ff               	jmp	-6654 <printf_core+0x4c>
  403527: 4c 8b 44 24 18               	movq	24(%rsp), %r8
; 		pad(f, '0', p+18, 18, 0);
  40352c: 41 83 c6 12                  	addl	$18, %r14d
  403530: 4c 89 c7                     	movq	%r8, %rdi
  403533: be 30 00 00 00               	movl	$48, %esi
  403538: 44 89 f2                     	movl	%r14d, %edx
  40353b: b9 12 00 00 00               	movl	$18, %ecx
  403540: 45 31 c0                     	xorl	%r8d, %r8d
  403543: e8 b3 02 00 00               	callq	691 <pad>
  403548: 48 8b 54 24 18               	movq	24(%rsp), %rdx
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  40354d: f6 02 20                     	testb	$32, (%rdx)
  403550: 75 18                        	jne	24 <printf_core+0x1a8d>
; 		out(f, estr, ebuf-estr);
  403552: 48 8d b4 24 d0 00 00 00      	leaq	208(%rsp), %rsi
  40355a: 4c 29 fe                     	subq	%r15, %rsi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  40355d: 4c 89 ff                     	movq	%r15, %rdi
  403560: e8 93 26 00 00               	callq	9875 <__fwritex>
  403565: 48 8b 54 24 18               	movq	24(%rsp), %rdx
  40356a: 44 8b 44 24 14               	movl	20(%rsp), %r8d
; 	pad(f, ' ', w, pl+l, fl^LEFT_ADJ);
  40356f: 41 81 f0 00 20 00 00         	xorl	$8192, %r8d
  403576: 48 89 d7                     	movq	%rdx, %rdi
  403579: be 20 00 00 00               	movl	$32, %esi
  40357e: 44 8b 7c 24 10               	movl	16(%rsp), %r15d
  403583: 44 89 fa                     	movl	%r15d, %edx
  403586: 48 8b 5c 24 38               	movq	56(%rsp), %rbx
  40358b: 89 d9                        	movl	%ebx, %ecx
  40358d: e8 69 02 00 00               	callq	617 <pad>
  403592: 4c 8b 64 24 18               	movq	24(%rsp), %r12
  403597: 44 39 fb                     	cmpl	%r15d, %ebx
  40359a: 41 0f 4c df                  	cmovll	%r15d, %ebx
  40359e: 44 8b 4c 24 44               	movl	68(%rsp), %r9d
; 			if (l<0) goto overflow;
  4035a3: 85 db                        	testl	%ebx, %ebx
  4035a5: 0f 89 7e e5 ff ff            	jns	-6786 <printf_core+0x4c>
; 	errno = EOVERFLOW;
  4035ab: e8 4c 09 00 00               	callq	2380 <__errno_location>
  4035b0: c7 00 4b 00 00 00            	movl	$75, (%rax)
  4035b6: e9 8d 00 00 00               	jmp	141 <printf_core+0x1b6b>
; 	if (f) return cnt;
  4035bb: 4d 85 e4                     	testq	%r12, %r12
  4035be: 4c 8b bc 24 b8 00 00 00      	movq	184(%rsp), %r15
  4035c6: 0f 85 82 00 00 00            	jne	130 <printf_core+0x1b71>
; 	if (!l10n) return 0;
  4035cc: 83 7c 24 54 00               	cmpl	$0, 84(%rsp)
  4035d1: 74 40                        	je	64 <printf_core+0x1b36>
  4035d3: 48 8b ac 24 b0 00 00 00      	movq	176(%rsp), %rbp
; 	for (i=1; i<=NL_ARGMAX && nl_type[i]; i++)
  4035db: 48 83 c5 08                  	addq	$8, %rbp
  4035df: bb 01 00 00 00               	movl	$1, %ebx
  4035e4: 48 8b 84 24 90 00 00 00      	movq	144(%rsp), %rax
  4035ec: 8b 34 98                     	movl	(%rax,%rbx,4), %esi
  4035ef: 85 f6                        	testl	%esi, %esi
  4035f1: 74 25                        	je	37 <printf_core+0x1b3b>
; 		pop_arg(nl_arg+i, nl_type[i], ap);
  4035f3: 48 89 ef                     	movq	%rbp, %rdi
  4035f6: 4c 89 fa                     	movq	%r15, %rdx
  4035f9: e8 5f 00 00 00               	callq	95 <pop_arg>
; 	for (i=1; i<=NL_ARGMAX && nl_type[i]; i++)
  4035fe: 48 ff c3                     	incq	%rbx
  403601: 48 83 c5 08                  	addq	$8, %rbp
  403605: 48 83 fb 0a                  	cmpq	$10, %rbx
  403609: 75 d9                        	jne	-39 <printf_core+0x1b07>
  40360b: 41 b9 01 00 00 00            	movl	$1, %r9d
  403611: eb 3b                        	jmp	59 <printf_core+0x1b71>
  403613: 45 31 c9                     	xorl	%r9d, %r9d
  403616: eb 36                        	jmp	54 <printf_core+0x1b71>
  403618: 41 b9 01 00 00 00            	movl	$1, %r9d
; 	for (; i<=NL_ARGMAX && !nl_type[i]; i++);
  40361e: 48 83 fb 09                  	cmpq	$9, %rbx
  403622: 77 2a                        	ja	42 <printf_core+0x1b71>
  403624: 48 8b 84 24 90 00 00 00      	movq	144(%rsp), %rax
  40362c: 83 3c 98 00                  	cmpl	$0, (%rax,%rbx,4)
  403630: 75 0b                        	jne	11 <printf_core+0x1b60>
  403632: 48 ff c3                     	incq	%rbx
  403635: 48 83 fb 0a                  	cmpq	$10, %rbx
  403639: 75 f1                        	jne	-15 <printf_core+0x1b4f>
  40363b: eb 11                        	jmp	17 <printf_core+0x1b71>
; 	errno = EINVAL;
  40363d: e8 ba 08 00 00               	callq	2234 <__errno_location>
  403642: c7 00 16 00 00 00            	movl	$22, (%rax)
  403648: 41 b9 ff ff ff ff            	movl	$4294967295, %r9d
; }
  40364e: 44 89 c8                     	movl	%r9d, %eax
  403651: 48 81 c4 e0 1d 00 00         	addq	$7648, %rsp
  403658: 5b                           	popq	%rbx
  403659: 41 5f                        	popq	%r15
  40365b: 5d                           	popq	%rbp
  40365c: c3                           	retq

000000000040365d pop_arg:
; 	switch (type) {
  40365d: 83 c6 f7                     	addl	$-9, %esi
  403660: 83 fe 11                     	cmpl	$17, %esi
  403663: 77 50                        	ja	80 <pop_arg+0x58>
  403665: ff 24 f5 40 6f 40 00         	jmpq	*4222784(,%rsi,8)
  40366c: 48 63 0a                     	movslq	(%rdx), %rcx
  40366f: 48 83 f9 28                  	cmpq	$40, %rcx
  403673: 77 2a                        	ja	42 <pop_arg+0x42>
  403675: 48 89 c8                     	movq	%rcx, %rax
  403678: 48 03 42 10                  	addq	16(%rdx), %rax
  40367c: 83 c1 08                     	addl	$8, %ecx
  40367f: 89 0a                        	movl	%ecx, (%rdx)
  403681: eb 2c                        	jmp	44 <pop_arg+0x52>
  403683: 48 63 4a 04                  	movslq	4(%rdx), %rcx
  403687: 48 81 f9 a0 00 00 00         	cmpq	$160, %rcx
  40368e: 77 0f                        	ja	15 <pop_arg+0x42>
  403690: 48 89 c8                     	movq	%rcx, %rax
  403693: 48 03 42 10                  	addq	16(%rdx), %rax
  403697: 83 c1 10                     	addl	$16, %ecx
  40369a: 89 4a 04                     	movl	%ecx, 4(%rdx)
  40369d: eb 10                        	jmp	16 <pop_arg+0x52>
  40369f: 48 8b 42 08                  	movq	8(%rdx), %rax
  4036a3: b9 08 00 00 00               	movl	$8, %ecx
  4036a8: 48 01 c1                     	addq	%rax, %rcx
  4036ab: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  4036af: 48 8b 00                     	movq	(%rax), %rax
  4036b2: 48 89 07                     	movq	%rax, (%rdi)
; }
  4036b5: c3                           	retq
; 	break; case UINT:	arg->i = va_arg(*ap, unsigned int);
  4036b6: 48 63 0a                     	movslq	(%rdx), %rcx
  4036b9: 48 83 f9 28                  	cmpq	$40, %rcx
  4036bd: 0f 87 a7 00 00 00            	ja	167 <pop_arg+0x10d>
  4036c3: 48 89 c8                     	movq	%rcx, %rax
  4036c6: 48 03 42 10                  	addq	16(%rdx), %rax
  4036ca: 83 c1 08                     	addl	$8, %ecx
  4036cd: 89 0a                        	movl	%ecx, (%rdx)
  4036cf: e9 a6 00 00 00               	jmp	166 <pop_arg+0x11d>
; 	break; case SHORT:	arg->i = (short)va_arg(*ap, int);
  4036d4: 48 63 0a                     	movslq	(%rdx), %rcx
  4036d7: 48 83 f9 28                  	cmpq	$40, %rcx
  4036db: 0f 87 a0 00 00 00            	ja	160 <pop_arg+0x124>
  4036e1: 48 89 c8                     	movq	%rcx, %rax
  4036e4: 48 03 42 10                  	addq	16(%rdx), %rax
  4036e8: 83 c1 08                     	addl	$8, %ecx
  4036eb: 89 0a                        	movl	%ecx, (%rdx)
  4036ed: e9 9f 00 00 00               	jmp	159 <pop_arg+0x134>
; 	break; case USHORT:	arg->i = (unsigned short)va_arg(*ap, int);
  4036f2: 48 63 0a                     	movslq	(%rdx), %rcx
  4036f5: 48 83 f9 28                  	cmpq	$40, %rcx
  4036f9: 0f 87 9b 00 00 00            	ja	155 <pop_arg+0x13d>
  4036ff: 48 89 c8                     	movq	%rcx, %rax
  403702: 48 03 42 10                  	addq	16(%rdx), %rax
  403706: 83 c1 08                     	addl	$8, %ecx
  403709: 89 0a                        	movl	%ecx, (%rdx)
  40370b: e9 9a 00 00 00               	jmp	154 <pop_arg+0x14d>
; 	break; case CHAR:	arg->i = (signed char)va_arg(*ap, int);
  403710: 48 63 0a                     	movslq	(%rdx), %rcx
  403713: 48 83 f9 28                  	cmpq	$40, %rcx
  403717: 0f 87 95 00 00 00            	ja	149 <pop_arg+0x155>
  40371d: 48 89 c8                     	movq	%rcx, %rax
  403720: 48 03 42 10                  	addq	16(%rdx), %rax
  403724: 83 c1 08                     	addl	$8, %ecx
  403727: 89 0a                        	movl	%ecx, (%rdx)
  403729: e9 94 00 00 00               	jmp	148 <pop_arg+0x165>
; 	break; case UCHAR:	arg->i = (unsigned char)va_arg(*ap, int);
  40372e: 48 63 0a                     	movslq	(%rdx), %rcx
  403731: 48 83 f9 28                  	cmpq	$40, %rcx
  403735: 0f 87 90 00 00 00            	ja	144 <pop_arg+0x16e>
  40373b: 48 89 c8                     	movq	%rcx, %rax
  40373e: 48 03 42 10                  	addq	16(%rdx), %rax
  403742: 83 c1 08                     	addl	$8, %ecx
  403745: 89 0a                        	movl	%ecx, (%rdx)
  403747: e9 8f 00 00 00               	jmp	143 <pop_arg+0x17e>
; 	break; case INT:	arg->i = va_arg(*ap, int);
  40374c: 48 63 0a                     	movslq	(%rdx), %rcx
  40374f: 48 83 f9 28                  	cmpq	$40, %rcx
  403753: 0f 87 8a 00 00 00            	ja	138 <pop_arg+0x186>
  403759: 48 89 c8                     	movq	%rcx, %rax
  40375c: 48 03 42 10                  	addq	16(%rdx), %rax
  403760: 83 c1 08                     	addl	$8, %ecx
  403763: 89 0a                        	movl	%ecx, (%rdx)
  403765: e9 89 00 00 00               	jmp	137 <pop_arg+0x196>
; 	break; case UINT:	arg->i = va_arg(*ap, unsigned int);
  40376a: 48 8b 42 08                  	movq	8(%rdx), %rax
  40376e: b9 08 00 00 00               	movl	$8, %ecx
  403773: 48 01 c1                     	addq	%rax, %rcx
  403776: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  40377a: 8b 00                        	movl	(%rax), %eax
  40377c: e9 31 ff ff ff               	jmp	-207 <pop_arg+0x55>
; 	break; case SHORT:	arg->i = (short)va_arg(*ap, int);
  403781: 48 8b 42 08                  	movq	8(%rdx), %rax
  403785: b9 08 00 00 00               	movl	$8, %ecx
  40378a: 48 01 c1                     	addq	%rax, %rcx
  40378d: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  403791: 48 0f bf 00                  	movswq	(%rax), %rax
  403795: e9 18 ff ff ff               	jmp	-232 <pop_arg+0x55>
; 	break; case USHORT:	arg->i = (unsigned short)va_arg(*ap, int);
  40379a: 48 8b 42 08                  	movq	8(%rdx), %rax
  40379e: b9 08 00 00 00               	movl	$8, %ecx
  4037a3: 48 01 c1                     	addq	%rax, %rcx
  4037a6: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  4037aa: 0f b7 00                     	movzwl	(%rax), %eax
  4037ad: e9 00 ff ff ff               	jmp	-256 <pop_arg+0x55>
; 	break; case CHAR:	arg->i = (signed char)va_arg(*ap, int);
  4037b2: 48 8b 42 08                  	movq	8(%rdx), %rax
  4037b6: b9 08 00 00 00               	movl	$8, %ecx
  4037bb: 48 01 c1                     	addq	%rax, %rcx
  4037be: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  4037c2: 48 0f be 00                  	movsbq	(%rax), %rax
  4037c6: e9 e7 fe ff ff               	jmp	-281 <pop_arg+0x55>
; 	break; case UCHAR:	arg->i = (unsigned char)va_arg(*ap, int);
  4037cb: 48 8b 42 08                  	movq	8(%rdx), %rax
  4037cf: b9 08 00 00 00               	movl	$8, %ecx
  4037d4: 48 01 c1                     	addq	%rax, %rcx
  4037d7: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  4037db: 0f b6 00                     	movzbl	(%rax), %eax
  4037de: e9 cf fe ff ff               	jmp	-305 <pop_arg+0x55>
; 	break; case INT:	arg->i = va_arg(*ap, int);
  4037e3: 48 8b 42 08                  	movq	8(%rdx), %rax
  4037e7: b9 08 00 00 00               	movl	$8, %ecx
  4037ec: 48 01 c1                     	addq	%rax, %rcx
  4037ef: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  4037f3: 48 63 00                     	movslq	(%rax), %rax
  4037f6: e9 b7 fe ff ff               	jmp	-329 <pop_arg+0x55>

00000000004037fb pad:
; {
  4037fb: 55                           	pushq	%rbp
  4037fc: 41 57                        	pushq	%r15
  4037fe: 53                           	pushq	%rbx
  4037ff: 48 81 ec 10 01 00 00         	subq	$272, %rsp
; 	if (fl & (LEFT_ADJ | ZERO_PAD) || l >= w) return;
  403806: 41 89 d7                     	movl	%edx, %r15d
  403809: 41 29 cf                     	subl	%ecx, %r15d
  40380c: 0f 8e 9f 00 00 00            	jle	159 <pad+0xb6>
  403812: 41 81 e0 00 20 01 00         	andl	$73728, %r8d
  403819: 0f 85 92 00 00 00            	jne	146 <pad+0xb6>
  40381f: 48 89 fb                     	movq	%rdi, %rbx
  403822: 89 4c 24 0c                  	movl	%ecx, 12(%rsp)
  403826: 89 54 24 08                  	movl	%edx, 8(%rsp)
; 	memset(pad, c, l>sizeof pad ? sizeof pad : l);
  40382a: 40 0f be f6                  	movsbl	%sil, %esi
  40382e: 49 63 ef                     	movslq	%r15d, %rbp
  403831: ba 00 01 00 00               	movl	$256, %edx
  403836: 48 39 d5                     	cmpq	%rdx, %rbp
  403839: 48 0f 42 d5                  	cmovbq	%rbp, %rdx
  40383d: 48 8d 7c 24 10               	leaq	16(%rsp), %rdi
  403842: e8 55 02 00 00               	callq	597 <memset>
  403847: 8b 03                        	movl	(%rbx), %eax
  403849: a8 20                        	testb	$32, %al
  40384b: 0f 94 c1                     	sete	%cl
; 	for (; l >= sizeof pad; l -= sizeof pad)
  40384e: 81 fd 00 01 00 00            	cmpl	$256, %ebp
  403854: 72 47                        	jb	71 <pad+0xa2>
  403856: 8b 54 24 0c                  	movl	12(%rsp), %edx
  40385a: 29 54 24 08                  	subl	%edx, 8(%rsp)
  40385e: 48 8d 6c 24 10               	leaq	16(%rsp), %rbp
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  403863: f6 c1 01                     	testb	$1, %cl
  403866: 74 12                        	je	18 <pad+0x7f>
  403868: be 00 01 00 00               	movl	$256, %esi
  40386d: 48 89 ef                     	movq	%rbp, %rdi
  403870: 48 89 da                     	movq	%rbx, %rdx
  403873: e8 80 23 00 00               	callq	9088 <__fwritex>
  403878: 8b 03                        	movl	(%rbx), %eax
; 	for (; l >= sizeof pad; l -= sizeof pad)
  40387a: 41 81 c7 00 ff ff ff         	addl	$4294967040, %r15d
  403881: a8 20                        	testb	$32, %al
  403883: 0f 94 c1                     	sete	%cl
  403886: 41 81 ff ff 00 00 00         	cmpl	$255, %r15d
  40388d: 77 d4                        	ja	-44 <pad+0x68>
  40388f: a8 20                        	testb	$32, %al
  403891: 8b 44 24 08                  	movl	8(%rsp), %eax
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  403895: 75 1a                        	jne	26 <pad+0xb6>
  403897: 44 0f b6 f8                  	movzbl	%al, %r15d
  40389b: eb 04                        	jmp	4 <pad+0xa6>
  40389d: a8 20                        	testb	$32, %al
  40389f: 75 10                        	jne	16 <pad+0xb6>
; 	for (; l >= sizeof pad; l -= sizeof pad)
  4038a1: 49 63 f7                     	movslq	%r15d, %rsi
  4038a4: 48 8d 7c 24 10               	leaq	16(%rsp), %rdi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4038a9: 48 89 da                     	movq	%rbx, %rdx
  4038ac: e8 47 23 00 00               	callq	9031 <__fwritex>
; }
  4038b1: 48 81 c4 10 01 00 00         	addq	$272, %rsp
  4038b8: 5b                           	popq	%rbx
  4038b9: 41 5f                        	popq	%r15
  4038bb: 5d                           	popq	%rbp
  4038bc: c3                           	retq
  4038bd: 0f 1f 00                     	nopl	(%rax)
  4038c0: 0f 1f 84 00 00 00 00 00      	nopl	(%rax,%rax)
		...

00000000004038d0 strchr:
; {
  4038d0: 53                           	pushq	%rbx
  4038d1: 89 f3                        	movl	%esi, %ebx
; 	char *r = __strchrnul(s, c);
  4038d3: e8 18 00 00 00               	callq	24 <strchrnul>
  4038d8: 31 c9                        	xorl	%ecx, %ecx
; 	return *(unsigned char *)r == (unsigned char)c ? r : 0;
  4038da: 38 18                        	cmpb	%bl, (%rax)
  4038dc: 48 0f 45 c1                  	cmovneq	%rcx, %rax
  4038e0: 5b                           	popq	%rbx
  4038e1: c3                           	retq
  4038e2: 66 90                        	nop
  4038e4: 66 66 66 2e 0f 1f 84 00 00 00 00 00  	nopw	%cs:(%rax,%rax)

00000000004038f0 strchrnul:
; {
  4038f0: 53                           	pushq	%rbx
  4038f1: 48 89 fb                     	movq	%rdi, %rbx
; 	if (!c) return (char *)s + strlen(s);
  4038f4: 89 f2                        	movl	%esi, %edx
  4038f6: 81 e2 ff 00 00 00            	andl	$255, %edx
  4038fc: 0f 84 c4 00 00 00            	je	196 <strchrnul+0xd6>
  403902: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40390c: 0f 1f 40 00                  	nopl	(%rax)
; 	for (; (uintptr_t)s % ALIGN; s++)
  403910: f6 c3 07                     	testb	$7, %bl
  403913: 74 1d                        	je	29 <strchrnul+0x42>
; 		if (!*s || *(unsigned char *)s == c) return (char *)s;
  403915: 0f b6 03                     	movzbl	(%rbx), %eax
  403918: 84 c0                        	testb	%al, %al
  40391a: 0f 84 a1 00 00 00            	je	161 <strchrnul+0xd1>
  403920: 40 38 f0                     	cmpb	%sil, %al
  403923: 0f 84 98 00 00 00            	je	152 <strchrnul+0xd1>
; 	for (; (uintptr_t)s % ALIGN; s++)
  403929: 48 83 c3 01                  	addq	$1, %rbx
  40392d: f6 c3 07                     	testb	$7, %bl
  403930: 75 e3                        	jne	-29 <strchrnul+0x25>
  403932: 49 b8 ff fe fe fe fe fe fe fe	movabsq	$-72340172838076673, %r8
  40393c: 49 b9 80 80 80 80 80 80 80 80	movabsq	$-9187201950435737472, %r9
; 	for (w = (void *)s; !HASZERO(*w) && !HASZERO(*w^k); w++);
  403946: 48 8b 3b                     	movq	(%rbx), %rdi
  403949: 48 89 f8                     	movq	%rdi, %rax
  40394c: 48 f7 d0                     	notq	%rax
  40394f: 4a 8d 0c 07                  	leaq	(%rdi,%r8), %rcx
  403953: 48 21 c1                     	andq	%rax, %rcx
  403956: 4c 85 c9                     	testq	%r9, %rcx
  403959: 75 43                        	jne	67 <strchrnul+0xae>
  40395b: 89 d0                        	movl	%edx, %eax
  40395d: 48 ba 01 01 01 01 01 01 01 01	movabsq	$72340172838076673, %rdx
  403967: 48 0f af d0                  	imulq	%rax, %rdx
  40396b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
  403970: 48 31 d7                     	xorq	%rdx, %rdi
  403973: 48 89 f8                     	movq	%rdi, %rax
  403976: 48 f7 d0                     	notq	%rax
  403979: 4c 01 c7                     	addq	%r8, %rdi
  40397c: 4c 21 c8                     	andq	%r9, %rax
  40397f: 48 85 f8                     	testq	%rdi, %rax
  403982: 75 1a                        	jne	26 <strchrnul+0xae>
  403984: 48 8b 7b 08                  	movq	8(%rbx), %rdi
  403988: 48 83 c3 08                  	addq	$8, %rbx
  40398c: 48 89 f8                     	movq	%rdi, %rax
  40398f: 48 f7 d0                     	notq	%rax
  403992: 4a 8d 0c 07                  	leaq	(%rdi,%r8), %rcx
  403996: 4c 21 c8                     	andq	%r9, %rax
  403999: 48 85 c8                     	testq	%rcx, %rax
  40399c: 74 d2                        	je	-46 <strchrnul+0x80>
; 	for (; *s && *(unsigned char *)s != c; s++);
  40399e: 48 83 c3 ff                  	addq	$-1, %rbx
  4039a2: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  4039ac: 0f 1f 40 00                  	nopl	(%rax)
  4039b0: 0f b6 43 01                  	movzbl	1(%rbx), %eax
  4039b4: 48 83 c3 01                  	addq	$1, %rbx
  4039b8: 84 c0                        	testb	%al, %al
  4039ba: 74 05                        	je	5 <strchrnul+0xd1>
  4039bc: 40 38 f0                     	cmpb	%sil, %al
  4039bf: 75 ef                        	jne	-17 <strchrnul+0xc0>
; }
  4039c1: 48 89 d8                     	movq	%rbx, %rax
  4039c4: 5b                           	popq	%rbx
  4039c5: c3                           	retq
; 	if (!c) return (char *)s + strlen(s);
  4039c6: 48 89 df                     	movq	%rbx, %rdi
  4039c9: e8 12 00 00 00               	callq	18 <strlen>
  4039ce: 48 01 c3                     	addq	%rax, %rbx
; }
  4039d1: 48 89 d8                     	movq	%rbx, %rax
  4039d4: 5b                           	popq	%rbx
  4039d5: c3                           	retq
  4039d6: 66 90                        	nop
  4039d8: 0f 1f 84 00 00 00 00 00      	nopl	(%rax,%rax)

00000000004039e0 strlen:
; {
  4039e0: 48 89 f8                     	movq	%rdi, %rax
; 	for (; (uintptr_t)s % ALIGN; s++) if (!*s) return s-a;
  4039e3: 40 f6 c7 07                  	testb	$7, %dil
  4039e7: 74 2c                        	je	44 <strlen+0x35>
  4039e9: 80 3f 00                     	cmpb	$0, (%rdi)
  4039ec: 74 70                        	je	112 <strlen+0x7e>
  4039ee: 48 8d 47 01                  	leaq	1(%rdi), %rax
  4039f2: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  4039fc: 0f 1f 40 00                  	nopl	(%rax)
  403a00: a8 07                        	testb	$7, %al
  403a02: 74 11                        	je	17 <strlen+0x35>
  403a04: 80 38 00                     	cmpb	$0, (%rax)
  403a07: 48 8d 40 01                  	leaq	1(%rax), %rax
  403a0b: 75 f3                        	jne	-13 <strlen+0x20>
  403a0d: 48 83 c0 ff                  	addq	$-1, %rax
  403a11: 48 29 f8                     	subq	%rdi, %rax
; }
  403a14: c3                           	retq
  403a15: 49 b8 80 80 80 80 80 80 80 80	movabsq	$-9187201950435737472, %r8
; 	for (w = (const void *)s; !HASZERO(*w); w++);
  403a1f: 48 83 c0 f8                  	addq	$-8, %rax
  403a23: 49 b9 ff fe fe fe fe fe fe fe	movabsq	$-72340172838076673, %r9
  403a2d: 0f 1f 00                     	nopl	(%rax)
  403a30: 48 8b 48 08                  	movq	8(%rax), %rcx
  403a34: 48 83 c0 08                  	addq	$8, %rax
  403a38: 48 89 ce                     	movq	%rcx, %rsi
  403a3b: 48 f7 d6                     	notq	%rsi
  403a3e: 4c 21 c6                     	andq	%r8, %rsi
  403a41: 4a 8d 14 09                  	leaq	(%rcx,%r9), %rdx
  403a45: 48 85 d6                     	testq	%rdx, %rsi
  403a48: 74 e6                        	je	-26 <strlen+0x50>
; 	for (; *s; s++);
  403a4a: 84 c9                        	testb	%cl, %cl
  403a4c: 74 0c                        	je	12 <strlen+0x7a>
  403a4e: 66 90                        	nop
  403a50: 80 78 01 00                  	cmpb	$0, 1(%rax)
  403a54: 48 8d 40 01                  	leaq	1(%rax), %rax
  403a58: 75 f6                        	jne	-10 <strlen+0x70>
  403a5a: 48 29 f8                     	subq	%rdi, %rax
; }
  403a5d: c3                           	retq
  403a5e: 48 89 f8                     	movq	%rdi, %rax
  403a61: 48 29 f8                     	subq	%rdi, %rax
  403a64: c3                           	retq
  403a65: 0f 1f 00                     	nopl	(%rax)
  403a68: 0f 1f 84 00 00 00 00 00      	nopl	(%rax,%rax)

0000000000403a70 strnlen:
; {
  403a70: 41 57                        	pushq	%r15
  403a72: 53                           	pushq	%rbx
  403a73: 50                           	pushq	%rax
  403a74: 49 89 f7                     	movq	%rsi, %r15
  403a77: 48 89 fb                     	movq	%rdi, %rbx
; 	const char *p = memchr(s, 0, n);
  403a7a: 31 f6                        	xorl	%esi, %esi
  403a7c: 4c 89 fa                     	movq	%r15, %rdx
  403a7f: e8 2c 23 00 00               	callq	9004 <memchr>
; 	return p ? p-s : n;
  403a84: 48 89 c1                     	movq	%rax, %rcx
  403a87: 48 29 d9                     	subq	%rbx, %rcx
  403a8a: 48 85 c0                     	testq	%rax, %rax
  403a8d: 49 0f 44 cf                  	cmoveq	%r15, %rcx
  403a91: 48 89 c8                     	movq	%rcx, %rax
  403a94: 48 83 c4 08                  	addq	$8, %rsp
  403a98: 5b                           	popq	%rbx
  403a99: 41 5f                        	popq	%r15
  403a9b: c3                           	retq

0000000000403a9c memset:
; 	movzbq %sil,%rax
  403a9c: 48 0f b6 c6                  	movzbq	%sil, %rax
; 	mov $0x101010101010101,%r8
  403aa0: 49 b8 01 01 01 01 01 01 01 01	movabsq	$72340172838076673, %r8
; 	imul %r8,%rax
  403aaa: 49 0f af c0                  	imulq	%r8, %rax
; 	cmp $126,%rdx
  403aae: 48 83 fa 7e                  	cmpq	$126, %rdx
; 	ja 2f
  403ab2: 77 78                        	ja	120 <memset+0x90>
; 	test %edx,%edx
  403ab4: 85 d2                        	testl	%edx, %edx
; 	jz 1f
  403ab6: 74 70                        	je	112 <memset+0x8c>
; 	mov %sil,(%rdi)
  403ab8: 40 88 37                     	movb	%sil, (%rdi)
; 	mov %sil,-1(%rdi,%rdx)
  403abb: 40 88 74 17 ff               	movb	%sil, -1(%rdi,%rdx)
; 	cmp $2,%edx
  403ac0: 83 fa 02                     	cmpl	$2, %edx
; 	jbe 1f
  403ac3: 76 63                        	jbe	99 <memset+0x8c>
; 	mov %ax,1(%rdi)
  403ac5: 66 89 47 01                  	movw	%ax, 1(%rdi)
; 	mov %ax,(-1-2)(%rdi,%rdx)
  403ac9: 66 89 44 17 fd               	movw	%ax, -3(%rdi,%rdx)
; 	cmp $6,%edx
  403ace: 83 fa 06                     	cmpl	$6, %edx
; 	jbe 1f
  403ad1: 76 55                        	jbe	85 <memset+0x8c>
; 	mov %eax,(1+2)(%rdi)
  403ad3: 89 47 03                     	movl	%eax, 3(%rdi)
; 	mov %eax,(-1-2-4)(%rdi,%rdx)
  403ad6: 89 44 17 f9                  	movl	%eax, -7(%rdi,%rdx)
; 	cmp $14,%edx
  403ada: 83 fa 0e                     	cmpl	$14, %edx
; 	jbe 1f
  403add: 76 49                        	jbe	73 <memset+0x8c>
; 	mov %rax,(1+2+4)(%rdi)
  403adf: 48 89 47 07                  	movq	%rax, 7(%rdi)
; 	mov %rax,(-1-2-4-8)(%rdi,%rdx)
  403ae3: 48 89 44 17 f1               	movq	%rax, -15(%rdi,%rdx)
; 	cmp $30,%edx
  403ae8: 83 fa 1e                     	cmpl	$30, %edx
; 	jbe 1f
  403aeb: 76 3b                        	jbe	59 <memset+0x8c>
; 	mov %rax,(1+2+4+8)(%rdi)
  403aed: 48 89 47 0f                  	movq	%rax, 15(%rdi)
; 	mov %rax,(1+2+4+8+8)(%rdi)
  403af1: 48 89 47 17                  	movq	%rax, 23(%rdi)
; 	mov %rax,(-1-2-4-8-16)(%rdi,%rdx)
  403af5: 48 89 44 17 e1               	movq	%rax, -31(%rdi,%rdx)
; 	mov %rax,(-1-2-4-8-8)(%rdi,%rdx)
  403afa: 48 89 44 17 e9               	movq	%rax, -23(%rdi,%rdx)
; 	cmp $62,%edx
  403aff: 83 fa 3e                     	cmpl	$62, %edx
; 	jbe 1f
  403b02: 76 24                        	jbe	36 <memset+0x8c>
; 	mov %rax,(1+2+4+8+16)(%rdi)
  403b04: 48 89 47 1f                  	movq	%rax, 31(%rdi)
; 	mov %rax,(1+2+4+8+16+8)(%rdi)
  403b08: 48 89 47 27                  	movq	%rax, 39(%rdi)
; 	mov %rax,(1+2+4+8+16+16)(%rdi)
  403b0c: 48 89 47 2f                  	movq	%rax, 47(%rdi)
; 	mov %rax,(1+2+4+8+16+24)(%rdi)
  403b10: 48 89 47 37                  	movq	%rax, 55(%rdi)
; 	mov %rax,(-1-2-4-8-16-32)(%rdi,%rdx)
  403b14: 48 89 44 17 c1               	movq	%rax, -63(%rdi,%rdx)
; 	mov %rax,(-1-2-4-8-16-24)(%rdi,%rdx)
  403b19: 48 89 44 17 c9               	movq	%rax, -55(%rdi,%rdx)
; 	mov %rax,(-1-2-4-8-16-16)(%rdi,%rdx)
  403b1e: 48 89 44 17 d1               	movq	%rax, -47(%rdi,%rdx)
; 	mov %rax,(-1-2-4-8-16-8)(%rdi,%rdx)
  403b23: 48 89 44 17 d9               	movq	%rax, -39(%rdi,%rdx)
; 1:	mov %rdi,%rax
  403b28: 48 89 f8                     	movq	%rdi, %rax
; 	ret
  403b2b: c3                           	retq
; 2:	test $15,%edi
  403b2c: f7 c7 0f 00 00 00            	testl	$15, %edi
; 	mov %rdi,%r8
  403b32: 49 89 f8                     	movq	%rdi, %r8
; 	mov %rax,-8(%rdi,%rdx)
  403b35: 48 89 44 17 f8               	movq	%rax, -8(%rdi,%rdx)
; 	mov %rdx,%rcx
  403b3a: 48 89 d1                     	movq	%rdx, %rcx
; 	jnz 2f
  403b3d: 75 0b                        	jne	11 <memset+0xae>
; 1:	shr $3,%rcx
  403b3f: 48 c1 e9 03                  	shrq	$3, %rcx
; 	rep
  403b43: f3 48 ab                     	rep		stosq	%rax, %es:(%rdi)
; 	mov %r8,%rax
  403b46: 4c 89 c0                     	movq	%r8, %rax
; 	ret
  403b49: c3                           	retq
; 2:	xor %edx,%edx
  403b4a: 31 d2                        	xorl	%edx, %edx
; 	sub %edi,%edx
  403b4c: 29 fa                        	subl	%edi, %edx
; 	and $15,%edx
  403b4e: 83 e2 0f                     	andl	$15, %edx
; 	mov %rax,(%rdi)
  403b51: 48 89 07                     	movq	%rax, (%rdi)
; 	mov %rax,8(%rdi)
  403b54: 48 89 47 08                  	movq	%rax, 8(%rdi)
; 	sub %rdx,%rcx
  403b58: 48 29 d1                     	subq	%rdx, %rcx
; 	add %rdx,%rdi
  403b5b: 48 01 d7                     	addq	%rdx, %rdi
; 	jmp 1b
  403b5e: eb df                        	jmp	-33 <memset+0xa3>

0000000000403b60 __lock:
; 	if (!libc.threads_minus_1) return;
  403b60: 83 3d f5 92 08 00 00         	cmpl	$0, 561909(%rip)
  403b67: 0f 84 89 00 00 00            	je	137 <__lock+0x96>
  403b6d: b9 01 00 00 80               	movl	$2147483649, %ecx
; 	__asm__ __volatile__ (
  403b72: 31 c0                        	xorl	%eax, %eax
  403b74: f0                           	lock
  403b75: 0f b1 0f                     	cmpxchgl	%ecx, (%rdi)
; 	if (!current) return;
  403b78: 85 c0                        	testl	%eax, %eax
  403b7a: 74 7a                        	je	122 <__lock+0x96>
  403b7c: ba 0a 00 00 00               	movl	$10, %edx
; 		if (current < 0) current -= INT_MIN + 1;
  403b81: 8d 88 ff ff ff 7f            	leal	2147483647(%rax), %ecx
  403b87: 85 c0                        	testl	%eax, %eax
  403b89: 0f 49 c8                     	cmovnsl	%eax, %ecx
; 		int val = a_cas(l, current, INT_MIN + (current + 1));
  403b8c: 8d b1 01 00 00 80            	leal	-2147483647(%rcx), %esi
; 	__asm__ __volatile__ (
  403b92: 89 c8                        	movl	%ecx, %eax
  403b94: f0                           	lock
  403b95: 0f b1 37                     	cmpxchgl	%esi, (%rdi)
; 		if (val == current) return;
  403b98: 39 c8                        	cmpl	%ecx, %eax
  403b9a: 74 5a                        	je	90 <__lock+0x96>
; 	for (unsigned i = 0; i < 10; ++i) {
  403b9c: ff ca                        	decl	%edx
  403b9e: 75 e1                        	jne	-31 <__lock+0x21>
  403ba0: 41 b8 01 00 00 00            	movl	$1, %r8d
; 	__asm__ __volatile__(
  403ba6: f0                           	lock
  403ba7: 44 0f c1 07                  	xaddl	%r8d, (%rdi)
; 	current = a_fetch_add(l, 1) + 1;
  403bab: 41 ff c0                     	incl	%r8d
; 		if (current < 0) {
  403bae: 45 85 c0                     	testl	%r8d, %r8d
  403bb1: 79 2b                        	jns	43 <__lock+0x7e>
; 	__syscall(SYS_futex, addr, FUTEX_WAIT|priv, val, 0) != -ENOSYS ||
  403bb3: 49 63 d0                     	movslq	%r8d, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  403bb6: b8 ca 00 00 00               	movl	$202, %eax
  403bbb: be 80 00 00 00               	movl	$128, %esi
  403bc0: 45 31 d2                     	xorl	%r10d, %r10d
  403bc3: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAIT|priv, val, 0) != -ENOSYS ||
  403bc5: 48 83 f8 da                  	cmpq	$-38, %rax
  403bc9: 75 0c                        	jne	12 <__lock+0x77>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  403bcb: b8 ca 00 00 00               	movl	$202, %eax
  403bd0: 31 f6                        	xorl	%esi, %esi
  403bd2: 45 31 d2                     	xorl	%r10d, %r10d
  403bd5: 0f 05                        	syscall
; 			current -= INT_MIN + 1;
  403bd7: 41 81 c0 ff ff ff 7f         	addl	$2147483647, %r8d
; 		int val = a_cas(l, current, INT_MIN + current);
  403bde: 44 89 c1                     	movl	%r8d, %ecx
  403be1: 81 c9 00 00 00 80            	orl	$2147483648, %ecx
; 	__asm__ __volatile__ (
  403be7: 44 89 c0                     	movl	%r8d, %eax
  403bea: f0                           	lock
  403beb: 0f b1 0f                     	cmpxchgl	%ecx, (%rdi)
; 		if (val == current) return;
  403bee: 44 39 c0                     	cmpl	%r8d, %eax
  403bf1: 41 89 c0                     	movl	%eax, %r8d
  403bf4: 75 b8                        	jne	-72 <__lock+0x4e>
; }
  403bf6: c3                           	retq

0000000000403bf7 __unlock:
; 	if (l[0] < 0) {
  403bf7: 83 3f 00                     	cmpl	$0, (%rdi)
  403bfa: 79 38                        	jns	56 <__unlock+0x3d>
  403bfc: b8 ff ff ff 7f               	movl	$2147483647, %eax
; 	__asm__ __volatile__(
  403c01: f0                           	lock
  403c02: 0f c1 07                     	xaddl	%eax, (%rdi)
; 		if (a_fetch_add(l, -(INT_MIN + 1)) != (INT_MIN + 1)) {
  403c05: 3d 01 00 00 80               	cmpl	$2147483649, %eax
  403c0a: 74 28                        	je	40 <__unlock+0x3d>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  403c0c: b8 ca 00 00 00               	movl	$202, %eax
  403c11: be 81 00 00 00               	movl	$129, %esi
  403c16: ba 01 00 00 00               	movl	$1, %edx
  403c1b: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  403c1d: 48 83 f8 da                  	cmpq	$-38, %rax
  403c21: 75 11                        	jne	17 <__unlock+0x3d>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  403c23: b8 ca 00 00 00               	movl	$202, %eax
  403c28: be 01 00 00 00               	movl	$1, %esi
  403c2d: ba 01 00 00 00               	movl	$1, %edx
  403c32: 0f 05                        	syscall
; }
  403c34: c3                           	retq
  403c35: 0f 1f 00                     	nopl	(%rax)

0000000000403c38 gettimeofday:
; 	if (!tv) return 0;
  403c38: 48 85 ff                     	testq	%rdi, %rdi
  403c3b: 74 44                        	je	68 <gettimeofday+0x49>
  403c3d: 41 57                        	pushq	%r15
  403c3f: 53                           	pushq	%rbx
  403c40: 48 83 ec 18                  	subq	$24, %rsp
  403c44: 48 89 fb                     	movq	%rdi, %rbx
  403c47: 4c 8d 7c 24 08               	leaq	8(%rsp), %r15
; 	clock_gettime(CLOCK_REALTIME, &ts);
  403c4c: 31 ff                        	xorl	%edi, %edi
  403c4e: 4c 89 fe                     	movq	%r15, %rsi
  403c51: e8 ce 22 00 00               	callq	8910 <clock_gettime>
; 	tv->tv_sec = ts.tv_sec;
  403c56: 49 8b 07                     	movq	(%r15), %rax
  403c59: 48 89 03                     	movq	%rax, (%rbx)
; 	tv->tv_usec = (int)ts.tv_nsec / 1000;
  403c5c: 49 63 47 08                  	movslq	8(%r15), %rax
  403c60: 48 69 c0 d3 4d 62 10         	imulq	$274877907, %rax, %rax
  403c67: 48 89 c1                     	movq	%rax, %rcx
  403c6a: 48 c1 e9 3f                  	shrq	$63, %rcx
  403c6e: 48 c1 f8 26                  	sarq	$38, %rax
  403c72: 01 c8                        	addl	%ecx, %eax
  403c74: 48 98                        	cltq
  403c76: 48 89 43 08                  	movq	%rax, 8(%rbx)
  403c7a: 48 83 c4 18                  	addq	$24, %rsp
  403c7e: 5b                           	popq	%rbx
  403c7f: 41 5f                        	popq	%r15
; }
  403c81: 31 c0                        	xorl	%eax, %eax
  403c83: c3                           	retq

0000000000403c84 __init_tp:
; {
  403c84: 53                           	pushq	%rbx
  403c85: 48 89 fb                     	movq	%rdi, %rbx
; 	td->self = td;
  403c88: 48 89 3f                     	movq	%rdi, (%rdi)
; 	int r = __set_thread_area(TP_ADJ(p));
  403c8b: e8 84 22 00 00               	callq	8836 <__set_thread_area>
; 	if (r < 0) return -1;
  403c90: 85 c0                        	testl	%eax, %eax
  403c92: 78 52                        	js	82 <__init_tp+0x62>
; 	if (!r) libc.can_do_threads = 1;
  403c94: 75 0a                        	jne	10 <__init_tp+0x1c>
  403c96: c7 05 b0 91 08 00 01 00 00 00	movl	$1, 561584(%rip)
; 	td->detach_state = DT_JOINABLE;
  403ca0: c7 43 40 01 00 00 00         	movl	$1, 64(%rbx)
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  403ca7: b8 da 00 00 00               	movl	$218, %eax
  403cac: bf 34 cf 48 00               	movl	$4771636, %edi
  403cb1: 0f 05                        	syscall
; 	td->tid = __syscall(SYS_set_tid_address, &__thread_list_lock);
  403cb3: 89 43 38                     	movl	%eax, 56(%rbx)
; 	td->locale = &libc.global_locale;
  403cb6: 48 c7 83 b0 00 00 00 90 ce 48 00     	movq	$4771472, 176(%rbx)
; 	td->robust_list.head = &td->robust_list.head;
  403cc1: 48 8d 83 90 00 00 00         	leaq	144(%rbx), %rax
  403cc8: 48 89 83 90 00 00 00         	movq	%rax, 144(%rbx)
; 	td->sysinfo = __sysinfo;
  403ccf: 48 8b 05 4a 92 08 00         	movq	561738(%rip), %rax
  403cd6: 48 89 43 20                  	movq	%rax, 32(%rbx)
; 	td->next = td->prev = td;
  403cda: 48 89 5b 10                  	movq	%rbx, 16(%rbx)
  403cde: 48 89 5b 18                  	movq	%rbx, 24(%rbx)
  403ce2: 31 c0                        	xorl	%eax, %eax
  403ce4: eb 05                        	jmp	5 <__init_tp+0x67>
  403ce6: b8 ff ff ff ff               	movl	$4294967295, %eax
; }
  403ceb: 5b                           	popq	%rbx
  403cec: c3                           	retq

0000000000403ced __copy_tls:
; {
  403ced: 55                           	pushq	%rbp
  403cee: 41 57                        	pushq	%r15
  403cf0: 53                           	pushq	%rbx
  403cf1: 48 83 ec 10                  	subq	$16, %rsp
; 	mem += libc.tls_size - sizeof(struct pthread);
  403cf5: 48 8b 05 74 91 08 00         	movq	561524(%rip), %rax
  403cfc: 48 89 7c 24 08               	movq	%rdi, 8(%rsp)
  403d01: 48 8d 1c 38                  	leaq	(%rax,%rdi), %rbx
  403d05: 48 81 c3 20 ff ff ff         	addq	$-224, %rbx
; 	mem -= (uintptr_t)mem & (libc.tls_align-1);
  403d0c: 48 8b 05 65 91 08 00         	movq	561509(%rip), %rax
  403d13: 48 ff c8                     	decq	%rax
  403d16: 48 21 d8                     	andq	%rbx, %rax
  403d19: 48 29 c3                     	subq	%rax, %rbx
  403d1c: 48 8b 2d 45 91 08 00         	movq	561477(%rip), %rbp
; 	for (i=1, p=libc.tls_head; p; i++, p=p->next) {
  403d23: 48 85 ed                     	testq	%rbp, %rbp
  403d26: 74 34                        	je	52 <__copy_tls+0x6f>
  403d28: 48 8b 44 24 08               	movq	8(%rsp), %rax
  403d2d: 4c 8d 78 08                  	leaq	8(%rax), %r15
; 		dtv[i] = (uintptr_t)(mem - p->offset) + DTP_OFFSET;
  403d31: 48 89 d8                     	movq	%rbx, %rax
  403d34: 48 2b 45 28                  	subq	40(%rbp), %rax
  403d38: 49 89 07                     	movq	%rax, (%r15)
; 		memcpy(mem - p->offset, p->image, p->len);
  403d3b: 48 89 df                     	movq	%rbx, %rdi
  403d3e: 48 2b 7d 28                  	subq	40(%rbp), %rdi
  403d42: 48 8b 75 08                  	movq	8(%rbp), %rsi
  403d46: 48 8b 55 10                  	movq	16(%rbp), %rdx
  403d4a: e8 15 21 00 00               	callq	8469 <memcpy>
  403d4f: 48 8b 6d 00                  	movq	(%rbp), %rbp
; 	for (i=1, p=libc.tls_head; p; i++, p=p->next) {
  403d53: 49 83 c7 08                  	addq	$8, %r15
  403d57: 48 85 ed                     	testq	%rbp, %rbp
  403d5a: 75 d5                        	jne	-43 <__copy_tls+0x44>
; 	dtv[0] = libc.tls_cnt;
  403d5c: 48 8b 05 1d 91 08 00         	movq	561437(%rip), %rax
  403d63: 48 8b 4c 24 08               	movq	8(%rsp), %rcx
  403d68: 48 89 01                     	movq	%rax, (%rcx)
; 	td->dtv = td->dtv_copy = dtv;
  403d6b: 48 89 8b d8 00 00 00         	movq	%rcx, 216(%rbx)
  403d72: 48 89 4b 08                  	movq	%rcx, 8(%rbx)
; 	return td;
  403d76: 48 89 d8                     	movq	%rbx, %rax
  403d79: 48 83 c4 10                  	addq	$16, %rsp
  403d7d: 5b                           	popq	%rbx
  403d7e: 41 5f                        	popq	%r15
  403d80: 5d                           	popq	%rbp
  403d81: c3                           	retq

0000000000403d82 static_init_tls:
; {
  403d82: 50                           	pushq	%rax
; 	for (p=(void *)aux[AT_PHDR],n=aux[AT_PHNUM]; n; n--,p+=aux[AT_PHENT]) {
  403d83: 48 8b 4f 28                  	movq	40(%rdi), %rcx
  403d87: 48 85 c9                     	testq	%rcx, %rcx
  403d8a: 0f 84 c1 00 00 00            	je	193 <static_init_tls+0xcf>
  403d90: 4c 8b 57 18                  	movq	24(%rdi), %r10
  403d94: 4c 8b 77 20                  	movq	32(%rdi), %r14
  403d98: 31 c0                        	xorl	%eax, %eax
  403d9a: 41 b8 00 00 80 00            	movl	$8388608, %r8d
  403da0: 41 b9 00 00 00 00            	movl	$0, %r9d
  403da6: 45 31 db                     	xorl	%r11d, %r11d
  403da9: 4c 89 d6                     	movq	%r10, %rsi
; 		if (phdr->p_type == PT_PHDR)
  403dac: 8b 16                        	movl	(%rsi), %edx
  403dae: 83 fa 06                     	cmpl	$6, %edx
  403db1: 75 05                        	jne	5 <static_init_tls+0x36>
; 			base = aux[AT_PHDR] - phdr->p_vaddr;
  403db3: 4c 89 d0                     	movq	%r10, %rax
  403db6: eb 0f                        	jmp	15 <static_init_tls+0x45>
; 		if (phdr->p_type == PT_DYNAMIC && _DYNAMIC)
  403db8: 83 fa 02                     	cmpl	$2, %edx
  403dbb: 75 18                        	jne	24 <static_init_tls+0x53>
  403dbd: 4d 85 c9                     	testq	%r9, %r9
  403dc0: 74 13                        	je	19 <static_init_tls+0x53>
; 			base = (size_t)_DYNAMIC - phdr->p_vaddr;
  403dc2: b8 00 00 00 00               	movl	$0, %eax
  403dc7: 48 2b 46 10                  	subq	16(%rsi), %rax
; 	for (p=(void *)aux[AT_PHDR],n=aux[AT_PHNUM]; n; n--,p+=aux[AT_PHENT]) {
  403dcb: 4c 01 f6                     	addq	%r14, %rsi
  403dce: 48 ff c9                     	decq	%rcx
  403dd1: 75 d9                        	jne	-39 <static_init_tls+0x2a>
  403dd3: eb 31                        	jmp	49 <static_init_tls+0x84>
; 		if (phdr->p_type == PT_TLS)
  403dd5: 83 fa 07                     	cmpl	$7, %edx
  403dd8: 4c 0f 44 de                  	cmoveq	%rsi, %r11
; 		if (phdr->p_type == PT_GNU_STACK &&
  403ddc: 81 fa 51 e5 74 64            	cmpl	$1685382481, %edx
  403de2: 75 e7                        	jne	-25 <static_init_tls+0x49>
; 		    phdr->p_memsz > __default_stacksize)
  403de4: 48 8b 56 28                  	movq	40(%rsi), %rdx
  403de8: 8b 3d 0a 50 00 00            	movl	20490(%rip), %edi
  403dee: 48 39 fa                     	cmpq	%rdi, %rdx
; 		if (phdr->p_type == PT_GNU_STACK &&
  403df1: 76 d8                        	jbe	-40 <static_init_tls+0x49>
; 				phdr->p_memsz < DEFAULT_STACK_MAX ?
  403df3: 48 81 fa 00 00 80 00         	cmpq	$8388608, %rdx
  403dfa: 41 0f 43 d0                  	cmovael	%r8d, %edx
; 			__default_stacksize =
  403dfe: 89 15 f4 4f 00 00            	movl	%edx, 20468(%rip)
  403e04: eb c5                        	jmp	-59 <static_init_tls+0x49>
; 	if (tls_phdr) {
  403e06: 4d 85 db                     	testq	%r11, %r11
  403e09: 74 46                        	je	70 <static_init_tls+0xcf>
; 		main_tls.image = (void *)(base + tls_phdr->p_vaddr);
  403e0b: 49 03 43 10                  	addq	16(%r11), %rax
  403e0f: 48 89 05 72 58 00 00         	movq	%rax, 22642(%rip)
; 		main_tls.len = tls_phdr->p_filesz;
  403e16: f3 41 0f 6f 43 20            	movdqu	32(%r11), %xmm0
  403e1c: f3 0f 7f 05 6c 58 00 00      	movdqu	%xmm0, 22636(%rip)
; 		main_tls.align = tls_phdr->p_align;
  403e24: 49 8b 4b 30                  	movq	48(%r11), %rcx
  403e28: 48 89 0d 71 58 00 00         	movq	%rcx, 22641(%rip)
; 		libc.tls_cnt = 1;
  403e2f: 48 c7 05 46 90 08 00 01 00 00 00     	movq	$1, 561222(%rip)
; 		libc.tls_head = &main_tls;
  403e3a: 48 c7 05 23 90 08 00 80 96 40 00     	movq	$4232832, 561187(%rip)
; 	}
  403e45: 66 0f 70 c0 4e               	pshufd	$78, %xmm0, %xmm0
  403e4a: 66 48 0f 7e c2               	movq	%xmm0, %rdx
  403e4f: eb 15                        	jmp	21 <static_init_tls+0xe4>
; 		& (main_tls.align-1);
  403e51: 48 8b 0d 48 58 00 00         	movq	22600(%rip), %rcx
; 	main_tls.size += (-main_tls.size - (uintptr_t)main_tls.image)
  403e58: 48 8b 15 39 58 00 00         	movq	22585(%rip), %rdx
  403e5f: 48 8b 05 22 58 00 00         	movq	22562(%rip), %rax
  403e66: 48 01 d0                     	addq	%rdx, %rax
  403e69: 48 f7 d8                     	negq	%rax
; 		& (main_tls.align-1);
  403e6c: 48 8d 71 ff                  	leaq	-1(%rcx), %rsi
  403e70: 48 21 c6                     	andq	%rax, %rsi
; 	main_tls.size += (-main_tls.size - (uintptr_t)main_tls.image)
  403e73: 48 01 d6                     	addq	%rdx, %rsi
  403e76: 48 89 35 1b 58 00 00         	movq	%rsi, 22555(%rip)
; 	main_tls.offset = main_tls.size;
  403e7d: 48 89 35 24 58 00 00         	movq	%rsi, 22564(%rip)
; 	if (main_tls.align < MIN_TLS_ALIGN) main_tls.align = MIN_TLS_ALIGN;
  403e84: 48 83 f9 07                  	cmpq	$7, %rcx
  403e88: 77 10                        	ja	16 <static_init_tls+0x118>
  403e8a: 48 c7 05 0b 58 00 00 08 00 00 00     	movq	$8, 22539(%rip)
  403e95: b9 08 00 00 00               	movl	$8, %ecx
; 	libc.tls_align = main_tls.align;
  403e9a: 48 89 0d d7 8f 08 00         	movq	%rcx, 561111(%rip)
; 		+ MIN_TLS_ALIGN-1 & -MIN_TLS_ALIGN;
  403ea1: 48 01 ce                     	addq	%rcx, %rsi
  403ea4: 48 81 c6 f7 00 00 00         	addq	$247, %rsi
  403eab: 48 83 e6 f8                  	andq	$-8, %rsi
; 	libc.tls_size = 2*sizeof(void *) + sizeof(struct pthread)
  403eaf: 48 89 35 ba 8f 08 00         	movq	%rsi, 561082(%rip)
  403eb6: bf b0 96 40 00               	movl	$4232880, %edi
; 	if (libc.tls_size > sizeof builtin_tls) {
  403ebb: 48 81 fe 69 01 00 00         	cmpq	$361, %rsi
  403ec2: 72 24                        	jb	36 <static_init_tls+0x166>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  403ec4: b8 09 00 00 00               	movl	$9, %eax
  403ec9: ba 03 00 00 00               	movl	$3, %edx
  403ece: 41 ba 22 00 00 00            	movl	$34, %r10d
  403ed4: bf 00 00 00 00               	movl	$0, %edi
  403ed9: 49 c7 c0 ff ff ff ff         	movq	$-1, %r8
  403ee0: 45 31 c9                     	xorl	%r9d, %r9d
  403ee3: 0f 05                        	syscall
  403ee5: 48 89 c7                     	movq	%rax, %rdi
; 	if (__init_tp(__copy_tls(mem)) < 0)
  403ee8: e8 00 fe ff ff               	callq	-512 <__copy_tls>
  403eed: 48 89 c7                     	movq	%rax, %rdi
  403ef0: e8 8f fd ff ff               	callq	-625 <__init_tp>
  403ef5: 85 c0                        	testl	%eax, %eax
  403ef7: 79 01                        	jns	1 <static_init_tls+0x178>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  403ef9: f4                           	hlt
; }
  403efa: 58                           	popq	%rax
  403efb: c3                           	retq

0000000000403efc __errno_location:
; 	__asm__ ("mov %%fs:0,%0" : "=r" (self) );
  403efc: 64 48 8b 04 25 00 00 00 00   	movq	%fs:0, %rax
; 	return &__pthread_self()->errno_val;
  403f05: 48 83 c0 3c                  	addq	$60, %rax
  403f09: c3                           	retq
  403f0a: 66 90                        	nop

0000000000403f0c strerror_l:
; {
  403f0c: 31 c0                        	xorl	%eax, %eax
; 	for (i=0; errid[i] && errid[i] != e; i++);
  403f0e: 0f b6 88 f0 71 40 00         	movzbl	4223472(%rax), %ecx
  403f15: 39 f9                        	cmpl	%edi, %ecx
  403f17: 74 0b                        	je	11 <strerror_l+0x18>
  403f19: 48 ff c0                     	incq	%rax
  403f1c: 48 83 f8 58                  	cmpq	$88, %rax
  403f20: 75 ec                        	jne	-20 <strerror_l+0x2>
  403f22: eb 04                        	jmp	4 <strerror_l+0x1c>
; 	for (s=errmsg; i; s++, i--) for (; *s; s++);
  403f24: 85 c0                        	testl	%eax, %eax
  403f26: 74 14                        	je	20 <strerror_l+0x30>
  403f28: bf 50 72 40 00               	movl	$4223568, %edi
  403f2d: 80 3f 00                     	cmpb	$0, (%rdi)
  403f30: 48 8d 7f 01                  	leaq	1(%rdi), %rdi
  403f34: 75 f7                        	jne	-9 <strerror_l+0x21>
  403f36: ff c8                        	decl	%eax
  403f38: 75 f3                        	jne	-13 <strerror_l+0x21>
  403f3a: eb 05                        	jmp	5 <strerror_l+0x35>
  403f3c: bf 50 72 40 00               	movl	$4223568, %edi
; 	return (char *)LCTRANS(s, LC_MESSAGES, loc);
  403f41: 48 8b 76 28                  	movq	40(%rsi), %rsi
  403f45: e9 5e 00 00 00               	jmp	94 <__lctrans>

0000000000403f4a strerror:
; 	__asm__ ("mov %%fs:0,%0" : "=r" (self) );
  403f4a: 64 48 8b 04 25 00 00 00 00   	movq	%fs:0, %rax
; 	return __strerror_l(e, CURRENT_LOCALE);
  403f53: 48 8b b0 b0 00 00 00         	movq	176(%rax), %rsi
  403f5a: e9 ad ff ff ff               	jmp	-83 <strerror_l>
  403f5f: 90                           	nop

0000000000403f60 _Exit:
; 	__syscall(SYS_exit_group, ec);
  403f60: 48 63 ff                     	movslq	%edi, %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  403f63: b8 e7 00 00 00               	movl	$231, %eax
  403f68: 0f 05                        	syscall
  403f6a: b8 3c 00 00 00               	movl	$60, %eax
  403f6f: 0f 05                        	syscall
; 	for (;;) __syscall(SYS_exit, ec);
  403f71: eb f7                        	jmp	-9 <_Exit+0xa>
  403f73: 90                           	nop
  403f74: 66 66 66 2e 0f 1f 84 00 00 00 00 00  	nopw	%cs:(%rax,%rax)

0000000000403f80 __syscall_ret:
; {
  403f80: 53                           	pushq	%rbx
  403f81: 48 89 fb                     	movq	%rdi, %rbx
; 	if (r > -4096UL) {
  403f84: 48 81 ff 01 f0 ff ff         	cmpq	$-4095, %rdi
  403f8b: 72 10                        	jb	16 <__syscall_ret+0x1d>
; 		errno = -r;
  403f8d: f7 db                        	negl	%ebx
  403f8f: e8 68 ff ff ff               	callq	-152 <__errno_location>
  403f94: 89 18                        	movl	%ebx, (%rax)
  403f96: 48 c7 c3 ff ff ff ff         	movq	$-1, %rbx
; }
  403f9d: 48 89 d8                     	movq	%rbx, %rax
  403fa0: 5b                           	popq	%rbx
  403fa1: c3                           	retq
  403fa2: 66 90                        	nop

0000000000403fa4 dummy:
; {
  403fa4: 48 89 f8                     	movq	%rdi, %rax
; 	return msg;
  403fa7: c3                           	retq

0000000000403fa8 __lctrans:
; 	return __lctrans_impl(msg, lm);
  403fa8: e9 f7 ff ff ff               	jmp	-9 <dummy>

0000000000403fad __lctrans_cur:
; 	__asm__ ("mov %%fs:0,%0" : "=r" (self) );
  403fad: 64 48 8b 04 25 00 00 00 00   	movq	%fs:0, %rax
; 	return __lctrans_impl(msg, CURRENT_LOCALE->cat[LC_MESSAGES]);
  403fb6: 48 8b 80 b0 00 00 00         	movq	176(%rax), %rax
  403fbd: 48 8b 70 28                  	movq	40(%rax), %rsi
  403fc1: e9 de ff ff ff               	jmp	-34 <dummy>
  403fc6: 66 90                        	nop
  403fc8: 0f 1f 84 00 00 00 00 00      	nopl	(%rax,%rax)

0000000000403fd0 malloc:
; {
  403fd0: 55                           	pushq	%rbp
  403fd1: 41 57                        	pushq	%r15
  403fd3: 53                           	pushq	%rbx
  403fd4: 48 83 ec 30                  	subq	$48, %rsp
; 	if (*n-1 > PTRDIFF_MAX - SIZE_ALIGN - PAGE_SIZE) {
  403fd8: 48 8d 47 ff                  	leaq	-1(%rdi), %rax
  403fdc: 48 b9 e0 ef ff ff ff ff ff 7f	movabsq	$9223372036854771680, %rcx
  403fe6: 48 39 c8                     	cmpq	%rcx, %rax
  403fe9: 72 1b                        	jb	27 <malloc+0x36>
; 		if (*n) {
  403feb: 48 85 ff                     	testq	%rdi, %rdi
  403fee: 0f 84 90 00 00 00            	je	144 <malloc+0xb4>
; 			errno = ENOMEM;
  403ff4: e8 03 ff ff ff               	callq	-253 <__errno_location>
  403ff9: c7 00 0c 00 00 00            	movl	$12, (%rax)
  403fff: 31 db                        	xorl	%ebx, %ebx
  404001: e9 88 05 00 00               	jmp	1416 <malloc+0x5be>
; 	*n = (*n + OVERHEAD + SIZE_ALIGN - 1) & SIZE_MASK;
  404006: 48 83 c7 2f                  	addq	$47, %rdi
  40400a: 48 89 fd                     	movq	%rdi, %rbp
  40400d: 48 83 e5 e0                  	andq	$-32, %rbp
; 	if (n > MMAP_THRESHOLD) {
  404011: 48 81 fd 01 80 03 00         	cmpq	$229377, %rbp
  404018: 72 56                        	jb	86 <malloc+0xa0>
; 		size_t len = n + OVERHEAD + PAGE_SIZE - 1 & -PAGE_SIZE;
  40401a: 48 81 c5 0f 10 00 00         	addq	$4111, %rbp
  404021: 48 81 e5 00 f0 ff ff         	andq	$-4096, %rbp
  404028: 31 db                        	xorl	%ebx, %ebx
; 		char *base = __mmap(0, len, PROT_READ|PROT_WRITE,
  40402a: bf 00 00 00 00               	movl	$0, %edi
  40402f: 48 89 ee                     	movq	%rbp, %rsi
  404032: ba 03 00 00 00               	movl	$3, %edx
  404037: b9 22 00 00 00               	movl	$34, %ecx
  40403c: 41 b8 ff ff ff ff            	movl	$4294967295, %r8d
  404042: 45 31 c9                     	xorl	%r9d, %r9d
  404045: e8 3b 14 00 00               	callq	5179 <mmap64>
; 		if (base == (void *)-1) return 0;
  40404a: 48 83 f8 ff                  	cmpq	$-1, %rax
  40404e: 0f 84 3a 05 00 00            	je	1338 <malloc+0x5be>
; 		c->csize = len - (SIZE_ALIGN - OVERHEAD);
  404054: 48 83 c5 f0                  	addq	$-16, %rbp
  404058: 48 89 68 18                  	movq	%rbp, 24(%rax)
; 		c->psize = SIZE_ALIGN - OVERHEAD;
  40405c: 48 c7 40 10 10 00 00 00      	movq	$16, 16(%rax)
; 		return CHUNK_TO_MEM(c);
  404064: 48 83 c0 20                  	addq	$32, %rax
  404068: 48 89 c3                     	movq	%rax, %rbx
  40406b: e9 1e 05 00 00               	jmp	1310 <malloc+0x5be>
; 	x = x / SIZE_ALIGN - 1;
  404070: 48 c1 ef 05                  	shrq	$5, %rdi
  404074: 48 8d 4f ff                  	leaq	-1(%rdi), %rcx
; 	if (x <= 32) return x;
  404078: 48 83 f9 20                  	cmpq	$32, %rcx
  40407c: 77 13                        	ja	19 <malloc+0xc1>
  40407e: 48 89 2c 24                  	movq	%rbp, (%rsp)
  404082: eb 3c                        	jmp	60 <malloc+0xf0>
  404084: bd 20 00 00 00               	movl	$32, %ebp
  404089: 31 c9                        	xorl	%ecx, %ecx
  40408b: 48 89 2c 24                  	movq	%rbp, (%rsp)
  40408f: eb 2f                        	jmp	47 <malloc+0xf0>
; 	x--;
  404091: 48 83 c7 fe                  	addq	$-2, %rdi
; 	if (x < 512) return bin_tab[x/8-4] + 1;
  404095: 48 81 ff ff 01 00 00         	cmpq	$511, %rdi
  40409c: 48 89 2c 24                  	movq	%rbp, (%rsp)
  4040a0: 77 10                        	ja	16 <malloc+0xe2>
  4040a2: 48 c1 ef 03                  	shrq	$3, %rdi
  4040a6: 0f b6 8f 6c 79 40 00         	movzbl	4225388(%rdi), %ecx
  4040ad: 83 c1 01                     	addl	$1, %ecx
  4040b0: eb 0e                        	jmp	14 <malloc+0xf0>
; 	return bin_tab[x/128-4] + 17;
  4040b2: 48 c1 ef 07                  	shrq	$7, %rdi
  4040b6: 0f b6 8f 6c 79 40 00         	movzbl	4225388(%rdi), %ecx
  4040bd: 83 c1 11                     	addl	$17, %ecx
  4040c0: 48 c7 c2 ff ff ff ff         	movq	$-1, %rdx
  4040c7: 48 89 4c 24 18               	movq	%rcx, 24(%rsp)
; 		uint64_t mask = mal.binmap & -(1ULL<<i);
  4040cc: 48 d3 e2                     	shlq	%cl, %rdx
  4040cf: 48 8b 05 42 57 00 00         	movq	22338(%rip), %rax
  4040d6: 48 89 54 24 28               	movq	%rdx, 40(%rsp)
; 		if (!mask) {
  4040db: 48 21 d0                     	andq	%rdx, %rax
  4040de: 75 22                        	jne	34 <malloc+0x132>
  4040e0: e9 34 01 00 00               	jmp	308 <malloc+0x249>
  4040e5: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  4040ef: 90                           	nop
  4040f0: 48 8b 05 21 57 00 00         	movq	22305(%rip), %rax
  4040f7: 48 23 44 24 28               	andq	40(%rsp), %rax
  4040fc: 0f 84 17 01 00 00            	je	279 <malloc+0x249>
; 	__asm__( "bsf %1,%0" : "=r"(x) : "r"(x) );
  404102: 48 0f bc c0                  	bsfq	%rax, %rax
  404106: 48 89 44 24 20               	movq	%rax, 32(%rsp)
; 	lock(mal.bins[i].lock);
  40410b: 4c 63 f8                     	movslq	%eax, %r15
  40410e: 4b 8d 04 7f                  	leaq	(%r15,%r15,2), %rax
  404112: 48 89 44 24 08               	movq	%rax, 8(%rsp)
  404117: 48 8d 2c c5 20 98 40 00      	leaq	4233248(,%rax,8), %rbp
; 	if (libc.threads_minus_1)
  40411f: 83 3d 36 8d 08 00 00         	cmpl	$0, 560438(%rip)
  404126: 74 49                        	je	73 <malloc+0x1a1>
; 	__asm__ __volatile__(
  404128: b8 01 00 00 00               	movl	$1, %eax
  40412d: 87 45 00                     	xchgl	%eax, (%rbp)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404130: 85 c0                        	testl	%eax, %eax
  404132: 74 3d                        	je	61 <malloc+0x1a1>
  404134: 48 8b 44 24 08               	movq	8(%rsp), %rax
  404139: 48 8d 1c c5 24 98 40 00      	leaq	4233252(,%rax,8), %rbx
  404141: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40414b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
  404150: 48 89 ef                     	movq	%rbp, %rdi
  404153: 48 89 de                     	movq	%rbx, %rsi
  404156: ba 01 00 00 00               	movl	$1, %edx
  40415b: b9 01 00 00 00               	movl	$1, %ecx
  404160: e8 33 1d 00 00               	callq	7475 <__wait>
; 	__asm__ __volatile__(
  404165: b8 01 00 00 00               	movl	$1, %eax
  40416a: 87 45 00                     	xchgl	%eax, (%rbp)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  40416d: 85 c0                        	testl	%eax, %eax
  40416f: 75 df                        	jne	-33 <malloc+0x180>
; 	if (!mal.bins[i].head)
  404171: 49 c1 e7 03                  	shlq	$3, %r15
  404175: 4b 8b 9c 7f 28 98 40 00      	movq	4233256(%r15,%r15,2), %rbx
  40417d: 4b 8d 04 7f                  	leaq	(%r15,%r15,2), %rax
  404181: 48 05 18 98 40 00            	addq	$4233240, %rax
  404187: 48 85 db                     	testq	%rbx, %rbx
  40418a: 74 14                        	je	20 <malloc+0x1d0>
; 		if (c != BIN_TO_CHUNK(j)) {
  40418c: 48 39 c3                     	cmpq	%rax, %rbx
  40418f: 0f 85 29 02 00 00            	jne	553 <malloc+0x3ee>
; 	if (lk[0]) {
  404195: 83 7d 00 00                  	cmpl	$0, (%rbp)
  404199: 75 2a                        	jne	42 <malloc+0x1f5>
  40419b: e9 50 ff ff ff               	jmp	-176 <malloc+0x120>
  4041a0: 4b 8d 0c 7f                  	leaq	(%r15,%r15,2), %rcx
  4041a4: 48 81 c1 28 98 40 00         	addq	$4233256, %rcx
  4041ab: 48 8b 54 24 08               	movq	8(%rsp), %rdx
; 		mal.bins[i].head = mal.bins[i].tail = BIN_TO_CHUNK(i);
  4041b0: 48 89 04 d5 30 98 40 00      	movq	%rax, 4233264(,%rdx,8)
  4041b8: 48 89 01                     	movq	%rax, (%rcx)
; 	if (lk[0]) {
  4041bb: 83 7d 00 00                  	cmpl	$0, (%rbp)
  4041bf: 0f 84 2b ff ff ff            	je	-213 <malloc+0x120>
; 	__asm__ __volatile__(
  4041c5: 31 c0                        	xorl	%eax, %eax
  4041c7: 89 45 00                     	movl	%eax, (%rbp)
  4041ca: f0                           	lock
  4041cb: 83 0c 24 00                  	orl	$0, (%rsp)
  4041cf: 48 8b 44 24 08               	movq	8(%rsp), %rax
; 		if (lk[1]) __wake(lk, 1, 1);
  4041d4: 83 3c c5 24 98 40 00 00      	cmpl	$0, 4233252(,%rax,8)
  4041dc: 0f 84 0e ff ff ff            	je	-242 <malloc+0x120>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4041e2: b8 ca 00 00 00               	movl	$202, %eax
  4041e7: be 81 00 00 00               	movl	$129, %esi
  4041ec: ba 01 00 00 00               	movl	$1, %edx
  4041f1: 48 89 ef                     	movq	%rbp, %rdi
  4041f4: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  4041f6: 48 83 f8 da                  	cmpq	$-38, %rax
  4041fa: 0f 85 f0 fe ff ff            	jne	-272 <malloc+0x120>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404200: b8 ca 00 00 00               	movl	$202, %eax
  404205: be 01 00 00 00               	movl	$1, %esi
  40420a: ba 01 00 00 00               	movl	$1, %edx
  40420f: 48 89 ef                     	movq	%rbp, %rdi
  404212: 0f 05                        	syscall
  404214: e9 d7 fe ff ff               	jmp	-297 <malloc+0x120>
  404219: 48 8b 04 24                  	movq	(%rsp), %rax
; 	n += SIZE_ALIGN;
  40421d: 48 83 c0 20                  	addq	$32, %rax
  404221: 48 89 44 24 10               	movq	%rax, 16(%rsp)
; 	if (libc.threads_minus_1)
  404226: 83 3d 2f 8c 08 00 00         	cmpl	$0, 560175(%rip)
  40422d: 74 39                        	je	57 <malloc+0x298>
  40422f: b8 01 00 00 00               	movl	$1, %eax
; 	__asm__ __volatile__(
  404234: 87 05 ee 5b 00 00            	xchgl	%eax, 23534(%rip)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  40423a: 85 c0                        	testl	%eax, %eax
  40423c: 74 2a                        	je	42 <malloc+0x298>
  40423e: 66 90                        	nop
  404240: bf 28 9e 40 00               	movl	$4234792, %edi
  404245: be 2c 9e 40 00               	movl	$4234796, %esi
  40424a: ba 01 00 00 00               	movl	$1, %edx
  40424f: b9 01 00 00 00               	movl	$1, %ecx
  404254: e8 3f 1c 00 00               	callq	7231 <__wait>
; 	__asm__ __volatile__(
  404259: b8 01 00 00 00               	movl	$1, %eax
  40425e: 87 05 c4 5b 00 00            	xchgl	%eax, 23492(%rip)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404264: 85 c0                        	testl	%eax, %eax
  404266: 75 d8                        	jne	-40 <malloc+0x270>
  404268: 48 8d 7c 24 10               	leaq	16(%rsp), %rdi
; 	p = __expand_heap(&n);
  40426d: e8 ae 21 00 00               	callq	8622 <__expand_heap>
; 	if (!p) {
  404272: 48 85 c0                     	testq	%rax, %rax
  404275: 0f 84 eb 00 00 00            	je	235 <malloc+0x396>
  40427b: 48 89 c5                     	movq	%rax, %rbp
  40427e: 48 8b 44 24 10               	movq	16(%rsp), %rax
; 	if (p != end) {
  404283: 48 3b 2d a6 5b 00 00         	cmpq	23462(%rip), %rbp
  40428a: 74 15                        	je	21 <malloc+0x2d1>
; 		n -= SIZE_ALIGN;
  40428c: 48 83 c0 e0                  	addq	$-32, %rax
  404290: 48 89 44 24 10               	movq	%rax, 16(%rsp)
; 		w->psize = 0 | C_INUSE;
  404295: 48 c7 45 10 01 00 00 00      	movq	$1, 16(%rbp)
; 		p = (char *)p + SIZE_ALIGN;
  40429d: 48 83 c5 20                  	addq	$32, %rbp
; 	end = (char *)p + n;
  4042a1: 48 8d 0c 28                  	leaq	(%rax,%rbp), %rcx
  4042a5: 48 89 0d 84 5b 00 00         	movq	%rcx, 23428(%rip)
; 	w->psize = n | C_INUSE;
  4042ac: 48 89 c1                     	movq	%rax, %rcx
  4042af: 48 83 c9 01                  	orq	$1, %rcx
  4042b3: 48 89 4c 05 f0               	movq	%rcx, -16(%rbp,%rax)
; 	w->csize = 0 | C_INUSE;
  4042b8: 48 c7 44 05 f8 01 00 00 00   	movq	$1, -8(%rbp,%rax)
; 	w = MEM_TO_CHUNK(p);
  4042c1: 48 8d 5d f0                  	leaq	-16(%rbp), %rbx
; 	w->csize = n | C_INUSE;
  4042c5: 48 8b 44 24 10               	movq	16(%rsp), %rax
  4042ca: 48 83 c8 01                  	orq	$1, %rax
  4042ce: 48 89 45 f8                  	movq	%rax, -8(%rbp)
; 	if (lk[0]) {
  4042d2: 83 3d 4f 5b 00 00 00         	cmpl	$0, 23375(%rip)
  4042d9: 74 48                        	je	72 <malloc+0x353>
  4042db: 31 c0                        	xorl	%eax, %eax
; 	__asm__ __volatile__(
  4042dd: 89 05 45 5b 00 00            	movl	%eax, 23365(%rip)
  4042e3: f0                           	lock
  4042e4: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  4042e8: 83 3d 3d 5b 00 00 00         	cmpl	$0, 23357(%rip)
  4042ef: 74 32                        	je	50 <malloc+0x353>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4042f1: b8 ca 00 00 00               	movl	$202, %eax
  4042f6: bf 28 9e 40 00               	movl	$4234792, %edi
  4042fb: be 81 00 00 00               	movl	$129, %esi
  404300: ba 01 00 00 00               	movl	$1, %edx
  404305: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  404307: 48 83 f8 da                  	cmpq	$-38, %rax
  40430b: 75 16                        	jne	22 <malloc+0x353>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40430d: b8 ca 00 00 00               	movl	$202, %eax
  404312: bf 28 9e 40 00               	movl	$4234792, %edi
  404317: be 01 00 00 00               	movl	$1, %esi
  40431c: ba 01 00 00 00               	movl	$1, %edx
  404321: 0f 05                        	syscall
; 			if (alloc_rev(c)) {
  404323: 48 89 df                     	movq	%rbx, %rdi
  404326: e8 75 02 00 00               	callq	629 <alloc_rev>
  40432b: 85 c0                        	testl	%eax, %eax
  40432d: 0f 84 17 02 00 00            	je	535 <malloc+0x57a>
; 				c = PREV_CHUNK(c);
  404333: 48 8b 45 f0                  	movq	-16(%rbp), %rax
  404337: 48 83 e0 fe                  	andq	$-2, %rax
  40433b: 48 29 c3                     	subq	%rax, %rbx
; 					x->csize + CHUNK_SIZE(c);
  40433e: 48 89 e9                     	movq	%rbp, %rcx
  404341: 48 29 c1                     	subq	%rax, %rcx
  404344: 48 8b 41 f8                  	movq	-8(%rcx), %rax
  404348: 48 83 e0 fe                  	andq	$-2, %rax
  40434c: 48 03 45 f8                  	addq	-8(%rbp), %rax
; 				NEXT_CHUNK(x)->psize = c->csize =
  404350: 48 89 41 f8                  	movq	%rax, -8(%rcx)
  404354: 48 8b 4d f8                  	movq	-8(%rbp), %rcx
  404358: 48 83 e1 fe                  	andq	$-2, %rcx
  40435c: 48 89 44 0d f0               	movq	%rax, -16(%rbp,%rcx)
  404361: e9 e4 01 00 00               	jmp	484 <malloc+0x57a>
; 	if (lk[0]) {
  404366: 83 3d bb 5a 00 00 00         	cmpl	$0, 23227(%rip)
  40436d: 74 48                        	je	72 <malloc+0x3e7>
  40436f: 31 c0                        	xorl	%eax, %eax
; 	__asm__ __volatile__(
  404371: 89 05 b1 5a 00 00            	movl	%eax, 23217(%rip)
  404377: f0                           	lock
  404378: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  40437c: 83 3d a9 5a 00 00 00         	cmpl	$0, 23209(%rip)
  404383: 74 32                        	je	50 <malloc+0x3e7>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404385: b8 ca 00 00 00               	movl	$202, %eax
  40438a: bf 28 9e 40 00               	movl	$4234792, %edi
  40438f: be 81 00 00 00               	movl	$129, %esi
  404394: ba 01 00 00 00               	movl	$1, %edx
  404399: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  40439b: 48 83 f8 da                  	cmpq	$-38, %rax
  40439f: 75 16                        	jne	22 <malloc+0x3e7>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4043a1: b8 ca 00 00 00               	movl	$202, %eax
  4043a6: bf 28 9e 40 00               	movl	$4234792, %edi
  4043ab: be 01 00 00 00               	movl	$1, %esi
  4043b0: ba 01 00 00 00               	movl	$1, %edx
  4043b5: 0f 05                        	syscall
  4043b7: 31 db                        	xorl	%ebx, %ebx
  4043b9: e9 d0 01 00 00               	jmp	464 <malloc+0x5be>
  4043be: 48 8b 4c 24 20               	movq	32(%rsp), %rcx
; 	if (j < 40) return 0;
  4043c3: 83 f9 28                     	cmpl	$40, %ecx
  4043c6: 0f 8c e7 00 00 00            	jl	231 <malloc+0x4e3>
  4043cc: 48 8b 44 24 18               	movq	24(%rsp), %rax
; 	if (j < i+3) {
  4043d1: 83 c0 03                     	addl	$3, %eax
  4043d4: 39 c8                        	cmpl	%ecx, %eax
  4043d6: 7e 25                        	jle	37 <malloc+0x42d>
; 		if (j != 63) return 0;
  4043d8: 83 f9 3f                     	cmpl	$63, %ecx
  4043db: 0f 85 d2 00 00 00            	jne	210 <malloc+0x4e3>
; 		n1 = CHUNK_SIZE(self);
  4043e1: 4c 8b 43 08                  	movq	8(%rbx), %r8
  4043e5: 4c 89 c0                     	movq	%r8, %rax
  4043e8: 48 83 e0 fe                  	andq	$-2, %rax
; 		if (n1-n <= MMAP_THRESHOLD) return 0;
  4043ec: 48 2b 04 24                  	subq	(%rsp), %rax
  4043f0: 48 3d 01 80 03 00            	cmpq	$229377, %rax
  4043f6: 73 14                        	jae	20 <malloc+0x43c>
  4043f8: e9 b6 00 00 00               	jmp	182 <malloc+0x4e3>
; 		n1 = CHUNK_SIZE(self);
  4043fd: 4c 8b 43 08                  	movq	8(%rbx), %r8
  404401: 4c 89 c0                     	movq	%r8, %rax
  404404: 48 83 e0 fe                  	andq	$-2, %rax
; 	if (bin_index(n1-n) != j) return 0;
  404408: 48 2b 04 24                  	subq	(%rsp), %rax
; 	x = x / SIZE_ALIGN - 1;
  40440c: 48 89 c2                     	movq	%rax, %rdx
  40440f: 48 c1 ea 05                  	shrq	$5, %rdx
  404413: 48 83 c2 ff                  	addq	$-1, %rdx
; 	if (x <= 32) return x;
  404417: 48 83 fa 20                  	cmpq	$32, %rdx
  40441b: 77 0b                        	ja	11 <malloc+0x458>
  40441d: 89 d6                        	movl	%edx, %esi
; 	if (bin_index(n1-n) != j) return 0;
  40441f: 39 ce                        	cmpl	%ecx, %esi
  404421: 74 3f                        	je	63 <malloc+0x492>
  404423: e9 8b 00 00 00               	jmp	139 <malloc+0x4e3>
; 	if (x < 512) return bin_tab[x/8-4];
  404428: 48 81 fa ff 01 00 00         	cmpq	$511, %rdx
  40442f: 77 11                        	ja	17 <malloc+0x472>
  404431: 48 c1 ea 03                  	shrq	$3, %rdx
  404435: 0f b6 b2 6c 79 40 00         	movzbl	4225388(%rdx), %esi
; 	if (bin_index(n1-n) != j) return 0;
  40443c: 39 ce                        	cmpl	%ecx, %esi
  40443e: 74 22                        	je	34 <malloc+0x492>
  404440: eb 71                        	jmp	113 <malloc+0x4e3>
  404442: be 3f 00 00 00               	movl	$63, %esi
; 	if (x > 0x1c00) return 63;
  404447: 48 81 fa 00 1c 00 00         	cmpq	$7168, %rdx
  40444e: 77 0e                        	ja	14 <malloc+0x48e>
; 	return bin_tab[x/128-4] + 16;
  404450: 48 c1 ea 07                  	shrq	$7, %rdx
  404454: 0f b6 b2 6c 79 40 00         	movzbl	4225388(%rdx), %esi
  40445b: 83 c6 10                     	addl	$16, %esi
; 	if (bin_index(n1-n) != j) return 0;
  40445e: 39 ce                        	cmpl	%ecx, %esi
  404460: 75 51                        	jne	81 <malloc+0x4e3>
; 	next = NEXT_CHUNK(self);
  404462: 49 83 e0 fe                  	andq	$-2, %r8
  404466: 48 8b 3c 24                  	movq	(%rsp), %rdi
; 	split = (void *)((char *)self + n);
  40446a: 48 8d 14 3b                  	leaq	(%rbx,%rdi), %rdx
; 	split->next = self->next;
  40446e: f3 0f 6f 43 10               	movdqu	16(%rbx), %xmm0
  404473: f3 0f 7f 44 3b 10            	movdqu	%xmm0, 16(%rbx,%rdi)
; 	split->prev->next = split;
  404479: 66 0f 70 c0 4e               	pshufd	$78, %xmm0, %xmm0
  40447e: 66 48 0f 7e c6               	movq	%xmm0, %rsi
  404483: 48 89 56 10                  	movq	%rdx, 16(%rsi)
; 	split->next->prev = split;
  404487: 48 8b 74 3b 10               	movq	16(%rbx,%rdi), %rsi
  40448c: 48 89 56 18                  	movq	%rdx, 24(%rsi)
; 	split->psize = n | C_INUSE;
  404490: 48 89 fa                     	movq	%rdi, %rdx
  404493: 48 83 ca 01                  	orq	$1, %rdx
  404497: 48 89 14 3b                  	movq	%rdx, (%rbx,%rdi)
; 	split->csize = n1-n;
  40449b: 48 89 44 3b 08               	movq	%rax, 8(%rbx,%rdi)
; 	next->psize = n1-n;
  4044a0: 4a 89 04 03                  	movq	%rax, (%rbx,%r8)
; 	self->csize = n | C_INUSE;
  4044a4: 48 89 53 08                  	movq	%rdx, 8(%rbx)
; 	if (lk[0]) {
  4044a8: 83 7d 00 00                  	cmpl	$0, (%rbp)
  4044ac: 75 55                        	jne	85 <malloc+0x533>
  4044ae: e9 97 00 00 00               	jmp	151 <malloc+0x57a>
; 	if (c->prev == c->next)
  4044b3: 48 8b 53 10                  	movq	16(%rbx), %rdx
  4044b7: 48 8b 43 18                  	movq	24(%rbx), %rax
  4044bb: 48 39 d0                     	cmpq	%rdx, %rax
  4044be: 75 1a                        	jne	26 <malloc+0x50a>
  4044c0: 48 c7 c0 fe ff ff ff         	movq	$-2, %rax
; 		a_and_64(&mal.binmap, ~(1ULL<<i));
  4044c7: 48 d3 c0                     	rolq	%cl, %rax
; 	__asm__ __volatile(
  4044ca: f0                           	lock
  4044cb: 48 21 05 46 53 00 00         	andq	%rax, 21318(%rip)
; 	c->prev->next = c->next;
  4044d2: 48 8b 53 10                  	movq	16(%rbx), %rdx
  4044d6: 48 8b 43 18                  	movq	24(%rbx), %rax
  4044da: 48 89 50 10                  	movq	%rdx, 16(%rax)
; 	c->next->prev = c->prev;
  4044de: 48 8b 4b 10                  	movq	16(%rbx), %rcx
  4044e2: 48 89 41 18                  	movq	%rax, 24(%rcx)
; 	c->csize |= C_INUSE;
  4044e6: 48 8b 43 08                  	movq	8(%rbx), %rax
  4044ea: 48 89 c1                     	movq	%rax, %rcx
  4044ed: 48 83 c9 01                  	orq	$1, %rcx
  4044f1: 48 89 4b 08                  	movq	%rcx, 8(%rbx)
; 	NEXT_CHUNK(c)->psize |= C_INUSE;
  4044f5: 48 83 e0 fe                  	andq	$-2, %rax
  4044f9: 80 0c 03 01                  	orb	$1, (%rbx,%rax)
; 	if (lk[0]) {
  4044fd: 83 7d 00 00                  	cmpl	$0, (%rbp)
  404501: 74 47                        	je	71 <malloc+0x57a>
  404503: 31 c0                        	xorl	%eax, %eax
; 	__asm__ __volatile__(
  404505: 89 45 00                     	movl	%eax, (%rbp)
  404508: f0                           	lock
  404509: 83 0c 24 00                  	orl	$0, (%rsp)
  40450d: 48 8b 44 24 08               	movq	8(%rsp), %rax
; 		if (lk[1]) __wake(lk, 1, 1);
  404512: 83 3c c5 24 98 40 00 00      	cmpl	$0, 4233252(,%rax,8)
  40451a: 74 2e                        	je	46 <malloc+0x57a>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40451c: b8 ca 00 00 00               	movl	$202, %eax
  404521: be 81 00 00 00               	movl	$129, %esi
  404526: ba 01 00 00 00               	movl	$1, %edx
  40452b: 48 89 ef                     	movq	%rbp, %rdi
  40452e: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  404530: 48 83 f8 da                  	cmpq	$-38, %rax
  404534: 75 14                        	jne	20 <malloc+0x57a>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404536: b8 ca 00 00 00               	movl	$202, %eax
  40453b: be 01 00 00 00               	movl	$1, %esi
  404540: ba 01 00 00 00               	movl	$1, %edx
  404545: 48 89 ef                     	movq	%rbp, %rdi
  404548: 0f 05                        	syscall
  40454a: 48 8b 34 24                  	movq	(%rsp), %rsi
; 	size_t n1 = CHUNK_SIZE(self);
  40454e: 48 8b 43 08                  	movq	8(%rbx), %rax
  404552: 48 83 e0 fe                  	andq	$-2, %rax
; 	if (n >= n1 - DONTCARE) return;
  404556: 48 8d 48 f0                  	leaq	-16(%rax), %rcx
  40455a: 48 39 f1                     	cmpq	%rsi, %rcx
  40455d: 76 2b                        	jbe	43 <malloc+0x5ba>
; 	split = (void *)((char *)self + n);
  40455f: 48 8d 3c 33                  	leaq	(%rbx,%rsi), %rdi
; 	split->psize = n | C_INUSE;
  404563: 48 89 f1                     	movq	%rsi, %rcx
  404566: 48 83 c9 01                  	orq	$1, %rcx
  40456a: 48 89 0c 33                  	movq	%rcx, (%rbx,%rsi)
; 	split->csize = n1-n | C_INUSE;
  40456e: 48 89 c2                     	movq	%rax, %rdx
  404571: 48 29 f2                     	subq	%rsi, %rdx
  404574: 48 83 ca 01                  	orq	$1, %rdx
  404578: 48 89 54 33 08               	movq	%rdx, 8(%rbx,%rsi)
; 	next->psize = n1-n | C_INUSE;
  40457d: 48 89 14 03                  	movq	%rdx, (%rbx,%rax)
; 	self->csize = n | C_INUSE;
  404581: 48 89 4b 08                  	movq	%rcx, 8(%rbx)
; 	__bin_chunk(split);
  404585: e8 a6 07 00 00               	callq	1958 <__bin_chunk>
; 	return CHUNK_TO_MEM(c);
  40458a: 48 83 c3 10                  	addq	$16, %rbx
; }
  40458e: 48 89 d8                     	movq	%rbx, %rax
  404591: 48 83 c4 30                  	addq	$48, %rsp
  404595: 5b                           	popq	%rbx
  404596: 41 5f                        	popq	%r15
  404598: 5d                           	popq	%rbp
  404599: c3                           	retq
  40459a: 66 0f 1f 44 00 00            	nopw	(%rax,%rax)

00000000004045a0 alloc_rev:
; {
  4045a0: 55                           	pushq	%rbp
  4045a1: 41 57                        	pushq	%r15
  4045a3: 53                           	pushq	%rbx
; 	while (!((k=c->psize) & C_INUSE)) {
  4045a4: 4c 8b 3f                     	movq	(%rdi), %r15
  4045a7: 31 c0                        	xorl	%eax, %eax
  4045a9: 41 f6 c7 01                  	testb	$1, %r15b
  4045ad: 0f 85 af 00 00 00            	jne	175 <alloc_rev+0xc2>
  4045b3: 48 89 fb                     	movq	%rdi, %rbx
  4045b6: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
; 	x = x / SIZE_ALIGN - 1;
  4045c0: 4c 89 f8                     	movq	%r15, %rax
  4045c3: 48 c1 e8 05                  	shrq	$5, %rax
  4045c7: 48 83 c0 ff                  	addq	$-1, %rax
; 	if (x <= 32) return x;
  4045cb: 48 83 f8 20                  	cmpq	$32, %rax
  4045cf: 77 1f                        	ja	31 <alloc_rev+0x50>
  4045d1: 89 c5                        	movl	%eax, %ebp
; 		lock_bin(i);
  4045d3: 89 ef                        	movl	%ebp, %edi
  4045d5: e8 b6 00 00 00               	callq	182 <lock_bin>
; 		if (c->psize == k) {
  4045da: 4c 39 3b                     	cmpq	%r15, (%rbx)
  4045dd: 75 6d                        	jne	109 <alloc_rev+0xac>
  4045df: e9 83 00 00 00               	jmp	131 <alloc_rev+0xc7>
  4045e4: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  4045ee: 66 90                        	nop
; 	if (x < 512) return bin_tab[x/8-4];
  4045f0: 48 3d ff 01 00 00            	cmpq	$511, %rax
  4045f6: 77 28                        	ja	40 <alloc_rev+0x80>
  4045f8: 48 c1 e8 03                  	shrq	$3, %rax
  4045fc: 0f b6 a8 6c 79 40 00         	movzbl	4225388(%rax), %ebp
; 		lock_bin(i);
  404603: 89 ef                        	movl	%ebp, %edi
  404605: e8 86 00 00 00               	callq	134 <lock_bin>
; 		if (c->psize == k) {
  40460a: 4c 39 3b                     	cmpq	%r15, (%rbx)
  40460d: 75 3d                        	jne	61 <alloc_rev+0xac>
  40460f: eb 56                        	jmp	86 <alloc_rev+0xc7>
  404611: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40461b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
  404620: bd 3f 00 00 00               	movl	$63, %ebp
; 	if (x > 0x1c00) return 63;
  404625: 48 3d 00 1c 00 00            	cmpq	$7168, %rax
  40462b: 77 13                        	ja	19 <alloc_rev+0xa0>
; 	return bin_tab[x/128-4] + 16;
  40462d: 48 c1 e8 07                  	shrq	$7, %rax
  404631: 0f b6 a8 6c 79 40 00         	movzbl	4225388(%rax), %ebp
  404638: 83 c5 10                     	addl	$16, %ebp
  40463b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
; 		lock_bin(i);
  404640: 89 ef                        	movl	%ebp, %edi
  404642: e8 49 00 00 00               	callq	73 <lock_bin>
; 		if (c->psize == k) {
  404647: 4c 39 3b                     	cmpq	%r15, (%rbx)
  40464a: 74 1b                        	je	27 <alloc_rev+0xc7>
; 		unlock_bin(i);
  40464c: 89 ef                        	movl	%ebp, %edi
  40464e: e8 0d 01 00 00               	callq	269 <unlock_bin>
; 	while (!((k=c->psize) & C_INUSE)) {
  404653: 4c 8b 3b                     	movq	(%rbx), %r15
  404656: 41 f6 c7 01                  	testb	$1, %r15b
  40465a: 0f 84 60 ff ff ff            	je	-160 <alloc_rev+0x20>
  404660: 31 c0                        	xorl	%eax, %eax
; }
  404662: 5b                           	popq	%rbx
  404663: 41 5f                        	popq	%r15
  404665: 5d                           	popq	%rbp
  404666: c3                           	retq
; 			unbin(PREV_CHUNK(c), i);
  404667: 49 83 e7 fe                  	andq	$-2, %r15
  40466b: 4c 29 fb                     	subq	%r15, %rbx
  40466e: 48 89 df                     	movq	%rbx, %rdi
  404671: 89 ee                        	movl	%ebp, %esi
  404673: e8 98 00 00 00               	callq	152 <unbin>
; 			unlock_bin(i);
  404678: 89 ef                        	movl	%ebp, %edi
  40467a: e8 e1 00 00 00               	callq	225 <unlock_bin>
  40467f: b8 01 00 00 00               	movl	$1, %eax
; }
  404684: 5b                           	popq	%rbx
  404685: 41 5f                        	popq	%r15
  404687: 5d                           	popq	%rbp
  404688: c3                           	retq
  404689: 0f 1f 80 00 00 00 00         	nopl	(%rax)

0000000000404690 lock_bin:
; {
  404690: 55                           	pushq	%rbp
  404691: 41 57                        	pushq	%r15
  404693: 53                           	pushq	%rbx
; 	lock(mal.bins[i].lock);
  404694: 48 63 c7                     	movslq	%edi, %rax
  404697: 48 8d 2c 40                  	leaq	(%rax,%rax,2), %rbp
; 	if (libc.threads_minus_1)
  40469b: 83 3d ba 87 08 00 00         	cmpl	$0, 559034(%rip)
  4046a2: 74 3c                        	je	60 <lock_bin+0x50>
  4046a4: 48 8d 1c ed 20 98 40 00      	leaq	4233248(,%rbp,8), %rbx
  4046ac: b8 01 00 00 00               	movl	$1, %eax
; 	__asm__ __volatile__(
  4046b1: 87 03                        	xchgl	%eax, (%rbx)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  4046b3: 85 c0                        	testl	%eax, %eax
  4046b5: 74 29                        	je	41 <lock_bin+0x50>
  4046b7: 4c 8d 3c ed 24 98 40 00      	leaq	4233252(,%rbp,8), %r15
  4046bf: 90                           	nop
  4046c0: 48 89 df                     	movq	%rbx, %rdi
  4046c3: 4c 89 fe                     	movq	%r15, %rsi
  4046c6: ba 01 00 00 00               	movl	$1, %edx
  4046cb: b9 01 00 00 00               	movl	$1, %ecx
  4046d0: e8 c3 17 00 00               	callq	6083 <__wait>
; 	__asm__ __volatile__(
  4046d5: b8 01 00 00 00               	movl	$1, %eax
  4046da: 87 03                        	xchgl	%eax, (%rbx)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  4046dc: 85 c0                        	testl	%eax, %eax
  4046de: 75 e0                        	jne	-32 <lock_bin+0x30>
; 	if (!mal.bins[i].head)
  4046e0: 48 83 3c ed 28 98 40 00 00   	cmpq	$0, 4233256(,%rbp,8)
  4046e9: 74 05                        	je	5 <lock_bin+0x60>
; }
  4046eb: 5b                           	popq	%rbx
  4046ec: 41 5f                        	popq	%r15
  4046ee: 5d                           	popq	%rbp
  4046ef: c3                           	retq
  4046f0: 48 8d 04 ed 28 98 40 00      	leaq	4233256(,%rbp,8), %rax
; 		mal.bins[i].head = mal.bins[i].tail = BIN_TO_CHUNK(i);
  4046f8: 48 8d 48 f0                  	leaq	-16(%rax), %rcx
  4046fc: 48 89 0c ed 30 98 40 00      	movq	%rcx, 4233264(,%rbp,8)
  404704: 48 89 08                     	movq	%rcx, (%rax)
; }
  404707: 5b                           	popq	%rbx
  404708: 41 5f                        	popq	%r15
  40470a: 5d                           	popq	%rbp
  40470b: c3                           	retq
  40470c: 0f 1f 40 00                  	nopl	(%rax)

0000000000404710 unbin:
; 	if (c->prev == c->next)
  404710: 48 8b 4f 10                  	movq	16(%rdi), %rcx
  404714: 48 8b 47 18                  	movq	24(%rdi), %rax
  404718: 48 39 c8                     	cmpq	%rcx, %rax
  40471b: 75 1c                        	jne	28 <unbin+0x29>
  40471d: 48 c7 c0 fe ff ff ff         	movq	$-2, %rax
; 		a_and_64(&mal.binmap, ~(1ULL<<i));
  404724: 89 f1                        	movl	%esi, %ecx
  404726: 48 d3 c0                     	rolq	%cl, %rax
; 	__asm__ __volatile(
  404729: f0                           	lock
  40472a: 48 21 05 e7 50 00 00         	andq	%rax, 20711(%rip)
; 	c->prev->next = c->next;
  404731: 48 8b 4f 10                  	movq	16(%rdi), %rcx
  404735: 48 8b 47 18                  	movq	24(%rdi), %rax
  404739: 48 89 48 10                  	movq	%rcx, 16(%rax)
; 	c->next->prev = c->prev;
  40473d: 48 8b 4f 10                  	movq	16(%rdi), %rcx
  404741: 48 89 41 18                  	movq	%rax, 24(%rcx)
; 	c->csize |= C_INUSE;
  404745: 48 8b 47 08                  	movq	8(%rdi), %rax
  404749: 48 89 c1                     	movq	%rax, %rcx
  40474c: 48 83 c9 01                  	orq	$1, %rcx
  404750: 48 89 4f 08                  	movq	%rcx, 8(%rdi)
; 	NEXT_CHUNK(c)->psize |= C_INUSE;
  404754: 48 83 e0 fe                  	andq	$-2, %rax
  404758: 80 0c 07 01                  	orb	$1, (%rdi,%rax)
; }
  40475c: c3                           	retq
  40475d: 0f 1f 00                     	nopl	(%rax)

0000000000404760 unlock_bin:
; 	unlock(mal.bins[i].lock);
  404760: 48 63 c7                     	movslq	%edi, %rax
  404763: 48 8d 04 40                  	leaq	(%rax,%rax,2), %rax
; 	if (lk[0]) {
  404767: 83 3c c5 20 98 40 00 00      	cmpl	$0, 4233248(,%rax,8)
  40476f: 74 43                        	je	67 <unlock_bin+0x54>
  404771: 48 8d 3c c5 20 98 40 00      	leaq	4233248(,%rax,8), %rdi
  404779: 31 c9                        	xorl	%ecx, %ecx
; 	__asm__ __volatile__(
  40477b: 89 0f                        	movl	%ecx, (%rdi)
  40477d: f0                           	lock
  40477e: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  404782: 83 3c c5 24 98 40 00 00      	cmpl	$0, 4233252(,%rax,8)
  40478a: 74 28                        	je	40 <unlock_bin+0x54>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40478c: b8 ca 00 00 00               	movl	$202, %eax
  404791: be 81 00 00 00               	movl	$129, %esi
  404796: ba 01 00 00 00               	movl	$1, %edx
  40479b: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  40479d: 48 83 f8 da                  	cmpq	$-38, %rax
  4047a1: 75 11                        	jne	17 <unlock_bin+0x54>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4047a3: b8 ca 00 00 00               	movl	$202, %eax
  4047a8: be 01 00 00 00               	movl	$1, %esi
  4047ad: ba 01 00 00 00               	movl	$1, %edx
  4047b2: 0f 05                        	syscall
; }
  4047b4: c3                           	retq
  4047b5: 66 66 2e 0f 1f 84 00 00 00 00 00     	nopw	%cs:(%rax,%rax)

00000000004047c0 calloc:
; {
  4047c0: 41 57                        	pushq	%r15
  4047c2: 53                           	pushq	%rbx
  4047c3: 50                           	pushq	%rax
  4047c4: 48 89 f3                     	movq	%rsi, %rbx
; 	if (n && m > (size_t)-1/n) {
  4047c7: 48 85 f6                     	testq	%rsi, %rsi
  4047ca: 74 1e                        	je	30 <calloc+0x2a>
  4047cc: 48 c7 c0 ff ff ff ff         	movq	$-1, %rax
  4047d3: 31 d2                        	xorl	%edx, %edx
  4047d5: 48 f7 f3                     	divq	%rbx
  4047d8: 48 39 f8                     	cmpq	%rdi, %rax
  4047db: 73 0d                        	jae	13 <calloc+0x2a>
; 		errno = ENOMEM;
  4047dd: e8 1a f7 ff ff               	callq	-2278 <__errno_location>
  4047e2: c7 00 0c 00 00 00            	movl	$12, (%rax)
  4047e8: eb 31                        	jmp	49 <calloc+0x5b>
; 	n *= m;
  4047ea: 48 0f af df                  	imulq	%rdi, %rbx
; 	void *p = malloc(n);
  4047ee: 48 89 df                     	movq	%rbx, %rdi
  4047f1: e8 da f7 ff ff               	callq	-2086 <malloc>
; 	if (!p) return p;
  4047f6: 48 85 c0                     	testq	%rax, %rax
  4047f9: 74 20                        	je	32 <calloc+0x5b>
  4047fb: 49 89 c7                     	movq	%rax, %r15
; 	if (!__malloc_replaced) {
  4047fe: 83 3d 2b 87 08 00 00         	cmpl	$0, 558891(%rip)
  404805: 74 22                        	je	34 <calloc+0x69>
; 	return memset(p, 0, n);
  404807: 4c 89 ff                     	movq	%r15, %rdi
  40480a: 31 f6                        	xorl	%esi, %esi
  40480c: 48 89 da                     	movq	%rbx, %rdx
  40480f: 48 83 c4 08                  	addq	$8, %rsp
  404813: 5b                           	popq	%rbx
  404814: 41 5f                        	popq	%r15
  404816: e9 81 f2 ff ff               	jmp	-3455 <memset>
  40481b: 45 31 ff                     	xorl	%r15d, %r15d
; }
  40481e: 4c 89 f8                     	movq	%r15, %rax
  404821: 48 83 c4 08                  	addq	$8, %rsp
  404825: 5b                           	popq	%rbx
  404826: 41 5f                        	popq	%r15
  404828: c3                           	retq
; 		if (IS_MMAPPED(MEM_TO_CHUNK(p)))
  404829: 41 f6 47 f8 01               	testb	$1, -8(%r15)
  40482e: 74 ee                        	je	-18 <calloc+0x5e>
; 		if (n >= PAGE_SIZE)
  404830: 48 81 fb 00 10 00 00         	cmpq	$4096, %rbx
  404837: 72 ce                        	jb	-50 <calloc+0x47>
; 	char *pp = p + n;
  404839: 4c 01 fb                     	addq	%r15, %rbx
; 	size_t i = (uintptr_t)pp & (pagesz - 1);
  40483c: 89 da                        	movl	%ebx, %edx
  40483e: 81 e2 ff 0f 00 00            	andl	$4095, %edx
; 		pp = memset(pp - i, 0, i);
  404844: 48 29 d3                     	subq	%rdx, %rbx
  404847: 48 89 df                     	movq	%rbx, %rdi
  40484a: 31 f6                        	xorl	%esi, %esi
  40484c: e8 4b f2 ff ff               	callq	-3509 <memset>
; 		if (pp - p < pagesz) return pp - p;
  404851: 48 89 c3                     	movq	%rax, %rbx
  404854: 4c 29 fb                     	subq	%r15, %rbx
  404857: 48 81 fb 00 10 00 00         	cmpq	$4096, %rbx
  40485e: 72 a7                        	jb	-89 <calloc+0x47>
  404860: ba 00 10 00 00               	movl	$4096, %edx
; 		        if (((T *)pp)[-1] | ((T *)pp)[-2])
  404865: 48 8b 48 f0                  	movq	-16(%rax), %rcx
  404869: 48 0b 48 f8                  	orq	-8(%rax), %rcx
  40486d: 75 11                        	jne	17 <calloc+0xc0>
  40486f: eb 3e                        	jmp	62 <calloc+0xef>
  404871: 31 d2                        	xorl	%edx, %edx
  404873: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40487d: 0f 1f 00                     	nopl	(%rax)
; 		pp = memset(pp - i, 0, i);
  404880: 48 29 d0                     	subq	%rdx, %rax
  404883: 48 89 c7                     	movq	%rax, %rdi
  404886: 31 f6                        	xorl	%esi, %esi
  404888: e8 0f f2 ff ff               	callq	-3569 <memset>
; 		if (pp - p < pagesz) return pp - p;
  40488d: 48 89 c3                     	movq	%rax, %rbx
  404890: 4c 29 fb                     	subq	%r15, %rbx
  404893: ba 00 10 00 00               	movl	$4096, %edx
  404898: 48 81 fb ff 0f 00 00         	cmpq	$4095, %rbx
  40489f: 0f 86 62 ff ff ff            	jbe	-158 <calloc+0x47>
; 		        if (((T *)pp)[-1] | ((T *)pp)[-2])
  4048a5: 48 8b 48 f0                  	movq	-16(%rax), %rcx
  4048a9: 48 0b 48 f8                  	orq	-8(%rax), %rcx
  4048ad: 75 d1                        	jne	-47 <calloc+0xc0>
  4048af: 48 83 c0 f0                  	addq	$-16, %rax
; 		for (i = pagesz; i; i -= 2*sizeof(T), pp -= 2*sizeof(T))
  4048b3: 48 83 c2 f0                  	addq	$-16, %rdx
  4048b7: 75 ec                        	jne	-20 <calloc+0xe5>
  4048b9: eb b6                        	jmp	-74 <calloc+0xb1>
  4048bb: 0f 1f 44 00 00               	nopl	(%rax,%rax)

00000000004048c0 realloc:
; {
  4048c0: 55                           	pushq	%rbp
  4048c1: 41 57                        	pushq	%r15
  4048c3: 53                           	pushq	%rbx
  4048c4: 48 83 ec 40                  	subq	$64, %rsp
  4048c8: 48 89 f2                     	movq	%rsi, %rdx
  4048cb: 48 89 7c 24 08               	movq	%rdi, 8(%rsp)
; 	if (!p) return malloc(n);
  4048d0: 48 85 ff                     	testq	%rdi, %rdi
  4048d3: 74 28                        	je	40 <realloc+0x3d>
; 	if (*n-1 > PTRDIFF_MAX - SIZE_ALIGN - PAGE_SIZE) {
  4048d5: 48 8d 42 ff                  	leaq	-1(%rdx), %rax
  4048d9: 48 b9 e0 ef ff ff ff ff ff 7f	movabsq	$9223372036854771680, %rcx
  4048e3: 48 39 c8                     	cmpq	%rcx, %rax
  4048e6: 72 25                        	jb	37 <realloc+0x4d>
; 		if (*n) {
  4048e8: 48 85 d2                     	testq	%rdx, %rdx
  4048eb: 74 2a                        	je	42 <realloc+0x57>
; 			errno = ENOMEM;
  4048ed: e8 0a f6 ff ff               	callq	-2550 <__errno_location>
  4048f2: c7 00 0c 00 00 00            	movl	$12, (%rax)
  4048f8: e9 96 03 00 00               	jmp	918 <realloc+0x3d3>
; 	if (!p) return malloc(n);
  4048fd: 48 89 d7                     	movq	%rdx, %rdi
  404900: 48 83 c4 40                  	addq	$64, %rsp
  404904: 5b                           	popq	%rbx
  404905: 41 5f                        	popq	%r15
  404907: 5d                           	popq	%rbp
  404908: e9 c3 f6 ff ff               	jmp	-2365 <malloc>
; 	*n = (*n + OVERHEAD + SIZE_ALIGN - 1) & SIZE_MASK;
  40490d: 48 83 c2 2f                  	addq	$47, %rdx
  404911: 48 83 e2 e0                  	andq	$-32, %rdx
  404915: eb 05                        	jmp	5 <realloc+0x5c>
  404917: ba 20 00 00 00               	movl	$32, %edx
  40491c: 48 8b 44 24 08               	movq	8(%rsp), %rax
; 	self = MEM_TO_CHUNK(p);
  404921: 4c 8d 40 f0                  	leaq	-16(%rax), %r8
; 	n1 = n0 = CHUNK_SIZE(self);
  404925: 48 8b 40 f8                  	movq	-8(%rax), %rax
  404929: 48 89 c1                     	movq	%rax, %rcx
  40492c: 48 83 e1 fe                  	andq	$-2, %rcx
; 	if (IS_MMAPPED(self)) {
  404930: a8 01                        	testb	$1, %al
  404932: 4c 89 44 24 18               	movq	%r8, 24(%rsp)
  404937: 48 89 4c 24 10               	movq	%rcx, 16(%rsp)
  40493c: 0f 85 98 00 00 00            	jne	152 <realloc+0x11a>
; 		size_t extra = self->psize;
  404942: 4d 8b 38                     	movq	(%r8), %r15
; 		size_t newlen = n + extra;
  404945: 49 8d 2c 17                  	leaq	(%r15,%rdx), %rbp
; 		if (extra & 1) a_crash();
  404949: 41 f6 c7 01                  	testb	$1, %r15b
  40494d: 74 01                        	je	1 <realloc+0x90>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  40494f: f4                           	hlt
; 		if (newlen < PAGE_SIZE && (new = malloc(n-OVERHEAD))) {
  404950: 48 81 fd ff 0f 00 00         	cmpq	$4095, %rbp
  404957: 77 25                        	ja	37 <realloc+0xbe>
  404959: 48 8d 7a f0                  	leaq	-16(%rdx), %rdi
  40495d: 48 89 7c 24 20               	movq	%rdi, 32(%rsp)
  404962: 48 89 d3                     	movq	%rdx, %rbx
  404965: e8 66 f6 ff ff               	callq	-2458 <malloc>
  40496a: 48 89 da                     	movq	%rbx, %rdx
  40496d: 48 89 c3                     	movq	%rax, %rbx
  404970: 48 8b 44 24 20               	movq	32(%rsp), %rax
  404975: 48 85 db                     	testq	%rbx, %rbx
  404978: 0f 85 da 02 00 00            	jne	730 <realloc+0x398>
  40497e: 48 8b 44 24 10               	movq	16(%rsp), %rax
  404983: 49 8d 34 07                  	leaq	(%r15,%rax), %rsi
; 		newlen = (newlen + PAGE_SIZE-1) & -PAGE_SIZE;
  404987: 48 81 c5 ff 0f 00 00         	addq	$4095, %rbp
  40498e: 48 81 e5 00 f0 ff ff         	andq	$-4096, %rbp
; 		if (oldlen == newlen) return p;
  404995: 48 39 ee                     	cmpq	%rbp, %rsi
  404998: 0f 84 37 03 00 00            	je	823 <realloc+0x415>
  40499e: 48 8b 7c 24 18               	movq	24(%rsp), %rdi
  4049a3: 4c 29 ff                     	subq	%r15, %rdi
  4049a6: 48 89 d3                     	movq	%rdx, %rbx
; 		base = __mremap(base, oldlen, newlen, MREMAP_MAYMOVE);
  4049a9: 48 89 ea                     	movq	%rbp, %rdx
  4049ac: b9 01 00 00 00               	movl	$1, %ecx
  4049b1: 31 c0                        	xorl	%eax, %eax
  4049b3: e8 8d 0b 00 00               	callq	2957 <mremap>
  4049b8: 48 89 df                     	movq	%rbx, %rdi
; 		if (base == (void *)-1)
  4049bb: 48 83 f8 ff                  	cmpq	$-1, %rax
  4049bf: 0f 84 79 02 00 00            	je	633 <realloc+0x37e>
; 		self->csize = newlen - extra;
  4049c5: 4c 29 fd                     	subq	%r15, %rbp
  4049c8: 4a 89 6c 38 08               	movq	%rbp, 8(%rax,%r15)
; 		return CHUNK_TO_MEM(self);
  4049cd: 4a 8d 1c 38                  	leaq	(%rax,%r15), %rbx
  4049d1: 48 83 c3 10                  	addq	$16, %rbx
  4049d5: e9 0c 03 00 00               	jmp	780 <realloc+0x426>
; 	next = NEXT_CHUNK(self);
  4049da: 49 8d 2c 08                  	leaq	(%r8,%rcx), %rbp
; 	if (next->psize != self->csize) a_crash();
  4049de: 49 39 04 08                  	cmpq	%rax, (%r8,%rcx)
  4049e2: 74 01                        	je	1 <realloc+0x125>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  4049e4: f4                           	hlt
  4049e5: 48 89 c8                     	movq	%rcx, %rax
  4049e8: 48 89 54 24 28               	movq	%rdx, 40(%rsp)
; 	if (n > n1 && alloc_fwd(next)) {
  4049ed: 48 39 ca                     	cmpq	%rcx, %rdx
  4049f0: 0f 86 2a 02 00 00            	jbe	554 <realloc+0x360>
; 	while (!((k=c->csize) & C_INUSE)) {
  4049f6: 48 8b 4d 08                  	movq	8(%rbp), %rcx
  4049fa: 48 8b 44 24 10               	movq	16(%rsp), %rax
  4049ff: f6 c1 01                     	testb	$1, %cl
  404a02: 0f 85 18 02 00 00            	jne	536 <realloc+0x360>
  404a08: 48 89 6c 24 38               	movq	%rbp, 56(%rsp)
  404a0d: eb 0e                        	jmp	14 <realloc+0x15d>
  404a0f: 90                           	nop
  404a10: 48 8b 4d 08                  	movq	8(%rbp), %rcx
  404a14: f6 c1 01                     	testb	$1, %cl
  404a17: 0f 85 fe 01 00 00            	jne	510 <realloc+0x35b>
; 	x = x / SIZE_ALIGN - 1;
  404a1d: 48 89 c8                     	movq	%rcx, %rax
  404a20: 48 c1 e8 05                  	shrq	$5, %rax
  404a24: 48 83 c0 ff                  	addq	$-1, %rax
; 	if (x <= 32) return x;
  404a28: 48 83 f8 20                  	cmpq	$32, %rax
  404a2c: 48 89 4c 24 20               	movq	%rcx, 32(%rsp)
  404a31: 77 0d                        	ja	13 <realloc+0x180>
  404a33: 89 c1                        	movl	%eax, %ecx
  404a35: eb 49                        	jmp	73 <realloc+0x1c0>
  404a37: 66 0f 1f 84 00 00 00 00 00   	nopw	(%rax,%rax)
; 	if (x < 512) return bin_tab[x/8-4];
  404a40: 48 3d ff 01 00 00            	cmpq	$511, %rax
  404a46: 77 18                        	ja	24 <realloc+0x1a0>
  404a48: 48 c1 e8 03                  	shrq	$3, %rax
  404a4c: 0f b6 88 6c 79 40 00         	movzbl	4225388(%rax), %ecx
  404a53: eb 2b                        	jmp	43 <realloc+0x1c0>
  404a55: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  404a5f: 90                           	nop
  404a60: b9 3f 00 00 00               	movl	$63, %ecx
; 	if (x > 0x1c00) return 63;
  404a65: 48 3d 00 1c 00 00            	cmpq	$7168, %rax
  404a6b: 77 13                        	ja	19 <realloc+0x1c0>
; 	return bin_tab[x/128-4] + 16;
  404a6d: 48 c1 e8 07                  	shrq	$7, %rax
  404a71: 0f b6 88 6c 79 40 00         	movzbl	4225388(%rax), %ecx
  404a78: 83 c1 10                     	addl	$16, %ecx
  404a7b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
; 	lock(mal.bins[i].lock);
  404a80: 48 63 c1                     	movslq	%ecx, %rax
  404a83: 48 89 44 24 30               	movq	%rax, 48(%rsp)
  404a88: 48 8d 1c 40                  	leaq	(%rax,%rax,2), %rbx
  404a8c: 4c 8d 3c dd 20 98 40 00      	leaq	4233248(,%rbx,8), %r15
; 	if (libc.threads_minus_1)
  404a94: 83 3d c1 83 08 00 00         	cmpl	$0, 558017(%rip)
  404a9b: 74 44                        	je	68 <realloc+0x221>
; 	__asm__ __volatile__(
  404a9d: b8 01 00 00 00               	movl	$1, %eax
  404aa2: 41 87 07                     	xchgl	%eax, (%r15)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404aa5: 85 c0                        	testl	%eax, %eax
  404aa7: 74 38                        	je	56 <realloc+0x221>
  404aa9: 48 8d 2c dd 24 98 40 00      	leaq	4233252(,%rbx,8), %rbp
  404ab1: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  404abb: 0f 1f 44 00 00               	nopl	(%rax,%rax)
  404ac0: 4c 89 ff                     	movq	%r15, %rdi
  404ac3: 48 89 ee                     	movq	%rbp, %rsi
  404ac6: ba 01 00 00 00               	movl	$1, %edx
  404acb: b9 01 00 00 00               	movl	$1, %ecx
  404ad0: e8 c3 13 00 00               	callq	5059 <__wait>
; 	__asm__ __volatile__(
  404ad5: b8 01 00 00 00               	movl	$1, %eax
  404ada: 41 87 07                     	xchgl	%eax, (%r15)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404add: 85 c0                        	testl	%eax, %eax
  404adf: 75 df                        	jne	-33 <realloc+0x200>
; 	if (!mal.bins[i].head)
  404ae1: 48 83 3c dd 28 98 40 00 00   	cmpq	$0, 4233256(,%rbx,8)
  404aea: 75 17                        	jne	23 <realloc+0x243>
  404aec: 48 8d 04 dd 28 98 40 00      	leaq	4233256(,%rbx,8), %rax
; 		mal.bins[i].head = mal.bins[i].tail = BIN_TO_CHUNK(i);
  404af4: 48 8d 48 f0                  	leaq	-16(%rax), %rcx
  404af8: 48 89 0c dd 30 98 40 00      	movq	%rcx, 4233264(,%rbx,8)
  404b00: 48 89 08                     	movq	%rcx, (%rax)
  404b03: 48 8b 6c 24 38               	movq	56(%rsp), %rbp
  404b08: 48 8b 54 24 20               	movq	32(%rsp), %rdx
; 		if (c->csize == k) {
  404b0d: 48 39 55 08                  	cmpq	%rdx, 8(%rbp)
  404b11: 4c 8b 44 24 18               	movq	24(%rsp), %r8
  404b16: 74 59                        	je	89 <realloc+0x2b1>
; 	if (lk[0]) {
  404b18: 41 83 3f 00                  	cmpl	$0, (%r15)
  404b1c: 0f 84 ee fe ff ff            	je	-274 <realloc+0x150>
; 	__asm__ __volatile__(
  404b22: 31 c0                        	xorl	%eax, %eax
  404b24: 41 89 07                     	movl	%eax, (%r15)
  404b27: f0                           	lock
  404b28: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  404b2c: 83 3c dd 24 98 40 00 00      	cmpl	$0, 4233252(,%rbx,8)
  404b34: 0f 84 d6 fe ff ff            	je	-298 <realloc+0x150>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404b3a: b8 ca 00 00 00               	movl	$202, %eax
  404b3f: be 81 00 00 00               	movl	$129, %esi
  404b44: ba 01 00 00 00               	movl	$1, %edx
  404b49: 4c 89 ff                     	movq	%r15, %rdi
  404b4c: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  404b4e: 48 83 f8 da                  	cmpq	$-38, %rax
  404b52: 0f 85 b8 fe ff ff            	jne	-328 <realloc+0x150>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404b58: b8 ca 00 00 00               	movl	$202, %eax
  404b5d: be 01 00 00 00               	movl	$1, %esi
  404b62: ba 01 00 00 00               	movl	$1, %edx
  404b67: 4c 89 ff                     	movq	%r15, %rdi
  404b6a: 0f 05                        	syscall
  404b6c: e9 9f fe ff ff               	jmp	-353 <realloc+0x150>
; 	if (c->prev == c->next)
  404b71: 48 8b 4d 10                  	movq	16(%rbp), %rcx
  404b75: 48 8b 45 18                  	movq	24(%rbp), %rax
  404b79: 48 39 c8                     	cmpq	%rcx, %rax
  404b7c: 75 23                        	jne	35 <realloc+0x2e1>
  404b7e: 48 c7 c0 fe ff ff ff         	movq	$-2, %rax
  404b85: 48 8b 4c 24 30               	movq	48(%rsp), %rcx
; 		a_and_64(&mal.binmap, ~(1ULL<<i));
  404b8a: 48 d3 c0                     	rolq	%cl, %rax
; 	__asm__ __volatile(
  404b8d: f0                           	lock
  404b8e: 48 21 05 83 4c 00 00         	andq	%rax, 19587(%rip)
; 	c->csize |= C_INUSE;
  404b95: 48 8b 55 08                  	movq	8(%rbp), %rdx
; 	c->prev->next = c->next;
  404b99: 48 8b 4d 10                  	movq	16(%rbp), %rcx
  404b9d: 48 8b 45 18                  	movq	24(%rbp), %rax
  404ba1: 48 89 48 10                  	movq	%rcx, 16(%rax)
; 	c->next->prev = c->prev;
  404ba5: 48 8b 4d 10                  	movq	16(%rbp), %rcx
  404ba9: 48 89 41 18                  	movq	%rax, 24(%rcx)
; 	c->csize |= C_INUSE;
  404bad: 48 89 d0                     	movq	%rdx, %rax
  404bb0: 48 83 c8 01                  	orq	$1, %rax
  404bb4: 48 89 45 08                  	movq	%rax, 8(%rbp)
; 	NEXT_CHUNK(c)->psize |= C_INUSE;
  404bb8: 48 83 e2 fe                  	andq	$-2, %rdx
  404bbc: 80 4c 15 00 01               	orb	$1, (%rbp,%rdx)
; 	if (lk[0]) {
  404bc1: 41 83 3f 00                  	cmpl	$0, (%r15)
  404bc5: 74 42                        	je	66 <realloc+0x349>
  404bc7: 31 c0                        	xorl	%eax, %eax
; 	__asm__ __volatile__(
  404bc9: 41 89 07                     	movl	%eax, (%r15)
  404bcc: f0                           	lock
  404bcd: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  404bd1: 83 3c dd 24 98 40 00 00      	cmpl	$0, 4233252(,%rbx,8)
  404bd9: 74 2e                        	je	46 <realloc+0x349>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404bdb: b8 ca 00 00 00               	movl	$202, %eax
  404be0: be 81 00 00 00               	movl	$129, %esi
  404be5: ba 01 00 00 00               	movl	$1, %edx
  404bea: 4c 89 ff                     	movq	%r15, %rdi
  404bed: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  404bef: 48 83 f8 da                  	cmpq	$-38, %rax
  404bf3: 75 14                        	jne	20 <realloc+0x349>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404bf5: b8 ca 00 00 00               	movl	$202, %eax
  404bfa: be 01 00 00 00               	movl	$1, %esi
  404bff: ba 01 00 00 00               	movl	$1, %edx
  404c04: 4c 89 ff                     	movq	%r15, %rdi
  404c07: 0f 05                        	syscall
; 		n1 += CHUNK_SIZE(next);
  404c09: 48 8b 45 08                  	movq	8(%rbp), %rax
  404c0d: 48 83 e0 fe                  	andq	$-2, %rax
; 		next = NEXT_CHUNK(next);
  404c11: 48 01 c5                     	addq	%rax, %rbp
; 		n1 += CHUNK_SIZE(next);
  404c14: 48 03 44 24 10               	addq	16(%rsp), %rax
  404c19: eb 05                        	jmp	5 <realloc+0x360>
  404c1b: 48 8b 44 24 10               	movq	16(%rsp), %rax
; 	self->csize = n1 | C_INUSE;
  404c20: 48 89 c1                     	movq	%rax, %rcx
  404c23: 48 83 c9 01                  	orq	$1, %rcx
  404c27: 48 8b 54 24 08               	movq	8(%rsp), %rdx
  404c2c: 48 89 4a f8                  	movq	%rcx, -8(%rdx)
; 	next->psize = n1 | C_INUSE;
  404c30: 48 89 4d 00                  	movq	%rcx, (%rbp)
  404c34: 48 8b 7c 24 28               	movq	40(%rsp), %rdi
; 	if (n <= n1) {
  404c39: 48 39 c7                     	cmpq	%rax, %rdi
  404c3c: 76 59                        	jbe	89 <realloc+0x3d7>
; 	new = malloc(n-OVERHEAD);
  404c3e: 48 83 c7 f0                  	addq	$-16, %rdi
  404c42: e8 89 f3 ff ff               	callq	-3191 <malloc>
; 	if (!new) return 0;
  404c47: 48 85 c0                     	testq	%rax, %rax
  404c4a: 74 47                        	je	71 <realloc+0x3d3>
  404c4c: 48 89 c3                     	movq	%rax, %rbx
  404c4f: 48 8b 44 24 10               	movq	16(%rsp), %rax
; 	memcpy(new, p, n0-OVERHEAD);
  404c54: 48 83 c0 f0                  	addq	$-16, %rax
  404c58: 48 89 df                     	movq	%rbx, %rdi
  404c5b: 48 8b 6c 24 08               	movq	8(%rsp), %rbp
  404c60: 48 89 ee                     	movq	%rbp, %rsi
  404c63: 48 89 c2                     	movq	%rax, %rdx
  404c66: e8 f9 11 00 00               	callq	4601 <memcpy>
; 	if (IS_MMAPPED(self))
  404c6b: 48 8b 75 f8                  	movq	-8(%rbp), %rsi
  404c6f: 40 f6 c6 01                  	testb	$1, %sil
  404c73: 75 67                        	jne	103 <realloc+0x41c>
  404c75: 48 8b 7c 24 18               	movq	24(%rsp), %rdi
; 	size_t extra = self->psize;
  404c7a: 48 8b 07                     	movq	(%rdi), %rax
; 	char *base = (char *)self - extra;
  404c7d: 48 29 c7                     	subq	%rax, %rdi
; 	size_t len = CHUNK_SIZE(self) + extra;
  404c80: 48 83 e6 fe                  	andq	$-2, %rsi
  404c84: 48 01 c6                     	addq	%rax, %rsi
; 	if (extra & 1) a_crash();
  404c87: a8 01                        	testb	$1, %al
  404c89: 74 01                        	je	1 <realloc+0x3cc>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  404c8b: f4                           	hlt
; 	__munmap(base, len);
  404c8c: e8 d0 09 00 00               	callq	2512 <munmap>
  404c91: eb 53                        	jmp	83 <realloc+0x426>
  404c93: 31 db                        	xorl	%ebx, %ebx
  404c95: eb 4f                        	jmp	79 <realloc+0x426>
; 	size_t n1 = CHUNK_SIZE(self);
  404c97: 48 83 e0 fe                  	andq	$-2, %rax
; 	if (n >= n1 - DONTCARE) return;
  404c9b: 48 8d 48 f0                  	leaq	-16(%rax), %rcx
  404c9f: 48 39 f9                     	cmpq	%rdi, %rcx
  404ca2: 76 31                        	jbe	49 <realloc+0x415>
; 	split = (void *)((char *)self + n);
  404ca4: 49 01 f8                     	addq	%rdi, %r8
; 	split->psize = n | C_INUSE;
  404ca7: 48 89 f9                     	movq	%rdi, %rcx
  404caa: 48 83 c9 01                  	orq	$1, %rcx
  404cae: 48 8b 5c 24 08               	movq	8(%rsp), %rbx
  404cb3: 48 89 4c 3b f0               	movq	%rcx, -16(%rbx,%rdi)
; 	split->csize = n1-n | C_INUSE;
  404cb8: 48 89 c2                     	movq	%rax, %rdx
  404cbb: 48 29 fa                     	subq	%rdi, %rdx
  404cbe: 48 83 ca 01                  	orq	$1, %rdx
  404cc2: 48 89 54 3b f8               	movq	%rdx, -8(%rbx,%rdi)
; 	next->psize = n1-n | C_INUSE;
  404cc7: 48 89 54 03 f0               	movq	%rdx, -16(%rbx,%rax)
; 	self->csize = n | C_INUSE;
  404ccc: 48 89 4b f8                  	movq	%rcx, -8(%rbx)
; 	__bin_chunk(split);
  404cd0: 4c 89 c7                     	movq	%r8, %rdi
  404cd3: eb 0c                        	jmp	12 <realloc+0x421>
  404cd5: 48 8b 5c 24 08               	movq	8(%rsp), %rbx
  404cda: eb 0a                        	jmp	10 <realloc+0x426>
  404cdc: 48 8b 7c 24 18               	movq	24(%rsp), %rdi
  404ce1: e8 4a 00 00 00               	callq	74 <__bin_chunk>
; }
  404ce6: 48 89 d8                     	movq	%rbx, %rax
  404ce9: 48 83 c4 40                  	addq	$64, %rsp
  404ced: 5b                           	popq	%rbx
  404cee: 41 5f                        	popq	%r15
  404cf0: 5d                           	popq	%rbp
  404cf1: c3                           	retq
  404cf2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00    	nopw	%cs:(%rax,%rax)

0000000000404d00 free:
; 	if (!p) return;
  404d00: 48 85 ff                     	testq	%rdi, %rdi
  404d03: 74 25                        	je	37 <free+0x2a>
; 	if (IS_MMAPPED(self))
  404d05: 48 8b 77 f8                  	movq	-8(%rdi), %rsi
; 	struct chunk *self = MEM_TO_CHUNK(p);
  404d09: 48 83 c7 f0                  	addq	$-16, %rdi
; 	if (IS_MMAPPED(self))
  404d0d: 40 f6 c6 01                  	testb	$1, %sil
  404d11: 75 18                        	jne	24 <free+0x2b>
; 	size_t extra = self->psize;
  404d13: 48 8b 07                     	movq	(%rdi), %rax
; 	char *base = (char *)self - extra;
  404d16: 48 29 c7                     	subq	%rax, %rdi
; 	size_t len = CHUNK_SIZE(self) + extra;
  404d19: 48 83 e6 fe                  	andq	$-2, %rsi
  404d1d: 48 01 c6                     	addq	%rax, %rsi
; 	if (extra & 1) a_crash();
  404d20: a8 01                        	testb	$1, %al
  404d22: 74 01                        	je	1 <free+0x25>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  404d24: f4                           	hlt
; 	__munmap(base, len);
  404d25: e9 37 09 00 00               	jmp	2359 <munmap>
; }
  404d2a: c3                           	retq
; 		__bin_chunk(self);
  404d2b: e9 00 00 00 00               	jmp	0 <__bin_chunk>

0000000000404d30 __bin_chunk:
; {
  404d30: 55                           	pushq	%rbp
  404d31: 41 57                        	pushq	%r15
  404d33: 53                           	pushq	%rbx
  404d34: 48 83 ec 40                  	subq	$64, %rsp
; 	struct chunk *next = NEXT_CHUNK(self);
  404d38: 48 8b 47 08                  	movq	8(%rdi), %rax
  404d3c: 48 89 c1                     	movq	%rax, %rcx
  404d3f: 48 83 e1 fe                  	andq	$-2, %rcx
  404d43: 48 89 4c 24 28               	movq	%rcx, 40(%rsp)
; 	if (next->psize != self->csize) a_crash();
  404d48: 48 39 04 0f                  	cmpq	%rax, (%rdi,%rcx)
  404d4c: 74 01                        	je	1 <__bin_chunk+0x1f>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  404d4e: f4                           	hlt
  404d4f: 48 89 7c 24 10               	movq	%rdi, 16(%rsp)
  404d54: 48 8b 4c 24 28               	movq	40(%rsp), %rcx
  404d59: 4c 8d 04 0f                  	leaq	(%rdi,%rcx), %r8
  404d5d: 31 c0                        	xorl	%eax, %eax
  404d5f: 48 89 4c 24 18               	movq	%rcx, 24(%rsp)
  404d64: eb 44                        	jmp	68 <__bin_chunk+0x7a>
  404d66: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
; 			size = CHUNK_SIZE(next);
  404d70: 49 8b 48 08                  	movq	8(%r8), %rcx
  404d74: 48 83 e1 fe                  	andq	$-2, %rcx
; 			final_size += size;
  404d78: 48 01 4c 24 18               	addq	%rcx, 24(%rsp)
  404d7d: 48 8b 44 24 28               	movq	40(%rsp), %rax
; 			if (new_size+size > RECLAIM && (new_size+size^size) > size)
  404d82: 48 8d 14 01                  	leaq	(%rcx,%rax), %rdx
  404d86: 48 89 d0                     	movq	%rdx, %rax
  404d89: 48 31 c8                     	xorq	%rcx, %rax
  404d8c: 48 39 c8                     	cmpq	%rcx, %rax
  404d8f: 8b 74 24 0c                  	movl	12(%rsp), %esi
  404d93: 89 f0                        	movl	%esi, %eax
  404d95: bf 01 00 00 00               	movl	$1, %edi
  404d9a: 0f 47 c7                     	cmoval	%edi, %eax
  404d9d: 48 81 fa 00 80 02 00         	cmpq	$163840, %rdx
  404da4: 0f 46 c6                     	cmovbel	%esi, %eax
; 			next = NEXT_CHUNK(next);
  404da7: 49 01 c8                     	addq	%rcx, %r8
  404daa: 89 44 24 0c                  	movl	%eax, 12(%rsp)
  404dae: 4c 89 44 24 20               	movq	%r8, 32(%rsp)
  404db3: 48 8b 5c 24 10               	movq	16(%rsp), %rbx
; 		if (self->psize & next->csize & C_INUSE) {
  404db8: 8b 03                        	movl	(%rbx), %eax
  404dba: 41 23 40 08                  	andl	8(%r8), %eax
  404dbe: a8 01                        	testb	$1, %al
  404dc0: 0f 84 0a 02 00 00            	je	522 <__bin_chunk+0x2a0>
  404dc6: 48 8b 4c 24 18               	movq	24(%rsp), %rcx
; 			self->csize = final_size | C_INUSE;
  404dcb: 48 89 c8                     	movq	%rcx, %rax
  404dce: 48 83 c8 01                  	orq	$1, %rax
  404dd2: 48 89 43 08                  	movq	%rax, 8(%rbx)
; 			next->psize = final_size | C_INUSE;
  404dd6: 49 89 00                     	movq	%rax, (%r8)
; 	x = x / SIZE_ALIGN - 1;
  404dd9: 48 89 c8                     	movq	%rcx, %rax
  404ddc: 48 c1 e8 05                  	shrq	$5, %rax
  404de0: 48 83 c0 ff                  	addq	$-1, %rax
; 	if (x <= 32) return x;
  404de4: 48 83 f8 20                  	cmpq	$32, %rax
  404de8: 77 06                        	ja	6 <__bin_chunk+0xc0>
  404dea: 89 c1                        	movl	%eax, %ecx
  404dec: eb 32                        	jmp	50 <__bin_chunk+0xf0>
  404dee: 66 90                        	nop
; 	if (x < 512) return bin_tab[x/8-4];
  404df0: 48 3d ff 01 00 00            	cmpq	$511, %rax
  404df6: 77 0d                        	ja	13 <__bin_chunk+0xd5>
  404df8: 48 c1 e8 03                  	shrq	$3, %rax
  404dfc: 0f b6 88 6c 79 40 00         	movzbl	4225388(%rax), %ecx
  404e03: eb 1b                        	jmp	27 <__bin_chunk+0xf0>
  404e05: b9 3f 00 00 00               	movl	$63, %ecx
; 	if (x > 0x1c00) return 63;
  404e0a: 48 3d 00 1c 00 00            	cmpq	$7168, %rax
  404e10: 77 0e                        	ja	14 <__bin_chunk+0xf0>
; 	return bin_tab[x/128-4] + 16;
  404e12: 48 c1 e8 07                  	shrq	$7, %rax
  404e16: 0f b6 88 6c 79 40 00         	movzbl	4225388(%rax), %ecx
  404e1d: 83 c1 10                     	addl	$16, %ecx
; 	lock(mal.bins[i].lock);
  404e20: 48 63 c1                     	movslq	%ecx, %rax
  404e23: 48 89 44 24 30               	movq	%rax, 48(%rsp)
  404e28: 4c 8d 3c 40                  	leaq	(%rax,%rax,2), %r15
  404e2c: 4a 8d 2c fd 20 98 40 00      	leaq	4233248(,%r15,8), %rbp
; 	if (libc.threads_minus_1)
  404e34: 83 3d 21 80 08 00 00         	cmpl	$0, 557089(%rip)
  404e3b: 74 44                        	je	68 <__bin_chunk+0x151>
; 	__asm__ __volatile__(
  404e3d: b8 01 00 00 00               	movl	$1, %eax
  404e42: 87 45 00                     	xchgl	%eax, (%rbp)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404e45: 85 c0                        	testl	%eax, %eax
  404e47: 74 38                        	je	56 <__bin_chunk+0x151>
  404e49: 4a 8d 1c fd 24 98 40 00      	leaq	4233252(,%r15,8), %rbx
  404e51: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  404e5b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
  404e60: 48 89 ef                     	movq	%rbp, %rdi
  404e63: 48 89 de                     	movq	%rbx, %rsi
  404e66: ba 01 00 00 00               	movl	$1, %edx
  404e6b: b9 01 00 00 00               	movl	$1, %ecx
  404e70: e8 23 10 00 00               	callq	4131 <__wait>
; 	__asm__ __volatile__(
  404e75: b8 01 00 00 00               	movl	$1, %eax
  404e7a: 87 45 00                     	xchgl	%eax, (%rbp)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404e7d: 85 c0                        	testl	%eax, %eax
  404e7f: 75 df                        	jne	-33 <__bin_chunk+0x130>
; 	if (!mal.bins[i].head)
  404e81: 4a 8d 0c fd 28 98 40 00      	leaq	4233256(,%r15,8), %rcx
  404e89: 4a 83 3c fd 28 98 40 00 00   	cmpq	$0, 4233256(,%r15,8)
  404e92: 74 1c                        	je	28 <__bin_chunk+0x180>
  404e94: 48 89 4c 24 38               	movq	%rcx, 56(%rsp)
; 	if (libc.threads_minus_1)
  404e99: 83 3d bc 7f 08 00 00         	cmpl	$0, 556988(%rip)
  404ea0: 48 8b 5c 24 10               	movq	16(%rsp), %rbx
  404ea5: 75 2b                        	jne	43 <__bin_chunk+0x1a2>
  404ea7: eb 6f                        	jmp	111 <__bin_chunk+0x1e8>
  404ea9: 0f 1f 80 00 00 00 00         	nopl	(%rax)
; 		mal.bins[i].head = mal.bins[i].tail = BIN_TO_CHUNK(i);
  404eb0: 48 8d 41 f0                  	leaq	-16(%rcx), %rax
  404eb4: 4a 89 04 fd 30 98 40 00      	movq	%rax, 4233264(,%r15,8)
  404ebc: 48 89 01                     	movq	%rax, (%rcx)
  404ebf: 48 89 4c 24 38               	movq	%rcx, 56(%rsp)
; 	if (libc.threads_minus_1)
  404ec4: 83 3d 91 7f 08 00 00         	cmpl	$0, 556945(%rip)
  404ecb: 48 8b 5c 24 10               	movq	16(%rsp), %rbx
  404ed0: 74 46                        	je	70 <__bin_chunk+0x1e8>
; 	__asm__ __volatile__(
  404ed2: b8 01 00 00 00               	movl	$1, %eax
  404ed7: 87 05 43 4f 00 00            	xchgl	%eax, 20291(%rip)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404edd: 85 c0                        	testl	%eax, %eax
  404edf: 74 37                        	je	55 <__bin_chunk+0x1e8>
  404ee1: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  404eeb: 0f 1f 44 00 00               	nopl	(%rax,%rax)
  404ef0: bf 20 9e 40 00               	movl	$4234784, %edi
  404ef5: be 24 9e 40 00               	movl	$4234788, %esi
  404efa: ba 01 00 00 00               	movl	$1, %edx
  404eff: b9 01 00 00 00               	movl	$1, %ecx
  404f04: e8 8f 0f 00 00               	callq	3983 <__wait>
; 	__asm__ __volatile__(
  404f09: b8 01 00 00 00               	movl	$1, %eax
  404f0e: 87 05 0c 4f 00 00            	xchgl	%eax, 20236(%rip)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404f14: 85 c0                        	testl	%eax, %eax
  404f16: 75 d8                        	jne	-40 <__bin_chunk+0x1c0>
; 			if (self->psize & next->csize & C_INUSE)
  404f18: 8b 03                        	movl	(%rbx), %eax
  404f1a: 48 8b 5c 24 20               	movq	32(%rsp), %rbx
  404f1f: 23 43 08                     	andl	8(%rbx), %eax
  404f22: a8 01                        	testb	$1, %al
  404f24: 0f 85 2f 03 00 00            	jne	815 <__bin_chunk+0x529>
; 	if (lk[0]) {
  404f2a: 83 3d ef 4e 00 00 00         	cmpl	$0, 20207(%rip)
  404f31: 74 4d                        	je	77 <__bin_chunk+0x250>
; 	__asm__ __volatile__(
  404f33: 31 c0                        	xorl	%eax, %eax
  404f35: 89 05 e5 4e 00 00            	movl	%eax, 20197(%rip)
  404f3b: f0                           	lock
  404f3c: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  404f40: 83 3d dd 4e 00 00 00         	cmpl	$0, 20189(%rip)
  404f47: 74 37                        	je	55 <__bin_chunk+0x250>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404f49: b8 ca 00 00 00               	movl	$202, %eax
  404f4e: bf 20 9e 40 00               	movl	$4234784, %edi
  404f53: be 81 00 00 00               	movl	$129, %esi
  404f58: ba 01 00 00 00               	movl	$1, %edx
  404f5d: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  404f5f: 48 83 f8 da                  	cmpq	$-38, %rax
  404f63: 75 1b                        	jne	27 <__bin_chunk+0x250>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404f65: b8 ca 00 00 00               	movl	$202, %eax
  404f6a: bf 20 9e 40 00               	movl	$4234784, %edi
  404f6f: be 01 00 00 00               	movl	$1, %esi
  404f74: ba 01 00 00 00               	movl	$1, %edx
  404f79: 0f 05                        	syscall
  404f7b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
; 	if (lk[0]) {
  404f80: 83 7d 00 00                  	cmpl	$0, (%rbp)
  404f84: 48 8b 5c 24 10               	movq	16(%rsp), %rbx
  404f89: 74 45                        	je	69 <__bin_chunk+0x2a0>
; 	__asm__ __volatile__(
  404f8b: 31 c0                        	xorl	%eax, %eax
  404f8d: 89 45 00                     	movl	%eax, (%rbp)
  404f90: f0                           	lock
  404f91: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  404f95: 42 83 3c fd 24 98 40 00 00   	cmpl	$0, 4233252(,%r15,8)
  404f9e: 74 30                        	je	48 <__bin_chunk+0x2a0>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404fa0: b8 ca 00 00 00               	movl	$202, %eax
  404fa5: be 81 00 00 00               	movl	$129, %esi
  404faa: ba 01 00 00 00               	movl	$1, %edx
  404faf: 48 89 ef                     	movq	%rbp, %rdi
  404fb2: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  404fb4: 48 83 f8 da                  	cmpq	$-38, %rax
  404fb8: 75 16                        	jne	22 <__bin_chunk+0x2a0>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404fba: b8 ca 00 00 00               	movl	$202, %eax
  404fbf: be 01 00 00 00               	movl	$1, %esi
  404fc4: ba 01 00 00 00               	movl	$1, %edx
  404fc9: 48 89 ef                     	movq	%rbp, %rdi
  404fcc: 0f 05                        	syscall
  404fce: 66 90                        	nop
; 		if (alloc_rev(self)) {
  404fd0: 48 89 df                     	movq	%rbx, %rdi
  404fd3: e8 c8 f5 ff ff               	callq	-2616 <alloc_rev>
  404fd8: 85 c0                        	testl	%eax, %eax
  404fda: 74 50                        	je	80 <__bin_chunk+0x2fc>
; 			self = PREV_CHUNK(self);
  404fdc: 48 8b 03                     	movq	(%rbx), %rax
  404fdf: 48 83 e0 fe                  	andq	$-2, %rax
  404fe3: 48 89 d9                     	movq	%rbx, %rcx
  404fe6: 48 29 c1                     	subq	%rax, %rcx
; 			size = CHUNK_SIZE(self);
  404fe9: 48 f7 d8                     	negq	%rax
  404fec: 48 8b 44 03 08               	movq	8(%rbx,%rax), %rax
  404ff1: 48 83 e0 fe                  	andq	$-2, %rax
; 			final_size += size;
  404ff5: 48 01 44 24 18               	addq	%rax, 24(%rsp)
  404ffa: 48 8b 54 24 28               	movq	40(%rsp), %rdx
; 			if (new_size+size > RECLAIM && (new_size+size^size) > size)
  404fff: 48 01 c2                     	addq	%rax, %rdx
  405002: 48 89 d6                     	movq	%rdx, %rsi
  405005: 48 31 c6                     	xorq	%rax, %rsi
  405008: 48 39 c6                     	cmpq	%rax, %rsi
  40500b: 8b 74 24 0c                  	movl	12(%rsp), %esi
  40500f: 89 f0                        	movl	%esi, %eax
  405011: bf 01 00 00 00               	movl	$1, %edi
  405016: 0f 47 c7                     	cmoval	%edi, %eax
  405019: 48 81 fa 00 80 02 00         	cmpq	$163840, %rdx
  405020: 0f 47 f0                     	cmoval	%eax, %esi
  405023: 89 74 24 0c                  	movl	%esi, 12(%rsp)
  405027: 48 89 4c 24 10               	movq	%rcx, 16(%rsp)
  40502c: 4c 8b 44 24 20               	movq	32(%rsp), %r8
  405031: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40503b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
; 	while (!((k=c->csize) & C_INUSE)) {
  405040: 49 8b 48 08                  	movq	8(%r8), %rcx
  405044: f6 c1 01                     	testb	$1, %cl
  405047: 0f 85 66 fd ff ff            	jne	-666 <__bin_chunk+0x83>
; 	x = x / SIZE_ALIGN - 1;
  40504d: 48 89 c8                     	movq	%rcx, %rax
  405050: 48 c1 e8 05                  	shrq	$5, %rax
  405054: 48 83 c0 ff                  	addq	$-1, %rax
; 	if (x <= 32) return x;
  405058: 48 83 f8 20                  	cmpq	$32, %rax
  40505c: 48 89 4c 24 38               	movq	%rcx, 56(%rsp)
  405061: 77 0d                        	ja	13 <__bin_chunk+0x340>
  405063: 89 c1                        	movl	%eax, %ecx
  405065: eb 49                        	jmp	73 <__bin_chunk+0x380>
  405067: 66 0f 1f 84 00 00 00 00 00   	nopw	(%rax,%rax)
; 	if (x < 512) return bin_tab[x/8-4];
  405070: 48 3d ff 01 00 00            	cmpq	$511, %rax
  405076: 77 18                        	ja	24 <__bin_chunk+0x360>
  405078: 48 c1 e8 03                  	shrq	$3, %rax
  40507c: 0f b6 88 6c 79 40 00         	movzbl	4225388(%rax), %ecx
  405083: eb 2b                        	jmp	43 <__bin_chunk+0x380>
  405085: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40508f: 90                           	nop
  405090: b9 3f 00 00 00               	movl	$63, %ecx
; 	if (x > 0x1c00) return 63;
  405095: 48 3d 00 1c 00 00            	cmpq	$7168, %rax
  40509b: 77 13                        	ja	19 <__bin_chunk+0x380>
; 	return bin_tab[x/128-4] + 16;
  40509d: 48 c1 e8 07                  	shrq	$7, %rax
  4050a1: 0f b6 88 6c 79 40 00         	movzbl	4225388(%rax), %ecx
  4050a8: 83 c1 10                     	addl	$16, %ecx
  4050ab: 0f 1f 44 00 00               	nopl	(%rax,%rax)
; 	lock(mal.bins[i].lock);
  4050b0: 48 63 c1                     	movslq	%ecx, %rax
  4050b3: 48 89 44 24 30               	movq	%rax, 48(%rsp)
  4050b8: 48 8d 04 40                  	leaq	(%rax,%rax,2), %rax
  4050bc: 48 89 c3                     	movq	%rax, %rbx
  4050bf: 48 8d 2c c5 20 98 40 00      	leaq	4233248(,%rax,8), %rbp
; 	if (libc.threads_minus_1)
  4050c7: 83 3d 8e 7d 08 00 00         	cmpl	$0, 556430(%rip)
  4050ce: 74 41                        	je	65 <__bin_chunk+0x3e1>
; 	__asm__ __volatile__(
  4050d0: b8 01 00 00 00               	movl	$1, %eax
  4050d5: 87 45 00                     	xchgl	%eax, (%rbp)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  4050d8: 85 c0                        	testl	%eax, %eax
  4050da: 74 35                        	je	53 <__bin_chunk+0x3e1>
  4050dc: 4c 8d 3c dd 24 98 40 00      	leaq	4233252(,%rbx,8), %r15
  4050e4: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  4050ee: 66 90                        	nop
  4050f0: 48 89 ef                     	movq	%rbp, %rdi
  4050f3: 4c 89 fe                     	movq	%r15, %rsi
  4050f6: ba 01 00 00 00               	movl	$1, %edx
  4050fb: b9 01 00 00 00               	movl	$1, %ecx
  405100: e8 93 0d 00 00               	callq	3475 <__wait>
; 	__asm__ __volatile__(
  405105: b8 01 00 00 00               	movl	$1, %eax
  40510a: 87 45 00                     	xchgl	%eax, (%rbp)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  40510d: 85 c0                        	testl	%eax, %eax
  40510f: 75 df                        	jne	-33 <__bin_chunk+0x3c0>
; 	if (!mal.bins[i].head)
  405111: 48 83 3c dd 28 98 40 00 00   	cmpq	$0, 4233256(,%rbx,8)
  40511a: 75 17                        	jne	23 <__bin_chunk+0x403>
  40511c: 48 8d 04 dd 28 98 40 00      	leaq	4233256(,%rbx,8), %rax
; 		mal.bins[i].head = mal.bins[i].tail = BIN_TO_CHUNK(i);
  405124: 48 8d 48 f0                  	leaq	-16(%rax), %rcx
  405128: 48 89 0c dd 30 98 40 00      	movq	%rcx, 4233264(,%rbx,8)
  405130: 48 89 08                     	movq	%rcx, (%rax)
  405133: 4c 8b 44 24 20               	movq	32(%rsp), %r8
  405138: 48 8b 74 24 38               	movq	56(%rsp), %rsi
; 		if (c->csize == k) {
  40513d: 49 39 70 08                  	cmpq	%rsi, 8(%r8)
  405141: 74 6d                        	je	109 <__bin_chunk+0x480>
; 	if (lk[0]) {
  405143: 83 7d 00 00                  	cmpl	$0, (%rbp)
  405147: 0f 84 f3 fe ff ff            	je	-269 <__bin_chunk+0x310>
; 	__asm__ __volatile__(
  40514d: 31 c0                        	xorl	%eax, %eax
  40514f: 89 45 00                     	movl	%eax, (%rbp)
  405152: f0                           	lock
  405153: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  405157: 83 3c dd 24 98 40 00 00      	cmpl	$0, 4233252(,%rbx,8)
  40515f: 0f 84 db fe ff ff            	je	-293 <__bin_chunk+0x310>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405165: b8 ca 00 00 00               	movl	$202, %eax
  40516a: be 81 00 00 00               	movl	$129, %esi
  40516f: ba 01 00 00 00               	movl	$1, %edx
  405174: 48 89 ef                     	movq	%rbp, %rdi
  405177: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  405179: 48 83 f8 da                  	cmpq	$-38, %rax
  40517d: 0f 85 bd fe ff ff            	jne	-323 <__bin_chunk+0x310>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405183: b8 ca 00 00 00               	movl	$202, %eax
  405188: be 01 00 00 00               	movl	$1, %esi
  40518d: ba 01 00 00 00               	movl	$1, %edx
  405192: 48 89 ef                     	movq	%rbp, %rdi
  405195: 0f 05                        	syscall
; 	while (!((k=c->csize) & C_INUSE)) {
  405197: 49 8b 48 08                  	movq	8(%r8), %rcx
  40519b: f6 c1 01                     	testb	$1, %cl
  40519e: 0f 84 a9 fe ff ff            	je	-343 <__bin_chunk+0x31d>
  4051a4: e9 0a fc ff ff               	jmp	-1014 <__bin_chunk+0x83>
  4051a9: 0f 1f 80 00 00 00 00         	nopl	(%rax)
; 	if (c->prev == c->next)
  4051b0: 49 8b 48 10                  	movq	16(%r8), %rcx
  4051b4: 49 8b 40 18                  	movq	24(%r8), %rax
  4051b8: 48 39 c8                     	cmpq	%rcx, %rax
  4051bb: 75 23                        	jne	35 <__bin_chunk+0x4b0>
; 		a_and_64(&mal.binmap, ~(1ULL<<i));
  4051bd: 48 c7 c0 fe ff ff ff         	movq	$-2, %rax
  4051c4: 48 8b 4c 24 30               	movq	48(%rsp), %rcx
  4051c9: 48 d3 c0                     	rolq	%cl, %rax
; 	__asm__ __volatile(
  4051cc: f0                           	lock
  4051cd: 48 21 05 44 46 00 00         	andq	%rax, 17988(%rip)
; 	c->csize |= C_INUSE;
  4051d4: 49 8b 70 08                  	movq	8(%r8), %rsi
; 	c->prev->next = c->next;
  4051d8: 49 8b 48 10                  	movq	16(%r8), %rcx
  4051dc: 49 8b 40 18                  	movq	24(%r8), %rax
  4051e0: 48 89 48 10                  	movq	%rcx, 16(%rax)
; 	c->next->prev = c->prev;
  4051e4: 49 8b 48 10                  	movq	16(%r8), %rcx
  4051e8: 48 89 41 18                  	movq	%rax, 24(%rcx)
; 	c->csize |= C_INUSE;
  4051ec: 48 89 f0                     	movq	%rsi, %rax
  4051ef: 48 83 c8 01                  	orq	$1, %rax
  4051f3: 49 89 40 08                  	movq	%rax, 8(%r8)
; 	NEXT_CHUNK(c)->psize |= C_INUSE;
  4051f7: 48 83 e6 fe                  	andq	$-2, %rsi
  4051fb: 41 80 0c 30 01               	orb	$1, (%r8,%rsi)
; 	if (lk[0]) {
  405200: 83 7d 00 00                  	cmpl	$0, (%rbp)
  405204: 0f 84 66 fb ff ff            	je	-1178 <__bin_chunk+0x40>
; 	__asm__ __volatile__(
  40520a: 31 c0                        	xorl	%eax, %eax
  40520c: 89 45 00                     	movl	%eax, (%rbp)
  40520f: f0                           	lock
  405210: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  405214: 83 3c dd 24 98 40 00 00      	cmpl	$0, 4233252(,%rbx,8)
  40521c: 0f 84 4e fb ff ff            	je	-1202 <__bin_chunk+0x40>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405222: b8 ca 00 00 00               	movl	$202, %eax
  405227: be 81 00 00 00               	movl	$129, %esi
  40522c: ba 01 00 00 00               	movl	$1, %edx
  405231: 48 89 ef                     	movq	%rbp, %rdi
  405234: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  405236: 48 83 f8 da                  	cmpq	$-38, %rax
  40523a: 0f 85 30 fb ff ff            	jne	-1232 <__bin_chunk+0x40>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405240: b8 ca 00 00 00               	movl	$202, %eax
  405245: be 01 00 00 00               	movl	$1, %esi
  40524a: ba 01 00 00 00               	movl	$1, %edx
  40524f: 48 89 ef                     	movq	%rbp, %rdi
  405252: 0f 05                        	syscall
  405254: e9 17 fb ff ff               	jmp	-1257 <__bin_chunk+0x40>
; 	if (!(mal.binmap & 1ULL<<i))
  405259: 48 8b 15 b8 45 00 00         	movq	17848(%rip), %rdx
  405260: b8 01 00 00 00               	movl	$1, %eax
  405265: 48 8b 4c 24 30               	movq	48(%rsp), %rcx
  40526a: 48 d3 e0                     	shlq	%cl, %rax
  40526d: 48 0f a3 ca                  	btq	%rcx, %rdx
  405271: 72 08                        	jb	8 <__bin_chunk+0x54b>
; 	__asm__ __volatile__(
  405273: f0                           	lock
  405274: 48 09 05 9d 45 00 00         	orq	%rax, 17821(%rip)
  40527b: 48 8b 44 24 10               	movq	16(%rsp), %rax
  405280: 48 8b 4c 24 18               	movq	24(%rsp), %rcx
; 	self->csize = final_size;
  405285: 48 89 48 08                  	movq	%rcx, 8(%rax)
; 	next->psize = final_size;
  405289: 48 89 0b                     	movq	%rcx, (%rbx)
; 	if (lk[0]) {
  40528c: 83 3d 8d 4b 00 00 00         	cmpl	$0, 19341(%rip)
  405293: 74 48                        	je	72 <__bin_chunk+0x5ad>
  405295: 31 c0                        	xorl	%eax, %eax
; 	__asm__ __volatile__(
  405297: 89 05 83 4b 00 00            	movl	%eax, 19331(%rip)
  40529d: f0                           	lock
  40529e: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  4052a2: 83 3d 7b 4b 00 00 00         	cmpl	$0, 19323(%rip)
  4052a9: 74 32                        	je	50 <__bin_chunk+0x5ad>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4052ab: b8 ca 00 00 00               	movl	$202, %eax
  4052b0: bf 20 9e 40 00               	movl	$4234784, %edi
  4052b5: be 81 00 00 00               	movl	$129, %esi
  4052ba: ba 01 00 00 00               	movl	$1, %edx
  4052bf: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  4052c1: 48 83 f8 da                  	cmpq	$-38, %rax
  4052c5: 75 16                        	jne	22 <__bin_chunk+0x5ad>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4052c7: b8 ca 00 00 00               	movl	$202, %eax
  4052cc: bf 20 9e 40 00               	movl	$4234784, %edi
  4052d1: be 01 00 00 00               	movl	$1, %esi
  4052d6: ba 01 00 00 00               	movl	$1, %edx
  4052db: 0f 05                        	syscall
  4052dd: 48 8b 4c 24 38               	movq	56(%rsp), %rcx
; 	self->next = BIN_TO_CHUNK(i);
  4052e2: 48 8d 41 f0                  	leaq	-16(%rcx), %rax
  4052e6: 48 8b 7c 24 10               	movq	16(%rsp), %rdi
  4052eb: 48 89 47 10                  	movq	%rax, 16(%rdi)
; 	self->prev = mal.bins[i].tail;
  4052ef: 4a 8b 04 fd 30 98 40 00      	movq	4233264(,%r15,8), %rax
  4052f7: 48 89 47 18                  	movq	%rax, 24(%rdi)
; 	self->next->prev = self;
  4052fb: 48 89 79 08                  	movq	%rdi, 8(%rcx)
; 	self->prev->next = self;
  4052ff: 48 8b 47 18                  	movq	24(%rdi), %rax
  405303: 48 89 78 10                  	movq	%rdi, 16(%rax)
; 	if (reclaim) {
  405307: 83 7c 24 0c 00               	cmpl	$0, 12(%rsp)
  40530c: 74 29                        	je	41 <__bin_chunk+0x607>
; 		uintptr_t a = (uintptr_t)self + SIZE_ALIGN+PAGE_SIZE-1 & -PAGE_SIZE;
  40530e: 48 81 c7 1f 10 00 00         	addq	$4127, %rdi
  405315: 48 81 e7 00 f0 ff ff         	andq	$-4096, %rdi
; 		uintptr_t b = (uintptr_t)next - SIZE_ALIGN & -PAGE_SIZE;
  40531c: 48 83 c3 e0                  	addq	$-32, %rbx
  405320: 48 81 e3 00 f0 ff ff         	andq	$-4096, %rbx
; 		__madvise((void *)a, b-a, MADV_DONTNEED);
  405327: 48 29 fb                     	subq	%rdi, %rbx
  40532a: 48 89 de                     	movq	%rbx, %rsi
  40532d: ba 04 00 00 00               	movl	$4, %edx
  405332: e8 39 01 00 00               	callq	313 <madvise>
; 	if (lk[0]) {
  405337: 83 7d 00 00                  	cmpl	$0, (%rbp)
  40533b: 74 43                        	je	67 <__bin_chunk+0x650>
  40533d: 31 c0                        	xorl	%eax, %eax
; 	__asm__ __volatile__(
  40533f: 89 45 00                     	movl	%eax, (%rbp)
  405342: f0                           	lock
  405343: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  405347: 42 83 3c fd 24 98 40 00 00   	cmpl	$0, 4233252(,%r15,8)
  405350: 74 2e                        	je	46 <__bin_chunk+0x650>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405352: b8 ca 00 00 00               	movl	$202, %eax
  405357: be 81 00 00 00               	movl	$129, %esi
  40535c: ba 01 00 00 00               	movl	$1, %edx
  405361: 48 89 ef                     	movq	%rbp, %rdi
  405364: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  405366: 48 83 f8 da                  	cmpq	$-38, %rax
  40536a: 75 14                        	jne	20 <__bin_chunk+0x650>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40536c: b8 ca 00 00 00               	movl	$202, %eax
  405371: be 01 00 00 00               	movl	$1, %esi
  405376: ba 01 00 00 00               	movl	$1, %edx
  40537b: 48 89 ef                     	movq	%rbp, %rdi
  40537e: 0f 05                        	syscall
; }
  405380: 48 83 c4 40                  	addq	$64, %rsp
  405384: 5b                           	popq	%rbx
  405385: 41 5f                        	popq	%r15
  405387: 5d                           	popq	%rbp
  405388: c3                           	retq
  405389: 0f 1f 80 00 00 00 00         	nopl	(%rax)

0000000000405390 __malloc_donate:
; {
  405390: b9 10 00 00 00               	movl	$16, %ecx
; 	size_t align_start_up = (SIZE_ALIGN-1) & (-(uintptr_t)start - OVERHEAD);
  405395: 29 f9                        	subl	%edi, %ecx
  405397: 83 e1 1f                     	andl	$31, %ecx
; 	size_t align_end_down = (SIZE_ALIGN-1) & (uintptr_t)end;
  40539a: 41 89 f0                     	movl	%esi, %r8d
  40539d: 41 83 e0 1f                  	andl	$31, %r8d
; 	if (end - start <= OVERHEAD + align_start_up + align_end_down)
  4053a1: 48 89 f2                     	movq	%rsi, %rdx
  4053a4: 48 29 fa                     	subq	%rdi, %rdx
  4053a7: 4a 8d 04 01                  	leaq	(%rcx,%r8), %rax
  4053ab: 48 83 c0 10                  	addq	$16, %rax
  4053af: 48 39 c2                     	cmpq	%rax, %rdx
  4053b2: 76 39                        	jbe	57 <__malloc_donate+0x5d>
  4053b4: 48 8d 51 10                  	leaq	16(%rcx), %rdx
; 	start += align_start_up + OVERHEAD;
  4053b8: 48 01 fa                     	addq	%rdi, %rdx
; 	end   -= align_end_down;
  4053bb: 4c 29 c6                     	subq	%r8, %rsi
; 	struct chunk *c = MEM_TO_CHUNK(start), *n = MEM_TO_CHUNK(end);
  4053be: 4c 8d 04 0f                  	leaq	(%rdi,%rcx), %r8
; 	c->psize = n->csize = C_INUSE;
  4053c2: 48 c7 46 f8 01 00 00 00      	movq	$1, -8(%rsi)
  4053ca: 48 c7 04 0f 01 00 00 00      	movq	$1, (%rdi,%rcx)
; 	c->csize = n->psize = C_INUSE | (end-start);
  4053d2: 48 89 f0                     	movq	%rsi, %rax
  4053d5: 48 29 d0                     	subq	%rdx, %rax
  4053d8: 48 83 c8 01                  	orq	$1, %rax
  4053dc: 48 89 46 f0                  	movq	%rax, -16(%rsi)
  4053e0: 48 89 44 0f 08               	movq	%rax, 8(%rdi,%rcx)
; 	__bin_chunk(c);
  4053e5: 4c 89 c7                     	movq	%r8, %rdi
  4053e8: e9 43 f9 ff ff               	jmp	-1725 <__bin_chunk>
; }
  4053ed: c3                           	retq
  4053ee: 66 90                        	nop

00000000004053f0 frexpl:
; {
  4053f0: 53                           	pushq	%rbx
  4053f1: 48 83 ec 30                  	subq	$48, %rsp
  4053f5: db 6c 24 40                  	fldt	64(%rsp)
  4053f9: d9 c0                        	fld	%st(0)
  4053fb: db 7c 24 20                  	fstpt	32(%rsp)
  4053ff: 0f b7 44 24 28               	movzwl	40(%rsp), %eax
  405404: ba ff 7f 00 00               	movl	$32767, %edx
; 	int ee = u.i.se & 0x7fff;
  405409: 89 c1                        	movl	%eax, %ecx
  40540b: 21 d1                        	andl	%edx, %ecx
; 	if (!ee) {
  40540d: 39 d1                        	cmpl	%edx, %ecx
  40540f: 74 58                        	je	88 <frexpl+0x79>
  405411: 48 89 fb                     	movq	%rdi, %rbx
  405414: 85 c9                        	testl	%ecx, %ecx
  405416: 75 24                        	jne	36 <frexpl+0x4c>
  405418: d9 ee                        	fldz
; 		if (x) {
  40541a: d9 c9                        	fxch	%st(1)
  40541c: db e9                        	fucomi	%st(1), %st
  40541e: dd d9                        	fstp	%st(1)
  405420: 75 02                        	jne	2 <frexpl+0x34>
  405422: 7b 41                        	jnp	65 <frexpl+0x75>
; 			x = frexpl(x*0x1p120, e);
  405424: d8 0d 82 25 00 00            	fmuls	9602(%rip)
  40542a: db 3c 24                     	fstpt	(%rsp)
  40542d: 48 89 df                     	movq	%rbx, %rdi
  405430: e8 bb ff ff ff               	callq	-69 <frexpl>
; 			*e -= 120;
  405435: 8b 03                        	movl	(%rbx), %eax
  405437: 83 c0 88                     	addl	$-120, %eax
  40543a: eb 2b                        	jmp	43 <frexpl+0x77>
  40543c: dd d8                        	fstp	%st(0)
  40543e: 48 8b 54 24 20               	movq	32(%rsp), %rdx
; 	*e = ee - 0x3ffe;
  405443: 81 c1 02 c0 ff ff            	addl	$4294950914, %ecx
  405449: 89 0b                        	movl	%ecx, (%rbx)
; 	u.i.se |= 0x3ffe;
  40544b: 25 00 80 00 00               	andl	$32768, %eax
  405450: 0d fe 3f 00 00               	orl	$16382, %eax
  405455: 48 89 54 24 10               	movq	%rdx, 16(%rsp)
  40545a: 66 89 44 24 18               	movw	%ax, 24(%rsp)
  40545f: db 6c 24 10                  	fldt	16(%rsp)
  405463: eb 04                        	jmp	4 <frexpl+0x79>
  405465: 31 c0                        	xorl	%eax, %eax
  405467: 89 03                        	movl	%eax, (%rbx)
; }
  405469: 48 83 c4 30                  	addq	$48, %rsp
  40546d: 5b                           	popq	%rbx
  40546e: c3                           	retq
  40546f: 90                           	nop

0000000000405470 madvise:
; 	return syscall(SYS_madvise, addr, len, advice);
  405470: 48 63 d2                     	movslq	%edx, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405473: b8 1c 00 00 00               	movl	$28, %eax
  405478: 0f 05                        	syscall
; 	return syscall(SYS_madvise, addr, len, advice);
  40547a: 48 89 c7                     	movq	%rax, %rdi
  40547d: e9 fe ea ff ff               	jmp	-5378 <__syscall_ret>
  405482: 66 90                        	nop

0000000000405484 dummy:
; static void dummy(void) { }
  405484: c3                           	retq

0000000000405485 mmap64:
; {
  405485: 55                           	pushq	%rbp
  405486: 41 57                        	pushq	%r15
  405488: 53                           	pushq	%rbx
  405489: 48 83 ec 10                  	subq	$16, %rsp
  40548d: 4c 89 cb                     	movq	%r9, %rbx
; 	if (off & OFF_MASK) {
  405490: f7 c3 ff 0f 00 00            	testl	$4095, %ebx
  405496: 74 0d                        	je	13 <mmap64+0x20>
; 		errno = EINVAL;
  405498: e8 5f ea ff ff               	callq	-5537 <__errno_location>
  40549d: c7 00 16 00 00 00            	movl	$22, (%rax)
  4054a3: eb 1d                        	jmp	29 <mmap64+0x3d>
  4054a5: 49 89 f7                     	movq	%rsi, %r15
  4054a8: 48 b8 ff ff ff ff ff ff ff 7f	movabsq	$9223372036854775807, %rax
; 	if (len >= PTRDIFF_MAX) {
  4054b2: 48 39 c6                     	cmpq	%rax, %rsi
  4054b5: 72 1b                        	jb	27 <mmap64+0x4d>
; 		errno = ENOMEM;
  4054b7: e8 40 ea ff ff               	callq	-5568 <__errno_location>
  4054bc: c7 00 0c 00 00 00            	movl	$12, (%rax)
  4054c2: 48 c7 c0 ff ff ff ff         	movq	$-1, %rax
; }
  4054c9: 48 83 c4 10                  	addq	$16, %rsp
  4054cd: 5b                           	popq	%rbx
  4054ce: 41 5f                        	popq	%r15
  4054d0: 5d                           	popq	%rbp
  4054d1: c3                           	retq
  4054d2: 89 cd                        	movl	%ecx, %ebp
; 	if (flags & MAP_FIXED) {
  4054d4: 40 f6 c5 10                  	testb	$16, %bpl
  4054d8: 74 25                        	je	37 <mmap64+0x7a>
  4054da: 89 6c 24 0c                  	movl	%ebp, 12(%rsp)
  4054de: 48 89 fd                     	movq	%rdi, %rbp
  4054e1: 44 89 44 24 08               	movl	%r8d, 8(%rsp)
  4054e6: 89 54 24 04                  	movl	%edx, 4(%rsp)
; 		__vm_wait();
  4054ea: e8 95 ff ff ff               	callq	-107 <dummy>
  4054ef: 8b 54 24 04                  	movl	4(%rsp), %edx
  4054f3: 44 8b 44 24 08               	movl	8(%rsp), %r8d
  4054f8: 48 89 ef                     	movq	%rbp, %rdi
  4054fb: 8b 6c 24 0c                  	movl	12(%rsp), %ebp
; 	ret = __syscall(SYS_mmap, start, len, prot, flags, fd, off);
  4054ff: 48 63 d2                     	movslq	%edx, %rdx
  405502: 4c 63 d5                     	movslq	%ebp, %r10
  405505: 4d 63 c0                     	movslq	%r8d, %r8
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405508: b8 09 00 00 00               	movl	$9, %eax
  40550d: 4c 89 fe                     	movq	%r15, %rsi
  405510: 49 89 d9                     	movq	%rbx, %r9
  405513: 0f 05                        	syscall
; 	if (ret == -EPERM && !start && (flags&MAP_ANON) && !(flags&MAP_FIXED))
  405515: 48 85 ff                     	testq	%rdi, %rdi
  405518: 75 1e                        	jne	30 <mmap64+0xb3>
  40551a: 48 83 f8 ff                  	cmpq	$-1, %rax
  40551e: 75 18                        	jne	24 <mmap64+0xb3>
  405520: 83 e5 30                     	andl	$48, %ebp
  405523: 83 fd 20                     	cmpl	$32, %ebp
  405526: 48 c7 c1 f4 ff ff ff         	movq	$-12, %rcx
  40552d: 48 c7 c0 ff ff ff ff         	movq	$-1, %rax
  405534: 48 0f 44 c1                  	cmoveq	%rcx, %rax
; 	return (void *)__syscall_ret(ret);
  405538: 48 89 c7                     	movq	%rax, %rdi
  40553b: e8 40 ea ff ff               	callq	-5568 <__syscall_ret>
  405540: eb 87                        	jmp	-121 <mmap64+0x44>
  405542: 66 90                        	nop

0000000000405544 dummy:
; static void dummy(void) { }
  405544: c3                           	retq

0000000000405545 mremap:
; {
  405545: 55                           	pushq	%rbp
  405546: 41 57                        	pushq	%r15
  405548: 53                           	pushq	%rbx
  405549: 48 81 ec e0 00 00 00         	subq	$224, %rsp
  405550: 41 89 cf                     	movl	%ecx, %r15d
  405553: 48 89 d3                     	movq	%rdx, %rbx
  405556: 48 89 fd                     	movq	%rdi, %rbp
  405559: 84 c0                        	testb	%al, %al
  40555b: 74 3a                        	je	58 <mremap+0x52>
  40555d: 0f 29 44 24 60               	movaps	%xmm0, 96(%rsp)
  405562: 0f 29 4c 24 70               	movaps	%xmm1, 112(%rsp)
  405567: 0f 29 94 24 80 00 00 00      	movaps	%xmm2, 128(%rsp)
  40556f: 0f 29 9c 24 90 00 00 00      	movaps	%xmm3, 144(%rsp)
  405577: 0f 29 a4 24 a0 00 00 00      	movaps	%xmm4, 160(%rsp)
  40557f: 0f 29 ac 24 b0 00 00 00      	movaps	%xmm5, 176(%rsp)
  405587: 0f 29 b4 24 c0 00 00 00      	movaps	%xmm6, 192(%rsp)
  40558f: 0f 29 bc 24 d0 00 00 00      	movaps	%xmm7, 208(%rsp)
  405597: 4c 89 44 24 50               	movq	%r8, 80(%rsp)
  40559c: 4c 89 4c 24 58               	movq	%r9, 88(%rsp)
  4055a1: 48 b8 ff ff ff ff ff ff ff 7f	movabsq	$9223372036854775807, %rax
; 	if (new_len >= PTRDIFF_MAX) {
  4055ab: 48 39 c3                     	cmpq	%rax, %rbx
  4055ae: 72 17                        	jb	23 <mremap+0x82>
; 		errno = ENOMEM;
  4055b0: e8 47 e9 ff ff               	callq	-5817 <__errno_location>
  4055b5: c7 00 0c 00 00 00            	movl	$12, (%rax)
  4055bb: 48 c7 c0 ff ff ff ff         	movq	$-1, %rax
  4055c2: e9 8b 00 00 00               	jmp	139 <mremap+0x10d>
; 	if (flags & MREMAP_FIXED) {
  4055c7: 41 f6 c7 02                  	testb	$2, %r15b
  4055cb: 75 05                        	jne	5 <mremap+0x8d>
  4055cd: 45 31 c0                     	xorl	%r8d, %r8d
  4055d0: eb 68                        	jmp	104 <mremap+0xf5>
  4055d2: 48 89 74 24 08               	movq	%rsi, 8(%rsp)
; 		__vm_wait();
  4055d7: e8 a8 fe ff ff               	callq	-344 <dummy>
  4055dc: 48 8d 44 24 30               	leaq	48(%rsp), %rax
; 		va_start(ap, flags);
  4055e1: 48 89 44 24 20               	movq	%rax, 32(%rsp)
  4055e6: 48 8d 84 24 00 01 00 00      	leaq	256(%rsp), %rax
  4055ee: 48 89 44 24 18               	movq	%rax, 24(%rsp)
  4055f3: 48 b8 20 00 00 00 30 00 00 00	movabsq	$206158430240, %rax
  4055fd: 48 89 44 24 10               	movq	%rax, 16(%rsp)
  405602: b9 20 00 00 00               	movl	$32, %ecx
; 		new_addr = va_arg(ap, void *);
  405607: 48 83 f9 28                  	cmpq	$40, %rcx
  40560b: 77 13                        	ja	19 <mremap+0xdb>
  40560d: b8 20 00 00 00               	movl	$32, %eax
  405612: 48 03 44 24 20               	addq	32(%rsp), %rax
  405617: 83 c1 08                     	addl	$8, %ecx
  40561a: 89 4c 24 10                  	movl	%ecx, 16(%rsp)
  40561e: eb 12                        	jmp	18 <mremap+0xed>
  405620: 48 8b 44 24 18               	movq	24(%rsp), %rax
  405625: b9 08 00 00 00               	movl	$8, %ecx
  40562a: 48 01 c1                     	addq	%rax, %rcx
  40562d: 48 89 4c 24 18               	movq	%rcx, 24(%rsp)
  405632: 48 8b 74 24 08               	movq	8(%rsp), %rsi
  405637: 4c 8b 00                     	movq	(%rax), %r8
; 	return (void *)syscall(SYS_mremap, old_addr, old_len, new_len, flags, new_addr);
  40563a: 4d 63 d7                     	movslq	%r15d, %r10
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40563d: b8 19 00 00 00               	movl	$25, %eax
  405642: 48 89 ef                     	movq	%rbp, %rdi
  405645: 48 89 da                     	movq	%rbx, %rdx
  405648: 0f 05                        	syscall
; 	return (void *)syscall(SYS_mremap, old_addr, old_len, new_len, flags, new_addr);
  40564a: 48 89 c7                     	movq	%rax, %rdi
  40564d: e8 2e e9 ff ff               	callq	-5842 <__syscall_ret>
; }
  405652: 48 81 c4 e0 00 00 00         	addq	$224, %rsp
  405659: 5b                           	popq	%rbx
  40565a: 41 5f                        	popq	%r15
  40565c: 5d                           	popq	%rbp
  40565d: c3                           	retq
  40565e: 66 90                        	nop

0000000000405660 dummy:
; static void dummy(void) { }
  405660: c3                           	retq

0000000000405661 munmap:
; {
  405661: 41 57                        	pushq	%r15
  405663: 53                           	pushq	%rbx
  405664: 50                           	pushq	%rax
  405665: 49 89 f7                     	movq	%rsi, %r15
  405668: 48 89 fb                     	movq	%rdi, %rbx
; 	__vm_wait();
  40566b: e8 14 fe ff ff               	callq	-492 <dummy>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  405670: b8 0b 00 00 00               	movl	$11, %eax
  405675: 48 89 df                     	movq	%rbx, %rdi
  405678: 4c 89 fe                     	movq	%r15, %rsi
  40567b: 0f 05                        	syscall
; 	return syscall(SYS_munmap, start, len);
  40567d: 48 89 c7                     	movq	%rax, %rdi
  405680: 48 83 c4 08                  	addq	$8, %rsp
  405684: 5b                           	popq	%rbx
  405685: 41 5f                        	popq	%r15
  405687: e9 f4 e8 ff ff               	jmp	-5900 <__syscall_ret>

000000000040568c wctomb:
; 	if (!s) return 0;
  40568c: 48 85 ff                     	testq	%rdi, %rdi
  40568f: 74 0d                        	je	13 <wctomb+0x12>
  405691: 50                           	pushq	%rax
; 	return wcrtomb(s, wc, 0);
  405692: 31 d2                        	xorl	%edx, %edx
  405694: e8 d7 0e 00 00               	callq	3799 <wcrtomb>
  405699: 48 83 c4 08                  	addq	$8, %rsp
; }
  40569d: c3                           	retq
  40569e: 31 c0                        	xorl	%eax, %eax
  4056a0: c3                           	retq
  4056a1: 0f 1f 00                     	nopl	(%rax)

00000000004056a4 fdopen:
; {
  4056a4: 55                           	pushq	%rbp
  4056a5: 41 57                        	pushq	%r15
  4056a7: 53                           	pushq	%rbx
  4056a8: 48 83 ec 10                  	subq	$16, %rsp
  4056ac: 48 89 f5                     	movq	%rsi, %rbp
  4056af: 41 89 ff                     	movl	%edi, %r15d
; 	if (!strchr("rwa", *mode)) {
  4056b2: 0f be 36                     	movsbl	(%rsi), %esi
  4056b5: bf b0 79 40 00               	movl	$4225456, %edi
  4056ba: e8 11 e2 ff ff               	callq	-7663 <strchr>
  4056bf: 48 85 c0                     	testq	%rax, %rax
  4056c2: 0f 84 a8 00 00 00            	je	168 <fdopen+0xcc>
; 	if (!(f=malloc(sizeof *f + UNGET + BUFSIZ))) return 0;
  4056c8: bf f0 04 00 00               	movl	$1264, %edi
  4056cd: e8 fe e8 ff ff               	callq	-5890 <malloc>
  4056d2: 48 85 c0                     	testq	%rax, %rax
  4056d5: 0f 84 a0 00 00 00            	je	160 <fdopen+0xd7>
  4056db: 48 89 c3                     	movq	%rax, %rbx
; 	memset(f, 0, sizeof *f);
  4056de: ba e8 00 00 00               	movl	$232, %edx
  4056e3: 48 89 c7                     	movq	%rax, %rdi
  4056e6: 31 f6                        	xorl	%esi, %esi
  4056e8: e8 af e3 ff ff               	callq	-7249 <memset>
; 	if (!strchr(mode, '+')) f->flags = (*mode == 'r') ? F_NOWR : F_NORD;
  4056ed: 48 89 ef                     	movq	%rbp, %rdi
  4056f0: be 2b 00 00 00               	movl	$43, %esi
  4056f5: e8 d6 e1 ff ff               	callq	-7722 <strchr>
  4056fa: 48 85 c0                     	testq	%rax, %rax
  4056fd: 75 12                        	jne	18 <fdopen+0x6d>
  4056ff: 31 c0                        	xorl	%eax, %eax
  405701: 80 7d 00 72                  	cmpb	$114, (%rbp)
  405705: 0f 94 c0                     	sete	%al
  405708: 8d 04 85 04 00 00 00         	leal	4(,%rax,4), %eax
  40570f: 89 03                        	movl	%eax, (%rbx)
; 	if (strchr(mode, 'e')) __syscall(SYS_fcntl, fd, F_SETFD, FD_CLOEXEC);
  405711: 48 89 ef                     	movq	%rbp, %rdi
  405714: be 65 00 00 00               	movl	$101, %esi
  405719: e8 b2 e1 ff ff               	callq	-7758 <strchr>
; 	if (!(f->flags & F_NOWR) && !__syscall(SYS_ioctl, fd, TIOCGWINSZ, &wsz))
  40571e: 49 63 ff                     	movslq	%r15d, %rdi
; 	if (strchr(mode, 'e')) __syscall(SYS_fcntl, fd, F_SETFD, FD_CLOEXEC);
  405721: 48 85 c0                     	testq	%rax, %rax
  405724: 74 11                        	je	17 <fdopen+0x93>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405726: b8 48 00 00 00               	movl	$72, %eax
  40572b: be 02 00 00 00               	movl	$2, %esi
  405730: ba 01 00 00 00               	movl	$1, %edx
  405735: 0f 05                        	syscall
; 	if (*mode == 'a') {
  405737: 80 7d 00 61                  	cmpb	$97, (%rbp)
  40573b: 75 45                        	jne	69 <fdopen+0xde>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  40573d: b8 48 00 00 00               	movl	$72, %eax
  405742: be 03 00 00 00               	movl	$3, %esi
  405747: 0f 05                        	syscall
; 		if (!(flags & O_APPEND))
  405749: 0f ba e0 0a                  	btl	$10, %eax
  40574d: 72 16                        	jb	22 <fdopen+0xc1>
; 			__syscall(SYS_fcntl, fd, F_SETFL, flags | O_APPEND);
  40574f: 48 63 d0                     	movslq	%eax, %rdx
  405752: 48 81 ca 00 04 00 00         	orq	$1024, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405759: b8 48 00 00 00               	movl	$72, %eax
  40575e: be 04 00 00 00               	movl	$4, %esi
  405763: 0f 05                        	syscall
  405765: b8 80 00 00 00               	movl	$128, %eax
; 		f->flags |= F_APP;
  40576a: 0b 03                        	orl	(%rbx), %eax
  40576c: 89 03                        	movl	%eax, (%rbx)
  40576e: eb 14                        	jmp	20 <fdopen+0xe0>
; 		errno = EINVAL;
  405770: e8 87 e7 ff ff               	callq	-6265 <__errno_location>
  405775: c7 00 16 00 00 00            	movl	$22, (%rax)
  40577b: 31 c0                        	xorl	%eax, %eax
  40577d: e9 92 00 00 00               	jmp	146 <fdopen+0x170>
; 	if (!(f->flags & F_NOWR) && !__syscall(SYS_ioctl, fd, TIOCGWINSZ, &wsz))
  405782: 8b 03                        	movl	(%rbx), %eax
; 	f->fd = fd;
  405784: 44 89 7b 78                  	movl	%r15d, 120(%rbx)
; 	f->buf = (unsigned char *)f + sizeof *f + UNGET;
  405788: 48 89 d9                     	movq	%rbx, %rcx
  40578b: 48 81 c1 f0 00 00 00         	addq	$240, %rcx
  405792: 48 89 4b 58                  	movq	%rcx, 88(%rbx)
; 	f->buf_size = BUFSIZ;
  405796: 48 c7 43 60 00 04 00 00      	movq	$1024, 96(%rbx)
; 	f->lbf = EOF;
  40579e: c7 83 90 00 00 00 ff ff ff ff	movl	$4294967295, 144(%rbx)
; 	if (!(f->flags & F_NOWR) && !__syscall(SYS_ioctl, fd, TIOCGWINSZ, &wsz))
  4057a8: a8 08                        	testb	$8, %al
  4057aa: 75 20                        	jne	32 <fdopen+0x128>
  4057ac: 48 8d 54 24 08               	leaq	8(%rsp), %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4057b1: b8 10 00 00 00               	movl	$16, %eax
  4057b6: be 13 54 00 00               	movl	$21523, %esi
  4057bb: 0f 05                        	syscall
; 	if (!(f->flags & F_NOWR) && !__syscall(SYS_ioctl, fd, TIOCGWINSZ, &wsz))
  4057bd: 48 85 c0                     	testq	%rax, %rax
  4057c0: 75 0a                        	jne	10 <fdopen+0x128>
; 		f->lbf = '\n';
  4057c2: c7 83 90 00 00 00 0a 00 00 00	movl	$10, 144(%rbx)
; 	f->read = __stdio_read;
  4057cc: b8 64 5a 40 00               	movl	$4217444, %eax
  4057d1: 66 48 0f 6e c0               	movq	%rax, %xmm0
  4057d6: b8 9c 59 40 00               	movl	$4217244, %eax
  4057db: 66 48 0f 6e c8               	movq	%rax, %xmm1
  4057e0: 66 0f 6c c8                  	punpcklqdq	%xmm0, %xmm1
  4057e4: f3 0f 7f 4b 40               	movdqu	%xmm1, 64(%rbx)
; 	f->seek = __stdio_seek;
  4057e9: 48 c7 43 50 4c 5a 40 00      	movq	$4217420, 80(%rbx)
; 	f->close = __stdio_close;
  4057f1: 48 c7 43 18 7f 59 40 00      	movq	$4217215, 24(%rbx)
; 	if (!libc.threaded) f->lock = -1;
  4057f9: 83 3d 54 76 08 00 00         	cmpl	$0, 554580(%rip)
  405800: 75 0a                        	jne	10 <fdopen+0x168>
  405802: c7 83 8c 00 00 00 ff ff ff ff	movl	$4294967295, 140(%rbx)
; 	return __ofl_add(f);
  40580c: 48 89 df                     	movq	%rbx, %rdi
  40580f: e8 68 05 00 00               	callq	1384 <__ofl_add>
; }
  405814: 48 83 c4 10                  	addq	$16, %rsp
  405818: 5b                           	popq	%rbx
  405819: 41 5f                        	popq	%r15
  40581b: 5d                           	popq	%rbp
  40581c: c3                           	retq
  40581d: 0f 1f 00                     	nopl	(%rax)

0000000000405820 __fmodeflags:
; {
  405820: 55                           	pushq	%rbp
  405821: 41 57                        	pushq	%r15
  405823: 53                           	pushq	%rbx
  405824: 49 89 ff                     	movq	%rdi, %r15
; 	if (strchr(mode, '+')) flags = O_RDWR;
  405827: be 2b 00 00 00               	movl	$43, %esi
  40582c: e8 9f e0 ff ff               	callq	-8033 <strchr>
  405831: bb 02 00 00 00               	movl	$2, %ebx
  405836: 48 85 c0                     	testq	%rax, %rax
  405839: 75 09                        	jne	9 <__fmodeflags+0x24>
; 	else if (*mode == 'r') flags = O_RDONLY;
  40583b: 31 db                        	xorl	%ebx, %ebx
  40583d: 41 80 3f 72                  	cmpb	$114, (%r15)
  405841: 0f 95 c3                     	setne	%bl
; 	if (strchr(mode, 'x')) flags |= O_EXCL;
  405844: 4c 89 ff                     	movq	%r15, %rdi
  405847: be 78 00 00 00               	movl	$120, %esi
  40584c: e8 7f e0 ff ff               	callq	-8065 <strchr>
  405851: 8d ab 80 00 00 00            	leal	128(%rbx), %ebp
  405857: 48 85 c0                     	testq	%rax, %rax
  40585a: 0f 44 eb                     	cmovel	%ebx, %ebp
; 	if (strchr(mode, 'e')) flags |= O_CLOEXEC;
  40585d: 4c 89 ff                     	movq	%r15, %rdi
  405860: be 65 00 00 00               	movl	$101, %esi
  405865: e8 66 e0 ff ff               	callq	-8090 <strchr>
  40586a: 8d 8d 00 00 08 00            	leal	524288(%rbp), %ecx
  405870: 48 85 c0                     	testq	%rax, %rax
  405873: 0f 44 cd                     	cmovel	%ebp, %ecx
; 	if (*mode != 'r') flags |= O_CREAT;
  405876: 41 8a 17                     	movb	(%r15), %dl
  405879: 8d 41 40                     	leal	64(%rcx), %eax
  40587c: 80 fa 72                     	cmpb	$114, %dl
  40587f: 0f 44 c1                     	cmovel	%ecx, %eax
; 	if (*mode == 'w') flags |= O_TRUNC;
  405882: 89 c1                        	movl	%eax, %ecx
  405884: 81 c9 00 02 00 00            	orl	$512, %ecx
  40588a: 80 fa 77                     	cmpb	$119, %dl
  40588d: 0f 45 c8                     	cmovnel	%eax, %ecx
; 	if (*mode == 'a') flags |= O_APPEND;
  405890: 89 c8                        	movl	%ecx, %eax
  405892: 0d 00 04 00 00               	orl	$1024, %eax
  405897: 80 fa 61                     	cmpb	$97, %dl
  40589a: 0f 45 c1                     	cmovnel	%ecx, %eax
; 	return flags;
  40589d: 5b                           	popq	%rbx
  40589e: 41 5f                        	popq	%r15
  4058a0: 5d                           	popq	%rbp
  4058a1: c3                           	retq
  4058a2: 66 90                        	nop

00000000004058a4 __lockfile:
; {
  4058a4: b8 ff ff ff bf               	movl	$3221225471, %eax
; 	if ((owner & ~MAYBE_WAITERS) == tid)
  4058a9: 23 87 8c 00 00 00            	andl	140(%rdi), %eax
; 	__asm__ ("mov %%fs:0,%0" : "=r" (self) );
  4058af: 64 48 8b 0c 25 00 00 00 00   	movq	%fs:0, %rcx
; 	int owner = f->lock, tid = __pthread_self()->tid;
  4058b8: 44 8b 49 38                  	movl	56(%rcx), %r9d
  4058bc: 45 31 c0                     	xorl	%r8d, %r8d
; 	if ((owner & ~MAYBE_WAITERS) == tid)
  4058bf: 44 39 c8                     	cmpl	%r9d, %eax
  4058c2: 74 75                        	je	117 <__lockfile+0x95>
  4058c4: 48 81 c7 8c 00 00 00         	addq	$140, %rdi
; 	__asm__ __volatile__ (
  4058cb: 31 c0                        	xorl	%eax, %eax
  4058cd: f0                           	lock
  4058ce: 44 0f b1 0f                  	cmpxchgl	%r9d, (%rdi)
  4058d2: 41 b8 01 00 00 00            	movl	$1, %r8d
; 	if (!owner) return 1;
  4058d8: 85 c0                        	testl	%eax, %eax
  4058da: 74 5d                        	je	93 <__lockfile+0x95>
; 	while ((owner = a_cas(&f->lock, 0, tid|MAYBE_WAITERS))) {
  4058dc: 41 81 c9 00 00 00 40         	orl	$1073741824, %r9d
; 	__asm__ __volatile__ (
  4058e3: 31 c0                        	xorl	%eax, %eax
  4058e5: f0                           	lock
  4058e6: 44 0f b1 0f                  	cmpxchgl	%r9d, (%rdi)
; 	while ((owner = a_cas(&f->lock, 0, tid|MAYBE_WAITERS))) {
  4058ea: 85 c0                        	testl	%eax, %eax
  4058ec: 74 4b                        	je	75 <__lockfile+0x95>
  4058ee: 89 c1                        	movl	%eax, %ecx
  4058f0: 89 ca                        	movl	%ecx, %edx
  4058f2: 81 ca 00 00 00 40            	orl	$1073741824, %edx
; 		if ((owner & MAYBE_WAITERS) ||
  4058f8: 0f ba e1 1e                  	btl	$30, %ecx
  4058fc: 72 0a                        	jb	10 <__lockfile+0x64>
; 	__asm__ __volatile__ (
  4058fe: 89 c8                        	movl	%ecx, %eax
  405900: f0                           	lock
  405901: 0f b1 17                     	cmpxchgl	%edx, (%rdi)
; 		    a_cas(&f->lock, owner, owner|MAYBE_WAITERS)==owner)
  405904: 39 c8                        	cmpl	%ecx, %eax
; 		if ((owner & MAYBE_WAITERS) ||
  405906: 75 24                        	jne	36 <__lockfile+0x88>
; 	__syscall(SYS_futex, addr, FUTEX_WAIT|priv, val, 0) != -ENOSYS ||
  405908: 48 63 d2                     	movslq	%edx, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40590b: b8 ca 00 00 00               	movl	$202, %eax
  405910: be 80 00 00 00               	movl	$128, %esi
  405915: 45 31 d2                     	xorl	%r10d, %r10d
  405918: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAIT|priv, val, 0) != -ENOSYS ||
  40591a: 48 83 f8 da                  	cmpq	$-38, %rax
  40591e: 75 0c                        	jne	12 <__lockfile+0x88>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405920: b8 ca 00 00 00               	movl	$202, %eax
  405925: 31 f6                        	xorl	%esi, %esi
  405927: 45 31 d2                     	xorl	%r10d, %r10d
  40592a: 0f 05                        	syscall
; 	__asm__ __volatile__ (
  40592c: 31 c0                        	xorl	%eax, %eax
  40592e: f0                           	lock
  40592f: 44 0f b1 0f                  	cmpxchgl	%r9d, (%rdi)
  405933: 89 c1                        	movl	%eax, %ecx
; 	while ((owner = a_cas(&f->lock, 0, tid|MAYBE_WAITERS))) {
  405935: 85 c0                        	testl	%eax, %eax
  405937: 75 b7                        	jne	-73 <__lockfile+0x4c>
; }
  405939: 44 89 c0                     	movl	%r8d, %eax
  40593c: c3                           	retq

000000000040593d __unlockfile:
; {
  40593d: 31 c0                        	xorl	%eax, %eax
; 	__asm__ __volatile__(
  40593f: 87 87 8c 00 00 00            	xchgl	%eax, 140(%rdi)
; 	if (a_swap(&f->lock, 0) & MAYBE_WAITERS)
  405945: 0f ba e0 1e                  	btl	$30, %eax
  405949: 73 2f                        	jae	47 <__unlockfile+0x3d>
  40594b: 48 81 c7 8c 00 00 00         	addq	$140, %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405952: b8 ca 00 00 00               	movl	$202, %eax
  405957: be 81 00 00 00               	movl	$129, %esi
  40595c: ba 01 00 00 00               	movl	$1, %edx
  405961: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  405963: 48 83 f8 da                  	cmpq	$-38, %rax
  405967: 75 11                        	jne	17 <__unlockfile+0x3d>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405969: b8 ca 00 00 00               	movl	$202, %eax
  40596e: be 01 00 00 00               	movl	$1, %esi
  405973: ba 01 00 00 00               	movl	$1, %edx
  405978: 0f 05                        	syscall
; }
  40597a: c3                           	retq
  40597b: 90                           	nop

000000000040597c dummy:
; {
  40597c: 89 f8                        	movl	%edi, %eax
; 	return fd;
  40597e: c3                           	retq

000000000040597f __stdio_close:
; {
  40597f: 50                           	pushq	%rax
; 	return syscall(SYS_close, __aio_close(f->fd));
  405980: 8b 7f 78                     	movl	120(%rdi), %edi
  405983: e8 f4 ff ff ff               	callq	-12 <dummy>
  405988: 48 63 f8                     	movslq	%eax, %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  40598b: b8 03 00 00 00               	movl	$3, %eax
  405990: 0f 05                        	syscall
; 	return syscall(SYS_close, __aio_close(f->fd));
  405992: 48 89 c7                     	movq	%rax, %rdi
  405995: 58                           	popq	%rax
  405996: e9 e5 e5 ff ff               	jmp	-6683 <__syscall_ret>
  40599b: 90                           	nop

000000000040599c __stdio_read:
; {
  40599c: 55                           	pushq	%rbp
  40599d: 41 57                        	pushq	%r15
  40599f: 53                           	pushq	%rbx
  4059a0: 48 83 ec 20                  	subq	$32, %rsp
  4059a4: 49 89 d7                     	movq	%rdx, %r15
  4059a7: 48 89 f5                     	movq	%rsi, %rbp
  4059aa: 48 89 fb                     	movq	%rdi, %rbx
; 		{ .iov_base = buf, .iov_len = len - !!f->buf_size },
  4059ad: 48 89 34 24                  	movq	%rsi, (%rsp)
  4059b1: 48 8b 57 60                  	movq	96(%rdi), %rdx
  4059b5: 31 c0                        	xorl	%eax, %eax
  4059b7: 48 85 d2                     	testq	%rdx, %rdx
  4059ba: 0f 95 c0                     	setne	%al
; 	cnt = iov[0].iov_len ? syscall(SYS_readv, f->fd, iov, 2)
  4059bd: 4c 89 f9                     	movq	%r15, %rcx
  4059c0: 48 29 c1                     	subq	%rax, %rcx
; 		{ .iov_base = buf, .iov_len = len - !!f->buf_size },
  4059c3: 48 89 4c 24 08               	movq	%rcx, 8(%rsp)
; 		{ .iov_base = f->buf, .iov_len = f->buf_size }
  4059c8: 48 8b 77 58                  	movq	88(%rdi), %rsi
  4059cc: 48 89 74 24 10               	movq	%rsi, 16(%rsp)
  4059d1: 48 89 54 24 18               	movq	%rdx, 24(%rsp)
  4059d6: 48 63 7f 78                  	movslq	120(%rdi), %rdi
; 	cnt = iov[0].iov_len ? syscall(SYS_readv, f->fd, iov, 2)
  4059da: 74 11                        	je	17 <__stdio_read+0x51>
  4059dc: 48 89 e6                     	movq	%rsp, %rsi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4059df: b8 13 00 00 00               	movl	$19, %eax
  4059e4: ba 02 00 00 00               	movl	$2, %edx
  4059e9: 0f 05                        	syscall
  4059eb: eb 04                        	jmp	4 <__stdio_read+0x55>
  4059ed: 31 c0                        	xorl	%eax, %eax
  4059ef: 0f 05                        	syscall
  4059f1: 48 89 c7                     	movq	%rax, %rdi
  4059f4: e8 87 e5 ff ff               	callq	-6777 <__syscall_ret>
; 	if (cnt <= 0) {
  4059f9: 48 85 c0                     	testq	%rax, %rax
  4059fc: 7e 34                        	jle	52 <__stdio_read+0x96>
; 	if (cnt <= iov[0].iov_len) return cnt;
  4059fe: 48 89 c1                     	movq	%rax, %rcx
  405a01: 48 2b 4c 24 08               	subq	8(%rsp), %rcx
  405a06: 76 3a                        	jbe	58 <__stdio_read+0xa6>
; 	f->rpos = f->buf;
  405a08: 48 8b 43 58                  	movq	88(%rbx), %rax
  405a0c: 48 89 43 08                  	movq	%rax, 8(%rbx)
; 	f->rend = f->buf + cnt;
  405a10: 48 01 c1                     	addq	%rax, %rcx
  405a13: 48 89 4b 10                  	movq	%rcx, 16(%rbx)
; 	if (f->buf_size) buf[len-1] = *f->rpos++;
  405a17: 48 83 7b 60 00               	cmpq	$0, 96(%rbx)
  405a1c: 74 0f                        	je	15 <__stdio_read+0x91>
  405a1e: 48 8d 48 01                  	leaq	1(%rax), %rcx
  405a22: 48 89 4b 08                  	movq	%rcx, 8(%rbx)
  405a26: 8a 00                        	movb	(%rax), %al
  405a28: 41 88 44 2f ff               	movb	%al, -1(%r15,%rbp)
  405a2d: 4c 89 f8                     	movq	%r15, %rax
  405a30: eb 10                        	jmp	16 <__stdio_read+0xa6>
; 		f->flags |= cnt ? F_ERR : F_EOF;
  405a32: 0f 95 c0                     	setne	%al
  405a35: 0f b6 c0                     	movzbl	%al, %eax
  405a38: c1 e0 04                     	shll	$4, %eax
  405a3b: 83 c0 10                     	addl	$16, %eax
  405a3e: 09 03                        	orl	%eax, (%rbx)
  405a40: 31 c0                        	xorl	%eax, %eax
; }
  405a42: 48 83 c4 20                  	addq	$32, %rsp
  405a46: 5b                           	popq	%rbx
  405a47: 41 5f                        	popq	%r15
  405a49: 5d                           	popq	%rbp
  405a4a: c3                           	retq
  405a4b: 90                           	nop

0000000000405a4c __stdio_seek:
; 	ret = syscall(SYS_lseek, f->fd, off, whence);
  405a4c: 48 63 7f 78                  	movslq	120(%rdi), %rdi
  405a50: 48 63 d2                     	movslq	%edx, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405a53: b8 08 00 00 00               	movl	$8, %eax
  405a58: 0f 05                        	syscall
; 	ret = syscall(SYS_lseek, f->fd, off, whence);
  405a5a: 48 89 c7                     	movq	%rax, %rdi
  405a5d: e9 1e e5 ff ff               	jmp	-6882 <__syscall_ret>
  405a62: 66 90                        	nop

0000000000405a64 __stdio_write:
; {
  405a64: 55                           	pushq	%rbp
  405a65: 41 57                        	pushq	%r15
  405a67: 53                           	pushq	%rbx
  405a68: 48 83 ec 30                  	subq	$48, %rsp
; 		{ .iov_base = f->wbase, .iov_len = f->wpos-f->wbase },
  405a6c: 48 8b 47 38                  	movq	56(%rdi), %rax
  405a70: 48 8d 6c 24 10               	leaq	16(%rsp), %rbp
  405a75: 48 89 45 00                  	movq	%rax, (%rbp)
  405a79: 4c 8b 7f 28                  	movq	40(%rdi), %r15
  405a7d: 49 29 c7                     	subq	%rax, %r15
  405a80: 4c 89 7d 08                  	movq	%r15, 8(%rbp)
; 		{ .iov_base = (void *)buf, .iov_len = len }
  405a84: 48 89 75 10                  	movq	%rsi, 16(%rbp)
  405a88: 48 89 55 18                  	movq	%rdx, 24(%rbp)
  405a8c: 48 89 54 24 08               	movq	%rdx, 8(%rsp)
; 	size_t rem = iov[0].iov_len + iov[1].iov_len;
  405a91: 49 01 d7                     	addq	%rdx, %r15
  405a94: 48 89 3c 24                  	movq	%rdi, (%rsp)
; 		cnt = syscall(SYS_writev, f->fd, iov, iovcnt);
  405a98: 48 63 7f 78                  	movslq	120(%rdi), %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405a9c: b8 14 00 00 00               	movl	$20, %eax
  405aa1: ba 02 00 00 00               	movl	$2, %edx
  405aa6: 48 89 ee                     	movq	%rbp, %rsi
  405aa9: 0f 05                        	syscall
; 		cnt = syscall(SYS_writev, f->fd, iov, iovcnt);
  405aab: 48 89 c7                     	movq	%rax, %rdi
  405aae: e8 cd e4 ff ff               	callq	-6963 <__syscall_ret>
; 		if (cnt == rem) {
  405ab3: 49 39 c7                     	cmpq	%rax, %r15
  405ab6: 74 59                        	je	89 <__stdio_write+0xad>
  405ab8: bb 02 00 00 00               	movl	$2, %ebx
; 		if (cnt < 0) {
  405abd: 48 85 c0                     	testq	%rax, %rax
  405ac0: 78 78                        	js	120 <__stdio_write+0xd6>
; 		rem -= cnt;
  405ac2: 49 29 c7                     	subq	%rax, %r15
; 		if (cnt > iov[0].iov_len) {
  405ac5: 48 8b 4d 08                  	movq	8(%rbp), %rcx
  405ac9: 31 d2                        	xorl	%edx, %edx
  405acb: 48 39 c8                     	cmpq	%rcx, %rax
  405ace: 0f 97 c2                     	seta	%dl
  405ad1: 48 8d 75 10                  	leaq	16(%rbp), %rsi
  405ad5: 48 0f 47 ee                  	cmovaq	%rsi, %rbp
  405ad9: be 00 00 00 00               	movl	$0, %esi
  405ade: 48 0f 46 ce                  	cmovbeq	%rsi, %rcx
  405ae2: 48 29 c8                     	subq	%rcx, %rax
; 		iov[0].iov_base = (char *)iov[0].iov_base + cnt;
  405ae5: 48 01 45 00                  	addq	%rax, (%rbp)
; 		if (cnt > iov[0].iov_len) {
  405ae9: 29 d3                        	subl	%edx, %ebx
; 		iov[0].iov_len -= cnt;
  405aeb: 48 29 45 08                  	subq	%rax, 8(%rbp)
  405aef: 48 8b 04 24                  	movq	(%rsp), %rax
; 		cnt = syscall(SYS_writev, f->fd, iov, iovcnt);
  405af3: 48 63 78 78                  	movslq	120(%rax), %rdi
  405af7: 48 63 d3                     	movslq	%ebx, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405afa: b8 14 00 00 00               	movl	$20, %eax
  405aff: 48 89 ee                     	movq	%rbp, %rsi
  405b02: 0f 05                        	syscall
; 		cnt = syscall(SYS_writev, f->fd, iov, iovcnt);
  405b04: 48 89 c7                     	movq	%rax, %rdi
  405b07: e8 74 e4 ff ff               	callq	-7052 <__syscall_ret>
; 		if (cnt == rem) {
  405b0c: 49 39 c7                     	cmpq	%rax, %r15
  405b0f: 75 ac                        	jne	-84 <__stdio_write+0x59>
  405b11: 48 8b 14 24                  	movq	(%rsp), %rdx
; 			f->wend = f->buf + f->buf_size;
  405b15: 48 8b 42 58                  	movq	88(%rdx), %rax
  405b19: 48 8b 4a 60                  	movq	96(%rdx), %rcx
  405b1d: 48 01 c1                     	addq	%rax, %rcx
  405b20: 48 89 4a 20                  	movq	%rcx, 32(%rdx)
; 			f->wpos = f->wbase = f->buf;
  405b24: 48 89 42 38                  	movq	%rax, 56(%rdx)
  405b28: 48 89 42 28                  	movq	%rax, 40(%rdx)
  405b2c: 48 8b 44 24 08               	movq	8(%rsp), %rax
; }
  405b31: 48 83 c4 30                  	addq	$48, %rsp
  405b35: 5b                           	popq	%rbx
  405b36: 41 5f                        	popq	%r15
  405b38: 5d                           	popq	%rbp
  405b39: c3                           	retq
  405b3a: 48 8b 04 24                  	movq	(%rsp), %rax
; 			f->wpos = f->wbase = f->wend = 0;
  405b3e: 48 c7 40 38 00 00 00 00      	movq	$0, 56(%rax)
  405b46: 0f 57 c0                     	xorps	%xmm0, %xmm0
  405b49: 0f 11 40 20                  	movups	%xmm0, 32(%rax)
; 			f->flags |= F_ERR;
  405b4d: 80 08 20                     	orb	$32, (%rax)
; 			return iovcnt == 2 ? 0 : len-iov[0].iov_len;
  405b50: 83 fb 02                     	cmpl	$2, %ebx
  405b53: 75 04                        	jne	4 <__stdio_write+0xf5>
  405b55: 31 c0                        	xorl	%eax, %eax
  405b57: eb d8                        	jmp	-40 <__stdio_write+0xcd>
  405b59: 48 8b 44 24 08               	movq	8(%rsp), %rax
  405b5e: 48 2b 45 08                  	subq	8(%rbp), %rax
  405b62: eb cd                        	jmp	-51 <__stdio_write+0xcd>

0000000000405b64 __stdout_write:
; {
  405b64: 50                           	pushq	%rax
  405b65: 49 89 d0                     	movq	%rdx, %r8
  405b68: 49 89 f1                     	movq	%rsi, %r9
  405b6b: 49 89 fa                     	movq	%rdi, %r10
; 	f->write = __stdio_write;
  405b6e: 48 c7 47 48 64 5a 40 00      	movq	$4217444, 72(%rdi)
; 	if (!(f->flags & F_SVB) && __syscall(SYS_ioctl, f->fd, TIOCGWINSZ, &wsz))
  405b76: f6 07 40                     	testb	$64, (%rdi)
  405b79: 75 23                        	jne	35 <__stdout_write+0x3a>
  405b7b: 49 63 7a 78                  	movslq	120(%r10), %rdi
  405b7f: 48 89 e2                     	movq	%rsp, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405b82: b8 10 00 00 00               	movl	$16, %eax
  405b87: be 13 54 00 00               	movl	$21523, %esi
  405b8c: 0f 05                        	syscall
; 	if (!(f->flags & F_SVB) && __syscall(SYS_ioctl, f->fd, TIOCGWINSZ, &wsz))
  405b8e: 48 85 c0                     	testq	%rax, %rax
  405b91: 74 0b                        	je	11 <__stdout_write+0x3a>
; 		f->lbf = -1;
  405b93: 41 c7 82 90 00 00 00 ff ff ff ff     	movl	$4294967295, 144(%r10)
; 	return __stdio_write(f, buf, len);
  405b9e: 4c 89 d7                     	movq	%r10, %rdi
  405ba1: 4c 89 ce                     	movq	%r9, %rsi
  405ba4: 4c 89 c2                     	movq	%r8, %rdx
  405ba7: e8 b8 fe ff ff               	callq	-328 <__stdio_write>
  405bac: 59                           	popq	%rcx
  405bad: c3                           	retq
  405bae: 66 90                        	nop

0000000000405bb0 __towrite:
; 	if (f->flags & F_NOWR) {
  405bb0: 8b 07                        	movl	(%rdi), %eax
; 	f->mode |= f->mode-1;
  405bb2: 8b 8f 88 00 00 00            	movl	136(%rdi), %ecx
  405bb8: 8d 51 ff                     	leal	-1(%rcx), %edx
  405bbb: 09 ca                        	orl	%ecx, %edx
  405bbd: 89 97 88 00 00 00            	movl	%edx, 136(%rdi)
; 	if (f->flags & F_NOWR) {
  405bc3: a8 08                        	testb	$8, %al
  405bc5: 75 1e                        	jne	30 <__towrite+0x35>
; 	f->rpos = f->rend = 0;
  405bc7: 0f 57 c0                     	xorps	%xmm0, %xmm0
  405bca: 0f 11 47 08                  	movups	%xmm0, 8(%rdi)
; 	f->wpos = f->wbase = f->buf;
  405bce: 48 8b 47 58                  	movq	88(%rdi), %rax
  405bd2: 48 89 47 38                  	movq	%rax, 56(%rdi)
  405bd6: 48 89 47 28                  	movq	%rax, 40(%rdi)
; 	f->wend = f->buf + f->buf_size;
  405bda: 48 03 47 60                  	addq	96(%rdi), %rax
  405bde: 48 89 47 20                  	movq	%rax, 32(%rdi)
  405be2: 31 c0                        	xorl	%eax, %eax
; }
  405be4: c3                           	retq
; 		f->flags |= F_ERR;
  405be5: 83 c8 20                     	orl	$32, %eax
  405be8: 89 07                        	movl	%eax, (%rdi)
  405bea: b8 ff ff ff ff               	movl	$4294967295, %eax
; }
  405bef: c3                           	retq

0000000000405bf0 __towrite_needs_stdio_exit:
; 	__stdio_exit_needed();
  405bf0: e9 7b 0a 00 00               	jmp	2683 <__stdio_exit_needed>
  405bf5: 0f 1f 00                     	nopl	(%rax)

0000000000405bf8 __fwritex:
; {
  405bf8: 55                           	pushq	%rbp
  405bf9: 41 57                        	pushq	%r15
  405bfb: 53                           	pushq	%rbx
  405bfc: 48 83 ec 10                  	subq	$16, %rsp
  405c00: 48 89 d3                     	movq	%rdx, %rbx
  405c03: 48 89 f5                     	movq	%rsi, %rbp
  405c06: 48 89 fe                     	movq	%rdi, %rsi
; 	if (!f->wend && __towrite(f)) return 0;
  405c09: 48 8b 42 20                  	movq	32(%rdx), %rax
  405c0d: 48 85 c0                     	testq	%rax, %rax
  405c10: 0f 84 9b 00 00 00            	je	155 <__fwritex+0xb9>
; 	if (l > f->wend - f->wpos) return f->write(f, s, l);
  405c16: 48 8b 7b 28                  	movq	40(%rbx), %rdi
  405c1a: 48 29 f8                     	subq	%rdi, %rax
  405c1d: 48 39 e8                     	cmpq	%rbp, %rax
  405c20: 73 14                        	jae	20 <__fwritex+0x3e>
  405c22: 48 8b 43 48                  	movq	72(%rbx), %rax
  405c26: 48 89 df                     	movq	%rbx, %rdi
  405c29: 48 89 ea                     	movq	%rbp, %rdx
  405c2c: 48 83 c4 10                  	addq	$16, %rsp
  405c30: 5b                           	popq	%rbx
  405c31: 41 5f                        	popq	%r15
  405c33: 5d                           	popq	%rbp
  405c34: ff e0                        	jmpq	*%rax
; 	if (f->lbf >= 0) {
  405c36: 83 bb 90 00 00 00 00         	cmpl	$0, 144(%rbx)
  405c3d: 0f 88 90 00 00 00            	js	144 <__fwritex+0xdb>
  405c43: 49 89 d8                     	movq	%rbx, %r8
  405c46: 48 c7 c3 ff ff ff ff         	movq	$-1, %rbx
; 		for (i=l; i && s[i-1] != '\n'; i--);
  405c4d: 49 89 f7                     	movq	%rsi, %r15
  405c50: 49 31 df                     	xorq	%rbx, %r15
  405c53: 48 8d 04 1e                  	leaq	(%rsi,%rbx), %rax
  405c57: b9 01 00 00 00               	movl	$1, %ecx
  405c5c: 31 d2                        	xorl	%edx, %edx
  405c5e: 48 39 d5                     	cmpq	%rdx, %rbp
  405c61: 74 6d                        	je	109 <__fwritex+0xd8>
  405c63: 48 01 cb                     	addq	%rcx, %rbx
  405c66: 49 01 cf                     	addq	%rcx, %r15
  405c69: 48 01 ca                     	addq	%rcx, %rdx
  405c6c: 80 3c 28 0a                  	cmpb	$10, (%rax,%rbp)
  405c70: 48 8d 40 ff                  	leaq	-1(%rax), %rax
  405c74: 75 e8                        	jne	-24 <__fwritex+0x66>
; 			size_t n = f->write(f, s, i);
  405c76: 48 89 ea                     	movq	%rbp, %rdx
  405c79: 48 29 da                     	subq	%rbx, %rdx
  405c7c: 48 89 54 24 08               	movq	%rdx, 8(%rsp)
  405c81: 4c 89 c7                     	movq	%r8, %rdi
  405c84: 4c 89 04 24                  	movq	%r8, (%rsp)
  405c88: ff 57 48                     	callq	*72(%rdi)
  405c8b: 48 8b 54 24 08               	movq	8(%rsp), %rdx
; 			if (n < i) return n;
  405c90: 48 39 d0                     	cmpq	%rdx, %rax
  405c93: 72 53                        	jb	83 <__fwritex+0xf0>
  405c95: 48 89 d1                     	movq	%rdx, %rcx
  405c98: 48 89 ee                     	movq	%rbp, %rsi
  405c9b: 4c 29 fe                     	subq	%r15, %rsi
  405c9e: 48 8b 04 24                  	movq	(%rsp), %rax
; 	memcpy(f->wpos, s, l);
  405ca2: 48 8b 78 28                  	movq	40(%rax), %rdi
  405ca6: 48 89 dd                     	movq	%rbx, %rbp
  405ca9: 48 89 c3                     	movq	%rax, %rbx
  405cac: 49 89 d7                     	movq	%rdx, %r15
  405caf: eb 25                        	jmp	37 <__fwritex+0xde>
  405cb1: 49 89 f7                     	movq	%rsi, %r15
; 	if (!f->wend && __towrite(f)) return 0;
  405cb4: 48 89 df                     	movq	%rbx, %rdi
  405cb7: e8 f4 fe ff ff               	callq	-268 <__towrite>
  405cbc: 85 c0                        	testl	%eax, %eax
  405cbe: 74 04                        	je	4 <__fwritex+0xcc>
  405cc0: 31 c0                        	xorl	%eax, %eax
  405cc2: eb 24                        	jmp	36 <__fwritex+0xf0>
; 	if (l > f->wend - f->wpos) return f->write(f, s, l);
  405cc4: 48 8b 43 20                  	movq	32(%rbx), %rax
  405cc8: 4c 89 fe                     	movq	%r15, %rsi
  405ccb: e9 46 ff ff ff               	jmp	-186 <__fwritex+0x1e>
  405cd0: 4c 89 c3                     	movq	%r8, %rbx
  405cd3: 45 31 ff                     	xorl	%r15d, %r15d
; 	memcpy(f->wpos, s, l);
  405cd6: 48 89 ea                     	movq	%rbp, %rdx
  405cd9: e8 86 01 00 00               	callq	390 <memcpy>
; 	f->wpos += l;
  405cde: 48 01 6b 28                  	addq	%rbp, 40(%rbx)
; 	return l+i;
  405ce2: 49 01 ef                     	addq	%rbp, %r15
  405ce5: 4c 89 f8                     	movq	%r15, %rax
; }
  405ce8: 48 83 c4 10                  	addq	$16, %rsp
  405cec: 5b                           	popq	%rbx
  405ced: 41 5f                        	popq	%r15
  405cef: 5d                           	popq	%rbp
  405cf0: c3                           	retq

0000000000405cf1 fwrite_unlocked:
; {
  405cf1: 55                           	pushq	%rbp
  405cf2: 41 57                        	pushq	%r15
  405cf4: 53                           	pushq	%rbx
  405cf5: 48 83 ec 20                  	subq	$32, %rsp
  405cf9: 49 89 cf                     	movq	%rcx, %r15
  405cfc: 48 89 d3                     	movq	%rdx, %rbx
; 	size_t k, l = size*nmemb;
  405cff: 48 89 d5                     	movq	%rdx, %rbp
  405d02: 48 0f af ee                  	imulq	%rsi, %rbp
; 	if (!size) nmemb = 0;
  405d06: 48 85 f6                     	testq	%rsi, %rsi
  405d09: 48 0f 44 de                  	cmoveq	%rsi, %rbx
; 	FLOCK(f);
  405d0d: 83 b9 8c 00 00 00 00         	cmpl	$0, 140(%rcx)
  405d14: 48 89 74 24 18               	movq	%rsi, 24(%rsp)
  405d19: 78 38                        	js	56 <fwrite_unlocked+0x62>
  405d1b: 48 89 7c 24 10               	movq	%rdi, 16(%rsp)
  405d20: 4c 89 ff                     	movq	%r15, %rdi
  405d23: e8 7c fb ff ff               	callq	-1156 <__lockfile>
  405d28: 89 44 24 0c                  	movl	%eax, 12(%rsp)
  405d2c: 48 8b 7c 24 10               	movq	16(%rsp), %rdi
; 	k = __fwritex(src, l, f);
  405d31: 48 89 ee                     	movq	%rbp, %rsi
  405d34: 4c 89 fa                     	movq	%r15, %rdx
  405d37: e8 bc fe ff ff               	callq	-324 <__fwritex>
; 	FLOCK(f);
  405d3c: 83 7c 24 0c 00               	cmpl	$0, 12(%rsp)
; 	FUNLOCK(f);
  405d41: 74 1b                        	je	27 <fwrite_unlocked+0x6d>
  405d43: 4c 89 ff                     	movq	%r15, %rdi
  405d46: 49 89 c7                     	movq	%rax, %r15
  405d49: e8 ef fb ff ff               	callq	-1041 <__unlockfile>
  405d4e: 4c 89 f8                     	movq	%r15, %rax
  405d51: eb 0b                        	jmp	11 <fwrite_unlocked+0x6d>
; 	k = __fwritex(src, l, f);
  405d53: 48 89 ee                     	movq	%rbp, %rsi
  405d56: 4c 89 fa                     	movq	%r15, %rdx
  405d59: e8 9a fe ff ff               	callq	-358 <__fwritex>
; 	return k==l ? nmemb : k/size;
  405d5e: 48 39 e8                     	cmpq	%rbp, %rax
  405d61: 74 0a                        	je	10 <fwrite_unlocked+0x7c>
  405d63: 31 d2                        	xorl	%edx, %edx
  405d65: 48 f7 74 24 18               	divq	24(%rsp)
  405d6a: 48 89 c3                     	movq	%rax, %rbx
  405d6d: 48 89 d8                     	movq	%rbx, %rax
  405d70: 48 83 c4 20                  	addq	$32, %rsp
  405d74: 5b                           	popq	%rbx
  405d75: 41 5f                        	popq	%r15
  405d77: 5d                           	popq	%rbp
  405d78: c3                           	retq
  405d79: 0f 1f 00                     	nopl	(%rax)

0000000000405d7c __ofl_add:
; {
  405d7c: 53                           	pushq	%rbx
  405d7d: 48 89 fb                     	movq	%rdi, %rbx
; 	FILE **head = __ofl_lock();
  405d80: e8 3f bb ff ff               	callq	-17601 <__ofl_lock>
; 	f->next = *head;
  405d85: 48 8b 08                     	movq	(%rax), %rcx
  405d88: 48 89 4b 70                  	movq	%rcx, 112(%rbx)
; 	if (*head) (*head)->prev = f;
  405d8c: 48 8b 08                     	movq	(%rax), %rcx
  405d8f: 48 85 c9                     	testq	%rcx, %rcx
  405d92: 74 04                        	je	4 <__ofl_add+0x1c>
  405d94: 48 89 59 68                  	movq	%rbx, 104(%rcx)
; 	*head = f;
  405d98: 48 89 18                     	movq	%rbx, (%rax)
; 	__ofl_unlock();
  405d9b: e8 36 bb ff ff               	callq	-17610 <__ofl_unlock>
; 	return f;
  405da0: 48 89 d8                     	movq	%rbx, %rax
  405da3: 5b                           	popq	%rbx
  405da4: c3                           	retq
  405da5: 0f 1f 00                     	nopl	(%rax)
  405da8: 0f 1f 84 00 00 00 00 00      	nopl	(%rax,%rax)

0000000000405db0 memchr:
; {
  405db0: 48 89 f8                     	movq	%rdi, %rax
; 	for (; ((uintptr_t)s & ALIGN) && n && *s != c; s++, n--);
  405db3: 48 85 d2                     	testq	%rdx, %rdx
  405db6: 0f 95 c1                     	setne	%cl
  405db9: 74 25                        	je	37 <memchr+0x30>
  405dbb: 0f 1f 44 00 00               	nopl	(%rax,%rax)
  405dc0: 89 c7                        	movl	%eax, %edi
  405dc2: 83 e7 07                     	andl	$7, %edi
  405dc5: 48 85 ff                     	testq	%rdi, %rdi
  405dc8: 74 16                        	je	22 <memchr+0x30>
  405dca: 40 38 30                     	cmpb	%sil, (%rax)
  405dcd: 74 15                        	je	21 <memchr+0x34>
  405dcf: 48 83 c0 01                  	addq	$1, %rax
  405dd3: 48 83 fa 01                  	cmpq	$1, %rdx
  405dd7: 48 8d 52 ff                  	leaq	-1(%rdx), %rdx
  405ddb: 0f 95 c1                     	setne	%cl
  405dde: 75 e0                        	jne	-32 <memchr+0x10>
; 	if (n && *s != c) {
  405de0: 84 c9                        	testb	%cl, %cl
  405de2: 74 7b                        	je	123 <memchr+0xaf>
  405de4: 40 38 30                     	cmpb	%sil, (%rax)
  405de7: 74 5c                        	je	92 <memchr+0x95>
; 		for (w = (const void *)s; n>=SS && !HASZERO(*w^k); w++, n-=SS);
  405de9: 48 83 fa 08                  	cmpq	$8, %rdx
  405ded: 72 56                        	jb	86 <memchr+0x95>
  405def: 40 0f b6 ce                  	movzbl	%sil, %ecx
  405df3: 89 cf                        	movl	%ecx, %edi
  405df5: 49 ba 01 01 01 01 01 01 01 01	movabsq	$72340172838076673, %r10
  405dff: 4c 0f af d7                  	imulq	%rdi, %r10
  405e03: 49 b8 80 80 80 80 80 80 80 80	movabsq	$-9187201950435737472, %r8
  405e0d: 49 b9 ff fe fe fe fe fe fe fe	movabsq	$-72340172838076673, %r9
  405e17: 66 0f 1f 84 00 00 00 00 00   	nopw	(%rax,%rax)
  405e20: 48 8b 38                     	movq	(%rax), %rdi
  405e23: 4c 31 d7                     	xorq	%r10, %rdi
  405e26: 48 89 f9                     	movq	%rdi, %rcx
  405e29: 48 f7 d1                     	notq	%rcx
  405e2c: 4c 21 c1                     	andq	%r8, %rcx
  405e2f: 4c 01 cf                     	addq	%r9, %rdi
  405e32: 48 85 f9                     	testq	%rdi, %rcx
  405e35: 75 0e                        	jne	14 <memchr+0x95>
  405e37: 48 83 c0 08                  	addq	$8, %rax
  405e3b: 48 83 c2 f8                  	addq	$-8, %rdx
  405e3f: 48 83 fa 07                  	cmpq	$7, %rdx
  405e43: 77 db                        	ja	-37 <memchr+0x70>
; 	for (; n && *s != c; s++, n--);
  405e45: 48 85 d2                     	testq	%rdx, %rdx
  405e48: 74 15                        	je	21 <memchr+0xaf>
  405e4a: 66 0f 1f 44 00 00            	nopw	(%rax,%rax)
  405e50: 40 38 30                     	cmpb	%sil, (%rax)
  405e53: 74 0c                        	je	12 <memchr+0xb1>
  405e55: 48 83 c0 01                  	addq	$1, %rax
  405e59: 48 83 c2 ff                  	addq	$-1, %rdx
  405e5d: 75 f1                        	jne	-15 <memchr+0xa0>
  405e5f: 31 c0                        	xorl	%eax, %eax
; 	return n ? (void *)s : 0;
  405e61: c3                           	retq
  405e62: 66 90                        	nop

0000000000405e64 memcpy:
; 	mov %rdi,%rax
  405e64: 48 89 f8                     	movq	%rdi, %rax
; 	cmp $8,%rdx
  405e67: 48 83 fa 08                  	cmpq	$8, %rdx
; 	jc 1f
  405e6b: 72 14                        	jb	20 <memcpy+0x1d>
; 	test $7,%edi
  405e6d: f7 c7 07 00 00 00            	testl	$7, %edi
; 	jz 1f
  405e73: 74 0c                        	je	12 <memcpy+0x1d>
; 2:	movsb
  405e75: a4                           	movsb	(%rsi), %es:(%rdi)
; 	dec %rdx
  405e76: 48 ff ca                     	decq	%rdx
; 	test $7,%edi
  405e79: f7 c7 07 00 00 00            	testl	$7, %edi
; 	jnz 2b
  405e7f: 75 f4                        	jne	-12 <memcpy+0x11>
; 1:	mov %rdx,%rcx
  405e81: 48 89 d1                     	movq	%rdx, %rcx
; 	shr $3,%rcx
  405e84: 48 c1 e9 03                  	shrq	$3, %rcx
; 	rep
  405e88: f3 48 a5                     	rep		movsq	(%rsi), %es:(%rdi)
; 	and $7,%edx
  405e8b: 83 e2 07                     	andl	$7, %edx
; 	jz 1f
  405e8e: 74 05                        	je	5 <memcpy+0x31>
; 2:	movsb
  405e90: a4                           	movsb	(%rsi), %es:(%rdi)
; 	dec %edx
  405e91: ff ca                        	decl	%edx
; 	jnz 2b
  405e93: 75 fb                        	jne	-5 <memcpy+0x2c>
; 1:	ret
  405e95: c3                           	retq
  405e96: 66 90                        	nop

0000000000405e98 __wait:
; {
  405e98: 41 89 d1                     	movl	%edx, %r9d
  405e9b: 49 89 f0                     	movq	%rsi, %r8
  405e9e: 45 31 f6                     	xorl	%r14d, %r14d
  405ea1: 85 c9                        	testl	%ecx, %ecx
  405ea3: 41 0f 95 c6                  	setne	%r14b
; 	if (priv) priv = FUTEX_PRIVATE;
  405ea7: 49 c1 e6 07                  	shlq	$7, %r14
  405eab: b8 9c ff ff ff               	movl	$4294967196, %eax
  405eb0: 4d 85 c0                     	testq	%r8, %r8
; 	while (spins-- && (!waiters || !*waiters)) {
  405eb3: 74 06                        	je	6 <__wait+0x23>
  405eb5: 41 83 38 00                  	cmpl	$0, (%r8)
  405eb9: 75 12                        	jne	18 <__wait+0x35>
; 		if (*addr==val) a_spin();
  405ebb: 8b 0f                        	movl	(%rdi), %ecx
  405ebd: 44 39 c9                     	cmpl	%r9d, %ecx
  405ec0: 75 50                        	jne	80 <__wait+0x7a>
; 	__asm__ __volatile__( "pause" : : : "memory" );
  405ec2: f3 90                        	pause
; 	while (spins-- && (!waiters || !*waiters)) {
  405ec4: ff c0                        	incl	%eax
  405ec6: 75 e8                        	jne	-24 <__wait+0x18>
  405ec8: 4d 85 c0                     	testq	%r8, %r8
; 	if (waiters) a_inc(waiters);
  405ecb: 74 09                        	je	9 <__wait+0x3e>
; 	__asm__ __volatile__(
  405ecd: f0                           	lock
  405ece: 41 ff 00                     	incl	(%r8)
  405ed1: 41 b4 01                     	movb	$1, %r12b
  405ed4: eb 03                        	jmp	3 <__wait+0x41>
  405ed6: 45 31 e4                     	xorl	%r12d, %r12d
; 	while (*addr==val) {
  405ed9: 8b 07                        	movl	(%rdi), %eax
  405edb: 44 39 c8                     	cmpl	%r9d, %eax
  405ede: 75 29                        	jne	41 <__wait+0x71>
  405ee0: 49 63 d1                     	movslq	%r9d, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405ee3: b8 ca 00 00 00               	movl	$202, %eax
  405ee8: 4c 89 f6                     	movq	%r14, %rsi
  405eeb: 45 31 d2                     	xorl	%r10d, %r10d
  405eee: 0f 05                        	syscall
; 		__syscall(SYS_futex, addr, FUTEX_WAIT|priv, val, 0) != -ENOSYS
  405ef0: 48 83 f8 da                  	cmpq	$-38, %rax
; 		|| __syscall(SYS_futex, addr, FUTEX_WAIT, val, 0);
  405ef4: 75 0c                        	jne	12 <__wait+0x6a>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405ef6: b8 ca 00 00 00               	movl	$202, %eax
  405efb: 31 f6                        	xorl	%esi, %esi
  405efd: 45 31 d2                     	xorl	%r10d, %r10d
  405f00: 0f 05                        	syscall
; 	while (*addr==val) {
  405f02: 8b 07                        	movl	(%rdi), %eax
  405f04: 44 39 c8                     	cmpl	%r9d, %eax
  405f07: 74 da                        	je	-38 <__wait+0x4b>
; 	if (waiters) a_dec(waiters);
  405f09: 45 84 e4                     	testb	%r12b, %r12b
  405f0c: 74 04                        	je	4 <__wait+0x7a>
; 	__asm__ __volatile__(
  405f0e: f0                           	lock
  405f0f: 41 ff 08                     	decl	(%r8)
; }
  405f12: c3                           	retq
  405f13: 90                           	nop

0000000000405f14 __set_thread_area:
; 	mov %rdi,%rsi           /* shift for syscall */
  405f14: 48 89 fe                     	movq	%rdi, %rsi
; 	movl $0x1002,%edi       /* SET_FS register */
  405f17: bf 02 10 00 00               	movl	$4098, %edi
; 	movl $158,%eax          /* set fs segment to */
  405f1c: b8 9e 00 00 00               	movl	$158, %eax
; 	syscall                 /* arch_prctl(SET_FS, arg)*/
  405f21: 0f 05                        	syscall
; 	ret
  405f23: c3                           	retq

0000000000405f24 clock_gettime:
; {
  405f24: 55                           	pushq	%rbp
  405f25: 53                           	pushq	%rbx
  405f26: 50                           	pushq	%rax
  405f27: 48 89 f3                     	movq	%rsi, %rbx
  405f2a: 89 fd                        	movl	%edi, %ebp
; 		(int (*)(clockid_t, struct timespec *))vdso_func;
  405f2c: 48 8b 05 cd 2e 00 00         	movq	11981(%rip), %rax
; 	if (f) {
  405f33: 48 85 c0                     	testq	%rax, %rax
  405f36: 74 1b                        	je	27 <clock_gettime+0x2f>
; 		r = f(clk, ts);
  405f38: 89 ef                        	movl	%ebp, %edi
  405f3a: 48 89 de                     	movq	%rbx, %rsi
  405f3d: ff d0                        	callq	*%rax
  405f3f: 89 c2                        	movl	%eax, %edx
; 		if (!r) return r;
  405f41: 85 c0                        	testl	%eax, %eax
  405f43: 74 36                        	je	54 <clock_gettime+0x57>
  405f45: 83 fa ea                     	cmpl	$-22, %edx
  405f48: 75 09                        	jne	9 <clock_gettime+0x2f>
; 		if (r == -EINVAL) return __syscall_ret(r);
  405f4a: 48 c7 c7 ea ff ff ff         	movq	$-22, %rdi
  405f51: eb 20                        	jmp	32 <clock_gettime+0x4f>
; 	r = __syscall(SYS_clock_gettime, clk, ts);
  405f53: 48 63 fd                     	movslq	%ebp, %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  405f56: b8 e4 00 00 00               	movl	$228, %eax
  405f5b: 48 89 de                     	movq	%rbx, %rsi
  405f5e: 0f 05                        	syscall
; 	if (r == -ENOSYS) {
  405f60: 83 f8 da                     	cmpl	$-38, %eax
  405f63: 75 0b                        	jne	11 <clock_gettime+0x4c>
  405f65: 48 c7 c0 ea ff ff ff         	movq	$-22, %rax
; 		if (clk == CLOCK_REALTIME) {
  405f6c: 85 ed                        	testl	%ebp, %ebp
  405f6e: 74 14                        	je	20 <clock_gettime+0x60>
; 	return __syscall_ret(r);
  405f70: 48 63 f8                     	movslq	%eax, %rdi
  405f73: e8 08 e0 ff ff               	callq	-8184 <__syscall_ret>
  405f78: 48 89 c2                     	movq	%rax, %rdx
; }
  405f7b: 89 d0                        	movl	%edx, %eax
  405f7d: 48 83 c4 08                  	addq	$8, %rsp
  405f81: 5b                           	popq	%rbx
  405f82: 5d                           	popq	%rbp
  405f83: c3                           	retq
  405f84: 31 d2                        	xorl	%edx, %edx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  405f86: b8 60 00 00 00               	movl	$96, %eax
  405f8b: 48 89 df                     	movq	%rbx, %rdi
  405f8e: 31 f6                        	xorl	%esi, %esi
  405f90: 0f 05                        	syscall
  405f92: 48 b8 00 00 00 00 e8 03 00 00	movabsq	$4294967296000, %rax
; 			ts->tv_nsec = (int)ts->tv_nsec * 1000;
  405f9c: 48 0f af 43 08               	imulq	8(%rbx), %rax
  405fa1: 48 c1 f8 20                  	sarq	$32, %rax
  405fa5: 48 89 43 08                  	movq	%rax, 8(%rbx)
  405fa9: eb d0                        	jmp	-48 <clock_gettime+0x57>

0000000000405fab cgt_init:
; {
  405fab: 55                           	pushq	%rbp
  405fac: 53                           	pushq	%rbx
  405fad: 50                           	pushq	%rax
  405fae: 48 89 f3                     	movq	%rsi, %rbx
  405fb1: 89 fd                        	movl	%edi, %ebp
; 	void *p = __vdsosym(VDSO_CGT_VER, VDSO_CGT_SYM);
  405fb3: bf b4 79 40 00               	movl	$4225460, %edi
  405fb8: be be 79 40 00               	movl	$4225470, %esi
  405fbd: e8 3e 00 00 00               	callq	62 <__vdsosym>
  405fc2: 48 89 c1                     	movq	%rax, %rcx
; 	__asm__( "lock ; cmpxchg %3, %1"
  405fc5: b8 ab 5f 40 00               	movl	$4218795, %eax
  405fca: f0                           	lock
  405fcb: 48 0f b1 0d 2d 2e 00 00      	cmpxchgq	%rcx, 11821(%rip)
; 	return f ? f(clk, ts) : -ENOSYS;
  405fd3: 48 85 c9                     	testq	%rcx, %rcx
  405fd6: 74 0d                        	je	13 <cgt_init+0x3a>
  405fd8: 89 ef                        	movl	%ebp, %edi
  405fda: 48 89 de                     	movq	%rbx, %rsi
  405fdd: 48 83 c4 08                  	addq	$8, %rsp
  405fe1: 5b                           	popq	%rbx
  405fe2: 5d                           	popq	%rbp
  405fe3: ff e1                        	jmpq	*%rcx
  405fe5: b8 da ff ff ff               	movl	$4294967258, %eax
  405fea: 48 83 c4 08                  	addq	$8, %rsp
  405fee: 5b                           	popq	%rbx
  405fef: 5d                           	popq	%rbp
  405ff0: c3                           	retq
  405ff1: 0f 1f 00                     	nopl	(%rax)
  405ff4: 66 66 66 2e 0f 1f 84 00 00 00 00 00  	nopw	%cs:(%rax,%rax)

0000000000406000 __vdsosym:
; {
  406000: 55                           	pushq	%rbp
  406001: 41 57                        	pushq	%r15
  406003: 53                           	pushq	%rbx
  406004: 48 83 ec 40                  	subq	$64, %rsp
  406008: 49 89 f1                     	movq	%rsi, %r9
  40600b: 49 89 fa                     	movq	%rdi, %r10
  40600e: 48 8b 05 4b 6e 08 00         	movq	552523(%rip), %rax
; 	for (i=0; libc.auxv[i] != AT_SYSINFO_EHDR; i+=2)
  406015: 48 83 c0 08                  	addq	$8, %rax
  406019: 48 8b 48 f8                  	movq	-8(%rax), %rcx
  40601d: 48 85 c9                     	testq	%rcx, %rcx
  406020: 0f 84 60 02 00 00            	je	608 <__vdsosym+0x286>
  406026: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  406030: 48 83 f9 21                  	cmpq	$33, %rcx
  406034: 74 12                        	je	18 <__vdsosym+0x48>
  406036: 48 83 c0 10                  	addq	$16, %rax
  40603a: 48 8b 48 f8                  	movq	-8(%rax), %rcx
  40603e: 48 85 c9                     	testq	%rcx, %rcx
  406041: 75 ed                        	jne	-19 <__vdsosym+0x30>
  406043: e9 3e 02 00 00               	jmp	574 <__vdsosym+0x286>
; 	if (!libc.auxv[i+1]) return 0;
  406048: 48 8b 08                     	movq	(%rax), %rcx
  40604b: 48 85 c9                     	testq	%rcx, %rcx
  40604e: 0f 84 32 02 00 00            	je	562 <__vdsosym+0x286>
; 	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  406054: 0f b7 41 38                  	movzwl	56(%rcx), %eax
  406058: 48 85 c0                     	testq	%rax, %rax
  40605b: 0f 84 25 02 00 00            	je	549 <__vdsosym+0x286>
  406061: 48 8b 59 20                  	movq	32(%rcx), %rbx
; 	Phdr *ph = (void *)((char *)eh + eh->e_phoff);
  406065: 48 01 cb                     	addq	%rcx, %rbx
; 	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  406068: 41 89 c0                     	movl	%eax, %r8d
  40606b: 41 83 e0 01                  	andl	$1, %r8d
  40606f: 66 83 f8 01                  	cmpw	$1, %ax
  406073: 75 0e                        	jne	14 <__vdsosym+0x83>
  406075: 49 c7 c7 ff ff ff ff         	movq	$-1, %r15
  40607c: 31 c0                        	xorl	%eax, %eax
  40607e: e9 92 00 00 00               	jmp	146 <__vdsosym+0x115>
  406083: 0f b7 79 36                  	movzwl	54(%rcx), %edi
  406087: 4c 89 c2                     	movq	%r8, %rdx
  40608a: 48 29 c2                     	subq	%rax, %rdx
  40608d: 49 c7 c7 ff ff ff ff         	movq	$-1, %r15
  406094: 31 c0                        	xorl	%eax, %eax
  406096: 48 89 de                     	movq	%rbx, %rsi
; 		if (ph->p_type == PT_LOAD)
  406099: 8b 1e                        	movl	(%rsi), %ebx
  40609b: 83 fb 02                     	cmpl	$2, %ebx
  40609e: 75 30                        	jne	48 <__vdsosym+0xd0>
  4060a0: eb 5e                        	jmp	94 <__vdsosym+0x100>
  4060a2: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  4060ac: 0f 1f 40 00                  	nopl	(%rax)
  4060b0: 4c 8b 7c 3e 08               	movq	8(%rsi,%rdi), %r15
; 			base = (size_t)eh + ph->p_offset - ph->p_vaddr;
  4060b5: 49 01 cf                     	addq	%rcx, %r15
  4060b8: 4c 2b 7c 3e 10               	subq	16(%rsi,%rdi), %r15
; 	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  4060bd: 48 01 fb                     	addq	%rdi, %rbx
  4060c0: 48 89 de                     	movq	%rbx, %rsi
  4060c3: 48 83 c2 02                  	addq	$2, %rdx
  4060c7: 74 4c                        	je	76 <__vdsosym+0x115>
; 		if (ph->p_type == PT_LOAD)
  4060c9: 8b 1e                        	movl	(%rsi), %ebx
  4060cb: 83 fb 02                     	cmpl	$2, %ebx
  4060ce: 74 30                        	je	48 <__vdsosym+0x100>
  4060d0: 83 fb 01                     	cmpl	$1, %ebx
  4060d3: 75 0b                        	jne	11 <__vdsosym+0xe0>
  4060d5: 4c 8b 7e 08                  	movq	8(%rsi), %r15
; 			base = (size_t)eh + ph->p_offset - ph->p_vaddr;
  4060d9: 49 01 cf                     	addq	%rcx, %r15
  4060dc: 4c 2b 7e 10                  	subq	16(%rsi), %r15
; 	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  4060e0: 48 8d 1c 3e                  	leaq	(%rsi,%rdi), %rbx
; 		if (ph->p_type == PT_LOAD)
  4060e4: 8b 2c 3e                     	movl	(%rsi,%rdi), %ebp
  4060e7: 83 fd 01                     	cmpl	$1, %ebp
  4060ea: 74 c4                        	je	-60 <__vdsosym+0xb0>
  4060ec: 83 fd 02                     	cmpl	$2, %ebp
  4060ef: 75 cc                        	jne	-52 <__vdsosym+0xbd>
  4060f1: 48 8b 44 3e 08               	movq	8(%rsi,%rdi), %rax
; 			dynv = (void *)((char *)eh + ph->p_offset);
  4060f6: 48 01 c8                     	addq	%rcx, %rax
  4060f9: eb c2                        	jmp	-62 <__vdsosym+0xbd>
  4060fb: 0f 1f 44 00 00               	nopl	(%rax,%rax)
  406100: 48 8b 46 08                  	movq	8(%rsi), %rax
  406104: 48 01 c8                     	addq	%rcx, %rax
; 	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  406107: 48 8d 1c 3e                  	leaq	(%rsi,%rdi), %rbx
; 		if (ph->p_type == PT_LOAD)
  40610b: 8b 2c 3e                     	movl	(%rsi,%rdi), %ebp
  40610e: 83 fd 01                     	cmpl	$1, %ebp
  406111: 75 d9                        	jne	-39 <__vdsosym+0xec>
  406113: eb 9b                        	jmp	-101 <__vdsosym+0xb0>
  406115: 4d 85 c0                     	testq	%r8, %r8
  406118: 74 2a                        	je	42 <__vdsosym+0x144>
  40611a: 8b 13                        	movl	(%rbx), %edx
  40611c: 83 fa 01                     	cmpl	$1, %edx
  40611f: 74 18                        	je	24 <__vdsosym+0x139>
  406121: 83 fa 02                     	cmpl	$2, %edx
  406124: 75 1e                        	jne	30 <__vdsosym+0x144>
; 			dynv = (void *)((char *)eh + ph->p_offset);
  406126: 48 03 4b 08                  	addq	8(%rbx), %rcx
  40612a: 48 89 c8                     	movq	%rcx, %rax
  40612d: 31 ff                        	xorl	%edi, %edi
; 	if (!dynv || base==(size_t)-1) return 0;
  40612f: 48 85 c0                     	testq	%rax, %rax
  406132: 75 1b                        	jne	27 <__vdsosym+0x14f>
  406134: e9 4f 01 00 00               	jmp	335 <__vdsosym+0x288>
; 			base = (size_t)eh + ph->p_offset - ph->p_vaddr;
  406139: 48 03 4b 08                  	addq	8(%rbx), %rcx
  40613d: 48 2b 4b 10                  	subq	16(%rbx), %rcx
  406141: 49 89 cf                     	movq	%rcx, %r15
  406144: 31 ff                        	xorl	%edi, %edi
; 	if (!dynv || base==(size_t)-1) return 0;
  406146: 48 85 c0                     	testq	%rax, %rax
  406149: 0f 84 39 01 00 00            	je	313 <__vdsosym+0x288>
  40614f: 49 83 ff ff                  	cmpq	$-1, %r15
  406153: 0f 84 2f 01 00 00            	je	303 <__vdsosym+0x288>
; 	for (i=0; dynv[i]; i+=2) {
  406159: 48 8b 08                     	movq	(%rax), %rcx
  40615c: 48 85 c9                     	testq	%rcx, %rcx
  40615f: 0f 84 21 01 00 00            	je	289 <__vdsosym+0x286>
  406165: 48 83 c0 10                  	addq	$16, %rax
  406169: 45 31 db                     	xorl	%r11d, %r11d
  40616c: 31 db                        	xorl	%ebx, %ebx
  40616e: 45 31 f6                     	xorl	%r14d, %r14d
  406171: 31 f6                        	xorl	%esi, %esi
  406173: 45 31 c0                     	xorl	%r8d, %r8d
  406176: 48 8b 50 f8                  	movq	-8(%rax), %rdx
; 		void *p = (void *)(base + dynv[i+1]);
  40617a: 4c 01 fa                     	addq	%r15, %rdx
; 		switch(dynv[i]) {
  40617d: 48 83 f9 05                  	cmpq	$5, %rcx
  406181: 7f 2a                        	jg	42 <__vdsosym+0x1ad>
  406183: eb 5b                        	jmp	91 <__vdsosym+0x1e0>
  406185: 48 89 d3                     	movq	%rdx, %rbx
  406188: 0f 1f 84 00 00 00 00 00      	nopl	(%rax,%rax)
; 	for (i=0; dynv[i]; i+=2) {
  406190: 48 8b 08                     	movq	(%rax), %rcx
  406193: 48 83 c0 10                  	addq	$16, %rax
  406197: 48 85 c9                     	testq	%rcx, %rcx
  40619a: 0f 84 81 00 00 00            	je	129 <__vdsosym+0x221>
  4061a0: 48 8b 50 f8                  	movq	-8(%rax), %rdx
; 		void *p = (void *)(base + dynv[i+1]);
  4061a4: 4c 01 fa                     	addq	%r15, %rdx
; 		switch(dynv[i]) {
  4061a7: 48 83 f9 05                  	cmpq	$5, %rcx
  4061ab: 7e 33                        	jle	51 <__vdsosym+0x1e0>
  4061ad: 48 83 f9 06                  	cmpq	$6, %rcx
  4061b1: 74 4a                        	je	74 <__vdsosym+0x1fd>
  4061b3: 48 81 f9 f0 ff ff 6f         	cmpq	$1879048176, %rcx
  4061ba: 74 c9                        	je	-55 <__vdsosym+0x185>
  4061bc: 48 81 f9 fc ff ff 6f         	cmpq	$1879048188, %rcx
  4061c3: 75 cb                        	jne	-53 <__vdsosym+0x190>
  4061c5: 49 89 d3                     	movq	%rdx, %r11
; 	for (i=0; dynv[i]; i+=2) {
  4061c8: 48 8b 08                     	movq	(%rax), %rcx
  4061cb: 48 83 c0 10                  	addq	$16, %rax
  4061cf: 48 85 c9                     	testq	%rcx, %rcx
  4061d2: 75 cc                        	jne	-52 <__vdsosym+0x1a0>
  4061d4: eb 4b                        	jmp	75 <__vdsosym+0x221>
  4061d6: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
; 		switch(dynv[i]) {
  4061e0: 48 83 f9 04                  	cmpq	$4, %rcx
  4061e4: 74 28                        	je	40 <__vdsosym+0x20e>
  4061e6: 48 83 f9 05                  	cmpq	$5, %rcx
  4061ea: 75 a4                        	jne	-92 <__vdsosym+0x190>
  4061ec: 49 89 d0                     	movq	%rdx, %r8
; 	for (i=0; dynv[i]; i+=2) {
  4061ef: 48 8b 08                     	movq	(%rax), %rcx
  4061f2: 48 83 c0 10                  	addq	$16, %rax
  4061f6: 48 85 c9                     	testq	%rcx, %rcx
  4061f9: 75 a5                        	jne	-91 <__vdsosym+0x1a0>
  4061fb: eb 24                        	jmp	36 <__vdsosym+0x221>
  4061fd: 48 89 d6                     	movq	%rdx, %rsi
  406200: 48 8b 08                     	movq	(%rax), %rcx
  406203: 48 83 c0 10                  	addq	$16, %rax
  406207: 48 85 c9                     	testq	%rcx, %rcx
  40620a: 75 94                        	jne	-108 <__vdsosym+0x1a0>
  40620c: eb 13                        	jmp	19 <__vdsosym+0x221>
  40620e: 49 89 d6                     	movq	%rdx, %r14
  406211: 48 8b 08                     	movq	(%rax), %rcx
  406214: 48 83 c0 10                  	addq	$16, %rax
  406218: 48 85 c9                     	testq	%rcx, %rcx
  40621b: 0f 85 7f ff ff ff            	jne	-129 <__vdsosym+0x1a0>
  406221: 31 ff                        	xorl	%edi, %edi
; 	if (!strings || !syms || !hashtab) return 0;
  406223: 4d 85 c0                     	testq	%r8, %r8
  406226: 74 60                        	je	96 <__vdsosym+0x288>
  406228: 48 85 f6                     	testq	%rsi, %rsi
  40622b: 74 5b                        	je	91 <__vdsosym+0x288>
  40622d: 4c 89 5c 24 28               	movq	%r11, 40(%rsp)
  406232: 4d 85 f6                     	testq	%r14, %r14
  406235: 74 51                        	je	81 <__vdsosym+0x288>
  406237: 48 8b 44 24 28               	movq	40(%rsp), %rax
; 	if (!verdef) versym = 0;
  40623c: 48 85 c0                     	testq	%rax, %rax
  40623f: 48 89 d9                     	movq	%rbx, %rcx
  406242: 48 0f 44 c8                  	cmoveq	%rax, %rcx
; 	for (i=0; i<hashtab[1]; i++) {
  406246: 41 8b 46 04                  	movl	4(%r14), %eax
  40624a: 85 c0                        	testl	%eax, %eax
  40624c: 74 38                        	je	56 <__vdsosym+0x286>
  40624e: 48 85 c9                     	testq	%rcx, %rcx
  406251: 4c 89 4c 24 20               	movq	%r9, 32(%rsp)
  406256: 48 89 74 24 08               	movq	%rsi, 8(%rsp)
  40625b: 4c 89 44 24 18               	movq	%r8, 24(%rsp)
  406260: 4c 89 74 24 10               	movq	%r14, 16(%rsp)
  406265: 0f 84 1f 01 00 00            	je	287 <__vdsosym+0x38a>
  40626b: 48 89 4c 24 30               	movq	%rcx, 48(%rsp)
  406270: 31 ff                        	xorl	%edi, %edi
  406272: bd 27 00 00 00               	movl	$39, %ebp
  406277: 41 bb 06 04 00 00            	movl	$1030, %r11d
  40627d: 31 db                        	xorl	%ebx, %ebx
  40627f: 4c 89 54 24 38               	movq	%r10, 56(%rsp)
  406284: eb 57                        	jmp	87 <__vdsosym+0x2dd>
  406286: 31 ff                        	xorl	%edi, %edi
; }
  406288: 48 89 f8                     	movq	%rdi, %rax
  40628b: 48 83 c4 40                  	addq	$64, %rsp
  40628f: 5b                           	popq	%rbx
  406290: 41 5f                        	popq	%r15
  406292: 5d                           	popq	%rbp
  406293: c3                           	retq
; 	Verdaux *aux = (Verdaux *)((char *)def + def->vd_aux);
  406294: 8b 48 0c                     	movl	12(%rax), %ecx
; 	return !strcmp(vername, strings + aux->vda_name);
  406297: 8b 34 08                     	movl	(%rax,%rcx), %esi
  40629a: 4c 01 c6                     	addq	%r8, %rsi
  40629d: 4c 89 d7                     	movq	%r10, %rdi
  4062a0: e8 5b 04 00 00               	callq	1115 <strcmp>
  4062a5: 41 bb 06 04 00 00            	movl	$1030, %r11d
  4062ab: bd 27 00 00 00               	movl	$39, %ebp
  4062b0: 31 ff                        	xorl	%edi, %edi
  4062b2: 4c 8b 74 24 10               	movq	16(%rsp), %r14
  4062b7: 4c 8b 44 24 18               	movq	24(%rsp), %r8
  4062bc: 48 8b 74 24 08               	movq	8(%rsp), %rsi
  4062c1: 4c 8b 4c 24 20               	movq	32(%rsp), %r9
  4062c6: 85 c0                        	testl	%eax, %eax
; 		if (versym && !checkver(verdef, versym[i], vername, strings))
  4062c8: 0f 84 3d 01 00 00            	je	317 <__vdsosym+0x40b>
  4062ce: 66 90                        	nop
; 	for (i=0; i<hashtab[1]; i++) {
  4062d0: 48 83 c3 01                  	addq	$1, %rbx
  4062d4: 41 8b 46 04                  	movl	4(%r14), %eax
  4062d8: 48 39 c3                     	cmpq	%rax, %rbx
  4062db: 73 ab                        	jae	-85 <__vdsosym+0x288>
; 		if (!(1<<(syms[i].st_info&0xf) & OK_TYPES)) continue;
  4062dd: 48 8d 04 5b                  	leaq	(%rbx,%rbx,2), %rax
  4062e1: 0f b6 4c c6 04               	movzbl	4(%rsi,%rax,8), %ecx
  4062e6: 89 ca                        	movl	%ecx, %edx
  4062e8: 80 e2 0f                     	andb	$15, %dl
  4062eb: 0f b6 d2                     	movzbl	%dl, %edx
  4062ee: 0f a3 d5                     	btl	%edx, %ebp
  4062f1: 73 dd                        	jae	-35 <__vdsosym+0x2d0>
; 		if (!(1<<(syms[i].st_info>>4) & OK_BINDS)) continue;
  4062f3: c1 e9 04                     	shrl	$4, %ecx
  4062f6: 41 0f a3 cb                  	btl	%ecx, %r11d
  4062fa: 73 d4                        	jae	-44 <__vdsosym+0x2d0>
; 		if (!syms[i].st_shndx) continue;
  4062fc: 66 83 7c c6 06 00            	cmpw	$0, 6(%rsi,%rax,8)
  406302: 74 cc                        	je	-52 <__vdsosym+0x2d0>
  406304: 48 8b 4c 24 08               	movq	8(%rsp), %rcx
; 		if (strcmp(name, strings+syms[i].st_name)) continue;
  406309: 8b 34 c1                     	movl	(%rcx,%rax,8), %esi
  40630c: 4c 01 c6                     	addq	%r8, %rsi
  40630f: 4c 89 cf                     	movq	%r9, %rdi
  406312: e8 e9 03 00 00               	callq	1001 <strcmp>
  406317: 41 bb 06 04 00 00            	movl	$1030, %r11d
  40631d: bd 27 00 00 00               	movl	$39, %ebp
  406322: 31 ff                        	xorl	%edi, %edi
  406324: 4c 8b 74 24 10               	movq	16(%rsp), %r14
  406329: 4c 8b 44 24 18               	movq	24(%rsp), %r8
  40632e: 48 8b 74 24 08               	movq	8(%rsp), %rsi
  406333: 4c 8b 54 24 38               	movq	56(%rsp), %r10
  406338: 4c 8b 4c 24 20               	movq	32(%rsp), %r9
  40633d: 85 c0                        	testl	%eax, %eax
  40633f: 75 8f                        	jne	-113 <__vdsosym+0x2d0>
  406341: 48 8b 44 24 30               	movq	48(%rsp), %rax
; 		if (versym && !checkver(verdef, versym[i], vername, strings))
  406346: 0f b7 0c 58                  	movzwl	(%rax,%rbx,2), %ecx
  40634a: 48 8b 44 24 28               	movq	40(%rsp), %rax
; 		  && (def->vd_ndx & 0x7fff) == vsym)
  40634f: f6 40 02 01                  	testb	$1, 2(%rax)
  406353: 75 1e                        	jne	30 <__vdsosym+0x373>
  406355: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40635f: 90                           	nop
  406360: 0f b7 50 04                  	movzwl	4(%rax), %edx
  406364: 66 31 ca                     	xorw	%cx, %dx
  406367: f7 c2 ff 7f 00 00            	testl	$32767, %edx
; 		if (!(def->vd_flags & VER_FLG_BASE)
  40636d: 0f 84 21 ff ff ff            	je	-223 <__vdsosym+0x294>
; 		if (def->vd_next == 0)
  406373: 8b 50 10                     	movl	16(%rax), %edx
  406376: 48 85 d2                     	testq	%rdx, %rdx
  406379: 0f 84 51 ff ff ff            	je	-175 <__vdsosym+0x2d0>
; 		def = (Verdef *)((char *)def + def->vd_next);
  40637f: 48 01 d0                     	addq	%rdx, %rax
; 		  && (def->vd_ndx & 0x7fff) == vsym)
  406382: f6 40 02 01                  	testb	$1, 2(%rax)
  406386: 74 d8                        	je	-40 <__vdsosym+0x360>
  406388: eb e9                        	jmp	-23 <__vdsosym+0x373>
; 	for (i=0; i<hashtab[1]; i++) {
  40638a: 48 8d 6e 06                  	leaq	6(%rsi), %rbp
  40638e: 31 ff                        	xorl	%edi, %edi
  406390: be 27 00 00 00               	movl	$39, %esi
  406395: 41 ba 06 04 00 00            	movl	$1030, %r10d
  40639b: 31 db                        	xorl	%ebx, %ebx
  40639d: eb 13                        	jmp	19 <__vdsosym+0x3b2>
  40639f: 48 83 c3 01                  	addq	$1, %rbx
  4063a3: 89 c1                        	movl	%eax, %ecx
  4063a5: 48 83 c5 18                  	addq	$24, %rbp
  4063a9: 48 39 cb                     	cmpq	%rcx, %rbx
  4063ac: 0f 83 d6 fe ff ff            	jae	-298 <__vdsosym+0x288>
; 		if (!(1<<(syms[i].st_info&0xf) & OK_TYPES)) continue;
  4063b2: 0f b6 4d fe                  	movzbl	-2(%rbp), %ecx
  4063b6: 89 ca                        	movl	%ecx, %edx
  4063b8: 80 e2 0f                     	andb	$15, %dl
  4063bb: 0f b6 d2                     	movzbl	%dl, %edx
  4063be: 0f a3 d6                     	btl	%edx, %esi
  4063c1: 73 dc                        	jae	-36 <__vdsosym+0x39f>
; 		if (!(1<<(syms[i].st_info>>4) & OK_BINDS)) continue;
  4063c3: c1 e9 04                     	shrl	$4, %ecx
  4063c6: 41 0f a3 ca                  	btl	%ecx, %r10d
  4063ca: 73 d3                        	jae	-45 <__vdsosym+0x39f>
; 		if (!syms[i].st_shndx) continue;
  4063cc: 66 83 7d 00 00               	cmpw	$0, (%rbp)
  4063d1: 74 cc                        	je	-52 <__vdsosym+0x39f>
; 		if (strcmp(name, strings+syms[i].st_name)) continue;
  4063d3: 8b 75 fa                     	movl	-6(%rbp), %esi
  4063d6: 4c 01 c6                     	addq	%r8, %rsi
  4063d9: 4c 89 cf                     	movq	%r9, %rdi
  4063dc: e8 1f 03 00 00               	callq	799 <strcmp>
  4063e1: 85 c0                        	testl	%eax, %eax
  4063e3: 74 21                        	je	33 <__vdsosym+0x406>
  4063e5: 48 8b 44 24 10               	movq	16(%rsp), %rax
; 	for (i=0; i<hashtab[1]; i++) {
  4063ea: 8b 40 04                     	movl	4(%rax), %eax
  4063ed: 4c 8b 4c 24 20               	movq	32(%rsp), %r9
  4063f2: 4c 8b 44 24 18               	movq	24(%rsp), %r8
  4063f7: 31 ff                        	xorl	%edi, %edi
  4063f9: be 27 00 00 00               	movl	$39, %esi
  4063fe: 41 ba 06 04 00 00            	movl	$1030, %r10d
  406404: eb 99                        	jmp	-103 <__vdsosym+0x39f>
  406406: 48 8b 74 24 08               	movq	8(%rsp), %rsi
; 		return (void *)(base + syms[i].st_value);
  40640b: 48 8d 04 5b                  	leaq	(%rbx,%rbx,2), %rax
  40640f: 4c 03 7c c6 08               	addq	8(%rsi,%rax,8), %r15
  406414: 4c 89 ff                     	movq	%r15, %rdi
  406417: e9 6c fe ff ff               	jmp	-404 <__vdsosym+0x288>
  40641c: 0f 1f 40 00                  	nopl	(%rax)

0000000000406420 __expand_heap:
; {
  406420: 55                           	pushq	%rbp
  406421: 41 57                        	pushq	%r15
  406423: 53                           	pushq	%rbx
  406424: 48 83 ec 10                  	subq	$16, %rsp
; 	size_t n = *pn;
  406428: 48 8b 07                     	movq	(%rdi), %rax
  40642b: 48 b9 00 f0 ff ff ff ff ff 7f	movabsq	$9223372036854771712, %rcx
; 	if (n > SIZE_MAX/2 - PAGE_SIZE) {
  406435: 48 39 c8                     	cmpq	%rcx, %rax
  406438: 72 12                        	jb	18 <__expand_heap+0x2c>
; 		errno = ENOMEM;
  40643a: e8 bd da ff ff               	callq	-9539 <__errno_location>
  40643f: c7 00 0c 00 00 00            	movl	$12, (%rax)
  406445: 31 db                        	xorl	%ebx, %ebx
  406447: e9 16 01 00 00               	jmp	278 <__expand_heap+0x142>
  40644c: 49 89 ff                     	movq	%rdi, %r15
; 	n += -n & PAGE_SIZE-1;
  40644f: 89 c2                        	movl	%eax, %edx
  406451: f7 da                        	negl	%edx
  406453: 81 e2 ff 0f 00 00            	andl	$4095, %edx
  406459: 48 01 c2                     	addq	%rax, %rdx
; 	if (!brk) {
  40645c: 48 8b 0d d5 39 00 00         	movq	14805(%rip), %rcx
  406463: 48 85 c9                     	testq	%rcx, %rcx
  406466: 74 10                        	je	16 <__expand_heap+0x58>
; 	if (n < SIZE_MAX-brk && !traverses_stack_p(brk, brk+n)
  406468: 48 89 c8                     	movq	%rcx, %rax
  40646b: 48 f7 d0                     	notq	%rax
  40646e: 48 39 c2                     	cmpq	%rax, %rdx
  406471: 72 2d                        	jb	45 <__expand_heap+0x80>
  406473: e9 9d 00 00 00               	jmp	157 <__expand_heap+0xf5>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  406478: b8 0c 00 00 00               	movl	$12, %eax
  40647d: 31 ff                        	xorl	%edi, %edi
  40647f: 0f 05                        	syscall
; 		brk += -brk & PAGE_SIZE-1;
  406481: 89 c1                        	movl	%eax, %ecx
  406483: f7 d9                        	negl	%ecx
  406485: 81 e1 ff 0f 00 00            	andl	$4095, %ecx
  40648b: 48 01 c1                     	addq	%rax, %rcx
  40648e: 48 89 0d a3 39 00 00         	movq	%rcx, 14755(%rip)
; 	if (n < SIZE_MAX-brk && !traverses_stack_p(brk, brk+n)
  406495: 48 89 c8                     	movq	%rcx, %rax
  406498: 48 f7 d0                     	notq	%rax
  40649b: 48 39 c2                     	cmpq	%rax, %rdx
  40649e: 73 75                        	jae	117 <__expand_heap+0xf5>
  4064a0: 48 8d 3c 11                  	leaq	(%rcx,%rdx), %rdi
; 	b = (uintptr_t)libc.auxv;
  4064a4: 48 8b 35 b5 69 08 00         	movq	551349(%rip), %rsi
  4064ab: 48 89 74 24 08               	movq	%rsi, 8(%rsp)
; 	a = b > len ? b-len : 0;
  4064b0: 48 8d ae 00 00 80 ff         	leaq	-8388608(%rsi), %rbp
  4064b7: 31 c0                        	xorl	%eax, %eax
  4064b9: 48 81 fe 00 00 80 00         	cmpq	$8388608, %rsi
  4064c0: 48 0f 47 c5                  	cmovaq	%rbp, %rax
; 	if (new>a && old<b) return 1;
  4064c4: 48 39 ce                     	cmpq	%rcx, %rsi
  4064c7: 76 05                        	jbe	5 <__expand_heap+0xae>
  4064c9: 48 39 f8                     	cmpq	%rdi, %rax
  4064cc: 72 47                        	jb	71 <__expand_heap+0xf5>
  4064ce: 31 c0                        	xorl	%eax, %eax
  4064d0: 48 8d 74 24 08               	leaq	8(%rsp), %rsi
; 	a = b > len ? b-len : 0;
  4064d5: 48 81 fe 00 00 80 00         	cmpq	$8388608, %rsi
  4064dc: 48 8d ac 24 08 00 80 ff      	leaq	-8388600(%rsp), %rbp
  4064e4: 48 0f 47 c5                  	cmovaq	%rbp, %rax
; 	if (new>a && old<b) return 1;
  4064e8: 48 39 f1                     	cmpq	%rsi, %rcx
; 	    && __syscall(SYS_brk, brk+n)==brk+n) {
  4064eb: 73 05                        	jae	5 <__expand_heap+0xd2>
  4064ed: 48 39 f8                     	cmpq	%rdi, %rax
  4064f0: 72 23                        	jb	35 <__expand_heap+0xf5>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  4064f2: b8 0c 00 00 00               	movl	$12, %eax
  4064f7: 0f 05                        	syscall
; 	    && __syscall(SYS_brk, brk+n)==brk+n) {
  4064f9: 48 8b 1d 38 39 00 00         	movq	14648(%rip), %rbx
  406500: 48 8d 0c 13                  	leaq	(%rbx,%rdx), %rcx
  406504: 48 39 c8                     	cmpq	%rcx, %rax
; 	if (n < SIZE_MAX-brk && !traverses_stack_p(brk, brk+n)
  406507: 75 0c                        	jne	12 <__expand_heap+0xf5>
; 		*pn = n;
  406509: 49 89 17                     	movq	%rdx, (%r15)
; 		brk += n;
  40650c: 48 89 05 25 39 00 00         	movq	%rax, 14629(%rip)
  406513: eb 4d                        	jmp	77 <__expand_heap+0x142>
; 	size_t min = (size_t)PAGE_SIZE << mmap_step/2;
  406515: 8b 0d 25 39 00 00            	movl	14629(%rip), %ecx
  40651b: 48 d1 e9                     	shrq	%rcx
  40651e: bd 00 10 00 00               	movl	$4096, %ebp
  406523: 48 d3 e5                     	shlq	%cl, %rbp
; 	if (n < min) n = min;
  406526: 48 39 ea                     	cmpq	%rbp, %rdx
  406529: 48 0f 43 ea                  	cmovaeq	%rdx, %rbp
  40652d: 31 db                        	xorl	%ebx, %ebx
; 	void *area = __mmap(0, n, PROT_READ|PROT_WRITE,
  40652f: bf 00 00 00 00               	movl	$0, %edi
  406534: 48 89 ee                     	movq	%rbp, %rsi
  406537: ba 03 00 00 00               	movl	$3, %edx
  40653c: b9 22 00 00 00               	movl	$34, %ecx
  406541: 41 b8 ff ff ff ff            	movl	$4294967295, %r8d
  406547: 45 31 c9                     	xorl	%r9d, %r9d
  40654a: e8 36 ef ff ff               	callq	-4298 <mmap64>
; 	if (area == MAP_FAILED) return 0;
  40654f: 48 83 f8 ff                  	cmpq	$-1, %rax
  406553: 74 0d                        	je	13 <__expand_heap+0x142>
; 	*pn = n;
  406555: 49 89 2f                     	movq	%rbp, (%r15)
; 	mmap_step++;
  406558: 83 05 e1 38 00 00 01         	addl	$1, 14561(%rip)
  40655f: 48 89 c3                     	movq	%rax, %rbx
; }
  406562: 48 89 d8                     	movq	%rbx, %rax
  406565: 48 83 c4 10                  	addq	$16, %rsp
  406569: 5b                           	popq	%rbx
  40656a: 41 5f                        	popq	%r15
  40656c: 5d                           	popq	%rbp
  40656d: c3                           	retq
  40656e: 66 90                        	nop

0000000000406570 wcrtomb:
; {
  406570: 50                           	pushq	%rax
  406571: b8 01 00 00 00               	movl	$1, %eax
; 	if (!s) return 1;
  406576: 48 85 ff                     	testq	%rdi, %rdi
  406579: 0f 84 ee 00 00 00            	je	238 <wcrtomb+0xfd>
; 	if ((unsigned)wc < 0x80) {
  40657f: 83 fe 7f                     	cmpl	$127, %esi
  406582: 77 08                        	ja	8 <wcrtomb+0x1c>
  406584: 40 88 37                     	movb	%sil, (%rdi)
  406587: e9 e1 00 00 00               	jmp	225 <wcrtomb+0xfd>
; 	__asm__ ("mov %%fs:0,%0" : "=r" (self) );
  40658c: 64 48 8b 0c 25 00 00 00 00   	movq	%fs:0, %rcx
; 	} else if (MB_CUR_MAX == 1) {
  406595: 48 8b 89 b0 00 00 00         	movq	176(%rcx), %rcx
  40659c: 48 83 39 00                  	cmpq	$0, (%rcx)
  4065a0: 74 27                        	je	39 <wcrtomb+0x59>
; 	} else if ((unsigned)wc < 0x800) {
  4065a2: 81 fe ff 07 00 00            	cmpl	$2047, %esi
  4065a8: 77 2e                        	ja	46 <wcrtomb+0x68>
; 		*s++ = 0xc0 | (wc>>6);
  4065aa: 89 f0                        	movl	%esi, %eax
  4065ac: c1 e8 06                     	shrl	$6, %eax
  4065af: 0c c0                        	orb	$-64, %al
  4065b1: 88 07                        	movb	%al, (%rdi)
; 		*s = 0x80 | (wc&0x3f);
  4065b3: 40 80 e6 3f                  	andb	$63, %sil
  4065b7: 40 80 ce 80                  	orb	$-128, %sil
  4065bb: 40 88 77 01                  	movb	%sil, 1(%rdi)
  4065bf: b8 02 00 00 00               	movl	$2, %eax
  4065c4: e9 a4 00 00 00               	jmp	164 <wcrtomb+0xfd>
; 		if (!IS_CODEUNIT(wc)) {
  4065c9: 89 f1                        	movl	%esi, %ecx
  4065cb: 83 e1 80                     	andl	$-128, %ecx
  4065ce: 81 f9 80 df 00 00            	cmpl	$57216, %ecx
  4065d4: 74 ae                        	je	-82 <wcrtomb+0x14>
  4065d6: eb 59                        	jmp	89 <wcrtomb+0xc1>
; 	} else if ((unsigned)wc < 0xd800 || (unsigned)wc-0xe000 < 0x2000) {
  4065d8: 81 fe 00 d8 00 00            	cmpl	$55296, %esi
  4065de: 72 65                        	jb	101 <wcrtomb+0xd5>
  4065e0: 89 f0                        	movl	%esi, %eax
  4065e2: 25 00 e0 ff ff               	andl	$4294959104, %eax
  4065e7: 3d 00 e0 00 00               	cmpl	$57344, %eax
  4065ec: 74 57                        	je	87 <wcrtomb+0xd5>
; 	} else if ((unsigned)wc-0x10000 < 0x100000) {
  4065ee: 8d 86 00 00 ff ff            	leal	-65536(%rsi), %eax
  4065f4: 3d ff ff 0f 00               	cmpl	$1048575, %eax
  4065f9: 77 36                        	ja	54 <wcrtomb+0xc1>
; 		*s++ = 0xf0 | (wc>>18);
  4065fb: 89 f0                        	movl	%esi, %eax
  4065fd: c1 e8 12                     	shrl	$18, %eax
  406600: 0c f0                        	orb	$-16, %al
  406602: 88 07                        	movb	%al, (%rdi)
; 		*s++ = 0x80 | ((wc>>12)&0x3f);
  406604: 89 f0                        	movl	%esi, %eax
  406606: c1 e8 0c                     	shrl	$12, %eax
  406609: b1 3f                        	movb	$63, %cl
  40660b: 20 c8                        	andb	%cl, %al
  40660d: b2 80                        	movb	$-128, %dl
  40660f: 08 d0                        	orb	%dl, %al
  406611: 88 47 01                     	movb	%al, 1(%rdi)
; 		*s++ = 0x80 | ((wc>>6)&0x3f);
  406614: 89 f0                        	movl	%esi, %eax
  406616: c1 e8 06                     	shrl	$6, %eax
  406619: 20 c8                        	andb	%cl, %al
  40661b: 08 d0                        	orb	%dl, %al
  40661d: 88 47 02                     	movb	%al, 2(%rdi)
; 		*s = 0x80 | (wc&0x3f);
  406620: 40 20 ce                     	andb	%cl, %sil
  406623: 40 08 d6                     	orb	%dl, %sil
  406626: 40 88 77 03                  	movb	%sil, 3(%rdi)
  40662a: b8 04 00 00 00               	movl	$4, %eax
  40662f: eb 3c                        	jmp	60 <wcrtomb+0xfd>
  406631: e8 c6 d8 ff ff               	callq	-10042 <__errno_location>
  406636: c7 00 54 00 00 00            	movl	$84, (%rax)
  40663c: 48 c7 c0 ff ff ff ff         	movq	$-1, %rax
  406643: eb 28                        	jmp	40 <wcrtomb+0xfd>
; 		*s++ = 0xe0 | (wc>>12);
  406645: 89 f0                        	movl	%esi, %eax
  406647: c1 e8 0c                     	shrl	$12, %eax
  40664a: 0c e0                        	orb	$-32, %al
  40664c: 88 07                        	movb	%al, (%rdi)
; 		*s++ = 0x80 | ((wc>>6)&0x3f);
  40664e: 89 f0                        	movl	%esi, %eax
  406650: c1 e8 06                     	shrl	$6, %eax
  406653: b1 3f                        	movb	$63, %cl
  406655: 20 c8                        	andb	%cl, %al
  406657: b2 80                        	movb	$-128, %dl
  406659: 08 d0                        	orb	%dl, %al
  40665b: 88 47 01                     	movb	%al, 1(%rdi)
; 		*s = 0x80 | (wc&0x3f);
  40665e: 40 20 ce                     	andb	%cl, %sil
  406661: 40 08 d6                     	orb	%dl, %sil
  406664: 40 88 77 02                  	movb	%sil, 2(%rdi)
  406668: b8 03 00 00 00               	movl	$3, %eax
; }
  40666d: 59                           	popq	%rcx
  40666e: c3                           	retq
  40666f: 90                           	nop

0000000000406670 __stdio_exit_needed:
; {
  406670: 53                           	pushq	%rbx
; 	for (f=*__ofl_lock(); f; f=f->next) close_file(f);
  406671: e8 4e b2 ff ff               	callq	-19890 <__ofl_lock>
  406676: 48 8b 18                     	movq	(%rax), %rbx
  406679: 48 85 db                     	testq	%rbx, %rbx
  40667c: 74 0e                        	je	14 <__stdio_exit_needed+0x1c>
  40667e: 48 89 df                     	movq	%rbx, %rdi
  406681: e8 2b 00 00 00               	callq	43 <close_file>
  406686: 48 8b 5b 70                  	movq	112(%rbx), %rbx
  40668a: eb ed                        	jmp	-19 <__stdio_exit_needed+0x9>
; 	close_file(__stdin_used);
  40668c: 48 8b 3d b5 37 00 00         	movq	14261(%rip), %rdi
  406693: e8 19 00 00 00               	callq	25 <close_file>
; 	close_file(__stdout_used);
  406698: 48 8b 3d 51 27 00 00         	movq	10065(%rip), %rdi
  40669f: e8 0d 00 00 00               	callq	13 <close_file>
; 	close_file(__stderr_used);
  4066a4: 48 8b 3d a5 2b 00 00         	movq	11173(%rip), %rdi
  4066ab: 5b                           	popq	%rbx
  4066ac: e9 00 00 00 00               	jmp	0 <close_file>

00000000004066b1 close_file:
; {
  4066b1: 53                           	pushq	%rbx
; 	if (!f) return;
  4066b2: 48 85 ff                     	testq	%rdi, %rdi
  4066b5: 74 41                        	je	65 <close_file+0x47>
  4066b7: 48 89 fb                     	movq	%rdi, %rbx
; 	FFINALLOCK(f);
  4066ba: 83 bf 8c 00 00 00 00         	cmpl	$0, 140(%rdi)
  4066c1: 78 08                        	js	8 <close_file+0x1a>
  4066c3: 48 89 df                     	movq	%rbx, %rdi
  4066c6: e8 d9 f1 ff ff               	callq	-3623 <__lockfile>
; 	if (f->wpos != f->wbase) f->write(f, 0, 0);
  4066cb: 48 8b 43 28                  	movq	40(%rbx), %rax
  4066cf: 48 3b 43 38                  	cmpq	56(%rbx), %rax
  4066d3: 74 0a                        	je	10 <close_file+0x2e>
  4066d5: 48 89 df                     	movq	%rbx, %rdi
  4066d8: 31 f6                        	xorl	%esi, %esi
  4066da: 31 d2                        	xorl	%edx, %edx
  4066dc: ff 53 48                     	callq	*72(%rbx)
; 	if (f->rpos != f->rend) f->seek(f, f->rpos-f->rend, SEEK_CUR);
  4066df: 48 8b 73 08                  	movq	8(%rbx), %rsi
  4066e3: 48 2b 73 10                  	subq	16(%rbx), %rsi
  4066e7: 74 0f                        	je	15 <close_file+0x47>
  4066e9: 48 8b 43 50                  	movq	80(%rbx), %rax
  4066ed: 48 89 df                     	movq	%rbx, %rdi
  4066f0: ba 01 00 00 00               	movl	$1, %edx
  4066f5: 5b                           	popq	%rbx
  4066f6: ff e0                        	jmpq	*%rax
; }
  4066f8: 5b                           	popq	%rbx
  4066f9: c3                           	retq
  4066fa: 66 90                        	nop
  4066fc: 0f 1f 40 00                  	nopl	(%rax)

0000000000406700 strcmp:
; 	for (; *l==*r && *l; l++, r++);
  406700: 8a 07                        	movb	(%rdi), %al
  406702: 8a 0e                        	movb	(%rsi), %cl
  406704: 84 c0                        	testb	%al, %al
  406706: 74 2c                        	je	44 <strcmp+0x34>
  406708: 38 c8                        	cmpb	%cl, %al
  40670a: 75 28                        	jne	40 <strcmp+0x34>
  40670c: ba 01 00 00 00               	movl	$1, %edx
  406711: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40671b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
  406720: 0f b6 04 17                  	movzbl	(%rdi,%rdx), %eax
  406724: 0f b6 0c 16                  	movzbl	(%rsi,%rdx), %ecx
  406728: 84 c0                        	testb	%al, %al
  40672a: 74 08                        	je	8 <strcmp+0x34>
  40672c: 48 83 c2 01                  	addq	$1, %rdx
  406730: 38 c8                        	cmpb	%cl, %al
  406732: 74 ec                        	je	-20 <strcmp+0x20>
; 	return *(unsigned char *)l - *(unsigned char *)r;
  406734: 0f b6 c0                     	movzbl	%al, %eax
  406737: 0f b6 c9                     	movzbl	%cl, %ecx
  40673a: 29 c8                        	subl	%ecx, %eax
  40673c: c3                           	retq
