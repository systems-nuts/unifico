
is_x86_64_init.out:	file format ELF64-x86-64


Disassembly of section .text:

0000000000400150 exit:
; {
  400150: 53                           	pushq	%rbx
  400151: 89 fb                        	movl	%edi, %ebx
; 	__funcs_on_exit();
  400153: e8 04 14 00 00               	callq	5124 <dummy>
; 	__libc_exit_fini();
  400158: e8 00 14 00 00               	callq	5120 <libc_exit_fini>
; 	__stdio_exit();
  40015d: 31 c0                        	xorl	%eax, %eax
  40015f: e8 50 64 00 00               	callq	25680 <__stdio_exit_needed>
; 	_Exit(code);
  400164: 89 df                        	movl	%ebx, %edi
  400166: e8 8d 3d 00 00               	callq	15757 <_Exit>
  40016b: 00 00                        	addb	%al, (%rax)
  40016d: 00 00                        	addb	%al, (%rax)
  40016f: 00 55 48                     	addb	%dl, 72(%rbp)

0000000000400170 randlc:
; {
  400170: 55                           	pushq	%rbp
  400171: 48 89 e5                     	movq	%rsp, %rbp
  400174: 48 83 ec 60                  	subq	$96, %rsp
  400178: 48 89 7d f0                  	movq	%rdi, -16(%rbp)
  40017c: 48 89 75 d0                  	movq	%rsi, -48(%rbp)
;       if (KS == 0) 
  400180: 83 3d 99 8b 00 00 00         	cmpl	$0, 35737(%rip)
  400187: 0f 85 ce 00 00 00            	jne	206 <randlc+0xeb>
  40018d: 48 b8 00 00 00 00 00 00 f0 3f	movabsq	$4607182418800017408, %rax
;         R23 = 1.0;
  400197: 48 89 05 8a 8b 00 00         	movq	%rax, 35722(%rip)
;         R46 = 1.0;
  40019e: 48 89 05 8b 8b 00 00         	movq	%rax, 35723(%rip)
;         T23 = 1.0;
  4001a5: 48 89 05 8c 8b 00 00         	movq	%rax, 35724(%rip)
;         T46 = 1.0;
  4001ac: 48 89 05 8d 8b 00 00         	movq	%rax, 35725(%rip)
;         for (i=1; i<=23; i++)
  4001b3: c7 45 fc 01 00 00 00         	movl	$1, -4(%rbp)
  4001ba: f2 0f 10 05 be 64 00 00      	movsd	25790(%rip), %xmm0
  4001c2: 83 7d fc 17                  	cmpl	$23, -4(%rbp)
  4001c6: 7f 39                        	jg	57 <randlc+0x91>
  4001c8: 90                           	nop
  4001c9: 90                           	nop
  4001ca: 90                           	nop
  4001cb: 90                           	nop
  4001cc: 90                           	nop
  4001cd: 90                           	nop
  4001ce: 90                           	nop
  4001cf: 90                           	nop
  4001d0: f2 0f 10 0d 50 8b 00 00      	movsd	35664(%rip), %xmm1
;           R23 = 0.50 * R23;
  4001d8: f2 0f 59 c8                  	mulsd	%xmm0, %xmm1
  4001dc: f2 0f 11 0d 44 8b 00 00      	movsd	%xmm1, 35652(%rip)
;           T23 = 2.0 * T23;
  4001e4: f2 0f 10 0d 4c 8b 00 00      	movsd	35660(%rip), %xmm1
  4001ec: f2 0f 58 c9                  	addsd	%xmm1, %xmm1
  4001f0: f2 0f 11 0d 40 8b 00 00      	movsd	%xmm1, 35648(%rip)
;         for (i=1; i<=23; i++)
  4001f8: ff 45 fc                     	incl	-4(%rbp)
  4001fb: 83 7d fc 17                  	cmpl	$23, -4(%rbp)
  4001ff: 7e cf                        	jle	-49 <randlc+0x60>
;         for (i=1; i<=46; i++)
  400201: c7 45 fc 01 00 00 00         	movl	$1, -4(%rbp)
  400208: f2 0f 10 05 70 64 00 00      	movsd	25712(%rip), %xmm0
  400210: 83 7d fc 2e                  	cmpl	$46, -4(%rbp)
  400214: 7f 3b                        	jg	59 <randlc+0xe1>
  400216: 90                           	nop
  400217: 90                           	nop
  400218: 90                           	nop
  400219: 90                           	nop
  40021a: 90                           	nop
  40021b: 90                           	nop
  40021c: 90                           	nop
  40021d: 90                           	nop
  40021e: 90                           	nop
  40021f: 90                           	nop
  400220: f2 0f 10 0d 08 8b 00 00      	movsd	35592(%rip), %xmm1
;           R46 = 0.50 * R46;
  400228: f2 0f 59 c8                  	mulsd	%xmm0, %xmm1
  40022c: f2 0f 11 0d fc 8a 00 00      	movsd	%xmm1, 35580(%rip)
;           T46 = 2.0 * T46;
  400234: f2 0f 10 0d 04 8b 00 00      	movsd	35588(%rip), %xmm1
  40023c: f2 0f 58 c9                  	addsd	%xmm1, %xmm1
  400240: f2 0f 11 0d f8 8a 00 00      	movsd	%xmm1, 35576(%rip)
;         for (i=1; i<=46; i++)
  400248: ff 45 fc                     	incl	-4(%rbp)
  40024b: 83 7d fc 2e                  	cmpl	$46, -4(%rbp)
  40024f: 7e cf                        	jle	-49 <randlc+0xb0>
;         KS = 1;
  400251: c7 05 c5 8a 00 00 01 00 00 00	movl	$1, 35525(%rip)
;       T1 = R23 * *A;
  40025b: f2 0f 10 05 c5 8a 00 00      	movsd	35525(%rip), %xmm0
  400263: 48 8b 45 d0                  	movq	-48(%rbp), %rax
  400267: f2 0f 10 08                  	movsd	(%rax), %xmm1
  40026b: f2 0f 59 c8                  	mulsd	%xmm0, %xmm1
  40026f: f2 0f 11 4d e8               	movsd	%xmm1, -24(%rbp)
;       j  = T1;
  400274: f2 0f 2c c9                  	cvttsd2si	%xmm1, %ecx
  400278: 89 4d f8                     	movl	%ecx, -8(%rbp)
;       A1 = j;
  40027b: 0f 57 c9                     	xorps	%xmm1, %xmm1
  40027e: f2 0f 2a c9                  	cvtsi2sd	%ecx, %xmm1
  400282: f2 0f 11 4d d8               	movsd	%xmm1, -40(%rbp)
;       A2 = *A - T23 * A1;
  400287: f2 0f 10 10                  	movsd	(%rax), %xmm2
  40028b: f2 0f 59 0d a5 8a 00 00      	mulsd	35493(%rip), %xmm1
  400293: f2 0f 5c d1                  	subsd	%xmm1, %xmm2
  400297: f2 0f 11 55 e0               	movsd	%xmm2, -32(%rbp)
;       T1 = R23 * *X;
  40029c: 48 8b 45 f0                  	movq	-16(%rbp), %rax
  4002a0: f2 0f 59 00                  	mulsd	(%rax), %xmm0
  4002a4: f2 0f 11 45 e8               	movsd	%xmm0, -24(%rbp)
;       j  = T1;
  4002a9: f2 0f 2c c0                  	cvttsd2si	%xmm0, %eax
  4002ad: 89 45 f8                     	movl	%eax, -8(%rbp)
;       X1 = j;
  4002b0: 0f 57 c0                     	xorps	%xmm0, %xmm0
  4002b3: f2 0f 2a c0                  	cvtsi2sd	%eax, %xmm0
  4002b7: f2 0f 11 45 b8               	movsd	%xmm0, -72(%rbp)
;       X2 = *X - T23 * X1;
  4002bc: 48 8b 45 f0                  	movq	-16(%rbp), %rax
  4002c0: f2 0f 10 08                  	movsd	(%rax), %xmm1
;       T1 = A1 * X2 + A2 * X1;
  4002c4: f2 0f 59 d0                  	mulsd	%xmm0, %xmm2
;       X2 = *X - T23 * X1;
  4002c8: f2 0f 59 05 68 8a 00 00      	mulsd	35432(%rip), %xmm0
  4002d0: f2 0f 5c c8                  	subsd	%xmm0, %xmm1
  4002d4: f2 0f 11 4d c0               	movsd	%xmm1, -64(%rbp)
  4002d9: f2 0f 10 45 d8               	movsd	-40(%rbp), %xmm0
;       T1 = A1 * X2 + A2 * X1;
  4002de: f2 0f 59 c1                  	mulsd	%xmm1, %xmm0
  4002e2: f2 0f 58 c2                  	addsd	%xmm2, %xmm0
  4002e6: f2 0f 11 45 e8               	movsd	%xmm0, -24(%rbp)
  4002eb: f2 0f 10 15 35 8a 00 00      	movsd	35381(%rip), %xmm2
;       j  = R23 * T1;
  4002f3: f2 0f 59 d0                  	mulsd	%xmm0, %xmm2
  4002f7: f2 0f 2c c2                  	cvttsd2si	%xmm2, %eax
  4002fb: 89 45 f8                     	movl	%eax, -8(%rbp)
;       T2 = j;
  4002fe: 0f 57 d2                     	xorps	%xmm2, %xmm2
  400301: f2 0f 2a d0                  	cvtsi2sd	%eax, %xmm2
  400305: f2 0f 11 55 a0               	movsd	%xmm2, -96(%rbp)
;       Z = T1 - T23 * T2;
  40030a: f2 0f 59 15 26 8a 00 00      	mulsd	35366(%rip), %xmm2
  400312: f2 0f 5c c2                  	subsd	%xmm2, %xmm0
  400316: f2 0f 11 45 c8               	movsd	%xmm0, -56(%rbp)
;       T3 = T23 * Z + A2 * X2;
  40031b: f2 0f 59 05 15 8a 00 00      	mulsd	35349(%rip), %xmm0
  400323: f2 0f 59 4d e0               	mulsd	-32(%rbp), %xmm1
  400328: f2 0f 58 c8                  	addsd	%xmm0, %xmm1
  40032c: f2 0f 11 4d a8               	movsd	%xmm1, -88(%rbp)
  400331: f2 0f 10 05 f7 89 00 00      	movsd	35319(%rip), %xmm0
;       j  = R46 * T3;
  400339: f2 0f 59 c1                  	mulsd	%xmm1, %xmm0
  40033d: f2 0f 2c c0                  	cvttsd2si	%xmm0, %eax
  400341: 89 45 f8                     	movl	%eax, -8(%rbp)
;       T4 = j;
  400344: 0f 57 c0                     	xorps	%xmm0, %xmm0
  400347: f2 0f 2a c0                  	cvtsi2sd	%eax, %xmm0
  40034b: f2 0f 11 45 b0               	movsd	%xmm0, -80(%rbp)
;       *X = T3 - T46 * T4;
  400350: f2 0f 59 05 e8 89 00 00      	mulsd	35304(%rip), %xmm0
  400358: f2 0f 5c c8                  	subsd	%xmm0, %xmm1
  40035c: 48 8b 45 f0                  	movq	-16(%rbp), %rax
  400360: f2 0f 11 08                  	movsd	%xmm1, (%rax)
;       return(R46 * *X);
  400364: f2 0f 10 05 c4 89 00 00      	movsd	35268(%rip), %xmm0
  40036c: 48 8b 45 f0                  	movq	-16(%rbp), %rax
  400370: f2 0f 59 00                  	mulsd	(%rax), %xmm0
  400374: 48 83 c4 60                  	addq	$96, %rsp
  400378: 5d                           	popq	%rbp
  400379: c3                           	retq
  40037a: 66 0f 1f 44 00 00            	nopw	(%rax,%rax)

0000000000400380 create_seq:
; {
  400380: 55                           	pushq	%rbp
  400381: 48 89 e5                     	movq	%rsp, %rbp
  400384: 41 57                        	pushq	%r15
  400386: 41 56                        	pushq	%r14
  400388: 53                           	pushq	%rbx
  400389: 48 83 ec 28                  	subq	$40, %rsp
  40038d: f2 0f 11 45 c0               	movsd	%xmm0, -64(%rbp)
  400392: f2 0f 11 4d c8               	movsd	%xmm1, -56(%rbp)
;         k = MAX_KEY/4;
  400397: c7 45 d4 00 02 00 00         	movl	$512, -44(%rbp)
; 	for (i=0; i<NUM_KEYS; i++)
  40039e: c7 45 e4 00 00 00 00         	movl	$0, -28(%rbp)
  4003a5: 4c 8d 75 c0                  	leaq	-64(%rbp), %r14
  4003a9: 48 8d 5d c8                  	leaq	-56(%rbp), %rbx
  4003ad: 4c 8d 3d ac 99 00 00         	leaq	39340(%rip), %r15
  4003b4: 81 7d e4 ff ff 00 00         	cmpl	$65535, -28(%rbp)
  4003bb: 7f 76                        	jg	118 <create_seq+0xb3>
  4003bd: 90                           	nop
  4003be: 90                           	nop
  4003bf: 90                           	nop
; 	    x = randlc(&seed, &a);
  4003c0: 4c 89 f7                     	movq	%r14, %rdi
  4003c3: 48 89 de                     	movq	%rbx, %rsi
  4003c6: e8 a5 fd ff ff               	callq	-603 <randlc>
  4003cb: f2 0f 11 45 d8               	movsd	%xmm0, -40(%rbp)
; 	    x += randlc(&seed, &a);
  4003d0: 4c 89 f7                     	movq	%r14, %rdi
  4003d3: 48 89 de                     	movq	%rbx, %rsi
  4003d6: e8 95 fd ff ff               	callq	-619 <randlc>
  4003db: f2 0f 58 45 d8               	addsd	-40(%rbp), %xmm0
  4003e0: f2 0f 11 45 d8               	movsd	%xmm0, -40(%rbp)
;     	    x += randlc(&seed, &a);
  4003e5: 4c 89 f7                     	movq	%r14, %rdi
  4003e8: 48 89 de                     	movq	%rbx, %rsi
  4003eb: e8 80 fd ff ff               	callq	-640 <randlc>
  4003f0: f2 0f 58 45 d8               	addsd	-40(%rbp), %xmm0
  4003f5: f2 0f 11 45 d8               	movsd	%xmm0, -40(%rbp)
; 	    x += randlc(&seed, &a);  
  4003fa: 4c 89 f7                     	movq	%r14, %rdi
  4003fd: 48 89 de                     	movq	%rbx, %rsi
  400400: e8 6b fd ff ff               	callq	-661 <randlc>
  400405: f2 0f 58 45 d8               	addsd	-40(%rbp), %xmm0
  40040a: f2 0f 11 45 d8               	movsd	%xmm0, -40(%rbp)
;             key_array[i] = k*x;
  40040f: 0f 57 c9                     	xorps	%xmm1, %xmm1
  400412: f2 0f 2a 4d d4               	cvtsi2sdl	-44(%rbp), %xmm1
  400417: f2 0f 59 c8                  	mulsd	%xmm0, %xmm1
  40041b: f2 0f 2c c1                  	cvttsd2si	%xmm1, %eax
  40041f: 48 63 4d e4                  	movslq	-28(%rbp), %rcx
  400423: 41 89 04 8f                  	movl	%eax, (%r15,%rcx,4)
; 	for (i=0; i<NUM_KEYS; i++)
  400427: ff 45 e4                     	incl	-28(%rbp)
  40042a: 81 7d e4 ff ff 00 00         	cmpl	$65535, -28(%rbp)
  400431: 7e 8d                        	jle	-115 <create_seq+0x40>
; }
  400433: 48 83 c4 28                  	addq	$40, %rsp
  400437: 5b                           	popq	%rbx
  400438: 41 5e                        	popq	%r14
  40043a: 41 5f                        	popq	%r15
  40043c: 5d                           	popq	%rbp
  40043d: c3                           	retq
  40043e: 66 90                        	nop

0000000000400440 full_verify:
; {
  400440: 55                           	pushq	%rbp
  400441: 48 89 e5                     	movq	%rsp, %rbp
  400444: 48 83 ec 10                  	subq	$16, %rsp
;     for( i=0; i<NUM_KEYS; i++ )
  400448: c7 45 fc 00 00 00 00         	movl	$0, -4(%rbp)
  40044f: 4c 8d 05 0a 99 04 00         	leaq	301322(%rip), %r8
  400456: 48 8d 0d 03 99 00 00         	leaq	39171(%rip), %rcx
  40045d: 81 7d fc ff ff 00 00         	cmpl	$65535, -4(%rbp)
  400464: 7f 36                        	jg	54 <full_verify+0x5c>
  400466: 90                           	nop
  400467: 90                           	nop
  400468: 90                           	nop
  400469: 90                           	nop
  40046a: 90                           	nop
  40046b: 90                           	nop
  40046c: 90                           	nop
  40046d: 90                           	nop
  40046e: 90                           	nop
  40046f: 90                           	nop
;         key_array[--key_buff_ptr_global[key_buff2[i]]] = key_buff2[i];
  400470: 48 63 55 fc                  	movslq	-4(%rbp), %rdx
  400474: 49 63 14 90                  	movslq	(%r8,%rdx,4), %rdx
  400478: 48 8b 35 b9 c9 08 00         	movq	575929(%rip), %rsi
  40047f: 48 63 3c 96                  	movslq	(%rsi,%rdx,4), %rdi
  400483: 48 8d 47 ff                  	leaq	-1(%rdi), %rax
  400487: 89 04 96                     	movl	%eax, (%rsi,%rdx,4)
  40048a: 89 d0                        	movl	%edx, %eax
  40048c: 89 54 b9 fc                  	movl	%edx, -4(%rcx,%rdi,4)
;     for( i=0; i<NUM_KEYS; i++ )
  400490: ff 45 fc                     	incl	-4(%rbp)
  400493: 81 7d fc ff ff 00 00         	cmpl	$65535, -4(%rbp)
  40049a: 7e d4                        	jle	-44 <full_verify+0x30>
;     j = 0;
  40049c: c7 45 f8 00 00 00 00         	movl	$0, -8(%rbp)
;     for( i=1; i<NUM_KEYS; i++ )
  4004a3: c7 45 fc 01 00 00 00         	movl	$1, -4(%rbp)
  4004aa: 48 8d 05 af 98 00 00         	leaq	39087(%rip), %rax
  4004b1: 81 7d fc ff ff 00 00         	cmpl	$65535, -4(%rbp)
  4004b8: 7e 12                        	jle	18 <full_verify+0x8c>
  4004ba: eb 22                        	jmp	34 <full_verify+0x9e>
  4004bc: 90                           	nop
  4004bd: 90                           	nop
  4004be: 90                           	nop
  4004bf: 90                           	nop
  4004c0: ff 45 fc                     	incl	-4(%rbp)
  4004c3: 81 7d fc ff ff 00 00         	cmpl	$65535, -4(%rbp)
  4004ca: 7f 12                        	jg	18 <full_verify+0x9e>
;         if( key_array[i-1] > key_array[i] )
  4004cc: 48 63 4d fc                  	movslq	-4(%rbp), %rcx
  4004d0: 8b 54 88 fc                  	movl	-4(%rax,%rcx,4), %edx
  4004d4: 3b 14 88                     	cmpl	(%rax,%rcx,4), %edx
  4004d7: 7e e7                        	jle	-25 <full_verify+0x80>
;             j++;
  4004d9: ff 45 f8                     	incl	-8(%rbp)
  4004dc: eb e2                        	jmp	-30 <full_verify+0x80>
;     if( j != 0 )
  4004de: 83 7d f8 00                  	cmpl	$0, -8(%rbp)
  4004e2: 74 14                        	je	20 <full_verify+0xb8>
;                 (long)j );
  4004e4: 48 63 75 f8                  	movslq	-8(%rbp), %rsi
;         printf( "Full_verify: number of keys out of sort: %ld\n",
  4004e8: 48 8d 3d c9 61 00 00         	leaq	25033(%rip), %rdi
  4004ef: 31 c0                        	xorl	%eax, %eax
  4004f1: e8 0e 13 00 00               	callq	4878 <printf>
  4004f6: eb 06                        	jmp	6 <full_verify+0xbe>
;         passed_verification++;
  4004f8: ff 05 4a c9 08 00            	incl	575818(%rip)
; }
  4004fe: 48 83 c4 10                  	addq	$16, %rsp
  400502: 5d                           	popq	%rbp
  400503: c3                           	retq
  400504: 66 66 66 2e 0f 1f 84 00 00 00 00 00  	nopw	%cs:(%rax,%rax)

0000000000400510 rank:
; {
  400510: 55                           	pushq	%rbp
  400511: 48 89 e5                     	movq	%rsp, %rbp
  400514: 41 57                        	pushq	%r15
  400516: 41 56                        	pushq	%r14
  400518: 41 54                        	pushq	%r12
  40051a: 53                           	pushq	%rbx
  40051b: 48 83 ec 30                  	subq	$48, %rsp
  40051f: 89 7d d8                     	movl	%edi, -40(%rbp)
;     int shift = MAX_KEY_LOG_2 - NUM_BUCKETS_LOG_2;
  400522: c7 45 cc 02 00 00 00         	movl	$2, -52(%rbp)
;     key_array[iteration] = iteration;
  400529: 48 8d 05 30 98 00 00         	leaq	38960(%rip), %rax
  400530: 48 63 cf                     	movslq	%edi, %rcx
  400533: 89 ca                        	movl	%ecx, %edx
  400535: 89 0c 88                     	movl	%ecx, (%rax,%rcx,4)
  400538: be 00 08 00 00               	movl	$2048, %esi
;     key_array[iteration+MAX_ITERATIONS] = MAX_KEY - iteration;
  40053d: 29 ce                        	subl	%ecx, %esi
  40053f: 89 74 88 28                  	movl	%esi, 40(%rax,%rcx,4)
;     for( i=0; i<TEST_ARRAY_SIZE; i++ )
  400543: c7 45 dc 00 00 00 00         	movl	$0, -36(%rbp)
  40054a: 48 8d 0d 9f c8 08 00         	leaq	575647(%rip), %rcx
  400551: 48 8d 15 78 c8 08 00         	leaq	575608(%rip), %rdx
  400558: 83 7d dc 04                  	cmpl	$4, -36(%rbp)
  40055c: 7f 1b                        	jg	27 <rank+0x69>
  40055e: 90                           	nop
  40055f: 90                           	nop
;         partial_verify_vals[i] = key_array[test_index_array[i]];
  400560: 48 63 75 dc                  	movslq	-36(%rbp), %rsi
  400564: 48 63 3c b1                  	movslq	(%rcx,%rsi,4), %rdi
  400568: 8b 3c b8                     	movl	(%rax,%rdi,4), %edi
  40056b: 89 3c b2                     	movl	%edi, (%rdx,%rsi,4)
;     for( i=0; i<TEST_ARRAY_SIZE; i++ )
  40056e: ff c6                        	incl	%esi
  400570: 89 75 dc                     	movl	%esi, -36(%rbp)
  400573: 83 7d dc 04                  	cmpl	$4, -36(%rbp)
  400577: 7e e7                        	jle	-25 <rank+0x50>
;     for( i=0; i<NUM_BUCKETS; i++ )  
  400579: c7 45 dc 00 00 00 00         	movl	$0, -36(%rbp)
  400580: 48 8d 05 d9 bf 08 00         	leaq	573401(%rip), %rax
  400587: 81 7d dc ff 01 00 00         	cmpl	$511, -36(%rbp)
  40058e: 7f 19                        	jg	25 <rank+0x99>
;         bucket_size[i] = 0;
  400590: 48 63 4d dc                  	movslq	-36(%rbp), %rcx
  400594: c7 04 88 00 00 00 00         	movl	$0, (%rax,%rcx,4)
;     for( i=0; i<NUM_BUCKETS; i++ )  
  40059b: ff c1                        	incl	%ecx
  40059d: 89 4d dc                     	movl	%ecx, -36(%rbp)
  4005a0: 81 7d dc ff 01 00 00         	cmpl	$511, -36(%rbp)
  4005a7: 7e e7                        	jle	-25 <rank+0x80>
;     for( i=0; i<NUM_KEYS; i++ )
  4005a9: c7 45 dc 00 00 00 00         	movl	$0, -36(%rbp)
  4005b0: 48 8d 05 a9 97 00 00         	leaq	38825(%rip), %rax
  4005b7: 48 8d 15 a2 bf 08 00         	leaq	573346(%rip), %rdx
  4005be: 81 7d dc ff ff 00 00         	cmpl	$65535, -36(%rbp)
  4005c5: 7f 2e                        	jg	46 <rank+0xe5>
  4005c7: 90                           	nop
  4005c8: 90                           	nop
  4005c9: 90                           	nop
  4005ca: 90                           	nop
  4005cb: 90                           	nop
  4005cc: 90                           	nop
  4005cd: 90                           	nop
  4005ce: 90                           	nop
  4005cf: 90                           	nop
;         bucket_size[key_array[i] >> shift]++;
  4005d0: 48 63 4d dc                  	movslq	-36(%rbp), %rcx
  4005d4: 8b 34 88                     	movl	(%rax,%rcx,4), %esi
  4005d7: 89 cf                        	movl	%ecx, %edi
  4005d9: 0f b6 4d cc                  	movzbl	-52(%rbp), %ecx
  4005dd: d3 fe                        	sarl	%cl, %esi
  4005df: 48 63 ce                     	movslq	%esi, %rcx
  4005e2: ff 04 8a                     	incl	(%rdx,%rcx,4)
;     for( i=0; i<NUM_KEYS; i++ )
  4005e5: 89 f9                        	movl	%edi, %ecx
  4005e7: ff c1                        	incl	%ecx
  4005e9: 89 4d dc                     	movl	%ecx, -36(%rbp)
  4005ec: 81 7d dc ff ff 00 00         	cmpl	$65535, -36(%rbp)
  4005f3: 7e db                        	jle	-37 <rank+0xc0>
;     bucket_ptrs[0] = 0;
  4005f5: c7 05 61 b7 08 00 00 00 00 00	movl	$0, 571233(%rip)
;     for( i=1; i< NUM_BUCKETS; i++ )  
  4005ff: c7 45 dc 01 00 00 00         	movl	$1, -36(%rbp)
  400606: 48 8d 05 53 b7 08 00         	leaq	571219(%rip), %rax
  40060d: 48 8d 0d 4c bf 08 00         	leaq	573260(%rip), %rcx
  400614: 81 7d dc ff 01 00 00         	cmpl	$511, -36(%rbp)
  40061b: 7f 20                        	jg	32 <rank+0x12d>
  40061d: 90                           	nop
  40061e: 90                           	nop
  40061f: 90                           	nop
;         bucket_ptrs[i] = bucket_ptrs[i-1] + bucket_size[i-1];
  400620: 48 63 55 dc                  	movslq	-36(%rbp), %rdx
  400624: 8b 74 90 fc                  	movl	-4(%rax,%rdx,4), %esi
  400628: 03 74 91 fc                  	addl	-4(%rcx,%rdx,4), %esi
  40062c: 89 34 90                     	movl	%esi, (%rax,%rdx,4)
;     for( i=1; i< NUM_BUCKETS; i++ )  
  40062f: ff c2                        	incl	%edx
  400631: 89 55 dc                     	movl	%edx, -36(%rbp)
  400634: 81 7d dc ff 01 00 00         	cmpl	$511, -36(%rbp)
  40063b: 7e e3                        	jle	-29 <rank+0x110>
;     for( i=0; i<NUM_KEYS; i++ )  
  40063d: c7 45 dc 00 00 00 00         	movl	$0, -36(%rbp)
  400644: 4c 8d 05 15 97 00 00         	leaq	38677(%rip), %r8
  40064b: 48 8d 15 0e b7 08 00         	leaq	571150(%rip), %rdx
  400652: 48 8d 35 07 97 04 00         	leaq	300807(%rip), %rsi
  400659: 81 7d dc ff ff 00 00         	cmpl	$65535, -36(%rbp)
  400660: 7f 45                        	jg	69 <rank+0x197>
  400662: 90                           	nop
  400663: 90                           	nop
  400664: 90                           	nop
  400665: 90                           	nop
  400666: 90                           	nop
  400667: 90                           	nop
  400668: 90                           	nop
  400669: 90                           	nop
  40066a: 90                           	nop
  40066b: 90                           	nop
  40066c: 90                           	nop
  40066d: 90                           	nop
  40066e: 90                           	nop
  40066f: 90                           	nop
;         key = key_array[i];
  400670: 48 63 4d dc                  	movslq	-36(%rbp), %rcx
  400674: 41 8b 04 88                  	movl	(%r8,%rcx,4), %eax
  400678: 89 cb                        	movl	%ecx, %ebx
  40067a: 89 45 b4                     	movl	%eax, -76(%rbp)
;         key_buff2[bucket_ptrs[key >> shift]++] = key;
  40067d: 0f b6 4d cc                  	movzbl	-52(%rbp), %ecx
  400681: 89 c7                        	movl	%eax, %edi
  400683: d3 ff                        	sarl	%cl, %edi
  400685: 48 63 cf                     	movslq	%edi, %rcx
  400688: 48 63 3c 8a                  	movslq	(%rdx,%rcx,4), %rdi
  40068c: 89 04 be                     	movl	%eax, (%rsi,%rdi,4)
  40068f: 89 f8                        	movl	%edi, %eax
  400691: 8d 40 01                     	leal	1(%rax), %eax
  400694: 89 04 8a                     	movl	%eax, (%rdx,%rcx,4)
;     for( i=0; i<NUM_KEYS; i++ )  
  400697: 89 d8                        	movl	%ebx, %eax
  400699: ff c0                        	incl	%eax
  40069b: 89 45 dc                     	movl	%eax, -36(%rbp)
  40069e: 81 7d dc ff ff 00 00         	cmpl	$65535, -36(%rbp)
  4006a5: 7e c9                        	jle	-55 <rank+0x160>
;     key_buff_ptr2 = key_buff2;
  4006a7: 48 8d 05 b2 96 04 00         	leaq	300722(%rip), %rax
  4006ae: 48 89 45 b8                  	movq	%rax, -72(%rbp)
;     for( i=0; i<MAX_KEY; i++ )
  4006b2: c7 45 dc 00 00 00 00         	movl	$0, -36(%rbp)
  4006b9: 48 8d 05 a0 96 08 00         	leaq	562848(%rip), %rax
  4006c0: 81 7d dc ff 07 00 00         	cmpl	$2047, -36(%rbp)
  4006c7: 7f 20                        	jg	32 <rank+0x1d9>
  4006c9: 90                           	nop
  4006ca: 90                           	nop
  4006cb: 90                           	nop
  4006cc: 90                           	nop
  4006cd: 90                           	nop
  4006ce: 90                           	nop
  4006cf: 90                           	nop
;         key_buff1[i] = 0;
  4006d0: 48 63 4d dc                  	movslq	-36(%rbp), %rcx
  4006d4: c7 04 88 00 00 00 00         	movl	$0, (%rax,%rcx,4)
;     for( i=0; i<MAX_KEY; i++ )
  4006db: ff c1                        	incl	%ecx
  4006dd: 89 4d dc                     	movl	%ecx, -36(%rbp)
  4006e0: 81 7d dc ff 07 00 00         	cmpl	$2047, -36(%rbp)
  4006e7: 7e e7                        	jle	-25 <rank+0x1c0>
;     key_buff_ptr = key_buff1;
  4006e9: 48 8d 05 70 96 08 00         	leaq	562800(%rip), %rax
  4006f0: 48 89 45 c0                  	movq	%rax, -64(%rbp)
;     for( i=0; i<NUM_KEYS; i++ )
  4006f4: c7 45 dc 00 00 00 00         	movl	$0, -36(%rbp)
  4006fb: 81 7d dc ff ff 00 00         	cmpl	$65535, -36(%rbp)
  400702: 7f 2b                        	jg	43 <rank+0x21f>
  400704: 90                           	nop
  400705: 90                           	nop
  400706: 90                           	nop
  400707: 90                           	nop
  400708: 90                           	nop
  400709: 90                           	nop
  40070a: 90                           	nop
  40070b: 90                           	nop
  40070c: 90                           	nop
  40070d: 90                           	nop
  40070e: 90                           	nop
  40070f: 90                           	nop
;         key_buff_ptr[key_buff_ptr2[i]]++;  /* Now they have individual key   */
  400710: 48 8b 45 c0                  	movq	-64(%rbp), %rax
  400714: 48 8b 4d b8                  	movq	-72(%rbp), %rcx
  400718: 48 63 55 dc                  	movslq	-36(%rbp), %rdx
  40071c: 48 63 0c 91                  	movslq	(%rcx,%rdx,4), %rcx
  400720: ff 04 88                     	incl	(%rax,%rcx,4)
;     for( i=0; i<NUM_KEYS; i++ )
  400723: ff 45 dc                     	incl	-36(%rbp)
  400726: 81 7d dc ff ff 00 00         	cmpl	$65535, -36(%rbp)
  40072d: 7e e1                        	jle	-31 <rank+0x200>
;     for( i=0; i<MAX_KEY-1; i++ )   
  40072f: c7 45 dc 00 00 00 00         	movl	$0, -36(%rbp)
  400736: 81 7d dc fe 07 00 00         	cmpl	$2046, -36(%rbp)
  40073d: 7f 1c                        	jg	28 <rank+0x24b>
  40073f: 90                           	nop
;         key_buff_ptr[i+1] += key_buff_ptr[i];  
  400740: 48 8b 45 c0                  	movq	-64(%rbp), %rax
  400744: 48 63 4d dc                  	movslq	-36(%rbp), %rcx
  400748: 8b 14 88                     	movl	(%rax,%rcx,4), %edx
  40074b: 01 54 88 04                  	addl	%edx, 4(%rax,%rcx,4)
;     for( i=0; i<MAX_KEY-1; i++ )   
  40074f: ff 45 dc                     	incl	-36(%rbp)
  400752: 81 7d dc fe 07 00 00         	cmpl	$2046, -36(%rbp)
  400759: 7e e5                        	jle	-27 <rank+0x230>
;     for( i=0; i<TEST_ARRAY_SIZE; i++ )
  40075b: c7 45 dc 00 00 00 00         	movl	$0, -36(%rbp)
  400762: 48 8d 1d 67 c6 08 00         	leaq	575079(%rip), %rbx
  400769: 4c 8d 3d a0 c6 08 00         	leaq	575136(%rip), %r15
  400770: 4c 8d 35 6f 5f 00 00         	leaq	24431(%rip), %r14
  400777: 45 31 e4                     	xorl	%r12d, %r12d
  40077a: 83 7d dc 04                  	cmpl	$4, -36(%rbp)
  40077e: 7e 29                        	jle	41 <rank+0x299>
  400780: e9 97 00 00 00               	jmp	151 <rank+0x30c>
;                          iteration, (int)i );
  400785: 8b 75 d8                     	movl	-40(%rbp), %esi
  400788: 8b 55 dc                     	movl	-36(%rbp), %edx
  40078b: 44 89 e0                     	movl	%r12d, %eax
;                 printf( "Failed partial verification: "
  40078e: 4c 89 f7                     	movq	%r14, %rdi
  400791: e8 6e 10 00 00               	callq	4206 <printf>
  400796: 90                           	nop
  400797: 90                           	nop
  400798: 90                           	nop
  400799: 90                           	nop
  40079a: 90                           	nop
  40079b: 90                           	nop
  40079c: 90                           	nop
  40079d: 90                           	nop
  40079e: 90                           	nop
  40079f: 90                           	nop
;     for( i=0; i<TEST_ARRAY_SIZE; i++ )
  4007a0: ff 45 dc                     	incl	-36(%rbp)
  4007a3: 83 7d dc 04                  	cmpl	$4, -36(%rbp)
  4007a7: 7f 73                        	jg	115 <rank+0x30c>
;         k = partial_verify_vals[i];          /* test vals were put here */
  4007a9: 48 63 45 dc                  	movslq	-36(%rbp), %rax
  4007ad: 8b 04 83                     	movl	(%rbx,%rax,4), %eax
  4007b0: 89 45 c8                     	movl	%eax, -56(%rbp)
;         if( 0 < k  &&  k <= NUM_KEYS-1 )
  4007b3: 85 c0                        	testl	%eax, %eax
  4007b5: 7e e9                        	jle	-23 <rank+0x290>
  4007b7: 81 7d c8 ff ff 00 00         	cmpl	$65535, -56(%rbp)
  4007be: 7f e0                        	jg	-32 <rank+0x290>
;             INT_TYPE key_rank = key_buff_ptr[k-1];
  4007c0: 48 8b 45 c0                  	movq	-64(%rbp), %rax
  4007c4: 48 63 4d c8                  	movslq	-56(%rbp), %rcx
  4007c8: 8b 44 88 fc                  	movl	-4(%rax,%rcx,4), %eax
  4007cc: 89 45 d0                     	movl	%eax, -48(%rbp)
;             int failed = 0;
  4007cf: c7 45 d4 00 00 00 00         	movl	$0, -44(%rbp)
;                     if( i <= 2 )
  4007d6: 83 7d dc 02                  	cmpl	$2, -36(%rbp)
  4007da: 7f 1f                        	jg	31 <rank+0x2eb>
;                         if( key_rank != test_rank_array[i]+iteration )
  4007dc: 48 63 45 dc                  	movslq	-36(%rbp), %rax
  4007e0: 41 8b 04 87                  	movl	(%r15,%rax,4), %eax
  4007e4: 03 45 d8                     	addl	-40(%rbp), %eax
  4007e7: 39 45 d0                     	cmpl	%eax, -48(%rbp)
  4007ea: 74 1f                        	je	31 <rank+0x2fb>
  4007ec: c7 45 d4 01 00 00 00         	movl	$1, -44(%rbp)
;             if( failed == 1 )
  4007f3: 83 7d d4 01                  	cmpl	$1, -44(%rbp)
  4007f7: 75 a7                        	jne	-89 <rank+0x290>
  4007f9: eb 8a                        	jmp	-118 <rank+0x275>
;                         if( key_rank != test_rank_array[i]-iteration )
  4007fb: 48 63 45 dc                  	movslq	-36(%rbp), %rax
  4007ff: 41 8b 04 87                  	movl	(%r15,%rax,4), %eax
  400803: 2b 45 d8                     	subl	-40(%rbp), %eax
  400806: 39 45 d0                     	cmpl	%eax, -48(%rbp)
  400809: 75 e1                        	jne	-31 <rank+0x2dc>
  40080b: ff 05 37 c6 08 00            	incl	575031(%rip)
;             if( failed == 1 )
  400811: 83 7d d4 01                  	cmpl	$1, -44(%rbp)
  400815: 75 89                        	jne	-119 <rank+0x290>
  400817: e9 69 ff ff ff               	jmp	-151 <rank+0x275>
;     if( iteration == MAX_ITERATIONS ) 
  40081c: 83 7d d8 0a                  	cmpl	$10, -40(%rbp)
  400820: 75 0b                        	jne	11 <rank+0x31d>
;         key_buff_ptr_global = key_buff_ptr;
  400822: 48 8b 45 c0                  	movq	-64(%rbp), %rax
  400826: 48 89 05 0b c6 08 00         	movq	%rax, 574987(%rip)
; }      
  40082d: 48 83 c4 30                  	addq	$48, %rsp
  400831: 5b                           	popq	%rbx
  400832: 41 5c                        	popq	%r12
  400834: 41 5e                        	popq	%r14
  400836: 41 5f                        	popq	%r15
  400838: 5d                           	popq	%rbp
  400839: c3                           	retq
  40083a: 66 0f 1f 44 00 00            	nopw	(%rax,%rax)

0000000000400840 main:
; {
  400840: 55                           	pushq	%rbp
  400841: 48 89 e5                     	movq	%rsp, %rbp
  400844: 53                           	pushq	%rbx
  400845: 48 81 ec 98 00 00 00         	subq	$152, %rsp
  40084c: c7 45 c0 00 00 00 00         	movl	$0, -64(%rbp)
  400853: 89 7d c4                     	movl	%edi, -60(%rbp)
  400856: 48 89 75 b8                  	movq	%rsi, -72(%rbp)
;     timer_on = 0;            
  40085a: c7 45 f4 00 00 00 00         	movl	$0, -12(%rbp)
;     if ((fp = fopen("timer.flag", "r")) != NULL) {
  400861: 48 8d 3d b6 5e 00 00         	leaq	24246(%rip), %rdi
  400868: 48 8d 35 ba 5e 00 00         	leaq	24250(%rip), %rsi
  40086f: e8 e4 0e 00 00               	callq	3812 <fopen64>
  400874: 48 89 45 c8                  	movq	%rax, -56(%rbp)
  400878: 48 85 c0                     	testq	%rax, %rax
  40087b: 74 10                        	je	16 <main+0x4d>
;         fclose(fp);
  40087d: 48 8b 7d c8                  	movq	-56(%rbp), %rdi
  400881: e8 07 0d 00 00               	callq	3335 <fclose>
;         timer_on = 1;
  400886: c7 45 f4 01 00 00 00         	movl	$1, -12(%rbp)
  40088d: 31 ff                        	xorl	%edi, %edi
;     timer_clear( 0 );
  40088f: e8 4c 03 00 00               	callq	844 <timer_clear>
;     if (timer_on) {
  400894: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  400898: 74 1e                        	je	30 <main+0x78>
  40089a: bf 01 00 00 00               	movl	$1, %edi
;         timer_clear( 1 );
  40089f: e8 3c 03 00 00               	callq	828 <timer_clear>
  4008a4: bf 02 00 00 00               	movl	$2, %edi
;         timer_clear( 2 );
  4008a9: e8 32 03 00 00               	callq	818 <timer_clear>
  4008ae: bf 03 00 00 00               	movl	$3, %edi
;         timer_clear( 3 );
  4008b3: e8 28 03 00 00               	callq	808 <timer_clear>
;     if (timer_on) timer_start( 3 );
  4008b8: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  4008bc: 74 0a                        	je	10 <main+0x88>
  4008be: bf 03 00 00 00               	movl	$3, %edi
  4008c3: e8 48 03 00 00               	callq	840 <timer_start>
;     for( i=0; i<TEST_ARRAY_SIZE; i++ )
  4008c8: c7 45 ec 00 00 00 00         	movl	$0, -20(%rbp)
  4008cf: 48 8d 05 ca 81 00 00         	leaq	33226(%rip), %rax
  4008d6: 48 8d 0d 13 c5 08 00         	leaq	574739(%rip), %rcx
  4008dd: 48 8d 15 dc 81 00 00         	leaq	33244(%rip), %rdx
  4008e4: 48 8d 35 25 c5 08 00         	leaq	574757(%rip), %rsi
  4008eb: 83 7d ec 04                  	cmpl	$4, -20(%rbp)
  4008ef: 7f 28                        	jg	40 <main+0xd9>
  4008f1: 90                           	nop
  4008f2: 90                           	nop
  4008f3: 90                           	nop
  4008f4: 90                           	nop
  4008f5: 90                           	nop
  4008f6: 90                           	nop
  4008f7: 90                           	nop
  4008f8: 90                           	nop
  4008f9: 90                           	nop
  4008fa: 90                           	nop
  4008fb: 90                           	nop
  4008fc: 90                           	nop
  4008fd: 90                           	nop
  4008fe: 90                           	nop
  4008ff: 90                           	nop
;                 test_index_array[i] = S_test_index_array[i];
  400900: 48 63 7d ec                  	movslq	-20(%rbp), %rdi
  400904: 8b 1c b8                     	movl	(%rax,%rdi,4), %ebx
  400907: 89 1c b9                     	movl	%ebx, (%rcx,%rdi,4)
;                 test_rank_array[i]  = S_test_rank_array[i];
  40090a: 8b 1c ba                     	movl	(%rdx,%rdi,4), %ebx
  40090d: 89 1c be                     	movl	%ebx, (%rsi,%rdi,4)
;     for( i=0; i<TEST_ARRAY_SIZE; i++ )
  400910: ff 45 ec                     	incl	-20(%rbp)
  400913: 83 7d ec 04                  	cmpl	$4, -20(%rbp)
  400917: 7e e7                        	jle	-25 <main+0xc0>
;     printf
  400919: 48 8d 3d 0b 5e 00 00         	leaq	24075(%rip), %rdi
  400920: 31 c0                        	xorl	%eax, %eax
  400922: 89 c3                        	movl	%eax, %ebx
  400924: e8 db 0e 00 00               	callq	3803 <printf>
;     printf( " Size:  %ld  (class %c)\n", (long)TOTAL_KEYS, CLASS );
  400929: 48 8d 3d 34 5e 00 00         	leaq	24116(%rip), %rdi
  400930: be 00 00 01 00               	movl	$65536, %esi
  400935: ba 53 00 00 00               	movl	$83, %edx
  40093a: 89 d8                        	movl	%ebx, %eax
  40093c: e8 c3 0e 00 00               	callq	3779 <printf>
;     printf( " Iterations:   %d\n", MAX_ITERATIONS );
  400941: 48 8d 3d 35 5e 00 00         	leaq	24117(%rip), %rdi
  400948: be 0a 00 00 00               	movl	$10, %esi
  40094d: 89 d8                        	movl	%ebx, %eax
  40094f: e8 b0 0e 00 00               	callq	3760 <printf>
;     if (timer_on) timer_start( 1 );
  400954: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  400958: 74 0a                        	je	10 <main+0x124>
  40095a: bf 01 00 00 00               	movl	$1, %edi
  40095f: e8 ac 02 00 00               	callq	684 <timer_start>
  400964: f2 0f 10 05 1c 5d 00 00      	movsd	23836(%rip), %xmm0
  40096c: f2 0f 10 0d 1c 5d 00 00      	movsd	23836(%rip), %xmm1
;     create_seq( 314159265.00,                    /* Random number gen seed */
  400974: e8 07 fa ff ff               	callq	-1529 <create_seq>
;     if (timer_on) timer_stop( 1 );
  400979: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  40097d: 74 0a                        	je	10 <main+0x149>
  40097f: bf 01 00 00 00               	movl	$1, %edi
  400984: e8 d7 02 00 00               	callq	727 <timer_stop>
  400989: bf 01 00 00 00               	movl	$1, %edi
;     rank( 1 );  
  40098e: e8 7d fb ff ff               	callq	-1155 <rank>
;     passed_verification = 0;
  400993: c7 05 ab c4 08 00 00 00 00 00	movl	$0, 574635(%rip)
  40099d: 31 ff                        	xorl	%edi, %edi
;     timer_start( 0 );
  40099f: e8 6c 02 00 00               	callq	620 <timer_start>
;     for( iteration=1; iteration<=MAX_ITERATIONS; iteration++ )
  4009a4: c7 45 f0 01 00 00 00         	movl	$1, -16(%rbp)
  4009ab: 83 7d f0 0a                  	cmpl	$10, -16(%rbp)
  4009af: 7f 20                        	jg	32 <main+0x191>
  4009b1: 90                           	nop
  4009b2: 90                           	nop
  4009b3: 90                           	nop
  4009b4: 90                           	nop
  4009b5: 90                           	nop
  4009b6: 90                           	nop
  4009b7: 90                           	nop
  4009b8: 90                           	nop
  4009b9: 90                           	nop
  4009ba: 90                           	nop
  4009bb: 90                           	nop
  4009bc: 90                           	nop
  4009bd: 90                           	nop
  4009be: 90                           	nop
  4009bf: 90                           	nop
;         rank( iteration );
  4009c0: 8b 7d f0                     	movl	-16(%rbp), %edi
  4009c3: e8 48 fb ff ff               	callq	-1208 <rank>
;     for( iteration=1; iteration<=MAX_ITERATIONS; iteration++ )
  4009c8: ff 45 f0                     	incl	-16(%rbp)
  4009cb: 83 7d f0 0a                  	cmpl	$10, -16(%rbp)
  4009cf: 7e ef                        	jle	-17 <main+0x180>
  4009d1: 31 db                        	xorl	%ebx, %ebx
;     timer_stop( 0 );
  4009d3: 89 df                        	movl	%ebx, %edi
  4009d5: e8 86 02 00 00               	callq	646 <timer_stop>
;     timecounter = timer_read( 0 );
  4009da: 89 df                        	movl	%ebx, %edi
  4009dc: e8 cf 02 00 00               	callq	719 <timer_read>
  4009e1: f2 0f 11 45 d8               	movsd	%xmm0, -40(%rbp)
;     if (timer_on) timer_start( 2 );
  4009e6: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  4009ea: 74 0a                        	je	10 <main+0x1b6>
  4009ec: bf 02 00 00 00               	movl	$2, %edi
  4009f1: e8 1a 02 00 00               	callq	538 <timer_start>
;     full_verify();
  4009f6: e8 45 fa ff ff               	callq	-1467 <full_verify>
;     if (timer_on) timer_stop( 2 );
  4009fb: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  4009ff: 74 0a                        	je	10 <main+0x1cb>
  400a01: bf 02 00 00 00               	movl	$2, %edi
  400a06: e8 55 02 00 00               	callq	597 <timer_stop>
;     if (timer_on) timer_stop( 3 );
  400a0b: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  400a0f: 74 0a                        	je	10 <main+0x1db>
  400a11: bf 03 00 00 00               	movl	$3, %edi
  400a16: e8 45 02 00 00               	callq	581 <timer_stop>
;     if( passed_verification != 5*MAX_ITERATIONS + 1 )
  400a1b: 83 3d 26 c4 08 00 33         	cmpl	$51, 574502(%rip)
  400a22: 74 0a                        	je	10 <main+0x1ee>
;         passed_verification = 0;
  400a24: c7 05 1a c4 08 00 00 00 00 00	movl	$0, 574490(%rip)
;                      timecounter,
  400a2e: f2 0f 10 45 d8               	movsd	-40(%rbp), %xmm0
  400a33: f2 0f 10 0d 5d 5c 00 00      	movsd	23645(%rip), %xmm1
;                                                   /timecounter/1000000.,
  400a3b: f2 0f 5e c8                  	divsd	%xmm0, %xmm1
  400a3f: f2 0f 5e 0d 59 5c 00 00      	divsd	23641(%rip), %xmm1
;                      passed_verification,
  400a47: 8b 05 fb c3 08 00            	movl	574459(%rip), %eax
;     c_print_results( "IS",
  400a4d: 48 89 e1                     	movq	%rsp, %rcx
  400a50: 48 8d 15 91 5d 00 00         	leaq	23953(%rip), %rdx
  400a57: 48 89 51 48                  	movq	%rdx, 72(%rcx)
  400a5b: 48 8d 15 69 5d 00 00         	leaq	23913(%rip), %rdx
  400a62: 48 89 51 40                  	movq	%rdx, 64(%rcx)
  400a66: 48 8d 15 52 5d 00 00         	leaq	23890(%rip), %rdx
  400a6d: 48 89 51 38                  	movq	%rdx, 56(%rcx)
  400a71: 48 8d 15 43 5d 00 00         	leaq	23875(%rip), %rdx
  400a78: 48 89 51 30                  	movq	%rdx, 48(%rcx)
  400a7c: 48 8d 15 32 5d 00 00         	leaq	23858(%rip), %rdx
  400a83: 48 89 51 28                  	movq	%rdx, 40(%rcx)
  400a87: 48 8d 15 23 5d 00 00         	leaq	23843(%rip), %rdx
  400a8e: 48 89 51 20                  	movq	%rdx, 32(%rcx)
  400a92: 48 8d 15 0c 5d 00 00         	leaq	23820(%rip), %rdx
  400a99: 48 89 51 18                  	movq	%rdx, 24(%rcx)
  400a9d: 48 8d 15 fb 5c 00 00         	leaq	23803(%rip), %rdx
  400aa4: 48 89 51 10                  	movq	%rdx, 16(%rcx)
  400aa8: 89 41 08                     	movl	%eax, 8(%rcx)
  400aab: 48 8d 05 e1 5c 00 00         	leaq	23777(%rip), %rax
  400ab2: 48 89 01                     	movq	%rax, (%rcx)
  400ab5: 48 8d 3d d4 5c 00 00         	leaq	23764(%rip), %rdi
  400abc: be 53 00 00 00               	movl	$83, %esi
  400ac1: ba 00 04 00 00               	movl	$1024, %edx
  400ac6: b9 40 00 00 00               	movl	$64, %ecx
  400acb: 45 31 c0                     	xorl	%r8d, %r8d
  400ace: 41 b9 0a 00 00 00            	movl	$10, %r9d
  400ad4: e8 f7 01 00 00               	callq	503 <c_print_results>
;     if (timer_on) {
  400ad9: 83 7d f4 00                  	cmpl	$0, -12(%rbp)
  400add: 0f 84 e7 00 00 00            	je	231 <main+0x38a>
  400ae3: bf 03 00 00 00               	movl	$3, %edi
;        t_total = timer_read( 3 );
  400ae8: e8 c3 01 00 00               	callq	451 <timer_read>
  400aed: f2 0f 11 45 e0               	movsd	%xmm0, -32(%rbp)
;        printf("\nAdditional timers -\n");
  400af2: 48 8d 3d 03 5d 00 00         	leaq	23811(%rip), %rdi
  400af9: 31 c0                        	xorl	%eax, %eax
  400afb: e8 04 0d 00 00               	callq	3332 <printf>
;        printf(" Total execution: %8.3f\n", t_total);
  400b00: f2 0f 10 45 e0               	movsd	-32(%rbp), %xmm0
  400b05: 48 8d 3d 06 5d 00 00         	leaq	23814(%rip), %rdi
  400b0c: b0 01                        	movb	$1, %al
  400b0e: e8 f1 0c 00 00               	callq	3313 <printf>
;        if (t_total == 0.0) t_total = 1.0;
  400b13: f2 0f 10 45 e0               	movsd	-32(%rbp), %xmm0
  400b18: 66 0f 57 c9                  	xorpd	%xmm1, %xmm1
  400b1c: 66 0f 2e c1                  	ucomisd	%xmm1, %xmm0
  400b20: 75 10                        	jne	16 <main+0x2f2>
  400b22: 7a 0e                        	jp	14 <main+0x2f2>
  400b24: 48 b8 00 00 00 00 00 00 f0 3f	movabsq	$4607182418800017408, %rax
  400b2e: 48 89 45 e0                  	movq	%rax, -32(%rbp)
  400b32: bf 01 00 00 00               	movl	$1, %edi
;        timecounter = timer_read(1);
  400b37: e8 74 01 00 00               	callq	372 <timer_read>
  400b3c: f2 0f 11 45 d8               	movsd	%xmm0, -40(%rbp)
;        t_percent = timecounter/t_total * 100.;
  400b41: 66 0f 28 c8                  	movapd	%xmm0, %xmm1
  400b45: f2 0f 5e 4d e0               	divsd	-32(%rbp), %xmm1
  400b4a: f2 0f 59 0d 56 5b 00 00      	mulsd	23382(%rip), %xmm1
  400b52: f2 0f 11 4d d0               	movsd	%xmm1, -48(%rbp)
;        printf(" Initialization : %8.3f (%5.2f%%)\n", timecounter, t_percent);
  400b57: 48 8d 3d cd 5c 00 00         	leaq	23757(%rip), %rdi
  400b5e: b3 02                        	movb	$2, %bl
  400b60: 89 d8                        	movl	%ebx, %eax
  400b62: e8 9d 0c 00 00               	callq	3229 <printf>
  400b67: 31 ff                        	xorl	%edi, %edi
;        timecounter = timer_read(0);
  400b69: e8 42 01 00 00               	callq	322 <timer_read>
  400b6e: f2 0f 11 45 d8               	movsd	%xmm0, -40(%rbp)
;        t_percent = timecounter/t_total * 100.;
  400b73: 66 0f 28 c8                  	movapd	%xmm0, %xmm1
  400b77: f2 0f 5e 4d e0               	divsd	-32(%rbp), %xmm1
  400b7c: f2 0f 59 0d 24 5b 00 00      	mulsd	23332(%rip), %xmm1
  400b84: f2 0f 11 4d d0               	movsd	%xmm1, -48(%rbp)
;        printf(" Benchmarking   : %8.3f (%5.2f%%)\n", timecounter, t_percent);
  400b89: 48 8d 3d be 5c 00 00         	leaq	23742(%rip), %rdi
  400b90: 89 d8                        	movl	%ebx, %eax
  400b92: e8 6d 0c 00 00               	callq	3181 <printf>
  400b97: bf 02 00 00 00               	movl	$2, %edi
;        timecounter = timer_read(2);
  400b9c: e8 0f 01 00 00               	callq	271 <timer_read>
  400ba1: f2 0f 11 45 d8               	movsd	%xmm0, -40(%rbp)
;        t_percent = timecounter/t_total * 100.;
  400ba6: 66 0f 28 c8                  	movapd	%xmm0, %xmm1
  400baa: f2 0f 5e 4d e0               	divsd	-32(%rbp), %xmm1
  400baf: f2 0f 59 0d f1 5a 00 00      	mulsd	23281(%rip), %xmm1
  400bb7: f2 0f 11 4d d0               	movsd	%xmm1, -48(%rbp)
;        printf(" Sorting        : %8.3f (%5.2f%%)\n", timecounter, t_percent);
  400bbc: 48 8d 3d ae 5c 00 00         	leaq	23726(%rip), %rdi
  400bc3: 89 d8                        	movl	%ebx, %eax
  400bc5: e8 3a 0c 00 00               	callq	3130 <printf>
  400bca: 31 c0                        	xorl	%eax, %eax
;     return 0;
  400bcc: 48 81 c4 98 00 00 00         	addq	$152, %rsp
  400bd3: 5b                           	popq	%rbx
  400bd4: 5d                           	popq	%rbp
  400bd5: c3                           	retq
  400bd6: 66 90                        	nop
  400bd8: 0f 1f 84 00 00 00 00 00      	nopl	(%rax,%rax)

0000000000400be0 timer_clear:
; {
  400be0: 55                           	pushq	%rbp
  400be1: 48 89 e5                     	movq	%rsp, %rbp
  400be4: 48 83 ec 04                  	subq	$4, %rsp
  400be8: 89 7d fc                     	movl	%edi, -4(%rbp)
;     elapsed[n] = 0.0;
  400beb: 48 63 c7                     	movslq	%edi, %rax
  400bee: 48 8d 0d 5b 81 00 00         	leaq	33115(%rip), %rcx
  400bf5: 48 c7 04 c1 00 00 00 00      	movq	$0, (%rcx,%rax,8)
; }
  400bfd: 48 83 c4 04                  	addq	$4, %rsp
  400c01: 5d                           	popq	%rbp
  400c02: c3                           	retq
  400c03: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00       	nopw	%cs:(%rax,%rax)

0000000000400c10 timer_start:
; {
  400c10: 55                           	pushq	%rbp
  400c11: 48 89 e5                     	movq	%rsp, %rbp
  400c14: 48 83 ec 10                  	subq	$16, %rsp
  400c18: 89 7d fc                     	movl	%edi, -4(%rbp)
;     start[n] = elapsed_time();
  400c1b: e8 20 00 00 00               	callq	32 <elapsed_time>
  400c20: 48 63 45 fc                  	movslq	-4(%rbp), %rax
  400c24: 48 8d 0d 25 83 00 00         	leaq	33573(%rip), %rcx
  400c2b: f2 0f 11 04 c1               	movsd	%xmm0, (%rcx,%rax,8)
; }
  400c30: 48 83 c4 10                  	addq	$16, %rsp
  400c34: 5d                           	popq	%rbp
  400c35: c3                           	retq
  400c36: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)

0000000000400c40 elapsed_time:
; {
  400c40: 55                           	pushq	%rbp
  400c41: 48 89 e5                     	movq	%rsp, %rbp
  400c44: 48 83 ec 10                  	subq	$16, %rsp
  400c48: 48 8d 7d f8                  	leaq	-8(%rbp), %rdi
;     wtime( &t );
  400c4c: e8 9f 02 00 00               	callq	671 <wtime_>
;     return( t );
  400c51: f2 0f 10 45 f8               	movsd	-8(%rbp), %xmm0
  400c56: 48 83 c4 10                  	addq	$16, %rsp
  400c5a: 5d                           	popq	%rbp
  400c5b: c3                           	retq
  400c5c: 0f 1f 40 00                  	nopl	(%rax)

0000000000400c60 timer_stop:
; {
  400c60: 55                           	pushq	%rbp
  400c61: 48 89 e5                     	movq	%rsp, %rbp
  400c64: 48 83 ec 20                  	subq	$32, %rsp
  400c68: 89 7d fc                     	movl	%edi, -4(%rbp)
;     now = elapsed_time();
  400c6b: e8 d0 ff ff ff               	callq	-48 <elapsed_time>
  400c70: f2 0f 11 45 f0               	movsd	%xmm0, -16(%rbp)
;     t = now - start[n];
  400c75: 48 8d 05 d4 82 00 00         	leaq	33492(%rip), %rax
  400c7c: 48 63 4d fc                  	movslq	-4(%rbp), %rcx
  400c80: f2 0f 5c 04 c8               	subsd	(%rax,%rcx,8), %xmm0
  400c85: f2 0f 11 45 e8               	movsd	%xmm0, -24(%rbp)
;     elapsed[n] += t;
  400c8a: 48 8d 05 bf 80 00 00         	leaq	32959(%rip), %rax
  400c91: f2 0f 58 04 c8               	addsd	(%rax,%rcx,8), %xmm0
  400c96: f2 0f 11 04 c8               	movsd	%xmm0, (%rax,%rcx,8)
; }
  400c9b: 48 83 c4 20                  	addq	$32, %rsp
  400c9f: 5d                           	popq	%rbp
  400ca0: c3                           	retq
  400ca1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)

0000000000400cb0 timer_read:
; {
  400cb0: 55                           	pushq	%rbp
  400cb1: 48 89 e5                     	movq	%rsp, %rbp
  400cb4: 48 83 ec 04                  	subq	$4, %rsp
  400cb8: 89 7d fc                     	movl	%edi, -4(%rbp)
;     return( elapsed[n] );
  400cbb: 48 63 c7                     	movslq	%edi, %rax
  400cbe: 48 8d 0d 8b 80 00 00         	leaq	32907(%rip), %rcx
  400cc5: f2 0f 10 04 c1               	movsd	(%rcx,%rax,8), %xmm0
  400cca: 48 83 c4 04                  	addq	$4, %rsp
  400cce: 5d                           	popq	%rbp
  400ccf: c3                           	retq

0000000000400cd0 c_print_results:
; {
  400cd0: 55                           	pushq	%rbp
  400cd1: 48 89 e5                     	movq	%rsp, %rbp
  400cd4: 41 56                        	pushq	%r14
  400cd6: 53                           	pushq	%rbx
  400cd7: 48 83 ec 40                  	subq	$64, %rsp
  400cdb: 48 89 f8                     	movq	%rdi, %rax
  400cde: 89 f3                        	movl	%esi, %ebx
  400ce0: 48 89 7d b8                  	movq	%rdi, -72(%rbp)
  400ce4: 40 88 75 ef                  	movb	%sil, -17(%rbp)
  400ce8: 89 55 e0                     	movl	%edx, -32(%rbp)
  400ceb: 89 4d e8                     	movl	%ecx, -24(%rbp)
  400cee: 44 89 45 e4                  	movl	%r8d, -28(%rbp)
  400cf2: 44 89 4d d4                  	movl	%r9d, -44(%rbp)
  400cf6: f2 0f 11 45 c0               	movsd	%xmm0, -64(%rbp)
  400cfb: f2 0f 11 4d c8               	movsd	%xmm1, -56(%rbp)
;     printf( "\n\n %s Benchmark Completed\n", name ); 
  400d00: 48 8d 3d 8d 5b 00 00         	leaq	23437(%rip), %rdi
  400d07: 31 c9                        	xorl	%ecx, %ecx
  400d09: 89 cb                        	movl	%ecx, %ebx
  400d0b: 48 89 c6                     	movq	%rax, %rsi
  400d0e: 89 d8                        	movl	%ebx, %eax
  400d10: e8 ef 0a 00 00               	callq	2799 <printf>
;     printf( " Class           =                        %c\n", class );
  400d15: 0f be 75 ef                  	movsbl	-17(%rbp), %esi
  400d19: 48 8d 3d 8f 5b 00 00         	leaq	23439(%rip), %rdi
  400d20: 89 d8                        	movl	%ebx, %eax
  400d22: e8 dd 0a 00 00               	callq	2781 <printf>
;     if( n3 == 0 ) {
  400d27: 83 7d e4 00                  	cmpl	$0, -28(%rbp)
  400d2b: 74 19                        	je	25 <c_print_results+0x76>
;         printf( " Size            =             %4dx%4dx%4d\n", n1,n2,n3 );
  400d2d: 8b 75 e0                     	movl	-32(%rbp), %esi
  400d30: 8b 55 e8                     	movl	-24(%rbp), %edx
  400d33: 8b 4d e4                     	movl	-28(%rbp), %ecx
  400d36: 48 8d 3d c6 5b 00 00         	leaq	23494(%rip), %rdi
  400d3d: 31 c0                        	xorl	%eax, %eax
  400d3f: e8 c0 0a 00 00               	callq	2752 <printf>
  400d44: eb 2d                        	jmp	45 <c_print_results+0xa3>
;         long nn = n1;
  400d46: 48 63 45 e0                  	movslq	-32(%rbp), %rax
  400d4a: 48 89 45 d8                  	movq	%rax, -40(%rbp)
;         if ( n2 != 0 ) nn *= n2;
  400d4e: 83 7d e8 00                  	cmpl	$0, -24(%rbp)
  400d52: 74 0d                        	je	13 <c_print_results+0x91>
  400d54: 48 63 45 e8                  	movslq	-24(%rbp), %rax
  400d58: 48 0f af 45 d8               	imulq	-40(%rbp), %rax
  400d5d: 48 89 45 d8                  	movq	%rax, -40(%rbp)
;         printf( " Size            =             %12ld\n", nn );   /* as in IS */
  400d61: 48 8b 75 d8                  	movq	-40(%rbp), %rsi
  400d65: 48 8d 3d 71 5b 00 00         	leaq	23409(%rip), %rdi
  400d6c: 31 c0                        	xorl	%eax, %eax
  400d6e: e8 91 0a 00 00               	callq	2705 <printf>
;     printf( " Iterations      =             %12d\n", niter );
  400d73: 8b 75 d4                     	movl	-44(%rbp), %esi
  400d76: 48 8d 3d b2 5b 00 00         	leaq	23474(%rip), %rdi
  400d7d: 31 c0                        	xorl	%eax, %eax
  400d7f: 89 c3                        	movl	%eax, %ebx
  400d81: e8 7e 0a 00 00               	callq	2686 <printf>
;     printf( " Time in seconds =             %12.2f\n", t );
  400d86: f2 0f 10 45 c0               	movsd	-64(%rbp), %xmm0
  400d8b: 48 8d 3d c2 5b 00 00         	leaq	23490(%rip), %rdi
  400d92: 41 b6 01                     	movb	$1, %r14b
  400d95: 44 89 f0                     	movl	%r14d, %eax
  400d98: e8 67 0a 00 00               	callq	2663 <printf>
;     printf( " Mop/s total     =             %12.2f\n", mops );
  400d9d: f2 0f 10 45 c8               	movsd	-56(%rbp), %xmm0
  400da2: 48 8d 3d d2 5b 00 00         	leaq	23506(%rip), %rdi
  400da9: 44 89 f0                     	movl	%r14d, %eax
  400dac: e8 53 0a 00 00               	callq	2643 <printf>
;     printf( " Operation type  = %24s\n", optype);
  400db1: 48 8b 75 10                  	movq	16(%rbp), %rsi
  400db5: 48 8d 3d e6 5b 00 00         	leaq	23526(%rip), %rdi
  400dbc: 89 d8                        	movl	%ebx, %eax
  400dbe: e8 41 0a 00 00               	callq	2625 <printf>
;     if( passed_verification < 0 )
  400dc3: 83 7d 18 00                  	cmpl	$0, 24(%rbp)
  400dc7: 78 0f                        	js	15 <c_print_results+0x108>
;     else if( passed_verification )
  400dc9: 83 7d 18 00                  	cmpl	$0, 24(%rbp)
  400dcd: 74 12                        	je	18 <c_print_results+0x111>
;         printf( " Verification    =               SUCCESSFUL\n" );
  400dcf: 48 8d 3d 12 5c 00 00         	leaq	23570(%rip), %rdi
  400dd6: eb 10                        	jmp	16 <c_print_results+0x118>
;         printf( " Verification    =            NOT PERFORMED\n" );
  400dd8: 48 8d 3d dc 5b 00 00         	leaq	23516(%rip), %rdi
  400ddf: eb 07                        	jmp	7 <c_print_results+0x118>
;         printf( " Verification    =             UNSUCCESSFUL\n" );
  400de1: 48 8d 3d 2d 5c 00 00         	leaq	23597(%rip), %rdi
  400de8: 31 c0                        	xorl	%eax, %eax
  400dea: e8 15 0a 00 00               	callq	2581 <printf>
;     printf( " Version         =             %12s\n", npbversion );
  400def: 48 8b 75 20                  	movq	32(%rbp), %rsi
  400df3: 48 8d 3d 48 5c 00 00         	leaq	23624(%rip), %rdi
  400dfa: 31 c0                        	xorl	%eax, %eax
  400dfc: 89 c3                        	movl	%eax, %ebx
  400dfe: e8 01 0a 00 00               	callq	2561 <printf>
;     printf( " Compile date    =             %12s\n", compiletime );
  400e03: 48 8b 75 28                  	movq	40(%rbp), %rsi
  400e07: 48 8d 3d 59 5c 00 00         	leaq	23641(%rip), %rdi
  400e0e: 89 d8                        	movl	%ebx, %eax
  400e10: e8 ef 09 00 00               	callq	2543 <printf>
;     printf( "\n Compile options:\n" );
  400e15: 48 8d 3d 70 5c 00 00         	leaq	23664(%rip), %rdi
  400e1c: 89 d8                        	movl	%ebx, %eax
  400e1e: e8 e1 09 00 00               	callq	2529 <printf>
;     printf( "    CC           = %s\n", cc );
  400e23: 48 8b 75 30                  	movq	48(%rbp), %rsi
  400e27: 48 8d 3d 72 5c 00 00         	leaq	23666(%rip), %rdi
  400e2e: 89 d8                        	movl	%ebx, %eax
  400e30: e8 cf 09 00 00               	callq	2511 <printf>
;     printf( "    CLINK        = %s\n", clink );
  400e35: 48 8b 75 38                  	movq	56(%rbp), %rsi
  400e39: 48 8d 3d 77 5c 00 00         	leaq	23671(%rip), %rdi
  400e40: 89 d8                        	movl	%ebx, %eax
  400e42: e8 bd 09 00 00               	callq	2493 <printf>
;     printf( "    C_LIB        = %s\n", c_lib );
  400e47: 48 8b 75 40                  	movq	64(%rbp), %rsi
  400e4b: 48 8d 3d 7c 5c 00 00         	leaq	23676(%rip), %rdi
  400e52: 89 d8                        	movl	%ebx, %eax
  400e54: e8 ab 09 00 00               	callq	2475 <printf>
;     printf( "    C_INC        = %s\n", c_inc );
  400e59: 48 8b 75 48                  	movq	72(%rbp), %rsi
  400e5d: 48 8d 3d 81 5c 00 00         	leaq	23681(%rip), %rdi
  400e64: 89 d8                        	movl	%ebx, %eax
  400e66: e8 99 09 00 00               	callq	2457 <printf>
;     printf( "    CFLAGS       = %s\n", cflags );
  400e6b: 48 8b 75 50                  	movq	80(%rbp), %rsi
  400e6f: 48 8d 3d 86 5c 00 00         	leaq	23686(%rip), %rdi
  400e76: 89 d8                        	movl	%ebx, %eax
  400e78: e8 87 09 00 00               	callq	2439 <printf>
;     printf( "    CLINKFLAGS   = %s\n", clinkflags );
  400e7d: 48 8b 75 58                  	movq	88(%rbp), %rsi
  400e81: 48 8d 3d 8b 5c 00 00         	leaq	23691(%rip), %rdi
  400e88: 89 d8                        	movl	%ebx, %eax
  400e8a: e8 75 09 00 00               	callq	2421 <printf>
;     printf( "\n--------------------------------------\n");
  400e8f: 48 8d 3d 94 5c 00 00         	leaq	23700(%rip), %rdi
  400e96: 89 d8                        	movl	%ebx, %eax
  400e98: e8 67 09 00 00               	callq	2407 <printf>
;     printf( " Please send all errors/feedbacks to:\n");
  400e9d: 48 8d 3d af 5c 00 00         	leaq	23727(%rip), %rdi
  400ea4: 89 d8                        	movl	%ebx, %eax
  400ea6: e8 59 09 00 00               	callq	2393 <printf>
;     printf( " Center for Manycore Programming\n");
  400eab: 48 8d 3d c8 5c 00 00         	leaq	23752(%rip), %rdi
  400eb2: 89 d8                        	movl	%ebx, %eax
  400eb4: e8 4b 09 00 00               	callq	2379 <printf>
;     printf( " cmp@aces.snu.ac.kr\n");
  400eb9: 48 8d 3d dc 5c 00 00         	leaq	23772(%rip), %rdi
  400ec0: 89 d8                        	movl	%ebx, %eax
  400ec2: e8 3d 09 00 00               	callq	2365 <printf>
;     printf( " http://aces.snu.ac.kr\n");
  400ec7: 48 8d 3d e3 5c 00 00         	leaq	23779(%rip), %rdi
  400ece: 89 d8                        	movl	%ebx, %eax
  400ed0: e8 2f 09 00 00               	callq	2351 <printf>
;     printf( "--------------------------------------\n");
  400ed5: 48 8d 3d ed 5c 00 00         	leaq	23789(%rip), %rdi
  400edc: 89 d8                        	movl	%ebx, %eax
  400ede: e8 21 09 00 00               	callq	2337 <printf>
; }
  400ee3: 48 83 c4 40                  	addq	$64, %rsp
  400ee7: 5b                           	popq	%rbx
  400ee8: 41 5e                        	popq	%r14
  400eea: 5d                           	popq	%rbp
  400eeb: c3                           	retq
  400eec: 0f 1f 40 00                  	nopl	(%rax)

0000000000400ef0 wtime_:
; {
  400ef0: 55                           	pushq	%rbp
  400ef1: 48 89 e5                     	movq	%rsp, %rbp
  400ef4: 48 83 ec 20                  	subq	$32, %rsp
  400ef8: 48 89 7d e8                  	movq	%rdi, -24(%rbp)
  400efc: 31 c0                        	xorl	%eax, %eax
  400efe: 89 c6                        	movl	%eax, %esi
  400f00: 48 8d 7d f0                  	leaq	-16(%rbp), %rdi
;   gettimeofday(&tv, (void *)0);
  400f04: e8 cf 2c 00 00               	callq	11471 <gettimeofday>
;   if (sec < 0) sec = tv.tv_sec;
  400f09: 83 3d 04 7d 00 00 00         	cmpl	$0, 32004(%rip)
  400f10: 79 09                        	jns	9 <wtime_+0x2b>
  400f12: 8b 45 f0                     	movl	-16(%rbp), %eax
  400f15: 89 05 f9 7c 00 00            	movl	%eax, 31993(%rip)
;   *t = (tv.tv_sec - sec) + 1.0e-6*tv.tv_usec;
  400f1b: 48 8b 45 f0                  	movq	-16(%rbp), %rax
  400f1f: 48 63 0d ee 7c 00 00         	movslq	31982(%rip), %rcx
  400f26: 48 29 c8                     	subq	%rcx, %rax
  400f29: f2 48 0f 2a c0               	cvtsi2sd	%rax, %xmm0
  400f2e: f2 48 0f 2a 4d f8            	cvtsi2sdq	-8(%rbp), %xmm1
  400f34: f2 0f 59 0d 74 57 00 00      	mulsd	22388(%rip), %xmm1
  400f3c: f2 0f 58 c8                  	addsd	%xmm0, %xmm1
  400f40: 48 8b 45 e8                  	movq	-24(%rbp), %rax
  400f44: f2 0f 11 08                  	movsd	%xmm1, (%rax)
; }
  400f48: 48 83 c4 20                  	addq	$32, %rsp
  400f4c: 5d                           	popq	%rbp
  400f4d: c3                           	retq
  400f4e: 66 90                        	nop

0000000000400f50 _start:
  400f50: 48 31 ed                     	xorq	%rbp, %rbp
  400f53: 48 89 e7                     	movq	%rsp, %rdi
  400f56: 48 8d 35 a3 f0 bf ff         	leaq	-4198237(%rip), %rsi
  400f5d: 48 83 e4 f0                  	andq	$-16, %rsp
  400f61: e8 00 00 00 00               	callq	0 <_start_c>

0000000000400f66 _start_c:
; {
  400f66: 55                           	pushq	%rbp
  400f67: 41 57                        	pushq	%r15
  400f69: 41 56                        	pushq	%r14
  400f6b: 41 55                        	pushq	%r13
  400f6d: 41 54                        	pushq	%r12
  400f6f: 53                           	pushq	%rbx
  400f70: 48 83 ec 58                  	subq	$88, %rsp
  400f74: 49 bf 00 f0 ff ff ff 7f 00 00	movabsq	$140737488351232, %r15
; 	register int argc = p[0];
  400f7e: 4c 8b 17                     	movq	(%rdi), %r10
  400f81: b9 08 00 00 00               	movl	$8, %ecx
; 	register char **argv = (void *)(p+1);
  400f86: 4c 8d 24 0f                  	leaq	(%rdi,%rcx), %r12
; 	stack_ptr = arch_stack_get();
  400f8a: 49 89 e0                     	movq	%rsp, %r8
; 	if ( STACK_START_ADDR > (unsigned long) stack_ptr)
  400f8d: 49 8d 87 00 00 00 ff         	leaq	-16777216(%r15), %rax
  400f94: 49 39 c0                     	cmpq	%rax, %r8
  400f97: 0f 82 83 03 00 00            	jb	899 <my_memcpy_nostack_error+0x5f>
  400f9d: 44 89 d0                     	movl	%r10d, %eax
  400fa0: 48 63 d0                     	movslq	%eax, %rdx
  400fa3: 4c 8d 1c d7                  	leaq	(%rdi,%rdx,8), %r11
  400fa7: 49 83 c3 08                  	addq	$8, %r11
  400fab: 49 01 cb                     	addq	%rcx, %r11
; 	for (i=0; i<argc; i++) {
  400fae: 45 85 d2                     	testl	%r10d, %r10d
  400fb1: 7e 17                        	jle	23 <_start_c+0x64>
  400fb3: 31 c9                        	xorl	%ecx, %ecx
; 		if (max < (long)argv[i])
  400fb5: 49 8b 14 cc                  	movq	(%r12,%rcx,8), %rdx
  400fb9: 49 39 d6                     	cmpq	%rdx, %r14
  400fbc: 4c 0f 4c f2                  	cmovlq	%rdx, %r14
; 	for (i=0; i<argc; i++) {
  400fc0: 48 ff c1                     	incq	%rcx
  400fc3: 48 39 c8                     	cmpq	%rcx, %rax
  400fc6: 75 ed                        	jne	-19 <_start_c+0x4f>
  400fc8: eb 00                        	jmp	0 <_start_c+0x64>
; 	for (i=0; envp[i]; i++) {
  400fca: 49 8b 1b                     	movq	(%r11), %rbx
; 	for (i=0; (auxv[i].a_type != AT_NULL); i++) {
  400fcd: 49 63 f2                     	movslq	%r10d, %rsi
; 	for (i=0; envp[i]; i++) {
  400fd0: 48 85 db                     	testq	%rbx, %rbx
  400fd3: 74 29                        	je	41 <_start_c+0x98>
  400fd5: 48 8d 2c f7                  	leaq	(%rdi,%rsi,8), %rbp
  400fd9: 48 83 c5 18                  	addq	$24, %rbp
  400fdd: ba 01 00 00 00               	movl	$1, %edx
  400fe2: 48 89 d9                     	movq	%rbx, %rcx
; 		if (max < (long)envp[i])
  400fe5: 49 39 ce                     	cmpq	%rcx, %r14
  400fe8: 4c 0f 4c f1                  	cmovlq	%rcx, %r14
; 	for (i=0; envp[i]; i++) {
  400fec: 48 8b 4c d5 f8               	movq	-8(%rbp,%rdx,8), %rcx
  400ff1: 48 ff c2                     	incq	%rdx
  400ff4: 48 85 c9                     	testq	%rcx, %rcx
  400ff7: 75 ec                        	jne	-20 <_start_c+0x7f>
; 	auxv = (Auxv *)(&envp[i+1]);
  400ff9: 41 89 d5                     	movl	%edx, %r13d
  400ffc: eb 06                        	jmp	6 <_start_c+0x9e>
  400ffe: 41 bd 01 00 00 00            	movl	$1, %r13d
; 	for (i=0; (auxv[i].a_type != AT_NULL); i++) {
  401004: 4b 8b 2c eb                  	movq	(%r11,%r13,8), %rbp
  401008: 48 85 ed                     	testq	%rbp, %rbp
  40100b: 74 35                        	je	53 <_start_c+0xdc>
  40100d: 4c 01 ee                     	addq	%r13, %rsi
  401010: 48 8d 34 f7                  	leaq	(%rdi,%rsi,8), %rsi
  401014: 48 83 c6 20                  	addq	$32, %rsi
  401018: 49 8d 57 ff                  	leaq	-1(%r15), %rdx
; 		if (max < (long)auxv[i].a_un.a_val)
  40101c: 48 8b 4e f8                  	movq	-8(%rsi), %rcx
; 		if ( (auxv[i].a_type == AT_ENTRY) &&
  401020: 48 83 fd 09                  	cmpq	$9, %rbp
  401024: 75 09                        	jne	9 <_start_c+0xc9>
  401026: 48 39 d1                     	cmpq	%rdx, %rcx
  401029: 0f 87 f1 02 00 00            	ja	753 <my_memcpy_nostack_error+0x5f>
; 		if (max < (long)auxv[i].a_un.a_val)
  40102f: 49 39 ce                     	cmpq	%rcx, %r14
  401032: 4c 0f 4c f1                  	cmovlq	%rcx, %r14
; 	for (i=0; (auxv[i].a_type != AT_NULL); i++) {
  401036: 48 8b 2e                     	movq	(%rsi), %rbp
  401039: 48 83 c6 10                  	addq	$16, %rsi
  40103d: 48 85 ed                     	testq	%rbp, %rbp
  401040: 75 da                        	jne	-38 <_start_c+0xb6>
; 	max = (max & ~(STACK_PAGE_SIZE -1)) + STACK_PAGE_SIZE; 
  401042: 49 81 c6 00 10 00 00         	addq	$4096, %r14
  401049: 49 81 e6 00 f0 ff ff         	andq	$-4096, %r14
; 		(STACK_MAPPED_PAGES + (max_size(stack_ptr)/STACK_PAGE_SIZE) +1);
  401050: 4d 89 f1                     	movq	%r14, %r9
  401053: 4d 29 c1                     	subq	%r8, %r9
; 	if (STACK_END_ADDR == max)
  401056: 4d 39 fe                     	cmpq	%r15, %r14
  401059: 0f 84 0d 02 00 00            	je	525 <_start_c+0x306>
; 	for (i=0; i<argc; i++) {
  40105f: 45 85 d2                     	testl	%r10d, %r10d
; 	for (i=0; i<argc; i++)
  401062: 7e 17                        	jle	23 <_start_c+0x115>
  401064: 4c 89 f9                     	movq	%r15, %rcx
  401067: 4c 29 f1                     	subq	%r14, %rcx
  40106a: 31 f6                        	xorl	%esi, %esi
; 		argv[i] = (void*) (STACK_END_ADDR - vdso_size - (max - (unsigned long) argv[i])); 
  40106c: 49 01 0c f4                  	addq	%rcx, (%r12,%rsi,8)
; 	for (i=0; i<argc; i++)
  401070: 48 ff c6                     	incq	%rsi
  401073: 48 39 f0                     	cmpq	%rsi, %rax
  401076: 75 f4                        	jne	-12 <_start_c+0x106>
; 	for (i=0; envp[i]; i++)
  401078: 49 8b 1b                     	movq	(%r11), %rbx
  40107b: 4c 89 fe                     	movq	%r15, %rsi
  40107e: 4c 29 f6                     	subq	%r14, %rsi
  401081: 48 85 db                     	testq	%rbx, %rbx
  401084: 74 1e                        	je	30 <_start_c+0x13e>
  401086: 48 63 c8                     	movslq	%eax, %rcx
  401089: 48 8d 0c cf                  	leaq	(%rdi,%rcx,8), %rcx
  40108d: 48 83 c1 18                  	addq	$24, %rcx
; 		envp[i] = (void*) (STACK_END_ADDR - vdso_size - (max - (unsigned long) envp[i]));
  401091: 48 01 f3                     	addq	%rsi, %rbx
  401094: 48 89 59 f8                  	movq	%rbx, -8(%rcx)
; 	for (i=0; envp[i]; i++)
  401098: 48 8b 19                     	movq	(%rcx), %rbx
  40109b: 48 83 c1 08                  	addq	$8, %rcx
  40109f: 48 85 db                     	testq	%rbx, %rbx
  4010a2: 75 ed                        	jne	-19 <_start_c+0x12b>
  4010a4: 4b 8d 0c eb                  	leaq	(%r11,%r13,8), %rcx
  4010a8: 48 89 4c 24 10               	movq	%rcx, 16(%rsp)
; 	for (i=0; (auxv[i].a_type != AT_NULL); i++)
  4010ad: 48 98                        	cltq
  4010af: 4c 01 e8                     	addq	%r13, %rax
  4010b2: 48 8d 04 c7                  	leaq	(%rdi,%rax,8), %rax
  4010b6: 48 83 c0 18                  	addq	$24, %rax
  4010ba: 31 db                        	xorl	%ebx, %ebx
  4010bc: b9 00 80 00 83               	movl	$2197848064, %ecx
  4010c1: 48 8b 54 18 f8               	movq	-8(%rax,%rbx), %rdx
  4010c6: 48 83 fa 1f                  	cmpq	$31, %rdx
  4010ca: 77 06                        	ja	6 <_start_c+0x16c>
  4010cc: 48 0f a3 d1                  	btq	%rdx, %rcx
  4010d0: 72 0d                        	jb	13 <_start_c+0x179>
  4010d2: 48 83 fa 09                  	cmpq	$9, %rdx
  4010d6: 77 17                        	ja	23 <_start_c+0x189>
  4010d8: ff 24 d5 f8 6b 40 00         	jmpq	*4221944(,%rdx,8)
; 			if (auxv[i].a_un.a_val > STACK_END_ADDR)
  4010df: 48 8b 14 18                  	movq	(%rax,%rbx), %rdx
  4010e3: 4c 39 fa                     	cmpq	%r15, %rdx
  4010e6: 76 07                        	jbe	7 <_start_c+0x189>
; 				auxv[i].a_un.a_val = STACK_END_ADDR - vdso_size - (max - auxv[i].a_un.a_val);
  4010e8: 48 01 f2                     	addq	%rsi, %rdx
  4010eb: 48 89 14 18                  	movq	%rdx, (%rax,%rbx)
; 	for (i=0; (auxv[i].a_type != AT_NULL); i++)
  4010ef: 48 83 c3 10                  	addq	$16, %rbx
  4010f3: eb cc                        	jmp	-52 <_start_c+0x15b>
  4010f5: 48 89 7c 24 08               	movq	%rdi, 8(%rsp)
  4010fa: 4c 89 5c 24 18               	movq	%r11, 24(%rsp)
  4010ff: 4c 89 44 24 20               	movq	%r8, 32(%rsp)
  401104: 4c 89 54 24 28               	movq	%r10, 40(%rsp)
; 	stack_addr = __syscall(SYS_mremap, (max - total_size), total_size, total_size, (MREMAP_FIXED | MREMAP_MAYMOVE), STACK_END_ADDR - vdso_size - total_size); // total_size must be page-aligned
  401109: 4c 89 c8                     	movq	%r9, %rax
  40110c: 48 c1 e0 20                  	shlq	$32, %rax
  401110: 48 ba 00 00 00 00 00 10 02 00	movabsq	$580542139465728, %rdx
  40111a: 48 01 c2                     	addq	%rax, %rdx
  40111d: 48 c1 fa 20                  	sarq	$32, %rdx
  401121: 48 81 e2 00 f0 ff ff         	andq	$-4096, %rdx
  401128: 4c 89 f7                     	movq	%r14, %rdi
  40112b: 48 29 d7                     	subq	%rdx, %rdi
  40112e: 4d 89 fd                     	movq	%r15, %r13
  401131: 4d 89 f8                     	movq	%r15, %r8
  401134: 49 29 d0                     	subq	%rdx, %r8
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  401137: b8 19 00 00 00               	movl	$25, %eax
  40113c: 41 ba 03 00 00 00            	movl	$3, %r10d
  401142: 48 89 d6                     	movq	%rdx, %rsi
  401145: 0f 05                        	syscall
; 	if ( ((unsigned long) stack_addr) > -4096UL) {
  401147: 48 3d 01 f0 ff ff            	cmpq	$-4095, %rax
  40114d: 72 39                        	jb	57 <_start_c+0x222>
  40114f: bd 00 10 00 00               	movl	$4096, %ebp
; 		if (total_size > max_size(stack_ptr)) {
  401154: 49 01 e8                     	addq	%rbp, %r8
  401157: 48 01 ef                     	addq	%rbp, %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40115a: 41 ba 03 00 00 00            	movl	$3, %r10d
; 		if (total_size > max_size(stack_ptr)) {
  401160: 49 39 d1                     	cmpq	%rdx, %r9
  401163: 0f 83 b3 01 00 00            	jae	435 <my_memcpy_nostack_error+0x5b>
  401169: 48 81 c2 00 f0 ff ff         	addq	$-4096, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  401170: b8 19 00 00 00               	movl	$25, %eax
  401175: 48 89 d6                     	movq	%rdx, %rsi
  401178: 0f 05                        	syscall
; 	if ( ((unsigned long) stack_addr) > -4096UL) {
  40117a: 49 01 e8                     	addq	%rbp, %r8
  40117d: 48 01 ef                     	addq	%rbp, %rdi
  401180: 48 3d 01 f0 ff ff            	cmpq	$-4095, %rax
  401186: 73 d8                        	jae	-40 <_start_c+0x1fa>
  401188: 4d 29 f4                     	subq	%r14, %r12
  40118b: 4d 89 ef                     	movq	%r13, %r15
  40118e: 4d 01 ec                     	addq	%r13, %r12
  401191: 48 8b 6c 24 18               	movq	24(%rsp), %rbp
  401196: 4c 01 ed                     	addq	%r13, %rbp
  401199: 4c 29 f5                     	subq	%r14, %rbp
  40119c: 4c 8b 6c 24 10               	movq	16(%rsp), %r13
  4011a1: 4d 01 fd                     	addq	%r15, %r13
  4011a4: 4d 29 f5                     	subq	%r14, %r13
; 	__syscall(SYS_prctl, PR_SET_MM, PR_SET_MM_START_STACK, (STACK_END_ADDR -vdso_size - max_size(stack_ptr)), 0, 0); 
  4011a7: 4c 89 fa                     	movq	%r15, %rdx
  4011aa: 4c 29 ca                     	subq	%r9, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4011ad: b8 9d 00 00 00               	movl	$157, %eax
  4011b2: bf 23 00 00 00               	movl	$35, %edi
  4011b7: be 05 00 00 00               	movl	$5, %esi
  4011bc: 45 31 d2                     	xorl	%r10d, %r10d
  4011bf: 45 31 c0                     	xorl	%r8d, %r8d
  4011c2: 0f 05                        	syscall
; 	__syscall(SYS_prctl, PR_SET_MM, PR_SET_MM_ARG_START, argv[0], 0, 0);
  4011c4: 49 8b 14 24                  	movq	(%r12), %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4011c8: b8 9d 00 00 00               	movl	$157, %eax
  4011cd: bf 23 00 00 00               	movl	$35, %edi
  4011d2: be 08 00 00 00               	movl	$8, %esi
  4011d7: 45 31 d2                     	xorl	%r10d, %r10d
  4011da: 45 31 c0                     	xorl	%r8d, %r8d
  4011dd: 0f 05                        	syscall
; 	__syscall(SYS_prctl, PR_SET_MM, PR_SET_MM_ARG_END,   envp[0], 0, 0);
  4011df: 48 8b 55 00                  	movq	(%rbp), %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4011e3: b8 9d 00 00 00               	movl	$157, %eax
  4011e8: bf 23 00 00 00               	movl	$35, %edi
  4011ed: be 09 00 00 00               	movl	$9, %esi
  4011f2: 45 31 d2                     	xorl	%r10d, %r10d
  4011f5: 45 31 c0                     	xorl	%r8d, %r8d
  4011f8: 0f 05                        	syscall
; 	__syscall(SYS_prctl, PR_SET_MM, PR_SET_MM_ENV_START, envp[0], 0, 0);	
  4011fa: 48 8b 55 00                  	movq	(%rbp), %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4011fe: b8 9d 00 00 00               	movl	$157, %eax
  401203: bf 23 00 00 00               	movl	$35, %edi
  401208: be 0a 00 00 00               	movl	$10, %esi
  40120d: 45 31 d2                     	xorl	%r10d, %r10d
  401210: 45 31 c0                     	xorl	%r8d, %r8d
  401213: 0f 05                        	syscall
  401215: 48 ba 00 f0 ff ff ff 7f 00 00	movabsq	$140737488351232, %rdx
  40121f: b8 9d 00 00 00               	movl	$157, %eax
  401224: bf 23 00 00 00               	movl	$35, %edi
  401229: be 0b 00 00 00               	movl	$11, %esi
  40122e: 45 31 d2                     	xorl	%r10d, %r10d
  401231: 45 31 c0                     	xorl	%r8d, %r8d
  401234: 0f 05                        	syscall
  401236: 48 b8 f0 ff ff ff 0f 00 00 00	movabsq	$68719476720, %rax
; 	__syscall(SYS_prctl, PR_SET_MM, PR_SET_MM_AUXV,      &auxv[0], i*sizeof(Auxv), 0);
  401240: 48 21 c3                     	andq	%rax, %rbx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  401243: b8 9d 00 00 00               	movl	$157, %eax
  401248: bf 23 00 00 00               	movl	$35, %edi
  40124d: be 0c 00 00 00               	movl	$12, %esi
  401252: 4c 89 ea                     	movq	%r13, %rdx
  401255: 49 89 da                     	movq	%rbx, %r10
  401258: 45 31 c0                     	xorl	%r8d, %r8d
  40125b: 0f 05                        	syscall
  40125d: 4c 8b 54 24 28               	movq	40(%rsp), %r10
  401262: 4c 8b 44 24 20               	movq	32(%rsp), %r8
  401267: 48 8b 7c 24 08               	movq	8(%rsp), %rdi
  40126c: 4c 29 c7                     	subq	%r8, %rdi
; 	if (frame_size != -1) { // Needed for both
  40126f: 48 83 ff ff                  	cmpq	$-1, %rdi
  401273: 0f 84 c5 00 00 00            	je	197 <my_memcpy_nostack_error+0x7d>
; 		copied = my_memcpy_nostack((STACK_END_ADDR - 
  401279: 4c 89 f8                     	movq	%r15, %rax
  40127c: 4c 29 c8                     	subq	%r9, %rax
  40127f: 48 b9 00 b0 ff ff ff 7f 00 00	movabsq	$140737488334848, %rcx

0000000000401289 my_memcpy_nostack:
  401289: 48 39 c1                     	cmpq	%rax, %rcx
  40128c: 0f 8f 2f 00 00 00            	jg	47 <my_memcpy_nostack_error>
  401292: 41 50                        	pushq	%r8
  401294: 41 51                        	pushq	%r9
  401296: 49 c7 c0 00 00 00 00         	movq	$0, %r8
  40129d: 4c 39 c7                     	cmpq	%r8, %rdi
  4012a0: 0f 8e 14 00 00 00            	jle	20 <my_memcpy_nostack_exit>

00000000004012a6 my_memcpy_nostack_copy:
  4012a6: 46 8a 0c 00                  	movb	(%rax,%r8), %r9b
  4012aa: 46 88 0c 01                  	movb	%r9b, (%rcx,%r8)
  4012ae: 49 ff c0                     	incq	%r8
  4012b1: 4c 39 c7                     	cmpq	%r8, %rdi
  4012b4: 0f 8f ec ff ff ff            	jg	-20 <my_memcpy_nostack_copy>

00000000004012ba my_memcpy_nostack_exit:
  4012ba: 4c 89 c0                     	movq	%r8, %rax
  4012bd: 41 59                        	popq	%r9
  4012bf: 41 58                        	popq	%r8

00000000004012c1 my_memcpy_nostack_error:
; 		if (copied != frame_size) {
  4012c1: 48 63 c8                     	movslq	%eax, %rcx
  4012c4: b0 35                        	movb	$53, %al
  4012c6: 48 39 f9                     	cmpq	%rdi, %rcx
  4012c9: 74 73                        	je	115 <my_memcpy_nostack_error+0x7d>
; 	char serror [] = "crt1.c: _start_c ERROR 0\n";
  4012cb: 0f 10 05 88 59 00 00         	movups	22920(%rip), %xmm0
  4012d2: 48 8d 5c 24 30               	leaq	48(%rsp), %rbx
  4012d7: 0f 11 43 0a                  	movups	%xmm0, 10(%rbx)
  4012db: 0f 28 05 6e 59 00 00         	movaps	22894(%rip), %xmm0
  4012e2: 0f 29 03                     	movaps	%xmm0, (%rbx)
; 	serror[23] += i;
  4012e5: 88 43 17                     	movb	%al, 23(%rbx)
; 	__syscall(SYS_write, 2, serror, strlen(serror));
  4012e8: 48 89 df                     	movq	%rbx, %rdi
  4012eb: e8 90 26 00 00               	callq	9872 <strlen>
  4012f0: 48 89 c2                     	movq	%rax, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4012f3: b8 01 00 00 00               	movl	$1, %eax
  4012f8: bf 02 00 00 00               	movl	$2, %edi
  4012fd: 48 89 de                     	movq	%rbx, %rsi
  401300: 0f 05                        	syscall
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  401302: b8 e7 00 00 00               	movl	$231, %eax
  401307: bf 01 00 00 00               	movl	$1, %edi
  40130c: 0f 05                        	syscall
  40130e: bf 01 00 00 00               	movl	$1, %edi
  401313: b8 3c 00 00 00               	movl	$60, %eax
  401318: 0f 05                        	syscall
;     for (;;) __syscall(SYS_exit, 1); //ec);
  40131a: eb f7                        	jmp	-9 <my_memcpy_nostack_error+0x52>
  40131c: b0 34                        	movb	$52, %al
  40131e: eb ab                        	jmp	-85 <my_memcpy_nostack_error+0xa>
  401320: 4c 89 d6                     	movq	%r10, %rsi
; 	__libc_start_main(main, argc, argv, _init, _fini, 0);
  401323: bf 40 08 40 00               	movl	$4196416, %edi
  401328: b9 50 13 40 00               	movl	$4199248, %ecx
  40132d: 41 b8 5c 15 40 00            	movl	$4199772, %r8d
  401333: 4c 89 e2                     	movq	%r12, %rdx
  401336: 45 31 c9                     	xorl	%r9d, %r9d
  401339: e8 b8 01 00 00               	callq	440 <__libc_start_main>
  40133e: 4c 89 d6                     	movq	%r10, %rsi
  401341: b8 00 40 00 00               	movl	$16384, %eax
; 	arch_stack_switch(STACK_END_ADDR, (long)((STACK_RELOC_PAGE_ALIGN*STACK_PAGE_SIZE) +STACK_RELOC_OFFSET));
  401346: 49 29 c7                     	subq	%rax, %r15
  401349: 4c 89 fc                     	movq	%r15, %rsp
  40134c: eb d5                        	jmp	-43 <my_memcpy_nostack_error+0x62>
  40134e: 66 90                        	nop

0000000000401350 dummy:
; static void dummy(void) {}
  401350: c3                           	retq

0000000000401351 dummy1:
; static void dummy1(void *p) {}
  401351: c3                           	retq

0000000000401352 __init_libc:
; {
  401352: 41 56                        	pushq	%r14
  401354: 53                           	pushq	%rbx
  401355: 48 81 ec 58 01 00 00         	subq	$344, %rsp
  40135c: 49 89 f6                     	movq	%rsi, %r14
  40135f: 48 89 fb                     	movq	%rdi, %rbx
  401362: 48 8d 7c 24 20               	leaq	32(%rsp), %rdi
; 	size_t i, *auxv, aux[AUX_CNT] = { 0 };
  401367: ba 30 01 00 00               	movl	$304, %edx
  40136c: 31 f6                        	xorl	%esi, %esi
  40136e: e8 c9 26 00 00               	callq	9929 <memset>
; 	__environ = envp;
  401373: 48 89 1d 0e 82 00 00         	movq	%rbx, 33294(%rip)
; 	for (i=0; envp[i]; i++);
  40137a: 48 83 3b 00                  	cmpq	$0, (%rbx)
  40137e: 48 8d 5b 08                  	leaq	8(%rbx), %rbx
  401382: 75 f6                        	jne	-10 <__init_libc+0x28>
; 	libc.auxv = auxv = (void *)(envp+i+1);
  401384: 48 89 1d e5 b9 08 00         	movq	%rbx, 571877(%rip)
; 	for (i=0; auxv[i]; i+=2) if (auxv[i]<AUX_CNT) aux[auxv[i]] = auxv[i+1];
  40138b: 48 8b 03                     	movq	(%rbx), %rax
  40138e: 48 85 c0                     	testq	%rax, %rax
  401391: 74 44                        	je	68 <__init_libc+0x85>
  401393: 48 83 c3 10                  	addq	$16, %rbx
  401397: 48 83 f8 25                  	cmpq	$37, %rax
  40139b: 77 09                        	ja	9 <__init_libc+0x54>
  40139d: 48 8b 4b f8                  	movq	-8(%rbx), %rcx
  4013a1: 48 89 4c c4 20               	movq	%rcx, 32(%rsp,%rax,8)
  4013a6: 48 8b 03                     	movq	(%rbx), %rax
  4013a9: 48 83 c3 10                  	addq	$16, %rbx
  4013ad: 48 85 c0                     	testq	%rax, %rax
  4013b0: 75 e5                        	jne	-27 <__init_libc+0x45>
; 	__hwcap = aux[AT_HWCAP];
  4013b2: 48 8b 8c 24 a0 00 00 00      	movq	160(%rsp), %rcx
; 	if (aux[AT_SYSINFO]) __sysinfo = aux[AT_SYSINFO];
  4013ba: 48 8b 84 24 20 01 00 00      	movq	288(%rsp), %rax
; 	__hwcap = aux[AT_HWCAP];
  4013c2: 48 89 0d 5f ba 08 00         	movq	%rcx, 571999(%rip)
; 	if (aux[AT_SYSINFO]) __sysinfo = aux[AT_SYSINFO];
  4013c9: 48 85 c0                     	testq	%rax, %rax
  4013cc: 74 14                        	je	20 <__init_libc+0x90>
  4013ce: 48 89 05 5b ba 08 00         	movq	%rax, 571995(%rip)
  4013d5: eb 0b                        	jmp	11 <__init_libc+0x90>
; 	__hwcap = aux[AT_HWCAP];
  4013d7: 48 c7 05 46 ba 08 00 00 00 00 00     	movq	$0, 571974(%rip)
; 	libc.page_size = aux[AT_PAGESZ];
  4013e2: 48 8b 44 24 50               	movq	80(%rsp), %rax
  4013e7: 48 89 05 aa b9 08 00         	movq	%rax, 571818(%rip)
; 	if (!pn) pn = (void*)aux[AT_EXECFN];
  4013ee: 4d 85 f6                     	testq	%r14, %r14
  4013f1: 75 08                        	jne	8 <__init_libc+0xa9>
  4013f3: 4c 8b b4 24 18 01 00 00      	movq	280(%rsp), %r14
; 	if (!pn) pn = "";
  4013fb: 4d 85 f6                     	testq	%r14, %r14
  4013fe: b8 6a 6c 40 00               	movl	$4222058, %eax
  401403: 49 0f 45 c6                  	cmovneq	%r14, %rax
; 	__progname = __progname_full = pn;
  401407: 48 89 05 4a 7d 00 00         	movq	%rax, 32074(%rip)
  40140e: 48 89 05 3b 7d 00 00         	movq	%rax, 32059(%rip)
  401415: 48 ff c0                     	incq	%rax
; 	for (i=0; pn[i]; i++) if (pn[i]=='/') __progname = pn+i+1;
  401418: 8a 48 ff                     	movb	-1(%rax), %cl
  40141b: 80 f9 2f                     	cmpb	$47, %cl
  40141e: 74 ee                        	je	-18 <__init_libc+0xbc>
  401420: 84 c9                        	testb	%cl, %cl
  401422: 75 f1                        	jne	-15 <__init_libc+0xc3>
  401424: 48 8d 5c 24 20               	leaq	32(%rsp), %rbx
; 	__init_tls(aux);
  401429: 48 89 df                     	movq	%rbx, %rdi
  40142c: e8 e8 28 00 00               	callq	10472 <static_init_tls>
; 	__init_ssp((void *)aux[AT_RANDOM]);
  401431: 48 8b bb c8 00 00 00         	movq	200(%rbx), %rdi
  401438: e8 14 ff ff ff               	callq	-236 <dummy1>
; 	if (aux[AT_UID]==aux[AT_EUID] && aux[AT_GID]==aux[AT_EGID]
  40143d: 48 8b 43 58                  	movq	88(%rbx), %rax
  401441: 48 3b 43 60                  	cmpq	96(%rbx), %rax
  401445: 75 1d                        	jne	29 <__init_libc+0x112>
  401447: 48 8b 84 24 88 00 00 00      	movq	136(%rsp), %rax
  40144f: 48 3b 84 24 90 00 00 00      	cmpq	144(%rsp), %rax
; 		&& !aux[AT_SECURE]) return;
  401457: 75 0b                        	jne	11 <__init_libc+0x112>
  401459: 48 83 bc 24 d8 00 00 00 00   	cmpq	$0, 216(%rsp)
; 	if (aux[AT_UID]==aux[AT_EUID] && aux[AT_GID]==aux[AT_EGID]
  401462: 74 5e                        	je	94 <__init_libc+0x170>
; 	struct pollfd pfd[3] = { {.fd=0}, {.fd=1}, {.fd=2} };
  401464: 48 8b 05 15 58 00 00         	movq	22549(%rip), %rax
  40146b: 48 89 e7                     	movq	%rsp, %rdi
  40146e: 48 89 47 10                  	movq	%rax, 16(%rdi)
  401472: 0f 28 05 f7 57 00 00         	movaps	22519(%rip), %xmm0
  401479: 0f 29 07                     	movaps	%xmm0, (%rdi)
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40147c: b8 07 00 00 00               	movl	$7, %eax
  401481: be 03 00 00 00               	movl	$3, %esi
  401486: 31 d2                        	xorl	%edx, %edx
  401488: 0f 05                        	syscall
; 	if (r<0) a_crash();
  40148a: 85 c0                        	testl	%eax, %eax
  40148c: 79 01                        	jns	1 <__init_libc+0x13d>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  40148e: f4                           	hlt
  40148f: 31 d2                        	xorl	%edx, %edx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  401491: bf 88 6c 40 00               	movl	$4222088, %edi
  401496: be 02 00 00 00               	movl	$2, %esi
; 	for (i=0; i<3; i++) if (pfd[i].revents&POLLNVAL)
  40149b: f6 44 d4 06 20               	testb	$32, 6(%rsp,%rdx,8)
  4014a0: 74 0d                        	je	13 <__init_libc+0x15d>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  4014a2: b8 02 00 00 00               	movl	$2, %eax
  4014a7: 0f 05                        	syscall
; 		if (__sys_open("/dev/null", O_RDWR)<0)
  4014a9: 48 85 c0                     	testq	%rax, %rax
  4014ac: 79 01                        	jns	1 <__init_libc+0x15d>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  4014ae: f4                           	hlt
; 	for (i=0; i<3; i++) if (pfd[i].revents&POLLNVAL)
  4014af: 48 ff c2                     	incq	%rdx
  4014b2: 48 83 fa 03                  	cmpq	$3, %rdx
  4014b6: 75 e3                        	jne	-29 <__init_libc+0x149>
; 	libc.secure = 1;
  4014b8: c7 05 a6 b8 08 00 01 00 00 00	movl	$1, 571558(%rip)
; }
  4014c2: 48 81 c4 58 01 00 00         	addq	$344, %rsp
  4014c9: 5b                           	popq	%rbx
  4014ca: 41 5e                        	popq	%r14
  4014cc: c3                           	retq

00000000004014cd libc_start_init:
; {
  4014cd: 41 56                        	pushq	%r14
  4014cf: 53                           	pushq	%rbx
  4014d0: 50                           	pushq	%rax
; 	_init();
  4014d1: e8 7a fe ff ff               	callq	-390 <dummy>
; 	for (; a<(uintptr_t)&__init_array_end; a+=sizeof(void(*)()))
  4014d6: 41 be 00 00 00 00            	movl	$0, %r14d
  4014dc: bb 00 00 00 00               	movl	$0, %ebx
  4014e1: 4c 39 f3                     	cmpq	%r14, %rbx
  4014e4: 73 08                        	jae	8 <libc_start_init+0x21>
; 		(*(void (**)(void))a)();
  4014e6: ff 13                        	callq	*(%rbx)
; 	for (; a<(uintptr_t)&__init_array_end; a+=sizeof(void(*)()))
  4014e8: 48 83 c3 08                  	addq	$8, %rbx
  4014ec: eb f3                        	jmp	-13 <libc_start_init+0x14>
; }
  4014ee: 48 83 c4 08                  	addq	$8, %rsp
  4014f2: 5b                           	popq	%rbx
  4014f3: 41 5e                        	popq	%r14
  4014f5: c3                           	retq

00000000004014f6 __libc_start_main:
; {
  4014f6: 41 57                        	pushq	%r15
  4014f8: 41 56                        	pushq	%r14
  4014fa: 53                           	pushq	%rbx
  4014fb: 48 89 d3                     	movq	%rdx, %rbx
  4014fe: 49 89 fe                     	movq	%rdi, %r14
; 	char **envp = argv+argc+1;
  401501: 4c 63 fe                     	movslq	%esi, %r15
  401504: 4a 8d 3c fa                  	leaq	(%rdx,%r15,8), %rdi
  401508: 48 83 c7 08                  	addq	$8, %rdi
; 	__init_libc(envp, argv[0]);
  40150c: 48 8b 32                     	movq	(%rdx), %rsi
  40150f: e8 3e fe ff ff               	callq	-450 <__init_libc>
; 	__asm__ ( "" : "+r"(stage2) : : "memory" );
  401514: b8 29 15 40 00               	movl	$4199721, %eax
; 	return stage2(main, argc, argv);
  401519: 4c 89 f7                     	movq	%r14, %rdi
  40151c: 44 89 fe                     	movl	%r15d, %esi
  40151f: 48 89 da                     	movq	%rbx, %rdx
  401522: 5b                           	popq	%rbx
  401523: 41 5e                        	popq	%r14
  401525: 41 5f                        	popq	%r15
  401527: ff e0                        	jmpq	*%rax

0000000000401529 libc_start_main_stage2:
; {
  401529: 41 57                        	pushq	%r15
  40152b: 41 56                        	pushq	%r14
  40152d: 41 54                        	pushq	%r12
  40152f: 53                           	pushq	%rbx
  401530: 50                           	pushq	%rax
  401531: 49 89 d7                     	movq	%rdx, %r15
  401534: 49 89 fe                     	movq	%rdi, %r14
; 	char **envp = argv+argc+1;
  401537: 48 63 de                     	movslq	%esi, %rbx
  40153a: 4c 8d 24 da                  	leaq	(%rdx,%rbx,8), %r12
  40153e: 49 83 c4 08                  	addq	$8, %r12
; 	__libc_start_init();
  401542: e8 86 ff ff ff               	callq	-122 <libc_start_init>
; 	exit(main(argc, argv, envp));
  401547: 89 df                        	movl	%ebx, %edi
  401549: 4c 89 fe                     	movq	%r15, %rsi
  40154c: 4c 89 e2                     	movq	%r12, %rdx
  40154f: 41 ff d6                     	callq	*%r14
  401552: 89 c7                        	movl	%eax, %edi
  401554: e8 f7 eb ff ff               	callq	-5129 <exit>
  401559: 0f 1f 00                     	nopl	(%rax)

000000000040155c dummy:
; }
  40155c: c3                           	retq

000000000040155d libc_exit_fini:
; {
  40155d: 41 56                        	pushq	%r14
  40155f: 53                           	pushq	%rbx
  401560: 50                           	pushq	%rax
; 	for (; a>(uintptr_t)&__fini_array_start; a-=sizeof(void(*)()))
  401561: 41 be 00 00 00 00            	movl	$0, %r14d
  401567: bb 00 00 00 00               	movl	$0, %ebx
; 		(*(void (**)())(a-sizeof(void(*)())))();
  40156c: 31 c0                        	xorl	%eax, %eax
  40156e: 4c 39 f3                     	cmpq	%r14, %rbx
; 	for (; a>(uintptr_t)&__fini_array_start; a-=sizeof(void(*)()))
  401571: 76 09                        	jbe	9 <libc_exit_fini+0x1f>
; 		(*(void (**)())(a-sizeof(void(*)())))();
  401573: ff 53 f8                     	callq	*-8(%rbx)
  401576: 48 83 c3 f8                  	addq	$-8, %rbx
  40157a: eb f0                        	jmp	-16 <libc_exit_fini+0xf>
; 	_fini();
  40157c: 48 83 c4 08                  	addq	$8, %rsp
  401580: 5b                           	popq	%rbx
  401581: 41 5e                        	popq	%r14
  401583: e9 d4 ff ff ff               	jmp	-44 <dummy>
  401588: 90                           	nop
  401589: 00 00                        	addb	%al, (%rax)
  40158b: 00 c3                        	addb	%al, %bl

000000000040158c dummy:
; static void dummy(FILE *f) { }
  40158c: c3                           	retq

000000000040158d fclose:
; {
  40158d: 55                           	pushq	%rbp
  40158e: 41 57                        	pushq	%r15
  401590: 41 56                        	pushq	%r14
  401592: 53                           	pushq	%rbx
  401593: 50                           	pushq	%rax
  401594: 48 89 fb                     	movq	%rdi, %rbx
; 	FLOCK(f);
  401597: 83 bf 8c 00 00 00 00         	cmpl	$0, 140(%rdi)
  40159e: 78 10                        	js	16 <fclose+0x23>
  4015a0: 48 89 df                     	movq	%rbx, %rdi
  4015a3: e8 8c 42 00 00               	callq	17036 <__lockfile>
  4015a8: 85 c0                        	testl	%eax, %eax
  4015aa: 41 0f 95 c7                  	setne	%r15b
  4015ae: eb 03                        	jmp	3 <fclose+0x26>
  4015b0: 45 31 ff                     	xorl	%r15d, %r15d
; 	r = fflush(f);
  4015b3: 48 89 df                     	movq	%rbx, %rdi
  4015b6: e8 7d 00 00 00               	callq	125 <fflush_unlocked>
  4015bb: 89 c5                        	movl	%eax, %ebp
; 	r |= f->close(f);
  4015bd: 48 89 df                     	movq	%rbx, %rdi
  4015c0: ff 53 18                     	callq	*24(%rbx)
  4015c3: 41 89 c6                     	movl	%eax, %r14d
; 	FUNLOCK(f);
  4015c6: 45 84 ff                     	testb	%r15b, %r15b
  4015c9: 74 08                        	je	8 <fclose+0x46>
  4015cb: 48 89 df                     	movq	%rbx, %rdi
  4015ce: e8 fa 42 00 00               	callq	17146 <__unlockfile>
  4015d3: 41 09 ee                     	orl	%ebp, %r14d
; 	if (f->flags & F_PERM) return r;
  4015d6: f6 03 01                     	testb	$1, (%rbx)
  4015d9: 75 4c                        	jne	76 <fclose+0x9a>
; 	__unlist_locked_file(f);
  4015db: 48 89 df                     	movq	%rbx, %rdi
  4015de: e8 a9 ff ff ff               	callq	-87 <dummy>
; 	FILE **head = __ofl_lock();
  4015e3: e8 00 02 00 00               	callq	512 <__ofl_lock>
; 	if (f->prev) f->prev->next = f->next;
  4015e8: 48 8b 4b 68                  	movq	104(%rbx), %rcx
  4015ec: 48 85 c9                     	testq	%rcx, %rcx
  4015ef: 74 08                        	je	8 <fclose+0x6c>
  4015f1: 48 8b 53 70                  	movq	112(%rbx), %rdx
  4015f5: 48 89 51 70                  	movq	%rdx, 112(%rcx)
; 	if (f->next) f->next->prev = f->prev;
  4015f9: 48 8b 53 70                  	movq	112(%rbx), %rdx
  4015fd: 48 85 d2                     	testq	%rdx, %rdx
  401600: 74 04                        	je	4 <fclose+0x79>
  401602: 48 89 4a 68                  	movq	%rcx, 104(%rdx)
; 	if (*head == f) *head = f->next;
  401606: 48 39 18                     	cmpq	%rbx, (%rax)
  401609: 75 03                        	jne	3 <fclose+0x81>
  40160b: 48 89 10                     	movq	%rdx, (%rax)
; 	__ofl_unlock();
  40160e: e8 e7 01 00 00               	callq	487 <__ofl_unlock>
; 	free(f->getln_buf);
  401613: 48 8b bb a8 00 00 00         	movq	168(%rbx), %rdi
  40161a: e8 61 36 00 00               	callq	13921 <free>
; 	free(f);
  40161f: 48 89 df                     	movq	%rbx, %rdi
  401622: e8 59 36 00 00               	callq	13913 <free>
; }
  401627: 44 89 f0                     	movl	%r14d, %eax
  40162a: 48 83 c4 08                  	addq	$8, %rsp
  40162e: 5b                           	popq	%rbx
  40162f: 41 5e                        	popq	%r14
  401631: 41 5f                        	popq	%r15
  401633: 5d                           	popq	%rbp
  401634: c3                           	retq
  401635: 0f 1f 00                     	nopl	(%rax)

0000000000401638 fflush_unlocked:
; {
  401638: 55                           	pushq	%rbp
  401639: 41 57                        	pushq	%r15
  40163b: 41 56                        	pushq	%r14
  40163d: 53                           	pushq	%rbx
  40163e: 50                           	pushq	%rax
; 	if (!f) {
  40163f: 48 85 ff                     	testq	%rdi, %rdi
  401642: 74 19                        	je	25 <fflush_unlocked+0x25>
  401644: 48 89 fb                     	movq	%rdi, %rbx
; 	FLOCK(f);
  401647: 83 bf 8c 00 00 00 00         	cmpl	$0, 140(%rdi)
  40164e: 78 28                        	js	40 <fflush_unlocked+0x40>
  401650: 48 89 df                     	movq	%rbx, %rdi
  401653: e8 dc 41 00 00               	callq	16860 <__lockfile>
  401658: 41 89 c6                     	movl	%eax, %r14d
  40165b: eb 1e                        	jmp	30 <fflush_unlocked+0x43>
; 		if (__stdout_used) r |= fflush(__stdout_used);
  40165d: 48 83 3d 9b 76 00 00 00      	cmpq	$0, 30363(%rip)
  401665: 74 60                        	je	96 <fflush_unlocked+0x8f>
  401667: 48 8b 3d 92 76 00 00         	movq	30354(%rip), %rdi
  40166e: e8 c5 ff ff ff               	callq	-59 <fflush_unlocked>
  401673: 41 89 c7                     	movl	%eax, %r15d
  401676: eb 52                        	jmp	82 <fflush_unlocked+0x92>
  401678: 45 31 f6                     	xorl	%r14d, %r14d
; 	if (f->wpos != f->wbase) {
  40167b: 48 8b 43 28                  	movq	40(%rbx), %rax
  40167f: 48 3b 43 38                  	cmpq	56(%rbx), %rax
  401683: 74 15                        	je	21 <fflush_unlocked+0x62>
; 		f->write(f, 0, 0);
  401685: 48 89 df                     	movq	%rbx, %rdi
  401688: 31 f6                        	xorl	%esi, %esi
  40168a: 31 d2                        	xorl	%edx, %edx
  40168c: ff 53 48                     	callq	*72(%rbx)
; 		if (!f->wpos) {
  40168f: 48 83 7b 28 00               	cmpq	$0, 40(%rbx)
  401694: 0f 84 9b 00 00 00            	je	155 <fflush_unlocked+0xfd>
; 	if (f->rpos != f->rend) f->seek(f, f->rpos-f->rend, SEEK_CUR);
  40169a: 48 8b 73 08                  	movq	8(%rbx), %rsi
  40169e: 48 2b 73 10                  	subq	16(%rbx), %rsi
  4016a2: 74 0b                        	je	11 <fflush_unlocked+0x77>
  4016a4: 48 89 df                     	movq	%rbx, %rdi
  4016a7: ba 01 00 00 00               	movl	$1, %edx
  4016ac: ff 53 50                     	callq	*80(%rbx)
; 	f->wpos = f->wbase = f->wend = 0;
  4016af: 48 c7 43 38 00 00 00 00      	movq	$0, 56(%rbx)
  4016b7: 0f 57 c0                     	xorps	%xmm0, %xmm0
  4016ba: 0f 11 43 20                  	movups	%xmm0, 32(%rbx)
; 	f->rpos = f->rend = 0;
  4016be: 0f 11 43 08                  	movups	%xmm0, 8(%rbx)
  4016c2: 45 31 ff                     	xorl	%r15d, %r15d
  4016c5: eb 74                        	jmp	116 <fflush_unlocked+0x103>
  4016c7: 45 31 ff                     	xorl	%r15d, %r15d
; 		if (__stderr_used) r |= fflush(__stderr_used);
  4016ca: 48 83 3d 8e 7a 00 00 00      	cmpq	$0, 31374(%rip)
  4016d2: 74 0f                        	je	15 <fflush_unlocked+0xab>
  4016d4: 48 8b 3d 85 7a 00 00         	movq	31365(%rip), %rdi
  4016db: e8 58 ff ff ff               	callq	-168 <fflush_unlocked>
  4016e0: 41 09 c7                     	orl	%eax, %r15d
; 		for (f=*__ofl_lock(); f; f=f->next) {
  4016e3: e8 00 01 00 00               	callq	256 <__ofl_lock>
  4016e8: 48 8b 18                     	movq	(%rax), %rbx
  4016eb: 48 85 db                     	testq	%rbx, %rbx
  4016ee: 74 3e                        	je	62 <fflush_unlocked+0xf6>
; 			FLOCK(f);
  4016f0: 83 bb 8c 00 00 00 00         	cmpl	$0, 140(%rbx)
  4016f7: 78 0c                        	js	12 <fflush_unlocked+0xcd>
  4016f9: 48 89 df                     	movq	%rbx, %rdi
  4016fc: e8 33 41 00 00               	callq	16691 <__lockfile>
  401701: 89 c5                        	movl	%eax, %ebp
  401703: eb 02                        	jmp	2 <fflush_unlocked+0xcf>
  401705: 31 ed                        	xorl	%ebp, %ebp
; 			if (f->wpos != f->wbase) r |= fflush(f);
  401707: 48 8b 43 28                  	movq	40(%rbx), %rax
  40170b: 48 3b 43 38                  	cmpq	56(%rbx), %rax
  40170f: 74 0b                        	je	11 <fflush_unlocked+0xe4>
  401711: 48 89 df                     	movq	%rbx, %rdi
  401714: e8 1f ff ff ff               	callq	-225 <fflush_unlocked>
  401719: 41 09 c7                     	orl	%eax, %r15d
; 			FUNLOCK(f);
  40171c: 85 ed                        	testl	%ebp, %ebp
  40171e: 74 08                        	je	8 <fflush_unlocked+0xf0>
  401720: 48 89 df                     	movq	%rbx, %rdi
  401723: e8 a5 41 00 00               	callq	16805 <__unlockfile>
  401728: 48 8b 5b 70                  	movq	112(%rbx), %rbx
  40172c: eb bd                        	jmp	-67 <fflush_unlocked+0xb3>
; 		__ofl_unlock();
  40172e: e8 c7 00 00 00               	callq	199 <__ofl_unlock>
  401733: eb 13                        	jmp	19 <fflush_unlocked+0x110>
  401735: 41 bf ff ff ff ff            	movl	$4294967295, %r15d
  40173b: 45 85 f6                     	testl	%r14d, %r14d
  40173e: 74 08                        	je	8 <fflush_unlocked+0x110>
  401740: 48 89 df                     	movq	%rbx, %rdi
  401743: e8 85 41 00 00               	callq	16773 <__unlockfile>
; }
  401748: 44 89 f8                     	movl	%r15d, %eax
  40174b: 48 83 c4 08                  	addq	$8, %rsp
  40174f: 5b                           	popq	%rbx
  401750: 41 5e                        	popq	%r14
  401752: 41 5f                        	popq	%r15
  401754: 5d                           	popq	%rbp
  401755: c3                           	retq
  401756: 66 90                        	nop

0000000000401758 fopen64:
; {
  401758: 55                           	pushq	%rbp
  401759: 41 56                        	pushq	%r14
  40175b: 53                           	pushq	%rbx
  40175c: 48 89 f3                     	movq	%rsi, %rbx
  40175f: 49 89 fe                     	movq	%rdi, %r14
; 	if (!strchr("rwa", *mode)) {
  401762: 0f be 36                     	movsbl	(%rsi), %esi
  401765: bf 92 6c 40 00               	movl	$4222098, %edi
  40176a: e8 01 21 00 00               	callq	8449 <strchr>
  40176f: 48 85 c0                     	testq	%rax, %rax
  401772: 74 62                        	je	98 <fopen64+0x7e>
; 	flags = __fmodeflags(mode);
  401774: 48 89 df                     	movq	%rbx, %rdi
  401777: e8 2c 40 00 00               	callq	16428 <__fmodeflags>
  40177c: 89 c5                        	movl	%eax, %ebp
; 	fd = sys_open(filename, flags, 0666);
  40177e: 48 63 f0                     	movslq	%eax, %rsi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  401781: b8 02 00 00 00               	movl	$2, %eax
  401786: ba b6 01 00 00               	movl	$438, %edx
  40178b: 4c 89 f7                     	movq	%r14, %rdi
  40178e: 0f 05                        	syscall
; 	fd = sys_open(filename, flags, 0666);
  401790: 48 89 c7                     	movq	%rax, %rdi
  401793: e8 78 27 00 00               	callq	10104 <__syscall_ret>
  401798: 49 89 c6                     	movq	%rax, %r14
; 	if (fd < 0) return 0;
  40179b: 45 85 f6                     	testl	%r14d, %r14d
  40179e: 78 41                        	js	65 <fopen64+0x89>
; 	if (flags & O_CLOEXEC)
  4017a0: 0f ba e5 13                  	btl	$19, %ebp
  4017a4: 73 14                        	jae	20 <fopen64+0x62>
; 		__syscall(SYS_fcntl, fd, F_SETFD, FD_CLOEXEC);
  4017a6: 49 63 fe                     	movslq	%r14d, %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4017a9: b8 48 00 00 00               	movl	$72, %eax
  4017ae: be 02 00 00 00               	movl	$2, %esi
  4017b3: ba 01 00 00 00               	movl	$1, %edx
  4017b8: 0f 05                        	syscall
; 	f = __fdopen(fd, mode);
  4017ba: 44 89 f7                     	movl	%r14d, %edi
  4017bd: 48 89 de                     	movq	%rbx, %rsi
  4017c0: e8 67 3e 00 00               	callq	15975 <fdopen>
; 	if (f) return f;
  4017c5: 48 85 c0                     	testq	%rax, %rax
  4017c8: 75 19                        	jne	25 <fopen64+0x8b>
; 	__syscall(SYS_close, fd);
  4017ca: 49 63 fe                     	movslq	%r14d, %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  4017cd: b8 03 00 00 00               	movl	$3, %eax
  4017d2: 0f 05                        	syscall
  4017d4: eb 0b                        	jmp	11 <fopen64+0x89>
; 		errno = EINVAL;
  4017d6: e8 b9 26 00 00               	callq	9913 <__errno_location>
  4017db: c7 00 16 00 00 00            	movl	$22, (%rax)
  4017e1: 31 c0                        	xorl	%eax, %eax
; }
  4017e3: 5b                           	popq	%rbx
  4017e4: 41 5e                        	popq	%r14
  4017e6: 5d                           	popq	%rbp
  4017e7: c3                           	retq

00000000004017e8 __ofl_lock:
; {
  4017e8: 50                           	pushq	%rax
; 	LOCK(ofl_lock);
  4017e9: bf 68 91 40 00               	movl	$4231528, %edi
  4017ee: e8 0d 23 00 00               	callq	8973 <__lock>
; 	return &ofl_head;
  4017f3: b8 70 91 40 00               	movl	$4231536, %eax
  4017f8: 59                           	popq	%rcx
  4017f9: c3                           	retq

00000000004017fa __ofl_unlock:
; 	UNLOCK(ofl_lock);
  4017fa: bf 68 91 40 00               	movl	$4231528, %edi
  4017ff: e9 93 23 00 00               	jmp	9107 <__unlock>

0000000000401804 printf:
; {
  401804: 48 81 ec c8 00 00 00         	subq	$200, %rsp
  40180b: 49 89 fa                     	movq	%rdi, %r10
  40180e: 84 c0                        	testb	%al, %al
  401810: 74 31                        	je	49 <printf+0x3f>
  401812: 0f 29 44 24 30               	movaps	%xmm0, 48(%rsp)
  401817: 0f 29 4c 24 40               	movaps	%xmm1, 64(%rsp)
  40181c: 0f 29 54 24 50               	movaps	%xmm2, 80(%rsp)
  401821: 0f 29 5c 24 60               	movaps	%xmm3, 96(%rsp)
  401826: 0f 29 64 24 70               	movaps	%xmm4, 112(%rsp)
  40182b: 0f 29 ac 24 80 00 00 00      	movaps	%xmm5, 128(%rsp)
  401833: 0f 29 b4 24 90 00 00 00      	movaps	%xmm6, 144(%rsp)
  40183b: 0f 29 bc 24 a0 00 00 00      	movaps	%xmm7, 160(%rsp)
  401843: 48 89 e0                     	movq	%rsp, %rax
  401846: 48 89 70 08                  	movq	%rsi, 8(%rax)
  40184a: 48 89 50 10                  	movq	%rdx, 16(%rax)
  40184e: 48 89 48 18                  	movq	%rcx, 24(%rax)
  401852: 4c 89 40 20                  	movq	%r8, 32(%rax)
  401856: 4c 89 48 28                  	movq	%r9, 40(%rax)
  40185a: 48 8d 94 24 b0 00 00 00      	leaq	176(%rsp), %rdx
; 	va_start(ap, fmt);
  401862: 48 89 42 10                  	movq	%rax, 16(%rdx)
  401866: 48 8d 84 24 d0 00 00 00      	leaq	208(%rsp), %rax
  40186e: 48 89 42 08                  	movq	%rax, 8(%rdx)
  401872: 48 b8 08 00 00 00 30 00 00 00	movabsq	$206158430216, %rax
  40187c: 48 89 02                     	movq	%rax, (%rdx)
; 	ret = vfprintf(stdout, fmt, ap);
  40187f: bf 18 8c 40 00               	movl	$4230168, %edi
  401884: 4c 89 d6                     	movq	%r10, %rsi
  401887: e8 08 00 00 00               	callq	8 <vfprintf>
; 	return ret;
  40188c: 48 81 c4 c8 00 00 00         	addq	$200, %rsp
  401893: c3                           	retq

0000000000401894 vfprintf:
; {
  401894: 55                           	pushq	%rbp
  401895: 41 57                        	pushq	%r15
  401897: 41 56                        	pushq	%r14
  401899: 41 55                        	pushq	%r13
  40189b: 41 54                        	pushq	%r12
  40189d: 53                           	pushq	%rbx
  40189e: 48 81 ec 58 01 00 00         	subq	$344, %rsp
  4018a5: 49 89 f7                     	movq	%rsi, %r15
  4018a8: 48 89 fb                     	movq	%rdi, %rbx
; 	int nl_type[NL_ARGMAX+1] = {0};
  4018ab: 0f 57 c0                     	xorps	%xmm0, %xmm0
  4018ae: 4c 8d 44 24 30               	leaq	48(%rsp), %r8
  4018b3: 41 0f 29 40 10               	movaps	%xmm0, 16(%r8)
  4018b8: 41 0f 29 00                  	movaps	%xmm0, (%r8)
  4018bc: 49 c7 40 20 00 00 00 00      	movq	$0, 32(%r8)
; 	va_copy(ap2, ap);
  4018c4: 0f 10 02                     	movups	(%rdx), %xmm0
  4018c7: 48 8d 44 24 10               	leaq	16(%rsp), %rax
  4018cc: 0f 29 00                     	movaps	%xmm0, (%rax)
  4018cf: 48 8b 4a 10                  	movq	16(%rdx), %rcx
  4018d3: 48 89 48 10                  	movq	%rcx, 16(%rax)
  4018d7: 31 ed                        	xorl	%ebp, %ebp
  4018d9: 48 8d 8c 24 b0 00 00 00      	leaq	176(%rsp), %rcx
; 	if (printf_core(0, fmt, &ap2, nl_arg, nl_type) < 0) {
  4018e1: 31 ff                        	xorl	%edi, %edi
  4018e3: 48 89 c2                     	movq	%rax, %rdx
  4018e6: e8 17 01 00 00               	callq	279 <printf_core>
  4018eb: 85 c0                        	testl	%eax, %eax
  4018ed: 78 3f                        	js	63 <vfprintf+0x9a>
; 	FLOCK(f);
  4018ef: 83 bb 8c 00 00 00 00         	cmpl	$0, 140(%rbx)
  4018f6: 78 0a                        	js	10 <vfprintf+0x6e>
  4018f8: 48 89 df                     	movq	%rbx, %rdi
  4018fb: e8 34 3f 00 00               	callq	16180 <__lockfile>
  401900: 89 c5                        	movl	%eax, %ebp
; 	olderr = f->flags & F_ERR;
  401902: 44 8b 2b                     	movl	(%rbx), %r13d
; 	if (f->mode < 1) f->flags &= ~F_ERR;
  401905: 83 bb 88 00 00 00 00         	cmpl	$0, 136(%rbx)
  40190c: 7f 08                        	jg	8 <vfprintf+0x82>
  40190e: 44 89 e8                     	movl	%r13d, %eax
  401911: 83 e0 df                     	andl	$-33, %eax
  401914: 89 03                        	movl	%eax, (%rbx)
  401916: 48 89 6c 24 08               	movq	%rbp, 8(%rsp)
; 	if (!f->buf_size) {
  40191b: 48 83 7b 60 00               	cmpq	$0, 96(%rbx)
  401920: 74 16                        	je	22 <vfprintf+0xa4>
  401922: 45 31 f6                     	xorl	%r14d, %r14d
  401925: 48 83 7b 20 00               	cmpq	$0, 32(%rbx)
  40192a: 75 42                        	jne	66 <vfprintf+0xda>
  40192c: eb 2e                        	jmp	46 <vfprintf+0xc8>
  40192e: bd ff ff ff ff               	movl	$4294967295, %ebp
  401933: e9 b6 00 00 00               	jmp	182 <vfprintf+0x15a>
; 		saved_buf = f->buf;
  401938: 4c 8b 73 58                  	movq	88(%rbx), %r14
  40193c: 48 8d 44 24 60               	leaq	96(%rsp), %rax
; 		f->buf = internal_buf;
  401941: 48 89 43 58                  	movq	%rax, 88(%rbx)
; 		f->buf_size = sizeof internal_buf;
  401945: 48 c7 43 60 50 00 00 00      	movq	$80, 96(%rbx)
; 		f->wpos = f->wbase = f->wend = 0;
  40194d: 48 c7 43 38 00 00 00 00      	movq	$0, 56(%rbx)
  401955: 0f 57 c0                     	xorps	%xmm0, %xmm0
  401958: 0f 11 43 20                  	movups	%xmm0, 32(%rbx)
; 	if (!f->wend && __towrite(f)) ret = -1;
  40195c: 48 89 df                     	movq	%rbx, %rdi
  40195f: e8 d4 41 00 00               	callq	16852 <__towrite>
  401964: 41 bc ff ff ff ff            	movl	$4294967295, %r12d
  40196a: 85 c0                        	testl	%eax, %eax
  40196c: 75 20                        	jne	32 <vfprintf+0xfa>
  40196e: 48 8d 54 24 10               	leaq	16(%rsp), %rdx
  401973: 48 8d 8c 24 b0 00 00 00      	leaq	176(%rsp), %rcx
  40197b: 4c 8d 44 24 30               	leaq	48(%rsp), %r8
; 	else ret = printf_core(f, fmt, &ap2, nl_arg, nl_type);
  401980: 48 89 df                     	movq	%rbx, %rdi
  401983: 4c 89 fe                     	movq	%r15, %rsi
  401986: e8 77 00 00 00               	callq	119 <printf_core>
  40198b: 41 89 c4                     	movl	%eax, %r12d
  40198e: 41 83 e5 20                  	andl	$32, %r13d
; 	if (saved_buf) {
  401992: 4d 85 f6                     	testq	%r14, %r14
  401995: 74 2f                        	je	47 <vfprintf+0x132>
; 		if (!f->wpos) ret = -1;
  401997: 31 ed                        	xorl	%ebp, %ebp
; 		f->write(f, 0, 0);
  401999: 48 89 df                     	movq	%rbx, %rdi
  40199c: 31 f6                        	xorl	%esi, %esi
  40199e: 31 d2                        	xorl	%edx, %edx
  4019a0: ff 53 48                     	callq	*72(%rbx)
; 		if (!f->wpos) ret = -1;
  4019a3: 48 83 7b 28 01               	cmpq	$1, 40(%rbx)
  4019a8: b8 00 00 00 00               	movl	$0, %eax
  4019ad: 19 c0                        	sbbl	%eax, %eax
  4019af: 41 09 c4                     	orl	%eax, %r12d
; 		f->buf = saved_buf;
  4019b2: 4c 89 73 58                  	movq	%r14, 88(%rbx)
; 		f->buf_size = 0;
  4019b6: 48 89 6b 60                  	movq	%rbp, 96(%rbx)
; 		f->wpos = f->wbase = f->wend = 0;
  4019ba: 48 89 6b 20                  	movq	%rbp, 32(%rbx)
  4019be: 48 89 6b 38                  	movq	%rbp, 56(%rbx)
  4019c2: 48 89 6b 28                  	movq	%rbp, 40(%rbx)
; 	if (f->flags & F_ERR) ret = -1;
  4019c6: 8b 03                        	movl	(%rbx), %eax
  4019c8: 89 c1                        	movl	%eax, %ecx
  4019ca: 83 e1 20                     	andl	$32, %ecx
  4019cd: 31 ed                        	xorl	%ebp, %ebp
  4019cf: 83 f9 01                     	cmpl	$1, %ecx
  4019d2: 19 ed                        	sbbl	%ebp, %ebp
  4019d4: f7 d5                        	notl	%ebp
  4019d6: 44 09 e5                     	orl	%r12d, %ebp
; 	f->flags |= olderr;
  4019d9: 41 09 c5                     	orl	%eax, %r13d
  4019dc: 44 89 2b                     	movl	%r13d, (%rbx)
; 	FUNLOCK(f);
  4019df: 83 7c 24 08 00               	cmpl	$0, 8(%rsp)
  4019e4: 74 08                        	je	8 <vfprintf+0x15a>
  4019e6: 48 89 df                     	movq	%rbx, %rdi
  4019e9: e8 df 3e 00 00               	callq	16095 <__unlockfile>
; }
  4019ee: 89 e8                        	movl	%ebp, %eax
  4019f0: 48 81 c4 58 01 00 00         	addq	$344, %rsp
  4019f7: 5b                           	popq	%rbx
  4019f8: 41 5c                        	popq	%r12
  4019fa: 41 5d                        	popq	%r13
  4019fc: 41 5e                        	popq	%r14
  4019fe: 41 5f                        	popq	%r15
  401a00: 5d                           	popq	%rbp
  401a01: c3                           	retq

0000000000401a02 printf_core:
; {
  401a02: 55                           	pushq	%rbp
  401a03: 41 57                        	pushq	%r15
  401a05: 41 56                        	pushq	%r14
  401a07: 41 55                        	pushq	%r13
  401a09: 41 54                        	pushq	%r12
  401a0b: 53                           	pushq	%rbx
  401a0c: 48 81 ec 18 1e 00 00         	subq	$7704, %rsp
  401a13: 4c 89 84 24 88 00 00 00      	movq	%r8, 136(%rsp)
  401a1b: 48 89 8c 24 a8 00 00 00      	movq	%rcx, 168(%rsp)
  401a23: 48 89 94 24 b0 00 00 00      	movq	%rdx, 176(%rsp)
  401a2b: 49 89 f4                     	movq	%rsi, %r12
  401a2e: 49 89 f9                     	movq	%rdi, %r9
  401a31: 48 8d 84 24 d0 00 00 00      	leaq	208(%rsp), %rax
  401a39: 48 83 f0 fe                  	xorq	$-2, %rax
  401a3d: 48 89 84 24 48 01 00 00      	movq	%rax, 328(%rsp)
  401a45: c7 44 24 44 00 00 00 00      	movl	$0, 68(%rsp)
  401a4d: 45 31 d2                     	xorl	%r10d, %r10d
  401a50: 45 31 ed                     	xorl	%r13d, %r13d
; 		if (l > INT_MAX - cnt) goto overflow;
  401a53: b9 ff ff ff 7f               	movl	$2147483647, %ecx
  401a58: 44 29 d1                     	subl	%r10d, %ecx
  401a5b: 41 39 cd                     	cmpl	%ecx, %r13d
  401a5e: 0f 8f b6 1a 00 00            	jg	6838 <printf_core+0x1b18>
  401a64: 44 89 d0                     	movl	%r10d, %eax
  401a67: 4d 89 e7                     	movq	%r12, %r15
; 		cnt += l;
  401a6a: 45 89 ea                     	movl	%r13d, %r10d
  401a6d: 41 01 c2                     	addl	%eax, %r10d
; 		if (!*s) break;
  401a70: 41 8a 04 24                  	movb	(%r12), %al
  401a74: 84 c0                        	testb	%al, %al
  401a76: 0f 84 ae 1a 00 00            	je	6830 <printf_core+0x1b28>
  401a7c: 4d 89 fc                     	movq	%r15, %r12
; 		for (a=s; *s && *s!='%'; s++);
  401a7f: 84 c0                        	testb	%al, %al
  401a81: 74 0e                        	je	14 <printf_core+0x8f>
  401a83: 3c 25                        	cmpb	$37, %al
  401a85: 74 0f                        	je	15 <printf_core+0x94>
  401a87: 41 8a 44 24 01               	movb	1(%r12), %al
  401a8c: 49 ff c4                     	incq	%r12
  401a8f: eb ee                        	jmp	-18 <printf_core+0x7d>
  401a91: 4d 89 e5                     	movq	%r12, %r13
  401a94: eb 1b                        	jmp	27 <printf_core+0xaf>
  401a96: 4d 89 e5                     	movq	%r12, %r13
; 		for (z=s; s[0]=='%' && s[1]=='%'; z++, s+=2);
  401a99: 41 80 7c 24 01 25            	cmpb	$37, 1(%r12)
  401a9f: 75 10                        	jne	16 <printf_core+0xaf>
  401aa1: 49 ff c5                     	incq	%r13
  401aa4: 41 80 7c 24 02 25            	cmpb	$37, 2(%r12)
  401aaa: 4d 8d 64 24 02               	leaq	2(%r12), %r12
  401aaf: 74 e8                        	je	-24 <printf_core+0x97>
; 		if (z-a > INT_MAX-cnt) goto overflow;
  401ab1: 4d 29 fd                     	subq	%r15, %r13
  401ab4: ba ff ff ff 7f               	movl	$2147483647, %edx
  401ab9: 44 29 d2                     	subl	%r10d, %edx
  401abc: 48 63 c2                     	movslq	%edx, %rax
  401abf: 49 39 c5                     	cmpq	%rax, %r13
  401ac2: 0f 8f 52 1a 00 00            	jg	6738 <printf_core+0x1b18>
  401ac8: 4d 85 c9                     	testq	%r9, %r9
; 		if (f) out(f, a, l);
  401acb: 74 26                        	je	38 <printf_core+0xf1>
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  401acd: 41 f6 01 20                  	testb	$32, (%r9)
  401ad1: 75 20                        	jne	32 <printf_core+0xf1>
; 		if (f) out(f, a, l);
  401ad3: 49 63 f5                     	movslq	%r13d, %rsi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  401ad6: 4c 89 ff                     	movq	%r15, %rdi
  401ad9: 41 89 d6                     	movl	%edx, %r14d
  401adc: 4c 89 ca                     	movq	%r9, %rdx
  401adf: 4c 89 cd                     	movq	%r9, %rbp
  401ae2: 44 89 d3                     	movl	%r10d, %ebx
  401ae5: e8 96 40 00 00               	callq	16534 <__fwritex>
  401aea: 44 89 f2                     	movl	%r14d, %edx
  401aed: 41 89 da                     	movl	%ebx, %r10d
  401af0: 49 89 e9                     	movq	%rbp, %r9
; 		if (l) continue;
  401af3: 45 85 ed                     	testl	%r13d, %r13d
  401af6: 0f 85 57 ff ff ff            	jne	-169 <printf_core+0x51>
; 		if (isdigit(s[1]) && s[2]=='$') {
  401afc: 49 8d 6c 24 01               	leaq	1(%r12), %rbp
  401b01: 41 8a 44 24 01               	movb	1(%r12), %al
  401b06: 0f be f0                     	movsbl	%al, %esi
  401b09: 8d 4e d0                     	leal	-48(%rsi), %ecx
  401b0c: 41 bb ff ff ff ff            	movl	$4294967295, %r11d
  401b12: 83 f9 09                     	cmpl	$9, %ecx
  401b15: 77 3b                        	ja	59 <printf_core+0x150>
; 			s+=3;
  401b17: 49 8d 44 24 03               	leaq	3(%r12), %rax
  401b1c: 89 d7                        	movl	%edx, %edi
; 		if (isdigit(s[1]) && s[2]=='$') {
  401b1e: 31 d2                        	xorl	%edx, %edx
  401b20: 41 80 7c 24 02 24            	cmpb	$36, 2(%r12)
  401b26: 0f 94 c2                     	sete	%dl
  401b29: 48 0f 44 e8                  	cmoveq	%rax, %rbp
  401b2d: b8 01 00 00 00               	movl	$1, %eax
  401b32: 8b 74 24 44                  	movl	68(%rsp), %esi
  401b36: 0f 44 f0                     	cmovel	%eax, %esi
  401b39: 89 74 24 44                  	movl	%esi, 68(%rsp)
  401b3d: b8 ff ff ff ff               	movl	$4294967295, %eax
  401b42: 0f 45 c8                     	cmovnel	%eax, %ecx
; 		for (fl=0; (unsigned)*s-' '<32 && (FLAGMASK&(1U<<*s-' ')); s++)
  401b45: 41 8a 44 54 01               	movb	1(%r12,%rdx,2), %al
  401b4a: 89 fa                        	movl	%edi, %edx
  401b4c: 0f be f0                     	movsbl	%al, %esi
  401b4f: 41 89 cb                     	movl	%ecx, %r11d
  401b52: bb 89 28 01 00               	movl	$75913, %ebx
  401b57: 8d 4e e0                     	leal	-32(%rsi), %ecx
  401b5a: 45 31 c0                     	xorl	%r8d, %r8d
  401b5d: 83 f9 1f                     	cmpl	$31, %ecx
  401b60: 77 44                        	ja	68 <printf_core+0x1a4>
  401b62: bf 01 00 00 00               	movl	$1, %edi
  401b67: d3 e7                        	shll	%cl, %edi
  401b69: 0f a3 cb                     	btl	%ecx, %ebx
  401b6c: 73 38                        	jae	56 <printf_core+0x1a4>
  401b6e: 41 89 d6                     	movl	%edx, %r14d
  401b71: 48 ff c5                     	incq	%rbp
  401b74: 45 31 c0                     	xorl	%r8d, %r8d
  401b77: 48 89 ea                     	movq	%rbp, %rdx
  401b7a: 44 89 c0                     	movl	%r8d, %eax
  401b7d: 48 89 d5                     	movq	%rdx, %rbp
; 			fl |= 1U<<*s-' ';
  401b80: 41 89 f8                     	movl	%edi, %r8d
  401b83: 41 09 c0                     	orl	%eax, %r8d
; 		for (fl=0; (unsigned)*s-' '<32 && (FLAGMASK&(1U<<*s-' ')); s++)
  401b86: 8a 02                        	movb	(%rdx), %al
  401b88: 0f be f0                     	movsbl	%al, %esi
  401b8b: 8d 4e e0                     	leal	-32(%rsi), %ecx
  401b8e: 83 f9 20                     	cmpl	$32, %ecx
  401b91: 73 10                        	jae	16 <printf_core+0x1a1>
  401b93: bf 01 00 00 00               	movl	$1, %edi
  401b98: d3 e7                        	shll	%cl, %edi
  401b9a: 48 8d 55 01                  	leaq	1(%rbp), %rdx
  401b9e: 0f a3 cb                     	btl	%ecx, %ebx
  401ba1: 72 d7                        	jb	-41 <printf_core+0x178>
  401ba3: 44 89 f2                     	movl	%r14d, %edx
; 		if (*s=='*') {
  401ba6: 3c 2a                        	cmpb	$42, %al
  401ba8: 75 58                        	jne	88 <printf_core+0x200>
; 			if (isdigit(s[1]) && s[2]=='$') {
  401baa: 0f be 45 01                  	movsbl	1(%rbp), %eax
  401bae: 8d 48 d0                     	leal	-48(%rax), %ecx
  401bb1: 83 f9 09                     	cmpl	$9, %ecx
  401bb4: 0f 87 96 00 00 00            	ja	150 <printf_core+0x24e>
  401bba: 80 7d 02 24                  	cmpb	$36, 2(%rbp)
  401bbe: 0f 85 8c 00 00 00            	jne	140 <printf_core+0x24e>
  401bc4: 48 98                        	cltq
  401bc6: 48 8b 8c 24 88 00 00 00      	movq	136(%rsp), %rcx
; 				nl_type[s[1]-'0'] = INT;
  401bce: c7 84 81 40 ff ff ff 0a 00 00 00     	movl	$10, -192(%rcx,%rax,4)
; 				w = nl_arg[s[1]-'0'].i;
  401bd9: 48 0f be 45 01               	movsbq	1(%rbp), %rax
  401bde: 48 c1 e0 04                  	shlq	$4, %rax
  401be2: 48 8b 8c 24 a8 00 00 00      	movq	168(%rsp), %rcx
  401bea: 8b 9c 08 00 fd ff ff         	movl	-768(%rax,%rcx), %ebx
; 				s+=3;
  401bf1: 48 83 c5 03                  	addq	$3, %rbp
  401bf5: c7 44 24 44 01 00 00 00      	movl	$1, 68(%rsp)
  401bfd: e9 aa 00 00 00               	jmp	170 <printf_core+0x2aa>
; 	for (i=0; isdigit(**s); (*s)++) {
  401c02: 83 c6 d0                     	addl	$-48, %esi
  401c05: 31 db                        	xorl	%ebx, %ebx
  401c07: 83 fe 09                     	cmpl	$9, %esi
  401c0a: 0f 87 a9 00 00 00            	ja	169 <printf_core+0x2b7>
  401c10: 31 c0                        	xorl	%eax, %eax
  401c12: b9 ff ff ff ff               	movl	$4294967295, %ecx
  401c17: bb ff ff ff ff               	movl	$4294967295, %ebx
; 		if (i > INT_MAX/10U || **s-'0' > INT_MAX-10*i) i = -1;
  401c1c: 3d cc cc cc 0c               	cmpl	$214748364, %eax
  401c21: 77 13                        	ja	19 <printf_core+0x234>
  401c23: 01 c0                        	addl	%eax, %eax
  401c25: 8d 1c 80                     	leal	(%rax,%rax,4), %ebx
  401c28: b8 ff ff ff 7f               	movl	$2147483647, %eax
  401c2d: 29 d8                        	subl	%ebx, %eax
; 		else i = 10*i + (**s-'0');
  401c2f: 01 f3                        	addl	%esi, %ebx
; 		if (i > INT_MAX/10U || **s-'0' > INT_MAX-10*i) i = -1;
  401c31: 39 c6                        	cmpl	%eax, %esi
  401c33: 0f 4f d9                     	cmovgl	%ecx, %ebx
; 	for (i=0; isdigit(**s); (*s)++) {
  401c36: 0f be 75 01                  	movsbl	1(%rbp), %esi
  401c3a: 48 ff c5                     	incq	%rbp
  401c3d: 83 c6 d0                     	addl	$-48, %esi
  401c40: 89 d8                        	movl	%ebx, %eax
  401c42: 83 fe 0a                     	cmpl	$10, %esi
  401c45: 72 d0                        	jb	-48 <printf_core+0x215>
; 		} else if ((w=getint(&s))<0) goto overflow;
  401c47: 85 db                        	testl	%ebx, %ebx
  401c49: 79 6e                        	jns	110 <printf_core+0x2b7>
  401c4b: e9 ca 18 00 00               	jmp	6346 <printf_core+0x1b18>
; 			} else if (!l10n) {
  401c50: 83 7c 24 44 00               	cmpl	$0, 68(%rsp)
  401c55: 0f 85 53 19 00 00            	jne	6483 <printf_core+0x1bac>
  401c5b: 48 ff c5                     	incq	%rbp
  401c5e: 4d 85 c9                     	testq	%r9, %r9
; 				w = f ? va_arg(*ap, int) : 0;
  401c61: 74 21                        	je	33 <printf_core+0x282>
  401c63: 89 d6                        	movl	%edx, %esi
  401c65: 48 8b 94 24 b0 00 00 00      	movq	176(%rsp), %rdx
  401c6d: 48 63 0a                     	movslq	(%rdx), %rcx
  401c70: 48 83 f9 28                  	cmpq	$40, %rcx
  401c74: 77 1a                        	ja	26 <printf_core+0x28e>
  401c76: 48 89 c8                     	movq	%rcx, %rax
  401c79: 48 03 42 10                  	addq	16(%rdx), %rax
  401c7d: 83 c1 08                     	addl	$8, %ecx
  401c80: 89 0a                        	movl	%ecx, (%rdx)
  401c82: eb 1c                        	jmp	28 <printf_core+0x29e>
  401c84: c7 44 24 44 00 00 00 00      	movl	$0, 68(%rsp)
  401c8c: 31 db                        	xorl	%ebx, %ebx
  401c8e: eb 29                        	jmp	41 <printf_core+0x2b7>
  401c90: 48 8b 42 08                  	movq	8(%rdx), %rax
  401c94: b9 08 00 00 00               	movl	$8, %ecx
  401c99: 48 01 c1                     	addq	%rax, %rcx
  401c9c: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  401ca0: 8b 18                        	movl	(%rax), %ebx
  401ca2: c7 44 24 44 00 00 00 00      	movl	$0, 68(%rsp)
  401caa: 89 f2                        	movl	%esi, %edx
; 			if (w<0) fl|=LEFT_ADJ, w=-w;
  401cac: 85 db                        	testl	%ebx, %ebx
  401cae: 79 09                        	jns	9 <printf_core+0x2b7>
  401cb0: 41 81 c8 00 20 00 00         	orl	$8192, %r8d
  401cb7: f7 db                        	negl	%ebx
  401cb9: 31 f6                        	xorl	%esi, %esi
  401cbb: bf ff ff ff ff               	movl	$4294967295, %edi
; 		if (*s=='.' && s[1]=='*') {
  401cc0: 80 7d 00 2e                  	cmpb	$46, (%rbp)
  401cc4: 75 59                        	jne	89 <printf_core+0x31d>
  401cc6: 0f be 45 01                  	movsbl	1(%rbp), %eax
  401cca: 83 f8 2a                     	cmpl	$42, %eax
  401ccd: 75 58                        	jne	88 <printf_core+0x325>
; 			if (isdigit(s[2]) && s[3]=='$') {
  401ccf: 0f be 45 02                  	movsbl	2(%rbp), %eax
  401cd3: 8d 48 d0                     	leal	-48(%rax), %ecx
  401cd6: 83 f9 09                     	cmpl	$9, %ecx
  401cd9: 0f 87 9f 00 00 00            	ja	159 <printf_core+0x37c>
  401cdf: 80 7d 03 24                  	cmpb	$36, 3(%rbp)
  401ce3: 0f 85 95 00 00 00            	jne	149 <printf_core+0x37c>
  401ce9: 48 98                        	cltq
  401ceb: 48 8b 8c 24 88 00 00 00      	movq	136(%rsp), %rcx
; 				nl_type[s[2]-'0'] = INT;
  401cf3: c7 84 81 40 ff ff ff 0a 00 00 00     	movl	$10, -192(%rcx,%rax,4)
; 				p = nl_arg[s[2]-'0'].i;
  401cfe: 48 0f be 45 02               	movsbq	2(%rbp), %rax
  401d03: 48 c1 e0 04                  	shlq	$4, %rax
  401d07: 48 8b 8c 24 a8 00 00 00      	movq	168(%rsp), %rcx
  401d0f: 8b bc 08 00 fd ff ff         	movl	-768(%rax,%rcx), %edi
; 				s+=4;
  401d16: 48 83 c5 04                  	addq	$4, %rbp
  401d1a: e9 ae 00 00 00               	jmp	174 <printf_core+0x3cb>
  401d1f: 45 31 ed                     	xorl	%r13d, %r13d
  401d22: e9 b0 00 00 00               	jmp	176 <printf_core+0x3d5>
  401d27: 48 ff c5                     	incq	%rbp
; 	for (i=0; isdigit(**s); (*s)++) {
  401d2a: 83 c0 d0                     	addl	$-48, %eax
  401d2d: 41 bd 01 00 00 00            	movl	$1, %r13d
  401d33: 31 ff                        	xorl	%edi, %edi
  401d35: 83 f8 09                     	cmpl	$9, %eax
  401d38: 0f 87 99 00 00 00            	ja	153 <printf_core+0x3d5>
  401d3e: 41 89 d6                     	movl	%edx, %r14d
  401d41: 31 c9                        	xorl	%ecx, %ecx
  401d43: ba ff ff ff ff               	movl	$4294967295, %edx
  401d48: bf ff ff ff ff               	movl	$4294967295, %edi
; 		if (i > INT_MAX/10U || **s-'0' > INT_MAX-10*i) i = -1;
  401d4d: 81 f9 cc cc cc 0c            	cmpl	$214748364, %ecx
  401d53: 77 13                        	ja	19 <printf_core+0x366>
  401d55: 01 c9                        	addl	%ecx, %ecx
  401d57: 8d 3c 89                     	leal	(%rcx,%rcx,4), %edi
  401d5a: b9 ff ff ff 7f               	movl	$2147483647, %ecx
  401d5f: 29 f9                        	subl	%edi, %ecx
; 		else i = 10*i + (**s-'0');
  401d61: 01 c7                        	addl	%eax, %edi
; 		if (i > INT_MAX/10U || **s-'0' > INT_MAX-10*i) i = -1;
  401d63: 39 c8                        	cmpl	%ecx, %eax
  401d65: 0f 4f fa                     	cmovgl	%edx, %edi
; 	for (i=0; isdigit(**s); (*s)++) {
  401d68: 0f be 45 01                  	movsbl	1(%rbp), %eax
  401d6c: 48 ff c5                     	incq	%rbp
  401d6f: 83 c0 d0                     	addl	$-48, %eax
  401d72: 89 f9                        	movl	%edi, %ecx
  401d74: 83 f8 0a                     	cmpl	$10, %eax
  401d77: 72 cf                        	jb	-49 <printf_core+0x346>
  401d79: 44 89 f2                     	movl	%r14d, %edx
  401d7c: eb 59                        	jmp	89 <printf_core+0x3d5>
; 			} else if (!l10n) {
  401d7e: 83 7c 24 44 00               	cmpl	$0, 68(%rsp)
  401d83: 0f 85 25 18 00 00            	jne	6181 <printf_core+0x1bac>
  401d89: 48 83 c5 02                  	addq	$2, %rbp
  401d8d: 4d 85 c9                     	testq	%r9, %r9
; 				p = f ? va_arg(*ap, int) : 0;
  401d90: 74 22                        	je	34 <printf_core+0x3b2>
  401d92: 41 89 d6                     	movl	%edx, %r14d
  401d95: 48 8b 94 24 b0 00 00 00      	movq	176(%rsp), %rdx
  401d9d: 48 63 0a                     	movslq	(%rdx), %rcx
  401da0: 48 83 f9 28                  	cmpq	$40, %rcx
  401da4: 77 12                        	ja	18 <printf_core+0x3b6>
  401da6: 48 89 c8                     	movq	%rcx, %rax
  401da9: 48 03 42 10                  	addq	16(%rdx), %rax
  401dad: 83 c1 08                     	addl	$8, %ecx
  401db0: 89 0a                        	movl	%ecx, (%rdx)
  401db2: eb 14                        	jmp	20 <printf_core+0x3c6>
  401db4: 31 ff                        	xorl	%edi, %edi
  401db6: eb 15                        	jmp	21 <printf_core+0x3cb>
  401db8: 48 8b 42 08                  	movq	8(%rdx), %rax
  401dbc: b9 08 00 00 00               	movl	$8, %ecx
  401dc1: 48 01 c1                     	addq	%rax, %rcx
  401dc4: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  401dc8: 8b 38                        	movl	(%rax), %edi
  401dca: 44 89 f2                     	movl	%r14d, %edx
; 			xp = (p>=0);
  401dcd: 41 89 fd                     	movl	%edi, %r13d
  401dd0: 41 f7 d5                     	notl	%r13d
  401dd3: 41 c1 ed 1f                  	shrl	$31, %r13d
  401dd7: 49 89 ec                     	movq	%rbp, %r12
; 			if (OOB(*s)) goto inval;
  401dda: 41 0f be 04 24               	movsbl	(%r12), %eax
  401ddf: 8d 48 bf                     	leal	-65(%rax), %ecx
  401de2: 83 f9 39                     	cmpl	$57, %ecx
  401de5: 0f 87 c3 17 00 00            	ja	6083 <printf_core+0x1bac>
  401deb: 41 89 f6                     	movl	%esi, %r14d
  401dee: 48 98                        	cltq
; 			st=states[st]S(*s++);
  401df0: 89 f1                        	movl	%esi, %ecx
  401df2: 49 ff c4                     	incq	%r12
  401df5: 48 6b c9 3a                  	imulq	$58, %rcx, %rcx
  401df9: 0f b6 b4 01 bf 6e 40 00      	movzbl	4222655(%rcx,%rax), %esi
; 		} while (st-1<STOP);
  401e01: 8d 46 ff                     	leal	-1(%rsi), %eax
  401e04: 83 f8 08                     	cmpl	$8, %eax
  401e07: 72 d1                        	jb	-47 <printf_core+0x3d8>
; 		if (!st) goto inval;
  401e09: 40 84 f6                     	testb	%sil, %sil
  401e0c: 0f 84 9c 17 00 00            	je	6044 <printf_core+0x1bac>
; 		if (st==NOARG) {
  401e12: 40 80 fe 1b                  	cmpb	$27, %sil
  401e16: 44 89 6c 24 18               	movl	%r13d, 24(%rsp)
  401e1b: 75 0a                        	jne	10 <printf_core+0x425>
  401e1d: 45 85 db                     	testl	%r11d, %r11d
; 			if (argpos>=0) goto inval;
  401e20: 78 2d                        	js	45 <printf_core+0x44d>
  401e22: e9 87 17 00 00               	jmp	6023 <printf_core+0x1bac>
  401e27: 45 85 db                     	testl	%r11d, %r11d
; 			if (argpos>=0) nl_type[argpos]=st, arg=nl_arg[argpos];
  401e2a: 78 31                        	js	49 <printf_core+0x45b>
  401e2c: 49 63 c3                     	movslq	%r11d, %rax
  401e2f: 48 8b 8c 24 88 00 00 00      	movq	136(%rsp), %rcx
  401e37: 89 34 81                     	movl	%esi, (%rcx,%rax,4)
  401e3a: 48 c1 e0 04                  	shlq	$4, %rax
  401e3e: 48 8b 8c 24 a8 00 00 00      	movq	168(%rsp), %rcx
  401e46: 0f 28 04 01                  	movaps	(%rcx,%rax), %xmm0
  401e4a: 0f 29 44 24 60               	movaps	%xmm0, 96(%rsp)
  401e4f: 45 31 ed                     	xorl	%r13d, %r13d
  401e52: 4d 85 c9                     	testq	%r9, %r9
  401e55: 0f 84 f8 fb ff ff            	je	-1032 <printf_core+0x51>
  401e5b: eb 47                        	jmp	71 <printf_core+0x4a2>
  401e5d: 4d 85 c9                     	testq	%r9, %r9
; 			else if (f) pop_arg(&arg, st, ap);
  401e60: 0f 84 1d 17 00 00            	je	5917 <printf_core+0x1b81>
  401e66: 48 89 7c 24 48               	movq	%rdi, 72(%rsp)
  401e6b: 48 8d 7c 24 60               	leaq	96(%rsp), %rdi
  401e70: 89 54 24 24                  	movl	%edx, 36(%rsp)
  401e74: 48 8b 94 24 b0 00 00 00      	movq	176(%rsp), %rdx
  401e7c: 4c 89 cd                     	movq	%r9, %rbp
  401e7f: 89 5c 24 28                  	movl	%ebx, 40(%rsp)
  401e83: 44 89 d3                     	movl	%r10d, %ebx
  401e86: 45 89 c5                     	movl	%r8d, %r13d
  401e89: e8 46 17 00 00               	callq	5958 <pop_arg>
  401e8e: 8b 54 24 24                  	movl	36(%rsp), %edx
  401e92: 48 8b 7c 24 48               	movq	72(%rsp), %rdi
  401e97: 45 89 e8                     	movl	%r13d, %r8d
  401e9a: 41 89 da                     	movl	%ebx, %r10d
  401e9d: 8b 5c 24 28                  	movl	40(%rsp), %ebx
  401ea1: 49 89 e9                     	movq	%rbp, %r9
; 		t = s[-1];
  401ea4: 41 0f be 44 24 ff            	movsbl	-1(%r12), %eax
; 		if (ps && (t&15)==3) t&=~32;
  401eaa: 89 c1                        	movl	%eax, %ecx
  401eac: 83 e1 0f                     	andl	$15, %ecx
  401eaf: 89 c6                        	movl	%eax, %esi
  401eb1: 83 e6 df                     	andl	$-33, %esi
  401eb4: 83 f9 03                     	cmpl	$3, %ecx
  401eb7: 0f 45 f0                     	cmovnel	%eax, %esi
  401eba: 45 85 f6                     	testl	%r14d, %r14d
  401ebd: 0f 44 f0                     	cmovel	%eax, %esi
; 		if (fl & LEFT_ADJ) fl &= ~ZERO_PAD;
  401ec0: 44 89 c1                     	movl	%r8d, %ecx
  401ec3: 81 e1 ff ff fe ff            	andl	$4294901759, %ecx
  401ec9: 41 0f ba e0 0d               	btl	$13, %r8d
  401ece: 44 0f 42 c1                  	cmovbl	%ecx, %r8d
; 		switch(t) {
  401ed2: 83 fe 52                     	cmpl	$82, %esi
  401ed5: 44 89 44 24 24               	movl	%r8d, 36(%rsp)
  401eda: 7e 4d                        	jle	77 <printf_core+0x527>
  401edc: 8d 46 ad                     	leal	-83(%rsi), %eax
  401edf: 83 f8 25                     	cmpl	$37, %eax
  401ee2: 0f 87 8b 05 00 00            	ja	1419 <printf_core+0xa71>
  401ee8: ff 24 c5 e0 6c 40 00         	jmpq	*4222176(,%rax,8)
; 			if (arg.i>INTMAX_MAX) {
  401eef: 48 8b 4c 24 60               	movq	96(%rsp), %rcx
  401ef4: 49 89 fb                     	movq	%rdi, %r11
  401ef7: 48 85 c9                     	testq	%rcx, %rcx
  401efa: 0f 88 8f 05 00 00            	js	1423 <printf_core+0xa8d>
; 			} else if (fl & MARK_POS) {
  401f00: 41 0f ba e0 0b               	btl	$11, %r8d
  401f05: 0f 82 8b 08 00 00            	jb	2187 <printf_core+0xd94>
; 			} else if (fl & PAD_POS) {
  401f0b: 44 89 c5                     	movl	%r8d, %ebp
  401f0e: 83 e5 01                     	andl	$1, %ebp
  401f11: be e2 6e 40 00               	movl	$4222690, %esi
  401f16: b8 e0 6e 40 00               	movl	$4222688, %eax
  401f1b: 48 0f 44 f0                  	cmoveq	%rax, %rsi
  401f1f: 48 89 74 24 30               	movq	%rsi, 48(%rsp)
  401f24: e9 7c 08 00 00               	jmp	2172 <printf_core+0xda3>
; 		switch(t) {
  401f29: 8d 46 bb                     	leal	-69(%rsi), %eax
  401f2c: 83 f8 03                     	cmpl	$3, %eax
  401f2f: 72 41                        	jb	65 <printf_core+0x570>
  401f31: 83 fe 41                     	cmpl	$65, %esi
  401f34: 74 3c                        	je	60 <printf_core+0x570>
  401f36: 83 fe 43                     	cmpl	$67, %esi
  401f39: 0f 85 34 05 00 00            	jne	1332 <printf_core+0xa71>
  401f3f: 89 5c 24 28                  	movl	%ebx, 40(%rsp)
; 			wc[0] = arg.i;
  401f43: 8b 44 24 60                  	movl	96(%rsp), %eax
  401f47: 89 84 24 08 01 00 00         	movl	%eax, 264(%rsp)
; 			wc[1] = 0;
  401f4e: c7 84 24 0c 01 00 00 00 00 00 00     	movl	$0, 268(%rsp)
  401f59: 4c 8d b4 24 08 01 00 00      	leaq	264(%rsp), %r14
; 			arg.p = wc;
  401f61: 4c 89 74 24 60               	movq	%r14, 96(%rsp)
  401f66: 48 c7 c2 ff ff ff ff         	movq	$-1, %rdx
  401f6d: e9 82 02 00 00               	jmp	642 <printf_core+0x7f2>
; 			if (xp && p<0) goto overflow;
  401f72: 85 ff                        	testl	%edi, %edi
  401f74: 79 0b                        	jns	11 <printf_core+0x57f>
  401f76: 83 7c 24 18 00               	cmpl	$0, 24(%rsp)
  401f7b: 0f 85 99 15 00 00            	jne	5529 <printf_core+0x1b18>
  401f81: 89 4c 24 50                  	movl	%ecx, 80(%rsp)
  401f85: 48 89 74 24 48               	movq	%rsi, 72(%rsp)
  401f8a: 49 89 fd                     	movq	%rdi, %r13
  401f8d: 44 89 54 24 2c               	movl	%r10d, 44(%rsp)
  401f92: 4c 89 4c 24 18               	movq	%r9, 24(%rsp)
; 			l = fmt_fp(f, arg.f, w, p, fl, t);
  401f97: db 6c 24 60                  	fldt	96(%rsp)
; 	int e2=0, e, i, j, l;
  401f9b: c7 44 24 40 00 00 00 00      	movl	$0, 64(%rsp)
  401fa3: d9 c0                        	fld	%st(0)
  401fa5: db 7c 24 30                  	fstpt	48(%rsp)
; 	if (signbit(y)) {
  401fa9: db 3c 24                     	fstpt	(%rsp)
  401fac: e8 cb 33 00 00               	callq	13259 <__signbitl>
  401fb1: 85 c0                        	testl	%eax, %eax
  401fb3: 74 13                        	je	19 <printf_core+0x5c6>
  401fb5: db 6c 24 30                  	fldt	48(%rsp)
; 		y=-y;
  401fb9: d9 e0                        	fchs
  401fbb: 41 be 01 00 00 00            	movl	$1, %r14d
  401fc1: b8 d0 70 40 00               	movl	$4223184, %eax
  401fc6: eb 35                        	jmp	53 <printf_core+0x5fb>
  401fc8: db 6c 24 30                  	fldt	48(%rsp)
  401fcc: 8b 44 24 24                  	movl	36(%rsp), %eax
; 	} else if (fl & MARK_POS) {
  401fd0: 0f ba e0 0b                  	btl	$11, %eax
  401fd4: 72 1c                        	jb	28 <printf_core+0x5f0>
; 	} else if (fl & PAD_POS) {
  401fd6: 41 89 c6                     	movl	%eax, %r14d
  401fd9: 41 83 e6 01                  	andl	$1, %r14d
  401fdd: b9 d6 70 40 00               	movl	$4223190, %ecx
  401fe2: b8 d1 70 40 00               	movl	$4223185, %eax
  401fe7: 48 0f 44 c8                  	cmoveq	%rax, %rcx
  401feb: 48 89 4c 24 70               	movq	%rcx, 112(%rsp)
  401ff0: eb 10                        	jmp	16 <printf_core+0x600>
  401ff2: 41 be 01 00 00 00            	movl	$1, %r14d
  401ff8: b8 d3 70 40 00               	movl	$4223187, %eax
  401ffd: 48 89 44 24 70               	movq	%rax, 112(%rsp)
  402002: d9 c0                        	fld	%st(0)
  402004: db 7c 24 30                  	fstpt	48(%rsp)
; 	if (!isfinite(y)) {
  402008: db 3c 24                     	fstpt	(%rsp)
  40200b: e8 20 33 00 00               	callq	13088 <__fpclassifyl>
  402010: 83 f8 01                     	cmpl	$1, %eax
  402013: 0f 8e d5 00 00 00            	jle	213 <printf_core+0x6ec>
  402019: 4c 89 b4 24 80 00 00 00      	movq	%r14, 128(%rsp)
  402021: db 6c 24 30                  	fldt	48(%rsp)
; 	y = frexpl(y, &e2) * 2;
  402025: db 3c 24                     	fstpt	(%rsp)
  402028: 48 8d 7c 24 40               	leaq	64(%rsp), %rdi
  40202d: e8 56 33 00 00               	callq	13142 <frexpl>
  402032: dc c0                        	fadd	%st, %st(0)
  402034: d9 ee                        	fldz
; 	if (y) e2--;
  402036: d9 c9                        	fxch	%st(1)
  402038: db e9                        	fucomi	%st(1), %st
  40203a: dd d9                        	fstp	%st(1)
  40203c: 4c 8d 94 24 d0 00 00 00      	leaq	208(%rsp), %r10
  402044: 41 bb 1d 00 00 00            	movl	$29, %r11d
  40204a: 48 bd 53 5a 9b a0 2f b8 44 00	movabsq	$19342813113834067, %rbp
  402054: 41 bf 09 00 00 00            	movl	$9, %r15d
  40205a: 75 02                        	jne	2 <printf_core+0x65c>
  40205c: 7b 04                        	jnp	4 <printf_core+0x660>
  40205e: ff 4c 24 40                  	decl	64(%rsp)
  402062: 48 8b 44 24 48               	movq	72(%rsp), %rax
; 	if ((t|32)=='a') {
  402067: 41 89 c6                     	movl	%eax, %r14d
  40206a: 41 83 ce 20                  	orl	$32, %r14d
  40206e: 41 83 fe 61                  	cmpl	$97, %r14d
  402072: 4c 89 e9                     	movq	%r13, %rcx
  402075: 89 5c 24 28                  	movl	%ebx, 40(%rsp)
  402079: 0f 85 2b 01 00 00            	jne	299 <printf_core+0x7a8>
  40207f: 48 8b 54 24 70               	movq	112(%rsp), %rdx
; 		if (t&32) prefix += 9;
  402084: 48 8d 72 09                  	leaq	9(%rdx), %rsi
  402088: 41 89 c6                     	movl	%eax, %r14d
  40208b: 41 83 e6 20                  	andl	$32, %r14d
  40208f: 48 0f 44 f2                  	cmoveq	%rdx, %rsi
; 		if (p<0 || p>=LDBL_MANT_DIG/4-1) re=0;
  402093: 83 f9 0e                     	cmpl	$14, %ecx
  402096: 4c 8b 4c 24 18               	movq	24(%rsp), %r9
  40209b: 48 89 74 24 30               	movq	%rsi, 48(%rsp)
; 		if (re) {
  4020a0: 0f 87 67 07 00 00            	ja	1895 <printf_core+0xe0b>
  4020a6: b8 0f 00 00 00               	movl	$15, %eax
  4020ab: 29 c8                        	subl	%ecx, %eax
  4020ad: 4c 8d 84 24 00 01 00 00      	leaq	256(%rsp), %r8
  4020b5: 4c 89 c5                     	movq	%r8, %rbp
  4020b8: bf 01 00 00 00               	movl	$1, %edi
  4020bd: 0f 84 60 07 00 00            	je	1888 <printf_core+0xe21>
; 			while (re--) round*=16;
  4020c3: 8d 41 f1                     	leal	-15(%rcx), %eax
  4020c6: d9 05 e8 4b 00 00            	flds	19432(%rip)
  4020cc: d8 0d e6 4b 00 00            	fmuls	19430(%rip)
  4020d2: ff c0                        	incl	%eax
  4020d4: 75 f6                        	jne	-10 <printf_core+0x6ca>
; 			if (*prefix=='-') {
  4020d6: 80 3e 2d                     	cmpb	$45, (%rsi)
  4020d9: 0f 85 40 07 00 00            	jne	1856 <printf_core+0xe1d>
; 				y=-y;
  4020df: d9 c9                        	fxch	%st(1)
  4020e1: d9 e0                        	fchs
; 				y-=round;
  4020e3: d8 e1                        	fsub	%st(1), %st
; 				y+=round;
  4020e5: de c1                        	faddp	%st, %st(1)
; 				y=-y;
  4020e7: d9 e0                        	fchs
  4020e9: e9 35 07 00 00               	jmp	1845 <printf_core+0xe21>
; 		char *s = (t&32)?"inf":"INF";
  4020ee: f6 44 24 48 20               	testb	$32, 72(%rsp)
  4020f3: b8 e7 70 40 00               	movl	$4223207, %eax
  4020f8: b9 e3 70 40 00               	movl	$4223203, %ecx
  4020fd: 48 0f 45 c1                  	cmovneq	%rcx, %rax
  402101: 89 da                        	movl	%ebx, %edx
; 		if (y!=y) s=(t&32)?"nan":"NAN";
  402103: bb ef 70 40 00               	movl	$4223215, %ebx
  402108: b9 eb 70 40 00               	movl	$4223211, %ecx
  40210d: 48 0f 45 d9                  	cmovneq	%rcx, %rbx
  402111: db 6c 24 30                  	fldt	48(%rsp)
  402115: df e8                        	fucompi	%st(0), %st
  402117: 48 0f 4b d8                  	cmovnpq	%rax, %rbx
; 		pad(f, ' ', w, 3+pl, fl&~ZERO_PAD);
  40211b: 45 8d 6e 03                  	leal	3(%r14), %r13d
  40211f: 48 8b 6c 24 18               	movq	24(%rsp), %rbp
  402124: 48 89 ef                     	movq	%rbp, %rdi
  402127: be 20 00 00 00               	movl	$32, %esi
  40212c: 4d 89 f7                     	movq	%r14, %r15
  40212f: 41 89 d6                     	movl	%edx, %r14d
  402132: 44 89 e9                     	movl	%r13d, %ecx
  402135: 44 8b 44 24 50               	movl	80(%rsp), %r8d
  40213a: e8 6e 16 00 00               	callq	5742 <pad>
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  40213f: 8b 45 00                     	movl	(%rbp), %eax
  402142: a8 20                        	testb	$32, %al
  402144: 75 18                        	jne	24 <printf_core+0x75c>
; 		out(f, prefix, pl);
  402146: 44 89 fe                     	movl	%r15d, %esi
  402149: 48 8b 7c 24 70               	movq	112(%rsp), %rdi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  40214e: 48 89 ea                     	movq	%rbp, %rdx
  402151: e8 2a 3a 00 00               	callq	14890 <__fwritex>
  402156: 48 8b 6c 24 18               	movq	24(%rsp), %rbp
  40215b: 8b 45 00                     	movl	(%rbp), %eax
  40215e: a8 20                        	testb	$32, %al
  402160: 75 15                        	jne	21 <printf_core+0x775>
  402162: be 03 00 00 00               	movl	$3, %esi
  402167: 48 89 df                     	movq	%rbx, %rdi
  40216a: 48 89 ea                     	movq	%rbp, %rdx
  40216d: e8 0e 3a 00 00               	callq	14862 <__fwritex>
  402172: 48 8b 6c 24 18               	movq	24(%rsp), %rbp
  402177: 44 8b 44 24 24               	movl	36(%rsp), %r8d
; 		pad(f, ' ', w, 3+pl, fl^LEFT_ADJ);
  40217c: 41 81 f0 00 20 00 00         	xorl	$8192, %r8d
  402183: 48 89 ef                     	movq	%rbp, %rdi
  402186: be 20 00 00 00               	movl	$32, %esi
  40218b: 44 89 f3                     	movl	%r14d, %ebx
  40218e: 44 89 f2                     	movl	%r14d, %edx
  402191: 44 89 e9                     	movl	%r13d, %ecx
  402194: e8 14 16 00 00               	callq	5652 <pad>
  402199: 4c 8b 4c 24 18               	movq	24(%rsp), %r9
; 		return MAX(w, 3+pl);
  40219e: 45 39 f5                     	cmpl	%r14d, %r13d
  4021a1: 45 0f 4c ee                  	cmovll	%r14d, %r13d
  4021a5: e9 62 13 00 00               	jmp	4962 <printf_core+0x1b0a>
; 			if (xp && p<0) goto overflow;
  4021aa: 85 c9                        	testl	%ecx, %ecx
; 	if (p<0) p=6;
  4021ac: b8 06 00 00 00               	movl	$6, %eax
  4021b1: 0f 48 c8                     	cmovsl	%eax, %ecx
  4021b4: d9 ee                        	fldz
; 	if (y) y *= 0x1p28, e2-=28;
  4021b6: d9 c9                        	fxch	%st(1)
  4021b8: db e9                        	fucomi	%st(1), %st
  4021ba: dd d9                        	fstp	%st(1)
  4021bc: 49 89 cd                     	movq	%rcx, %r13
  4021bf: 75 06                        	jne	6 <printf_core+0x7c5>
  4021c1: 0f 8b f3 02 00 00            	jnp	755 <printf_core+0xab8>
  4021c7: d8 0d d3 4a 00 00            	fmuls	19155(%rip)
  4021cd: 44 8b 4c 24 40               	movl	64(%rsp), %r9d
  4021d2: 41 83 c1 e4                  	addl	$-28, %r9d
  4021d6: 44 89 4c 24 40               	movl	%r9d, 64(%rsp)
  4021db: e9 df 02 00 00               	jmp	735 <printf_core+0xabd>
; 			ws = arg.p;
  4021e0: 4c 8b 74 24 60               	movq	96(%rsp), %r14
; 			for (i=l=0; i<p && *ws && (l=wctomb(mb, *ws++))>=0 && l<=p-i; i+=l);
  4021e5: 85 ff                        	testl	%edi, %edi
  4021e7: 0f 84 d0 0a 00 00            	je	2768 <printf_core+0x12bb>
  4021ed: 89 5c 24 28                  	movl	%ebx, 40(%rsp)
  4021f1: 48 63 d7                     	movslq	%edi, %rdx
  4021f4: 4c 89 f3                     	movq	%r14, %rbx
  4021f7: 45 31 ff                     	xorl	%r15d, %r15d
  4021fa: 4c 89 74 24 18               	movq	%r14, 24(%rsp)
  4021ff: 8b 33                        	movl	(%rbx), %esi
  402201: 85 f6                        	testl	%esi, %esi
  402203: 0f 84 a2 0a 00 00            	je	2722 <printf_core+0x12a9>
  402209: 49 89 d6                     	movq	%rdx, %r14
  40220c: 45 89 d5                     	movl	%r10d, %r13d
  40220f: 4c 89 cd                     	movq	%r9, %rbp
  402212: 48 8d bc 24 9c 00 00 00      	leaq	156(%rsp), %rdi
  40221a: e8 f5 33 00 00               	callq	13301 <wctomb>
  40221f: 85 c0                        	testl	%eax, %eax
  402221: 0f 88 92 13 00 00            	js	5010 <printf_core+0x1bb7>
  402227: 48 98                        	cltq
  402229: 4c 89 f1                     	movq	%r14, %rcx
  40222c: 4c 29 f9                     	subq	%r15, %rcx
  40222f: 48 39 c1                     	cmpq	%rax, %rcx
  402232: 49 89 e9                     	movq	%rbp, %r9
  402235: 45 89 ea                     	movl	%r13d, %r10d
  402238: 44 8b 44 24 24               	movl	36(%rsp), %r8d
  40223d: 0f 82 63 0a 00 00            	jb	2659 <printf_core+0x12a4>
  402243: 4c 89 f2                     	movq	%r14, %rdx
  402246: 49 01 c7                     	addq	%rax, %r15
  402249: 48 83 c3 04                  	addq	$4, %rbx
  40224d: 4d 39 f7                     	cmpq	%r14, %r15
  402250: 4c 8b 74 24 18               	movq	24(%rsp), %r14
  402255: 72 a8                        	jb	-88 <printf_core+0x7fd>
  402257: e9 4f 0a 00 00               	jmp	2639 <printf_core+0x12a9>
; 			*(a=z-(p=1))=arg.i;
  40225c: 8a 44 24 60                  	movb	96(%rsp), %al
  402260: 88 84 24 3a 01 00 00         	movb	%al, 314(%rsp)
  402267: 31 ed                        	xorl	%ebp, %ebp
  402269: b8 e0 6e 40 00               	movl	$4222688, %eax
  40226e: 48 89 44 24 30               	movq	%rax, 48(%rsp)
  402273: bf 01 00 00 00               	movl	$1, %edi
; 		if (p < z-a) p = z-a;
  402278: 48 8d 84 24 3b 01 00 00      	leaq	315(%rsp), %rax
  402280: 48 89 c6                     	movq	%rax, %rsi
  402283: 4c 8d bc 24 3a 01 00 00      	leaq	314(%rsp), %r15
  40228b: 41 89 c8                     	movl	%ecx, %r8d
  40228e: e9 25 09 00 00               	jmp	2341 <printf_core+0x11b6>
  402293: 89 4c 24 50                  	movl	%ecx, 80(%rsp)
  402297: 89 54 24 24                  	movl	%edx, 36(%rsp)
  40229b: 45 89 d6                     	movl	%r10d, %r14d
  40229e: 4d 89 cd                     	movq	%r9, %r13
  4022a1: 49 89 ff                     	movq	%rdi, %r15
; 			if (1) a = strerror(errno); else
  4022a4: e8 eb 1b 00 00               	callq	7147 <__errno_location>
  4022a9: 8b 38                        	movl	(%rax), %edi
  4022ab: e8 32 1c 00 00               	callq	7218 <strerror>
  4022b0: 4c 89 ff                     	movq	%r15, %rdi
  4022b3: 49 89 c7                     	movq	%rax, %r15
  4022b6: e9 55 01 00 00               	jmp	341 <printf_core+0xa0e>
  4022bb: 45 31 ed                     	xorl	%r13d, %r13d
; 			switch(ps) {
  4022be: 41 80 fe 07                  	cmpb	$7, %r14b
  4022c2: 0f 87 8b f7 ff ff            	ja	-2165 <printf_core+0x51>
  4022c8: 41 0f b6 c6                  	movzbl	%r14b, %eax
  4022cc: ff 24 c5 10 6e 40 00         	jmpq	*4222480(,%rax,8)
  4022d3: 49 63 c2                     	movslq	%r10d, %rax
  4022d6: 48 8b 4c 24 60               	movq	96(%rsp), %rcx
  4022db: 48 89 01                     	movq	%rax, (%rcx)
  4022de: e9 70 f7 ff ff               	jmp	-2192 <printf_core+0x51>
; 			a = fmt_o(arg.i, z);
  4022e3: 48 8b 44 24 60               	movq	96(%rsp), %rax
  4022e8: 4c 8d bc 24 3b 01 00 00      	leaq	315(%rsp), %r15
; 	for (; x; x>>=3) *--s = '0' + (x&7);
  4022f0: 48 85 c0                     	testq	%rax, %rax
  4022f3: 74 1d                        	je	29 <printf_core+0x910>
  4022f5: 4c 8d bc 24 3b 01 00 00      	leaq	315(%rsp), %r15
  4022fd: 89 c1                        	movl	%eax, %ecx
  4022ff: 80 e1 07                     	andb	$7, %cl
  402302: 80 c9 30                     	orb	$48, %cl
  402305: 41 88 4f ff                  	movb	%cl, -1(%r15)
  402309: 49 ff cf                     	decq	%r15
  40230c: 48 c1 e8 03                  	shrq	$3, %rax
  402310: 75 eb                        	jne	-21 <printf_core+0x8fb>
  402312: 31 ed                        	xorl	%ebp, %ebp
  402314: b8 e0 6e 40 00               	movl	$4222688, %eax
  402319: 48 89 44 24 30               	movq	%rax, 48(%rsp)
; 			if ((fl&ALT_FORM) && p<z-a+1) p=z-a+1;
  40231e: 41 f6 c0 08                  	testb	$8, %r8b
  402322: 44 8b 6c 24 18               	movl	24(%rsp), %r13d
  402327: 0f 84 a7 00 00 00            	je	167 <printf_core+0x9d2>
  40232d: 48 63 c7                     	movslq	%edi, %rax
  402330: 48 8d 8c 24 3b 01 00 00      	leaq	315(%rsp), %rcx
  402338: 4c 29 f9                     	subq	%r15, %rcx
  40233b: 48 39 c1                     	cmpq	%rax, %rcx
  40233e: 0f 8c 90 00 00 00            	jl	144 <printf_core+0x9d2>
  402344: ff c1                        	incl	%ecx
; 		if (fl & LEFT_ADJ) fl &= ~ZERO_PAD;
  402346: 44 89 c0                     	movl	%r8d, %eax
  402349: 89 cf                        	movl	%ecx, %edi
  40234b: e9 01 08 00 00               	jmp	2049 <printf_core+0x114f>
  402350: b8 10 00 00 00               	movl	$16, %eax
; 			p = MAX(p, 2*sizeof(void*));
  402355: 39 c7                        	cmpl	%eax, %edi
  402357: 0f 46 f8                     	cmovbel	%eax, %edi
; 			fl |= ALT_FORM;
  40235a: 41 83 c8 08                  	orl	$8, %r8d
  40235e: be 78 00 00 00               	movl	$120, %esi
; 			a = fmt_x(arg.i, z, t&32);
  402363: 48 8b 44 24 60               	movq	96(%rsp), %rax
  402368: 31 ed                        	xorl	%ebp, %ebp
  40236a: b9 e0 6e 40 00               	movl	$4222688, %ecx
  40236f: 48 89 4c 24 30               	movq	%rcx, 48(%rsp)
; 	for (; x; x>>=4) *--s = xdigits[(x&15)]|lower;
  402374: 48 85 c0                     	testq	%rax, %rax
  402377: 74 63                        	je	99 <printf_core+0x9da>
  402379: 41 89 d3                     	movl	%edx, %r11d
  40237c: 89 f1                        	movl	%esi, %ecx
  40237e: 80 e1 20                     	andb	$32, %cl
  402381: 4c 8d bc 24 3b 01 00 00      	leaq	315(%rsp), %r15
  402389: 44 8b 6c 24 18               	movl	24(%rsp), %r13d
  40238e: 89 c2                        	movl	%eax, %edx
  402390: 83 e2 0f                     	andl	$15, %edx
  402393: 8a 92 d0 6c 40 00            	movb	4222160(%rdx), %dl
  402399: 08 ca                        	orb	%cl, %dl
  40239b: 41 88 57 ff                  	movb	%dl, -1(%r15)
  40239f: 49 ff cf                     	decq	%r15
  4023a2: 48 c1 e8 04                  	shrq	$4, %rax
  4023a6: 75 e6                        	jne	-26 <printf_core+0x98c>
; 			if (arg.i && (fl & ALT_FORM)) prefix+=(t>>4), pl=2;
  4023a8: 41 f6 c0 08                  	testb	$8, %r8b
  4023ac: 0f 84 99 07 00 00            	je	1945 <printf_core+0x1149>
  4023b2: 48 83 7c 24 60 00            	cmpq	$0, 96(%rsp)
  4023b8: 44 89 da                     	movl	%r11d, %edx
  4023bb: 74 17                        	je	23 <printf_core+0x9d2>
  4023bd: c1 fe 04                     	sarl	$4, %esi
  4023c0: 48 63 c6                     	movslq	%esi, %rax
  4023c3: 48 8d 80 e0 6e 40 00         	leaq	4222688(%rax), %rax
  4023ca: 48 89 44 24 30               	movq	%rax, 48(%rsp)
  4023cf: bd 02 00 00 00               	movl	$2, %ebp
; 		if (fl & LEFT_ADJ) fl &= ~ZERO_PAD;
  4023d4: 44 89 c0                     	movl	%r8d, %eax
  4023d7: e9 75 07 00 00               	jmp	1909 <printf_core+0x114f>
  4023dc: 4c 8d bc 24 3b 01 00 00      	leaq	315(%rsp), %r15
  4023e4: 44 89 c0                     	movl	%r8d, %eax
  4023e7: 44 8b 6c 24 18               	movl	24(%rsp), %r13d
  4023ec: e9 60 07 00 00               	jmp	1888 <printf_core+0x114f>
  4023f1: 89 4c 24 50                  	movl	%ecx, 80(%rsp)
  4023f5: 89 54 24 24                  	movl	%edx, 36(%rsp)
  4023f9: 45 89 d6                     	movl	%r10d, %r14d
  4023fc: 4d 89 cd                     	movq	%r9, %r13
; 			a = arg.p ? arg.p : "(null)";
  4023ff: 4c 8b 7c 24 60               	movq	96(%rsp), %r15
  402404: 4d 85 ff                     	testq	%r15, %r15
  402407: b8 ea 6e 40 00               	movl	$4222698, %eax
  40240c: 4c 0f 44 f8                  	cmoveq	%rax, %r15
; 			z = a + strnlen(a, p<0 ? INT_MAX : p);
  402410: 85 ff                        	testl	%edi, %edi
  402412: 89 fe                        	movl	%edi, %esi
  402414: b8 ff ff ff 7f               	movl	$2147483647, %eax
  402419: 0f 48 f0                     	cmovsl	%eax, %esi
  40241c: 48 89 fd                     	movq	%rdi, %rbp
  40241f: 4c 89 ff                     	movq	%r15, %rdi
  402422: e8 e9 15 00 00               	callq	5609 <strnlen>
  402427: 49 8d 34 07                  	leaq	(%r15,%rax), %rsi
  40242b: 85 ed                        	testl	%ebp, %ebp
  40242d: 4d 89 e9                     	movq	%r13, %r9
  402430: 45 89 f2                     	movl	%r14d, %r10d
  402433: 8b 54 24 24                  	movl	36(%rsp), %edx
  402437: 44 8b 44 24 50               	movl	80(%rsp), %r8d
; 			if (p<0 && *z) goto overflow;
  40243c: 79 09                        	jns	9 <printf_core+0xa45>
  40243e: 80 3e 00                     	cmpb	$0, (%rsi)
  402441: 0f 85 d3 10 00 00            	jne	4307 <printf_core+0x1b18>
  402447: 31 ed                        	xorl	%ebp, %ebp
  402449: b9 e0 6e 40 00               	movl	$4222688, %ecx
  40244e: 48 89 4c 24 30               	movq	%rcx, 48(%rsp)
  402453: 89 c7                        	movl	%eax, %edi
  402455: e9 5e 07 00 00               	jmp	1886 <printf_core+0x11b6>
  40245a: 49 89 fb                     	movq	%rdi, %r11
  40245d: 31 ed                        	xorl	%ebp, %ebp
  40245f: b8 e0 6e 40 00               	movl	$4222688, %eax
  402464: 48 89 44 24 30               	movq	%rax, 48(%rsp)
; 			a = fmt_u(arg.i, z);
  402469: 48 8b 4c 24 60               	movq	96(%rsp), %rcx
  40246e: e9 32 03 00 00               	jmp	818 <printf_core+0xda3>
  402473: 31 ed                        	xorl	%ebp, %ebp
  402475: b8 e0 6e 40 00               	movl	$4222688, %eax
  40247a: 48 89 44 24 30               	movq	%rax, 48(%rsp)
; 		if (p < z-a) p = z-a;
  40247f: 48 8d 84 24 3b 01 00 00      	leaq	315(%rsp), %rax
  402487: 48 89 c6                     	movq	%rax, %rsi
  40248a: e9 29 07 00 00               	jmp	1833 <printf_core+0x11b6>
; 				arg.i=-arg.i;
  40248f: 48 f7 d9                     	negq	%rcx
  402492: 48 89 4c 24 60               	movq	%rcx, 96(%rsp)
  402497: b8 e0 6e 40 00               	movl	$4222688, %eax
  40249c: 48 89 44 24 30               	movq	%rax, 48(%rsp)
  4024a1: bd 01 00 00 00               	movl	$1, %ebp
  4024a6: 48 bf cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rdi
  4024b0: 44 8b 6c 24 18               	movl	24(%rsp), %r13d
  4024b5: e9 ff 02 00 00               	jmp	767 <printf_core+0xdb7>
; 	if (e2<0) a=r=z=big;
  4024ba: 44 8b 4c 24 40               	movl	64(%rsp), %r9d
  4024bf: 45 85 c9                     	testl	%r9d, %r9d
  4024c2: 48 8d 84 24 08 1d 00 00      	leaq	7432(%rsp), %rax
  4024ca: 48 89 c7                     	movq	%rax, %rdi
  4024cd: 48 8d 84 24 60 01 00 00      	leaq	352(%rsp), %rax
  4024d5: 48 0f 48 f8                  	cmovsq	%rax, %rdi
  4024d9: 48 89 7c 24 30               	movq	%rdi, 48(%rsp)
; 		*z = y;
  4024de: d9 7c 24 5c                  	fnstcw	92(%rsp)
  4024e2: 0f b7 44 24 5c               	movzwl	92(%rsp), %eax
  4024e7: 0d 00 0c 00 00               	orl	$3072, %eax
  4024ec: 66 89 44 24 7c               	movw	%ax, 124(%rsp)
  4024f1: d9 6c 24 7c                  	fldcw	124(%rsp)
  4024f5: d9 c0                        	fld	%st(0)
  4024f7: df bc 24 58 01 00 00         	fistpll	344(%rsp)
  4024fe: d9 6c 24 5c                  	fldcw	92(%rsp)
  402502: 8b 84 24 58 01 00 00         	movl	344(%rsp), %eax
  402509: 89 07                        	movl	%eax, (%rdi)
; 		y = 1000000000*(y-*z++);
  40250b: 48 83 c7 04                  	addq	$4, %rdi
  40250f: 48 89 84 24 50 01 00 00      	movq	%rax, 336(%rsp)
  402517: df ac 24 50 01 00 00         	fildll	336(%rsp)
  40251e: de e9                        	fsubrp	%st, %st(1)
  402520: d8 0d 7e 47 00 00            	fmuls	18302(%rip)
  402526: d9 ee                        	fldz
; 	} while (y);
  402528: d9 c9                        	fxch	%st(1)
  40252a: db e9                        	fucomi	%st(1), %st
  40252c: dd d9                        	fstp	%st(1)
  40252e: 75 ae                        	jne	-82 <printf_core+0xadc>
  402530: 7a ac                        	jp	-84 <printf_core+0xadc>
  402532: dd d8                        	fstp	%st(0)
; 	while (e2>0) {
  402534: 45 85 c9                     	testl	%r9d, %r9d
  402537: 7e 79                        	jle	121 <printf_core+0xbb0>
  402539: 4c 8b 54 24 30               	movq	48(%rsp), %r10
; 		int sh=MIN(29,e2);
  40253e: 41 83 f9 1e                  	cmpl	$30, %r9d
  402542: 45 0f 4d cb                  	cmovgel	%r11d, %r9d
  402546: 48 8d 5f fc                  	leaq	-4(%rdi), %rbx
; 		for (d=z-1; d>=a; d--) {
  40254a: 4c 39 d3                     	cmpq	%r10, %rbx
  40254d: 72 3c                        	jb	60 <printf_core+0xb89>
  40254f: 44 89 c9                     	movl	%r9d, %ecx
  402552: 31 d2                        	xorl	%edx, %edx
; 			uint64_t x = ((uint64_t)*d<<sh)+carry;
  402554: 8b 03                        	movl	(%rbx), %eax
  402556: 48 d3 e0                     	shlq	%cl, %rax
  402559: 89 d6                        	movl	%edx, %esi
  40255b: 48 01 c6                     	addq	%rax, %rsi
; 			carry = x / 1000000000;
  40255e: 48 89 f0                     	movq	%rsi, %rax
  402561: 48 c1 e8 09                  	shrq	$9, %rax
  402565: 48 f7 e5                     	mulq	%rbp
  402568: 48 c1 ea 0b                  	shrq	$11, %rdx
  40256c: 69 c2 00 ca 9a 3b            	imull	$1000000000, %edx, %eax
  402572: 29 c6                        	subl	%eax, %esi
; 			*d = x % 1000000000;
  402574: 89 33                        	movl	%esi, (%rbx)
  402576: 48 83 c3 fc                  	addq	$-4, %rbx
; 		for (d=z-1; d>=a; d--) {
  40257a: 4c 39 d3                     	cmpq	%r10, %rbx
  40257d: 73 d5                        	jae	-43 <printf_core+0xb52>
; 		if (carry) *--a = carry;
  40257f: 85 d2                        	testl	%edx, %edx
  402581: 74 08                        	je	8 <printf_core+0xb89>
  402583: 41 89 52 fc                  	movl	%edx, -4(%r10)
  402587: 49 83 c2 fc                  	addq	$-4, %r10
  40258b: 48 89 fb                     	movq	%rdi, %rbx
; 		while (z>a && !z[-1]) z--;
  40258e: 4c 39 d7                     	cmpq	%r10, %rdi
  402591: 76 0a                        	jbe	10 <printf_core+0xb9b>
  402593: 48 8d 7b fc                  	leaq	-4(%rbx), %rdi
  402597: 83 7b fc 00                  	cmpl	$0, -4(%rbx)
  40259b: 74 ee                        	je	-18 <printf_core+0xb89>
; 		e2-=sh;
  40259d: 8b 4c 24 40                  	movl	64(%rsp), %ecx
  4025a1: 48 89 df                     	movq	%rbx, %rdi
; 	while (e2>0) {
  4025a4: 44 29 c9                     	subl	%r9d, %ecx
; 		e2-=sh;
  4025a7: 89 4c 24 40                  	movl	%ecx, 64(%rsp)
  4025ab: 41 89 c9                     	movl	%ecx, %r9d
; 	while (e2>0) {
  4025ae: 7f 8e                        	jg	-114 <printf_core+0xb3c>
  4025b0: eb 0b                        	jmp	11 <printf_core+0xbbb>
; 	while (e2<0) {
  4025b2: 44 89 c9                     	movl	%r9d, %ecx
; 		y = 1000000000*(y-*z++);
  4025b5: 48 89 fb                     	movq	%rdi, %rbx
  4025b8: 4c 8b 54 24 30               	movq	48(%rsp), %r10
; 	while (e2<0) {
  4025bd: 85 c9                        	testl	%ecx, %ecx
  4025bf: 78 15                        	js	21 <printf_core+0xbd4>
; 	if (e2<0) a=r=z=big;
  4025c1: 4c 89 d6                     	movq	%r10, %rsi
  4025c4: 44 8b 44 24 24               	movl	36(%rsp), %r8d
  4025c9: 4c 89 ef                     	movq	%r13, %rdi
  4025cc: 48 8b 6c 24 30               	movq	48(%rsp), %rbp
  4025d1: e9 c8 00 00 00               	jmp	200 <printf_core+0xc9c>
  4025d6: 4c 89 ef                     	movq	%r13, %rdi
  4025d9: 41 8d 45 1d                  	leal	29(%r13), %eax
  4025dd: 4c 69 c8 39 8e e3 38         	imulq	$954437177, %rax, %r9
  4025e4: 49 c1 e9 21                  	shrq	$33, %r9
  4025e8: 41 ff c1                     	incl	%r9d
  4025eb: 44 8b 44 24 24               	movl	36(%rsp), %r8d
  4025f0: 48 8b 6c 24 30               	movq	48(%rsp), %rbp
; 		int sh=MIN(9,-e2), need=1+(p+LDBL_MANT_DIG/3U+8)/9;
  4025f5: f7 d9                        	negl	%ecx
  4025f7: 83 f9 0a                     	cmpl	$10, %ecx
  4025fa: 41 0f 4d cf                  	cmovgel	%r15d, %ecx
; 		for (d=a; d<z; d++) {
  4025fe: 49 39 da                     	cmpq	%rbx, %r10
  402601: 73 5e                        	jae	94 <printf_core+0xc5f>
  402603: 41 bb ff ff ff ff            	movl	$4294967295, %r11d
  402609: 41 d3 e3                     	shll	%cl, %r11d
  40260c: b8 ff ff ff ff               	movl	$4294967295, %eax
  402611: 41 31 c3                     	xorl	%eax, %r11d
  402614: b8 00 ca 9a 3b               	movl	$1000000000, %eax
  402619: d3 e8                        	shrl	%cl, %eax
  40261b: 31 ff                        	xorl	%edi, %edi
  40261d: 4c 89 d6                     	movq	%r10, %rsi
  402620: 89 fd                        	movl	%edi, %ebp
; 			uint32_t rm = *d & (1<<sh)-1;
  402622: 8b 16                        	movl	(%rsi), %edx
  402624: 89 d7                        	movl	%edx, %edi
  402626: 44 21 df                     	andl	%r11d, %edi
; 			carry = (1000000000>>sh) * rm;
  402629: 0f af f8                     	imull	%eax, %edi
; 			*d = (*d>>sh) + carry;
  40262c: d3 ea                        	shrl	%cl, %edx
  40262e: 01 ea                        	addl	%ebp, %edx
  402630: 89 16                        	movl	%edx, (%rsi)
; 		for (d=a; d<z; d++) {
  402632: 48 83 c6 04                  	addq	$4, %rsi
  402636: 48 39 de                     	cmpq	%rbx, %rsi
  402639: 72 e5                        	jb	-27 <printf_core+0xc1e>
; 		if (!*a) a++;
  40263b: 31 c0                        	xorl	%eax, %eax
  40263d: 41 39 02                     	cmpl	%eax, (%r10)
  402640: 49 8d 72 04                  	leaq	4(%r10), %rsi
  402644: 49 0f 45 f2                  	cmovneq	%r10, %rsi
; 		if (carry) *z++ = carry;
  402648: 85 ff                        	testl	%edi, %edi
  40264a: 74 06                        	je	6 <printf_core+0xc50>
  40264c: 89 3b                        	movl	%edi, (%rbx)
  40264e: 48 83 c3 04                  	addq	$4, %rbx
  402652: 44 8b 44 24 24               	movl	36(%rsp), %r8d
  402657: 4c 89 ef                     	movq	%r13, %rdi
  40265a: 48 8b 6c 24 30               	movq	48(%rsp), %rbp
  40265f: eb 0c                        	jmp	12 <printf_core+0xc6b>
; 		if (!*a) a++;
  402661: 49 8d 72 04                  	leaq	4(%r10), %rsi
  402665: 41 83 3a 00                  	cmpl	$0, (%r10)
  402669: 49 0f 45 f2                  	cmovneq	%r10, %rsi
  40266d: 41 83 fe 66                  	cmpl	$102, %r14d
; 		b = (t|32)=='f' ? r : a;
  402671: 48 89 f0                     	movq	%rsi, %rax
  402674: 48 0f 44 c5                  	cmoveq	%rbp, %rax
; 		if (z-b > need) z = b+need;
  402678: 48 89 da                     	movq	%rbx, %rdx
  40267b: 48 29 c2                     	subq	%rax, %rdx
  40267e: 48 c1 fa 02                  	sarq	$2, %rdx
  402682: 4c 39 ca                     	cmpq	%r9, %rdx
  402685: 4a 8d 04 88                  	leaq	(%rax,%r9,4), %rax
  402689: 48 0f 4f d8                  	cmovgq	%rax, %rbx
; 	while (e2<0) {
  40268d: 03 4c 24 40                  	addl	64(%rsp), %ecx
; 		e2+=sh;
  402691: 89 4c 24 40                  	movl	%ecx, 64(%rsp)
  402695: 49 89 f2                     	movq	%rsi, %r10
; 	while (e2<0) {
  402698: 0f 88 57 ff ff ff            	js	-169 <printf_core+0xbf3>
  40269e: 45 31 db                     	xorl	%r11d, %r11d
; 	if (a<z) for (i=10, e=9*(r-a); *a>=i; i*=10, e++);
  4026a1: 48 39 de                     	cmpq	%rbx, %rsi
  4026a4: 4c 8b 4c 24 18               	movq	24(%rsp), %r9
  4026a9: 44 8b 54 24 2c               	movl	44(%rsp), %r10d
  4026ae: 73 26                        	jae	38 <printf_core+0xcd4>
  4026b0: 48 89 e8                     	movq	%rbp, %rax
  4026b3: 48 29 f0                     	subq	%rsi, %rax
  4026b6: 48 c1 e8 02                  	shrq	$2, %rax
  4026ba: 44 8d 1c c0                  	leal	(%rax,%rax,8), %r11d
  4026be: 8b 06                        	movl	(%rsi), %eax
  4026c0: 83 f8 0a                     	cmpl	$10, %eax
  4026c3: 72 11                        	jb	17 <printf_core+0xcd4>
  4026c5: b9 0a 00 00 00               	movl	$10, %ecx
  4026ca: 01 c9                        	addl	%ecx, %ecx
  4026cc: 8d 0c 89                     	leal	(%rcx,%rcx,4), %ecx
  4026cf: 41 ff c3                     	incl	%r11d
  4026d2: 39 c8                        	cmpl	%ecx, %eax
  4026d4: 73 f4                        	jae	-12 <printf_core+0xcc8>
; 	j = p - ((t|32)!='f')*e - ((t|32)=='g' && p);
  4026d6: 41 83 fe 66                  	cmpl	$102, %r14d
  4026da: 44 89 d9                     	movl	%r11d, %ecx
  4026dd: b8 00 00 00 00               	movl	$0, %eax
  4026e2: 0f 44 c8                     	cmovel	%eax, %ecx
  4026e5: 89 f8                        	movl	%edi, %eax
  4026e7: 29 c8                        	subl	%ecx, %eax
  4026e9: 41 83 fe 67                  	cmpl	$103, %r14d
  4026ed: 0f 94 c1                     	sete	%cl
  4026f0: 85 ff                        	testl	%edi, %edi
  4026f2: 0f 95 c2                     	setne	%dl
  4026f5: 20 ca                        	andb	%cl, %dl
  4026f7: 0f b6 ca                     	movzbl	%dl, %ecx
  4026fa: 29 c8                        	subl	%ecx, %eax
; 	if (j < 9*(z-r-1)) {
  4026fc: 48 63 c8                     	movslq	%eax, %rcx
  4026ff: 48 89 da                     	movq	%rbx, %rdx
  402702: 48 29 ea                     	subq	%rbp, %rdx
  402705: 48 c1 fa 02                  	sarq	$2, %rdx
  402709: 48 8d 14 d2                  	leaq	(%rdx,%rdx,8), %rdx
  40270d: 48 83 c2 f7                  	addq	$-9, %rdx
  402711: 48 39 ca                     	cmpq	%rcx, %rdx
  402714: 0f 8e e1 06 00 00            	jle	1761 <printf_core+0x13f9>
  40271a: 49 89 f7                     	movq	%rsi, %r15
; 		d = r + 1 + ((j+9*LDBL_MAX_EXP)/9 - LDBL_MAX_EXP);
  40271d: 05 00 40 02 00               	addl	$147456, %eax
; 		j %= 9;
  402722: 48 98                        	cltq
  402724: 48 69 c8 39 8e e3 38         	imulq	$954437177, %rax, %rcx
  40272b: 48 89 ca                     	movq	%rcx, %rdx
  40272e: 48 c1 ea 3f                  	shrq	$63, %rdx
  402732: 48 c1 f9 21                  	sarq	$33, %rcx
  402736: 01 d1                        	addl	%edx, %ecx
; 		d = r + 1 + ((j+9*LDBL_MAX_EXP)/9 - LDBL_MAX_EXP);
  402738: 4c 63 c9                     	movslq	%ecx, %r9
  40273b: 4a 8d 3c 8d 04 00 ff ff      	leaq	-65532(,%r9,4), %rdi
  402743: 48 01 ef                     	addq	%rbp, %rdi
; 		j %= 9;
  402746: 43 8d 0c c9                  	leal	(%r9,%r9,8), %ecx
  40274a: 29 c8                        	subl	%ecx, %eax
  40274c: 8d 48 01                     	leal	1(%rax), %ecx
  40274f: be 0a 00 00 00               	movl	$10, %esi
; 		for (i=10, j++; j<9; i*=10, j++);
  402754: 83 f9 08                     	cmpl	$8, %ecx
  402757: 7f 11                        	jg	17 <printf_core+0xd68>
  402759: 83 c0 f8                     	addl	$-8, %eax
  40275c: be 0a 00 00 00               	movl	$10, %esi
  402761: 01 f6                        	addl	%esi, %esi
  402763: 8d 34 b6                     	leal	(%rsi,%rsi,4), %esi
  402766: ff c0                        	incl	%eax
  402768: 75 f7                        	jne	-9 <printf_core+0xd5f>
; 		x = *d % i;
  40276a: 8b 0f                        	movl	(%rdi), %ecx
; 			if ((*d/i & 1) || (i==1000000000 && d>a && (d[-1]&1)))
  40276c: 89 c8                        	movl	%ecx, %eax
  40276e: 31 d2                        	xorl	%edx, %edx
  402770: f7 f6                        	divl	%esi
; 		if (x || d+1!=z) {
  402772: 4c 8d 57 04                  	leaq	4(%rdi), %r10
  402776: 49 39 da                     	cmpq	%rbx, %r10
  402779: 0f 85 4e 02 00 00            	jne	590 <printf_core+0xfcb>
  40277f: 85 d2                        	testl	%edx, %edx
  402781: 0f 85 46 02 00 00            	jne	582 <printf_core+0xfcb>
  402787: 4c 8b 4c 24 18               	movq	24(%rsp), %r9
  40278c: 44 8b 54 24 2c               	movl	44(%rsp), %r10d
  402791: e9 54 06 00 00               	jmp	1620 <printf_core+0x13e8>
  402796: bd 01 00 00 00               	movl	$1, %ebp
  40279b: b8 e1 6e 40 00               	movl	$4222689, %eax
  4027a0: 48 89 44 24 30               	movq	%rax, 48(%rsp)
  4027a5: 48 bf cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rdi
  4027af: 44 8b 6c 24 18               	movl	24(%rsp), %r13d
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  4027b4: 48 85 c9                     	testq	%rcx, %rcx
  4027b7: 74 41                        	je	65 <printf_core+0xdf8>
  4027b9: 41 89 d6                     	movl	%edx, %r14d
  4027bc: 4c 8d bc 24 3b 01 00 00      	leaq	315(%rsp), %r15
  4027c4: 48 89 c8                     	movq	%rcx, %rax
  4027c7: 48 f7 e7                     	mulq	%rdi
  4027ca: 48 c1 ea 03                  	shrq	$3, %rdx
  4027ce: 8d 04 12                     	leal	(%rdx,%rdx), %eax
  4027d1: 8d 04 80                     	leal	(%rax,%rax,4), %eax
  4027d4: 89 ce                        	movl	%ecx, %esi
  4027d6: 29 c6                        	subl	%eax, %esi
  4027d8: 40 80 ce 30                  	orb	$48, %sil
  4027dc: 41 88 77 ff                  	movb	%sil, -1(%r15)
  4027e0: 49 ff cf                     	decq	%r15
  4027e3: 48 83 f9 09                  	cmpq	$9, %rcx
  4027e7: 48 89 d1                     	movq	%rdx, %rcx
  4027ea: 77 d8                        	ja	-40 <printf_core+0xdc2>
; 		if (fl & LEFT_ADJ) fl &= ~ZERO_PAD;
  4027ec: 44 89 c0                     	movl	%r8d, %eax
  4027ef: 4c 89 df                     	movq	%r11, %rdi
  4027f2: 44 89 f2                     	movl	%r14d, %edx
  4027f5: e9 57 03 00 00               	jmp	855 <printf_core+0x114f>
  4027fa: 4c 8d bc 24 3b 01 00 00      	leaq	315(%rsp), %r15
  402802: 44 89 c0                     	movl	%r8d, %eax
  402805: 4c 89 df                     	movq	%r11, %rdi
  402808: e9 44 03 00 00               	jmp	836 <printf_core+0x114f>
  40280d: 4c 8d 84 24 00 01 00 00      	leaq	256(%rsp), %r8
  402815: 4c 89 c5                     	movq	%r8, %rbp
  402818: bf 01 00 00 00               	movl	$1, %edi
  40281d: eb 04                        	jmp	4 <printf_core+0xe21>
; 				y+=round;
  40281f: dc c1                        	fadd	%st, %st(1)
; 				y-=round;
  402821: de e9                        	fsubrp	%st, %st(1)
; 		estr=fmt_u(e2<0 ? -e2 : e2, ebuf);
  402823: 44 8b 5c 24 40               	movl	64(%rsp), %r11d
  402828: 44 89 d8                     	movl	%r11d, %eax
  40282b: f7 d8                        	negl	%eax
  40282d: 41 0f 4c c3                  	cmovll	%r11d, %eax
  402831: 49 89 ef                     	movq	%rbp, %r15
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  402834: 85 c0                        	testl	%eax, %eax
  402836: 74 47                        	je	71 <printf_core+0xe7d>
; 		estr=fmt_u(e2<0 ? -e2 : e2, ebuf);
  402838: 89 c1                        	movl	%eax, %ecx
  40283a: 31 db                        	xorl	%ebx, %ebx
  40283c: 49 89 e8                     	movq	%rbp, %r8
  40283f: 49 89 ef                     	movq	%rbp, %r15
  402842: 48 be cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rsi
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  40284c: 48 89 c8                     	movq	%rcx, %rax
  40284f: 48 f7 e6                     	mulq	%rsi
  402852: 48 c1 ea 03                  	shrq	$3, %rdx
  402856: 8d 04 12                     	leal	(%rdx,%rdx), %eax
  402859: 8d 04 80                     	leal	(%rax,%rax,4), %eax
  40285c: 89 cd                        	movl	%ecx, %ebp
  40285e: 29 c5                        	subl	%eax, %ebp
  402860: 40 80 cd 30                  	orb	$48, %bpl
  402864: 41 88 6f ff                  	movb	%bpl, -1(%r15)
  402868: 49 ff cf                     	decq	%r15
  40286b: 48 ff c3                     	incq	%rbx
  40286e: 48 83 f9 09                  	cmpq	$9, %rcx
  402872: 48 89 d1                     	movq	%rdx, %rcx
  402875: 77 d5                        	ja	-43 <printf_core+0xe4a>
; 		if (estr==ebuf) *--estr='0';
  402877: 48 85 db                     	testq	%rbx, %rbx
  40287a: 4c 89 c5                     	movq	%r8, %rbp
  40287d: 75 08                        	jne	8 <printf_core+0xe85>
  40287f: 41 c6 47 ff 30               	movb	$48, -1(%r15)
  402884: 49 ff cf                     	decq	%r15
  402887: 48 8b 84 24 80 00 00 00      	movq	128(%rsp), %rax
  40288f: 83 c8 02                     	orl	$2, %eax
  402892: 48 89 84 24 80 00 00 00      	movq	%rax, 128(%rsp)
; 		*--estr = (e2<0 ? '-' : '+');
  40289a: 41 c1 eb 1f                  	shrl	$31, %r11d
  40289e: 45 00 db                     	addb	%r11b, %r11b
  4028a1: 41 80 c3 2b                  	addb	$43, %r11b
  4028a5: 45 88 5f ff                  	movb	%r11b, -1(%r15)
  4028a9: 48 8b 44 24 48               	movq	72(%rsp), %rax
; 		*--estr = t+('p'-'a');
  4028ae: 04 0f                        	addb	$15, %al
  4028b0: 41 88 47 fe                  	movb	%al, -2(%r15)
  4028b4: 49 83 c7 fe                  	addq	$-2, %r15
  4028b8: 4c 89 d3                     	movq	%r10, %rbx
  4028bb: 44 8b 44 24 24               	movl	36(%rsp), %r8d
; 			int x=y;
  4028c0: d9 7c 24 5e                  	fnstcw	94(%rsp)
  4028c4: 0f b7 44 24 5e               	movzwl	94(%rsp), %eax
  4028c9: 0d 00 0c 00 00               	orl	$3072, %eax
  4028ce: 66 89 44 24 7e               	movw	%ax, 126(%rsp)
  4028d3: d9 6c 24 7e                  	fldcw	126(%rsp)
  4028d7: db 94 24 c8 00 00 00         	fistl	200(%rsp)
  4028de: d9 6c 24 5e                  	fldcw	94(%rsp)
  4028e2: 48 89 d8                     	movq	%rbx, %rax
  4028e5: 48 63 8c 24 c8 00 00 00      	movslq	200(%rsp), %rcx
  4028ed: 8a 91 d0 6c 40 00            	movb	4222160(%rcx), %dl
; 			*s++=xdigits[x]|(t&32);
  4028f3: 44 08 f2                     	orb	%r14b, %dl
  4028f6: 88 13                        	movb	%dl, (%rbx)
; 			y=16*(y-x);
  4028f8: 89 8c 24 cc 00 00 00         	movl	%ecx, 204(%rsp)
  4028ff: da a4 24 cc 00 00 00         	fisubl	204(%rsp)
  402906: d8 0d ac 43 00 00            	fmuls	17324(%rip)
; 			*s++=xdigits[x]|(t&32);
  40290c: 48 01 fb                     	addq	%rdi, %rbx
; 			if (s-buf==1 && (y||p>0||(fl&ALT_FORM))) *s++='.';
  40290f: 4c 89 d1                     	movq	%r10, %rcx
  402912: 48 f7 d9                     	negq	%rcx
  402915: 48 01 c1                     	addq	%rax, %rcx
  402918: 48 83 c1 01                  	addq	$1, %rcx
  40291c: 48 39 f9                     	cmpq	%rdi, %rcx
  40291f: 75 22                        	jne	34 <printf_core+0xf41>
  402921: 41 f6 c0 08                  	testb	$8, %r8b
  402925: 75 11                        	jne	17 <printf_core+0xf36>
  402927: 45 85 ed                     	testl	%r13d, %r13d
  40292a: 7f 0c                        	jg	12 <printf_core+0xf36>
  40292c: d9 ee                        	fldz
  40292e: d9 c9                        	fxch	%st(1)
  402930: db e9                        	fucomi	%st(1), %st
  402932: dd d9                        	fstp	%st(1)
  402934: 75 02                        	jne	2 <printf_core+0xf36>
  402936: 7b 0b                        	jnp	11 <printf_core+0xf41>
  402938: c6 40 01 2e                  	movb	$46, 1(%rax)
  40293c: 48 83 c0 02                  	addq	$2, %rax
  402940: 48 89 c3                     	movq	%rax, %rbx
  402943: d9 ee                        	fldz
; 		} while (y);
  402945: d9 c9                        	fxch	%st(1)
  402947: db e9                        	fucomi	%st(1), %st
  402949: dd d9                        	fstp	%st(1)
  40294b: 0f 85 6f ff ff ff            	jne	-145 <printf_core+0xebe>
  402951: 0f 8a 69 ff ff ff            	jp	-151 <printf_core+0xebe>
  402957: dd d8                        	fstp	%st(0)
  402959: 4c 89 ee                     	movq	%r13, %rsi
; 		if (p > INT_MAX-2-(ebuf-estr)-pl)
  40295c: 48 63 c6                     	movslq	%esi, %rax
  40295f: 4c 29 fd                     	subq	%r15, %rbp
  402962: 4c 8b b4 24 80 00 00 00      	movq	128(%rsp), %r14
  40296a: 44 89 f7                     	movl	%r14d, %edi
  40296d: 48 8d 0c 2f                  	leaq	(%rdi,%rbp), %rcx
  402971: ba fd ff ff 7f               	movl	$2147483645, %edx
  402976: 48 29 ca                     	subq	%rcx, %rdx
  402979: 41 bd ff ff ff ff            	movl	$4294967295, %r13d
  40297f: 48 39 c2                     	cmpq	%rax, %rdx
  402982: 44 8b 54 24 2c               	movl	44(%rsp), %r10d
  402987: 0f 8c 84 0b 00 00            	jl	2948 <printf_core+0x1b0f>
; 		if (p && s-buf-2 < p)
  40298d: 85 f6                        	testl	%esi, %esi
  40298f: 48 89 5c 24 48               	movq	%rbx, 72(%rsp)
  402994: 48 89 6c 24 50               	movq	%rbp, 80(%rsp)
  402999: 48 89 7c 24 70               	movq	%rdi, 112(%rsp)
  40299e: 0f 84 ad 00 00 00            	je	173 <printf_core+0x104f>
  4029a4: 48 8b 8c 24 48 01 00 00      	movq	328(%rsp), %rcx
  4029ac: 48 01 d9                     	addq	%rbx, %rcx
  4029af: 48 39 c1                     	cmpq	%rax, %rcx
  4029b2: 0f 8d 99 00 00 00            	jge	153 <printf_core+0x104f>
; 			l = (p+2) + (ebuf-estr);
  4029b8: 4c 8d 2c 28                  	leaq	(%rax,%rbp), %r13
  4029bc: 49 83 c5 02                  	addq	$2, %r13
  4029c0: 48 8d ac 24 d0 00 00 00      	leaq	208(%rsp), %rbp
  4029c8: e9 95 00 00 00               	jmp	149 <printf_core+0x1060>
; 			if ((*d/i & 1) || (i==1000000000 && d>a && (d[-1]&1)))
  4029cd: a8 01                        	testb	$1, %al
  4029cf: d9 ee                        	fldz
  4029d1: 75 23                        	jne	35 <printf_core+0xff4>
  4029d3: dd d8                        	fstp	%st(0)
  4029d5: d9 05 cd 42 00 00            	flds	17101(%rip)
  4029db: 4c 39 ff                     	cmpq	%r15, %rdi
  4029de: 76 1e                        	jbe	30 <printf_core+0xffc>
  4029e0: 81 fe 00 ca 9a 3b            	cmpl	$1000000000, %esi
  4029e6: 75 16                        	jne	22 <printf_core+0xffc>
  4029e8: dd d8                        	fstp	%st(0)
  4029ea: d9 05 b8 42 00 00            	flds	17080(%rip)
  4029f0: f6 47 fc 01                  	testb	$1, -4(%rdi)
  4029f4: 74 08                        	je	8 <printf_core+0xffc>
  4029f6: dd d8                        	fstp	%st(0)
  4029f8: db 2d c2 42 00 00            	fldt	17090(%rip)
; 			if (x<i/2) small=0x0.8p0;
  4029fe: 89 f0                        	movl	%esi, %eax
  402a00: d1 e8                        	shrl	%eax
  402a02: d9 05 a4 42 00 00            	flds	17060(%rip)
  402a08: 39 c2                        	cmpl	%eax, %edx
  402a0a: 72 17                        	jb	23 <printf_core+0x1021>
  402a0c: dd d8                        	fstp	%st(0)
  402a0e: d9 e8                        	fld1
  402a10: d9 05 9a 42 00 00            	flds	17050(%rip)
; 			else if (x==i/2 && d+1==z) small=0x1.0p0;
  402a16: d9 c0                        	fld	%st(0)
  402a18: da ca                        	fcmove	%st(2), %st
  402a1a: dd da                        	fstp	%st(2)
; 		if (x || d+1!=z) {
  402a1c: 49 39 da                     	cmpq	%rbx, %r10
; 			else if (x==i/2 && d+1==z) small=0x1.0p0;
  402a1f: da c9                        	fcmove	%st(1), %st
  402a21: dd d9                        	fstp	%st(1)
; 			if (pl && *prefix=='-') round*=-1, small*=-1;
  402a23: 83 bc 24 80 00 00 00 00      	cmpl	$0, 128(%rsp)
  402a2b: 0f 84 46 03 00 00            	je	838 <printf_core+0x1375>
  402a31: 48 8b 44 24 70               	movq	112(%rsp), %rax
  402a36: 80 38 2d                     	cmpb	$45, (%rax)
  402a39: 44 8b 54 24 2c               	movl	44(%rsp), %r10d
  402a3e: 0f 85 38 03 00 00            	jne	824 <printf_core+0x137a>
  402a44: d9 c9                        	fxch	%st(1)
  402a46: d9 e0                        	fchs
  402a48: d9 c9                        	fxch	%st(1)
  402a4a: d9 e0                        	fchs
  402a4c: e9 2b 03 00 00               	jmp	811 <printf_core+0x137a>
; 			l = (s-buf) + (ebuf-estr);
  402a51: 49 89 ed                     	movq	%rbp, %r13
  402a54: 48 8d ac 24 d0 00 00 00      	leaq	208(%rsp), %rbp
  402a5c: 49 29 ed                     	subq	%rbp, %r13
  402a5f: 49 01 dd                     	addq	%rbx, %r13
; 		pad(f, ' ', w, pl+l, fl);
  402a62: 45 01 ee                     	addl	%r13d, %r14d
  402a65: 4c 89 cf                     	movq	%r9, %rdi
  402a68: be 20 00 00 00               	movl	$32, %esi
  402a6d: 8b 54 24 28                  	movl	40(%rsp), %edx
  402a71: 44 89 f1                     	movl	%r14d, %ecx
  402a74: e8 34 0d 00 00               	callq	3380 <pad>
  402a79: 48 8b 54 24 18               	movq	24(%rsp), %rdx
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  402a7e: f6 02 20                     	testb	$32, (%rdx)
  402a81: 75 14                        	jne	20 <printf_core+0x1095>
  402a83: 48 8b 7c 24 30               	movq	48(%rsp), %rdi
  402a88: 48 8b 74 24 70               	movq	112(%rsp), %rsi
  402a8d: e8 ee 30 00 00               	callq	12526 <__fwritex>
  402a92: 48 8b 54 24 18               	movq	24(%rsp), %rdx
  402a97: 44 8b 44 24 24               	movl	36(%rsp), %r8d
; 		pad(f, '0', w, pl+l, fl^ZERO_PAD);
  402a9c: 41 81 f0 00 00 01 00         	xorl	$65536, %r8d
  402aa3: 48 89 d7                     	movq	%rdx, %rdi
  402aa6: be 30 00 00 00               	movl	$48, %esi
  402aab: 8b 54 24 28                  	movl	40(%rsp), %edx
  402aaf: 44 89 f1                     	movl	%r14d, %ecx
  402ab2: e8 f6 0c 00 00               	callq	3318 <pad>
  402ab7: 48 8b 54 24 18               	movq	24(%rsp), %rdx
  402abc: 48 8b 74 24 48               	movq	72(%rsp), %rsi
; 		out(f, buf, s-buf);
  402ac1: 48 29 ee                     	subq	%rbp, %rsi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  402ac4: f6 02 20                     	testb	$32, (%rdx)
  402ac7: 75 13                        	jne	19 <printf_core+0x10da>
  402ac9: 48 89 ef                     	movq	%rbp, %rdi
  402acc: 48 89 f3                     	movq	%rsi, %rbx
  402acf: e8 ac 30 00 00               	callq	12460 <__fwritex>
  402ad4: 48 89 de                     	movq	%rbx, %rsi
  402ad7: 48 8b 54 24 18               	movq	24(%rsp), %rdx
  402adc: 48 8b 5c 24 50               	movq	80(%rsp), %rbx
; 		pad(f, '0', l-(ebuf-estr)-(s-buf), 0, 0);
  402ae1: 01 de                        	addl	%ebx, %esi
  402ae3: 41 29 f5                     	subl	%esi, %r13d
  402ae6: 48 89 d7                     	movq	%rdx, %rdi
  402ae9: be 30 00 00 00               	movl	$48, %esi
  402aee: 44 89 ea                     	movl	%r13d, %edx
  402af1: 31 c9                        	xorl	%ecx, %ecx
  402af3: 45 31 c0                     	xorl	%r8d, %r8d
  402af6: e8 b2 0c 00 00               	callq	3250 <pad>
  402afb: 48 8b 54 24 18               	movq	24(%rsp), %rdx
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  402b00: f6 02 20                     	testb	$32, (%rdx)
  402b03: 75 10                        	jne	16 <printf_core+0x1113>
  402b05: 4c 89 ff                     	movq	%r15, %rdi
  402b08: 48 89 de                     	movq	%rbx, %rsi
  402b0b: e8 70 30 00 00               	callq	12400 <__fwritex>
  402b10: 48 8b 54 24 18               	movq	24(%rsp), %rdx
  402b15: 44 8b 44 24 24               	movl	36(%rsp), %r8d
; 		pad(f, ' ', w, pl+l, fl^LEFT_ADJ);
  402b1a: 41 81 f0 00 20 00 00         	xorl	$8192, %r8d
  402b21: 48 89 d7                     	movq	%rdx, %rdi
  402b24: be 20 00 00 00               	movl	$32, %esi
  402b29: 8b 5c 24 28                  	movl	40(%rsp), %ebx
  402b2d: 89 da                        	movl	%ebx, %edx
  402b2f: 44 89 f1                     	movl	%r14d, %ecx
  402b32: e8 76 0c 00 00               	callq	3190 <pad>
  402b37: 4c 8b 4c 24 18               	movq	24(%rsp), %r9
; 		return MAX(w, pl+l);
  402b3c: 41 39 de                     	cmpl	%ebx, %r14d
  402b3f: 44 0f 4c f3                  	cmovll	%ebx, %r14d
  402b43: 45 89 f5                     	movl	%r14d, %r13d
  402b46: e9 c1 09 00 00               	jmp	2497 <printf_core+0x1b0a>
; 		if (fl & LEFT_ADJ) fl &= ~ZERO_PAD;
  402b4b: 44 89 c0                     	movl	%r8d, %eax
  402b4e: 44 89 da                     	movl	%r11d, %edx
  402b51: 44 89 e9                     	movl	%r13d, %ecx
; 			if (xp && p<0) goto overflow;
  402b54: 45 85 ed                     	testl	%r13d, %r13d
  402b57: 74 08                        	je	8 <printf_core+0x115f>
  402b59: 85 ff                        	testl	%edi, %edi
  402b5b: 0f 88 b9 09 00 00            	js	2489 <printf_core+0x1b18>
; 			if (xp) fl &= ~ZERO_PAD;
  402b61: 41 89 c0                     	movl	%eax, %r8d
  402b64: 41 81 e0 ff ff fe ff         	andl	$4294901759, %r8d
; 			if (xp && p<0) goto overflow;
  402b6b: 85 c9                        	testl	%ecx, %ecx
; 			if (xp) fl &= ~ZERO_PAD;
  402b6d: 44 0f 44 c0                  	cmovel	%eax, %r8d
; 			if (!arg.i && !p) {
  402b71: 48 8b 44 24 60               	movq	96(%rsp), %rax
  402b76: 85 ff                        	testl	%edi, %edi
  402b78: 75 14                        	jne	20 <printf_core+0x118c>
  402b7a: 48 85 c0                     	testq	%rax, %rax
  402b7d: 75 0f                        	jne	15 <printf_core+0x118c>
  402b7f: 31 ff                        	xorl	%edi, %edi
  402b81: 4c 8d bc 24 3b 01 00 00      	leaq	315(%rsp), %r15
; 		if (p < z-a) p = z-a;
  402b89: 4c 89 fe                     	movq	%r15, %rsi
  402b8c: eb 2a                        	jmp	42 <printf_core+0x11b6>
  402b8e: 41 89 d3                     	movl	%edx, %r11d
  402b91: 48 8d 94 24 3b 01 00 00      	leaq	315(%rsp), %rdx
; 			p = MAX(p, z-a + !arg.i);
  402b99: 48 89 d1                     	movq	%rdx, %rcx
  402b9c: 4c 29 f9                     	subq	%r15, %rcx
  402b9f: 48 83 f8 01                  	cmpq	$1, %rax
  402ba3: 48 83 d1 00                  	adcq	$0, %rcx
  402ba7: 48 63 c7                     	movslq	%edi, %rax
  402baa: 48 39 c1                     	cmpq	%rax, %rcx
  402bad: 0f 4c cf                     	cmovll	%edi, %ecx
; 		if (p < z-a) p = z-a;
  402bb0: 48 89 d6                     	movq	%rdx, %rsi
  402bb3: 44 89 da                     	movl	%r11d, %edx
  402bb6: 89 cf                        	movl	%ecx, %edi
  402bb8: 4c 63 ef                     	movslq	%edi, %r13
  402bbb: 4c 29 fe                     	subq	%r15, %rsi
  402bbe: 4c 39 ee                     	cmpq	%r13, %rsi
  402bc1: 44 0f 4f ee                  	cmovgl	%esi, %r13d
; 		if (p > INT_MAX-pl) goto overflow;
  402bc5: b8 ff ff ff 7f               	movl	$2147483647, %eax
  402bca: 29 e8                        	subl	%ebp, %eax
  402bcc: 41 39 c5                     	cmpl	%eax, %r13d
  402bcf: 0f 8f 45 09 00 00            	jg	2373 <printf_core+0x1b18>
; 		if (w < pl+p) w = pl+p;
  402bd5: 41 8d 4c 2d 00               	leal	(%r13,%rbp), %ecx
  402bda: 39 cb                        	cmpl	%ecx, %ebx
  402bdc: 0f 4c d9                     	cmovll	%ecx, %ebx
; 		if (w > INT_MAX-cnt) goto overflow;
  402bdf: 39 d3                        	cmpl	%edx, %ebx
  402be1: 0f 8f 33 09 00 00            	jg	2355 <printf_core+0x1b18>
  402be7: 48 89 74 24 18               	movq	%rsi, 24(%rsp)
  402bec: 44 89 54 24 2c               	movl	%r10d, 44(%rsp)
; 		pad(f, ' ', w, pl+p, fl);
  402bf1: 4c 89 cf                     	movq	%r9, %rdi
  402bf4: be 20 00 00 00               	movl	$32, %esi
  402bf9: 89 5c 24 28                  	movl	%ebx, 40(%rsp)
  402bfd: 89 da                        	movl	%ebx, %edx
  402bff: 89 4c 24 24                  	movl	%ecx, 36(%rsp)
  402c03: 45 89 c6                     	movl	%r8d, %r14d
  402c06: 4c 89 cb                     	movq	%r9, %rbx
  402c09: e8 9f 0b 00 00               	callq	2975 <pad>
  402c0e: 48 89 da                     	movq	%rbx, %rdx
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  402c11: f6 03 20                     	testb	$32, (%rbx)
  402c14: 75 10                        	jne	16 <printf_core+0x1224>
; 		out(f, prefix, pl);
  402c16: 48 63 f5                     	movslq	%ebp, %rsi
  402c19: 48 8b 7c 24 30               	movq	48(%rsp), %rdi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  402c1e: e8 5d 2f 00 00               	callq	12125 <__fwritex>
  402c23: 48 89 da                     	movq	%rbx, %rdx
; 		pad(f, '0', w, pl+p, fl^ZERO_PAD);
  402c26: 45 89 f0                     	movl	%r14d, %r8d
  402c29: 41 81 f0 00 00 01 00         	xorl	$65536, %r8d
  402c30: 48 89 d7                     	movq	%rdx, %rdi
  402c33: be 30 00 00 00               	movl	$48, %esi
  402c38: 8b 54 24 28                  	movl	40(%rsp), %edx
  402c3c: 8b 4c 24 24                  	movl	36(%rsp), %ecx
  402c40: e8 68 0b 00 00               	callq	2920 <pad>
; 		pad(f, '0', p, z-a, 0);
  402c45: 48 89 df                     	movq	%rbx, %rdi
  402c48: be 30 00 00 00               	movl	$48, %esi
  402c4d: 44 89 ea                     	movl	%r13d, %edx
  402c50: 48 8b 6c 24 18               	movq	24(%rsp), %rbp
  402c55: 89 e9                        	movl	%ebp, %ecx
  402c57: 45 31 c0                     	xorl	%r8d, %r8d
  402c5a: e8 4e 0b 00 00               	callq	2894 <pad>
  402c5f: 48 89 da                     	movq	%rbx, %rdx
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  402c62: f6 03 20                     	testb	$32, (%rbx)
  402c65: 75 0e                        	jne	14 <printf_core+0x1273>
  402c67: 4c 89 ff                     	movq	%r15, %rdi
  402c6a: 48 89 ee                     	movq	%rbp, %rsi
  402c6d: e8 0e 2f 00 00               	callq	12046 <__fwritex>
  402c72: 48 89 da                     	movq	%rbx, %rdx
; 		pad(f, ' ', w, pl+p, fl^LEFT_ADJ);
  402c75: 41 81 f6 00 20 00 00         	xorl	$8192, %r14d
  402c7c: 48 89 d7                     	movq	%rdx, %rdi
  402c7f: be 20 00 00 00               	movl	$32, %esi
  402c84: 8b 6c 24 28                  	movl	40(%rsp), %ebp
  402c88: 89 ea                        	movl	%ebp, %edx
  402c8a: 8b 4c 24 24                  	movl	36(%rsp), %ecx
  402c8e: 45 89 f0                     	movl	%r14d, %r8d
  402c91: e8 17 0b 00 00               	callq	2839 <pad>
  402c96: 49 89 d9                     	movq	%rbx, %r9
  402c99: 41 89 ed                     	movl	%ebp, %r13d
  402c9c: 44 8b 54 24 2c               	movl	44(%rsp), %r10d
  402ca1: e9 ad ed ff ff               	jmp	-4691 <printf_core+0x51>
  402ca6: 4c 8b 74 24 18               	movq	24(%rsp), %r14
; 			if (i > INT_MAX) goto overflow;
  402cab: 49 81 ff ff ff ff 7f         	cmpq	$2147483647, %r15
  402cb2: 8b 5c 24 28                  	movl	40(%rsp), %ebx
  402cb6: 76 08                        	jbe	8 <printf_core+0x12be>
  402cb8: e9 5d 08 00 00               	jmp	2141 <printf_core+0x1b18>
  402cbd: 45 31 ff                     	xorl	%r15d, %r15d
  402cc0: 44 89 54 24 2c               	movl	%r10d, 44(%rsp)
  402cc5: 4c 89 cd                     	movq	%r9, %rbp
; 			pad(f, ' ', w, p, fl);
  402cc8: 4c 89 cf                     	movq	%r9, %rdi
  402ccb: be 20 00 00 00               	movl	$32, %esi
  402cd0: 89 5c 24 28                  	movl	%ebx, 40(%rsp)
  402cd4: 89 da                        	movl	%ebx, %edx
  402cd6: 44 89 f9                     	movl	%r15d, %ecx
  402cd9: e8 cf 0a 00 00               	callq	2767 <pad>
  402cde: 4c 89 f8                     	movq	%r15, %rax
  402ce1: 4c 89 7c 24 18               	movq	%r15, 24(%rsp)
; 			for (i=0; i<0U+p && *ws && i+(l=wctomb(mb, *ws++))<=p; i+=l)
  402ce6: 4c 89 fb                     	movq	%r15, %rbx
  402ce9: b8 ff ff ff ff               	movl	$4294967295, %eax
  402cee: 48 21 c3                     	andq	%rax, %rbx
  402cf1: 74 46                        	je	70 <printf_core+0x1337>
  402cf3: 4c 63 7c 24 18               	movslq	24(%rsp), %r15
  402cf8: 45 31 ed                     	xorl	%r13d, %r13d
  402cfb: 41 8b 36                     	movl	(%r14), %esi
  402cfe: 85 f6                        	testl	%esi, %esi
  402d00: 74 37                        	je	55 <printf_core+0x1337>
  402d02: 48 8d bc 24 9c 00 00 00      	leaq	156(%rsp), %rdi
  402d0a: e8 05 29 00 00               	callq	10501 <wctomb>
  402d0f: 48 63 f0                     	movslq	%eax, %rsi
  402d12: 49 01 f5                     	addq	%rsi, %r13
  402d15: 4d 39 fd                     	cmpq	%r15, %r13
  402d18: 77 1f                        	ja	31 <printf_core+0x1337>
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  402d1a: f6 45 00 20                  	testb	$32, (%rbp)
  402d1e: 75 10                        	jne	16 <printf_core+0x132e>
  402d20: 48 8d bc 24 9c 00 00 00      	leaq	156(%rsp), %rdi
  402d28: 48 89 ea                     	movq	%rbp, %rdx
  402d2b: e8 50 2e 00 00               	callq	11856 <__fwritex>
  402d30: 49 83 c6 04                  	addq	$4, %r14
; 			for (i=0; i<0U+p && *ws && i+(l=wctomb(mb, *ws++))<=p; i+=l)
  402d34: 49 39 dd                     	cmpq	%rbx, %r13
  402d37: 72 c2                        	jb	-62 <printf_core+0x12f9>
  402d39: 44 8b 44 24 24               	movl	36(%rsp), %r8d
; 			pad(f, ' ', w, p, fl^LEFT_ADJ);
  402d3e: 41 81 f0 00 20 00 00         	xorl	$8192, %r8d
  402d45: 49 89 ee                     	movq	%rbp, %r14
  402d48: 48 89 ef                     	movq	%rbp, %rdi
  402d4b: be 20 00 00 00               	movl	$32, %esi
  402d50: 8b 5c 24 28                  	movl	40(%rsp), %ebx
  402d54: 89 da                        	movl	%ebx, %edx
  402d56: 48 8b 6c 24 18               	movq	24(%rsp), %rbp
  402d5b: 89 e9                        	movl	%ebp, %ecx
  402d5d: e8 4b 0a 00 00               	callq	2635 <pad>
  402d62: 4d 89 f1                     	movq	%r14, %r9
; 			l = w>p ? w : p;
  402d65: 39 eb                        	cmpl	%ebp, %ebx
  402d67: 0f 4c dd                     	cmovll	%ebp, %ebx
  402d6a: 41 89 dd                     	movl	%ebx, %r13d
  402d6d: 44 8b 54 24 2c               	movl	44(%rsp), %r10d
  402d72: e9 dc ec ff ff               	jmp	-4900 <printf_core+0x51>
  402d77: 44 8b 54 24 2c               	movl	44(%rsp), %r10d
; 			*d -= x;
  402d7c: 29 d1                        	subl	%edx, %ecx
  402d7e: 89 0f                        	movl	%ecx, (%rdi)
; 			if (round+small != round) {
  402d80: d8 c1                        	fadd	%st(1), %st
  402d82: df e9                        	fucompi	%st(1), %st
  402d84: dd d8                        	fstp	%st(0)
  402d86: 75 02                        	jne	2 <printf_core+0x1388>
  402d88: 7b 5b                        	jnp	91 <printf_core+0x13e3>
; 				*d = *d + i;
  402d8a: 01 f1                        	addl	%esi, %ecx
  402d8c: 89 0f                        	movl	%ecx, (%rdi)
; 				while (*d > 999999999) {
  402d8e: 81 f9 00 ca 9a 3b            	cmpl	$1000000000, %ecx
  402d94: 0f 82 ee 04 00 00            	jb	1262 <printf_core+0x1886>
  402d9a: 49 81 c1 00 c0 ff ff         	addq	$-16384, %r9
  402da1: 4a 8d 3c 8d 00 00 00 00      	leaq	(,%r9,4), %rdi
  402da9: 48 01 ef                     	addq	%rbp, %rdi
  402dac: 4c 8b 4c 24 18               	movq	24(%rsp), %r9
  402db1: 4c 89 fe                     	movq	%r15, %rsi
; 					*d--=0;
  402db4: c7 47 04 00 00 00 00         	movl	$0, 4(%rdi)
; 					if (d<a) *--a=0;
  402dbb: 48 39 f7                     	cmpq	%rsi, %rdi
  402dbe: 73 0b                        	jae	11 <printf_core+0x13c9>
  402dc0: c7 46 fc 00 00 00 00         	movl	$0, -4(%rsi)
  402dc7: 48 83 c6 fc                  	addq	$-4, %rsi
; 					(*d)++;
  402dcb: 8b 07                        	movl	(%rdi), %eax
  402dcd: ff c0                        	incl	%eax
  402dcf: 89 07                        	movl	%eax, (%rdi)
; 				while (*d > 999999999) {
  402dd1: 48 83 c7 fc                  	addq	$-4, %rdi
  402dd5: 3d ff c9 9a 3b               	cmpl	$999999999, %eax
  402dda: 77 d8                        	ja	-40 <printf_core+0x13b2>
; 				for (i=10, e=9*(r-a); *a>=i; i*=10, e++);
  402ddc: 48 83 c7 04                  	addq	$4, %rdi
  402de0: e9 ab 04 00 00               	jmp	1195 <printf_core+0x188e>
  402de5: 4c 8b 4c 24 18               	movq	24(%rsp), %r9
  402dea: 4c 89 fe                     	movq	%r15, %rsi
; 		if (z>d+1) z=d+1;
  402ded: 48 83 c7 04                  	addq	$4, %rdi
  402df1: 48 39 fb                     	cmpq	%rdi, %rbx
  402df4: 48 0f 47 df                  	cmovaq	%rdi, %rbx
  402df8: 4c 89 ef                     	movq	%r13, %rdi
  402dfb: 4c 8b 7c 24 48               	movq	72(%rsp), %r15
  402e00: 48 89 dd                     	movq	%rbx, %rbp
; 	for (; z>a && !z[-1]; z--);
  402e03: 48 39 f3                     	cmpq	%rsi, %rbx
  402e06: 76 0f                        	jbe	15 <printf_core+0x1415>
  402e08: 48 8d 5d fc                  	leaq	-4(%rbp), %rbx
  402e0c: 83 7d fc 00                  	cmpl	$0, -4(%rbp)
  402e10: 74 ee                        	je	-18 <printf_core+0x13fe>
  402e12: 41 b5 01                     	movb	$1, %r13b
  402e15: eb 03                        	jmp	3 <printf_core+0x1418>
  402e17: 45 31 ed                     	xorl	%r13d, %r13d
; 	j = p - ((t|32)!='f')*e - ((t|32)=='g' && p);
  402e1a: 41 83 fe 67                  	cmpl	$103, %r14d
  402e1e: 48 89 74 24 50               	movq	%rsi, 80(%rsp)
  402e23: 44 89 ac 24 c4 00 00 00      	movl	%r13d, 196(%rsp)
; 	if ((t|32)=='g') {
  402e2b: 0f 85 c3 00 00 00            	jne	195 <printf_core+0x14f2>
; 	j = p - ((t|32)!='f')*e - ((t|32)=='g' && p);
  402e31: 85 ff                        	testl	%edi, %edi
; 		if (!p) p++;
  402e33: 89 f8                        	movl	%edi, %eax
  402e35: b9 01 00 00 00               	movl	$1, %ecx
  402e3a: 0f 44 c1                     	cmovel	%ecx, %eax
; 		if (p>e && e>=-4) {
  402e3d: 44 39 d8                     	cmpl	%r11d, %eax
  402e40: 0f 9f c1                     	setg	%cl
  402e43: 41 83 fb fb                  	cmpl	$-5, %r11d
  402e47: 0f 9f c2                     	setg	%dl
  402e4a: 20 ca                        	andb	%cl, %dl
  402e4c: 44 89 df                     	movl	%r11d, %edi
  402e4f: be ff ff ff ff               	movl	$4294967295, %esi
  402e54: 31 f7                        	xorl	%esi, %edi
  402e56: 0f b6 ca                     	movzbl	%dl, %ecx
  402e59: 46 8d 3c 39                  	leal	(%rcx,%r15), %r15d
  402e5d: 41 83 c7 fe                  	addl	$-2, %r15d
  402e61: 84 c9                        	testb	%cl, %cl
  402e63: 0f 44 fe                     	cmovel	%esi, %edi
  402e66: 01 c7                        	addl	%eax, %edi
; 		if (!(fl&ALT_FORM)) {
  402e68: 44 89 c3                     	movl	%r8d, %ebx
  402e6b: 83 e3 08                     	andl	$8, %ebx
  402e6e: 4c 89 7c 24 48               	movq	%r15, 72(%rsp)
  402e73: 0f 85 81 00 00 00            	jne	129 <printf_core+0x14f8>
  402e79: 48 89 fb                     	movq	%rdi, %rbx
  402e7c: be 09 00 00 00               	movl	$9, %esi
; 			if (z>a && z[-1]) for (i=10, j=0; z[-1]%i==0; i*=10, j++);
  402e81: 45 84 ed                     	testb	%r13b, %r13b
  402e84: 74 30                        	je	48 <printf_core+0x14b4>
  402e86: 8b 4d fc                     	movl	-4(%rbp), %ecx
  402e89: 85 c9                        	testl	%ecx, %ecx
  402e8b: 74 29                        	je	41 <printf_core+0x14b4>
  402e8d: 69 c1 cd cc cc cc            	imull	$3435973837, %ecx, %eax
  402e93: d1 c8                        	rorl	%eax
  402e95: 31 f6                        	xorl	%esi, %esi
  402e97: 3d 99 99 99 19               	cmpl	$429496729, %eax
  402e9c: 77 18                        	ja	24 <printf_core+0x14b4>
  402e9e: 31 f6                        	xorl	%esi, %esi
  402ea0: bf 0a 00 00 00               	movl	$10, %edi
  402ea5: 01 ff                        	addl	%edi, %edi
  402ea7: 8d 3c bf                     	leal	(%rdi,%rdi,4), %edi
  402eaa: ff c6                        	incl	%esi
  402eac: 89 c8                        	movl	%ecx, %eax
  402eae: 31 d2                        	xorl	%edx, %edx
  402eb0: f7 f7                        	divl	%edi
  402eb2: 85 d2                        	testl	%edx, %edx
  402eb4: 74 ef                        	je	-17 <printf_core+0x14a3>
; 			if ((t|32)=='f')
  402eb6: 44 89 fa                     	movl	%r15d, %edx
  402eb9: 83 ca 20                     	orl	$32, %edx
  402ebc: 48 89 e8                     	movq	%rbp, %rax
  402ebf: 48 2b 44 24 30               	subq	48(%rsp), %rax
  402ec4: 48 c1 f8 02                  	sarq	$2, %rax
  402ec8: 48 89 df                     	movq	%rbx, %rdi
  402ecb: 48 63 ff                     	movslq	%edi, %rdi
  402ece: 48 8d 04 c0                  	leaq	(%rax,%rax,8), %rax
  402ed2: 48 83 c0 f7                  	addq	$-9, %rax
; 				p = MIN(p,MAX(0,9*(z-r-1)-j));
  402ed6: 89 f1                        	movl	%esi, %ecx
; 			if ((t|32)=='f')
  402ed8: 83 fa 66                     	cmpl	$102, %edx
  402edb: 74 06                        	je	6 <printf_core+0x14e1>
; 				p = MIN(p,MAX(0,9*(z-r-1)+e-j));
  402edd: 49 63 d3                     	movslq	%r11d, %rdx
  402ee0: 48 01 d0                     	addq	%rdx, %rax
  402ee3: 31 db                        	xorl	%ebx, %ebx
  402ee5: 48 29 c8                     	subq	%rcx, %rax
  402ee8: 48 0f 48 c3                  	cmovsq	%rbx, %rax
  402eec: 48 39 f8                     	cmpq	%rdi, %rax
  402eef: 0f 4e f8                     	cmovlel	%eax, %edi
  402ef2: eb 06                        	jmp	6 <printf_core+0x14f8>
; 	if (p > INT_MAX-1-(p || (fl&ALT_FORM)))
  402ef4: 44 89 c3                     	movl	%r8d, %ebx
  402ef7: 83 e3 08                     	andl	$8, %ebx
  402efa: 31 c0                        	xorl	%eax, %eax
  402efc: 89 fa                        	movl	%edi, %edx
  402efe: 09 da                        	orl	%ebx, %edx
  402f00: 0f 95 c0                     	setne	%al
  402f03: b9 fe ff ff 7f               	movl	$2147483646, %ecx
  402f08: 29 c1                        	subl	%eax, %ecx
  402f0a: 41 bd ff ff ff ff            	movl	$4294967295, %r13d
  402f10: 39 cf                        	cmpl	%ecx, %edi
  402f12: 4c 8b 74 24 30               	movq	48(%rsp), %r14
  402f17: 0f 8f f4 05 00 00            	jg	1524 <printf_core+0x1b0f>
  402f1d: b8 01 00 00 00               	movl	$1, %eax
; 	l = 1 + p + (p || (fl&ALT_FORM));
  402f22: 39 c2                        	cmpl	%eax, %edx
  402f24: 89 fe                        	movl	%edi, %esi
  402f26: 83 de ff                     	sbbl	$-1, %esi
  402f29: 01 c6                        	addl	%eax, %esi
  402f2b: 48 8b 44 24 48               	movq	72(%rsp), %rax
; 	if ((t|32)=='f') {
  402f30: 89 c1                        	movl	%eax, %ecx
  402f32: 83 c9 20                     	orl	$32, %ecx
  402f35: 83 f9 66                     	cmpl	$102, %ecx
  402f38: 75 37                        	jne	55 <printf_core+0x156f>
; 		if (e > INT_MAX-l) return -1;
  402f3a: b8 ff ff ff 7f               	movl	$2147483647, %eax
  402f3f: 29 f0                        	subl	%esi, %eax
  402f41: 41 39 c3                     	cmpl	%eax, %r11d
  402f44: 0f 8f c7 05 00 00            	jg	1479 <printf_core+0x1b0f>
  402f4a: 89 8c 24 98 00 00 00         	movl	%ecx, 152(%rsp)
  402f51: 89 94 24 94 00 00 00         	movl	%edx, 148(%rsp)
  402f58: 48 89 ac 24 a0 00 00 00      	movq	%rbp, 160(%rsp)
; 		if (e>0) l+=e;
  402f60: 45 85 db                     	testl	%r11d, %r11d
  402f63: b8 00 00 00 00               	movl	$0, %eax
  402f68: 44 0f 48 d8                  	cmovsl	%eax, %r11d
  402f6c: e9 e9 00 00 00               	jmp	233 <printf_core+0x1658>
  402f71: 89 8c 24 98 00 00 00         	movl	%ecx, 152(%rsp)
  402f78: 89 94 24 94 00 00 00         	movl	%edx, 148(%rsp)
  402f7f: 48 89 ac 24 a0 00 00 00      	movq	%rbp, 160(%rsp)
; 		estr=fmt_u(e<0 ? -e : e, ebuf);
  402f87: 44 89 d8                     	movl	%r11d, %eax
  402f8a: f7 d8                        	negl	%eax
  402f8c: 41 0f 4c c3                  	cmovll	%r11d, %eax
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  402f90: 85 c0                        	testl	%eax, %eax
  402f92: 74 5d                        	je	93 <printf_core+0x15ef>
  402f94: 48 89 9c 24 b8 00 00 00      	movq	%rbx, 184(%rsp)
  402f9c: 4d 89 de                     	movq	%r11, %r14
  402f9f: 49 89 fb                     	movq	%rdi, %r11
; 		estr=fmt_u(e<0 ? -e : e, ebuf);
  402fa2: 89 c1                        	movl	%eax, %ecx
  402fa4: 48 8d ac 24 00 01 00 00      	leaq	256(%rsp), %rbp
  402fac: 49 89 ef                     	movq	%rbp, %r15
  402faf: 48 bb cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rbx
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  402fb9: 48 89 c8                     	movq	%rcx, %rax
  402fbc: 48 f7 e3                     	mulq	%rbx
  402fbf: 48 c1 ea 03                  	shrq	$3, %rdx
  402fc3: 8d 04 12                     	leal	(%rdx,%rdx), %eax
  402fc6: 8d 04 80                     	leal	(%rax,%rax,4), %eax
  402fc9: 89 cf                        	movl	%ecx, %edi
  402fcb: 29 c7                        	subl	%eax, %edi
  402fcd: 40 80 cf 30                  	orb	$48, %dil
  402fd1: 41 88 7f ff                  	movb	%dil, -1(%r15)
  402fd5: 49 ff cf                     	decq	%r15
  402fd8: 48 83 f9 09                  	cmpq	$9, %rcx
  402fdc: 48 89 d1                     	movq	%rdx, %rcx
  402fdf: 77 d8                        	ja	-40 <printf_core+0x15b7>
  402fe1: 4c 89 df                     	movq	%r11, %rdi
  402fe4: 4d 89 f3                     	movq	%r14, %r11
  402fe7: 48 8b 9c 24 b8 00 00 00      	movq	184(%rsp), %rbx
  402fef: eb 0b                        	jmp	11 <printf_core+0x15fa>
  402ff1: 48 8d ac 24 00 01 00 00      	leaq	256(%rsp), %rbp
; 		while(ebuf-estr<2) *--estr='0';
  402ff9: 49 89 ef                     	movq	%rbp, %r15
  402ffc: 48 89 e8                     	movq	%rbp, %rax
  402fff: 4c 29 f8                     	subq	%r15, %rax
  403002: 48 83 f8 01                  	cmpq	$1, %rax
  403006: 7f 19                        	jg	25 <printf_core+0x161f>
  403008: 49 ff cf                     	decq	%r15
  40300b: 41 c6 07 30                  	movb	$48, (%r15)
  40300f: 48 89 e8                     	movq	%rbp, %rax
  403012: 4c 29 f8                     	subq	%r15, %rax
  403015: 49 ff cf                     	decq	%r15
  403018: 48 83 f8 02                  	cmpq	$2, %rax
  40301c: 7c ed                        	jl	-19 <printf_core+0x1609>
; 		*--estr = (e<0 ? '-' : '+');
  40301e: 49 ff c7                     	incq	%r15
  403021: 41 c1 eb 1f                  	shrl	$31, %r11d
  403025: 45 00 db                     	addb	%r11b, %r11b
  403028: 41 80 c3 2b                  	addb	$43, %r11b
  40302c: 45 88 5f ff                  	movb	%r11b, -1(%r15)
  403030: 48 8b 44 24 48               	movq	72(%rsp), %rax
; 		*--estr = t;
  403035: 41 88 47 fe                  	movb	%al, -2(%r15)
  403039: 49 83 c7 fe                  	addq	$-2, %r15
; 		if (ebuf-estr > INT_MAX-l) return -1;
  40303d: 49 89 eb                     	movq	%rbp, %r11
  403040: 4d 29 fb                     	subq	%r15, %r11
  403043: b8 ff ff ff 7f               	movl	$2147483647, %eax
  403048: 29 f0                        	subl	%esi, %eax
  40304a: 48 98                        	cltq
  40304c: 49 39 c3                     	cmpq	%rax, %r11
  40304f: 0f 8f bc 04 00 00            	jg	1212 <printf_core+0x1b0f>
  403055: 4c 8b 74 24 30               	movq	48(%rsp), %r14
  40305a: 41 01 f3                     	addl	%esi, %r11d
  40305d: 48 8b 8c 24 80 00 00 00      	movq	128(%rsp), %rcx
; 	if (l > INT_MAX-pl) return -1;
  403065: 89 c8                        	movl	%ecx, %eax
  403067: 35 ff ff ff 7f               	xorl	$2147483647, %eax
  40306c: 41 39 c3                     	cmpl	%eax, %r11d
  40306f: 0f 8f 9c 04 00 00            	jg	1180 <printf_core+0x1b0f>
  403075: 48 89 7c 24 48               	movq	%rdi, 72(%rsp)
; 	pad(f, ' ', w, pl+l, fl);
  40307a: 41 01 cb                     	addl	%ecx, %r11d
  40307d: 4c 89 cf                     	movq	%r9, %rdi
  403080: 49 89 cd                     	movq	%rcx, %r13
  403083: be 20 00 00 00               	movl	$32, %esi
  403088: 8b 6c 24 28                  	movl	40(%rsp), %ebp
  40308c: 89 ea                        	movl	%ebp, %edx
  40308e: 4c 89 9c 24 00 01 00 00      	movq	%r11, 256(%rsp)
  403096: 44 89 d9                     	movl	%r11d, %ecx
  403099: e8 0f 07 00 00               	callq	1807 <pad>
  40309e: 48 8b 54 24 18               	movq	24(%rsp), %rdx
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4030a3: f6 02 20                     	testb	$32, (%rdx)
  4030a6: 75 12                        	jne	18 <printf_core+0x16b8>
; 	out(f, prefix, pl);
  4030a8: 44 89 ee                     	movl	%r13d, %esi
  4030ab: 48 8b 7c 24 70               	movq	112(%rsp), %rdi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4030b0: e8 cb 2a 00 00               	callq	10955 <__fwritex>
  4030b5: 48 8b 54 24 18               	movq	24(%rsp), %rdx
  4030ba: 44 8b 44 24 24               	movl	36(%rsp), %r8d
; 	pad(f, '0', w, pl+l, fl^ZERO_PAD);
  4030bf: 41 81 f0 00 00 01 00         	xorl	$65536, %r8d
  4030c6: 48 89 d7                     	movq	%rdx, %rdi
  4030c9: be 30 00 00 00               	movl	$48, %esi
  4030ce: 89 ea                        	movl	%ebp, %edx
  4030d0: 48 8b 8c 24 00 01 00 00      	movq	256(%rsp), %rcx
  4030d8: e8 d0 06 00 00               	callq	1744 <pad>
; 	if ((t|32)=='f') {
  4030dd: 83 bc 24 98 00 00 00 66      	cmpl	$102, 152(%rsp)
  4030e5: 8b 84 24 c4 00 00 00         	movl	196(%rsp), %eax
; 	if ((t|32)=='f') {
  4030ec: 0f 85 cd 01 00 00            	jne	461 <printf_core+0x18bd>
  4030f2: 4c 8b 6c 24 50               	movq	80(%rsp), %r13
; 		if (a>r) a=r;
  4030f7: 4d 39 f5                     	cmpq	%r14, %r13
  4030fa: 4d 0f 47 ee                  	cmovaq	%r14, %r13
  4030fe: 4d 89 ef                     	movq	%r13, %r15
  403101: 4c 8b 44 24 18               	movq	24(%rsp), %r8
  403106: 48 8d 9c 24 d9 00 00 00      	leaq	217(%rsp), %rbx
  40310e: 49 89 de                     	movq	%rbx, %r14
  403111: 48 8d 9c 24 d0 00 00 00      	leaq	208(%rsp), %rbx
  403119: 48 bd cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rbp
; 			char *s = fmt_u(*d, buf+9);
  403123: 41 8b 0f                     	movl	(%r15), %ecx
  403126: 31 f6                        	xorl	%esi, %esi
  403128: 48 85 c9                     	testq	%rcx, %rcx
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  40312b: 74 2c                        	je	44 <printf_core+0x1757>
  40312d: 48 89 c8                     	movq	%rcx, %rax
  403130: 48 f7 e5                     	mulq	%rbp
  403133: 48 c1 ea 03                  	shrq	$3, %rdx
  403137: 8d 04 12                     	leal	(%rdx,%rdx), %eax
  40313a: 8d 04 80                     	leal	(%rax,%rax,4), %eax
  40313d: 89 cf                        	movl	%ecx, %edi
  40313f: 29 c7                        	subl	%eax, %edi
  403141: 40 80 cf 30                  	orb	$48, %dil
  403145: 40 88 bc 34 d8 00 00 00      	movb	%dil, 216(%rsp,%rsi)
  40314d: 48 ff ce                     	decq	%rsi
  403150: 48 83 f9 09                  	cmpq	$9, %rcx
  403154: 48 89 d1                     	movq	%rdx, %rcx
  403157: 77 d4                        	ja	-44 <printf_core+0x172b>
  403159: 49 8d 3c 36                  	leaq	(%r14,%rsi), %rdi
; 			if (d!=a) while (s>buf) *--s='0';
  40315d: 4d 39 ef                     	cmpq	%r13, %r15
  403160: 74 16                        	je	22 <printf_core+0x1776>
  403162: 48 39 df                     	cmpq	%rbx, %rdi
  403165: 76 1d                        	jbe	29 <printf_core+0x1782>
  403167: c6 47 ff 30                  	movb	$48, -1(%rdi)
  40316b: 48 ff cf                     	decq	%rdi
  40316e: 48 39 df                     	cmpq	%rbx, %rdi
  403171: 77 f4                        	ja	-12 <printf_core+0x1765>
  403173: 48 89 df                     	movq	%rbx, %rdi
  403176: eb 0c                        	jmp	12 <printf_core+0x1782>
; 			else if (s==buf+9) *--s='0';
  403178: 48 85 f6                     	testq	%rsi, %rsi
  40317b: 75 07                        	jne	7 <printf_core+0x1782>
  40317d: c6 47 ff 30                  	movb	$48, -1(%rdi)
  403181: 48 ff cf                     	decq	%rdi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  403184: 41 f6 00 20                  	testb	$32, (%r8)
  403188: 75 1d                        	jne	29 <printf_core+0x17a5>
; 			out(f, s, buf+9-s);
  40318a: 4c 89 f6                     	movq	%r14, %rsi
  40318d: 48 29 fe                     	subq	%rdi, %rsi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  403190: 4c 89 c2                     	movq	%r8, %rdx
  403193: e8 e8 29 00 00               	callq	10728 <__fwritex>
  403198: 48 bd cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rbp
  4031a2: 4c 8b 44 24 18               	movq	24(%rsp), %r8
; 		for (d=a; d<=r; d++) {
  4031a7: 49 83 c7 04                  	addq	$4, %r15
  4031ab: 4c 3b 7c 24 30               	cmpq	48(%rsp), %r15
  4031b0: 0f 86 6d ff ff ff            	jbe	-147 <printf_core+0x1721>
; 		if (p || (fl&ALT_FORM)) out(f, ".", 1);
  4031b6: 83 bc 24 94 00 00 00 00      	cmpl	$0, 148(%rsp)
  4031be: 74 27                        	je	39 <printf_core+0x17e5>
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4031c0: 41 f6 00 20                  	testb	$32, (%r8)
  4031c4: 75 21                        	jne	33 <printf_core+0x17e5>
  4031c6: bf f3 70 40 00               	movl	$4223219, %edi
  4031cb: be 01 00 00 00               	movl	$1, %esi
  4031d0: 4c 89 c2                     	movq	%r8, %rdx
  4031d3: e8 a8 29 00 00               	callq	10664 <__fwritex>
  4031d8: 48 bd cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rbp
  4031e2: 4c 8b 44 24 18               	movq	24(%rsp), %r8
  4031e7: 4c 8b 6c 24 48               	movq	72(%rsp), %r13
; 		for (; d<z && p>0; d++, p-=9) {
  4031ec: 45 85 ed                     	testl	%r13d, %r13d
  4031ef: 0f 8e 5c 02 00 00            	jle	604 <printf_core+0x1a4f>
  4031f5: 4c 3b bc 24 a0 00 00 00      	cmpq	160(%rsp), %r15
  4031fd: 0f 83 4e 02 00 00            	jae	590 <printf_core+0x1a4f>
; 			char *s = fmt_u(*d, buf+9);
  403203: 41 8b 0f                     	movl	(%r15), %ecx
  403206: 4c 89 f7                     	movq	%r14, %rdi
  403209: 48 85 c9                     	testq	%rcx, %rcx
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  40320c: 74 2d                        	je	45 <printf_core+0x1839>
  40320e: 4c 89 f7                     	movq	%r14, %rdi
  403211: 48 89 c8                     	movq	%rcx, %rax
  403214: 48 f7 e5                     	mulq	%rbp
  403217: 48 c1 ea 03                  	shrq	$3, %rdx
  40321b: 8d 04 12                     	leal	(%rdx,%rdx), %eax
  40321e: 8d 04 80                     	leal	(%rax,%rax,4), %eax
  403221: 89 ce                        	movl	%ecx, %esi
  403223: 29 c6                        	subl	%eax, %esi
  403225: 40 80 ce 30                  	orb	$48, %sil
  403229: 40 88 77 ff                  	movb	%sil, -1(%rdi)
  40322d: 48 ff cf                     	decq	%rdi
  403230: 48 83 f9 09                  	cmpq	$9, %rcx
  403234: 48 89 d1                     	movq	%rdx, %rcx
  403237: 77 d8                        	ja	-40 <printf_core+0x180f>
  403239: eb 07                        	jmp	7 <printf_core+0x1840>
; 			while (s>buf) *--s='0';
  40323b: c6 47 ff 30                  	movb	$48, -1(%rdi)
  40323f: 48 ff cf                     	decq	%rdi
  403242: 48 39 df                     	cmpq	%rbx, %rdi
  403245: 77 f4                        	ja	-12 <printf_core+0x1839>
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  403247: 41 f6 00 20                  	testb	$32, (%r8)
  40324b: 75 28                        	jne	40 <printf_core+0x1873>
  40324d: 4c 89 e9                     	movq	%r13, %rcx
; 			out(f, s, MIN(9,p));
  403250: 83 f9 0a                     	cmpl	$10, %ecx
  403253: b8 09 00 00 00               	movl	$9, %eax
  403258: 0f 4c c1                     	cmovll	%ecx, %eax
  40325b: 48 63 f0                     	movslq	%eax, %rsi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  40325e: 4c 89 c2                     	movq	%r8, %rdx
  403261: e8 1a 29 00 00               	callq	10522 <__fwritex>
  403266: 48 bd cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rbp
  403270: 4c 8b 44 24 18               	movq	24(%rsp), %r8
; 		for (; d<z && p>0; d++, p-=9) {
  403275: 41 83 c5 f7                  	addl	$-9, %r13d
  403279: 0f 8e d2 01 00 00            	jle	466 <printf_core+0x1a4f>
  40327f: 49 83 c7 04                  	addq	$4, %r15
  403283: e9 6d ff ff ff               	jmp	-147 <printf_core+0x17f3>
  403288: 4c 8b 4c 24 18               	movq	24(%rsp), %r9
  40328d: 4c 89 fe                     	movq	%r15, %rsi
; 				for (i=10, e=9*(r-a); *a>=i; i*=10, e++);
  403290: 48 89 e8                     	movq	%rbp, %rax
  403293: 48 29 f0                     	subq	%rsi, %rax
  403296: 48 c1 e8 02                  	shrq	$2, %rax
  40329a: 44 8d 1c c0                  	leal	(%rax,%rax,8), %r11d
  40329e: 8b 06                        	movl	(%rsi), %eax
  4032a0: 83 f8 0a                     	cmpl	$10, %eax
  4032a3: 0f 82 44 fb ff ff            	jb	-1212 <printf_core+0x13eb>
  4032a9: b9 0a 00 00 00               	movl	$10, %ecx
  4032ae: 01 c9                        	addl	%ecx, %ecx
  4032b0: 8d 0c 89                     	leal	(%rcx,%rcx,4), %ecx
  4032b3: 41 ff c3                     	incl	%r11d
  4032b6: 39 c8                        	cmpl	%ecx, %eax
  4032b8: 73 f4                        	jae	-12 <printf_core+0x18ac>
  4032ba: e9 2e fb ff ff               	jmp	-1234 <printf_core+0x13eb>
  4032bf: 48 89 9c 24 b8 00 00 00      	movq	%rbx, 184(%rsp)
  4032c7: 48 8b 74 24 50               	movq	80(%rsp), %rsi
; 		if (z<=a) z=a+1;
  4032cc: 48 8d 4e 04                  	leaq	4(%rsi), %rcx
  4032d0: 84 c0                        	testb	%al, %al
  4032d2: 48 0f 45 8c 24 a0 00 00 00   	cmovneq	160(%rsp), %rcx
  4032db: 48 89 4c 24 30               	movq	%rcx, 48(%rsp)
  4032e0: 48 8b 54 24 48               	movq	72(%rsp), %rdx
; 		for (d=a; d<z && p>=0; d++) {
  4032e5: 85 d2                        	testl	%edx, %edx
  4032e7: 4c 8d b4 24 d9 00 00 00      	leaq	217(%rsp), %r14
  4032ef: 48 bd cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rbp
  4032f9: 0f 88 98 01 00 00            	js	408 <printf_core+0x1a95>
  4032ff: 49 89 f5                     	movq	%rsi, %r13
  403302: 4c 8b 44 24 18               	movq	24(%rsp), %r8
; 			char *s = fmt_u(*d, buf+9);
  403307: 41 8b 4d 00                  	movl	(%r13), %ecx
  40330b: 4c 89 f3                     	movq	%r14, %rbx
  40330e: 48 85 c9                     	testq	%rcx, %rcx
; 	for (y=x;           y; y/=10) *--s = '0' + y%10;
  403311: 74 40                        	je	64 <printf_core+0x1951>
  403313: 49 89 d1                     	movq	%rdx, %r9
  403316: 31 f6                        	xorl	%esi, %esi
  403318: 4c 89 f3                     	movq	%r14, %rbx
  40331b: 48 89 c8                     	movq	%rcx, %rax
  40331e: 48 f7 e5                     	mulq	%rbp
  403321: 48 c1 ea 03                  	shrq	$3, %rdx
  403325: 8d 04 12                     	leal	(%rdx,%rdx), %eax
  403328: 8d 04 80                     	leal	(%rax,%rax,4), %eax
  40332b: 89 cf                        	movl	%ecx, %edi
  40332d: 29 c7                        	subl	%eax, %edi
  40332f: 40 80 cf 30                  	orb	$48, %dil
  403333: 40 88 7b ff                  	movb	%dil, -1(%rbx)
  403337: 48 ff cb                     	decq	%rbx
  40333a: 48 ff c6                     	incq	%rsi
  40333d: 48 83 f9 09                  	cmpq	$9, %rcx
  403341: 48 89 d1                     	movq	%rdx, %rcx
  403344: 77 d5                        	ja	-43 <printf_core+0x1919>
; 			if (s==buf+9) *--s='0';
  403346: 48 85 f6                     	testq	%rsi, %rsi
  403349: 4c 89 ca                     	movq	%r9, %rdx
  40334c: 48 8b 74 24 50               	movq	80(%rsp), %rsi
  403351: 75 07                        	jne	7 <printf_core+0x1958>
  403353: c6 43 ff 30                  	movb	$48, -1(%rbx)
  403357: 48 ff cb                     	decq	%rbx
; 			if (d!=a) while (s>buf) *--s='0';
  40335a: 49 39 f5                     	cmpq	%rsi, %r13
  40335d: 74 27                        	je	39 <printf_core+0x1984>
  40335f: 48 8d 84 24 d0 00 00 00      	leaq	208(%rsp), %rax
  403367: 48 39 c3                     	cmpq	%rax, %rbx
  40336a: 0f 86 89 00 00 00            	jbe	137 <printf_core+0x19f7>
  403370: 48 8d 84 24 d0 00 00 00      	leaq	208(%rsp), %rax
  403378: c6 43 ff 30                  	movb	$48, -1(%rbx)
  40337c: 48 ff cb                     	decq	%rbx
  40337f: 48 39 c3                     	cmpq	%rax, %rbx
  403382: 77 f4                        	ja	-12 <printf_core+0x1976>
  403384: eb 73                        	jmp	115 <printf_core+0x19f7>
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  403386: 41 f6 00 20                  	testb	$32, (%r8)
  40338a: 75 2a                        	jne	42 <printf_core+0x19b4>
  40338c: be 01 00 00 00               	movl	$1, %esi
  403391: 48 89 d5                     	movq	%rdx, %rbp
  403394: 48 89 df                     	movq	%rbx, %rdi
  403397: 4c 89 c2                     	movq	%r8, %rdx
  40339a: e8 e1 27 00 00               	callq	10209 <__fwritex>
  40339f: 48 8b 74 24 50               	movq	80(%rsp), %rsi
  4033a4: 48 89 ea                     	movq	%rbp, %rdx
  4033a7: 48 bd cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rbp
  4033b1: 4c 8b 44 24 18               	movq	24(%rsp), %r8
  4033b6: 48 ff c3                     	incq	%rbx
  4033b9: 83 bc 24 b8 00 00 00 00      	cmpl	$0, 184(%rsp)
; 				if (p>0||(fl&ALT_FORM)) out(f, ".", 1);
  4033c1: 75 04                        	jne	4 <printf_core+0x19c5>
  4033c3: 85 d2                        	testl	%edx, %edx
  4033c5: 7e 32                        	jle	50 <printf_core+0x19f7>
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4033c7: 41 f6 00 20                  	testb	$32, (%r8)
  4033cb: 75 2c                        	jne	44 <printf_core+0x19f7>
  4033cd: 48 89 d5                     	movq	%rdx, %rbp
  4033d0: bf f3 70 40 00               	movl	$4223219, %edi
  4033d5: be 01 00 00 00               	movl	$1, %esi
  4033da: 4c 89 c2                     	movq	%r8, %rdx
  4033dd: e8 9e 27 00 00               	callq	10142 <__fwritex>
  4033e2: 48 8b 74 24 50               	movq	80(%rsp), %rsi
  4033e7: 48 89 ea                     	movq	%rbp, %rdx
  4033ea: 48 bd cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rbp
  4033f4: 4c 8b 44 24 18               	movq	24(%rsp), %r8
; 			out(f, s, MIN(buf+9-s, p));
  4033f9: 49 29 de                     	subq	%rbx, %r14
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4033fc: 41 f6 00 20                  	testb	$32, (%r8)
  403400: 75 2f                        	jne	47 <printf_core+0x1a2f>
; 			out(f, s, MIN(buf+9-s, p));
  403402: 48 63 f2                     	movslq	%edx, %rsi
  403405: 49 39 f6                     	cmpq	%rsi, %r14
  403408: 49 0f 4e f6                  	cmovleq	%r14, %rsi
  40340c: 48 89 d5                     	movq	%rdx, %rbp
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  40340f: 48 89 df                     	movq	%rbx, %rdi
  403412: 4c 89 c2                     	movq	%r8, %rdx
  403415: e8 66 27 00 00               	callq	10086 <__fwritex>
  40341a: 48 8b 74 24 50               	movq	80(%rsp), %rsi
  40341f: 48 89 ea                     	movq	%rbp, %rdx
  403422: 48 bd cd cc cc cc cc cc cc cc	movabsq	$-3689348814741910323, %rbp
  40342c: 4c 8b 44 24 18               	movq	24(%rsp), %r8
; 			p -= buf+9-s;
  403431: 44 29 f2                     	subl	%r14d, %edx
; 		for (d=a; d<z && p>=0; d++) {
  403434: 49 83 c5 04                  	addq	$4, %r13
  403438: 4c 3b 6c 24 30               	cmpq	48(%rsp), %r13
  40343d: 73 5d                        	jae	93 <printf_core+0x1a9a>
  40343f: 85 d2                        	testl	%edx, %edx
  403441: 4c 8d b4 24 d9 00 00 00      	leaq	217(%rsp), %r14
  403449: 0f 89 b8 fe ff ff            	jns	-328 <printf_core+0x1905>
  40344f: eb 4b                        	jmp	75 <printf_core+0x1a9a>
; 		pad(f, '0', p+9, 9, 0);
  403451: 41 83 c5 09                  	addl	$9, %r13d
  403455: 4c 89 ea                     	movq	%r13, %rdx
  403458: 4c 89 c7                     	movq	%r8, %rdi
  40345b: be 30 00 00 00               	movl	$48, %esi
  403460: b9 09 00 00 00               	movl	$9, %ecx
  403465: 45 31 c0                     	xorl	%r8d, %r8d
  403468: e8 40 03 00 00               	callq	832 <pad>
  40346d: eb 62                        	jmp	98 <printf_core+0x1acf>
; 			case BARE: *(int *)arg.p = cnt; break;
  40346f: 48 8b 44 24 60               	movq	96(%rsp), %rax
  403474: 44 89 10                     	movl	%r10d, (%rax)
  403477: e9 d7 e5 ff ff               	jmp	-6697 <printf_core+0x51>
; 			case HPRE: *(unsigned short *)arg.p = cnt; break;
  40347c: 48 8b 44 24 60               	movq	96(%rsp), %rax
  403481: 66 44 89 10                  	movw	%r10w, (%rax)
  403485: e9 c9 e5 ff ff               	jmp	-6711 <printf_core+0x51>
; 			case HHPRE: *(unsigned char *)arg.p = cnt; break;
  40348a: 48 8b 44 24 60               	movq	96(%rsp), %rax
  40348f: 44 88 10                     	movb	%r10b, (%rax)
  403492: e9 bc e5 ff ff               	jmp	-6724 <printf_core+0x51>
  403497: 4c 8b 44 24 18               	movq	24(%rsp), %r8
; 		pad(f, '0', p+18, 18, 0);
  40349c: 83 c2 12                     	addl	$18, %edx
  40349f: 4c 89 c7                     	movq	%r8, %rdi
  4034a2: be 30 00 00 00               	movl	$48, %esi
  4034a7: b9 12 00 00 00               	movl	$18, %ecx
  4034ac: 45 31 c0                     	xorl	%r8d, %r8d
  4034af: e8 f9 02 00 00               	callq	761 <pad>
  4034b4: 48 8b 54 24 18               	movq	24(%rsp), %rdx
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4034b9: f6 02 20                     	testb	$32, (%rdx)
  4034bc: 75 18                        	jne	24 <printf_core+0x1ad4>
; 		out(f, estr, ebuf-estr);
  4034be: 48 8d b4 24 00 01 00 00      	leaq	256(%rsp), %rsi
  4034c6: 4c 29 fe                     	subq	%r15, %rsi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  4034c9: 4c 89 ff                     	movq	%r15, %rdi
  4034cc: e8 af 26 00 00               	callq	9903 <__fwritex>
  4034d1: 48 8b 54 24 18               	movq	24(%rsp), %rdx
  4034d6: 44 8b 44 24 24               	movl	36(%rsp), %r8d
; 	pad(f, ' ', w, pl+l, fl^LEFT_ADJ);
  4034db: 41 81 f0 00 20 00 00         	xorl	$8192, %r8d
  4034e2: 48 89 d7                     	movq	%rdx, %rdi
  4034e5: be 20 00 00 00               	movl	$32, %esi
  4034ea: 8b 5c 24 28                  	movl	40(%rsp), %ebx
  4034ee: 89 da                        	movl	%ebx, %edx
  4034f0: 4c 8b ac 24 00 01 00 00      	movq	256(%rsp), %r13
  4034f8: 44 89 e9                     	movl	%r13d, %ecx
  4034fb: e8 ad 02 00 00               	callq	685 <pad>
  403500: 4c 8b 4c 24 18               	movq	24(%rsp), %r9
; 	return MAX(w, pl+l);
  403505: 41 39 dd                     	cmpl	%ebx, %r13d
  403508: 44 0f 4c eb                  	cmovll	%ebx, %r13d
  40350c: 44 8b 54 24 2c               	movl	44(%rsp), %r10d
; 			if (l<0) goto overflow;
  403511: 45 85 ed                     	testl	%r13d, %r13d
  403514: 0f 89 39 e5 ff ff            	jns	-6855 <printf_core+0x51>
; 	errno = EOVERFLOW;
  40351a: e8 75 09 00 00               	callq	2421 <__errno_location>
  40351f: c7 00 4b 00 00 00            	movl	$75, (%rax)
  403525: e9 8f 00 00 00               	jmp	143 <printf_core+0x1bb7>
; 	if (f) return cnt;
  40352a: 4d 85 c9                     	testq	%r9, %r9
  40352d: 0f 85 8c 00 00 00            	jne	140 <printf_core+0x1bbd>
; 	if (!l10n) return 0;
  403533: 83 7c 24 44 00               	cmpl	$0, 68(%rsp)
  403538: 74 49                        	je	73 <printf_core+0x1b81>
  40353a: 48 8b ac 24 a8 00 00 00      	movq	168(%rsp), %rbp
; 	for (i=1; i<=NL_ARGMAX && nl_type[i]; i++)
  403542: 48 83 c5 10                  	addq	$16, %rbp
  403546: bb 01 00 00 00               	movl	$1, %ebx
  40354b: 4c 8b b4 24 88 00 00 00      	movq	136(%rsp), %r14
  403553: 4c 8b bc 24 b0 00 00 00      	movq	176(%rsp), %r15
  40355b: 41 8b 34 9e                  	movl	(%r14,%rbx,4), %esi
  40355f: 85 f6                        	testl	%esi, %esi
  403561: 74 25                        	je	37 <printf_core+0x1b86>
; 		pop_arg(nl_arg+i, nl_type[i], ap);
  403563: 48 89 ef                     	movq	%rbp, %rdi
  403566: 4c 89 fa                     	movq	%r15, %rdx
  403569: e8 66 00 00 00               	callq	102 <pop_arg>
; 	for (i=1; i<=NL_ARGMAX && nl_type[i]; i++)
  40356e: 48 ff c3                     	incq	%rbx
  403571: 48 83 c5 10                  	addq	$16, %rbp
  403575: 48 83 fb 0a                  	cmpq	$10, %rbx
  403579: 75 e0                        	jne	-32 <printf_core+0x1b59>
  40357b: 41 ba 01 00 00 00            	movl	$1, %r10d
  403581: eb 3c                        	jmp	60 <printf_core+0x1bbd>
  403583: 45 31 d2                     	xorl	%r10d, %r10d
  403586: eb 37                        	jmp	55 <printf_core+0x1bbd>
  403588: 41 ba 01 00 00 00            	movl	$1, %r10d
; 	for (; i<=NL_ARGMAX && !nl_type[i]; i++);
  40358e: 48 83 fb 09                  	cmpq	$9, %rbx
  403592: 77 2b                        	ja	43 <printf_core+0x1bbd>
  403594: 41 83 3c 9e 00               	cmpl	$0, (%r14,%rbx,4)
  403599: 75 13                        	jne	19 <printf_core+0x1bac>
  40359b: 48 ff c3                     	incq	%rbx
  40359e: 48 83 fb 0a                  	cmpq	$10, %rbx
  4035a2: 4c 8b b4 24 88 00 00 00      	movq	136(%rsp), %r14
  4035aa: 75 e8                        	jne	-24 <printf_core+0x1b92>
  4035ac: eb 11                        	jmp	17 <printf_core+0x1bbd>
; 	errno = EINVAL;
  4035ae: e8 e1 08 00 00               	callq	2273 <__errno_location>
  4035b3: c7 00 16 00 00 00            	movl	$22, (%rax)
  4035b9: 41 ba ff ff ff ff            	movl	$4294967295, %r10d
; }
  4035bf: 44 89 d0                     	movl	%r10d, %eax
  4035c2: 48 81 c4 18 1e 00 00         	addq	$7704, %rsp
  4035c9: 5b                           	popq	%rbx
  4035ca: 41 5c                        	popq	%r12
  4035cc: 41 5d                        	popq	%r13
  4035ce: 41 5e                        	popq	%r14
  4035d0: 41 5f                        	popq	%r15
  4035d2: 5d                           	popq	%rbp
  4035d3: c3                           	retq

00000000004035d4 pop_arg:
; 	switch (type) {
  4035d4: 83 c6 f7                     	addl	$-9, %esi
  4035d7: 83 fe 11                     	cmpl	$17, %esi
  4035da: 0f 87 b4 01 00 00            	ja	436 <pop_arg+0x1c0>
  4035e0: ff 24 f5 50 6e 40 00         	jmpq	*4222544(,%rsi,8)
  4035e7: 48 63 0a                     	movslq	(%rdx), %rcx
  4035ea: 48 83 f9 28                  	cmpq	$40, %rcx
  4035ee: 77 0e                        	ja	14 <pop_arg+0x2a>
  4035f0: 48 89 c8                     	movq	%rcx, %rax
  4035f3: 48 03 42 10                  	addq	16(%rdx), %rax
  4035f7: 83 c1 08                     	addl	$8, %ecx
  4035fa: 89 0a                        	movl	%ecx, (%rdx)
  4035fc: eb 10                        	jmp	16 <pop_arg+0x3a>
  4035fe: 48 8b 42 08                  	movq	8(%rdx), %rax
  403602: b9 08 00 00 00               	movl	$8, %ecx
  403607: 48 01 c1                     	addq	%rax, %rcx
  40360a: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  40360e: 48 8b 00                     	movq	(%rax), %rax
  403611: 48 89 07                     	movq	%rax, (%rdi)
; }
  403614: c3                           	retq
; 	break; case UINT:	arg->i = va_arg(*ap, unsigned int);
  403615: 48 63 0a                     	movslq	(%rdx), %rcx
  403618: 48 83 f9 28                  	cmpq	$40, %rcx
  40361c: 0f 87 e5 00 00 00            	ja	229 <pop_arg+0x133>
  403622: 48 89 c8                     	movq	%rcx, %rax
  403625: 48 03 42 10                  	addq	16(%rdx), %rax
  403629: 83 c1 08                     	addl	$8, %ecx
  40362c: 89 0a                        	movl	%ecx, (%rdx)
  40362e: e9 e4 00 00 00               	jmp	228 <pop_arg+0x143>
; 	break; case SHORT:	arg->i = (short)va_arg(*ap, int);
  403633: 48 63 0a                     	movslq	(%rdx), %rcx
  403636: 48 83 f9 28                  	cmpq	$40, %rcx
  40363a: 0f 87 de 00 00 00            	ja	222 <pop_arg+0x14a>
  403640: 48 89 c8                     	movq	%rcx, %rax
  403643: 48 03 42 10                  	addq	16(%rdx), %rax
  403647: 83 c1 08                     	addl	$8, %ecx
  40364a: 89 0a                        	movl	%ecx, (%rdx)
  40364c: e9 dd 00 00 00               	jmp	221 <pop_arg+0x15a>
; 	break; case USHORT:	arg->i = (unsigned short)va_arg(*ap, int);
  403651: 48 63 0a                     	movslq	(%rdx), %rcx
  403654: 48 83 f9 28                  	cmpq	$40, %rcx
  403658: 0f 87 d9 00 00 00            	ja	217 <pop_arg+0x163>
  40365e: 48 89 c8                     	movq	%rcx, %rax
  403661: 48 03 42 10                  	addq	16(%rdx), %rax
  403665: 83 c1 08                     	addl	$8, %ecx
  403668: 89 0a                        	movl	%ecx, (%rdx)
  40366a: e9 d8 00 00 00               	jmp	216 <pop_arg+0x173>
; 	break; case CHAR:	arg->i = (signed char)va_arg(*ap, int);
  40366f: 48 63 0a                     	movslq	(%rdx), %rcx
  403672: 48 83 f9 28                  	cmpq	$40, %rcx
  403676: 0f 87 d3 00 00 00            	ja	211 <pop_arg+0x17b>
  40367c: 48 89 c8                     	movq	%rcx, %rax
  40367f: 48 03 42 10                  	addq	16(%rdx), %rax
  403683: 83 c1 08                     	addl	$8, %ecx
  403686: 89 0a                        	movl	%ecx, (%rdx)
  403688: e9 d2 00 00 00               	jmp	210 <pop_arg+0x18b>
; 	break; case UCHAR:	arg->i = (unsigned char)va_arg(*ap, int);
  40368d: 48 63 0a                     	movslq	(%rdx), %rcx
  403690: 48 83 f9 28                  	cmpq	$40, %rcx
  403694: 0f 87 ce 00 00 00            	ja	206 <pop_arg+0x194>
  40369a: 48 89 c8                     	movq	%rcx, %rax
  40369d: 48 03 42 10                  	addq	16(%rdx), %rax
  4036a1: 83 c1 08                     	addl	$8, %ecx
  4036a4: 89 0a                        	movl	%ecx, (%rdx)
  4036a6: e9 cd 00 00 00               	jmp	205 <pop_arg+0x1a4>
; 	break; case DBL:	arg->f = va_arg(*ap, double);
  4036ab: 48 63 4a 04                  	movslq	4(%rdx), %rcx
  4036af: 48 81 f9 a0 00 00 00         	cmpq	$160, %rcx
  4036b6: 0f 87 c4 00 00 00            	ja	196 <pop_arg+0x1ac>
  4036bc: 48 89 c8                     	movq	%rcx, %rax
  4036bf: 48 03 42 10                  	addq	16(%rdx), %rax
  4036c3: 83 c1 10                     	addl	$16, %ecx
  4036c6: 89 4a 04                     	movl	%ecx, 4(%rdx)
  4036c9: e9 c2 00 00 00               	jmp	194 <pop_arg+0x1bc>
; 	break; case LDBL:	arg->f = va_arg(*ap, double);
  4036ce: 48 8b 42 08                  	movq	8(%rdx), %rax
  4036d2: 48 83 c0 0f                  	addq	$15, %rax
  4036d6: 48 83 e0 f0                  	andq	$-16, %rax
  4036da: 48 8d 48 10                  	leaq	16(%rax), %rcx
  4036de: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  4036e2: db 28                        	fldt	(%rax)
  4036e4: e9 a9 00 00 00               	jmp	169 <pop_arg+0x1be>
; 	break; case INT:	arg->i = va_arg(*ap, int);
  4036e9: 48 63 0a                     	movslq	(%rdx), %rcx
  4036ec: 48 83 f9 28                  	cmpq	$40, %rcx
  4036f0: 0f 87 9f 00 00 00            	ja	159 <pop_arg+0x1c1>
  4036f6: 48 89 c8                     	movq	%rcx, %rax
  4036f9: 48 03 42 10                  	addq	16(%rdx), %rax
  4036fd: 83 c1 08                     	addl	$8, %ecx
  403700: 89 0a                        	movl	%ecx, (%rdx)
  403702: e9 9e 00 00 00               	jmp	158 <pop_arg+0x1d1>
; 	break; case UINT:	arg->i = va_arg(*ap, unsigned int);
  403707: 48 8b 42 08                  	movq	8(%rdx), %rax
  40370b: b9 08 00 00 00               	movl	$8, %ecx
  403710: 48 01 c1                     	addq	%rax, %rcx
  403713: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  403717: 8b 00                        	movl	(%rax), %eax
  403719: e9 f3 fe ff ff               	jmp	-269 <pop_arg+0x3d>
; 	break; case SHORT:	arg->i = (short)va_arg(*ap, int);
  40371e: 48 8b 42 08                  	movq	8(%rdx), %rax
  403722: b9 08 00 00 00               	movl	$8, %ecx
  403727: 48 01 c1                     	addq	%rax, %rcx
  40372a: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  40372e: 48 0f bf 00                  	movswq	(%rax), %rax
  403732: e9 da fe ff ff               	jmp	-294 <pop_arg+0x3d>
; 	break; case USHORT:	arg->i = (unsigned short)va_arg(*ap, int);
  403737: 48 8b 42 08                  	movq	8(%rdx), %rax
  40373b: b9 08 00 00 00               	movl	$8, %ecx
  403740: 48 01 c1                     	addq	%rax, %rcx
  403743: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  403747: 0f b7 00                     	movzwl	(%rax), %eax
  40374a: e9 c2 fe ff ff               	jmp	-318 <pop_arg+0x3d>
; 	break; case CHAR:	arg->i = (signed char)va_arg(*ap, int);
  40374f: 48 8b 42 08                  	movq	8(%rdx), %rax
  403753: b9 08 00 00 00               	movl	$8, %ecx
  403758: 48 01 c1                     	addq	%rax, %rcx
  40375b: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  40375f: 48 0f be 00                  	movsbq	(%rax), %rax
  403763: e9 a9 fe ff ff               	jmp	-343 <pop_arg+0x3d>
; 	break; case UCHAR:	arg->i = (unsigned char)va_arg(*ap, int);
  403768: 48 8b 42 08                  	movq	8(%rdx), %rax
  40376c: b9 08 00 00 00               	movl	$8, %ecx
  403771: 48 01 c1                     	addq	%rax, %rcx
  403774: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  403778: 0f b6 00                     	movzbl	(%rax), %eax
  40377b: e9 91 fe ff ff               	jmp	-367 <pop_arg+0x3d>
; 	break; case DBL:	arg->f = va_arg(*ap, double);
  403780: 48 8b 42 08                  	movq	8(%rdx), %rax
  403784: b9 08 00 00 00               	movl	$8, %ecx
  403789: 48 01 c1                     	addq	%rax, %rcx
  40378c: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  403790: dd 00                        	fldl	(%rax)
  403792: db 3f                        	fstpt	(%rdi)
; }
  403794: c3                           	retq
; 	break; case INT:	arg->i = va_arg(*ap, int);
  403795: 48 8b 42 08                  	movq	8(%rdx), %rax
  403799: b9 08 00 00 00               	movl	$8, %ecx
  40379e: 48 01 c1                     	addq	%rax, %rcx
  4037a1: 48 89 4a 08                  	movq	%rcx, 8(%rdx)
  4037a5: 48 63 00                     	movslq	(%rax), %rax
  4037a8: e9 64 fe ff ff               	jmp	-412 <pop_arg+0x3d>

00000000004037ad pad:
; {
  4037ad: 55                           	pushq	%rbp
  4037ae: 41 57                        	pushq	%r15
  4037b0: 41 56                        	pushq	%r14
  4037b2: 41 54                        	pushq	%r12
  4037b4: 53                           	pushq	%rbx
  4037b5: 48 81 ec 00 01 00 00         	subq	$256, %rsp
; 	if (fl & (LEFT_ADJ | ZERO_PAD) || l >= w) return;
  4037bc: 89 d5                        	movl	%edx, %ebp
  4037be: 29 cd                        	subl	%ecx, %ebp
  4037c0: 0f 8e 8d 00 00 00            	jle	141 <pad+0xa6>
  4037c6: 41 81 e0 00 20 01 00         	andl	$73728, %r8d
  4037cd: 0f 85 80 00 00 00            	jne	128 <pad+0xa6>
  4037d3: 41 89 cf                     	movl	%ecx, %r15d
  4037d6: 41 89 d6                     	movl	%edx, %r14d
  4037d9: 48 89 fb                     	movq	%rdi, %rbx
; 	memset(pad, c, l>sizeof pad ? sizeof pad : l);
  4037dc: 40 0f be f6                  	movsbl	%sil, %esi
  4037e0: 4c 63 e5                     	movslq	%ebp, %r12
  4037e3: ba 00 01 00 00               	movl	$256, %edx
  4037e8: 49 39 d4                     	cmpq	%rdx, %r12
  4037eb: 49 0f 42 d4                  	cmovbq	%r12, %rdx
  4037ef: 48 89 e7                     	movq	%rsp, %rdi
  4037f2: e8 45 02 00 00               	callq	581 <memset>
  4037f7: 8b 03                        	movl	(%rbx), %eax
  4037f9: a8 20                        	testb	$32, %al
  4037fb: 0f 94 c1                     	sete	%cl
; 	for (; l >= sizeof pad; l -= sizeof pad)
  4037fe: 41 81 fc 00 01 00 00         	cmpl	$256, %r12d
  403805: 72 3a                        	jb	58 <pad+0x94>
  403807: 45 29 fe                     	subl	%r15d, %r14d
  40380a: 49 89 e7                     	movq	%rsp, %r15
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  40380d: f6 c1 01                     	testb	$1, %cl
  403810: 74 12                        	je	18 <pad+0x77>
  403812: be 00 01 00 00               	movl	$256, %esi
  403817: 4c 89 ff                     	movq	%r15, %rdi
  40381a: 48 89 da                     	movq	%rbx, %rdx
  40381d: e8 5e 23 00 00               	callq	9054 <__fwritex>
  403822: 8b 03                        	movl	(%rbx), %eax
; 	for (; l >= sizeof pad; l -= sizeof pad)
  403824: 81 c5 00 ff ff ff            	addl	$4294967040, %ebp
  40382a: a8 20                        	testb	$32, %al
  40382c: 0f 94 c1                     	sete	%cl
  40382f: 81 fd ff 00 00 00            	cmpl	$255, %ebp
  403835: 77 d6                        	ja	-42 <pad+0x60>
  403837: a8 20                        	testb	$32, %al
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  403839: 75 18                        	jne	24 <pad+0xa6>
  40383b: 41 0f b6 ee                  	movzbl	%r14b, %ebp
  40383f: eb 04                        	jmp	4 <pad+0x98>
  403841: a8 20                        	testb	$32, %al
  403843: 75 0e                        	jne	14 <pad+0xa6>
; 	for (; l >= sizeof pad; l -= sizeof pad)
  403845: 48 63 f5                     	movslq	%ebp, %rsi
  403848: 48 89 e7                     	movq	%rsp, %rdi
; 	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  40384b: 48 89 da                     	movq	%rbx, %rdx
  40384e: e8 2d 23 00 00               	callq	9005 <__fwritex>
; }
  403853: 48 81 c4 00 01 00 00         	addq	$256, %rsp
  40385a: 5b                           	popq	%rbx
  40385b: 41 5c                        	popq	%r12
  40385d: 41 5e                        	popq	%r14
  40385f: 41 5f                        	popq	%r15
  403861: 5d                           	popq	%rbp
  403862: c3                           	retq
  403863: 90                           	nop
  403864: 0f 1f 40 00                  	nopl	(%rax)
		...

0000000000403870 strchr:
; {
  403870: 53                           	pushq	%rbx
  403871: 89 f3                        	movl	%esi, %ebx
; 	char *r = __strchrnul(s, c);
  403873: e8 18 00 00 00               	callq	24 <strchrnul>
  403878: 31 c9                        	xorl	%ecx, %ecx
; 	return *(unsigned char *)r == (unsigned char)c ? r : 0;
  40387a: 38 18                        	cmpb	%bl, (%rax)
  40387c: 48 0f 45 c1                  	cmovneq	%rcx, %rax
  403880: 5b                           	popq	%rbx
  403881: c3                           	retq
  403882: 66 90                        	nop
  403884: 66 66 66 2e 0f 1f 84 00 00 00 00 00  	nopw	%cs:(%rax,%rax)

0000000000403890 strchrnul:
; {
  403890: 53                           	pushq	%rbx
  403891: 48 89 fb                     	movq	%rdi, %rbx
; 	if (!c) return (char *)s + strlen(s);
  403894: 89 f2                        	movl	%esi, %edx
  403896: 81 e2 ff 00 00 00            	andl	$255, %edx
  40389c: 0f 84 c4 00 00 00            	je	196 <strchrnul+0xd6>
  4038a2: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  4038ac: 0f 1f 40 00                  	nopl	(%rax)
; 	for (; (uintptr_t)s % ALIGN; s++)
  4038b0: f6 c3 07                     	testb	$7, %bl
  4038b3: 74 1d                        	je	29 <strchrnul+0x42>
; 		if (!*s || *(unsigned char *)s == c) return (char *)s;
  4038b5: 0f b6 03                     	movzbl	(%rbx), %eax
  4038b8: 84 c0                        	testb	%al, %al
  4038ba: 0f 84 a1 00 00 00            	je	161 <strchrnul+0xd1>
  4038c0: 40 38 f0                     	cmpb	%sil, %al
  4038c3: 0f 84 98 00 00 00            	je	152 <strchrnul+0xd1>
; 	for (; (uintptr_t)s % ALIGN; s++)
  4038c9: 48 83 c3 01                  	addq	$1, %rbx
  4038cd: f6 c3 07                     	testb	$7, %bl
  4038d0: 75 e3                        	jne	-29 <strchrnul+0x25>
  4038d2: 49 b8 ff fe fe fe fe fe fe fe	movabsq	$-72340172838076673, %r8
  4038dc: 49 b9 80 80 80 80 80 80 80 80	movabsq	$-9187201950435737472, %r9
; 	for (w = (void *)s; !HASZERO(*w) && !HASZERO(*w^k); w++);
  4038e6: 48 8b 3b                     	movq	(%rbx), %rdi
  4038e9: 48 89 f8                     	movq	%rdi, %rax
  4038ec: 48 f7 d0                     	notq	%rax
  4038ef: 4a 8d 0c 07                  	leaq	(%rdi,%r8), %rcx
  4038f3: 48 21 c1                     	andq	%rax, %rcx
  4038f6: 4c 85 c9                     	testq	%r9, %rcx
  4038f9: 75 43                        	jne	67 <strchrnul+0xae>
  4038fb: 89 d0                        	movl	%edx, %eax
  4038fd: 48 ba 01 01 01 01 01 01 01 01	movabsq	$72340172838076673, %rdx
  403907: 48 0f af d0                  	imulq	%rax, %rdx
  40390b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
  403910: 48 31 d7                     	xorq	%rdx, %rdi
  403913: 48 89 f8                     	movq	%rdi, %rax
  403916: 48 f7 d0                     	notq	%rax
  403919: 4c 01 c7                     	addq	%r8, %rdi
  40391c: 4c 21 c8                     	andq	%r9, %rax
  40391f: 48 85 f8                     	testq	%rdi, %rax
  403922: 75 1a                        	jne	26 <strchrnul+0xae>
  403924: 48 8b 7b 08                  	movq	8(%rbx), %rdi
  403928: 48 83 c3 08                  	addq	$8, %rbx
  40392c: 48 89 f8                     	movq	%rdi, %rax
  40392f: 48 f7 d0                     	notq	%rax
  403932: 4a 8d 0c 07                  	leaq	(%rdi,%r8), %rcx
  403936: 4c 21 c8                     	andq	%r9, %rax
  403939: 48 85 c8                     	testq	%rcx, %rax
  40393c: 74 d2                        	je	-46 <strchrnul+0x80>
; 	for (; *s && *(unsigned char *)s != c; s++);
  40393e: 48 83 c3 ff                  	addq	$-1, %rbx
  403942: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40394c: 0f 1f 40 00                  	nopl	(%rax)
  403950: 0f b6 43 01                  	movzbl	1(%rbx), %eax
  403954: 48 83 c3 01                  	addq	$1, %rbx
  403958: 84 c0                        	testb	%al, %al
  40395a: 74 05                        	je	5 <strchrnul+0xd1>
  40395c: 40 38 f0                     	cmpb	%sil, %al
  40395f: 75 ef                        	jne	-17 <strchrnul+0xc0>
; }
  403961: 48 89 d8                     	movq	%rbx, %rax
  403964: 5b                           	popq	%rbx
  403965: c3                           	retq
; 	if (!c) return (char *)s + strlen(s);
  403966: 48 89 df                     	movq	%rbx, %rdi
  403969: e8 12 00 00 00               	callq	18 <strlen>
  40396e: 48 01 c3                     	addq	%rax, %rbx
; }
  403971: 48 89 d8                     	movq	%rbx, %rax
  403974: 5b                           	popq	%rbx
  403975: c3                           	retq
  403976: 66 90                        	nop
  403978: 0f 1f 84 00 00 00 00 00      	nopl	(%rax,%rax)

0000000000403980 strlen:
; {
  403980: 48 89 f8                     	movq	%rdi, %rax
; 	for (; (uintptr_t)s % ALIGN; s++) if (!*s) return s-a;
  403983: 40 f6 c7 07                  	testb	$7, %dil
  403987: 74 2c                        	je	44 <strlen+0x35>
  403989: 80 3f 00                     	cmpb	$0, (%rdi)
  40398c: 74 70                        	je	112 <strlen+0x7e>
  40398e: 48 8d 47 01                  	leaq	1(%rdi), %rax
  403992: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40399c: 0f 1f 40 00                  	nopl	(%rax)
  4039a0: a8 07                        	testb	$7, %al
  4039a2: 74 11                        	je	17 <strlen+0x35>
  4039a4: 80 38 00                     	cmpb	$0, (%rax)
  4039a7: 48 8d 40 01                  	leaq	1(%rax), %rax
  4039ab: 75 f3                        	jne	-13 <strlen+0x20>
  4039ad: 48 83 c0 ff                  	addq	$-1, %rax
  4039b1: 48 29 f8                     	subq	%rdi, %rax
; }
  4039b4: c3                           	retq
  4039b5: 49 b8 80 80 80 80 80 80 80 80	movabsq	$-9187201950435737472, %r8
; 	for (w = (const void *)s; !HASZERO(*w); w++);
  4039bf: 48 83 c0 f8                  	addq	$-8, %rax
  4039c3: 49 b9 ff fe fe fe fe fe fe fe	movabsq	$-72340172838076673, %r9
  4039cd: 0f 1f 00                     	nopl	(%rax)
  4039d0: 48 8b 48 08                  	movq	8(%rax), %rcx
  4039d4: 48 83 c0 08                  	addq	$8, %rax
  4039d8: 48 89 ce                     	movq	%rcx, %rsi
  4039db: 48 f7 d6                     	notq	%rsi
  4039de: 4c 21 c6                     	andq	%r8, %rsi
  4039e1: 4a 8d 14 09                  	leaq	(%rcx,%r9), %rdx
  4039e5: 48 85 d6                     	testq	%rdx, %rsi
  4039e8: 74 e6                        	je	-26 <strlen+0x50>
; 	for (; *s; s++);
  4039ea: 84 c9                        	testb	%cl, %cl
  4039ec: 74 0c                        	je	12 <strlen+0x7a>
  4039ee: 66 90                        	nop
  4039f0: 80 78 01 00                  	cmpb	$0, 1(%rax)
  4039f4: 48 8d 40 01                  	leaq	1(%rax), %rax
  4039f8: 75 f6                        	jne	-10 <strlen+0x70>
  4039fa: 48 29 f8                     	subq	%rdi, %rax
; }
  4039fd: c3                           	retq
  4039fe: 48 89 f8                     	movq	%rdi, %rax
  403a01: 48 29 f8                     	subq	%rdi, %rax
  403a04: c3                           	retq
  403a05: 0f 1f 00                     	nopl	(%rax)
  403a08: 0f 1f 84 00 00 00 00 00      	nopl	(%rax,%rax)

0000000000403a10 strnlen:
; {
  403a10: 41 56                        	pushq	%r14
  403a12: 53                           	pushq	%rbx
  403a13: 50                           	pushq	%rax
  403a14: 49 89 f6                     	movq	%rsi, %r14
  403a17: 48 89 fb                     	movq	%rdi, %rbx
; 	const char *p = memchr(s, 0, n);
  403a1a: 31 f6                        	xorl	%esi, %esi
  403a1c: 4c 89 f2                     	movq	%r14, %rdx
  403a1f: e8 0c 23 00 00               	callq	8972 <memchr>
; 	return p ? p-s : n;
  403a24: 48 89 c1                     	movq	%rax, %rcx
  403a27: 48 29 d9                     	subq	%rbx, %rcx
  403a2a: 48 85 c0                     	testq	%rax, %rax
  403a2d: 49 0f 44 ce                  	cmoveq	%r14, %rcx
  403a31: 48 89 c8                     	movq	%rcx, %rax
  403a34: 48 83 c4 08                  	addq	$8, %rsp
  403a38: 5b                           	popq	%rbx
  403a39: 41 5e                        	popq	%r14
  403a3b: c3                           	retq

0000000000403a3c memset:
; 	movzbq %sil,%rax
  403a3c: 48 0f b6 c6                  	movzbq	%sil, %rax
; 	mov $0x101010101010101,%r8
  403a40: 49 b8 01 01 01 01 01 01 01 01	movabsq	$72340172838076673, %r8
; 	imul %r8,%rax
  403a4a: 49 0f af c0                  	imulq	%r8, %rax
; 	cmp $126,%rdx
  403a4e: 48 83 fa 7e                  	cmpq	$126, %rdx
; 	ja 2f
  403a52: 77 78                        	ja	120 <memset+0x90>
; 	test %edx,%edx
  403a54: 85 d2                        	testl	%edx, %edx
; 	jz 1f
  403a56: 74 70                        	je	112 <memset+0x8c>
; 	mov %sil,(%rdi)
  403a58: 40 88 37                     	movb	%sil, (%rdi)
; 	mov %sil,-1(%rdi,%rdx)
  403a5b: 40 88 74 17 ff               	movb	%sil, -1(%rdi,%rdx)
; 	cmp $2,%edx
  403a60: 83 fa 02                     	cmpl	$2, %edx
; 	jbe 1f
  403a63: 76 63                        	jbe	99 <memset+0x8c>
; 	mov %ax,1(%rdi)
  403a65: 66 89 47 01                  	movw	%ax, 1(%rdi)
; 	mov %ax,(-1-2)(%rdi,%rdx)
  403a69: 66 89 44 17 fd               	movw	%ax, -3(%rdi,%rdx)
; 	cmp $6,%edx
  403a6e: 83 fa 06                     	cmpl	$6, %edx
; 	jbe 1f
  403a71: 76 55                        	jbe	85 <memset+0x8c>
; 	mov %eax,(1+2)(%rdi)
  403a73: 89 47 03                     	movl	%eax, 3(%rdi)
; 	mov %eax,(-1-2-4)(%rdi,%rdx)
  403a76: 89 44 17 f9                  	movl	%eax, -7(%rdi,%rdx)
; 	cmp $14,%edx
  403a7a: 83 fa 0e                     	cmpl	$14, %edx
; 	jbe 1f
  403a7d: 76 49                        	jbe	73 <memset+0x8c>
; 	mov %rax,(1+2+4)(%rdi)
  403a7f: 48 89 47 07                  	movq	%rax, 7(%rdi)
; 	mov %rax,(-1-2-4-8)(%rdi,%rdx)
  403a83: 48 89 44 17 f1               	movq	%rax, -15(%rdi,%rdx)
; 	cmp $30,%edx
  403a88: 83 fa 1e                     	cmpl	$30, %edx
; 	jbe 1f
  403a8b: 76 3b                        	jbe	59 <memset+0x8c>
; 	mov %rax,(1+2+4+8)(%rdi)
  403a8d: 48 89 47 0f                  	movq	%rax, 15(%rdi)
; 	mov %rax,(1+2+4+8+8)(%rdi)
  403a91: 48 89 47 17                  	movq	%rax, 23(%rdi)
; 	mov %rax,(-1-2-4-8-16)(%rdi,%rdx)
  403a95: 48 89 44 17 e1               	movq	%rax, -31(%rdi,%rdx)
; 	mov %rax,(-1-2-4-8-8)(%rdi,%rdx)
  403a9a: 48 89 44 17 e9               	movq	%rax, -23(%rdi,%rdx)
; 	cmp $62,%edx
  403a9f: 83 fa 3e                     	cmpl	$62, %edx
; 	jbe 1f
  403aa2: 76 24                        	jbe	36 <memset+0x8c>
; 	mov %rax,(1+2+4+8+16)(%rdi)
  403aa4: 48 89 47 1f                  	movq	%rax, 31(%rdi)
; 	mov %rax,(1+2+4+8+16+8)(%rdi)
  403aa8: 48 89 47 27                  	movq	%rax, 39(%rdi)
; 	mov %rax,(1+2+4+8+16+16)(%rdi)
  403aac: 48 89 47 2f                  	movq	%rax, 47(%rdi)
; 	mov %rax,(1+2+4+8+16+24)(%rdi)
  403ab0: 48 89 47 37                  	movq	%rax, 55(%rdi)
; 	mov %rax,(-1-2-4-8-16-32)(%rdi,%rdx)
  403ab4: 48 89 44 17 c1               	movq	%rax, -63(%rdi,%rdx)
; 	mov %rax,(-1-2-4-8-16-24)(%rdi,%rdx)
  403ab9: 48 89 44 17 c9               	movq	%rax, -55(%rdi,%rdx)
; 	mov %rax,(-1-2-4-8-16-16)(%rdi,%rdx)
  403abe: 48 89 44 17 d1               	movq	%rax, -47(%rdi,%rdx)
; 	mov %rax,(-1-2-4-8-16-8)(%rdi,%rdx)
  403ac3: 48 89 44 17 d9               	movq	%rax, -39(%rdi,%rdx)
; 1:	mov %rdi,%rax
  403ac8: 48 89 f8                     	movq	%rdi, %rax
; 	ret
  403acb: c3                           	retq
; 2:	test $15,%edi
  403acc: f7 c7 0f 00 00 00            	testl	$15, %edi
; 	mov %rdi,%r8
  403ad2: 49 89 f8                     	movq	%rdi, %r8
; 	mov %rax,-8(%rdi,%rdx)
  403ad5: 48 89 44 17 f8               	movq	%rax, -8(%rdi,%rdx)
; 	mov %rdx,%rcx
  403ada: 48 89 d1                     	movq	%rdx, %rcx
; 	jnz 2f
  403add: 75 0b                        	jne	11 <memset+0xae>
; 1:	shr $3,%rcx
  403adf: 48 c1 e9 03                  	shrq	$3, %rcx
; 	rep
  403ae3: f3 48 ab                     	rep		stosq	%rax, %es:(%rdi)
; 	mov %r8,%rax
  403ae6: 4c 89 c0                     	movq	%r8, %rax
; 	ret
  403ae9: c3                           	retq
; 2:	xor %edx,%edx
  403aea: 31 d2                        	xorl	%edx, %edx
; 	sub %edi,%edx
  403aec: 29 fa                        	subl	%edi, %edx
; 	and $15,%edx
  403aee: 83 e2 0f                     	andl	$15, %edx
; 	mov %rax,(%rdi)
  403af1: 48 89 07                     	movq	%rax, (%rdi)
; 	mov %rax,8(%rdi)
  403af4: 48 89 47 08                  	movq	%rax, 8(%rdi)
; 	sub %rdx,%rcx
  403af8: 48 29 d1                     	subq	%rdx, %rcx
; 	add %rdx,%rdi
  403afb: 48 01 d7                     	addq	%rdx, %rdi
; 	jmp 1b
  403afe: eb df                        	jmp	-33 <memset+0xa3>

0000000000403b00 __lock:
; 	if (!libc.threads_minus_1) return;
  403b00: 83 3d 65 92 08 00 00         	cmpl	$0, 561765(%rip)
  403b07: 0f 84 89 00 00 00            	je	137 <__lock+0x96>
  403b0d: b9 01 00 00 80               	movl	$2147483649, %ecx
; 	__asm__ __volatile__ (
  403b12: 31 c0                        	xorl	%eax, %eax
  403b14: f0                           	lock
  403b15: 0f b1 0f                     	cmpxchgl	%ecx, (%rdi)
; 	if (!current) return;
  403b18: 85 c0                        	testl	%eax, %eax
  403b1a: 74 7a                        	je	122 <__lock+0x96>
  403b1c: ba 0a 00 00 00               	movl	$10, %edx
; 		if (current < 0) current -= INT_MIN + 1;
  403b21: 8d 88 ff ff ff 7f            	leal	2147483647(%rax), %ecx
  403b27: 85 c0                        	testl	%eax, %eax
  403b29: 0f 49 c8                     	cmovnsl	%eax, %ecx
; 		int val = a_cas(l, current, INT_MIN + (current + 1));
  403b2c: 8d b1 01 00 00 80            	leal	-2147483647(%rcx), %esi
; 	__asm__ __volatile__ (
  403b32: 89 c8                        	movl	%ecx, %eax
  403b34: f0                           	lock
  403b35: 0f b1 37                     	cmpxchgl	%esi, (%rdi)
; 		if (val == current) return;
  403b38: 39 c8                        	cmpl	%ecx, %eax
  403b3a: 74 5a                        	je	90 <__lock+0x96>
; 	for (unsigned i = 0; i < 10; ++i) {
  403b3c: ff ca                        	decl	%edx
  403b3e: 75 e1                        	jne	-31 <__lock+0x21>
  403b40: 41 b8 01 00 00 00            	movl	$1, %r8d
; 	__asm__ __volatile__(
  403b46: f0                           	lock
  403b47: 44 0f c1 07                  	xaddl	%r8d, (%rdi)
; 	current = a_fetch_add(l, 1) + 1;
  403b4b: 41 ff c0                     	incl	%r8d
; 		if (current < 0) {
  403b4e: 45 85 c0                     	testl	%r8d, %r8d
  403b51: 79 2b                        	jns	43 <__lock+0x7e>
; 	__syscall(SYS_futex, addr, FUTEX_WAIT|priv, val, 0) != -ENOSYS ||
  403b53: 49 63 d0                     	movslq	%r8d, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  403b56: b8 ca 00 00 00               	movl	$202, %eax
  403b5b: be 80 00 00 00               	movl	$128, %esi
  403b60: 45 31 d2                     	xorl	%r10d, %r10d
  403b63: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAIT|priv, val, 0) != -ENOSYS ||
  403b65: 48 83 f8 da                  	cmpq	$-38, %rax
  403b69: 75 0c                        	jne	12 <__lock+0x77>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  403b6b: b8 ca 00 00 00               	movl	$202, %eax
  403b70: 31 f6                        	xorl	%esi, %esi
  403b72: 45 31 d2                     	xorl	%r10d, %r10d
  403b75: 0f 05                        	syscall
; 			current -= INT_MIN + 1;
  403b77: 41 81 c0 ff ff ff 7f         	addl	$2147483647, %r8d
; 		int val = a_cas(l, current, INT_MIN + current);
  403b7e: 44 89 c1                     	movl	%r8d, %ecx
  403b81: 81 c9 00 00 00 80            	orl	$2147483648, %ecx
; 	__asm__ __volatile__ (
  403b87: 44 89 c0                     	movl	%r8d, %eax
  403b8a: f0                           	lock
  403b8b: 0f b1 0f                     	cmpxchgl	%ecx, (%rdi)
; 		if (val == current) return;
  403b8e: 44 39 c0                     	cmpl	%r8d, %eax
  403b91: 41 89 c0                     	movl	%eax, %r8d
  403b94: 75 b8                        	jne	-72 <__lock+0x4e>
; }
  403b96: c3                           	retq

0000000000403b97 __unlock:
; 	if (l[0] < 0) {
  403b97: 83 3f 00                     	cmpl	$0, (%rdi)
  403b9a: 79 38                        	jns	56 <__unlock+0x3d>
  403b9c: b8 ff ff ff 7f               	movl	$2147483647, %eax
; 	__asm__ __volatile__(
  403ba1: f0                           	lock
  403ba2: 0f c1 07                     	xaddl	%eax, (%rdi)
; 		if (a_fetch_add(l, -(INT_MIN + 1)) != (INT_MIN + 1)) {
  403ba5: 3d 01 00 00 80               	cmpl	$2147483649, %eax
  403baa: 74 28                        	je	40 <__unlock+0x3d>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  403bac: b8 ca 00 00 00               	movl	$202, %eax
  403bb1: be 81 00 00 00               	movl	$129, %esi
  403bb6: ba 01 00 00 00               	movl	$1, %edx
  403bbb: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  403bbd: 48 83 f8 da                  	cmpq	$-38, %rax
  403bc1: 75 11                        	jne	17 <__unlock+0x3d>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  403bc3: b8 ca 00 00 00               	movl	$202, %eax
  403bc8: be 01 00 00 00               	movl	$1, %esi
  403bcd: ba 01 00 00 00               	movl	$1, %edx
  403bd2: 0f 05                        	syscall
; }
  403bd4: c3                           	retq
  403bd5: 0f 1f 00                     	nopl	(%rax)

0000000000403bd8 gettimeofday:
; 	if (!tv) return 0;
  403bd8: 48 85 ff                     	testq	%rdi, %rdi
  403bdb: 74 44                        	je	68 <gettimeofday+0x49>
  403bdd: 41 56                        	pushq	%r14
  403bdf: 53                           	pushq	%rbx
  403be0: 48 83 ec 18                  	subq	$24, %rsp
  403be4: 48 89 fb                     	movq	%rdi, %rbx
  403be7: 4c 8d 74 24 08               	leaq	8(%rsp), %r14
; 	clock_gettime(CLOCK_REALTIME, &ts);
  403bec: 31 ff                        	xorl	%edi, %edi
  403bee: 4c 89 f6                     	movq	%r14, %rsi
  403bf1: e8 ae 22 00 00               	callq	8878 <clock_gettime>
; 	tv->tv_sec = ts.tv_sec;
  403bf6: 49 8b 06                     	movq	(%r14), %rax
  403bf9: 48 89 03                     	movq	%rax, (%rbx)
; 	tv->tv_usec = (int)ts.tv_nsec / 1000;
  403bfc: 49 63 46 08                  	movslq	8(%r14), %rax
  403c00: 48 69 c0 d3 4d 62 10         	imulq	$274877907, %rax, %rax
  403c07: 48 89 c1                     	movq	%rax, %rcx
  403c0a: 48 c1 e9 3f                  	shrq	$63, %rcx
  403c0e: 48 c1 f8 26                  	sarq	$38, %rax
  403c12: 01 c8                        	addl	%ecx, %eax
  403c14: 48 98                        	cltq
  403c16: 48 89 43 08                  	movq	%rax, 8(%rbx)
  403c1a: 48 83 c4 18                  	addq	$24, %rsp
  403c1e: 5b                           	popq	%rbx
  403c1f: 41 5e                        	popq	%r14
; }
  403c21: 31 c0                        	xorl	%eax, %eax
  403c23: c3                           	retq

0000000000403c24 __init_tp:
; {
  403c24: 53                           	pushq	%rbx
  403c25: 48 89 fb                     	movq	%rdi, %rbx
; 	td->self = td;
  403c28: 48 89 3f                     	movq	%rdi, (%rdi)
; 	int r = __set_thread_area(TP_ADJ(p));
  403c2b: e8 64 22 00 00               	callq	8804 <__set_thread_area>
; 	if (r < 0) return -1;
  403c30: 85 c0                        	testl	%eax, %eax
  403c32: 78 52                        	js	82 <__init_tp+0x62>
; 	if (!r) libc.can_do_threads = 1;
  403c34: 75 0a                        	jne	10 <__init_tp+0x1c>
  403c36: c7 05 20 91 08 00 01 00 00 00	movl	$1, 561440(%rip)
; 	td->detach_state = DT_JOINABLE;
  403c40: c7 43 40 01 00 00 00         	movl	$1, 64(%rbx)
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  403c47: b8 da 00 00 00               	movl	$218, %eax
  403c4c: bf 44 ce 48 00               	movl	$4771396, %edi
  403c51: 0f 05                        	syscall
; 	td->tid = __syscall(SYS_set_tid_address, &__thread_list_lock);
  403c53: 89 43 38                     	movl	%eax, 56(%rbx)
; 	td->locale = &libc.global_locale;
  403c56: 48 c7 83 b0 00 00 00 a0 cd 48 00     	movq	$4771232, 176(%rbx)
; 	td->robust_list.head = &td->robust_list.head;
  403c61: 48 8d 83 90 00 00 00         	leaq	144(%rbx), %rax
  403c68: 48 89 83 90 00 00 00         	movq	%rax, 144(%rbx)
; 	td->sysinfo = __sysinfo;
  403c6f: 48 8b 05 ba 91 08 00         	movq	561594(%rip), %rax
  403c76: 48 89 43 20                  	movq	%rax, 32(%rbx)
; 	td->next = td->prev = td;
  403c7a: 48 89 5b 10                  	movq	%rbx, 16(%rbx)
  403c7e: 48 89 5b 18                  	movq	%rbx, 24(%rbx)
  403c82: 31 c0                        	xorl	%eax, %eax
  403c84: eb 05                        	jmp	5 <__init_tp+0x67>
  403c86: b8 ff ff ff ff               	movl	$4294967295, %eax
; }
  403c8b: 5b                           	popq	%rbx
  403c8c: c3                           	retq

0000000000403c8d __copy_tls:
; {
  403c8d: 41 57                        	pushq	%r15
  403c8f: 41 56                        	pushq	%r14
  403c91: 41 54                        	pushq	%r12
  403c93: 53                           	pushq	%rbx
  403c94: 50                           	pushq	%rax
  403c95: 49 89 fe                     	movq	%rdi, %r14
; 	mem += libc.tls_size - sizeof(struct pthread);
  403c98: 48 8b 05 e1 90 08 00         	movq	561377(%rip), %rax
  403c9f: 4c 8d 3c 38                  	leaq	(%rax,%rdi), %r15
  403ca3: 49 81 c7 20 ff ff ff         	addq	$-224, %r15
; 	mem -= (uintptr_t)mem & (libc.tls_align-1);
  403caa: 48 8b 05 d7 90 08 00         	movq	561367(%rip), %rax
  403cb1: 48 ff c8                     	decq	%rax
  403cb4: 4c 21 f8                     	andq	%r15, %rax
  403cb7: 49 29 c7                     	subq	%rax, %r15
  403cba: 48 8b 1d b7 90 08 00         	movq	561335(%rip), %rbx
; 	for (i=1, p=libc.tls_head; p; i++, p=p->next) {
  403cc1: 48 85 db                     	testq	%rbx, %rbx
  403cc4: 74 2f                        	je	47 <__copy_tls+0x68>
  403cc6: 4d 8d 66 08                  	leaq	8(%r14), %r12
; 		dtv[i] = (uintptr_t)(mem - p->offset) + DTP_OFFSET;
  403cca: 4c 89 f8                     	movq	%r15, %rax
  403ccd: 48 2b 43 28                  	subq	40(%rbx), %rax
  403cd1: 49 89 04 24                  	movq	%rax, (%r12)
; 		memcpy(mem - p->offset, p->image, p->len);
  403cd5: 4c 89 ff                     	movq	%r15, %rdi
  403cd8: 48 2b 7b 28                  	subq	40(%rbx), %rdi
  403cdc: 48 8b 73 08                  	movq	8(%rbx), %rsi
  403ce0: 48 8b 53 10                  	movq	16(%rbx), %rdx
  403ce4: e8 fb 20 00 00               	callq	8443 <memcpy>
  403ce9: 48 8b 1b                     	movq	(%rbx), %rbx
; 	for (i=1, p=libc.tls_head; p; i++, p=p->next) {
  403cec: 49 83 c4 08                  	addq	$8, %r12
  403cf0: 48 85 db                     	testq	%rbx, %rbx
  403cf3: 75 d5                        	jne	-43 <__copy_tls+0x3d>
; 	dtv[0] = libc.tls_cnt;
  403cf5: 48 8b 05 94 90 08 00         	movq	561300(%rip), %rax
  403cfc: 49 89 06                     	movq	%rax, (%r14)
; 	td->dtv = td->dtv_copy = dtv;
  403cff: 4d 89 b7 d8 00 00 00         	movq	%r14, 216(%r15)
  403d06: 4d 89 77 08                  	movq	%r14, 8(%r15)
; 	return td;
  403d0a: 4c 89 f8                     	movq	%r15, %rax
  403d0d: 48 83 c4 08                  	addq	$8, %rsp
  403d11: 5b                           	popq	%rbx
  403d12: 41 5c                        	popq	%r12
  403d14: 41 5e                        	popq	%r14
  403d16: 41 5f                        	popq	%r15
  403d18: c3                           	retq

0000000000403d19 static_init_tls:
; {
  403d19: 53                           	pushq	%rbx
; 	for (p=(void *)aux[AT_PHDR],n=aux[AT_PHNUM]; n; n--,p+=aux[AT_PHENT]) {
  403d1a: 48 8b 4f 28                  	movq	40(%rdi), %rcx
  403d1e: 48 85 c9                     	testq	%rcx, %rcx
  403d21: 0f 84 c1 00 00 00            	je	193 <static_init_tls+0xcf>
  403d27: 4c 8b 57 18                  	movq	24(%rdi), %r10
  403d2b: 48 8b 7f 20                  	movq	32(%rdi), %rdi
  403d2f: 31 c0                        	xorl	%eax, %eax
  403d31: 41 b8 00 00 80 00            	movl	$8388608, %r8d
  403d37: 41 b9 00 00 00 00            	movl	$0, %r9d
  403d3d: 45 31 db                     	xorl	%r11d, %r11d
  403d40: 4c 89 d6                     	movq	%r10, %rsi
; 		if (phdr->p_type == PT_PHDR)
  403d43: 8b 16                        	movl	(%rsi), %edx
  403d45: 83 fa 06                     	cmpl	$6, %edx
  403d48: 75 05                        	jne	5 <static_init_tls+0x36>
; 			base = aux[AT_PHDR] - phdr->p_vaddr;
  403d4a: 4c 89 d0                     	movq	%r10, %rax
  403d4d: eb 0f                        	jmp	15 <static_init_tls+0x45>
; 		if (phdr->p_type == PT_DYNAMIC && _DYNAMIC)
  403d4f: 83 fa 02                     	cmpl	$2, %edx
  403d52: 75 18                        	jne	24 <static_init_tls+0x53>
  403d54: 4d 85 c9                     	testq	%r9, %r9
  403d57: 74 13                        	je	19 <static_init_tls+0x53>
; 			base = (size_t)_DYNAMIC - phdr->p_vaddr;
  403d59: b8 00 00 00 00               	movl	$0, %eax
  403d5e: 48 2b 46 10                  	subq	16(%rsi), %rax
; 	for (p=(void *)aux[AT_PHDR],n=aux[AT_PHNUM]; n; n--,p+=aux[AT_PHENT]) {
  403d62: 48 01 fe                     	addq	%rdi, %rsi
  403d65: 48 ff c9                     	decq	%rcx
  403d68: 75 d9                        	jne	-39 <static_init_tls+0x2a>
  403d6a: eb 31                        	jmp	49 <static_init_tls+0x84>
; 		if (phdr->p_type == PT_TLS)
  403d6c: 83 fa 07                     	cmpl	$7, %edx
  403d6f: 4c 0f 44 de                  	cmoveq	%rsi, %r11
; 		if (phdr->p_type == PT_GNU_STACK &&
  403d73: 81 fa 51 e5 74 64            	cmpl	$1685382481, %edx
  403d79: 75 e7                        	jne	-25 <static_init_tls+0x49>
; 		    phdr->p_memsz > __default_stacksize)
  403d7b: 48 8b 56 28                  	movq	40(%rsi), %rdx
  403d7f: 8b 1d 83 4f 00 00            	movl	20355(%rip), %ebx
  403d85: 48 39 da                     	cmpq	%rbx, %rdx
; 		if (phdr->p_type == PT_GNU_STACK &&
  403d88: 76 d8                        	jbe	-40 <static_init_tls+0x49>
; 				phdr->p_memsz < DEFAULT_STACK_MAX ?
  403d8a: 48 81 fa 00 00 80 00         	cmpq	$8388608, %rdx
  403d91: 41 0f 43 d0                  	cmovael	%r8d, %edx
; 			__default_stacksize =
  403d95: 89 15 6d 4f 00 00            	movl	%edx, 20333(%rip)
  403d9b: eb c5                        	jmp	-59 <static_init_tls+0x49>
; 	if (tls_phdr) {
  403d9d: 4d 85 db                     	testq	%r11, %r11
  403da0: 74 46                        	je	70 <static_init_tls+0xcf>
; 		main_tls.image = (void *)(base + tls_phdr->p_vaddr);
  403da2: 49 03 43 10                  	addq	16(%r11), %rax
  403da6: 48 89 05 eb 57 00 00         	movq	%rax, 22507(%rip)
; 		main_tls.len = tls_phdr->p_filesz;
  403dad: f3 41 0f 6f 43 20            	movdqu	32(%r11), %xmm0
  403db3: f3 0f 7f 05 e5 57 00 00      	movdqu	%xmm0, 22501(%rip)
; 		main_tls.align = tls_phdr->p_align;
  403dbb: 49 8b 4b 30                  	movq	48(%r11), %rcx
  403dbf: 48 89 0d ea 57 00 00         	movq	%rcx, 22506(%rip)
; 		libc.tls_cnt = 1;
  403dc6: 48 c7 05 bf 8f 08 00 01 00 00 00     	movq	$1, 561087(%rip)
; 		libc.tls_head = &main_tls;
  403dd1: 48 c7 05 9c 8f 08 00 90 95 40 00     	movq	$4232592, 561052(%rip)
; 	}
  403ddc: 66 0f 70 c0 4e               	pshufd	$78, %xmm0, %xmm0
  403de1: 66 48 0f 7e c2               	movq	%xmm0, %rdx
  403de6: eb 15                        	jmp	21 <static_init_tls+0xe4>
; 		& (main_tls.align-1);
  403de8: 48 8b 0d c1 57 00 00         	movq	22465(%rip), %rcx
; 	main_tls.size += (-main_tls.size - (uintptr_t)main_tls.image)
  403def: 48 8b 15 b2 57 00 00         	movq	22450(%rip), %rdx
  403df6: 48 8b 05 9b 57 00 00         	movq	22427(%rip), %rax
  403dfd: 48 01 d0                     	addq	%rdx, %rax
  403e00: 48 f7 d8                     	negq	%rax
; 		& (main_tls.align-1);
  403e03: 48 8d 71 ff                  	leaq	-1(%rcx), %rsi
  403e07: 48 21 c6                     	andq	%rax, %rsi
; 	main_tls.size += (-main_tls.size - (uintptr_t)main_tls.image)
  403e0a: 48 01 d6                     	addq	%rdx, %rsi
  403e0d: 48 89 35 94 57 00 00         	movq	%rsi, 22420(%rip)
; 	main_tls.offset = main_tls.size;
  403e14: 48 89 35 9d 57 00 00         	movq	%rsi, 22429(%rip)
; 	if (main_tls.align < MIN_TLS_ALIGN) main_tls.align = MIN_TLS_ALIGN;
  403e1b: 48 83 f9 07                  	cmpq	$7, %rcx
  403e1f: 77 10                        	ja	16 <static_init_tls+0x118>
  403e21: 48 c7 05 84 57 00 00 08 00 00 00     	movq	$8, 22404(%rip)
  403e2c: b9 08 00 00 00               	movl	$8, %ecx
; 	libc.tls_align = main_tls.align;
  403e31: 48 89 0d 50 8f 08 00         	movq	%rcx, 560976(%rip)
; 		+ MIN_TLS_ALIGN-1 & -MIN_TLS_ALIGN;
  403e38: 48 01 ce                     	addq	%rcx, %rsi
  403e3b: 48 81 c6 f7 00 00 00         	addq	$247, %rsi
  403e42: 48 83 e6 f8                  	andq	$-8, %rsi
; 	libc.tls_size = 2*sizeof(void *) + sizeof(struct pthread)
  403e46: 48 89 35 33 8f 08 00         	movq	%rsi, 560947(%rip)
  403e4d: bf c0 95 40 00               	movl	$4232640, %edi
; 	if (libc.tls_size > sizeof builtin_tls) {
  403e52: 48 81 fe 69 01 00 00         	cmpq	$361, %rsi
  403e59: 72 24                        	jb	36 <static_init_tls+0x166>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  403e5b: b8 09 00 00 00               	movl	$9, %eax
  403e60: ba 03 00 00 00               	movl	$3, %edx
  403e65: 41 ba 22 00 00 00            	movl	$34, %r10d
  403e6b: bf 00 00 00 00               	movl	$0, %edi
  403e70: 49 c7 c0 ff ff ff ff         	movq	$-1, %r8
  403e77: 45 31 c9                     	xorl	%r9d, %r9d
  403e7a: 0f 05                        	syscall
  403e7c: 48 89 c7                     	movq	%rax, %rdi
; 	if (__init_tp(__copy_tls(mem)) < 0)
  403e7f: e8 09 fe ff ff               	callq	-503 <__copy_tls>
  403e84: 48 89 c7                     	movq	%rax, %rdi
  403e87: e8 98 fd ff ff               	callq	-616 <__init_tp>
  403e8c: 85 c0                        	testl	%eax, %eax
  403e8e: 79 01                        	jns	1 <static_init_tls+0x178>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  403e90: f4                           	hlt
; }
  403e91: 5b                           	popq	%rbx
  403e92: c3                           	retq
  403e93: 90                           	nop

0000000000403e94 __errno_location:
; 	__asm__ ("mov %%fs:0,%0" : "=r" (self) );
  403e94: 64 48 8b 04 25 00 00 00 00   	movq	%fs:0, %rax
; 	return &__pthread_self()->errno_val;
  403e9d: 48 83 c0 3c                  	addq	$60, %rax
  403ea1: c3                           	retq
  403ea2: 66 90                        	nop

0000000000403ea4 strerror_l:
; {
  403ea4: 31 c0                        	xorl	%eax, %eax
; 	for (i=0; errid[i] && errid[i] != e; i++);
  403ea6: 0f b6 88 00 71 40 00         	movzbl	4223232(%rax), %ecx
  403ead: 39 f9                        	cmpl	%edi, %ecx
  403eaf: 74 0b                        	je	11 <strerror_l+0x18>
  403eb1: 48 ff c0                     	incq	%rax
  403eb4: 48 83 f8 58                  	cmpq	$88, %rax
  403eb8: 75 ec                        	jne	-20 <strerror_l+0x2>
  403eba: eb 04                        	jmp	4 <strerror_l+0x1c>
; 	for (s=errmsg; i; s++, i--) for (; *s; s++);
  403ebc: 85 c0                        	testl	%eax, %eax
  403ebe: 74 14                        	je	20 <strerror_l+0x30>
  403ec0: bf 60 71 40 00               	movl	$4223328, %edi
  403ec5: 80 3f 00                     	cmpb	$0, (%rdi)
  403ec8: 48 8d 7f 01                  	leaq	1(%rdi), %rdi
  403ecc: 75 f7                        	jne	-9 <strerror_l+0x21>
  403ece: ff c8                        	decl	%eax
  403ed0: 75 f3                        	jne	-13 <strerror_l+0x21>
  403ed2: eb 05                        	jmp	5 <strerror_l+0x35>
  403ed4: bf 60 71 40 00               	movl	$4223328, %edi
; 	return (char *)LCTRANS(s, LC_MESSAGES, loc);
  403ed9: 48 8b 76 28                  	movq	40(%rsi), %rsi
  403edd: e9 56 00 00 00               	jmp	86 <__lctrans>

0000000000403ee2 strerror:
; 	__asm__ ("mov %%fs:0,%0" : "=r" (self) );
  403ee2: 64 48 8b 04 25 00 00 00 00   	movq	%fs:0, %rax
; 	return __strerror_l(e, CURRENT_LOCALE);
  403eeb: 48 8b b0 b0 00 00 00         	movq	176(%rax), %rsi
  403ef2: e9 ad ff ff ff               	jmp	-83 <strerror_l>
  403ef7: 90                           	nop

0000000000403ef8 _Exit:
; 	__syscall(SYS_exit_group, ec);
  403ef8: 48 63 ff                     	movslq	%edi, %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  403efb: b8 e7 00 00 00               	movl	$231, %eax
  403f00: 0f 05                        	syscall
  403f02: b8 3c 00 00 00               	movl	$60, %eax
  403f07: 0f 05                        	syscall
; 	for (;;) __syscall(SYS_exit, ec);
  403f09: eb f7                        	jmp	-9 <_Exit+0xa>
  403f0b: 90                           	nop
  403f0c: 0f 1f 40 00                  	nopl	(%rax)

0000000000403f10 __syscall_ret:
; {
  403f10: 53                           	pushq	%rbx
  403f11: 48 89 fb                     	movq	%rdi, %rbx
; 	if (r > -4096UL) {
  403f14: 48 81 ff 01 f0 ff ff         	cmpq	$-4095, %rdi
  403f1b: 72 10                        	jb	16 <__syscall_ret+0x1d>
; 		errno = -r;
  403f1d: f7 db                        	negl	%ebx
  403f1f: e8 70 ff ff ff               	callq	-144 <__errno_location>
  403f24: 89 18                        	movl	%ebx, (%rax)
  403f26: 48 c7 c3 ff ff ff ff         	movq	$-1, %rbx
; }
  403f2d: 48 89 d8                     	movq	%rbx, %rax
  403f30: 5b                           	popq	%rbx
  403f31: c3                           	retq
  403f32: 66 90                        	nop

0000000000403f34 dummy:
; {
  403f34: 48 89 f8                     	movq	%rdi, %rax
; 	return msg;
  403f37: c3                           	retq

0000000000403f38 __lctrans:
; 	return __lctrans_impl(msg, lm);
  403f38: e9 f7 ff ff ff               	jmp	-9 <dummy>

0000000000403f3d __lctrans_cur:
; 	__asm__ ("mov %%fs:0,%0" : "=r" (self) );
  403f3d: 64 48 8b 04 25 00 00 00 00   	movq	%fs:0, %rax
; 	return __lctrans_impl(msg, CURRENT_LOCALE->cat[LC_MESSAGES]);
  403f46: 48 8b 80 b0 00 00 00         	movq	176(%rax), %rax
  403f4d: 48 8b 70 28                  	movq	40(%rax), %rsi
  403f51: e9 de ff ff ff               	jmp	-34 <dummy>
  403f56: 66 90                        	nop
  403f58: 0f 1f 84 00 00 00 00 00      	nopl	(%rax,%rax)

0000000000403f60 malloc:
; {
  403f60: 55                           	pushq	%rbp
  403f61: 41 57                        	pushq	%r15
  403f63: 41 56                        	pushq	%r14
  403f65: 41 55                        	pushq	%r13
  403f67: 41 54                        	pushq	%r12
  403f69: 53                           	pushq	%rbx
  403f6a: 48 83 ec 28                  	subq	$40, %rsp
; 	if (*n-1 > PTRDIFF_MAX - SIZE_ALIGN - PAGE_SIZE) {
  403f6e: 48 8d 47 ff                  	leaq	-1(%rdi), %rax
  403f72: 48 b9 e0 ef ff ff ff ff ff 7f	movabsq	$9223372036854771680, %rcx
  403f7c: 48 39 c8                     	cmpq	%rcx, %rax
  403f7f: 72 1c                        	jb	28 <malloc+0x3d>
; 		if (*n) {
  403f81: 48 85 ff                     	testq	%rdi, %rdi
  403f84: 0f 84 93 00 00 00            	je	147 <malloc+0xbd>
; 			errno = ENOMEM;
  403f8a: e8 05 ff ff ff               	callq	-251 <__errno_location>
  403f8f: c7 00 0c 00 00 00            	movl	$12, (%rax)
  403f95: 45 31 ff                     	xorl	%r15d, %r15d
  403f98: e9 7a 05 00 00               	jmp	1402 <malloc+0x5b7>
; 	*n = (*n + OVERHEAD + SIZE_ALIGN - 1) & SIZE_MASK;
  403f9d: 48 83 c7 2f                  	addq	$47, %rdi
  403fa1: 48 89 fb                     	movq	%rdi, %rbx
  403fa4: 48 83 e3 e0                  	andq	$-32, %rbx
; 	if (n > MMAP_THRESHOLD) {
  403fa8: 48 81 fb 01 80 03 00         	cmpq	$229377, %rbx
  403faf: 72 57                        	jb	87 <malloc+0xa8>
; 		size_t len = n + OVERHEAD + PAGE_SIZE - 1 & -PAGE_SIZE;
  403fb1: 48 81 c3 0f 10 00 00         	addq	$4111, %rbx
  403fb8: 48 81 e3 00 f0 ff ff         	andq	$-4096, %rbx
  403fbf: 45 31 ff                     	xorl	%r15d, %r15d
; 		char *base = __mmap(0, len, PROT_READ|PROT_WRITE,
  403fc2: bf 00 00 00 00               	movl	$0, %edi
  403fc7: 48 89 de                     	movq	%rbx, %rsi
  403fca: ba 03 00 00 00               	movl	$3, %edx
  403fcf: b9 22 00 00 00               	movl	$34, %ecx
  403fd4: 41 b8 ff ff ff ff            	movl	$4294967295, %r8d
  403fda: 45 31 c9                     	xorl	%r9d, %r9d
  403fdd: e8 3b 14 00 00               	callq	5179 <mmap64>
; 		if (base == (void *)-1) return 0;
  403fe2: 48 83 f8 ff                  	cmpq	$-1, %rax
  403fe6: 0f 84 2b 05 00 00            	je	1323 <malloc+0x5b7>
; 		c->csize = len - (SIZE_ALIGN - OVERHEAD);
  403fec: 48 83 c3 f0                  	addq	$-16, %rbx
  403ff0: 48 89 58 18                  	movq	%rbx, 24(%rax)
; 		c->psize = SIZE_ALIGN - OVERHEAD;
  403ff4: 48 c7 40 10 10 00 00 00      	movq	$16, 16(%rax)
; 		return CHUNK_TO_MEM(c);
  403ffc: 48 83 c0 20                  	addq	$32, %rax
  404000: 49 89 c7                     	movq	%rax, %r15
  404003: e9 0f 05 00 00               	jmp	1295 <malloc+0x5b7>
; 	x = x / SIZE_ALIGN - 1;
  404008: 48 c1 ef 05                  	shrq	$5, %rdi
  40400c: 48 8d 4f ff                  	leaq	-1(%rdi), %rcx
; 	if (x <= 32) return x;
  404010: 48 83 f9 20                  	cmpq	$32, %rcx
  404014: 77 15                        	ja	21 <malloc+0xcb>
  404016: 48 89 5c 24 08               	movq	%rbx, 8(%rsp)
  40401b: eb 3e                        	jmp	62 <malloc+0xfb>
  40401d: bb 20 00 00 00               	movl	$32, %ebx
  404022: 31 c9                        	xorl	%ecx, %ecx
  404024: 48 89 5c 24 08               	movq	%rbx, 8(%rsp)
  404029: eb 30                        	jmp	48 <malloc+0xfb>
; 	x--;
  40402b: 48 83 c7 fe                  	addq	$-2, %rdi
; 	if (x < 512) return bin_tab[x/8-4] + 1;
  40402f: 48 81 ff ff 01 00 00         	cmpq	$511, %rdi
  404036: 48 89 5c 24 08               	movq	%rbx, 8(%rsp)
  40403b: 77 10                        	ja	16 <malloc+0xed>
  40403d: 48 c1 ef 03                  	shrq	$3, %rdi
  404041: 0f b6 8f 7c 78 40 00         	movzbl	4225148(%rdi), %ecx
  404048: 83 c1 01                     	addl	$1, %ecx
  40404b: eb 0e                        	jmp	14 <malloc+0xfb>
; 	return bin_tab[x/128-4] + 17;
  40404d: 48 c1 ef 07                  	shrq	$7, %rdi
  404051: 0f b6 8f 7c 78 40 00         	movzbl	4225148(%rdi), %ecx
  404058: 83 c1 11                     	addl	$17, %ecx
  40405b: 48 c7 c2 ff ff ff ff         	movq	$-1, %rdx
  404062: 48 89 4c 24 18               	movq	%rcx, 24(%rsp)
; 		uint64_t mask = mal.binmap & -(1ULL<<i);
  404067: 48 d3 e2                     	shlq	%cl, %rdx
  40406a: 48 8b 05 b7 56 00 00         	movq	22199(%rip), %rax
  404071: 48 89 54 24 20               	movq	%rdx, 32(%rsp)
; 		if (!mask) {
  404076: 48 21 d0                     	andq	%rdx, %rax
  404079: 75 17                        	jne	23 <malloc+0x132>
  40407b: e9 11 01 00 00               	jmp	273 <malloc+0x231>
  404080: 48 8b 05 a1 56 00 00         	movq	22177(%rip), %rax
  404087: 48 23 44 24 20               	andq	32(%rsp), %rax
  40408c: 0f 84 ff 00 00 00            	je	255 <malloc+0x231>
; 	__asm__( "bsf %1,%0" : "=r"(x) : "r"(x) );
  404092: 4c 0f bc e8                  	bsfq	%rax, %r13
; 	lock(mal.bins[i].lock);
  404096: 4d 63 f5                     	movslq	%r13d, %r14
  404099: 4f 8d 24 76                  	leaq	(%r14,%r14,2), %r12
  40409d: 4a 8d 2c e5 30 97 40 00      	leaq	4233008(,%r12,8), %rbp
; 	if (libc.threads_minus_1)
  4040a5: 83 3d c0 8c 08 00 00         	cmpl	$0, 560320(%rip)
  4040ac: 74 43                        	je	67 <malloc+0x191>
; 	__asm__ __volatile__(
  4040ae: b8 01 00 00 00               	movl	$1, %eax
  4040b3: 87 45 00                     	xchgl	%eax, (%rbp)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  4040b6: 85 c0                        	testl	%eax, %eax
  4040b8: 74 37                        	je	55 <malloc+0x191>
  4040ba: 4a 8d 1c e5 34 97 40 00      	leaq	4233012(,%r12,8), %rbx
  4040c2: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  4040cc: 0f 1f 40 00                  	nopl	(%rax)
  4040d0: 48 89 ef                     	movq	%rbp, %rdi
  4040d3: 48 89 de                     	movq	%rbx, %rsi
  4040d6: ba 01 00 00 00               	movl	$1, %edx
  4040db: b9 01 00 00 00               	movl	$1, %ecx
  4040e0: e8 33 1d 00 00               	callq	7475 <__wait>
; 	__asm__ __volatile__(
  4040e5: b8 01 00 00 00               	movl	$1, %eax
  4040ea: 87 45 00                     	xchgl	%eax, (%rbp)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  4040ed: 85 c0                        	testl	%eax, %eax
  4040ef: 75 df                        	jne	-33 <malloc+0x170>
; 	if (!mal.bins[i].head)
  4040f1: 49 c1 e6 03                  	shlq	$3, %r14
  4040f5: 4f 8b bc 76 38 97 40 00      	movq	4233016(%r14,%r14,2), %r15
  4040fd: 4b 8d 04 76                  	leaq	(%r14,%r14,2), %rax
  404101: 48 05 28 97 40 00            	addq	$4233000, %rax
  404107: 4d 85 ff                     	testq	%r15, %r15
  40410a: 74 64                        	je	100 <malloc+0x210>
; 		if (c != BIN_TO_CHUNK(j)) {
  40410c: 49 39 c7                     	cmpq	%rax, %r15
  40410f: 0f 85 2a 02 00 00            	jne	554 <malloc+0x3df>
; 	if (lk[0]) {
  404115: 83 7d 00 00                  	cmpl	$0, (%rbp)
  404119: 0f 84 61 ff ff ff            	je	-159 <malloc+0x120>
; 	__asm__ __volatile__(
  40411f: 31 c0                        	xorl	%eax, %eax
  404121: 89 45 00                     	movl	%eax, (%rbp)
  404124: f0                           	lock
  404125: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  404129: 42 83 3c e5 34 97 40 00 00   	cmpl	$0, 4233012(,%r12,8)
  404132: 0f 84 48 ff ff ff            	je	-184 <malloc+0x120>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404138: b8 ca 00 00 00               	movl	$202, %eax
  40413d: be 81 00 00 00               	movl	$129, %esi
  404142: ba 01 00 00 00               	movl	$1, %edx
  404147: 48 89 ef                     	movq	%rbp, %rdi
  40414a: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  40414c: 48 83 f8 da                  	cmpq	$-38, %rax
  404150: 0f 85 2a ff ff ff            	jne	-214 <malloc+0x120>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404156: b8 ca 00 00 00               	movl	$202, %eax
  40415b: be 01 00 00 00               	movl	$1, %esi
  404160: ba 01 00 00 00               	movl	$1, %edx
  404165: 48 89 ef                     	movq	%rbp, %rdi
  404168: 0f 05                        	syscall
  40416a: e9 11 ff ff ff               	jmp	-239 <malloc+0x120>
  40416f: 90                           	nop
  404170: 4b 8d 0c 76                  	leaq	(%r14,%r14,2), %rcx
  404174: 48 81 c1 38 97 40 00         	addq	$4233016, %rcx
; 		mal.bins[i].head = mal.bins[i].tail = BIN_TO_CHUNK(i);
  40417b: 4a 89 04 e5 40 97 40 00      	movq	%rax, 4233024(,%r12,8)
  404183: 48 89 01                     	movq	%rax, (%rcx)
; 	if (lk[0]) {
  404186: 83 7d 00 00                  	cmpl	$0, (%rbp)
  40418a: 75 93                        	jne	-109 <malloc+0x1bf>
  40418c: e9 ef fe ff ff               	jmp	-273 <malloc+0x120>
  404191: 4c 8b 74 24 08               	movq	8(%rsp), %r14
; 	n += SIZE_ALIGN;
  404196: 49 8d 46 20                  	leaq	32(%r14), %rax
  40419a: 48 89 44 24 10               	movq	%rax, 16(%rsp)
; 	if (libc.threads_minus_1)
  40419f: 83 3d c6 8b 08 00 00         	cmpl	$0, 560070(%rip)
  4041a6: 74 40                        	je	64 <malloc+0x288>
  4041a8: b8 01 00 00 00               	movl	$1, %eax
; 	__asm__ __volatile__(
  4041ad: 87 05 85 5b 00 00            	xchgl	%eax, 23429(%rip)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  4041b3: 85 c0                        	testl	%eax, %eax
  4041b5: 74 31                        	je	49 <malloc+0x288>
  4041b7: 66 0f 1f 84 00 00 00 00 00   	nopw	(%rax,%rax)
  4041c0: bf 38 9d 40 00               	movl	$4234552, %edi
  4041c5: be 3c 9d 40 00               	movl	$4234556, %esi
  4041ca: ba 01 00 00 00               	movl	$1, %edx
  4041cf: b9 01 00 00 00               	movl	$1, %ecx
  4041d4: e8 3f 1c 00 00               	callq	7231 <__wait>
; 	__asm__ __volatile__(
  4041d9: b8 01 00 00 00               	movl	$1, %eax
  4041de: 87 05 54 5b 00 00            	xchgl	%eax, 23380(%rip)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  4041e4: 85 c0                        	testl	%eax, %eax
  4041e6: 75 d8                        	jne	-40 <malloc+0x260>
  4041e8: 48 8d 7c 24 10               	leaq	16(%rsp), %rdi
; 	p = __expand_heap(&n);
  4041ed: e8 6e 21 00 00               	callq	8558 <__expand_heap>
; 	if (!p) {
  4041f2: 48 85 c0                     	testq	%rax, %rax
  4041f5: 0f 84 eb 00 00 00            	je	235 <malloc+0x386>
  4041fb: 48 89 c3                     	movq	%rax, %rbx
  4041fe: 48 8b 44 24 10               	movq	16(%rsp), %rax
; 	if (p != end) {
  404203: 48 3b 1d 36 5b 00 00         	cmpq	23350(%rip), %rbx
  40420a: 74 15                        	je	21 <malloc+0x2c1>
; 		n -= SIZE_ALIGN;
  40420c: 48 83 c0 e0                  	addq	$-32, %rax
  404210: 48 89 44 24 10               	movq	%rax, 16(%rsp)
; 		w->psize = 0 | C_INUSE;
  404215: 48 c7 43 10 01 00 00 00      	movq	$1, 16(%rbx)
; 		p = (char *)p + SIZE_ALIGN;
  40421d: 48 83 c3 20                  	addq	$32, %rbx
; 	end = (char *)p + n;
  404221: 48 8d 0c 03                  	leaq	(%rbx,%rax), %rcx
  404225: 48 89 0d 14 5b 00 00         	movq	%rcx, 23316(%rip)
; 	w->psize = n | C_INUSE;
  40422c: 48 89 c1                     	movq	%rax, %rcx
  40422f: 48 83 c9 01                  	orq	$1, %rcx
  404233: 48 89 4c 03 f0               	movq	%rcx, -16(%rbx,%rax)
; 	w->csize = 0 | C_INUSE;
  404238: 48 c7 44 03 f8 01 00 00 00   	movq	$1, -8(%rbx,%rax)
; 	w = MEM_TO_CHUNK(p);
  404241: 4c 8d 7b f0                  	leaq	-16(%rbx), %r15
; 	w->csize = n | C_INUSE;
  404245: 48 8b 44 24 10               	movq	16(%rsp), %rax
  40424a: 48 83 c8 01                  	orq	$1, %rax
  40424e: 48 89 43 f8                  	movq	%rax, -8(%rbx)
; 	if (lk[0]) {
  404252: 83 3d df 5a 00 00 00         	cmpl	$0, 23263(%rip)
  404259: 74 48                        	je	72 <malloc+0x343>
  40425b: 31 c0                        	xorl	%eax, %eax
; 	__asm__ __volatile__(
  40425d: 89 05 d5 5a 00 00            	movl	%eax, 23253(%rip)
  404263: f0                           	lock
  404264: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  404268: 83 3d cd 5a 00 00 00         	cmpl	$0, 23245(%rip)
  40426f: 74 32                        	je	50 <malloc+0x343>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404271: b8 ca 00 00 00               	movl	$202, %eax
  404276: bf 38 9d 40 00               	movl	$4234552, %edi
  40427b: be 81 00 00 00               	movl	$129, %esi
  404280: ba 01 00 00 00               	movl	$1, %edx
  404285: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  404287: 48 83 f8 da                  	cmpq	$-38, %rax
  40428b: 75 16                        	jne	22 <malloc+0x343>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40428d: b8 ca 00 00 00               	movl	$202, %eax
  404292: bf 38 9d 40 00               	movl	$4234552, %edi
  404297: be 01 00 00 00               	movl	$1, %esi
  40429c: ba 01 00 00 00               	movl	$1, %edx
  4042a1: 0f 05                        	syscall
; 			if (alloc_rev(c)) {
  4042a3: 4c 89 ff                     	movq	%r15, %rdi
  4042a6: e8 85 02 00 00               	callq	645 <alloc_rev>
  4042ab: 85 c0                        	testl	%eax, %eax
  4042ad: 0f 84 24 02 00 00            	je	548 <malloc+0x577>
; 				c = PREV_CHUNK(c);
  4042b3: 48 8b 43 f0                  	movq	-16(%rbx), %rax
  4042b7: 48 83 e0 fe                  	andq	$-2, %rax
  4042bb: 49 29 c7                     	subq	%rax, %r15
; 					x->csize + CHUNK_SIZE(c);
  4042be: 48 89 d9                     	movq	%rbx, %rcx
  4042c1: 48 29 c1                     	subq	%rax, %rcx
  4042c4: 48 8b 41 f8                  	movq	-8(%rcx), %rax
  4042c8: 48 83 e0 fe                  	andq	$-2, %rax
  4042cc: 48 03 43 f8                  	addq	-8(%rbx), %rax
; 				NEXT_CHUNK(x)->psize = c->csize =
  4042d0: 48 89 41 f8                  	movq	%rax, -8(%rcx)
  4042d4: 48 8b 4b f8                  	movq	-8(%rbx), %rcx
  4042d8: 48 83 e1 fe                  	andq	$-2, %rcx
  4042dc: 48 89 44 0b f0               	movq	%rax, -16(%rbx,%rcx)
  4042e1: e9 f1 01 00 00               	jmp	497 <malloc+0x577>
; 	if (lk[0]) {
  4042e6: 83 3d 4b 5a 00 00 00         	cmpl	$0, 23115(%rip)
  4042ed: 74 48                        	je	72 <malloc+0x3d7>
  4042ef: 31 c0                        	xorl	%eax, %eax
; 	__asm__ __volatile__(
  4042f1: 89 05 41 5a 00 00            	movl	%eax, 23105(%rip)
  4042f7: f0                           	lock
  4042f8: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  4042fc: 83 3d 39 5a 00 00 00         	cmpl	$0, 23097(%rip)
  404303: 74 32                        	je	50 <malloc+0x3d7>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404305: b8 ca 00 00 00               	movl	$202, %eax
  40430a: bf 38 9d 40 00               	movl	$4234552, %edi
  40430f: be 81 00 00 00               	movl	$129, %esi
  404314: ba 01 00 00 00               	movl	$1, %edx
  404319: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  40431b: 48 83 f8 da                  	cmpq	$-38, %rax
  40431f: 75 16                        	jne	22 <malloc+0x3d7>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404321: b8 ca 00 00 00               	movl	$202, %eax
  404326: bf 38 9d 40 00               	movl	$4234552, %edi
  40432b: be 01 00 00 00               	movl	$1, %esi
  404330: ba 01 00 00 00               	movl	$1, %edx
  404335: 0f 05                        	syscall
  404337: 45 31 ff                     	xorl	%r15d, %r15d
  40433a: e9 d8 01 00 00               	jmp	472 <malloc+0x5b7>
; 	if (j < 40) return 0;
  40433f: 41 83 fd 28                  	cmpl	$40, %r13d
  404343: 0f 8c f2 00 00 00            	jl	242 <malloc+0x4db>
  404349: 48 8b 44 24 18               	movq	24(%rsp), %rax
; 	if (j < i+3) {
  40434e: 83 c0 03                     	addl	$3, %eax
  404351: 44 39 e8                     	cmpl	%r13d, %eax
  404354: 7e 28                        	jle	40 <malloc+0x41e>
; 		if (j != 63) return 0;
  404356: 41 83 fd 3f                  	cmpl	$63, %r13d
  40435a: 0f 85 db 00 00 00            	jne	219 <malloc+0x4db>
; 		n1 = CHUNK_SIZE(self);
  404360: 49 8b 47 08                  	movq	8(%r15), %rax
  404364: 48 89 c1                     	movq	%rax, %rcx
  404367: 48 83 e1 fe                  	andq	$-2, %rcx
; 		if (n1-n <= MMAP_THRESHOLD) return 0;
  40436b: 48 2b 4c 24 08               	subq	8(%rsp), %rcx
  404370: 48 81 f9 01 80 03 00         	cmpq	$229377, %rcx
  404377: 73 15                        	jae	21 <malloc+0x42e>
  404379: e9 bd 00 00 00               	jmp	189 <malloc+0x4db>
; 		n1 = CHUNK_SIZE(self);
  40437e: 49 8b 47 08                  	movq	8(%r15), %rax
  404382: 48 89 c1                     	movq	%rax, %rcx
  404385: 48 83 e1 fe                  	andq	$-2, %rcx
; 	if (bin_index(n1-n) != j) return 0;
  404389: 48 2b 4c 24 08               	subq	8(%rsp), %rcx
; 	x = x / SIZE_ALIGN - 1;
  40438e: 48 89 ca                     	movq	%rcx, %rdx
  404391: 48 c1 ea 05                  	shrq	$5, %rdx
  404395: 48 83 c2 ff                  	addq	$-1, %rdx
; 	if (x <= 32) return x;
  404399: 48 83 fa 20                  	cmpq	$32, %rdx
  40439d: 77 0c                        	ja	12 <malloc+0x44b>
  40439f: 89 d6                        	movl	%edx, %esi
; 	if (bin_index(n1-n) != j) return 0;
  4043a1: 44 39 ee                     	cmpl	%r13d, %esi
  4043a4: 74 41                        	je	65 <malloc+0x487>
  4043a6: e9 90 00 00 00               	jmp	144 <malloc+0x4db>
; 	if (x < 512) return bin_tab[x/8-4];
  4043ab: 48 81 fa ff 01 00 00         	cmpq	$511, %rdx
  4043b2: 77 12                        	ja	18 <malloc+0x466>
  4043b4: 48 c1 ea 03                  	shrq	$3, %rdx
  4043b8: 0f b6 b2 7c 78 40 00         	movzbl	4225148(%rdx), %esi
; 	if (bin_index(n1-n) != j) return 0;
  4043bf: 44 39 ee                     	cmpl	%r13d, %esi
  4043c2: 74 23                        	je	35 <malloc+0x487>
  4043c4: eb 75                        	jmp	117 <malloc+0x4db>
  4043c6: be 3f 00 00 00               	movl	$63, %esi
; 	if (x > 0x1c00) return 63;
  4043cb: 48 81 fa 00 1c 00 00         	cmpq	$7168, %rdx
  4043d2: 77 0e                        	ja	14 <malloc+0x482>
; 	return bin_tab[x/128-4] + 16;
  4043d4: 48 c1 ea 07                  	shrq	$7, %rdx
  4043d8: 0f b6 b2 7c 78 40 00         	movzbl	4225148(%rdx), %esi
  4043df: 83 c6 10                     	addl	$16, %esi
; 	if (bin_index(n1-n) != j) return 0;
  4043e2: 44 39 ee                     	cmpl	%r13d, %esi
  4043e5: 75 54                        	jne	84 <malloc+0x4db>
; 	next = NEXT_CHUNK(self);
  4043e7: 48 83 e0 fe                  	andq	$-2, %rax
  4043eb: 4c 8b 74 24 08               	movq	8(%rsp), %r14
; 	split = (void *)((char *)self + n);
  4043f0: 4b 8d 14 37                  	leaq	(%r15,%r14), %rdx
; 	split->next = self->next;
  4043f4: f3 41 0f 6f 47 10            	movdqu	16(%r15), %xmm0
  4043fa: f3 43 0f 7f 44 37 10         	movdqu	%xmm0, 16(%r15,%r14)
; 	split->prev->next = split;
  404401: 66 0f 70 c0 4e               	pshufd	$78, %xmm0, %xmm0
  404406: 66 48 0f 7e c6               	movq	%xmm0, %rsi
  40440b: 48 89 56 10                  	movq	%rdx, 16(%rsi)
; 	split->next->prev = split;
  40440f: 4b 8b 74 37 10               	movq	16(%r15,%r14), %rsi
  404414: 48 89 56 18                  	movq	%rdx, 24(%rsi)
; 	split->psize = n | C_INUSE;
  404418: 4c 89 f2                     	movq	%r14, %rdx
  40441b: 48 83 ca 01                  	orq	$1, %rdx
  40441f: 4b 89 14 37                  	movq	%rdx, (%r15,%r14)
; 	split->csize = n1-n;
  404423: 4b 89 4c 37 08               	movq	%rcx, 8(%r15,%r14)
; 	next->psize = n1-n;
  404428: 49 89 0c 07                  	movq	%rcx, (%r15,%rax)
; 	self->csize = n | C_INUSE;
  40442c: 49 89 57 08                  	movq	%rdx, 8(%r15)
; 	if (lk[0]) {
  404430: 83 7d 00 00                  	cmpl	$0, (%rbp)
  404434: 75 5e                        	jne	94 <malloc+0x534>
  404436: e9 9c 00 00 00               	jmp	156 <malloc+0x577>
; 	if (c->prev == c->next)
  40443b: 49 8b 4f 10                  	movq	16(%r15), %rcx
  40443f: 49 8b 47 18                  	movq	24(%r15), %rax
  404443: 48 39 c8                     	cmpq	%rcx, %rax
  404446: 75 1d                        	jne	29 <malloc+0x505>
  404448: 48 c7 c0 fe ff ff ff         	movq	$-2, %rax
; 		a_and_64(&mal.binmap, ~(1ULL<<i));
  40444f: 44 89 e9                     	movl	%r13d, %ecx
  404452: 48 d3 c0                     	rolq	%cl, %rax
; 	__asm__ __volatile(
  404455: f0                           	lock
  404456: 48 21 05 cb 52 00 00         	andq	%rax, 21195(%rip)
; 	c->prev->next = c->next;
  40445d: 49 8b 4f 10                  	movq	16(%r15), %rcx
  404461: 49 8b 47 18                  	movq	24(%r15), %rax
  404465: 4c 8b 74 24 08               	movq	8(%rsp), %r14
  40446a: 48 89 48 10                  	movq	%rcx, 16(%rax)
; 	c->next->prev = c->prev;
  40446e: 49 8b 4f 10                  	movq	16(%r15), %rcx
  404472: 48 89 41 18                  	movq	%rax, 24(%rcx)
; 	c->csize |= C_INUSE;
  404476: 49 8b 47 08                  	movq	8(%r15), %rax
  40447a: 48 89 c1                     	movq	%rax, %rcx
  40447d: 48 83 c9 01                  	orq	$1, %rcx
  404481: 49 89 4f 08                  	movq	%rcx, 8(%r15)
; 	NEXT_CHUNK(c)->psize |= C_INUSE;
  404485: 48 83 e0 fe                  	andq	$-2, %rax
  404489: 41 80 0c 07 01               	orb	$1, (%r15,%rax)
; 	if (lk[0]) {
  40448e: 83 7d 00 00                  	cmpl	$0, (%rbp)
  404492: 74 43                        	je	67 <malloc+0x577>
  404494: 31 c0                        	xorl	%eax, %eax
; 	__asm__ __volatile__(
  404496: 89 45 00                     	movl	%eax, (%rbp)
  404499: f0                           	lock
  40449a: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  40449e: 42 83 3c e5 34 97 40 00 00   	cmpl	$0, 4233012(,%r12,8)
  4044a7: 74 2e                        	je	46 <malloc+0x577>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4044a9: b8 ca 00 00 00               	movl	$202, %eax
  4044ae: be 81 00 00 00               	movl	$129, %esi
  4044b3: ba 01 00 00 00               	movl	$1, %edx
  4044b8: 48 89 ef                     	movq	%rbp, %rdi
  4044bb: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  4044bd: 48 83 f8 da                  	cmpq	$-38, %rax
  4044c1: 75 14                        	jne	20 <malloc+0x577>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4044c3: b8 ca 00 00 00               	movl	$202, %eax
  4044c8: be 01 00 00 00               	movl	$1, %esi
  4044cd: ba 01 00 00 00               	movl	$1, %edx
  4044d2: 48 89 ef                     	movq	%rbp, %rdi
  4044d5: 0f 05                        	syscall
; 	size_t n1 = CHUNK_SIZE(self);
  4044d7: 49 8b 47 08                  	movq	8(%r15), %rax
  4044db: 48 83 e0 fe                  	andq	$-2, %rax
; 	if (n >= n1 - DONTCARE) return;
  4044df: 48 8d 48 f0                  	leaq	-16(%rax), %rcx
  4044e3: 4c 39 f1                     	cmpq	%r14, %rcx
  4044e6: 76 2b                        	jbe	43 <malloc+0x5b3>
; 	split = (void *)((char *)self + n);
  4044e8: 4b 8d 3c 37                  	leaq	(%r15,%r14), %rdi
; 	split->psize = n | C_INUSE;
  4044ec: 4c 89 f1                     	movq	%r14, %rcx
  4044ef: 48 83 c9 01                  	orq	$1, %rcx
  4044f3: 4b 89 0c 37                  	movq	%rcx, (%r15,%r14)
; 	split->csize = n1-n | C_INUSE;
  4044f7: 48 89 c2                     	movq	%rax, %rdx
  4044fa: 4c 29 f2                     	subq	%r14, %rdx
  4044fd: 48 83 ca 01                  	orq	$1, %rdx
  404501: 4b 89 54 37 08               	movq	%rdx, 8(%r15,%r14)
; 	next->psize = n1-n | C_INUSE;
  404506: 49 89 14 07                  	movq	%rdx, (%r15,%rax)
; 	self->csize = n | C_INUSE;
  40450a: 49 89 4f 08                  	movq	%rcx, 8(%r15)
; 	__bin_chunk(split);
  40450e: e8 9d 07 00 00               	callq	1949 <__bin_chunk>
; 	return CHUNK_TO_MEM(c);
  404513: 49 83 c7 10                  	addq	$16, %r15
; }
  404517: 4c 89 f8                     	movq	%r15, %rax
  40451a: 48 83 c4 28                  	addq	$40, %rsp
  40451e: 5b                           	popq	%rbx
  40451f: 41 5c                        	popq	%r12
  404521: 41 5d                        	popq	%r13
  404523: 41 5e                        	popq	%r14
  404525: 41 5f                        	popq	%r15
  404527: 5d                           	popq	%rbp
  404528: c3                           	retq
  404529: 0f 1f 80 00 00 00 00         	nopl	(%rax)

0000000000404530 alloc_rev:
; {
  404530: 55                           	pushq	%rbp
  404531: 41 57                        	pushq	%r15
  404533: 41 56                        	pushq	%r14
  404535: 53                           	pushq	%rbx
  404536: 50                           	pushq	%rax
; 	while (!((k=c->psize) & C_INUSE)) {
  404537: 48 8b 1f                     	movq	(%rdi), %rbx
  40453a: 45 31 f6                     	xorl	%r14d, %r14d
  40453d: f6 c3 01                     	testb	$1, %bl
  404540: 0f 85 c9 00 00 00            	jne	201 <alloc_rev+0xdf>
  404546: 49 89 ff                     	movq	%rdi, %r15
  404549: 0f 1f 80 00 00 00 00         	nopl	(%rax)
; 	x = x / SIZE_ALIGN - 1;
  404550: 48 89 d8                     	movq	%rbx, %rax
  404553: 48 c1 e8 05                  	shrq	$5, %rax
  404557: 48 83 c0 ff                  	addq	$-1, %rax
; 	if (x <= 32) return x;
  40455b: 48 83 f8 20                  	cmpq	$32, %rax
  40455f: 77 1f                        	ja	31 <alloc_rev+0x50>
  404561: 89 c5                        	movl	%eax, %ebp
; 		lock_bin(i);
  404563: 89 ef                        	movl	%ebp, %edi
  404565: e8 b6 00 00 00               	callq	182 <lock_bin>
; 		if (c->psize == k) {
  40456a: 49 39 1f                     	cmpq	%rbx, (%r15)
  40456d: 75 6d                        	jne	109 <alloc_rev+0xac>
  40456f: e9 7d 00 00 00               	jmp	125 <alloc_rev+0xc1>
  404574: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40457e: 66 90                        	nop
; 	if (x < 512) return bin_tab[x/8-4];
  404580: 48 3d ff 01 00 00            	cmpq	$511, %rax
  404586: 77 28                        	ja	40 <alloc_rev+0x80>
  404588: 48 c1 e8 03                  	shrq	$3, %rax
  40458c: 0f b6 a8 7c 78 40 00         	movzbl	4225148(%rax), %ebp
; 		lock_bin(i);
  404593: 89 ef                        	movl	%ebp, %edi
  404595: e8 86 00 00 00               	callq	134 <lock_bin>
; 		if (c->psize == k) {
  40459a: 49 39 1f                     	cmpq	%rbx, (%r15)
  40459d: 75 3d                        	jne	61 <alloc_rev+0xac>
  40459f: eb 50                        	jmp	80 <alloc_rev+0xc1>
  4045a1: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  4045ab: 0f 1f 44 00 00               	nopl	(%rax,%rax)
  4045b0: bd 3f 00 00 00               	movl	$63, %ebp
; 	if (x > 0x1c00) return 63;
  4045b5: 48 3d 00 1c 00 00            	cmpq	$7168, %rax
  4045bb: 77 13                        	ja	19 <alloc_rev+0xa0>
; 	return bin_tab[x/128-4] + 16;
  4045bd: 48 c1 e8 07                  	shrq	$7, %rax
  4045c1: 0f b6 a8 7c 78 40 00         	movzbl	4225148(%rax), %ebp
  4045c8: 83 c5 10                     	addl	$16, %ebp
  4045cb: 0f 1f 44 00 00               	nopl	(%rax,%rax)
; 		lock_bin(i);
  4045d0: 89 ef                        	movl	%ebp, %edi
  4045d2: e8 49 00 00 00               	callq	73 <lock_bin>
; 		if (c->psize == k) {
  4045d7: 49 39 1f                     	cmpq	%rbx, (%r15)
  4045da: 74 15                        	je	21 <alloc_rev+0xc1>
; 		unlock_bin(i);
  4045dc: 89 ef                        	movl	%ebp, %edi
  4045de: e8 0d 01 00 00               	callq	269 <unlock_bin>
; 	while (!((k=c->psize) & C_INUSE)) {
  4045e3: 49 8b 1f                     	movq	(%r15), %rbx
  4045e6: f6 c3 01                     	testb	$1, %bl
  4045e9: 0f 84 61 ff ff ff            	je	-159 <alloc_rev+0x20>
  4045ef: eb 1e                        	jmp	30 <alloc_rev+0xdf>
; 			unbin(PREV_CHUNK(c), i);
  4045f1: 48 83 e3 fe                  	andq	$-2, %rbx
  4045f5: 49 29 df                     	subq	%rbx, %r15
  4045f8: 4c 89 ff                     	movq	%r15, %rdi
  4045fb: 89 ee                        	movl	%ebp, %esi
  4045fd: e8 9e 00 00 00               	callq	158 <unbin>
; 			unlock_bin(i);
  404602: 89 ef                        	movl	%ebp, %edi
  404604: e8 e7 00 00 00               	callq	231 <unlock_bin>
  404609: 41 be 01 00 00 00            	movl	$1, %r14d
; }
  40460f: 44 89 f0                     	movl	%r14d, %eax
  404612: 48 83 c4 08                  	addq	$8, %rsp
  404616: 5b                           	popq	%rbx
  404617: 41 5e                        	popq	%r14
  404619: 41 5f                        	popq	%r15
  40461b: 5d                           	popq	%rbp
  40461c: c3                           	retq
  40461d: 0f 1f 00                     	nopl	(%rax)

0000000000404620 lock_bin:
; {
  404620: 41 57                        	pushq	%r15
  404622: 41 56                        	pushq	%r14
  404624: 53                           	pushq	%rbx
; 	lock(mal.bins[i].lock);
  404625: 48 63 c7                     	movslq	%edi, %rax
  404628: 4c 8d 3c 40                  	leaq	(%rax,%rax,2), %r15
; 	if (libc.threads_minus_1)
  40462c: 83 3d 39 87 08 00 00         	cmpl	$0, 558905(%rip)
  404633: 74 3b                        	je	59 <lock_bin+0x50>
  404635: 4a 8d 1c fd 30 97 40 00      	leaq	4233008(,%r15,8), %rbx
  40463d: b8 01 00 00 00               	movl	$1, %eax
; 	__asm__ __volatile__(
  404642: 87 03                        	xchgl	%eax, (%rbx)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404644: 85 c0                        	testl	%eax, %eax
  404646: 74 28                        	je	40 <lock_bin+0x50>
  404648: 4e 8d 34 fd 34 97 40 00      	leaq	4233012(,%r15,8), %r14
  404650: 48 89 df                     	movq	%rbx, %rdi
  404653: 4c 89 f6                     	movq	%r14, %rsi
  404656: ba 01 00 00 00               	movl	$1, %edx
  40465b: b9 01 00 00 00               	movl	$1, %ecx
  404660: e8 b3 17 00 00               	callq	6067 <__wait>
; 	__asm__ __volatile__(
  404665: b8 01 00 00 00               	movl	$1, %eax
  40466a: 87 03                        	xchgl	%eax, (%rbx)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  40466c: 85 c0                        	testl	%eax, %eax
  40466e: 75 e0                        	jne	-32 <lock_bin+0x30>
; 	if (!mal.bins[i].head)
  404670: 4a 83 3c fd 38 97 40 00 00   	cmpq	$0, 4233016(,%r15,8)
  404679: 74 06                        	je	6 <lock_bin+0x61>
; }
  40467b: 5b                           	popq	%rbx
  40467c: 41 5e                        	popq	%r14
  40467e: 41 5f                        	popq	%r15
  404680: c3                           	retq
  404681: 4a 8d 04 fd 38 97 40 00      	leaq	4233016(,%r15,8), %rax
; 		mal.bins[i].head = mal.bins[i].tail = BIN_TO_CHUNK(i);
  404689: 48 8d 48 f0                  	leaq	-16(%rax), %rcx
  40468d: 4a 89 0c fd 40 97 40 00      	movq	%rcx, 4233024(,%r15,8)
  404695: 48 89 08                     	movq	%rcx, (%rax)
; }
  404698: 5b                           	popq	%rbx
  404699: 41 5e                        	popq	%r14
  40469b: 41 5f                        	popq	%r15
  40469d: c3                           	retq
  40469e: 66 90                        	nop

00000000004046a0 unbin:
; 	if (c->prev == c->next)
  4046a0: 48 8b 4f 10                  	movq	16(%rdi), %rcx
  4046a4: 48 8b 47 18                  	movq	24(%rdi), %rax
  4046a8: 48 39 c8                     	cmpq	%rcx, %rax
  4046ab: 75 1c                        	jne	28 <unbin+0x29>
  4046ad: 48 c7 c0 fe ff ff ff         	movq	$-2, %rax
; 		a_and_64(&mal.binmap, ~(1ULL<<i));
  4046b4: 89 f1                        	movl	%esi, %ecx
  4046b6: 48 d3 c0                     	rolq	%cl, %rax
; 	__asm__ __volatile(
  4046b9: f0                           	lock
  4046ba: 48 21 05 67 50 00 00         	andq	%rax, 20583(%rip)
; 	c->prev->next = c->next;
  4046c1: 48 8b 4f 10                  	movq	16(%rdi), %rcx
  4046c5: 48 8b 47 18                  	movq	24(%rdi), %rax
  4046c9: 48 89 48 10                  	movq	%rcx, 16(%rax)
; 	c->next->prev = c->prev;
  4046cd: 48 8b 4f 10                  	movq	16(%rdi), %rcx
  4046d1: 48 89 41 18                  	movq	%rax, 24(%rcx)
; 	c->csize |= C_INUSE;
  4046d5: 48 8b 47 08                  	movq	8(%rdi), %rax
  4046d9: 48 89 c1                     	movq	%rax, %rcx
  4046dc: 48 83 c9 01                  	orq	$1, %rcx
  4046e0: 48 89 4f 08                  	movq	%rcx, 8(%rdi)
; 	NEXT_CHUNK(c)->psize |= C_INUSE;
  4046e4: 48 83 e0 fe                  	andq	$-2, %rax
  4046e8: 80 0c 07 01                  	orb	$1, (%rdi,%rax)
; }
  4046ec: c3                           	retq
  4046ed: 0f 1f 00                     	nopl	(%rax)

00000000004046f0 unlock_bin:
; 	unlock(mal.bins[i].lock);
  4046f0: 48 63 c7                     	movslq	%edi, %rax
  4046f3: 48 8d 04 40                  	leaq	(%rax,%rax,2), %rax
; 	if (lk[0]) {
  4046f7: 83 3c c5 30 97 40 00 00      	cmpl	$0, 4233008(,%rax,8)
  4046ff: 74 43                        	je	67 <unlock_bin+0x54>
  404701: 48 8d 3c c5 30 97 40 00      	leaq	4233008(,%rax,8), %rdi
  404709: 31 c9                        	xorl	%ecx, %ecx
; 	__asm__ __volatile__(
  40470b: 89 0f                        	movl	%ecx, (%rdi)
  40470d: f0                           	lock
  40470e: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  404712: 83 3c c5 34 97 40 00 00      	cmpl	$0, 4233012(,%rax,8)
  40471a: 74 28                        	je	40 <unlock_bin+0x54>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40471c: b8 ca 00 00 00               	movl	$202, %eax
  404721: be 81 00 00 00               	movl	$129, %esi
  404726: ba 01 00 00 00               	movl	$1, %edx
  40472b: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  40472d: 48 83 f8 da                  	cmpq	$-38, %rax
  404731: 75 11                        	jne	17 <unlock_bin+0x54>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404733: b8 ca 00 00 00               	movl	$202, %eax
  404738: be 01 00 00 00               	movl	$1, %esi
  40473d: ba 01 00 00 00               	movl	$1, %edx
  404742: 0f 05                        	syscall
; }
  404744: c3                           	retq
  404745: 66 66 2e 0f 1f 84 00 00 00 00 00     	nopw	%cs:(%rax,%rax)

0000000000404750 calloc:
; {
  404750: 41 56                        	pushq	%r14
  404752: 53                           	pushq	%rbx
  404753: 50                           	pushq	%rax
  404754: 48 89 f3                     	movq	%rsi, %rbx
; 	if (n && m > (size_t)-1/n) {
  404757: 48 85 f6                     	testq	%rsi, %rsi
  40475a: 74 1e                        	je	30 <calloc+0x2a>
  40475c: 48 c7 c0 ff ff ff ff         	movq	$-1, %rax
  404763: 31 d2                        	xorl	%edx, %edx
  404765: 48 f7 f3                     	divq	%rbx
  404768: 48 39 f8                     	cmpq	%rdi, %rax
  40476b: 73 0d                        	jae	13 <calloc+0x2a>
; 		errno = ENOMEM;
  40476d: e8 22 f7 ff ff               	callq	-2270 <__errno_location>
  404772: c7 00 0c 00 00 00            	movl	$12, (%rax)
  404778: eb 31                        	jmp	49 <calloc+0x5b>
; 	n *= m;
  40477a: 48 0f af df                  	imulq	%rdi, %rbx
; 	void *p = malloc(n);
  40477e: 48 89 df                     	movq	%rbx, %rdi
  404781: e8 da f7 ff ff               	callq	-2086 <malloc>
; 	if (!p) return p;
  404786: 48 85 c0                     	testq	%rax, %rax
  404789: 74 20                        	je	32 <calloc+0x5b>
  40478b: 49 89 c6                     	movq	%rax, %r14
; 	if (!__malloc_replaced) {
  40478e: 83 3d ab 86 08 00 00         	cmpl	$0, 558763(%rip)
  404795: 74 22                        	je	34 <calloc+0x69>
; 	return memset(p, 0, n);
  404797: 4c 89 f7                     	movq	%r14, %rdi
  40479a: 31 f6                        	xorl	%esi, %esi
  40479c: 48 89 da                     	movq	%rbx, %rdx
  40479f: 48 83 c4 08                  	addq	$8, %rsp
  4047a3: 5b                           	popq	%rbx
  4047a4: 41 5e                        	popq	%r14
  4047a6: e9 91 f2 ff ff               	jmp	-3439 <memset>
  4047ab: 45 31 f6                     	xorl	%r14d, %r14d
; }
  4047ae: 4c 89 f0                     	movq	%r14, %rax
  4047b1: 48 83 c4 08                  	addq	$8, %rsp
  4047b5: 5b                           	popq	%rbx
  4047b6: 41 5e                        	popq	%r14
  4047b8: c3                           	retq
; 		if (IS_MMAPPED(MEM_TO_CHUNK(p)))
  4047b9: 41 f6 46 f8 01               	testb	$1, -8(%r14)
  4047be: 74 ee                        	je	-18 <calloc+0x5e>
; 		if (n >= PAGE_SIZE)
  4047c0: 48 81 fb 00 10 00 00         	cmpq	$4096, %rbx
  4047c7: 72 ce                        	jb	-50 <calloc+0x47>
; 	char *pp = p + n;
  4047c9: 4c 01 f3                     	addq	%r14, %rbx
; 	size_t i = (uintptr_t)pp & (pagesz - 1);
  4047cc: 89 da                        	movl	%ebx, %edx
  4047ce: 81 e2 ff 0f 00 00            	andl	$4095, %edx
; 		pp = memset(pp - i, 0, i);
  4047d4: 48 29 d3                     	subq	%rdx, %rbx
  4047d7: 48 89 df                     	movq	%rbx, %rdi
  4047da: 31 f6                        	xorl	%esi, %esi
  4047dc: e8 5b f2 ff ff               	callq	-3493 <memset>
; 		if (pp - p < pagesz) return pp - p;
  4047e1: 48 89 c3                     	movq	%rax, %rbx
  4047e4: 4c 29 f3                     	subq	%r14, %rbx
  4047e7: 48 81 fb 00 10 00 00         	cmpq	$4096, %rbx
  4047ee: 72 a7                        	jb	-89 <calloc+0x47>
  4047f0: ba 00 10 00 00               	movl	$4096, %edx
; 		        if (((T *)pp)[-1] | ((T *)pp)[-2])
  4047f5: 48 8b 48 f0                  	movq	-16(%rax), %rcx
  4047f9: 48 0b 48 f8                  	orq	-8(%rax), %rcx
  4047fd: 75 11                        	jne	17 <calloc+0xc0>
  4047ff: eb 3e                        	jmp	62 <calloc+0xef>
  404801: 31 d2                        	xorl	%edx, %edx
  404803: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40480d: 0f 1f 00                     	nopl	(%rax)
; 		pp = memset(pp - i, 0, i);
  404810: 48 29 d0                     	subq	%rdx, %rax
  404813: 48 89 c7                     	movq	%rax, %rdi
  404816: 31 f6                        	xorl	%esi, %esi
  404818: e8 1f f2 ff ff               	callq	-3553 <memset>
; 		if (pp - p < pagesz) return pp - p;
  40481d: 48 89 c3                     	movq	%rax, %rbx
  404820: 4c 29 f3                     	subq	%r14, %rbx
  404823: ba 00 10 00 00               	movl	$4096, %edx
  404828: 48 81 fb ff 0f 00 00         	cmpq	$4095, %rbx
  40482f: 0f 86 62 ff ff ff            	jbe	-158 <calloc+0x47>
; 		        if (((T *)pp)[-1] | ((T *)pp)[-2])
  404835: 48 8b 48 f0                  	movq	-16(%rax), %rcx
  404839: 48 0b 48 f8                  	orq	-8(%rax), %rcx
  40483d: 75 d1                        	jne	-47 <calloc+0xc0>
  40483f: 48 83 c0 f0                  	addq	$-16, %rax
; 		for (i = pagesz; i; i -= 2*sizeof(T), pp -= 2*sizeof(T))
  404843: 48 83 c2 f0                  	addq	$-16, %rdx
  404847: 75 ec                        	jne	-20 <calloc+0xe5>
  404849: eb b6                        	jmp	-74 <calloc+0xb1>
  40484b: 0f 1f 44 00 00               	nopl	(%rax,%rax)

0000000000404850 realloc:
; {
  404850: 55                           	pushq	%rbp
  404851: 41 57                        	pushq	%r15
  404853: 41 56                        	pushq	%r14
  404855: 41 55                        	pushq	%r13
  404857: 41 54                        	pushq	%r12
  404859: 53                           	pushq	%rbx
  40485a: 48 83 ec 28                  	subq	$40, %rsp
  40485e: 49 89 f4                     	movq	%rsi, %r12
; 	if (!p) return malloc(n);
  404861: 48 85 ff                     	testq	%rdi, %rdi
  404864: 74 2c                        	je	44 <realloc+0x42>
  404866: 49 89 fd                     	movq	%rdi, %r13
; 	if (*n-1 > PTRDIFF_MAX - SIZE_ALIGN - PAGE_SIZE) {
  404869: 49 8d 44 24 ff               	leaq	-1(%r12), %rax
  40486e: 48 b9 e0 ef ff ff ff ff ff 7f	movabsq	$9223372036854771680, %rcx
  404878: 48 39 c8                     	cmpq	%rcx, %rax
  40487b: 72 2b                        	jb	43 <realloc+0x58>
; 		if (*n) {
  40487d: 4d 85 e4                     	testq	%r12, %r12
  404880: 74 30                        	je	48 <realloc+0x62>
; 			errno = ENOMEM;
  404882: e8 0d f6 ff ff               	callq	-2547 <__errno_location>
  404887: c7 00 0c 00 00 00            	movl	$12, (%rax)
  40488d: e9 7c 03 00 00               	jmp	892 <realloc+0x3be>
; 	if (!p) return malloc(n);
  404892: 4c 89 e7                     	movq	%r12, %rdi
  404895: 48 83 c4 28                  	addq	$40, %rsp
  404899: 5b                           	popq	%rbx
  40489a: 41 5c                        	popq	%r12
  40489c: 41 5d                        	popq	%r13
  40489e: 41 5e                        	popq	%r14
  4048a0: 41 5f                        	popq	%r15
  4048a2: 5d                           	popq	%rbp
  4048a3: e9 b8 f6 ff ff               	jmp	-2376 <malloc>
; 	*n = (*n + OVERHEAD + SIZE_ALIGN - 1) & SIZE_MASK;
  4048a8: 49 83 c4 2f                  	addq	$47, %r12
  4048ac: 49 83 e4 e0                  	andq	$-32, %r12
  4048b0: eb 06                        	jmp	6 <realloc+0x68>
  4048b2: 41 bc 20 00 00 00            	movl	$32, %r12d
; 	self = MEM_TO_CHUNK(p);
  4048b8: 49 8d 4d f0                  	leaq	-16(%r13), %rcx
; 	n1 = n0 = CHUNK_SIZE(self);
  4048bc: 49 8b 45 f8                  	movq	-8(%r13), %rax
  4048c0: 48 89 c2                     	movq	%rax, %rdx
  4048c3: 48 83 e2 fe                  	andq	$-2, %rdx
; 	if (IS_MMAPPED(self)) {
  4048c7: a8 01                        	testb	$1, %al
  4048c9: 48 89 4c 24 10               	movq	%rcx, 16(%rsp)
  4048ce: 48 89 54 24 08               	movq	%rdx, 8(%rsp)
  4048d3: 0f 85 86 00 00 00            	jne	134 <realloc+0x10f>
; 		size_t extra = self->psize;
  4048d9: 4c 8b 39                     	movq	(%rcx), %r15
; 		size_t newlen = n + extra;
  4048dc: 4b 8d 1c 27                  	leaq	(%r15,%r12), %rbx
; 		if (extra & 1) a_crash();
  4048e0: 41 f6 c7 01                  	testb	$1, %r15b
  4048e4: 74 01                        	je	1 <realloc+0x97>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  4048e6: f4                           	hlt
; 		if (newlen < PAGE_SIZE && (new = malloc(n-OVERHEAD))) {
  4048e7: 48 81 fb ff 0f 00 00         	cmpq	$4095, %rbx
  4048ee: 77 19                        	ja	25 <realloc+0xb9>
  4048f0: 4d 8d 74 24 f0               	leaq	-16(%r12), %r14
  4048f5: 4c 89 f7                     	movq	%r14, %rdi
  4048f8: e8 63 f6 ff ff               	callq	-2461 <malloc>
  4048fd: 48 89 c5                     	movq	%rax, %rbp
  404900: 48 85 c0                     	testq	%rax, %rax
  404903: 0f 85 cf 02 00 00            	jne	719 <realloc+0x388>
  404909: 48 8b 44 24 08               	movq	8(%rsp), %rax
  40490e: 49 8d 34 07                  	leaq	(%r15,%rax), %rsi
; 		newlen = (newlen + PAGE_SIZE-1) & -PAGE_SIZE;
  404912: 48 81 c3 ff 0f 00 00         	addq	$4095, %rbx
  404919: 48 81 e3 00 f0 ff ff         	andq	$-4096, %rbx
; 		if (oldlen == newlen) return p;
  404920: 48 39 de                     	cmpq	%rbx, %rsi
  404923: 0f 84 2c 03 00 00            	je	812 <realloc+0x405>
  404929: 48 8b 7c 24 10               	movq	16(%rsp), %rdi
  40492e: 4c 29 ff                     	subq	%r15, %rdi
; 		base = __mremap(base, oldlen, newlen, MREMAP_MAYMOVE);
  404931: 48 89 da                     	movq	%rbx, %rdx
  404934: b9 01 00 00 00               	movl	$1, %ecx
  404939: 31 c0                        	xorl	%eax, %eax
  40493b: e8 95 0b 00 00               	callq	2965 <mremap>
; 		if (base == (void *)-1)
  404940: 48 83 f8 ff                  	cmpq	$-1, %rax
  404944: 0f 84 71 02 00 00            	je	625 <realloc+0x36b>
; 		self->csize = newlen - extra;
  40494a: 4c 29 fb                     	subq	%r15, %rbx
  40494d: 4a 89 5c 38 08               	movq	%rbx, 8(%rax,%r15)
; 		return CHUNK_TO_MEM(self);
  404952: 4a 8d 2c 38                  	leaq	(%rax,%r15), %rbp
  404956: 48 83 c5 10                  	addq	$16, %rbp
  40495a: e9 05 03 00 00               	jmp	773 <realloc+0x414>
  40495f: 4c 89 6c 24 18               	movq	%r13, 24(%rsp)
; 	next = NEXT_CHUNK(self);
  404964: 48 8d 2c 11                  	leaq	(%rcx,%rdx), %rbp
; 	if (next->psize != self->csize) a_crash();
  404968: 48 39 04 11                  	cmpq	%rax, (%rcx,%rdx)
  40496c: 74 01                        	je	1 <realloc+0x11f>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  40496e: f4                           	hlt
  40496f: 48 89 d0                     	movq	%rdx, %rax
; 	if (n > n1 && alloc_fwd(next)) {
  404972: 49 39 d4                     	cmpq	%rdx, %r12
  404975: 0f 86 27 02 00 00            	jbe	551 <realloc+0x352>
; 	while (!((k=c->csize) & C_INUSE)) {
  40497b: 4c 8b 7d 08                  	movq	8(%rbp), %r15
  40497f: 48 8b 44 24 08               	movq	8(%rsp), %rax
  404984: 41 f6 c7 01                  	testb	$1, %r15b
  404988: 0f 85 14 02 00 00            	jne	532 <realloc+0x352>
  40498e: 48 89 6c 24 20               	movq	%rbp, 32(%rsp)
  404993: eb 19                        	jmp	25 <realloc+0x15e>
  404995: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40499f: 90                           	nop
  4049a0: 4c 8b 7d 08                  	movq	8(%rbp), %r15
  4049a4: 41 f6 c7 01                  	testb	$1, %r15b
  4049a8: 0f 85 ef 01 00 00            	jne	495 <realloc+0x34d>
; 	x = x / SIZE_ALIGN - 1;
  4049ae: 4c 89 f8                     	movq	%r15, %rax
  4049b1: 48 c1 e8 05                  	shrq	$5, %rax
  4049b5: 48 83 c0 ff                  	addq	$-1, %rax
; 	if (x <= 32) return x;
  4049b9: 48 83 f8 20                  	cmpq	$32, %rax
  4049bd: 77 11                        	ja	17 <realloc+0x180>
  4049bf: 89 c1                        	movl	%eax, %ecx
  4049c1: eb 4d                        	jmp	77 <realloc+0x1c0>
  4049c3: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  4049cd: 0f 1f 00                     	nopl	(%rax)
; 	if (x < 512) return bin_tab[x/8-4];
  4049d0: 48 3d ff 01 00 00            	cmpq	$511, %rax
  4049d6: 77 18                        	ja	24 <realloc+0x1a0>
  4049d8: 48 c1 e8 03                  	shrq	$3, %rax
  4049dc: 0f b6 88 7c 78 40 00         	movzbl	4225148(%rax), %ecx
  4049e3: eb 2b                        	jmp	43 <realloc+0x1c0>
  4049e5: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  4049ef: 90                           	nop
  4049f0: b9 3f 00 00 00               	movl	$63, %ecx
; 	if (x > 0x1c00) return 63;
  4049f5: 48 3d 00 1c 00 00            	cmpq	$7168, %rax
  4049fb: 77 13                        	ja	19 <realloc+0x1c0>
; 	return bin_tab[x/128-4] + 16;
  4049fd: 48 c1 e8 07                  	shrq	$7, %rax
  404a01: 0f b6 88 7c 78 40 00         	movzbl	4225148(%rax), %ecx
  404a08: 83 c1 10                     	addl	$16, %ecx
  404a0b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
; 	lock(mal.bins[i].lock);
  404a10: 4c 63 e9                     	movslq	%ecx, %r13
  404a13: 4e 8d 34 6d 00 00 00 00      	leaq	(,%r13,2), %r14
  404a1b: 4d 01 ee                     	addq	%r13, %r14
  404a1e: 4a 8d 1c f5 30 97 40 00      	leaq	4233008(,%r14,8), %rbx
; 	if (libc.threads_minus_1)
  404a26: 83 3d 3f 83 08 00 00         	cmpl	$0, 557887(%rip)
  404a2d: 74 41                        	je	65 <realloc+0x220>
; 	__asm__ __volatile__(
  404a2f: b8 01 00 00 00               	movl	$1, %eax
  404a34: 87 03                        	xchgl	%eax, (%rbx)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404a36: 85 c0                        	testl	%eax, %eax
  404a38: 74 36                        	je	54 <realloc+0x220>
  404a3a: 4a 8d 2c f5 34 97 40 00      	leaq	4233012(,%r14,8), %rbp
  404a42: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  404a4c: 0f 1f 40 00                  	nopl	(%rax)
  404a50: 48 89 df                     	movq	%rbx, %rdi
  404a53: 48 89 ee                     	movq	%rbp, %rsi
  404a56: ba 01 00 00 00               	movl	$1, %edx
  404a5b: b9 01 00 00 00               	movl	$1, %ecx
  404a60: e8 b3 13 00 00               	callq	5043 <__wait>
; 	__asm__ __volatile__(
  404a65: b8 01 00 00 00               	movl	$1, %eax
  404a6a: 87 03                        	xchgl	%eax, (%rbx)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404a6c: 85 c0                        	testl	%eax, %eax
  404a6e: 75 e0                        	jne	-32 <realloc+0x200>
; 	if (!mal.bins[i].head)
  404a70: 4a 83 3c f5 38 97 40 00 00   	cmpq	$0, 4233016(,%r14,8)
  404a79: 75 17                        	jne	23 <realloc+0x242>
  404a7b: 4a 8d 04 f5 38 97 40 00      	leaq	4233016(,%r14,8), %rax
; 		mal.bins[i].head = mal.bins[i].tail = BIN_TO_CHUNK(i);
  404a83: 48 8d 48 f0                  	leaq	-16(%rax), %rcx
  404a87: 4a 89 0c f5 40 97 40 00      	movq	%rcx, 4233024(,%r14,8)
  404a8f: 48 89 08                     	movq	%rcx, (%rax)
  404a92: 48 8b 6c 24 20               	movq	32(%rsp), %rbp
; 		if (c->csize == k) {
  404a97: 4c 39 7d 08                  	cmpq	%r15, 8(%rbp)
  404a9b: 74 58                        	je	88 <realloc+0x2a5>
; 	if (lk[0]) {
  404a9d: 83 3b 00                     	cmpl	$0, (%rbx)
  404aa0: 0f 84 fa fe ff ff            	je	-262 <realloc+0x150>
; 	__asm__ __volatile__(
  404aa6: 31 c0                        	xorl	%eax, %eax
  404aa8: 89 03                        	movl	%eax, (%rbx)
  404aaa: f0                           	lock
  404aab: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  404aaf: 42 83 3c f5 34 97 40 00 00   	cmpl	$0, 4233012(,%r14,8)
  404ab8: 0f 84 e2 fe ff ff            	je	-286 <realloc+0x150>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404abe: b8 ca 00 00 00               	movl	$202, %eax
  404ac3: be 81 00 00 00               	movl	$129, %esi
  404ac8: ba 01 00 00 00               	movl	$1, %edx
  404acd: 48 89 df                     	movq	%rbx, %rdi
  404ad0: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  404ad2: 48 83 f8 da                  	cmpq	$-38, %rax
  404ad6: 0f 85 c4 fe ff ff            	jne	-316 <realloc+0x150>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404adc: b8 ca 00 00 00               	movl	$202, %eax
  404ae1: be 01 00 00 00               	movl	$1, %esi
  404ae6: ba 01 00 00 00               	movl	$1, %edx
  404aeb: 48 89 df                     	movq	%rbx, %rdi
  404aee: 0f 05                        	syscall
  404af0: e9 ab fe ff ff               	jmp	-341 <realloc+0x150>
; 	if (c->prev == c->next)
  404af5: 48 8b 4d 10                  	movq	16(%rbp), %rcx
  404af9: 48 8b 45 18                  	movq	24(%rbp), %rax
  404afd: 48 39 c8                     	cmpq	%rcx, %rax
  404b00: 75 21                        	jne	33 <realloc+0x2d3>
  404b02: 48 c7 c0 fe ff ff ff         	movq	$-2, %rax
; 		a_and_64(&mal.binmap, ~(1ULL<<i));
  404b09: 44 89 e9                     	movl	%r13d, %ecx
  404b0c: 48 d3 c0                     	rolq	%cl, %rax
; 	__asm__ __volatile(
  404b0f: f0                           	lock
  404b10: 48 21 05 11 4c 00 00         	andq	%rax, 19473(%rip)
; 	c->csize |= C_INUSE;
  404b17: 4c 8b 7d 08                  	movq	8(%rbp), %r15
; 	c->prev->next = c->next;
  404b1b: 48 8b 4d 10                  	movq	16(%rbp), %rcx
  404b1f: 48 8b 45 18                  	movq	24(%rbp), %rax
  404b23: 48 89 48 10                  	movq	%rcx, 16(%rax)
; 	c->next->prev = c->prev;
  404b27: 48 8b 4d 10                  	movq	16(%rbp), %rcx
  404b2b: 48 89 41 18                  	movq	%rax, 24(%rcx)
; 	c->csize |= C_INUSE;
  404b2f: 4c 89 f8                     	movq	%r15, %rax
  404b32: 48 83 c8 01                  	orq	$1, %rax
  404b36: 48 89 45 08                  	movq	%rax, 8(%rbp)
; 	NEXT_CHUNK(c)->psize |= C_INUSE;
  404b3a: 49 83 e7 fe                  	andq	$-2, %r15
  404b3e: 42 80 4c 3d 00 01            	orb	$1, (%rbp,%r15)
; 	if (lk[0]) {
  404b44: 83 3b 00                     	cmpl	$0, (%rbx)
  404b47: 74 42                        	je	66 <realloc+0x33b>
  404b49: 31 c0                        	xorl	%eax, %eax
; 	__asm__ __volatile__(
  404b4b: 89 03                        	movl	%eax, (%rbx)
  404b4d: f0                           	lock
  404b4e: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  404b52: 42 83 3c f5 34 97 40 00 00   	cmpl	$0, 4233012(,%r14,8)
  404b5b: 74 2e                        	je	46 <realloc+0x33b>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404b5d: b8 ca 00 00 00               	movl	$202, %eax
  404b62: be 81 00 00 00               	movl	$129, %esi
  404b67: ba 01 00 00 00               	movl	$1, %edx
  404b6c: 48 89 df                     	movq	%rbx, %rdi
  404b6f: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  404b71: 48 83 f8 da                  	cmpq	$-38, %rax
  404b75: 75 14                        	jne	20 <realloc+0x33b>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404b77: b8 ca 00 00 00               	movl	$202, %eax
  404b7c: be 01 00 00 00               	movl	$1, %esi
  404b81: ba 01 00 00 00               	movl	$1, %edx
  404b86: 48 89 df                     	movq	%rbx, %rdi
  404b89: 0f 05                        	syscall
; 		n1 += CHUNK_SIZE(next);
  404b8b: 48 8b 45 08                  	movq	8(%rbp), %rax
  404b8f: 48 83 e0 fe                  	andq	$-2, %rax
; 		next = NEXT_CHUNK(next);
  404b93: 48 01 c5                     	addq	%rax, %rbp
; 		n1 += CHUNK_SIZE(next);
  404b96: 48 03 44 24 08               	addq	8(%rsp), %rax
  404b9b: eb 05                        	jmp	5 <realloc+0x352>
  404b9d: 48 8b 44 24 08               	movq	8(%rsp), %rax
; 	self->csize = n1 | C_INUSE;
  404ba2: 48 89 c1                     	movq	%rax, %rcx
  404ba5: 48 83 c9 01                  	orq	$1, %rcx
  404ba9: 4c 8b 6c 24 18               	movq	24(%rsp), %r13
  404bae: 49 89 4d f8                  	movq	%rcx, -8(%r13)
; 	next->psize = n1 | C_INUSE;
  404bb2: 48 89 4d 00                  	movq	%rcx, (%rbp)
; 	if (n <= n1) {
  404bb6: 49 39 c4                     	cmpq	%rax, %r12
  404bb9: 76 57                        	jbe	87 <realloc+0x3c2>
; 	new = malloc(n-OVERHEAD);
  404bbb: 49 83 c4 f0                  	addq	$-16, %r12
  404bbf: 4c 89 e7                     	movq	%r12, %rdi
  404bc2: e8 99 f3 ff ff               	callq	-3175 <malloc>
; 	if (!new) return 0;
  404bc7: 48 85 c0                     	testq	%rax, %rax
  404bca: 74 42                        	je	66 <realloc+0x3be>
  404bcc: 48 89 c5                     	movq	%rax, %rbp
  404bcf: 4c 8b 74 24 08               	movq	8(%rsp), %r14
; 	memcpy(new, p, n0-OVERHEAD);
  404bd4: 49 83 c6 f0                  	addq	$-16, %r14
  404bd8: 48 89 ef                     	movq	%rbp, %rdi
  404bdb: 4c 89 ee                     	movq	%r13, %rsi
  404bde: 4c 89 f2                     	movq	%r14, %rdx
  404be1: e8 fe 11 00 00               	callq	4606 <memcpy>
; 	if (IS_MMAPPED(self))
  404be6: 49 8b 75 f8                  	movq	-8(%r13), %rsi
  404bea: 40 f6 c6 01                  	testb	$1, %sil
  404bee: 75 6a                        	jne	106 <realloc+0x40a>
  404bf0: 48 8b 7c 24 10               	movq	16(%rsp), %rdi
; 	size_t extra = self->psize;
  404bf5: 48 8b 07                     	movq	(%rdi), %rax
; 	char *base = (char *)self - extra;
  404bf8: 48 29 c7                     	subq	%rax, %rdi
; 	size_t len = CHUNK_SIZE(self) + extra;
  404bfb: 48 83 e6 fe                  	andq	$-2, %rsi
  404bff: 48 01 c6                     	addq	%rax, %rsi
; 	if (extra & 1) a_crash();
  404c02: a8 01                        	testb	$1, %al
  404c04: 74 01                        	je	1 <realloc+0x3b7>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  404c06: f4                           	hlt
; 	__munmap(base, len);
  404c07: e8 dd 09 00 00               	callq	2525 <munmap>
  404c0c: eb 56                        	jmp	86 <realloc+0x414>
  404c0e: 31 ed                        	xorl	%ebp, %ebp
  404c10: eb 52                        	jmp	82 <realloc+0x414>
; 	size_t n1 = CHUNK_SIZE(self);
  404c12: 48 83 e0 fe                  	andq	$-2, %rax
; 	if (n >= n1 - DONTCARE) return;
  404c16: 48 8d 48 f0                  	leaq	-16(%rax), %rcx
  404c1a: 4c 39 e1                     	cmpq	%r12, %rcx
  404c1d: 76 36                        	jbe	54 <realloc+0x405>
  404c1f: 48 8b 7c 24 10               	movq	16(%rsp), %rdi
; 	split = (void *)((char *)self + n);
  404c24: 4c 01 e7                     	addq	%r12, %rdi
; 	split->psize = n | C_INUSE;
  404c27: 4c 89 e1                     	movq	%r12, %rcx
  404c2a: 48 83 c9 01                  	orq	$1, %rcx
  404c2e: 4b 89 4c 25 f0               	movq	%rcx, -16(%r13,%r12)
; 	split->csize = n1-n | C_INUSE;
  404c33: 48 89 c2                     	movq	%rax, %rdx
  404c36: 4c 29 e2                     	subq	%r12, %rdx
  404c39: 48 83 ca 01                  	orq	$1, %rdx
  404c3d: 4b 89 54 25 f8               	movq	%rdx, -8(%r13,%r12)
; 	next->psize = n1-n | C_INUSE;
  404c42: 49 89 54 05 f0               	movq	%rdx, -16(%r13,%rax)
; 	self->csize = n | C_INUSE;
  404c47: 49 89 4d f8                  	movq	%rcx, -8(%r13)
; 	__bin_chunk(split);
  404c4b: e8 60 00 00 00               	callq	96 <__bin_chunk>
  404c50: 4c 89 ed                     	movq	%r13, %rbp
  404c53: eb 0f                        	jmp	15 <realloc+0x414>
  404c55: 4c 89 ed                     	movq	%r13, %rbp
  404c58: eb 0a                        	jmp	10 <realloc+0x414>
  404c5a: 48 8b 7c 24 10               	movq	16(%rsp), %rdi
; 		__bin_chunk(self);
  404c5f: e8 4c 00 00 00               	callq	76 <__bin_chunk>
; }
  404c64: 48 89 e8                     	movq	%rbp, %rax
  404c67: 48 83 c4 28                  	addq	$40, %rsp
  404c6b: 5b                           	popq	%rbx
  404c6c: 41 5c                        	popq	%r12
  404c6e: 41 5d                        	popq	%r13
  404c70: 41 5e                        	popq	%r14
  404c72: 41 5f                        	popq	%r15
  404c74: 5d                           	popq	%rbp
  404c75: c3                           	retq
  404c76: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)

0000000000404c80 free:
; 	if (!p) return;
  404c80: 48 85 ff                     	testq	%rdi, %rdi
  404c83: 74 25                        	je	37 <free+0x2a>
; 	if (IS_MMAPPED(self))
  404c85: 48 8b 77 f8                  	movq	-8(%rdi), %rsi
; 	struct chunk *self = MEM_TO_CHUNK(p);
  404c89: 48 83 c7 f0                  	addq	$-16, %rdi
; 	if (IS_MMAPPED(self))
  404c8d: 40 f6 c6 01                  	testb	$1, %sil
  404c91: 75 18                        	jne	24 <free+0x2b>
; 	size_t extra = self->psize;
  404c93: 48 8b 07                     	movq	(%rdi), %rax
; 	char *base = (char *)self - extra;
  404c96: 48 29 c7                     	subq	%rax, %rdi
; 	size_t len = CHUNK_SIZE(self) + extra;
  404c99: 48 83 e6 fe                  	andq	$-2, %rsi
  404c9d: 48 01 c6                     	addq	%rax, %rsi
; 	if (extra & 1) a_crash();
  404ca0: a8 01                        	testb	$1, %al
  404ca2: 74 01                        	je	1 <free+0x25>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  404ca4: f4                           	hlt
; 	__munmap(base, len);
  404ca5: e9 3f 09 00 00               	jmp	2367 <munmap>
; }
  404caa: c3                           	retq
; 		__bin_chunk(self);
  404cab: e9 00 00 00 00               	jmp	0 <__bin_chunk>

0000000000404cb0 __bin_chunk:
; {
  404cb0: 55                           	pushq	%rbp
  404cb1: 41 57                        	pushq	%r15
  404cb3: 41 56                        	pushq	%r14
  404cb5: 41 55                        	pushq	%r13
  404cb7: 41 54                        	pushq	%r12
  404cb9: 53                           	pushq	%rbx
  404cba: 48 83 ec 28                  	subq	$40, %rsp
; 	struct chunk *next = NEXT_CHUNK(self);
  404cbe: 48 8b 47 08                  	movq	8(%rdi), %rax
  404cc2: 48 89 c1                     	movq	%rax, %rcx
  404cc5: 48 83 e1 fe                  	andq	$-2, %rcx
  404cc9: 48 89 4c 24 20               	movq	%rcx, 32(%rsp)
; 	if (next->psize != self->csize) a_crash();
  404cce: 48 39 04 0f                  	cmpq	%rax, (%rdi,%rcx)
  404cd2: 74 01                        	je	1 <__bin_chunk+0x25>
; 	__asm__ __volatile__( "hlt" : : : "memory" );
  404cd4: f4                           	hlt
  404cd5: 48 89 7c 24 10               	movq	%rdi, 16(%rsp)
  404cda: 48 8b 4c 24 20               	movq	32(%rsp), %rcx
  404cdf: 4c 8d 3c 0f                  	leaq	(%rdi,%rcx), %r15
  404ce3: 31 c0                        	xorl	%eax, %eax
  404ce5: 48 89 4c 24 18               	movq	%rcx, 24(%rsp)
  404cea: eb 3e                        	jmp	62 <__bin_chunk+0x7a>
  404cec: 0f 1f 40 00                  	nopl	(%rax)
; 			size = CHUNK_SIZE(next);
  404cf0: 49 8b 4f 08                  	movq	8(%r15), %rcx
  404cf4: 48 83 e1 fe                  	andq	$-2, %rcx
; 			final_size += size;
  404cf8: 48 01 4c 24 18               	addq	%rcx, 24(%rsp)
  404cfd: 48 8b 44 24 20               	movq	32(%rsp), %rax
; 			if (new_size+size > RECLAIM && (new_size+size^size) > size)
  404d02: 48 8d 14 01                  	leaq	(%rcx,%rax), %rdx
  404d06: 48 89 d0                     	movq	%rdx, %rax
  404d09: 48 31 c8                     	xorq	%rcx, %rax
  404d0c: 48 39 c8                     	cmpq	%rcx, %rax
  404d0f: 8b 74 24 0c                  	movl	12(%rsp), %esi
  404d13: 89 f0                        	movl	%esi, %eax
  404d15: bf 01 00 00 00               	movl	$1, %edi
  404d1a: 0f 47 c7                     	cmoval	%edi, %eax
  404d1d: 48 81 fa 00 80 02 00         	cmpq	$163840, %rdx
  404d24: 0f 46 c6                     	cmovbel	%esi, %eax
; 			next = NEXT_CHUNK(next);
  404d27: 49 01 cf                     	addq	%rcx, %r15
  404d2a: 89 44 24 0c                  	movl	%eax, 12(%rsp)
  404d2e: 48 8b 44 24 10               	movq	16(%rsp), %rax
; 		if (self->psize & next->csize & C_INUSE) {
  404d33: 8b 00                        	movl	(%rax), %eax
  404d35: 41 23 47 08                  	andl	8(%r15), %eax
  404d39: a8 01                        	testb	$1, %al
  404d3b: 0f 84 df 01 00 00            	je	479 <__bin_chunk+0x270>
  404d41: 48 8b 54 24 18               	movq	24(%rsp), %rdx
; 			self->csize = final_size | C_INUSE;
  404d46: 48 89 d0                     	movq	%rdx, %rax
  404d49: 48 83 c8 01                  	orq	$1, %rax
  404d4d: 48 8b 4c 24 10               	movq	16(%rsp), %rcx
  404d52: 48 89 41 08                  	movq	%rax, 8(%rcx)
; 			next->psize = final_size | C_INUSE;
  404d56: 49 89 07                     	movq	%rax, (%r15)
; 	x = x / SIZE_ALIGN - 1;
  404d59: 48 89 d0                     	movq	%rdx, %rax
  404d5c: 48 c1 e8 05                  	shrq	$5, %rax
  404d60: 48 83 c0 ff                  	addq	$-1, %rax
; 	if (x <= 32) return x;
  404d64: 48 83 f8 20                  	cmpq	$32, %rax
  404d68: 77 06                        	ja	6 <__bin_chunk+0xc0>
  404d6a: 89 c1                        	movl	%eax, %ecx
  404d6c: eb 32                        	jmp	50 <__bin_chunk+0xf0>
  404d6e: 66 90                        	nop
; 	if (x < 512) return bin_tab[x/8-4];
  404d70: 48 3d ff 01 00 00            	cmpq	$511, %rax
  404d76: 77 0d                        	ja	13 <__bin_chunk+0xd5>
  404d78: 48 c1 e8 03                  	shrq	$3, %rax
  404d7c: 0f b6 88 7c 78 40 00         	movzbl	4225148(%rax), %ecx
  404d83: eb 1b                        	jmp	27 <__bin_chunk+0xf0>
  404d85: b9 3f 00 00 00               	movl	$63, %ecx
; 	if (x > 0x1c00) return 63;
  404d8a: 48 3d 00 1c 00 00            	cmpq	$7168, %rax
  404d90: 77 0e                        	ja	14 <__bin_chunk+0xf0>
; 	return bin_tab[x/128-4] + 16;
  404d92: 48 c1 e8 07                  	shrq	$7, %rax
  404d96: 0f b6 88 7c 78 40 00         	movzbl	4225148(%rax), %ecx
  404d9d: 83 c1 10                     	addl	$16, %ecx
; 	lock(mal.bins[i].lock);
  404da0: 4c 63 e1                     	movslq	%ecx, %r12
  404da3: 4b 8d 2c 64                  	leaq	(%r12,%r12,2), %rbp
  404da7: 4c 8d 2c ed 30 97 40 00      	leaq	4233008(,%rbp,8), %r13
; 	if (libc.threads_minus_1)
  404daf: 83 3d b6 7f 08 00 00         	cmpl	$0, 556982(%rip)
  404db6: 74 3a                        	je	58 <__bin_chunk+0x142>
; 	__asm__ __volatile__(
  404db8: b8 01 00 00 00               	movl	$1, %eax
  404dbd: 41 87 45 00                  	xchgl	%eax, (%r13)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404dc1: 85 c0                        	testl	%eax, %eax
  404dc3: 74 2d                        	je	45 <__bin_chunk+0x142>
  404dc5: 48 8d 1c ed 34 97 40 00      	leaq	4233012(,%rbp,8), %rbx
  404dcd: 0f 1f 00                     	nopl	(%rax)
  404dd0: 4c 89 ef                     	movq	%r13, %rdi
  404dd3: 48 89 de                     	movq	%rbx, %rsi
  404dd6: ba 01 00 00 00               	movl	$1, %edx
  404ddb: b9 01 00 00 00               	movl	$1, %ecx
  404de0: e8 33 10 00 00               	callq	4147 <__wait>
; 	__asm__ __volatile__(
  404de5: b8 01 00 00 00               	movl	$1, %eax
  404dea: 41 87 45 00                  	xchgl	%eax, (%r13)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404dee: 85 c0                        	testl	%eax, %eax
  404df0: 75 de                        	jne	-34 <__bin_chunk+0x120>
; 	if (!mal.bins[i].head)
  404df2: 48 8d 1c ed 38 97 40 00      	leaq	4233016(,%rbp,8), %rbx
  404dfa: 48 83 3c ed 38 97 40 00 00   	cmpq	$0, 4233016(,%rbp,8)
  404e03: 74 0b                        	je	11 <__bin_chunk+0x160>
; 	if (libc.threads_minus_1)
  404e05: 83 3d 60 7f 08 00 00         	cmpl	$0, 556896(%rip)
  404e0c: 75 1a                        	jne	26 <__bin_chunk+0x178>
  404e0e: eb 58                        	jmp	88 <__bin_chunk+0x1b8>
; 		mal.bins[i].head = mal.bins[i].tail = BIN_TO_CHUNK(i);
  404e10: 48 8d 43 f0                  	leaq	-16(%rbx), %rax
  404e14: 48 89 04 ed 40 97 40 00      	movq	%rax, 4233024(,%rbp,8)
  404e1c: 48 89 03                     	movq	%rax, (%rbx)
; 	if (libc.threads_minus_1)
  404e1f: 83 3d 46 7f 08 00 00         	cmpl	$0, 556870(%rip)
  404e26: 74 40                        	je	64 <__bin_chunk+0x1b8>
; 	__asm__ __volatile__(
  404e28: b8 01 00 00 00               	movl	$1, %eax
  404e2d: 87 05 fd 4e 00 00            	xchgl	%eax, 20221(%rip)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404e33: 85 c0                        	testl	%eax, %eax
  404e35: 74 31                        	je	49 <__bin_chunk+0x1b8>
  404e37: 66 0f 1f 84 00 00 00 00 00   	nopw	(%rax,%rax)
  404e40: bf 30 9d 40 00               	movl	$4234544, %edi
  404e45: be 34 9d 40 00               	movl	$4234548, %esi
  404e4a: ba 01 00 00 00               	movl	$1, %edx
  404e4f: b9 01 00 00 00               	movl	$1, %ecx
  404e54: e8 bf 0f 00 00               	callq	4031 <__wait>
; 	__asm__ __volatile__(
  404e59: b8 01 00 00 00               	movl	$1, %eax
  404e5e: 87 05 cc 4e 00 00            	xchgl	%eax, 20172(%rip)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404e64: 85 c0                        	testl	%eax, %eax
  404e66: 75 d8                        	jne	-40 <__bin_chunk+0x190>
  404e68: 48 8b 44 24 10               	movq	16(%rsp), %rax
; 			if (self->psize & next->csize & C_INUSE)
  404e6d: 8b 00                        	movl	(%rax), %eax
  404e6f: 41 23 47 08                  	andl	8(%r15), %eax
  404e73: a8 01                        	testb	$1, %al
  404e75: 0f 85 1f 03 00 00            	jne	799 <__bin_chunk+0x4ea>
; 	if (lk[0]) {
  404e7b: 83 3d ae 4e 00 00 00         	cmpl	$0, 20142(%rip)
  404e82: 74 4c                        	je	76 <__bin_chunk+0x220>
; 	__asm__ __volatile__(
  404e84: 31 c0                        	xorl	%eax, %eax
  404e86: 89 05 a4 4e 00 00            	movl	%eax, 20132(%rip)
  404e8c: f0                           	lock
  404e8d: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  404e91: 83 3d 9c 4e 00 00 00         	cmpl	$0, 20124(%rip)
  404e98: 74 36                        	je	54 <__bin_chunk+0x220>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404e9a: b8 ca 00 00 00               	movl	$202, %eax
  404e9f: bf 30 9d 40 00               	movl	$4234544, %edi
  404ea4: be 81 00 00 00               	movl	$129, %esi
  404ea9: ba 01 00 00 00               	movl	$1, %edx
  404eae: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  404eb0: 48 83 f8 da                  	cmpq	$-38, %rax
  404eb4: 75 1a                        	jne	26 <__bin_chunk+0x220>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404eb6: b8 ca 00 00 00               	movl	$202, %eax
  404ebb: bf 30 9d 40 00               	movl	$4234544, %edi
  404ec0: be 01 00 00 00               	movl	$1, %esi
  404ec5: ba 01 00 00 00               	movl	$1, %edx
  404eca: 0f 05                        	syscall
  404ecc: 0f 1f 40 00                  	nopl	(%rax)
; 	if (lk[0]) {
  404ed0: 41 83 7d 00 00               	cmpl	$0, (%r13)
  404ed5: 74 49                        	je	73 <__bin_chunk+0x270>
; 	__asm__ __volatile__(
  404ed7: 31 c0                        	xorl	%eax, %eax
  404ed9: 41 89 45 00                  	movl	%eax, (%r13)
  404edd: f0                           	lock
  404ede: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  404ee2: 83 3c ed 34 97 40 00 00      	cmpl	$0, 4233012(,%rbp,8)
  404eea: 74 34                        	je	52 <__bin_chunk+0x270>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404eec: b8 ca 00 00 00               	movl	$202, %eax
  404ef1: be 81 00 00 00               	movl	$129, %esi
  404ef6: ba 01 00 00 00               	movl	$1, %edx
  404efb: 4c 89 ef                     	movq	%r13, %rdi
  404efe: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  404f00: 48 83 f8 da                  	cmpq	$-38, %rax
  404f04: 75 1a                        	jne	26 <__bin_chunk+0x270>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404f06: b8 ca 00 00 00               	movl	$202, %eax
  404f0b: be 01 00 00 00               	movl	$1, %esi
  404f10: ba 01 00 00 00               	movl	$1, %edx
  404f15: 4c 89 ef                     	movq	%r13, %rdi
  404f18: 0f 05                        	syscall
  404f1a: 66 0f 1f 44 00 00            	nopw	(%rax,%rax)
  404f20: 48 8b 5c 24 10               	movq	16(%rsp), %rbx
; 		if (alloc_rev(self)) {
  404f25: 48 89 df                     	movq	%rbx, %rdi
  404f28: e8 03 f6 ff ff               	callq	-2557 <alloc_rev>
  404f2d: 85 c0                        	testl	%eax, %eax
  404f2f: 74 5f                        	je	95 <__bin_chunk+0x2e0>
; 			self = PREV_CHUNK(self);
  404f31: 48 8b 03                     	movq	(%rbx), %rax
  404f34: 48 83 e0 fe                  	andq	$-2, %rax
  404f38: 48 89 d9                     	movq	%rbx, %rcx
  404f3b: 48 29 c1                     	subq	%rax, %rcx
; 			size = CHUNK_SIZE(self);
  404f3e: 48 f7 d8                     	negq	%rax
  404f41: 48 8b 44 03 08               	movq	8(%rbx,%rax), %rax
  404f46: 48 83 e0 fe                  	andq	$-2, %rax
; 			final_size += size;
  404f4a: 48 01 44 24 18               	addq	%rax, 24(%rsp)
  404f4f: 48 8b 54 24 20               	movq	32(%rsp), %rdx
; 			if (new_size+size > RECLAIM && (new_size+size^size) > size)
  404f54: 48 01 c2                     	addq	%rax, %rdx
  404f57: 48 89 d6                     	movq	%rdx, %rsi
  404f5a: 48 31 c6                     	xorq	%rax, %rsi
  404f5d: 48 39 c6                     	cmpq	%rax, %rsi
  404f60: 8b 74 24 0c                  	movl	12(%rsp), %esi
  404f64: 89 f0                        	movl	%esi, %eax
  404f66: bf 01 00 00 00               	movl	$1, %edi
  404f6b: 0f 47 c7                     	cmoval	%edi, %eax
  404f6e: 48 81 fa 00 80 02 00         	cmpq	$163840, %rdx
  404f75: 0f 47 f0                     	cmoval	%eax, %esi
  404f78: 89 74 24 0c                  	movl	%esi, 12(%rsp)
  404f7c: 48 89 4c 24 10               	movq	%rcx, 16(%rsp)
  404f81: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  404f8b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
; 	while (!((k=c->csize) & C_INUSE)) {
  404f90: 49 8b 6f 08                  	movq	8(%r15), %rbp
  404f94: 40 f6 c5 01                  	testb	$1, %bpl
  404f98: 0f 85 90 fd ff ff            	jne	-624 <__bin_chunk+0x7e>
; 	x = x / SIZE_ALIGN - 1;
  404f9e: 48 89 e8                     	movq	%rbp, %rax
  404fa1: 48 c1 e8 05                  	shrq	$5, %rax
  404fa5: 48 83 c0 ff                  	addq	$-1, %rax
; 	if (x <= 32) return x;
  404fa9: 48 83 f8 20                  	cmpq	$32, %rax
  404fad: 77 11                        	ja	17 <__bin_chunk+0x310>
  404faf: 89 c1                        	movl	%eax, %ecx
  404fb1: eb 4d                        	jmp	77 <__bin_chunk+0x350>
  404fb3: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  404fbd: 0f 1f 00                     	nopl	(%rax)
; 	if (x < 512) return bin_tab[x/8-4];
  404fc0: 48 3d ff 01 00 00            	cmpq	$511, %rax
  404fc6: 77 18                        	ja	24 <__bin_chunk+0x330>
  404fc8: 48 c1 e8 03                  	shrq	$3, %rax
  404fcc: 0f b6 88 7c 78 40 00         	movzbl	4225148(%rax), %ecx
  404fd3: eb 2b                        	jmp	43 <__bin_chunk+0x350>
  404fd5: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  404fdf: 90                           	nop
  404fe0: b9 3f 00 00 00               	movl	$63, %ecx
; 	if (x > 0x1c00) return 63;
  404fe5: 48 3d 00 1c 00 00            	cmpq	$7168, %rax
  404feb: 77 13                        	ja	19 <__bin_chunk+0x350>
; 	return bin_tab[x/128-4] + 16;
  404fed: 48 c1 e8 07                  	shrq	$7, %rax
  404ff1: 0f b6 88 7c 78 40 00         	movzbl	4225148(%rax), %ecx
  404ff8: 83 c1 10                     	addl	$16, %ecx
  404ffb: 0f 1f 44 00 00               	nopl	(%rax,%rax)
; 	lock(mal.bins[i].lock);
  405000: 4c 63 e1                     	movslq	%ecx, %r12
  405003: 4f 8d 34 64                  	leaq	(%r12,%r12,2), %r14
  405007: 4e 8d 2c f5 30 97 40 00      	leaq	4233008(,%r14,8), %r13
; 	if (libc.threads_minus_1)
  40500f: 83 3d 56 7d 08 00 00         	cmpl	$0, 556374(%rip)
  405016: 74 3a                        	je	58 <__bin_chunk+0x3a2>
; 	__asm__ __volatile__(
  405018: b8 01 00 00 00               	movl	$1, %eax
  40501d: 41 87 45 00                  	xchgl	%eax, (%r13)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  405021: 85 c0                        	testl	%eax, %eax
  405023: 74 2d                        	je	45 <__bin_chunk+0x3a2>
  405025: 4a 8d 1c f5 34 97 40 00      	leaq	4233012(,%r14,8), %rbx
  40502d: 0f 1f 00                     	nopl	(%rax)
  405030: 4c 89 ef                     	movq	%r13, %rdi
  405033: 48 89 de                     	movq	%rbx, %rsi
  405036: ba 01 00 00 00               	movl	$1, %edx
  40503b: b9 01 00 00 00               	movl	$1, %ecx
  405040: e8 d3 0d 00 00               	callq	3539 <__wait>
; 	__asm__ __volatile__(
  405045: b8 01 00 00 00               	movl	$1, %eax
  40504a: 41 87 45 00                  	xchgl	%eax, (%r13)
; 		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  40504e: 85 c0                        	testl	%eax, %eax
  405050: 75 de                        	jne	-34 <__bin_chunk+0x380>
; 	if (!mal.bins[i].head)
  405052: 4a 83 3c f5 38 97 40 00 00   	cmpq	$0, 4233016(,%r14,8)
  40505b: 75 17                        	jne	23 <__bin_chunk+0x3c4>
  40505d: 4a 8d 04 f5 38 97 40 00      	leaq	4233016(,%r14,8), %rax
; 		mal.bins[i].head = mal.bins[i].tail = BIN_TO_CHUNK(i);
  405065: 48 8d 48 f0                  	leaq	-16(%rax), %rcx
  405069: 4a 89 0c f5 40 97 40 00      	movq	%rcx, 4233024(,%r14,8)
  405071: 48 89 08                     	movq	%rcx, (%rax)
; 		if (c->csize == k) {
  405074: 49 39 6f 08                  	cmpq	%rbp, 8(%r15)
  405078: 74 76                        	je	118 <__bin_chunk+0x440>
; 	if (lk[0]) {
  40507a: 41 83 7d 00 00               	cmpl	$0, (%r13)
  40507f: 0f 84 0b ff ff ff            	je	-245 <__bin_chunk+0x2e0>
; 	__asm__ __volatile__(
  405085: 31 c0                        	xorl	%eax, %eax
  405087: 41 89 45 00                  	movl	%eax, (%r13)
  40508b: f0                           	lock
  40508c: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  405090: 42 83 3c f5 34 97 40 00 00   	cmpl	$0, 4233012(,%r14,8)
  405099: 0f 84 f1 fe ff ff            	je	-271 <__bin_chunk+0x2e0>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40509f: b8 ca 00 00 00               	movl	$202, %eax
  4050a4: be 81 00 00 00               	movl	$129, %esi
  4050a9: ba 01 00 00 00               	movl	$1, %edx
  4050ae: 4c 89 ef                     	movq	%r13, %rdi
  4050b1: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  4050b3: 48 83 f8 da                  	cmpq	$-38, %rax
  4050b7: 0f 85 d3 fe ff ff            	jne	-301 <__bin_chunk+0x2e0>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4050bd: b8 ca 00 00 00               	movl	$202, %eax
  4050c2: be 01 00 00 00               	movl	$1, %esi
  4050c7: ba 01 00 00 00               	movl	$1, %edx
  4050cc: 4c 89 ef                     	movq	%r13, %rdi
  4050cf: 0f 05                        	syscall
; 	while (!((k=c->csize) & C_INUSE)) {
  4050d1: 49 8b 6f 08                  	movq	8(%r15), %rbp
  4050d5: 40 f6 c5 01                  	testb	$1, %bpl
  4050d9: 0f 84 bf fe ff ff            	je	-321 <__bin_chunk+0x2ee>
  4050df: e9 4a fc ff ff               	jmp	-950 <__bin_chunk+0x7e>
  4050e4: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  4050ee: 66 90                        	nop
; 	if (c->prev == c->next)
  4050f0: 49 8b 4f 10                  	movq	16(%r15), %rcx
  4050f4: 49 8b 47 18                  	movq	24(%r15), %rax
  4050f8: 48 39 c8                     	cmpq	%rcx, %rax
  4050fb: 75 21                        	jne	33 <__bin_chunk+0x46e>
; 		a_and_64(&mal.binmap, ~(1ULL<<i));
  4050fd: 48 c7 c0 fe ff ff ff         	movq	$-2, %rax
  405104: 44 89 e1                     	movl	%r12d, %ecx
  405107: 48 d3 c0                     	rolq	%cl, %rax
; 	__asm__ __volatile(
  40510a: f0                           	lock
  40510b: 48 21 05 16 46 00 00         	andq	%rax, 17942(%rip)
; 	c->csize |= C_INUSE;
  405112: 49 8b 6f 08                  	movq	8(%r15), %rbp
; 	c->prev->next = c->next;
  405116: 49 8b 4f 10                  	movq	16(%r15), %rcx
  40511a: 49 8b 47 18                  	movq	24(%r15), %rax
  40511e: 48 89 48 10                  	movq	%rcx, 16(%rax)
; 	c->next->prev = c->prev;
  405122: 49 8b 4f 10                  	movq	16(%r15), %rcx
  405126: 48 89 41 18                  	movq	%rax, 24(%rcx)
; 	c->csize |= C_INUSE;
  40512a: 48 89 e8                     	movq	%rbp, %rax
  40512d: 48 83 c8 01                  	orq	$1, %rax
  405131: 49 89 47 08                  	movq	%rax, 8(%r15)
; 	NEXT_CHUNK(c)->psize |= C_INUSE;
  405135: 48 83 e5 fe                  	andq	$-2, %rbp
  405139: 41 80 0c 2f 01               	orb	$1, (%r15,%rbp)
; 	if (lk[0]) {
  40513e: 41 83 7d 00 00               	cmpl	$0, (%r13)
  405143: 0f 84 a7 fb ff ff            	je	-1113 <__bin_chunk+0x40>
; 	__asm__ __volatile__(
  405149: 31 c0                        	xorl	%eax, %eax
  40514b: 41 89 45 00                  	movl	%eax, (%r13)
  40514f: f0                           	lock
  405150: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  405154: 42 83 3c f5 34 97 40 00 00   	cmpl	$0, 4233012(,%r14,8)
  40515d: 0f 84 8d fb ff ff            	je	-1139 <__bin_chunk+0x40>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405163: b8 ca 00 00 00               	movl	$202, %eax
  405168: be 81 00 00 00               	movl	$129, %esi
  40516d: ba 01 00 00 00               	movl	$1, %edx
  405172: 4c 89 ef                     	movq	%r13, %rdi
  405175: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  405177: 48 83 f8 da                  	cmpq	$-38, %rax
  40517b: 0f 85 6f fb ff ff            	jne	-1169 <__bin_chunk+0x40>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405181: b8 ca 00 00 00               	movl	$202, %eax
  405186: be 01 00 00 00               	movl	$1, %esi
  40518b: ba 01 00 00 00               	movl	$1, %edx
  405190: 4c 89 ef                     	movq	%r13, %rdi
  405193: 0f 05                        	syscall
  405195: e9 56 fb ff ff               	jmp	-1194 <__bin_chunk+0x40>
; 	if (!(mal.binmap & 1ULL<<i))
  40519a: 48 8b 15 87 45 00 00         	movq	17799(%rip), %rdx
  4051a1: b8 01 00 00 00               	movl	$1, %eax
  4051a6: 44 89 e1                     	movl	%r12d, %ecx
  4051a9: 48 d3 e0                     	shlq	%cl, %rax
  4051ac: 4c 0f a3 e2                  	btq	%r12, %rdx
  4051b0: 72 08                        	jb	8 <__bin_chunk+0x50a>
; 	__asm__ __volatile__(
  4051b2: f0                           	lock
  4051b3: 48 09 05 6e 45 00 00         	orq	%rax, 17774(%rip)
  4051ba: 48 8b 44 24 10               	movq	16(%rsp), %rax
  4051bf: 48 8b 4c 24 18               	movq	24(%rsp), %rcx
; 	self->csize = final_size;
  4051c4: 48 89 48 08                  	movq	%rcx, 8(%rax)
; 	next->psize = final_size;
  4051c8: 49 89 0f                     	movq	%rcx, (%r15)
; 	if (lk[0]) {
  4051cb: 83 3d 5e 4b 00 00 00         	cmpl	$0, 19294(%rip)
  4051d2: 74 48                        	je	72 <__bin_chunk+0x56c>
  4051d4: 31 c0                        	xorl	%eax, %eax
; 	__asm__ __volatile__(
  4051d6: 89 05 54 4b 00 00            	movl	%eax, 19284(%rip)
  4051dc: f0                           	lock
  4051dd: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  4051e1: 83 3d 4c 4b 00 00 00         	cmpl	$0, 19276(%rip)
  4051e8: 74 32                        	je	50 <__bin_chunk+0x56c>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4051ea: b8 ca 00 00 00               	movl	$202, %eax
  4051ef: bf 30 9d 40 00               	movl	$4234544, %edi
  4051f4: be 81 00 00 00               	movl	$129, %esi
  4051f9: ba 01 00 00 00               	movl	$1, %edx
  4051fe: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  405200: 48 83 f8 da                  	cmpq	$-38, %rax
  405204: 75 16                        	jne	22 <__bin_chunk+0x56c>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405206: b8 ca 00 00 00               	movl	$202, %eax
  40520b: bf 30 9d 40 00               	movl	$4234544, %edi
  405210: be 01 00 00 00               	movl	$1, %esi
  405215: ba 01 00 00 00               	movl	$1, %edx
  40521a: 0f 05                        	syscall
; 	self->next = BIN_TO_CHUNK(i);
  40521c: 48 8d 43 f0                  	leaq	-16(%rbx), %rax
  405220: 48 8b 7c 24 10               	movq	16(%rsp), %rdi
  405225: 48 89 47 10                  	movq	%rax, 16(%rdi)
; 	self->prev = mal.bins[i].tail;
  405229: 48 8b 04 ed 40 97 40 00      	movq	4233024(,%rbp,8), %rax
  405231: 48 89 47 18                  	movq	%rax, 24(%rdi)
; 	self->next->prev = self;
  405235: 48 89 7b 08                  	movq	%rdi, 8(%rbx)
; 	self->prev->next = self;
  405239: 48 8b 47 18                  	movq	24(%rdi), %rax
  40523d: 48 89 78 10                  	movq	%rdi, 16(%rax)
; 	if (reclaim) {
  405241: 83 7c 24 0c 00               	cmpl	$0, 12(%rsp)
  405246: 74 29                        	je	41 <__bin_chunk+0x5c1>
; 		uintptr_t a = (uintptr_t)self + SIZE_ALIGN+PAGE_SIZE-1 & -PAGE_SIZE;
  405248: 48 81 c7 1f 10 00 00         	addq	$4127, %rdi
  40524f: 48 81 e7 00 f0 ff ff         	andq	$-4096, %rdi
; 		uintptr_t b = (uintptr_t)next - SIZE_ALIGN & -PAGE_SIZE;
  405256: 49 83 c7 e0                  	addq	$-32, %r15
  40525a: 49 81 e7 00 f0 ff ff         	andq	$-4096, %r15
; 		__madvise((void *)a, b-a, MADV_DONTNEED);
  405261: 49 29 ff                     	subq	%rdi, %r15
  405264: 4c 89 fe                     	movq	%r15, %rsi
  405267: ba 04 00 00 00               	movl	$4, %edx
  40526c: e8 97 01 00 00               	callq	407 <madvise>
; 	if (lk[0]) {
  405271: 41 83 7d 00 00               	cmpl	$0, (%r13)
  405276: 74 43                        	je	67 <__bin_chunk+0x60b>
  405278: 31 c0                        	xorl	%eax, %eax
; 	__asm__ __volatile__(
  40527a: 41 89 45 00                  	movl	%eax, (%r13)
  40527e: f0                           	lock
  40527f: 83 0c 24 00                  	orl	$0, (%rsp)
; 		if (lk[1]) __wake(lk, 1, 1);
  405283: 83 3c ed 34 97 40 00 00      	cmpl	$0, 4233012(,%rbp,8)
  40528b: 74 2e                        	je	46 <__bin_chunk+0x60b>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40528d: b8 ca 00 00 00               	movl	$202, %eax
  405292: be 81 00 00 00               	movl	$129, %esi
  405297: ba 01 00 00 00               	movl	$1, %edx
  40529c: 4c 89 ef                     	movq	%r13, %rdi
  40529f: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  4052a1: 48 83 f8 da                  	cmpq	$-38, %rax
  4052a5: 75 14                        	jne	20 <__bin_chunk+0x60b>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4052a7: b8 ca 00 00 00               	movl	$202, %eax
  4052ac: be 01 00 00 00               	movl	$1, %esi
  4052b1: ba 01 00 00 00               	movl	$1, %edx
  4052b6: 4c 89 ef                     	movq	%r13, %rdi
  4052b9: 0f 05                        	syscall
; }
  4052bb: 48 83 c4 28                  	addq	$40, %rsp
  4052bf: 5b                           	popq	%rbx
  4052c0: 41 5c                        	popq	%r12
  4052c2: 41 5d                        	popq	%r13
  4052c4: 41 5e                        	popq	%r14
  4052c6: 41 5f                        	popq	%r15
  4052c8: 5d                           	popq	%rbp
  4052c9: c3                           	retq
  4052ca: 66 0f 1f 44 00 00            	nopw	(%rax,%rax)

00000000004052d0 __malloc_donate:
; {
  4052d0: b9 10 00 00 00               	movl	$16, %ecx
; 	size_t align_start_up = (SIZE_ALIGN-1) & (-(uintptr_t)start - OVERHEAD);
  4052d5: 29 f9                        	subl	%edi, %ecx
  4052d7: 83 e1 1f                     	andl	$31, %ecx
; 	size_t align_end_down = (SIZE_ALIGN-1) & (uintptr_t)end;
  4052da: 41 89 f0                     	movl	%esi, %r8d
  4052dd: 41 83 e0 1f                  	andl	$31, %r8d
; 	if (end - start <= OVERHEAD + align_start_up + align_end_down)
  4052e1: 48 89 f2                     	movq	%rsi, %rdx
  4052e4: 48 29 fa                     	subq	%rdi, %rdx
  4052e7: 4a 8d 04 01                  	leaq	(%rcx,%r8), %rax
  4052eb: 48 83 c0 10                  	addq	$16, %rax
  4052ef: 48 39 c2                     	cmpq	%rax, %rdx
  4052f2: 76 39                        	jbe	57 <__malloc_donate+0x5d>
  4052f4: 48 8d 51 10                  	leaq	16(%rcx), %rdx
; 	start += align_start_up + OVERHEAD;
  4052f8: 48 01 fa                     	addq	%rdi, %rdx
; 	end   -= align_end_down;
  4052fb: 4c 29 c6                     	subq	%r8, %rsi
; 	struct chunk *c = MEM_TO_CHUNK(start), *n = MEM_TO_CHUNK(end);
  4052fe: 4c 8d 04 0f                  	leaq	(%rdi,%rcx), %r8
; 	c->psize = n->csize = C_INUSE;
  405302: 48 c7 46 f8 01 00 00 00      	movq	$1, -8(%rsi)
  40530a: 48 c7 04 0f 01 00 00 00      	movq	$1, (%rdi,%rcx)
; 	c->csize = n->psize = C_INUSE | (end-start);
  405312: 48 89 f0                     	movq	%rsi, %rax
  405315: 48 29 d0                     	subq	%rdx, %rax
  405318: 48 83 c8 01                  	orq	$1, %rax
  40531c: 48 89 46 f0                  	movq	%rax, -16(%rsi)
  405320: 48 89 44 0f 08               	movq	%rax, 8(%rdi,%rcx)
; 	__bin_chunk(c);
  405325: 4c 89 c7                     	movq	%r8, %rdi
  405328: e9 83 f9 ff ff               	jmp	-1661 <__bin_chunk>
; }
  40532d: c3                           	retq
  40532e: 66 90                        	nop

0000000000405330 __fpclassifyl:
; 	int e = u.i.se & 0x7fff;
  405330: 8b 44 24 10                  	movl	16(%rsp), %eax
  405334: 48 8b 4c 24 08               	movq	8(%rsp), %rcx
  405339: 25 ff 7f 00 00               	andl	$32767, %eax
; 	if (!e && !msb)
  40533e: 48 85 c9                     	testq	%rcx, %rcx
  405341: 78 11                        	js	17 <__fpclassifyl+0x24>
  405343: 85 c0                        	testl	%eax, %eax
  405345: 75 0d                        	jne	13 <__fpclassifyl+0x24>
; 		return u.i.m ? FP_SUBNORMAL : FP_ZERO;
  405347: 48 83 f9 01                  	cmpq	$1, %rcx
  40534b: b8 03 00 00 00               	movl	$3, %eax
  405350: 83 d8 00                     	sbbl	$0, %eax
; }
  405353: c3                           	retq
; 	if (e == 0x7fff) {
  405354: 3d ff 7f 00 00               	cmpl	$32767, %eax
  405359: 75 08                        	jne	8 <__fpclassifyl+0x33>
  40535b: 31 c0                        	xorl	%eax, %eax
; 	if (!e && !msb)
  40535d: 48 85 c9                     	testq	%rcx, %rcx
; 		if (__BYTE_ORDER == __LITTLE_ENDIAN && !msb)
  405360: 78 0b                        	js	11 <__fpclassifyl+0x3d>
; }
  405362: c3                           	retq
  405363: 48 c1 e9 3d                  	shrq	$61, %rcx
  405367: 83 e1 fc                     	andl	$-4, %ecx
  40536a: 89 c8                        	movl	%ecx, %eax
  40536c: c3                           	retq
; 		return u.i.m << 1 ? FP_NAN : FP_INFINITE;
  40536d: 48 c1 e1 01                  	shlq	$1, %rcx
  405371: 31 c0                        	xorl	%eax, %eax
  405373: 48 85 c9                     	testq	%rcx, %rcx
  405376: 0f 94 c0                     	sete	%al
; }
  405379: c3                           	retq
  40537a: 66 90                        	nop

000000000040537c __signbitl:
; 	return u.i.se >> 15;
  40537c: 0f b7 44 24 10               	movzwl	16(%rsp), %eax
  405381: 48 c1 e8 0f                  	shrq	$15, %rax
  405385: c3                           	retq
  405386: 66 90                        	nop

0000000000405388 frexpl:
; {
  405388: 53                           	pushq	%rbx
  405389: 48 83 ec 30                  	subq	$48, %rsp
  40538d: db 6c 24 40                  	fldt	64(%rsp)
  405391: d9 c0                        	fld	%st(0)
  405393: db 7c 24 20                  	fstpt	32(%rsp)
  405397: 0f b7 44 24 28               	movzwl	40(%rsp), %eax
  40539c: ba ff 7f 00 00               	movl	$32767, %edx
; 	int ee = u.i.se & 0x7fff;
  4053a1: 89 c1                        	movl	%eax, %ecx
  4053a3: 21 d1                        	andl	%edx, %ecx
; 	if (!ee) {
  4053a5: 39 d1                        	cmpl	%edx, %ecx
  4053a7: 74 58                        	je	88 <frexpl+0x79>
  4053a9: 48 89 fb                     	movq	%rdi, %rbx
  4053ac: 85 c9                        	testl	%ecx, %ecx
  4053ae: 75 24                        	jne	36 <frexpl+0x4c>
  4053b0: d9 ee                        	fldz
; 		if (x) {
  4053b2: d9 c9                        	fxch	%st(1)
  4053b4: db e9                        	fucomi	%st(1), %st
  4053b6: dd d9                        	fstp	%st(1)
  4053b8: 75 02                        	jne	2 <frexpl+0x34>
  4053ba: 7b 41                        	jnp	65 <frexpl+0x75>
; 			x = frexpl(x*0x1p120, e);
  4053bc: d8 0d fa 18 00 00            	fmuls	6394(%rip)
  4053c2: db 3c 24                     	fstpt	(%rsp)
  4053c5: 48 89 df                     	movq	%rbx, %rdi
  4053c8: e8 bb ff ff ff               	callq	-69 <frexpl>
; 			*e -= 120;
  4053cd: 8b 03                        	movl	(%rbx), %eax
  4053cf: 83 c0 88                     	addl	$-120, %eax
  4053d2: eb 2b                        	jmp	43 <frexpl+0x77>
  4053d4: dd d8                        	fstp	%st(0)
  4053d6: 48 8b 54 24 20               	movq	32(%rsp), %rdx
; 	*e = ee - 0x3ffe;
  4053db: 81 c1 02 c0 ff ff            	addl	$4294950914, %ecx
  4053e1: 89 0b                        	movl	%ecx, (%rbx)
; 	u.i.se |= 0x3ffe;
  4053e3: 25 00 80 00 00               	andl	$32768, %eax
  4053e8: 0d fe 3f 00 00               	orl	$16382, %eax
  4053ed: 48 89 54 24 10               	movq	%rdx, 16(%rsp)
  4053f2: 66 89 44 24 18               	movw	%ax, 24(%rsp)
  4053f7: db 6c 24 10                  	fldt	16(%rsp)
  4053fb: eb 04                        	jmp	4 <frexpl+0x79>
  4053fd: 31 c0                        	xorl	%eax, %eax
  4053ff: 89 03                        	movl	%eax, (%rbx)
; }
  405401: 48 83 c4 30                  	addq	$48, %rsp
  405405: 5b                           	popq	%rbx
  405406: c3                           	retq
  405407: 90                           	nop

0000000000405408 madvise:
; 	return syscall(SYS_madvise, addr, len, advice);
  405408: 48 63 d2                     	movslq	%edx, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40540b: b8 1c 00 00 00               	movl	$28, %eax
  405410: 0f 05                        	syscall
; 	return syscall(SYS_madvise, addr, len, advice);
  405412: 48 89 c7                     	movq	%rax, %rdi
  405415: e9 f6 ea ff ff               	jmp	-5386 <__syscall_ret>
  40541a: 66 90                        	nop

000000000040541c dummy:
; static void dummy(void) { }
  40541c: c3                           	retq

000000000040541d mmap64:
; {
  40541d: 55                           	pushq	%rbp
  40541e: 41 57                        	pushq	%r15
  405420: 41 56                        	pushq	%r14
  405422: 41 55                        	pushq	%r13
  405424: 41 54                        	pushq	%r12
  405426: 53                           	pushq	%rbx
  405427: 50                           	pushq	%rax
  405428: 4c 89 cb                     	movq	%r9, %rbx
; 	if (off & OFF_MASK) {
  40542b: f7 c3 ff 0f 00 00            	testl	$4095, %ebx
  405431: 74 0d                        	je	13 <mmap64+0x23>
; 		errno = EINVAL;
  405433: e8 5c ea ff ff               	callq	-5540 <__errno_location>
  405438: c7 00 16 00 00 00            	movl	$22, (%rax)
  40543e: eb 1d                        	jmp	29 <mmap64+0x40>
  405440: 48 89 f5                     	movq	%rsi, %rbp
  405443: 48 b8 ff ff ff ff ff ff ff 7f	movabsq	$9223372036854775807, %rax
; 	if (len >= PTRDIFF_MAX) {
  40544d: 48 39 c6                     	cmpq	%rax, %rsi
  405450: 72 21                        	jb	33 <mmap64+0x56>
; 		errno = ENOMEM;
  405452: e8 3d ea ff ff               	callq	-5571 <__errno_location>
  405457: c7 00 0c 00 00 00            	movl	$12, (%rax)
  40545d: 48 c7 c0 ff ff ff ff         	movq	$-1, %rax
; }
  405464: 48 83 c4 08                  	addq	$8, %rsp
  405468: 5b                           	popq	%rbx
  405469: 41 5c                        	popq	%r12
  40546b: 41 5d                        	popq	%r13
  40546d: 41 5e                        	popq	%r14
  40546f: 41 5f                        	popq	%r15
  405471: 5d                           	popq	%rbp
  405472: c3                           	retq
  405473: 45 89 c4                     	movl	%r8d, %r12d
  405476: 41 89 ce                     	movl	%ecx, %r14d
  405479: 41 89 d5                     	movl	%edx, %r13d
  40547c: 49 89 ff                     	movq	%rdi, %r15
; 	if (flags & MAP_FIXED) {
  40547f: 41 f6 c6 10                  	testb	$16, %r14b
  405483: 74 05                        	je	5 <mmap64+0x6d>
; 		__vm_wait();
  405485: e8 92 ff ff ff               	callq	-110 <dummy>
; 	ret = __syscall(SYS_mmap, start, len, prot, flags, fd, off);
  40548a: 49 63 d5                     	movslq	%r13d, %rdx
  40548d: 4d 63 d6                     	movslq	%r14d, %r10
  405490: 4d 63 c4                     	movslq	%r12d, %r8
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405493: b8 09 00 00 00               	movl	$9, %eax
  405498: 4c 89 ff                     	movq	%r15, %rdi
  40549b: 48 89 ee                     	movq	%rbp, %rsi
  40549e: 49 89 d9                     	movq	%rbx, %r9
  4054a1: 0f 05                        	syscall
; 	if (ret == -EPERM && !start && (flags&MAP_ANON) && !(flags&MAP_FIXED))
  4054a3: 4d 85 ff                     	testq	%r15, %r15
  4054a6: 75 20                        	jne	32 <mmap64+0xab>
  4054a8: 48 83 f8 ff                  	cmpq	$-1, %rax
  4054ac: 75 1a                        	jne	26 <mmap64+0xab>
  4054ae: 41 83 e6 30                  	andl	$48, %r14d
  4054b2: 41 83 fe 20                  	cmpl	$32, %r14d
  4054b6: 48 c7 c1 f4 ff ff ff         	movq	$-12, %rcx
  4054bd: 48 c7 c0 ff ff ff ff         	movq	$-1, %rax
  4054c4: 48 0f 44 c1                  	cmoveq	%rcx, %rax
; 	return (void *)__syscall_ret(ret);
  4054c8: 48 89 c7                     	movq	%rax, %rdi
  4054cb: e8 40 ea ff ff               	callq	-5568 <__syscall_ret>
  4054d0: eb 92                        	jmp	-110 <mmap64+0x47>
  4054d2: 66 90                        	nop

00000000004054d4 dummy:
; static void dummy(void) { }
  4054d4: c3                           	retq

00000000004054d5 mremap:
; {
  4054d5: 55                           	pushq	%rbp
  4054d6: 41 57                        	pushq	%r15
  4054d8: 41 56                        	pushq	%r14
  4054da: 53                           	pushq	%rbx
  4054db: 48 81 ec d8 00 00 00         	subq	$216, %rsp
  4054e2: 89 cd                        	movl	%ecx, %ebp
  4054e4: 48 89 d3                     	movq	%rdx, %rbx
  4054e7: 49 89 f6                     	movq	%rsi, %r14
  4054ea: 49 89 ff                     	movq	%rdi, %r15
  4054ed: 84 c0                        	testb	%al, %al
  4054ef: 74 37                        	je	55 <mremap+0x53>
  4054f1: 0f 29 44 24 50               	movaps	%xmm0, 80(%rsp)
  4054f6: 0f 29 4c 24 60               	movaps	%xmm1, 96(%rsp)
  4054fb: 0f 29 54 24 70               	movaps	%xmm2, 112(%rsp)
  405500: 0f 29 9c 24 80 00 00 00      	movaps	%xmm3, 128(%rsp)
  405508: 0f 29 a4 24 90 00 00 00      	movaps	%xmm4, 144(%rsp)
  405510: 0f 29 ac 24 a0 00 00 00      	movaps	%xmm5, 160(%rsp)
  405518: 0f 29 b4 24 b0 00 00 00      	movaps	%xmm6, 176(%rsp)
  405520: 0f 29 bc 24 c0 00 00 00      	movaps	%xmm7, 192(%rsp)
  405528: 4c 89 44 24 40               	movq	%r8, 64(%rsp)
  40552d: 4c 89 4c 24 48               	movq	%r9, 72(%rsp)
  405532: 48 b8 ff ff ff ff ff ff ff 7f	movabsq	$9223372036854775807, %rax
; 	if (new_len >= PTRDIFF_MAX) {
  40553c: 48 39 c3                     	cmpq	%rax, %rbx
  40553f: 72 17                        	jb	23 <mremap+0x83>
; 		errno = ENOMEM;
  405541: e8 4e e9 ff ff               	callq	-5810 <__errno_location>
  405546: c7 00 0c 00 00 00            	movl	$12, (%rax)
  40554c: 48 c7 c0 ff ff ff ff         	movq	$-1, %rax
  405553: e9 82 00 00 00               	jmp	130 <mremap+0x105>
; 	if (flags & MREMAP_FIXED) {
  405558: 40 f6 c5 02                  	testb	$2, %bpl
  40555c: 75 05                        	jne	5 <mremap+0x8e>
  40555e: 45 31 c0                     	xorl	%r8d, %r8d
  405561: eb 5c                        	jmp	92 <mremap+0xea>
; 		__vm_wait();
  405563: e8 b4 fe ff ff               	callq	-332 <dummy>
  405568: 48 8d 44 24 20               	leaq	32(%rsp), %rax
; 		va_start(ap, flags);
  40556d: 48 89 44 24 10               	movq	%rax, 16(%rsp)
  405572: 48 8d 84 24 00 01 00 00      	leaq	256(%rsp), %rax
  40557a: 48 89 44 24 08               	movq	%rax, 8(%rsp)
  40557f: 48 b8 20 00 00 00 30 00 00 00	movabsq	$206158430240, %rax
  405589: 48 89 04 24                  	movq	%rax, (%rsp)
  40558d: b9 20 00 00 00               	movl	$32, %ecx
; 		new_addr = va_arg(ap, void *);
  405592: 48 83 f9 28                  	cmpq	$40, %rcx
  405596: 77 12                        	ja	18 <mremap+0xd5>
  405598: b8 20 00 00 00               	movl	$32, %eax
  40559d: 48 03 44 24 10               	addq	16(%rsp), %rax
  4055a2: 83 c1 08                     	addl	$8, %ecx
  4055a5: 89 0c 24                     	movl	%ecx, (%rsp)
  4055a8: eb 12                        	jmp	18 <mremap+0xe7>
  4055aa: 48 8b 44 24 08               	movq	8(%rsp), %rax
  4055af: b9 08 00 00 00               	movl	$8, %ecx
  4055b4: 48 01 c1                     	addq	%rax, %rcx
  4055b7: 48 89 4c 24 08               	movq	%rcx, 8(%rsp)
  4055bc: 4c 8b 00                     	movq	(%rax), %r8
; 	return (void *)syscall(SYS_mremap, old_addr, old_len, new_len, flags, new_addr);
  4055bf: 4c 63 d5                     	movslq	%ebp, %r10
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4055c2: b8 19 00 00 00               	movl	$25, %eax
  4055c7: 4c 89 ff                     	movq	%r15, %rdi
  4055ca: 4c 89 f6                     	movq	%r14, %rsi
  4055cd: 48 89 da                     	movq	%rbx, %rdx
  4055d0: 0f 05                        	syscall
; 	return (void *)syscall(SYS_mremap, old_addr, old_len, new_len, flags, new_addr);
  4055d2: 48 89 c7                     	movq	%rax, %rdi
  4055d5: e8 36 e9 ff ff               	callq	-5834 <__syscall_ret>
; }
  4055da: 48 81 c4 d8 00 00 00         	addq	$216, %rsp
  4055e1: 5b                           	popq	%rbx
  4055e2: 41 5e                        	popq	%r14
  4055e4: 41 5f                        	popq	%r15
  4055e6: 5d                           	popq	%rbp
  4055e7: c3                           	retq

00000000004055e8 dummy:
; static void dummy(void) { }
  4055e8: c3                           	retq

00000000004055e9 munmap:
; {
  4055e9: 41 56                        	pushq	%r14
  4055eb: 53                           	pushq	%rbx
  4055ec: 50                           	pushq	%rax
  4055ed: 49 89 f6                     	movq	%rsi, %r14
  4055f0: 48 89 fb                     	movq	%rdi, %rbx
; 	__vm_wait();
  4055f3: e8 24 fe ff ff               	callq	-476 <dummy>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  4055f8: b8 0b 00 00 00               	movl	$11, %eax
  4055fd: 48 89 df                     	movq	%rbx, %rdi
  405600: 4c 89 f6                     	movq	%r14, %rsi
  405603: 0f 05                        	syscall
; 	return syscall(SYS_munmap, start, len);
  405605: 48 89 c7                     	movq	%rax, %rdi
  405608: 48 83 c4 08                  	addq	$8, %rsp
  40560c: 5b                           	popq	%rbx
  40560d: 41 5e                        	popq	%r14
  40560f: e9 fc e8 ff ff               	jmp	-5892 <__syscall_ret>

0000000000405614 wctomb:
; 	if (!s) return 0;
  405614: 48 85 ff                     	testq	%rdi, %rdi
  405617: 74 0d                        	je	13 <wctomb+0x12>
  405619: 50                           	pushq	%rax
; 	return wcrtomb(s, wc, 0);
  40561a: 31 d2                        	xorl	%edx, %edx
  40561c: e8 93 0e 00 00               	callq	3731 <wcrtomb>
  405621: 48 83 c4 08                  	addq	$8, %rsp
; }
  405625: c3                           	retq
  405626: 31 c0                        	xorl	%eax, %eax
  405628: c3                           	retq
  405629: 0f 1f 00                     	nopl	(%rax)

000000000040562c fdopen:
; {
  40562c: 55                           	pushq	%rbp
  40562d: 41 56                        	pushq	%r14
  40562f: 53                           	pushq	%rbx
  405630: 48 83 ec 10                  	subq	$16, %rsp
  405634: 48 89 f5                     	movq	%rsi, %rbp
  405637: 41 89 fe                     	movl	%edi, %r14d
; 	if (!strchr("rwa", *mode)) {
  40563a: 0f be 36                     	movsbl	(%rsi), %esi
  40563d: bf bc 78 40 00               	movl	$4225212, %edi
  405642: e8 29 e2 ff ff               	callq	-7639 <strchr>
  405647: 48 85 c0                     	testq	%rax, %rax
  40564a: 0f 84 a8 00 00 00            	je	168 <fdopen+0xcc>
; 	if (!(f=malloc(sizeof *f + UNGET + BUFSIZ))) return 0;
  405650: bf f0 04 00 00               	movl	$1264, %edi
  405655: e8 06 e9 ff ff               	callq	-5882 <malloc>
  40565a: 48 85 c0                     	testq	%rax, %rax
  40565d: 0f 84 a0 00 00 00            	je	160 <fdopen+0xd7>
  405663: 48 89 c3                     	movq	%rax, %rbx
; 	memset(f, 0, sizeof *f);
  405666: ba e8 00 00 00               	movl	$232, %edx
  40566b: 48 89 c7                     	movq	%rax, %rdi
  40566e: 31 f6                        	xorl	%esi, %esi
  405670: e8 c7 e3 ff ff               	callq	-7225 <memset>
; 	if (!strchr(mode, '+')) f->flags = (*mode == 'r') ? F_NOWR : F_NORD;
  405675: 48 89 ef                     	movq	%rbp, %rdi
  405678: be 2b 00 00 00               	movl	$43, %esi
  40567d: e8 ee e1 ff ff               	callq	-7698 <strchr>
  405682: 48 85 c0                     	testq	%rax, %rax
  405685: 75 12                        	jne	18 <fdopen+0x6d>
  405687: 31 c0                        	xorl	%eax, %eax
  405689: 80 7d 00 72                  	cmpb	$114, (%rbp)
  40568d: 0f 94 c0                     	sete	%al
  405690: 8d 04 85 04 00 00 00         	leal	4(,%rax,4), %eax
  405697: 89 03                        	movl	%eax, (%rbx)
; 	if (strchr(mode, 'e')) __syscall(SYS_fcntl, fd, F_SETFD, FD_CLOEXEC);
  405699: 48 89 ef                     	movq	%rbp, %rdi
  40569c: be 65 00 00 00               	movl	$101, %esi
  4056a1: e8 ca e1 ff ff               	callq	-7734 <strchr>
; 	if (!(f->flags & F_NOWR) && !__syscall(SYS_ioctl, fd, TIOCGWINSZ, &wsz))
  4056a6: 49 63 fe                     	movslq	%r14d, %rdi
; 	if (strchr(mode, 'e')) __syscall(SYS_fcntl, fd, F_SETFD, FD_CLOEXEC);
  4056a9: 48 85 c0                     	testq	%rax, %rax
  4056ac: 74 11                        	je	17 <fdopen+0x93>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4056ae: b8 48 00 00 00               	movl	$72, %eax
  4056b3: be 02 00 00 00               	movl	$2, %esi
  4056b8: ba 01 00 00 00               	movl	$1, %edx
  4056bd: 0f 05                        	syscall
; 	if (*mode == 'a') {
  4056bf: 80 7d 00 61                  	cmpb	$97, (%rbp)
  4056c3: 75 45                        	jne	69 <fdopen+0xde>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  4056c5: b8 48 00 00 00               	movl	$72, %eax
  4056ca: be 03 00 00 00               	movl	$3, %esi
  4056cf: 0f 05                        	syscall
; 		if (!(flags & O_APPEND))
  4056d1: 0f ba e0 0a                  	btl	$10, %eax
  4056d5: 72 16                        	jb	22 <fdopen+0xc1>
; 			__syscall(SYS_fcntl, fd, F_SETFL, flags | O_APPEND);
  4056d7: 48 63 d0                     	movslq	%eax, %rdx
  4056da: 48 81 ca 00 04 00 00         	orq	$1024, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4056e1: b8 48 00 00 00               	movl	$72, %eax
  4056e6: be 04 00 00 00               	movl	$4, %esi
  4056eb: 0f 05                        	syscall
  4056ed: b8 80 00 00 00               	movl	$128, %eax
; 		f->flags |= F_APP;
  4056f2: 0b 03                        	orl	(%rbx), %eax
  4056f4: 89 03                        	movl	%eax, (%rbx)
  4056f6: eb 14                        	jmp	20 <fdopen+0xe0>
; 		errno = EINVAL;
  4056f8: e8 97 e7 ff ff               	callq	-6249 <__errno_location>
  4056fd: c7 00 16 00 00 00            	movl	$22, (%rax)
  405703: 31 c0                        	xorl	%eax, %eax
  405705: e9 92 00 00 00               	jmp	146 <fdopen+0x170>
; 	if (!(f->flags & F_NOWR) && !__syscall(SYS_ioctl, fd, TIOCGWINSZ, &wsz))
  40570a: 8b 03                        	movl	(%rbx), %eax
; 	f->fd = fd;
  40570c: 44 89 73 78                  	movl	%r14d, 120(%rbx)
; 	f->buf = (unsigned char *)f + sizeof *f + UNGET;
  405710: 48 89 d9                     	movq	%rbx, %rcx
  405713: 48 81 c1 f0 00 00 00         	addq	$240, %rcx
  40571a: 48 89 4b 58                  	movq	%rcx, 88(%rbx)
; 	f->buf_size = BUFSIZ;
  40571e: 48 c7 43 60 00 04 00 00      	movq	$1024, 96(%rbx)
; 	f->lbf = EOF;
  405726: c7 83 90 00 00 00 ff ff ff ff	movl	$4294967295, 144(%rbx)
; 	if (!(f->flags & F_NOWR) && !__syscall(SYS_ioctl, fd, TIOCGWINSZ, &wsz))
  405730: a8 08                        	testb	$8, %al
  405732: 75 20                        	jne	32 <fdopen+0x128>
  405734: 48 8d 54 24 08               	leaq	8(%rsp), %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405739: b8 10 00 00 00               	movl	$16, %eax
  40573e: be 13 54 00 00               	movl	$21523, %esi
  405743: 0f 05                        	syscall
; 	if (!(f->flags & F_NOWR) && !__syscall(SYS_ioctl, fd, TIOCGWINSZ, &wsz))
  405745: 48 85 c0                     	testq	%rax, %rax
  405748: 75 0a                        	jne	10 <fdopen+0x128>
; 		f->lbf = '\n';
  40574a: c7 83 90 00 00 00 0a 00 00 00	movl	$10, 144(%rbx)
; 	f->read = __stdio_read;
  405754: b8 f8 59 40 00               	movl	$4217336, %eax
  405759: 66 48 0f 6e c0               	movq	%rax, %xmm0
  40575e: b8 2c 59 40 00               	movl	$4217132, %eax
  405763: 66 48 0f 6e c8               	movq	%rax, %xmm1
  405768: 66 0f 6c c8                  	punpcklqdq	%xmm0, %xmm1
  40576c: f3 0f 7f 4b 40               	movdqu	%xmm1, 64(%rbx)
; 	f->seek = __stdio_seek;
  405771: 48 c7 43 50 e0 59 40 00      	movq	$4217312, 80(%rbx)
; 	f->close = __stdio_close;
  405779: 48 c7 43 18 0f 59 40 00      	movq	$4217103, 24(%rbx)
; 	if (!libc.threaded) f->lock = -1;
  405781: 83 3d dc 75 08 00 00         	cmpl	$0, 554460(%rip)
  405788: 75 0a                        	jne	10 <fdopen+0x168>
  40578a: c7 83 8c 00 00 00 ff ff ff ff	movl	$4294967295, 140(%rbx)
; 	return __ofl_add(f);
  405794: 48 89 df                     	movq	%rbx, %rdi
  405797: e8 60 05 00 00               	callq	1376 <__ofl_add>
; }
  40579c: 48 83 c4 10                  	addq	$16, %rsp
  4057a0: 5b                           	popq	%rbx
  4057a1: 41 5e                        	popq	%r14
  4057a3: 5d                           	popq	%rbp
  4057a4: c3                           	retq
  4057a5: 0f 1f 00                     	nopl	(%rax)

00000000004057a8 __fmodeflags:
; {
  4057a8: 41 57                        	pushq	%r15
  4057aa: 41 56                        	pushq	%r14
  4057ac: 53                           	pushq	%rbx
  4057ad: 49 89 fe                     	movq	%rdi, %r14
; 	if (strchr(mode, '+')) flags = O_RDWR;
  4057b0: be 2b 00 00 00               	movl	$43, %esi
  4057b5: e8 b6 e0 ff ff               	callq	-8010 <strchr>
  4057ba: 41 bf 02 00 00 00            	movl	$2, %r15d
  4057c0: 48 85 c0                     	testq	%rax, %rax
  4057c3: 75 0b                        	jne	11 <__fmodeflags+0x28>
; 	else if (*mode == 'r') flags = O_RDONLY;
  4057c5: 45 31 ff                     	xorl	%r15d, %r15d
  4057c8: 41 80 3e 72                  	cmpb	$114, (%r14)
  4057cc: 41 0f 95 c7                  	setne	%r15b
; 	if (strchr(mode, 'x')) flags |= O_EXCL;
  4057d0: 4c 89 f7                     	movq	%r14, %rdi
  4057d3: be 78 00 00 00               	movl	$120, %esi
  4057d8: e8 93 e0 ff ff               	callq	-8045 <strchr>
  4057dd: 41 8d 9f 80 00 00 00         	leal	128(%r15), %ebx
  4057e4: 48 85 c0                     	testq	%rax, %rax
  4057e7: 41 0f 44 df                  	cmovel	%r15d, %ebx
; 	if (strchr(mode, 'e')) flags |= O_CLOEXEC;
  4057eb: 4c 89 f7                     	movq	%r14, %rdi
  4057ee: be 65 00 00 00               	movl	$101, %esi
  4057f3: e8 78 e0 ff ff               	callq	-8072 <strchr>
  4057f8: 8d 8b 00 00 08 00            	leal	524288(%rbx), %ecx
  4057fe: 48 85 c0                     	testq	%rax, %rax
  405801: 0f 44 cb                     	cmovel	%ebx, %ecx
; 	if (*mode != 'r') flags |= O_CREAT;
  405804: 41 8a 16                     	movb	(%r14), %dl
  405807: 8d 41 40                     	leal	64(%rcx), %eax
  40580a: 80 fa 72                     	cmpb	$114, %dl
  40580d: 0f 44 c1                     	cmovel	%ecx, %eax
; 	if (*mode == 'w') flags |= O_TRUNC;
  405810: 89 c1                        	movl	%eax, %ecx
  405812: 81 c9 00 02 00 00            	orl	$512, %ecx
  405818: 80 fa 77                     	cmpb	$119, %dl
  40581b: 0f 45 c8                     	cmovnel	%eax, %ecx
; 	if (*mode == 'a') flags |= O_APPEND;
  40581e: 89 c8                        	movl	%ecx, %eax
  405820: 0d 00 04 00 00               	orl	$1024, %eax
  405825: 80 fa 61                     	cmpb	$97, %dl
  405828: 0f 45 c1                     	cmovnel	%ecx, %eax
; 	return flags;
  40582b: 5b                           	popq	%rbx
  40582c: 41 5e                        	popq	%r14
  40582e: 41 5f                        	popq	%r15
  405830: c3                           	retq
  405831: 0f 1f 00                     	nopl	(%rax)

0000000000405834 __lockfile:
; {
  405834: b8 ff ff ff bf               	movl	$3221225471, %eax
; 	if ((owner & ~MAYBE_WAITERS) == tid)
  405839: 23 87 8c 00 00 00            	andl	140(%rdi), %eax
; 	__asm__ ("mov %%fs:0,%0" : "=r" (self) );
  40583f: 64 48 8b 0c 25 00 00 00 00   	movq	%fs:0, %rcx
; 	int owner = f->lock, tid = __pthread_self()->tid;
  405848: 44 8b 49 38                  	movl	56(%rcx), %r9d
  40584c: 45 31 c0                     	xorl	%r8d, %r8d
; 	if ((owner & ~MAYBE_WAITERS) == tid)
  40584f: 44 39 c8                     	cmpl	%r9d, %eax
  405852: 74 75                        	je	117 <__lockfile+0x95>
  405854: 48 81 c7 8c 00 00 00         	addq	$140, %rdi
; 	__asm__ __volatile__ (
  40585b: 31 c0                        	xorl	%eax, %eax
  40585d: f0                           	lock
  40585e: 44 0f b1 0f                  	cmpxchgl	%r9d, (%rdi)
  405862: 41 b8 01 00 00 00            	movl	$1, %r8d
; 	if (!owner) return 1;
  405868: 85 c0                        	testl	%eax, %eax
  40586a: 74 5d                        	je	93 <__lockfile+0x95>
; 	while ((owner = a_cas(&f->lock, 0, tid|MAYBE_WAITERS))) {
  40586c: 41 81 c9 00 00 00 40         	orl	$1073741824, %r9d
; 	__asm__ __volatile__ (
  405873: 31 c0                        	xorl	%eax, %eax
  405875: f0                           	lock
  405876: 44 0f b1 0f                  	cmpxchgl	%r9d, (%rdi)
; 	while ((owner = a_cas(&f->lock, 0, tid|MAYBE_WAITERS))) {
  40587a: 85 c0                        	testl	%eax, %eax
  40587c: 74 4b                        	je	75 <__lockfile+0x95>
  40587e: 89 c1                        	movl	%eax, %ecx
  405880: 89 ca                        	movl	%ecx, %edx
  405882: 81 ca 00 00 00 40            	orl	$1073741824, %edx
; 		if ((owner & MAYBE_WAITERS) ||
  405888: 0f ba e1 1e                  	btl	$30, %ecx
  40588c: 72 0a                        	jb	10 <__lockfile+0x64>
; 	__asm__ __volatile__ (
  40588e: 89 c8                        	movl	%ecx, %eax
  405890: f0                           	lock
  405891: 0f b1 17                     	cmpxchgl	%edx, (%rdi)
; 		    a_cas(&f->lock, owner, owner|MAYBE_WAITERS)==owner)
  405894: 39 c8                        	cmpl	%ecx, %eax
; 		if ((owner & MAYBE_WAITERS) ||
  405896: 75 24                        	jne	36 <__lockfile+0x88>
; 	__syscall(SYS_futex, addr, FUTEX_WAIT|priv, val, 0) != -ENOSYS ||
  405898: 48 63 d2                     	movslq	%edx, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40589b: b8 ca 00 00 00               	movl	$202, %eax
  4058a0: be 80 00 00 00               	movl	$128, %esi
  4058a5: 45 31 d2                     	xorl	%r10d, %r10d
  4058a8: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAIT|priv, val, 0) != -ENOSYS ||
  4058aa: 48 83 f8 da                  	cmpq	$-38, %rax
  4058ae: 75 0c                        	jne	12 <__lockfile+0x88>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4058b0: b8 ca 00 00 00               	movl	$202, %eax
  4058b5: 31 f6                        	xorl	%esi, %esi
  4058b7: 45 31 d2                     	xorl	%r10d, %r10d
  4058ba: 0f 05                        	syscall
; 	__asm__ __volatile__ (
  4058bc: 31 c0                        	xorl	%eax, %eax
  4058be: f0                           	lock
  4058bf: 44 0f b1 0f                  	cmpxchgl	%r9d, (%rdi)
  4058c3: 89 c1                        	movl	%eax, %ecx
; 	while ((owner = a_cas(&f->lock, 0, tid|MAYBE_WAITERS))) {
  4058c5: 85 c0                        	testl	%eax, %eax
  4058c7: 75 b7                        	jne	-73 <__lockfile+0x4c>
; }
  4058c9: 44 89 c0                     	movl	%r8d, %eax
  4058cc: c3                           	retq

00000000004058cd __unlockfile:
; {
  4058cd: 31 c0                        	xorl	%eax, %eax
; 	__asm__ __volatile__(
  4058cf: 87 87 8c 00 00 00            	xchgl	%eax, 140(%rdi)
; 	if (a_swap(&f->lock, 0) & MAYBE_WAITERS)
  4058d5: 0f ba e0 1e                  	btl	$30, %eax
  4058d9: 73 2f                        	jae	47 <__unlockfile+0x3d>
  4058db: 48 81 c7 8c 00 00 00         	addq	$140, %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4058e2: b8 ca 00 00 00               	movl	$202, %eax
  4058e7: be 81 00 00 00               	movl	$129, %esi
  4058ec: ba 01 00 00 00               	movl	$1, %edx
  4058f1: 0f 05                        	syscall
; 	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  4058f3: 48 83 f8 da                  	cmpq	$-38, %rax
  4058f7: 75 11                        	jne	17 <__unlockfile+0x3d>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4058f9: b8 ca 00 00 00               	movl	$202, %eax
  4058fe: be 01 00 00 00               	movl	$1, %esi
  405903: ba 01 00 00 00               	movl	$1, %edx
  405908: 0f 05                        	syscall
; }
  40590a: c3                           	retq
  40590b: 90                           	nop

000000000040590c dummy:
; {
  40590c: 89 f8                        	movl	%edi, %eax
; 	return fd;
  40590e: c3                           	retq

000000000040590f __stdio_close:
; {
  40590f: 50                           	pushq	%rax
; 	return syscall(SYS_close, __aio_close(f->fd));
  405910: 8b 7f 78                     	movl	120(%rdi), %edi
  405913: e8 f4 ff ff ff               	callq	-12 <dummy>
  405918: 48 63 f8                     	movslq	%eax, %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  40591b: b8 03 00 00 00               	movl	$3, %eax
  405920: 0f 05                        	syscall
; 	return syscall(SYS_close, __aio_close(f->fd));
  405922: 48 89 c7                     	movq	%rax, %rdi
  405925: 58                           	popq	%rax
  405926: e9 e5 e5 ff ff               	jmp	-6683 <__syscall_ret>
  40592b: 90                           	nop

000000000040592c __stdio_read:
; {
  40592c: 41 57                        	pushq	%r15
  40592e: 41 56                        	pushq	%r14
  405930: 53                           	pushq	%rbx
  405931: 48 83 ec 20                  	subq	$32, %rsp
  405935: 49 89 d6                     	movq	%rdx, %r14
  405938: 49 89 f7                     	movq	%rsi, %r15
  40593b: 48 89 fb                     	movq	%rdi, %rbx
; 		{ .iov_base = buf, .iov_len = len - !!f->buf_size },
  40593e: 48 89 34 24                  	movq	%rsi, (%rsp)
  405942: 48 8b 57 60                  	movq	96(%rdi), %rdx
  405946: 31 c0                        	xorl	%eax, %eax
  405948: 48 85 d2                     	testq	%rdx, %rdx
  40594b: 0f 95 c0                     	setne	%al
; 	cnt = iov[0].iov_len ? syscall(SYS_readv, f->fd, iov, 2)
  40594e: 4c 89 f1                     	movq	%r14, %rcx
  405951: 48 29 c1                     	subq	%rax, %rcx
; 		{ .iov_base = buf, .iov_len = len - !!f->buf_size },
  405954: 48 89 4c 24 08               	movq	%rcx, 8(%rsp)
; 		{ .iov_base = f->buf, .iov_len = f->buf_size }
  405959: 48 8b 77 58                  	movq	88(%rdi), %rsi
  40595d: 48 89 74 24 10               	movq	%rsi, 16(%rsp)
  405962: 48 89 54 24 18               	movq	%rdx, 24(%rsp)
  405967: 48 63 7f 78                  	movslq	120(%rdi), %rdi
; 	cnt = iov[0].iov_len ? syscall(SYS_readv, f->fd, iov, 2)
  40596b: 74 11                        	je	17 <__stdio_read+0x52>
  40596d: 48 89 e6                     	movq	%rsp, %rsi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405970: b8 13 00 00 00               	movl	$19, %eax
  405975: ba 02 00 00 00               	movl	$2, %edx
  40597a: 0f 05                        	syscall
  40597c: eb 04                        	jmp	4 <__stdio_read+0x56>
  40597e: 31 c0                        	xorl	%eax, %eax
  405980: 0f 05                        	syscall
  405982: 48 89 c7                     	movq	%rax, %rdi
  405985: e8 86 e5 ff ff               	callq	-6778 <__syscall_ret>
; 	if (cnt <= 0) {
  40598a: 48 85 c0                     	testq	%rax, %rax
  40598d: 7e 34                        	jle	52 <__stdio_read+0x97>
; 	if (cnt <= iov[0].iov_len) return cnt;
  40598f: 48 89 c1                     	movq	%rax, %rcx
  405992: 48 2b 4c 24 08               	subq	8(%rsp), %rcx
  405997: 76 3a                        	jbe	58 <__stdio_read+0xa7>
; 	f->rpos = f->buf;
  405999: 48 8b 43 58                  	movq	88(%rbx), %rax
  40599d: 48 89 43 08                  	movq	%rax, 8(%rbx)
; 	f->rend = f->buf + cnt;
  4059a1: 48 01 c1                     	addq	%rax, %rcx
  4059a4: 48 89 4b 10                  	movq	%rcx, 16(%rbx)
; 	if (f->buf_size) buf[len-1] = *f->rpos++;
  4059a8: 48 83 7b 60 00               	cmpq	$0, 96(%rbx)
  4059ad: 74 0f                        	je	15 <__stdio_read+0x92>
  4059af: 48 8d 48 01                  	leaq	1(%rax), %rcx
  4059b3: 48 89 4b 08                  	movq	%rcx, 8(%rbx)
  4059b7: 8a 00                        	movb	(%rax), %al
  4059b9: 43 88 44 3e ff               	movb	%al, -1(%r14,%r15)
  4059be: 4c 89 f0                     	movq	%r14, %rax
  4059c1: eb 10                        	jmp	16 <__stdio_read+0xa7>
; 		f->flags |= cnt ? F_ERR : F_EOF;
  4059c3: 0f 95 c0                     	setne	%al
  4059c6: 0f b6 c0                     	movzbl	%al, %eax
  4059c9: c1 e0 04                     	shll	$4, %eax
  4059cc: 83 c0 10                     	addl	$16, %eax
  4059cf: 09 03                        	orl	%eax, (%rbx)
  4059d1: 31 c0                        	xorl	%eax, %eax
; }
  4059d3: 48 83 c4 20                  	addq	$32, %rsp
  4059d7: 5b                           	popq	%rbx
  4059d8: 41 5e                        	popq	%r14
  4059da: 41 5f                        	popq	%r15
  4059dc: c3                           	retq
  4059dd: 0f 1f 00                     	nopl	(%rax)

00000000004059e0 __stdio_seek:
; 	ret = syscall(SYS_lseek, f->fd, off, whence);
  4059e0: 48 63 7f 78                  	movslq	120(%rdi), %rdi
  4059e4: 48 63 d2                     	movslq	%edx, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4059e7: b8 08 00 00 00               	movl	$8, %eax
  4059ec: 0f 05                        	syscall
; 	ret = syscall(SYS_lseek, f->fd, off, whence);
  4059ee: 48 89 c7                     	movq	%rax, %rdi
  4059f1: e9 1a e5 ff ff               	jmp	-6886 <__syscall_ret>
  4059f6: 66 90                        	nop

00000000004059f8 __stdio_write:
; {
  4059f8: 55                           	pushq	%rbp
  4059f9: 41 57                        	pushq	%r15
  4059fb: 41 56                        	pushq	%r14
  4059fd: 41 55                        	pushq	%r13
  4059ff: 41 54                        	pushq	%r12
  405a01: 53                           	pushq	%rbx
  405a02: 48 83 ec 28                  	subq	$40, %rsp
  405a06: 49 89 d6                     	movq	%rdx, %r14
  405a09: 49 89 ff                     	movq	%rdi, %r15
; 		{ .iov_base = f->wbase, .iov_len = f->wpos-f->wbase },
  405a0c: 48 8b 47 38                  	movq	56(%rdi), %rax
  405a10: 48 89 e3                     	movq	%rsp, %rbx
  405a13: 48 89 03                     	movq	%rax, (%rbx)
  405a16: 4c 8b 67 28                  	movq	40(%rdi), %r12
  405a1a: 49 29 c4                     	subq	%rax, %r12
  405a1d: 4c 89 63 08                  	movq	%r12, 8(%rbx)
; 		{ .iov_base = (void *)buf, .iov_len = len }
  405a21: 48 89 73 10                  	movq	%rsi, 16(%rbx)
  405a25: 48 89 53 18                  	movq	%rdx, 24(%rbx)
; 	size_t rem = iov[0].iov_len + iov[1].iov_len;
  405a29: 49 01 d4                     	addq	%rdx, %r12
; 		cnt = syscall(SYS_writev, f->fd, iov, iovcnt);
  405a2c: 48 63 7f 78                  	movslq	120(%rdi), %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405a30: b8 14 00 00 00               	movl	$20, %eax
  405a35: ba 02 00 00 00               	movl	$2, %edx
  405a3a: 48 89 de                     	movq	%rbx, %rsi
  405a3d: 0f 05                        	syscall
; 		cnt = syscall(SYS_writev, f->fd, iov, iovcnt);
  405a3f: 48 89 c7                     	movq	%rax, %rdi
  405a42: e8 c9 e4 ff ff               	callq	-6967 <__syscall_ret>
; 		if (cnt == rem) {
  405a47: 49 39 c4                     	cmpq	%rax, %r12
  405a4a: 74 52                        	je	82 <__stdio_write+0xa6>
  405a4c: bd 02 00 00 00               	movl	$2, %ebp
  405a51: 45 31 ed                     	xorl	%r13d, %r13d
; 		if (cnt < 0) {
  405a54: 48 85 c0                     	testq	%rax, %rax
  405a57: 78 6e                        	js	110 <__stdio_write+0xcf>
; 		rem -= cnt;
  405a59: 49 29 c4                     	subq	%rax, %r12
; 		if (cnt > iov[0].iov_len) {
  405a5c: 48 8b 4b 08                  	movq	8(%rbx), %rcx
  405a60: 31 d2                        	xorl	%edx, %edx
  405a62: 48 39 c8                     	cmpq	%rcx, %rax
  405a65: 0f 97 c2                     	seta	%dl
  405a68: 48 8d 73 10                  	leaq	16(%rbx), %rsi
  405a6c: 48 0f 47 de                  	cmovaq	%rsi, %rbx
  405a70: 49 0f 46 cd                  	cmovbeq	%r13, %rcx
  405a74: 48 29 c8                     	subq	%rcx, %rax
; 		iov[0].iov_base = (char *)iov[0].iov_base + cnt;
  405a77: 48 01 03                     	addq	%rax, (%rbx)
; 		if (cnt > iov[0].iov_len) {
  405a7a: 29 d5                        	subl	%edx, %ebp
; 		iov[0].iov_len -= cnt;
  405a7c: 48 29 43 08                  	subq	%rax, 8(%rbx)
; 		cnt = syscall(SYS_writev, f->fd, iov, iovcnt);
  405a80: 49 63 7f 78                  	movslq	120(%r15), %rdi
  405a84: 48 63 d5                     	movslq	%ebp, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405a87: b8 14 00 00 00               	movl	$20, %eax
  405a8c: 48 89 de                     	movq	%rbx, %rsi
  405a8f: 0f 05                        	syscall
; 		cnt = syscall(SYS_writev, f->fd, iov, iovcnt);
  405a91: 48 89 c7                     	movq	%rax, %rdi
  405a94: e8 77 e4 ff ff               	callq	-7049 <__syscall_ret>
; 		if (cnt == rem) {
  405a99: 49 39 c4                     	cmpq	%rax, %r12
  405a9c: 75 b6                        	jne	-74 <__stdio_write+0x5c>
; 			f->wend = f->buf + f->buf_size;
  405a9e: 49 8b 47 58                  	movq	88(%r15), %rax
  405aa2: 49 8b 4f 60                  	movq	96(%r15), %rcx
  405aa6: 48 01 c1                     	addq	%rax, %rcx
  405aa9: 49 89 4f 20                  	movq	%rcx, 32(%r15)
; 			f->wpos = f->wbase = f->buf;
  405aad: 49 89 47 38                  	movq	%rax, 56(%r15)
  405ab1: 49 89 47 28                  	movq	%rax, 40(%r15)
; }
  405ab5: 4c 89 f0                     	movq	%r14, %rax
  405ab8: 48 83 c4 28                  	addq	$40, %rsp
  405abc: 5b                           	popq	%rbx
  405abd: 41 5c                        	popq	%r12
  405abf: 41 5d                        	popq	%r13
  405ac1: 41 5e                        	popq	%r14
  405ac3: 41 5f                        	popq	%r15
  405ac5: 5d                           	popq	%rbp
  405ac6: c3                           	retq
; 			f->wpos = f->wbase = f->wend = 0;
  405ac7: 49 c7 47 38 00 00 00 00      	movq	$0, 56(%r15)
  405acf: 0f 57 c0                     	xorps	%xmm0, %xmm0
  405ad2: 41 0f 11 47 20               	movups	%xmm0, 32(%r15)
; 			f->flags |= F_ERR;
  405ad7: 41 80 0f 20                  	orb	$32, (%r15)
; 			return iovcnt == 2 ? 0 : len-iov[0].iov_len;
  405adb: 83 fd 02                     	cmpl	$2, %ebp
  405ade: 75 05                        	jne	5 <__stdio_write+0xed>
  405ae0: 45 31 f6                     	xorl	%r14d, %r14d
  405ae3: eb d0                        	jmp	-48 <__stdio_write+0xbd>
  405ae5: 4c 2b 73 08                  	subq	8(%rbx), %r14
  405ae9: eb ca                        	jmp	-54 <__stdio_write+0xbd>
  405aeb: 90                           	nop

0000000000405aec __stdout_write:
; {
  405aec: 50                           	pushq	%rax
  405aed: 49 89 d0                     	movq	%rdx, %r8
  405af0: 49 89 f1                     	movq	%rsi, %r9
  405af3: 49 89 fa                     	movq	%rdi, %r10
; 	f->write = __stdio_write;
  405af6: 48 c7 47 48 f8 59 40 00      	movq	$4217336, 72(%rdi)
; 	if (!(f->flags & F_SVB) && __syscall(SYS_ioctl, f->fd, TIOCGWINSZ, &wsz))
  405afe: f6 07 40                     	testb	$64, (%rdi)
  405b01: 75 23                        	jne	35 <__stdout_write+0x3a>
  405b03: 49 63 7a 78                  	movslq	120(%r10), %rdi
  405b07: 48 89 e2                     	movq	%rsp, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405b0a: b8 10 00 00 00               	movl	$16, %eax
  405b0f: be 13 54 00 00               	movl	$21523, %esi
  405b14: 0f 05                        	syscall
; 	if (!(f->flags & F_SVB) && __syscall(SYS_ioctl, f->fd, TIOCGWINSZ, &wsz))
  405b16: 48 85 c0                     	testq	%rax, %rax
  405b19: 74 0b                        	je	11 <__stdout_write+0x3a>
; 		f->lbf = -1;
  405b1b: 41 c7 82 90 00 00 00 ff ff ff ff     	movl	$4294967295, 144(%r10)
; 	return __stdio_write(f, buf, len);
  405b26: 4c 89 d7                     	movq	%r10, %rdi
  405b29: 4c 89 ce                     	movq	%r9, %rsi
  405b2c: 4c 89 c2                     	movq	%r8, %rdx
  405b2f: e8 c4 fe ff ff               	callq	-316 <__stdio_write>
  405b34: 59                           	popq	%rcx
  405b35: c3                           	retq
  405b36: 66 90                        	nop

0000000000405b38 __towrite:
; 	if (f->flags & F_NOWR) {
  405b38: 8b 07                        	movl	(%rdi), %eax
; 	f->mode |= f->mode-1;
  405b3a: 8b 8f 88 00 00 00            	movl	136(%rdi), %ecx
  405b40: 8d 51 ff                     	leal	-1(%rcx), %edx
  405b43: 09 ca                        	orl	%ecx, %edx
  405b45: 89 97 88 00 00 00            	movl	%edx, 136(%rdi)
; 	if (f->flags & F_NOWR) {
  405b4b: a8 08                        	testb	$8, %al
  405b4d: 75 1e                        	jne	30 <__towrite+0x35>
; 	f->rpos = f->rend = 0;
  405b4f: 0f 57 c0                     	xorps	%xmm0, %xmm0
  405b52: 0f 11 47 08                  	movups	%xmm0, 8(%rdi)
; 	f->wpos = f->wbase = f->buf;
  405b56: 48 8b 47 58                  	movq	88(%rdi), %rax
  405b5a: 48 89 47 38                  	movq	%rax, 56(%rdi)
  405b5e: 48 89 47 28                  	movq	%rax, 40(%rdi)
; 	f->wend = f->buf + f->buf_size;
  405b62: 48 03 47 60                  	addq	96(%rdi), %rax
  405b66: 48 89 47 20                  	movq	%rax, 32(%rdi)
  405b6a: 31 c0                        	xorl	%eax, %eax
; }
  405b6c: c3                           	retq
; 		f->flags |= F_ERR;
  405b6d: 83 c8 20                     	orl	$32, %eax
  405b70: 89 07                        	movl	%eax, (%rdi)
  405b72: b8 ff ff ff ff               	movl	$4294967295, %eax
; }
  405b77: c3                           	retq

0000000000405b78 __towrite_needs_stdio_exit:
; 	__stdio_exit_needed();
  405b78: e9 37 0a 00 00               	jmp	2615 <__stdio_exit_needed>
  405b7d: 0f 1f 00                     	nopl	(%rax)

0000000000405b80 __fwritex:
; {
  405b80: 55                           	pushq	%rbp
  405b81: 41 57                        	pushq	%r15
  405b83: 41 56                        	pushq	%r14
  405b85: 41 55                        	pushq	%r13
  405b87: 41 54                        	pushq	%r12
  405b89: 53                           	pushq	%rbx
  405b8a: 50                           	pushq	%rax
  405b8b: 49 89 d6                     	movq	%rdx, %r14
  405b8e: 49 89 f5                     	movq	%rsi, %r13
  405b91: 49 89 ff                     	movq	%rdi, %r15
; 	if (!f->wend && __towrite(f)) return 0;
  405b94: 48 8b 42 20                  	movq	32(%rdx), %rax
  405b98: 48 85 c0                     	testq	%rax, %rax
  405b9b: 0f 84 8e 00 00 00            	je	142 <__fwritex+0xaf>
; 	if (l > f->wend - f->wpos) return f->write(f, s, l);
  405ba1: 49 8b 7e 28                  	movq	40(%r14), %rdi
  405ba5: 48 29 f8                     	subq	%rdi, %rax
  405ba8: 4c 39 e8                     	cmpq	%r13, %rax
  405bab: 73 1d                        	jae	29 <__fwritex+0x4a>
  405bad: 49 8b 46 48                  	movq	72(%r14), %rax
  405bb1: 4c 89 f7                     	movq	%r14, %rdi
  405bb4: 4c 89 fe                     	movq	%r15, %rsi
  405bb7: 4c 89 ea                     	movq	%r13, %rdx
  405bba: 48 83 c4 08                  	addq	$8, %rsp
  405bbe: 5b                           	popq	%rbx
  405bbf: 41 5c                        	popq	%r12
  405bc1: 41 5d                        	popq	%r13
  405bc3: 41 5e                        	popq	%r14
  405bc5: 41 5f                        	popq	%r15
  405bc7: 5d                           	popq	%rbp
  405bc8: ff e0                        	jmpq	*%rax
; 	if (f->lbf >= 0) {
  405bca: 41 83 be 90 00 00 00 00      	cmpl	$0, 144(%r14)
  405bd2: 78 6b                        	js	107 <__fwritex+0xbf>
  405bd4: 48 c7 c3 ff ff ff ff         	movq	$-1, %rbx
; 		for (i=l; i && s[i-1] != '\n'; i--);
  405bdb: 4c 89 fd                     	movq	%r15, %rbp
  405bde: 48 31 dd                     	xorq	%rbx, %rbp
  405be1: 49 8d 04 1f                  	leaq	(%r15,%rbx), %rax
  405be5: 45 31 e4                     	xorl	%r12d, %r12d
  405be8: b9 01 00 00 00               	movl	$1, %ecx
  405bed: 31 d2                        	xorl	%edx, %edx
  405bef: 49 39 d5                     	cmpq	%rdx, %r13
  405bf2: 74 4e                        	je	78 <__fwritex+0xc2>
  405bf4: 48 01 cb                     	addq	%rcx, %rbx
  405bf7: 48 01 cd                     	addq	%rcx, %rbp
  405bfa: 48 01 ca                     	addq	%rcx, %rdx
  405bfd: 42 80 3c 28 0a               	cmpb	$10, (%rax,%r13)
  405c02: 48 8d 40 ff                  	leaq	-1(%rax), %rax
  405c06: 75 e7                        	jne	-25 <__fwritex+0x6f>
; 			size_t n = f->write(f, s, i);
  405c08: 4d 89 ec                     	movq	%r13, %r12
  405c0b: 49 29 dc                     	subq	%rbx, %r12
  405c0e: 4c 89 f7                     	movq	%r14, %rdi
  405c11: 4c 89 fe                     	movq	%r15, %rsi
  405c14: 4c 89 e2                     	movq	%r12, %rdx
  405c17: 41 ff 56 48                  	callq	*72(%r14)
; 			if (n < i) return n;
  405c1b: 4c 39 e0                     	cmpq	%r12, %rax
  405c1e: 72 37                        	jb	55 <__fwritex+0xd7>
  405c20: 4d 89 ef                     	movq	%r13, %r15
  405c23: 49 29 ef                     	subq	%rbp, %r15
; 	memcpy(f->wpos, s, l);
  405c26: 49 8b 7e 28                  	movq	40(%r14), %rdi
  405c2a: 49 89 dd                     	movq	%rbx, %r13
  405c2d: eb 13                        	jmp	19 <__fwritex+0xc2>
; 	if (!f->wend && __towrite(f)) return 0;
  405c2f: 4c 89 f7                     	movq	%r14, %rdi
  405c32: e8 01 ff ff ff               	callq	-255 <__towrite>
  405c37: 85 c0                        	testl	%eax, %eax
  405c39: 74 2b                        	je	43 <__fwritex+0xe6>
  405c3b: 31 c0                        	xorl	%eax, %eax
  405c3d: eb 18                        	jmp	24 <__fwritex+0xd7>
  405c3f: 45 31 e4                     	xorl	%r12d, %r12d
; 	memcpy(f->wpos, s, l);
  405c42: 4c 89 fe                     	movq	%r15, %rsi
  405c45: 4c 89 ea                     	movq	%r13, %rdx
  405c48: e8 97 01 00 00               	callq	407 <memcpy>
; 	f->wpos += l;
  405c4d: 4d 01 6e 28                  	addq	%r13, 40(%r14)
; 	return l+i;
  405c51: 4d 01 ec                     	addq	%r13, %r12
  405c54: 4c 89 e0                     	movq	%r12, %rax
; }
  405c57: 48 83 c4 08                  	addq	$8, %rsp
  405c5b: 5b                           	popq	%rbx
  405c5c: 41 5c                        	popq	%r12
  405c5e: 41 5d                        	popq	%r13
  405c60: 41 5e                        	popq	%r14
  405c62: 41 5f                        	popq	%r15
  405c64: 5d                           	popq	%rbp
  405c65: c3                           	retq
; 	if (l > f->wend - f->wpos) return f->write(f, s, l);
  405c66: 49 8b 46 20                  	movq	32(%r14), %rax
  405c6a: e9 32 ff ff ff               	jmp	-206 <__fwritex+0x21>

0000000000405c6f fwrite_unlocked:
; {
  405c6f: 55                           	pushq	%rbp
  405c70: 41 57                        	pushq	%r15
  405c72: 41 56                        	pushq	%r14
  405c74: 41 55                        	pushq	%r13
  405c76: 41 54                        	pushq	%r12
  405c78: 53                           	pushq	%rbx
  405c79: 50                           	pushq	%rax
  405c7a: 49 89 cc                     	movq	%rcx, %r12
  405c7d: 49 89 d7                     	movq	%rdx, %r15
  405c80: 49 89 f6                     	movq	%rsi, %r14
  405c83: 49 89 fd                     	movq	%rdi, %r13
; 	size_t k, l = size*nmemb;
  405c86: 48 89 d3                     	movq	%rdx, %rbx
  405c89: 48 0f af de                  	imulq	%rsi, %rbx
; 	if (!size) nmemb = 0;
  405c8d: 48 85 f6                     	testq	%rsi, %rsi
  405c90: 4c 0f 44 fe                  	cmoveq	%rsi, %r15
; 	FLOCK(f);
  405c94: 83 b9 8c 00 00 00 00         	cmpl	$0, 140(%rcx)
  405c9b: 78 29                        	js	41 <fwrite_unlocked+0x57>
  405c9d: 4c 89 e7                     	movq	%r12, %rdi
  405ca0: e8 8f fb ff ff               	callq	-1137 <__lockfile>
  405ca5: 89 c5                        	movl	%eax, %ebp
; 	k = __fwritex(src, l, f);
  405ca7: 4c 89 ef                     	movq	%r13, %rdi
  405caa: 48 89 de                     	movq	%rbx, %rsi
  405cad: 4c 89 e2                     	movq	%r12, %rdx
  405cb0: e8 cb fe ff ff               	callq	-309 <__fwritex>
  405cb5: 49 89 c5                     	movq	%rax, %r13
; 	FLOCK(f);
  405cb8: 85 ed                        	testl	%ebp, %ebp
; 	FUNLOCK(f);
  405cba: 74 1b                        	je	27 <fwrite_unlocked+0x68>
  405cbc: 4c 89 e7                     	movq	%r12, %rdi
  405cbf: e8 09 fc ff ff               	callq	-1015 <__unlockfile>
  405cc4: eb 11                        	jmp	17 <fwrite_unlocked+0x68>
; 	k = __fwritex(src, l, f);
  405cc6: 4c 89 ef                     	movq	%r13, %rdi
  405cc9: 48 89 de                     	movq	%rbx, %rsi
  405ccc: 4c 89 e2                     	movq	%r12, %rdx
  405ccf: e8 ac fe ff ff               	callq	-340 <__fwritex>
  405cd4: 49 89 c5                     	movq	%rax, %r13
; 	return k==l ? nmemb : k/size;
  405cd7: 49 39 dd                     	cmpq	%rbx, %r13
  405cda: 74 0b                        	je	11 <fwrite_unlocked+0x78>
  405cdc: 4c 89 e8                     	movq	%r13, %rax
  405cdf: 31 d2                        	xorl	%edx, %edx
  405ce1: 49 f7 f6                     	divq	%r14
  405ce4: 49 89 c7                     	movq	%rax, %r15
  405ce7: 4c 89 f8                     	movq	%r15, %rax
  405cea: 48 83 c4 08                  	addq	$8, %rsp
  405cee: 5b                           	popq	%rbx
  405cef: 41 5c                        	popq	%r12
  405cf1: 41 5d                        	popq	%r13
  405cf3: 41 5e                        	popq	%r14
  405cf5: 41 5f                        	popq	%r15
  405cf7: 5d                           	popq	%rbp
  405cf8: c3                           	retq
  405cf9: 0f 1f 00                     	nopl	(%rax)

0000000000405cfc __ofl_add:
; {
  405cfc: 53                           	pushq	%rbx
  405cfd: 48 89 fb                     	movq	%rdi, %rbx
; 	FILE **head = __ofl_lock();
  405d00: e8 e3 ba ff ff               	callq	-17693 <__ofl_lock>
; 	f->next = *head;
  405d05: 48 8b 08                     	movq	(%rax), %rcx
  405d08: 48 89 4b 70                  	movq	%rcx, 112(%rbx)
; 	if (*head) (*head)->prev = f;
  405d0c: 48 8b 08                     	movq	(%rax), %rcx
  405d0f: 48 85 c9                     	testq	%rcx, %rcx
  405d12: 74 04                        	je	4 <__ofl_add+0x1c>
  405d14: 48 89 59 68                  	movq	%rbx, 104(%rcx)
; 	*head = f;
  405d18: 48 89 18                     	movq	%rbx, (%rax)
; 	__ofl_unlock();
  405d1b: e8 da ba ff ff               	callq	-17702 <__ofl_unlock>
; 	return f;
  405d20: 48 89 d8                     	movq	%rbx, %rax
  405d23: 5b                           	popq	%rbx
  405d24: c3                           	retq
  405d25: 0f 1f 00                     	nopl	(%rax)
  405d28: 0f 1f 84 00 00 00 00 00      	nopl	(%rax,%rax)

0000000000405d30 memchr:
; {
  405d30: 48 89 f8                     	movq	%rdi, %rax
; 	for (; ((uintptr_t)s & ALIGN) && n && *s != c; s++, n--);
  405d33: 48 85 d2                     	testq	%rdx, %rdx
  405d36: 0f 95 c1                     	setne	%cl
  405d39: 74 25                        	je	37 <memchr+0x30>
  405d3b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
  405d40: 89 c7                        	movl	%eax, %edi
  405d42: 83 e7 07                     	andl	$7, %edi
  405d45: 48 85 ff                     	testq	%rdi, %rdi
  405d48: 74 16                        	je	22 <memchr+0x30>
  405d4a: 40 38 30                     	cmpb	%sil, (%rax)
  405d4d: 74 15                        	je	21 <memchr+0x34>
  405d4f: 48 83 c0 01                  	addq	$1, %rax
  405d53: 48 83 fa 01                  	cmpq	$1, %rdx
  405d57: 48 8d 52 ff                  	leaq	-1(%rdx), %rdx
  405d5b: 0f 95 c1                     	setne	%cl
  405d5e: 75 e0                        	jne	-32 <memchr+0x10>
; 	if (n && *s != c) {
  405d60: 84 c9                        	testb	%cl, %cl
  405d62: 74 7b                        	je	123 <memchr+0xaf>
  405d64: 40 38 30                     	cmpb	%sil, (%rax)
  405d67: 74 5c                        	je	92 <memchr+0x95>
; 		for (w = (const void *)s; n>=SS && !HASZERO(*w^k); w++, n-=SS);
  405d69: 48 83 fa 08                  	cmpq	$8, %rdx
  405d6d: 72 56                        	jb	86 <memchr+0x95>
  405d6f: 40 0f b6 ce                  	movzbl	%sil, %ecx
  405d73: 89 cf                        	movl	%ecx, %edi
  405d75: 49 ba 01 01 01 01 01 01 01 01	movabsq	$72340172838076673, %r10
  405d7f: 4c 0f af d7                  	imulq	%rdi, %r10
  405d83: 49 b8 80 80 80 80 80 80 80 80	movabsq	$-9187201950435737472, %r8
  405d8d: 49 b9 ff fe fe fe fe fe fe fe	movabsq	$-72340172838076673, %r9
  405d97: 66 0f 1f 84 00 00 00 00 00   	nopw	(%rax,%rax)
  405da0: 48 8b 38                     	movq	(%rax), %rdi
  405da3: 4c 31 d7                     	xorq	%r10, %rdi
  405da6: 48 89 f9                     	movq	%rdi, %rcx
  405da9: 48 f7 d1                     	notq	%rcx
  405dac: 4c 21 c1                     	andq	%r8, %rcx
  405daf: 4c 01 cf                     	addq	%r9, %rdi
  405db2: 48 85 f9                     	testq	%rdi, %rcx
  405db5: 75 0e                        	jne	14 <memchr+0x95>
  405db7: 48 83 c0 08                  	addq	$8, %rax
  405dbb: 48 83 c2 f8                  	addq	$-8, %rdx
  405dbf: 48 83 fa 07                  	cmpq	$7, %rdx
  405dc3: 77 db                        	ja	-37 <memchr+0x70>
; 	for (; n && *s != c; s++, n--);
  405dc5: 48 85 d2                     	testq	%rdx, %rdx
  405dc8: 74 15                        	je	21 <memchr+0xaf>
  405dca: 66 0f 1f 44 00 00            	nopw	(%rax,%rax)
  405dd0: 40 38 30                     	cmpb	%sil, (%rax)
  405dd3: 74 0c                        	je	12 <memchr+0xb1>
  405dd5: 48 83 c0 01                  	addq	$1, %rax
  405dd9: 48 83 c2 ff                  	addq	$-1, %rdx
  405ddd: 75 f1                        	jne	-15 <memchr+0xa0>
  405ddf: 31 c0                        	xorl	%eax, %eax
; 	return n ? (void *)s : 0;
  405de1: c3                           	retq
  405de2: 66 90                        	nop

0000000000405de4 memcpy:
; 	mov %rdi,%rax
  405de4: 48 89 f8                     	movq	%rdi, %rax
; 	cmp $8,%rdx
  405de7: 48 83 fa 08                  	cmpq	$8, %rdx
; 	jc 1f
  405deb: 72 14                        	jb	20 <memcpy+0x1d>
; 	test $7,%edi
  405ded: f7 c7 07 00 00 00            	testl	$7, %edi
; 	jz 1f
  405df3: 74 0c                        	je	12 <memcpy+0x1d>
; 2:	movsb
  405df5: a4                           	movsb	(%rsi), %es:(%rdi)
; 	dec %rdx
  405df6: 48 ff ca                     	decq	%rdx
; 	test $7,%edi
  405df9: f7 c7 07 00 00 00            	testl	$7, %edi
; 	jnz 2b
  405dff: 75 f4                        	jne	-12 <memcpy+0x11>
; 1:	mov %rdx,%rcx
  405e01: 48 89 d1                     	movq	%rdx, %rcx
; 	shr $3,%rcx
  405e04: 48 c1 e9 03                  	shrq	$3, %rcx
; 	rep
  405e08: f3 48 a5                     	rep		movsq	(%rsi), %es:(%rdi)
; 	and $7,%edx
  405e0b: 83 e2 07                     	andl	$7, %edx
; 	jz 1f
  405e0e: 74 05                        	je	5 <memcpy+0x31>
; 2:	movsb
  405e10: a4                           	movsb	(%rsi), %es:(%rdi)
; 	dec %edx
  405e11: ff ca                        	decl	%edx
; 	jnz 2b
  405e13: 75 fb                        	jne	-5 <memcpy+0x2c>
; 1:	ret
  405e15: c3                           	retq
  405e16: 66 90                        	nop

0000000000405e18 __wait:
; {
  405e18: 55                           	pushq	%rbp
  405e19: 53                           	pushq	%rbx
  405e1a: 41 89 d1                     	movl	%edx, %r9d
  405e1d: 49 89 f0                     	movq	%rsi, %r8
  405e20: 31 db                        	xorl	%ebx, %ebx
  405e22: 85 c9                        	testl	%ecx, %ecx
  405e24: 0f 95 c3                     	setne	%bl
; 	if (priv) priv = FUTEX_PRIVATE;
  405e27: 48 c1 e3 07                  	shlq	$7, %rbx
  405e2b: b8 9c ff ff ff               	movl	$4294967196, %eax
  405e30: 4d 85 c0                     	testq	%r8, %r8
; 	while (spins-- && (!waiters || !*waiters)) {
  405e33: 74 06                        	je	6 <__wait+0x23>
  405e35: 41 83 38 00                  	cmpl	$0, (%r8)
  405e39: 75 12                        	jne	18 <__wait+0x35>
; 		if (*addr==val) a_spin();
  405e3b: 8b 0f                        	movl	(%rdi), %ecx
  405e3d: 44 39 c9                     	cmpl	%r9d, %ecx
  405e40: 75 4f                        	jne	79 <__wait+0x79>
; 	__asm__ __volatile__( "pause" : : : "memory" );
  405e42: f3 90                        	pause
; 	while (spins-- && (!waiters || !*waiters)) {
  405e44: ff c0                        	incl	%eax
  405e46: 75 e8                        	jne	-24 <__wait+0x18>
  405e48: 4d 85 c0                     	testq	%r8, %r8
; 	if (waiters) a_inc(waiters);
  405e4b: 74 09                        	je	9 <__wait+0x3e>
; 	__asm__ __volatile__(
  405e4d: f0                           	lock
  405e4e: 41 ff 00                     	incl	(%r8)
  405e51: 40 b5 01                     	movb	$1, %bpl
  405e54: eb 02                        	jmp	2 <__wait+0x40>
  405e56: 31 ed                        	xorl	%ebp, %ebp
; 	while (*addr==val) {
  405e58: 8b 07                        	movl	(%rdi), %eax
  405e5a: 44 39 c8                     	cmpl	%r9d, %eax
  405e5d: 75 29                        	jne	41 <__wait+0x70>
  405e5f: 49 63 d1                     	movslq	%r9d, %rdx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405e62: b8 ca 00 00 00               	movl	$202, %eax
  405e67: 48 89 de                     	movq	%rbx, %rsi
  405e6a: 45 31 d2                     	xorl	%r10d, %r10d
  405e6d: 0f 05                        	syscall
; 		__syscall(SYS_futex, addr, FUTEX_WAIT|priv, val, 0) != -ENOSYS
  405e6f: 48 83 f8 da                  	cmpq	$-38, %rax
; 		|| __syscall(SYS_futex, addr, FUTEX_WAIT, val, 0);
  405e73: 75 0c                        	jne	12 <__wait+0x69>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  405e75: b8 ca 00 00 00               	movl	$202, %eax
  405e7a: 31 f6                        	xorl	%esi, %esi
  405e7c: 45 31 d2                     	xorl	%r10d, %r10d
  405e7f: 0f 05                        	syscall
; 	while (*addr==val) {
  405e81: 8b 07                        	movl	(%rdi), %eax
  405e83: 44 39 c8                     	cmpl	%r9d, %eax
  405e86: 74 da                        	je	-38 <__wait+0x4a>
; 	if (waiters) a_dec(waiters);
  405e88: 40 84 ed                     	testb	%bpl, %bpl
  405e8b: 74 04                        	je	4 <__wait+0x79>
; 	__asm__ __volatile__(
  405e8d: f0                           	lock
  405e8e: 41 ff 08                     	decl	(%r8)
; }
  405e91: 5b                           	popq	%rbx
  405e92: 5d                           	popq	%rbp
  405e93: c3                           	retq

0000000000405e94 __set_thread_area:
; 	mov %rdi,%rsi           /* shift for syscall */
  405e94: 48 89 fe                     	movq	%rdi, %rsi
; 	movl $0x1002,%edi       /* SET_FS register */
  405e97: bf 02 10 00 00               	movl	$4098, %edi
; 	movl $158,%eax          /* set fs segment to */
  405e9c: b8 9e 00 00 00               	movl	$158, %eax
; 	syscall                 /* arch_prctl(SET_FS, arg)*/
  405ea1: 0f 05                        	syscall
; 	ret
  405ea3: c3                           	retq

0000000000405ea4 clock_gettime:
; {
  405ea4: 55                           	pushq	%rbp
  405ea5: 53                           	pushq	%rbx
  405ea6: 50                           	pushq	%rax
  405ea7: 48 89 f3                     	movq	%rsi, %rbx
  405eaa: 89 fd                        	movl	%edi, %ebp
; 		(int (*)(clockid_t, struct timespec *))vdso_func;
  405eac: 48 8b 05 5d 2e 00 00         	movq	11869(%rip), %rax
; 	if (f) {
  405eb3: 48 85 c0                     	testq	%rax, %rax
  405eb6: 74 1b                        	je	27 <clock_gettime+0x2f>
; 		r = f(clk, ts);
  405eb8: 89 ef                        	movl	%ebp, %edi
  405eba: 48 89 de                     	movq	%rbx, %rsi
  405ebd: ff d0                        	callq	*%rax
  405ebf: 89 c2                        	movl	%eax, %edx
; 		if (!r) return r;
  405ec1: 85 c0                        	testl	%eax, %eax
  405ec3: 74 36                        	je	54 <clock_gettime+0x57>
  405ec5: 83 fa ea                     	cmpl	$-22, %edx
  405ec8: 75 09                        	jne	9 <clock_gettime+0x2f>
; 		if (r == -EINVAL) return __syscall_ret(r);
  405eca: 48 c7 c7 ea ff ff ff         	movq	$-22, %rdi
  405ed1: eb 20                        	jmp	32 <clock_gettime+0x4f>
; 	r = __syscall(SYS_clock_gettime, clk, ts);
  405ed3: 48 63 fd                     	movslq	%ebp, %rdi
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  405ed6: b8 e4 00 00 00               	movl	$228, %eax
  405edb: 48 89 de                     	movq	%rbx, %rsi
  405ede: 0f 05                        	syscall
; 	if (r == -ENOSYS) {
  405ee0: 83 f8 da                     	cmpl	$-38, %eax
  405ee3: 75 0b                        	jne	11 <clock_gettime+0x4c>
  405ee5: 48 c7 c0 ea ff ff ff         	movq	$-22, %rax
; 		if (clk == CLOCK_REALTIME) {
  405eec: 85 ed                        	testl	%ebp, %ebp
  405eee: 74 14                        	je	20 <clock_gettime+0x60>
; 	return __syscall_ret(r);
  405ef0: 48 63 f8                     	movslq	%eax, %rdi
  405ef3: e8 18 e0 ff ff               	callq	-8168 <__syscall_ret>
  405ef8: 48 89 c2                     	movq	%rax, %rdx
; }
  405efb: 89 d0                        	movl	%edx, %eax
  405efd: 48 83 c4 08                  	addq	$8, %rsp
  405f01: 5b                           	popq	%rbx
  405f02: 5d                           	popq	%rbp
  405f03: c3                           	retq
  405f04: 31 d2                        	xorl	%edx, %edx
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  405f06: b8 60 00 00 00               	movl	$96, %eax
  405f0b: 48 89 df                     	movq	%rbx, %rdi
  405f0e: 31 f6                        	xorl	%esi, %esi
  405f10: 0f 05                        	syscall
  405f12: 48 b8 00 00 00 00 e8 03 00 00	movabsq	$4294967296000, %rax
; 			ts->tv_nsec = (int)ts->tv_nsec * 1000;
  405f1c: 48 0f af 43 08               	imulq	8(%rbx), %rax
  405f21: 48 c1 f8 20                  	sarq	$32, %rax
  405f25: 48 89 43 08                  	movq	%rax, 8(%rbx)
  405f29: eb d0                        	jmp	-48 <clock_gettime+0x57>

0000000000405f2b cgt_init:
; {
  405f2b: 55                           	pushq	%rbp
  405f2c: 53                           	pushq	%rbx
  405f2d: 50                           	pushq	%rax
  405f2e: 48 89 f3                     	movq	%rsi, %rbx
  405f31: 89 fd                        	movl	%edi, %ebp
; 	void *p = __vdsosym(VDSO_CGT_VER, VDSO_CGT_SYM);
  405f33: bf c0 78 40 00               	movl	$4225216, %edi
  405f38: be ca 78 40 00               	movl	$4225226, %esi
  405f3d: e8 3e 00 00 00               	callq	62 <__vdsosym>
  405f42: 48 89 c1                     	movq	%rax, %rcx
; 	__asm__( "lock ; cmpxchg %3, %1"
  405f45: b8 2b 5f 40 00               	movl	$4218667, %eax
  405f4a: f0                           	lock
  405f4b: 48 0f b1 0d bd 2d 00 00      	cmpxchgq	%rcx, 11709(%rip)
; 	return f ? f(clk, ts) : -ENOSYS;
  405f53: 48 85 c9                     	testq	%rcx, %rcx
  405f56: 74 0d                        	je	13 <cgt_init+0x3a>
  405f58: 89 ef                        	movl	%ebp, %edi
  405f5a: 48 89 de                     	movq	%rbx, %rsi
  405f5d: 48 83 c4 08                  	addq	$8, %rsp
  405f61: 5b                           	popq	%rbx
  405f62: 5d                           	popq	%rbp
  405f63: ff e1                        	jmpq	*%rcx
  405f65: b8 da ff ff ff               	movl	$4294967258, %eax
  405f6a: 48 83 c4 08                  	addq	$8, %rsp
  405f6e: 5b                           	popq	%rbx
  405f6f: 5d                           	popq	%rbp
  405f70: c3                           	retq
  405f71: 0f 1f 00                     	nopl	(%rax)
  405f74: 66 66 66 2e 0f 1f 84 00 00 00 00 00  	nopw	%cs:(%rax,%rax)

0000000000405f80 __vdsosym:
; {
  405f80: 55                           	pushq	%rbp
  405f81: 41 57                        	pushq	%r15
  405f83: 41 56                        	pushq	%r14
  405f85: 41 55                        	pushq	%r13
  405f87: 41 54                        	pushq	%r12
  405f89: 53                           	pushq	%rbx
  405f8a: 48 83 ec 28                  	subq	$40, %rsp
  405f8e: 49 89 f1                     	movq	%rsi, %r9
  405f91: 48 8b 05 d8 6d 08 00         	movq	552408(%rip), %rax
; 	for (i=0; libc.auxv[i] != AT_SYSINFO_EHDR; i+=2)
  405f98: 48 83 c0 08                  	addq	$8, %rax
  405f9c: 48 8b 48 f8                  	movq	-8(%rax), %rcx
  405fa0: 48 85 c9                     	testq	%rcx, %rcx
  405fa3: 0f 84 4a 02 00 00            	je	586 <__vdsosym+0x273>
  405fa9: 0f 1f 80 00 00 00 00         	nopl	(%rax)
  405fb0: 48 83 f9 21                  	cmpq	$33, %rcx
  405fb4: 74 12                        	je	18 <__vdsosym+0x48>
  405fb6: 48 83 c0 10                  	addq	$16, %rax
  405fba: 48 8b 48 f8                  	movq	-8(%rax), %rcx
  405fbe: 48 85 c9                     	testq	%rcx, %rcx
  405fc1: 75 ed                        	jne	-19 <__vdsosym+0x30>
  405fc3: e9 2b 02 00 00               	jmp	555 <__vdsosym+0x273>
; 	if (!libc.auxv[i+1]) return 0;
  405fc8: 4c 8b 10                     	movq	(%rax), %r10
  405fcb: 4d 85 d2                     	testq	%r10, %r10
  405fce: 0f 84 1f 02 00 00            	je	543 <__vdsosym+0x273>
; 	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  405fd4: 41 0f b7 42 38               	movzwl	56(%r10), %eax
  405fd9: 48 85 c0                     	testq	%rax, %rax
  405fdc: 0f 84 11 02 00 00            	je	529 <__vdsosym+0x273>
  405fe2: 49 8b 6a 20                  	movq	32(%r10), %rbp
; 	Phdr *ph = (void *)((char *)eh + eh->e_phoff);
  405fe6: 4c 01 d5                     	addq	%r10, %rbp
; 	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  405fe9: 41 89 c0                     	movl	%eax, %r8d
  405fec: 41 83 e0 01                  	andl	$1, %r8d
  405ff0: 66 83 f8 01                  	cmpw	$1, %ax
  405ff4: 75 0e                        	jne	14 <__vdsosym+0x84>
  405ff6: 49 c7 c4 ff ff ff ff         	movq	$-1, %r12
  405ffd: 31 c0                        	xorl	%eax, %eax
  405fff: e9 91 00 00 00               	jmp	145 <__vdsosym+0x115>
  406004: 41 0f b7 4a 36               	movzwl	54(%r10), %ecx
  406009: 4c 89 c2                     	movq	%r8, %rdx
  40600c: 48 29 c2                     	subq	%rax, %rdx
  40600f: 49 c7 c4 ff ff ff ff         	movq	$-1, %r12
  406016: 31 c0                        	xorl	%eax, %eax
  406018: 48 89 ee                     	movq	%rbp, %rsi
; 		if (ph->p_type == PT_LOAD)
  40601b: 8b 2e                        	movl	(%rsi), %ebp
  40601d: 83 fd 02                     	cmpl	$2, %ebp
  406020: 75 2e                        	jne	46 <__vdsosym+0xd0>
  406022: eb 5c                        	jmp	92 <__vdsosym+0x100>
  406024: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40602e: 66 90                        	nop
  406030: 4c 8b 64 0e 08               	movq	8(%rsi,%rcx), %r12
; 			base = (size_t)eh + ph->p_offset - ph->p_vaddr;
  406035: 4d 01 d4                     	addq	%r10, %r12
  406038: 4c 2b 64 0e 10               	subq	16(%rsi,%rcx), %r12
; 	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  40603d: 48 01 cd                     	addq	%rcx, %rbp
  406040: 48 89 ee                     	movq	%rbp, %rsi
  406043: 48 83 c2 02                  	addq	$2, %rdx
  406047: 74 4c                        	je	76 <__vdsosym+0x115>
; 		if (ph->p_type == PT_LOAD)
  406049: 8b 2e                        	movl	(%rsi), %ebp
  40604b: 83 fd 02                     	cmpl	$2, %ebp
  40604e: 74 30                        	je	48 <__vdsosym+0x100>
  406050: 83 fd 01                     	cmpl	$1, %ebp
  406053: 75 0b                        	jne	11 <__vdsosym+0xe0>
  406055: 4c 8b 66 08                  	movq	8(%rsi), %r12
; 			base = (size_t)eh + ph->p_offset - ph->p_vaddr;
  406059: 4d 01 d4                     	addq	%r10, %r12
  40605c: 4c 2b 66 10                  	subq	16(%rsi), %r12
; 	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  406060: 48 8d 2c 0e                  	leaq	(%rsi,%rcx), %rbp
; 		if (ph->p_type == PT_LOAD)
  406064: 8b 1c 0e                     	movl	(%rsi,%rcx), %ebx
  406067: 83 fb 01                     	cmpl	$1, %ebx
  40606a: 74 c4                        	je	-60 <__vdsosym+0xb0>
  40606c: 83 fb 02                     	cmpl	$2, %ebx
  40606f: 75 cc                        	jne	-52 <__vdsosym+0xbd>
  406071: 48 8b 44 0e 08               	movq	8(%rsi,%rcx), %rax
; 			dynv = (void *)((char *)eh + ph->p_offset);
  406076: 4c 01 d0                     	addq	%r10, %rax
  406079: eb c2                        	jmp	-62 <__vdsosym+0xbd>
  40607b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
  406080: 48 8b 46 08                  	movq	8(%rsi), %rax
  406084: 4c 01 d0                     	addq	%r10, %rax
; 	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  406087: 48 8d 2c 0e                  	leaq	(%rsi,%rcx), %rbp
; 		if (ph->p_type == PT_LOAD)
  40608b: 8b 1c 0e                     	movl	(%rsi,%rcx), %ebx
  40608e: 83 fb 01                     	cmpl	$1, %ebx
  406091: 75 d9                        	jne	-39 <__vdsosym+0xec>
  406093: eb 9b                        	jmp	-101 <__vdsosym+0xb0>
  406095: 4d 85 c0                     	testq	%r8, %r8
  406098: 74 2b                        	je	43 <__vdsosym+0x145>
  40609a: 8b 55 00                     	movl	(%rbp), %edx
  40609d: 83 fa 01                     	cmpl	$1, %edx
  4060a0: 74 18                        	je	24 <__vdsosym+0x13a>
  4060a2: 83 fa 02                     	cmpl	$2, %edx
  4060a5: 75 1e                        	jne	30 <__vdsosym+0x145>
; 			dynv = (void *)((char *)eh + ph->p_offset);
  4060a7: 4c 03 55 08                  	addq	8(%rbp), %r10
  4060ab: 4c 89 d0                     	movq	%r10, %rax
  4060ae: 31 db                        	xorl	%ebx, %ebx
; 	if (!dynv || base==(size_t)-1) return 0;
  4060b0: 48 85 c0                     	testq	%rax, %rax
  4060b3: 75 1b                        	jne	27 <__vdsosym+0x150>
  4060b5: e9 3b 01 00 00               	jmp	315 <__vdsosym+0x275>
; 			base = (size_t)eh + ph->p_offset - ph->p_vaddr;
  4060ba: 4c 03 55 08                  	addq	8(%rbp), %r10
  4060be: 4c 2b 55 10                  	subq	16(%rbp), %r10
  4060c2: 4d 89 d4                     	movq	%r10, %r12
  4060c5: 31 db                        	xorl	%ebx, %ebx
; 	if (!dynv || base==(size_t)-1) return 0;
  4060c7: 48 85 c0                     	testq	%rax, %rax
  4060ca: 0f 84 25 01 00 00            	je	293 <__vdsosym+0x275>
  4060d0: 48 89 7c 24 20               	movq	%rdi, 32(%rsp)
  4060d5: 49 83 fc ff                  	cmpq	$-1, %r12
  4060d9: 0f 84 16 01 00 00            	je	278 <__vdsosym+0x275>
; 	for (i=0; dynv[i]; i+=2) {
  4060df: 48 8b 08                     	movq	(%rax), %rcx
  4060e2: 48 85 c9                     	testq	%rcx, %rcx
  4060e5: 0f 84 08 01 00 00            	je	264 <__vdsosym+0x273>
  4060eb: 48 83 c0 10                  	addq	$16, %rax
  4060ef: 31 ff                        	xorl	%edi, %edi
  4060f1: 31 ed                        	xorl	%ebp, %ebp
  4060f3: 45 31 ff                     	xorl	%r15d, %r15d
  4060f6: 45 31 ed                     	xorl	%r13d, %r13d
  4060f9: 31 f6                        	xorl	%esi, %esi
  4060fb: 48 8b 50 f8                  	movq	-8(%rax), %rdx
; 		void *p = (void *)(base + dynv[i+1]);
  4060ff: 4c 01 e2                     	addq	%r12, %rdx
; 		switch(dynv[i]) {
  406102: 48 83 f9 05                  	cmpq	$5, %rcx
  406106: 7f 25                        	jg	37 <__vdsosym+0x1ad>
  406108: eb 56                        	jmp	86 <__vdsosym+0x1e0>
  40610a: 48 89 d5                     	movq	%rdx, %rbp
  40610d: 0f 1f 00                     	nopl	(%rax)
; 	for (i=0; dynv[i]; i+=2) {
  406110: 48 8b 08                     	movq	(%rax), %rcx
  406113: 48 83 c0 10                  	addq	$16, %rax
  406117: 48 85 c9                     	testq	%rcx, %rcx
  40611a: 0f 84 81 00 00 00            	je	129 <__vdsosym+0x221>
  406120: 48 8b 50 f8                  	movq	-8(%rax), %rdx
; 		void *p = (void *)(base + dynv[i+1]);
  406124: 4c 01 e2                     	addq	%r12, %rdx
; 		switch(dynv[i]) {
  406127: 48 83 f9 05                  	cmpq	$5, %rcx
  40612b: 7e 33                        	jle	51 <__vdsosym+0x1e0>
  40612d: 48 83 f9 06                  	cmpq	$6, %rcx
  406131: 74 4a                        	je	74 <__vdsosym+0x1fd>
  406133: 48 81 f9 f0 ff ff 6f         	cmpq	$1879048176, %rcx
  40613a: 74 ce                        	je	-50 <__vdsosym+0x18a>
  40613c: 48 81 f9 fc ff ff 6f         	cmpq	$1879048188, %rcx
  406143: 75 cb                        	jne	-53 <__vdsosym+0x190>
  406145: 48 89 d7                     	movq	%rdx, %rdi
; 	for (i=0; dynv[i]; i+=2) {
  406148: 48 8b 08                     	movq	(%rax), %rcx
  40614b: 48 83 c0 10                  	addq	$16, %rax
  40614f: 48 85 c9                     	testq	%rcx, %rcx
  406152: 75 cc                        	jne	-52 <__vdsosym+0x1a0>
  406154: eb 4b                        	jmp	75 <__vdsosym+0x221>
  406156: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
; 		switch(dynv[i]) {
  406160: 48 83 f9 04                  	cmpq	$4, %rcx
  406164: 74 28                        	je	40 <__vdsosym+0x20e>
  406166: 48 83 f9 05                  	cmpq	$5, %rcx
  40616a: 75 a4                        	jne	-92 <__vdsosym+0x190>
  40616c: 48 89 d6                     	movq	%rdx, %rsi
; 	for (i=0; dynv[i]; i+=2) {
  40616f: 48 8b 08                     	movq	(%rax), %rcx
  406172: 48 83 c0 10                  	addq	$16, %rax
  406176: 48 85 c9                     	testq	%rcx, %rcx
  406179: 75 a5                        	jne	-91 <__vdsosym+0x1a0>
  40617b: eb 24                        	jmp	36 <__vdsosym+0x221>
  40617d: 49 89 d5                     	movq	%rdx, %r13
  406180: 48 8b 08                     	movq	(%rax), %rcx
  406183: 48 83 c0 10                  	addq	$16, %rax
  406187: 48 85 c9                     	testq	%rcx, %rcx
  40618a: 75 94                        	jne	-108 <__vdsosym+0x1a0>
  40618c: eb 13                        	jmp	19 <__vdsosym+0x221>
  40618e: 49 89 d7                     	movq	%rdx, %r15
  406191: 48 8b 08                     	movq	(%rax), %rcx
  406194: 48 83 c0 10                  	addq	$16, %rax
  406198: 48 85 c9                     	testq	%rcx, %rcx
  40619b: 0f 85 7f ff ff ff            	jne	-129 <__vdsosym+0x1a0>
  4061a1: 31 db                        	xorl	%ebx, %ebx
; 	if (!strings || !syms || !hashtab) return 0;
  4061a3: 48 85 f6                     	testq	%rsi, %rsi
  4061a6: 74 4d                        	je	77 <__vdsosym+0x275>
  4061a8: 4d 85 ed                     	testq	%r13, %r13
  4061ab: 74 48                        	je	72 <__vdsosym+0x275>
  4061ad: 48 89 74 24 10               	movq	%rsi, 16(%rsp)
  4061b2: 4d 85 ff                     	testq	%r15, %r15
  4061b5: 74 3e                        	je	62 <__vdsosym+0x275>
  4061b7: 48 89 e9                     	movq	%rbp, %rcx
  4061ba: 48 89 fd                     	movq	%rdi, %rbp
  4061bd: 48 89 f8                     	movq	%rdi, %rax
; 	if (!verdef) versym = 0;
  4061c0: 48 85 ed                     	testq	%rbp, %rbp
  4061c3: 48 0f 44 cd                  	cmoveq	%rbp, %rcx
; 	for (i=0; i<hashtab[1]; i++) {
  4061c7: 41 8b 47 04                  	movl	4(%r15), %eax
  4061cb: 85 c0                        	testl	%eax, %eax
  4061cd: 74 24                        	je	36 <__vdsosym+0x273>
  4061cf: 48 85 c9                     	testq	%rcx, %rcx
  4061d2: 4c 89 4c 24 08               	movq	%r9, 8(%rsp)
  4061d7: 0f 84 fd 00 00 00            	je	253 <__vdsosym+0x35a>
  4061dd: 48 89 4c 24 18               	movq	%rcx, 24(%rsp)
  4061e2: 31 db                        	xorl	%ebx, %ebx
  4061e4: be 27 00 00 00               	movl	$39, %esi
  4061e9: bf 06 04 00 00               	movl	$1030, %edi
  4061ee: 45 31 f6                     	xorl	%r14d, %r14d
  4061f1: eb 5a                        	jmp	90 <__vdsosym+0x2cd>
  4061f3: 31 db                        	xorl	%ebx, %ebx
; }
  4061f5: 48 89 d8                     	movq	%rbx, %rax
  4061f8: 48 83 c4 28                  	addq	$40, %rsp
  4061fc: 5b                           	popq	%rbx
  4061fd: 41 5c                        	popq	%r12
  4061ff: 41 5d                        	popq	%r13
  406201: 41 5e                        	popq	%r14
  406203: 41 5f                        	popq	%r15
  406205: 5d                           	popq	%rbp
  406206: c3                           	retq
; 	Verdaux *aux = (Verdaux *)((char *)def + def->vd_aux);
  406207: 8b 48 0c                     	movl	12(%rax), %ecx
; 	return !strcmp(vername, strings + aux->vda_name);
  40620a: 8b 34 08                     	movl	(%rax,%rcx), %esi
  40620d: 48 03 74 24 10               	addq	16(%rsp), %rsi
  406212: 48 8b 7c 24 20               	movq	32(%rsp), %rdi
  406217: e8 24 04 00 00               	callq	1060 <strcmp>
  40621c: bf 06 04 00 00               	movl	$1030, %edi
  406221: be 27 00 00 00               	movl	$39, %esi
  406226: 4c 8b 4c 24 08               	movq	8(%rsp), %r9
  40622b: 85 c0                        	testl	%eax, %eax
; 		if (versym && !checkver(verdef, versym[i], vername, strings))
  40622d: 0f 84 18 01 00 00            	je	280 <__vdsosym+0x3cb>
  406233: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40623d: 0f 1f 00                     	nopl	(%rax)
; 	for (i=0; i<hashtab[1]; i++) {
  406240: 49 83 c6 01                  	addq	$1, %r14
  406244: 41 8b 47 04                  	movl	4(%r15), %eax
  406248: 49 39 c6                     	cmpq	%rax, %r14
  40624b: 73 a8                        	jae	-88 <__vdsosym+0x275>
; 		if (!(1<<(syms[i].st_info&0xf) & OK_TYPES)) continue;
  40624d: 4b 8d 04 76                  	leaq	(%r14,%r14,2), %rax
  406251: 41 0f b6 4c c5 04            	movzbl	4(%r13,%rax,8), %ecx
  406257: 89 ca                        	movl	%ecx, %edx
  406259: 80 e2 0f                     	andb	$15, %dl
  40625c: 0f b6 d2                     	movzbl	%dl, %edx
  40625f: 0f a3 d6                     	btl	%edx, %esi
  406262: 73 dc                        	jae	-36 <__vdsosym+0x2c0>
; 		if (!(1<<(syms[i].st_info>>4) & OK_BINDS)) continue;
  406264: c1 e9 04                     	shrl	$4, %ecx
  406267: 0f a3 cf                     	btl	%ecx, %edi
  40626a: 73 d4                        	jae	-44 <__vdsosym+0x2c0>
; 		if (!syms[i].st_shndx) continue;
  40626c: 66 41 83 7c c5 06 00         	cmpw	$0, 6(%r13,%rax,8)
  406273: 74 cb                        	je	-53 <__vdsosym+0x2c0>
; 		if (strcmp(name, strings+syms[i].st_name)) continue;
  406275: 41 8b 74 c5 00               	movl	(%r13,%rax,8), %esi
  40627a: 48 03 74 24 10               	addq	16(%rsp), %rsi
  40627f: 4c 89 cf                     	movq	%r9, %rdi
  406282: e8 b9 03 00 00               	callq	953 <strcmp>
  406287: bf 06 04 00 00               	movl	$1030, %edi
  40628c: be 27 00 00 00               	movl	$39, %esi
  406291: 4c 8b 4c 24 08               	movq	8(%rsp), %r9
  406296: 85 c0                        	testl	%eax, %eax
  406298: 75 a6                        	jne	-90 <__vdsosym+0x2c0>
  40629a: 48 8b 44 24 18               	movq	24(%rsp), %rax
; 		if (versym && !checkver(verdef, versym[i], vername, strings))
  40629f: 42 0f b7 0c 70               	movzwl	(%rax,%r14,2), %ecx
  4062a4: 48 89 e8                     	movq	%rbp, %rax
; 		  && (def->vd_ndx & 0x7fff) == vsym)
  4062a7: f6 40 02 01                  	testb	$1, 2(%rax)
  4062ab: 75 16                        	jne	22 <__vdsosym+0x343>
  4062ad: 0f 1f 00                     	nopl	(%rax)
  4062b0: 0f b7 50 04                  	movzwl	4(%rax), %edx
  4062b4: 66 31 ca                     	xorw	%cx, %dx
  4062b7: f7 c2 ff 7f 00 00            	testl	$32767, %edx
; 		if (!(def->vd_flags & VER_FLG_BASE)
  4062bd: 0f 84 44 ff ff ff            	je	-188 <__vdsosym+0x287>
; 		if (def->vd_next == 0)
  4062c3: 8b 50 10                     	movl	16(%rax), %edx
  4062c6: 48 85 d2                     	testq	%rdx, %rdx
  4062c9: 0f 84 71 ff ff ff            	je	-143 <__vdsosym+0x2c0>
; 		def = (Verdef *)((char *)def + def->vd_next);
  4062cf: 48 01 d0                     	addq	%rdx, %rax
; 		  && (def->vd_ndx & 0x7fff) == vsym)
  4062d2: f6 40 02 01                  	testb	$1, 2(%rax)
  4062d6: 74 d8                        	je	-40 <__vdsosym+0x330>
  4062d8: eb e9                        	jmp	-23 <__vdsosym+0x343>
; 	for (i=0; i<hashtab[1]; i++) {
  4062da: 49 8d 6d 06                  	leaq	6(%r13), %rbp
  4062de: 31 db                        	xorl	%ebx, %ebx
  4062e0: be 27 00 00 00               	movl	$39, %esi
  4062e5: bf 06 04 00 00               	movl	$1030, %edi
  4062ea: 45 31 f6                     	xorl	%r14d, %r14d
  4062ed: eb 13                        	jmp	19 <__vdsosym+0x382>
  4062ef: 49 83 c6 01                  	addq	$1, %r14
  4062f3: 89 c1                        	movl	%eax, %ecx
  4062f5: 48 83 c5 18                  	addq	$24, %rbp
  4062f9: 49 39 ce                     	cmpq	%rcx, %r14
  4062fc: 0f 83 f3 fe ff ff            	jae	-269 <__vdsosym+0x275>
; 		if (!(1<<(syms[i].st_info&0xf) & OK_TYPES)) continue;
  406302: 0f b6 4d fe                  	movzbl	-2(%rbp), %ecx
  406306: 89 ca                        	movl	%ecx, %edx
  406308: 80 e2 0f                     	andb	$15, %dl
  40630b: 0f b6 d2                     	movzbl	%dl, %edx
  40630e: 0f a3 d6                     	btl	%edx, %esi
  406311: 73 dc                        	jae	-36 <__vdsosym+0x36f>
; 		if (!(1<<(syms[i].st_info>>4) & OK_BINDS)) continue;
  406313: c1 e9 04                     	shrl	$4, %ecx
  406316: 0f a3 cf                     	btl	%ecx, %edi
  406319: 73 d4                        	jae	-44 <__vdsosym+0x36f>
; 		if (!syms[i].st_shndx) continue;
  40631b: 66 83 7d 00 00               	cmpw	$0, (%rbp)
  406320: 74 cd                        	je	-51 <__vdsosym+0x36f>
; 		if (strcmp(name, strings+syms[i].st_name)) continue;
  406322: 8b 75 fa                     	movl	-6(%rbp), %esi
  406325: 48 03 74 24 10               	addq	16(%rsp), %rsi
  40632a: 4c 89 cf                     	movq	%r9, %rdi
  40632d: e8 0e 03 00 00               	callq	782 <strcmp>
  406332: 85 c0                        	testl	%eax, %eax
  406334: 74 15                        	je	21 <__vdsosym+0x3cb>
; 	for (i=0; i<hashtab[1]; i++) {
  406336: 41 8b 47 04                  	movl	4(%r15), %eax
  40633a: 4c 8b 4c 24 08               	movq	8(%rsp), %r9
  40633f: be 27 00 00 00               	movl	$39, %esi
  406344: bf 06 04 00 00               	movl	$1030, %edi
  406349: eb a4                        	jmp	-92 <__vdsosym+0x36f>
; 		return (void *)(base + syms[i].st_value);
  40634b: 4b 8d 04 76                  	leaq	(%r14,%r14,2), %rax
  40634f: 4d 03 64 c5 08               	addq	8(%r13,%rax,8), %r12
  406354: 4c 89 e3                     	movq	%r12, %rbx
  406357: e9 99 fe ff ff               	jmp	-359 <__vdsosym+0x275>
  40635c: 0f 1f 40 00                  	nopl	(%rax)

0000000000406360 __expand_heap:
; {
  406360: 41 57                        	pushq	%r15
  406362: 41 56                        	pushq	%r14
  406364: 53                           	pushq	%rbx
  406365: 48 83 ec 10                  	subq	$16, %rsp
; 	size_t n = *pn;
  406369: 48 8b 07                     	movq	(%rdi), %rax
  40636c: 48 b9 00 f0 ff ff ff ff ff 7f	movabsq	$9223372036854771712, %rcx
; 	if (n > SIZE_MAX/2 - PAGE_SIZE) {
  406376: 48 39 c8                     	cmpq	%rcx, %rax
  406379: 72 13                        	jb	19 <__expand_heap+0x2e>
; 		errno = ENOMEM;
  40637b: e8 14 db ff ff               	callq	-9452 <__errno_location>
  406380: c7 00 0c 00 00 00            	movl	$12, (%rax)
  406386: 45 31 ff                     	xorl	%r15d, %r15d
  406389: e9 17 01 00 00               	jmp	279 <__expand_heap+0x145>
  40638e: 49 89 fe                     	movq	%rdi, %r14
; 	n += -n & PAGE_SIZE-1;
  406391: 89 c2                        	movl	%eax, %edx
  406393: f7 da                        	negl	%edx
  406395: 81 e2 ff 0f 00 00            	andl	$4095, %edx
  40639b: 48 01 c2                     	addq	%rax, %rdx
; 	if (!brk) {
  40639e: 48 8b 0d a3 39 00 00         	movq	14755(%rip), %rcx
  4063a5: 48 85 c9                     	testq	%rcx, %rcx
  4063a8: 74 10                        	je	16 <__expand_heap+0x5a>
; 	if (n < SIZE_MAX-brk && !traverses_stack_p(brk, brk+n)
  4063aa: 48 89 c8                     	movq	%rcx, %rax
  4063ad: 48 f7 d0                     	notq	%rax
  4063b0: 48 39 c2                     	cmpq	%rax, %rdx
  4063b3: 72 2d                        	jb	45 <__expand_heap+0x82>
  4063b5: e9 9d 00 00 00               	jmp	157 <__expand_heap+0xf7>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  4063ba: b8 0c 00 00 00               	movl	$12, %eax
  4063bf: 31 ff                        	xorl	%edi, %edi
  4063c1: 0f 05                        	syscall
; 		brk += -brk & PAGE_SIZE-1;
  4063c3: 89 c1                        	movl	%eax, %ecx
  4063c5: f7 d9                        	negl	%ecx
  4063c7: 81 e1 ff 0f 00 00            	andl	$4095, %ecx
  4063cd: 48 01 c1                     	addq	%rax, %rcx
  4063d0: 48 89 0d 71 39 00 00         	movq	%rcx, 14705(%rip)
; 	if (n < SIZE_MAX-brk && !traverses_stack_p(brk, brk+n)
  4063d7: 48 89 c8                     	movq	%rcx, %rax
  4063da: 48 f7 d0                     	notq	%rax
  4063dd: 48 39 c2                     	cmpq	%rax, %rdx
  4063e0: 73 75                        	jae	117 <__expand_heap+0xf7>
  4063e2: 48 8d 3c 11                  	leaq	(%rcx,%rdx), %rdi
; 	b = (uintptr_t)libc.auxv;
  4063e6: 48 8b 35 83 69 08 00         	movq	551299(%rip), %rsi
  4063ed: 48 89 74 24 08               	movq	%rsi, 8(%rsp)
; 	a = b > len ? b-len : 0;
  4063f2: 48 8d 9e 00 00 80 ff         	leaq	-8388608(%rsi), %rbx
  4063f9: 31 c0                        	xorl	%eax, %eax
  4063fb: 48 81 fe 00 00 80 00         	cmpq	$8388608, %rsi
  406402: 48 0f 47 c3                  	cmovaq	%rbx, %rax
; 	if (new>a && old<b) return 1;
  406406: 48 39 ce                     	cmpq	%rcx, %rsi
  406409: 76 05                        	jbe	5 <__expand_heap+0xb0>
  40640b: 48 39 f8                     	cmpq	%rdi, %rax
  40640e: 72 47                        	jb	71 <__expand_heap+0xf7>
  406410: 31 c0                        	xorl	%eax, %eax
  406412: 48 8d 74 24 08               	leaq	8(%rsp), %rsi
; 	a = b > len ? b-len : 0;
  406417: 48 81 fe 00 00 80 00         	cmpq	$8388608, %rsi
  40641e: 48 8d 9c 24 08 00 80 ff      	leaq	-8388600(%rsp), %rbx
  406426: 48 0f 47 c3                  	cmovaq	%rbx, %rax
; 	if (new>a && old<b) return 1;
  40642a: 48 39 f1                     	cmpq	%rsi, %rcx
; 	    && __syscall(SYS_brk, brk+n)==brk+n) {
  40642d: 73 05                        	jae	5 <__expand_heap+0xd4>
  40642f: 48 39 f8                     	cmpq	%rdi, %rax
  406432: 72 23                        	jb	35 <__expand_heap+0xf7>
; 	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  406434: b8 0c 00 00 00               	movl	$12, %eax
  406439: 0f 05                        	syscall
; 	    && __syscall(SYS_brk, brk+n)==brk+n) {
  40643b: 4c 8b 3d 06 39 00 00         	movq	14598(%rip), %r15
  406442: 49 8d 0c 17                  	leaq	(%r15,%rdx), %rcx
  406446: 48 39 c8                     	cmpq	%rcx, %rax
; 	if (n < SIZE_MAX-brk && !traverses_stack_p(brk, brk+n)
  406449: 75 0c                        	jne	12 <__expand_heap+0xf7>
; 		*pn = n;
  40644b: 49 89 16                     	movq	%rdx, (%r14)
; 		brk += n;
  40644e: 48 89 05 f3 38 00 00         	movq	%rax, 14579(%rip)
  406455: eb 4e                        	jmp	78 <__expand_heap+0x145>
; 	size_t min = (size_t)PAGE_SIZE << mmap_step/2;
  406457: 8b 0d f3 38 00 00            	movl	14579(%rip), %ecx
  40645d: 48 d1 e9                     	shrq	%rcx
  406460: bb 00 10 00 00               	movl	$4096, %ebx
  406465: 48 d3 e3                     	shlq	%cl, %rbx
; 	if (n < min) n = min;
  406468: 48 39 da                     	cmpq	%rbx, %rdx
  40646b: 48 0f 43 da                  	cmovaeq	%rdx, %rbx
  40646f: 45 31 ff                     	xorl	%r15d, %r15d
; 	void *area = __mmap(0, n, PROT_READ|PROT_WRITE,
  406472: bf 00 00 00 00               	movl	$0, %edi
  406477: 48 89 de                     	movq	%rbx, %rsi
  40647a: ba 03 00 00 00               	movl	$3, %edx
  40647f: b9 22 00 00 00               	movl	$34, %ecx
  406484: 41 b8 ff ff ff ff            	movl	$4294967295, %r8d
  40648a: 45 31 c9                     	xorl	%r9d, %r9d
  40648d: e8 8b ef ff ff               	callq	-4213 <mmap64>
; 	if (area == MAP_FAILED) return 0;
  406492: 48 83 f8 ff                  	cmpq	$-1, %rax
  406496: 74 0d                        	je	13 <__expand_heap+0x145>
; 	*pn = n;
  406498: 49 89 1e                     	movq	%rbx, (%r14)
; 	mmap_step++;
  40649b: 83 05 ae 38 00 00 01         	addl	$1, 14510(%rip)
  4064a2: 49 89 c7                     	movq	%rax, %r15
; }
  4064a5: 4c 89 f8                     	movq	%r15, %rax
  4064a8: 48 83 c4 10                  	addq	$16, %rsp
  4064ac: 5b                           	popq	%rbx
  4064ad: 41 5e                        	popq	%r14
  4064af: 41 5f                        	popq	%r15
  4064b1: c3                           	retq
  4064b2: 66 90                        	nop

00000000004064b4 wcrtomb:
; {
  4064b4: 50                           	pushq	%rax
  4064b5: b8 01 00 00 00               	movl	$1, %eax
; 	if (!s) return 1;
  4064ba: 48 85 ff                     	testq	%rdi, %rdi
  4064bd: 0f 84 ee 00 00 00            	je	238 <wcrtomb+0xfd>
; 	if ((unsigned)wc < 0x80) {
  4064c3: 83 fe 7f                     	cmpl	$127, %esi
  4064c6: 77 08                        	ja	8 <wcrtomb+0x1c>
  4064c8: 40 88 37                     	movb	%sil, (%rdi)
  4064cb: e9 e1 00 00 00               	jmp	225 <wcrtomb+0xfd>
; 	__asm__ ("mov %%fs:0,%0" : "=r" (self) );
  4064d0: 64 48 8b 0c 25 00 00 00 00   	movq	%fs:0, %rcx
; 	} else if (MB_CUR_MAX == 1) {
  4064d9: 48 8b 89 b0 00 00 00         	movq	176(%rcx), %rcx
  4064e0: 48 83 39 00                  	cmpq	$0, (%rcx)
  4064e4: 74 27                        	je	39 <wcrtomb+0x59>
; 	} else if ((unsigned)wc < 0x800) {
  4064e6: 81 fe ff 07 00 00            	cmpl	$2047, %esi
  4064ec: 77 2e                        	ja	46 <wcrtomb+0x68>
; 		*s++ = 0xc0 | (wc>>6);
  4064ee: 89 f0                        	movl	%esi, %eax
  4064f0: c1 e8 06                     	shrl	$6, %eax
  4064f3: 0c c0                        	orb	$-64, %al
  4064f5: 88 07                        	movb	%al, (%rdi)
; 		*s = 0x80 | (wc&0x3f);
  4064f7: 40 80 e6 3f                  	andb	$63, %sil
  4064fb: 40 80 ce 80                  	orb	$-128, %sil
  4064ff: 40 88 77 01                  	movb	%sil, 1(%rdi)
  406503: b8 02 00 00 00               	movl	$2, %eax
  406508: e9 a4 00 00 00               	jmp	164 <wcrtomb+0xfd>
; 		if (!IS_CODEUNIT(wc)) {
  40650d: 89 f1                        	movl	%esi, %ecx
  40650f: 83 e1 80                     	andl	$-128, %ecx
  406512: 81 f9 80 df 00 00            	cmpl	$57216, %ecx
  406518: 74 ae                        	je	-82 <wcrtomb+0x14>
  40651a: eb 59                        	jmp	89 <wcrtomb+0xc1>
; 	} else if ((unsigned)wc < 0xd800 || (unsigned)wc-0xe000 < 0x2000) {
  40651c: 81 fe 00 d8 00 00            	cmpl	$55296, %esi
  406522: 72 65                        	jb	101 <wcrtomb+0xd5>
  406524: 89 f0                        	movl	%esi, %eax
  406526: 25 00 e0 ff ff               	andl	$4294959104, %eax
  40652b: 3d 00 e0 00 00               	cmpl	$57344, %eax
  406530: 74 57                        	je	87 <wcrtomb+0xd5>
; 	} else if ((unsigned)wc-0x10000 < 0x100000) {
  406532: 8d 86 00 00 ff ff            	leal	-65536(%rsi), %eax
  406538: 3d ff ff 0f 00               	cmpl	$1048575, %eax
  40653d: 77 36                        	ja	54 <wcrtomb+0xc1>
; 		*s++ = 0xf0 | (wc>>18);
  40653f: 89 f0                        	movl	%esi, %eax
  406541: c1 e8 12                     	shrl	$18, %eax
  406544: 0c f0                        	orb	$-16, %al
  406546: 88 07                        	movb	%al, (%rdi)
; 		*s++ = 0x80 | ((wc>>12)&0x3f);
  406548: 89 f0                        	movl	%esi, %eax
  40654a: c1 e8 0c                     	shrl	$12, %eax
  40654d: b1 3f                        	movb	$63, %cl
  40654f: 20 c8                        	andb	%cl, %al
  406551: b2 80                        	movb	$-128, %dl
  406553: 08 d0                        	orb	%dl, %al
  406555: 88 47 01                     	movb	%al, 1(%rdi)
; 		*s++ = 0x80 | ((wc>>6)&0x3f);
  406558: 89 f0                        	movl	%esi, %eax
  40655a: c1 e8 06                     	shrl	$6, %eax
  40655d: 20 c8                        	andb	%cl, %al
  40655f: 08 d0                        	orb	%dl, %al
  406561: 88 47 02                     	movb	%al, 2(%rdi)
; 		*s = 0x80 | (wc&0x3f);
  406564: 40 20 ce                     	andb	%cl, %sil
  406567: 40 08 d6                     	orb	%dl, %sil
  40656a: 40 88 77 03                  	movb	%sil, 3(%rdi)
  40656e: b8 04 00 00 00               	movl	$4, %eax
  406573: eb 3c                        	jmp	60 <wcrtomb+0xfd>
  406575: e8 1a d9 ff ff               	callq	-9958 <__errno_location>
  40657a: c7 00 54 00 00 00            	movl	$84, (%rax)
  406580: 48 c7 c0 ff ff ff ff         	movq	$-1, %rax
  406587: eb 28                        	jmp	40 <wcrtomb+0xfd>
; 		*s++ = 0xe0 | (wc>>12);
  406589: 89 f0                        	movl	%esi, %eax
  40658b: c1 e8 0c                     	shrl	$12, %eax
  40658e: 0c e0                        	orb	$-32, %al
  406590: 88 07                        	movb	%al, (%rdi)
; 		*s++ = 0x80 | ((wc>>6)&0x3f);
  406592: 89 f0                        	movl	%esi, %eax
  406594: c1 e8 06                     	shrl	$6, %eax
  406597: b1 3f                        	movb	$63, %cl
  406599: 20 c8                        	andb	%cl, %al
  40659b: b2 80                        	movb	$-128, %dl
  40659d: 08 d0                        	orb	%dl, %al
  40659f: 88 47 01                     	movb	%al, 1(%rdi)
; 		*s = 0x80 | (wc&0x3f);
  4065a2: 40 20 ce                     	andb	%cl, %sil
  4065a5: 40 08 d6                     	orb	%dl, %sil
  4065a8: 40 88 77 02                  	movb	%sil, 2(%rdi)
  4065ac: b8 03 00 00 00               	movl	$3, %eax
; }
  4065b1: 59                           	popq	%rcx
  4065b2: c3                           	retq
  4065b3: 90                           	nop

00000000004065b4 __stdio_exit_needed:
; {
  4065b4: 53                           	pushq	%rbx
; 	for (f=*__ofl_lock(); f; f=f->next) close_file(f);
  4065b5: e8 2e b2 ff ff               	callq	-19922 <__ofl_lock>
  4065ba: 48 8b 18                     	movq	(%rax), %rbx
  4065bd: 48 85 db                     	testq	%rbx, %rbx
  4065c0: 74 0e                        	je	14 <__stdio_exit_needed+0x1c>
  4065c2: 48 89 df                     	movq	%rbx, %rdi
  4065c5: e8 2b 00 00 00               	callq	43 <close_file>
  4065ca: 48 8b 5b 70                  	movq	112(%rbx), %rbx
  4065ce: eb ed                        	jmp	-19 <__stdio_exit_needed+0x9>
; 	close_file(__stdin_used);
  4065d0: 48 8b 3d 81 37 00 00         	movq	14209(%rip), %rdi
  4065d7: e8 19 00 00 00               	callq	25 <close_file>
; 	close_file(__stdout_used);
  4065dc: 48 8b 3d 1d 27 00 00         	movq	10013(%rip), %rdi
  4065e3: e8 0d 00 00 00               	callq	13 <close_file>
; 	close_file(__stderr_used);
  4065e8: 48 8b 3d 71 2b 00 00         	movq	11121(%rip), %rdi
  4065ef: 5b                           	popq	%rbx
  4065f0: e9 00 00 00 00               	jmp	0 <close_file>

00000000004065f5 close_file:
; {
  4065f5: 53                           	pushq	%rbx
; 	if (!f) return;
  4065f6: 48 85 ff                     	testq	%rdi, %rdi
  4065f9: 74 41                        	je	65 <close_file+0x47>
  4065fb: 48 89 fb                     	movq	%rdi, %rbx
; 	FFINALLOCK(f);
  4065fe: 83 bf 8c 00 00 00 00         	cmpl	$0, 140(%rdi)
  406605: 78 08                        	js	8 <close_file+0x1a>
  406607: 48 89 df                     	movq	%rbx, %rdi
  40660a: e8 25 f2 ff ff               	callq	-3547 <__lockfile>
; 	if (f->wpos != f->wbase) f->write(f, 0, 0);
  40660f: 48 8b 43 28                  	movq	40(%rbx), %rax
  406613: 48 3b 43 38                  	cmpq	56(%rbx), %rax
  406617: 74 0a                        	je	10 <close_file+0x2e>
  406619: 48 89 df                     	movq	%rbx, %rdi
  40661c: 31 f6                        	xorl	%esi, %esi
  40661e: 31 d2                        	xorl	%edx, %edx
  406620: ff 53 48                     	callq	*72(%rbx)
; 	if (f->rpos != f->rend) f->seek(f, f->rpos-f->rend, SEEK_CUR);
  406623: 48 8b 73 08                  	movq	8(%rbx), %rsi
  406627: 48 2b 73 10                  	subq	16(%rbx), %rsi
  40662b: 74 0f                        	je	15 <close_file+0x47>
  40662d: 48 8b 43 50                  	movq	80(%rbx), %rax
  406631: 48 89 df                     	movq	%rbx, %rdi
  406634: ba 01 00 00 00               	movl	$1, %edx
  406639: 5b                           	popq	%rbx
  40663a: ff e0                        	jmpq	*%rax
; }
  40663c: 5b                           	popq	%rbx
  40663d: c3                           	retq
  40663e: 66 90                        	nop

0000000000406640 strcmp:
; 	for (; *l==*r && *l; l++, r++);
  406640: 8a 07                        	movb	(%rdi), %al
  406642: 8a 0e                        	movb	(%rsi), %cl
  406644: 84 c0                        	testb	%al, %al
  406646: 74 2c                        	je	44 <strcmp+0x34>
  406648: 38 c8                        	cmpb	%cl, %al
  40664a: 75 28                        	jne	40 <strcmp+0x34>
  40664c: ba 01 00 00 00               	movl	$1, %edx
  406651: 66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
  40665b: 0f 1f 44 00 00               	nopl	(%rax,%rax)
  406660: 0f b6 04 17                  	movzbl	(%rdi,%rdx), %eax
  406664: 0f b6 0c 16                  	movzbl	(%rsi,%rdx), %ecx
  406668: 84 c0                        	testb	%al, %al
  40666a: 74 08                        	je	8 <strcmp+0x34>
  40666c: 48 83 c2 01                  	addq	$1, %rdx
  406670: 38 c8                        	cmpb	%cl, %al
  406672: 74 ec                        	je	-20 <strcmp+0x20>
; 	return *(unsigned char *)l - *(unsigned char *)r;
  406674: 0f b6 c0                     	movzbl	%al, %eax
  406677: 0f b6 c9                     	movzbl	%cl, %ecx
  40667a: 29 c8                        	subl	%ecx, %eax
  40667c: c3                           	retq
