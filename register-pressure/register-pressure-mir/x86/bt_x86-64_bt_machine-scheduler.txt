Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=96, align=16, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=1, align=4, at location [SP+8]
  fi#14: size=96, align=16, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.000000e+00, align=8
  cp#1: 0x3EB0C6F7A0B5ED8D, align=8
  cp#2: 3.478800e+03, align=8
  cp#3: -1.765570e+04, align=8
  cp#4: 2.802370e+04, align=8
  cp#5: 1.000000e+02, align=8
Function Live Ins: $edi in %0, $rsi in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $edi, $rsi
  %1:gr64 = COPY $rsi
  %0:gr32 = COPY $edi
  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_timer_flag, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @bt__str_1_r_, $noreg
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 0, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = COPY killed $rax
  MOV64mr %stack.15.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  JCC_1 %bb.2, 4, implicit killed $eflags
  JMP_1 %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %5:gr32 = MOV32ri 1
  MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
  %6:gr64 = LEA64r $rip, 1, $noreg, @bt__str_2_total_, $noreg
  MOV64mr %stack.14.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
  %7:gr64 = LEA64r $rip, 1, $noreg, @bt__str_3_rhsx_, $noreg
  MOV64mr %stack.14.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
  %8:gr64 = LEA64r $rip, 1, $noreg, @bt__str_4_rhsy_, $noreg
  MOV64mr %stack.14.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
  %9:gr64 = LEA64r $rip, 1, $noreg, @bt__str_5_rhsz_, $noreg
  MOV64mr %stack.14.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
  %10:gr64 = LEA64r $rip, 1, $noreg, @bt__str_6_rhs_, $noreg
  MOV64mr %stack.14.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
  %11:gr64 = LEA64r $rip, 1, $noreg, @bt__str_7_xsolve_, $noreg
  MOV64mr %stack.14.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
  %12:gr64 = LEA64r $rip, 1, $noreg, @bt__str_8_ysolve_, $noreg
  MOV64mr %stack.14.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
  %13:gr64 = LEA64r $rip, 1, $noreg, @bt__str_9_zsolve_, $noreg
  MOV64mr %stack.14.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
  %14:gr64 = LEA64r $rip, 1, $noreg, @bt__str_10_redist1_, $noreg
  MOV64mr %stack.14.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
  %15:gr64 = LEA64r $rip, 1, $noreg, @bt__str_11_redist2_, $noreg
  MOV64mr %stack.14.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
  %16:gr64 = LEA64r $rip, 1, $noreg, @bt__str_12_add_, $noreg
  MOV64mr %stack.14.t_names, 1, $noreg, 88, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10)
  %17:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 1, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %17:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0 :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.9(0x30000000); %bb.4(62.50%), %bb.9(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_13____NAS_Par, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 2, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_14_inputbt_da, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @bt__str_1_r_, $noreg
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 3, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %25:gr64 = COPY killed $rax
  MOV64mr %stack.15.fp, 1, $noreg, 0, $noreg, %25:gr64 :: (store 8 into %ir.fp)
  TEST64rr %25:gr64, %25:gr64, implicit-def $eflags
  JCC_1 %bb.9, 4, implicit killed $eflags
  JMP_1 %bb.4

bb.4.if.then15:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_15__Reading_f, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 4, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %38:gr64
  $rsi = LEA64r $rip, 1, $noreg, @bt__str_16__d_, $noreg
  $rdx = LEA64r %stack.4.niter, 1, $noreg, 0, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 5, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %38:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %41:gr32 = COPY killed $eax
  MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %41:gr32 :: (store 4 into %ir.result)

bb.5.while.cond:
; predecessors: %bb.4, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %42:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %42:gr64
  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 6, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %42:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %43:gr32 = COPY killed $eax
  CMP32ri8 %43:gr32, 10, implicit-def $eflags
  JCC_1 %bb.5, 5, implicit killed $eflags
  JMP_1 %bb.6

bb.6.while.end:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %45:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $rsi = LEA64r $rip, 1, $noreg, @bt__str_17__lf_, $noreg
  $rdx = LEA64r $rip, 1, $noreg, @dt, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 7, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %45:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %50:gr32 = COPY killed $eax
  MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %50:gr32 :: (store 4 into %ir.result)

bb.7.while.cond21:
; predecessors: %bb.6, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  %51:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %51:gr64
  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 8, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %51:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %52:gr32 = COPY killed $eax
  CMP32ri8 %52:gr32, 10, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit killed $eflags
  JMP_1 %bb.8

bb.8.while.end25:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %54:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %54:gr64
  $rsi = LEA64r $rip, 1, $noreg, @bt__str_18__d_d_d__, $noreg
  $rdx = LEA64r $rip, 1, $noreg, @grid_points, $noreg
  $rcx = nuw LEA64r $rip, 1, $noreg, @grid_points + 4, $noreg
  $r8 = nuw LEA64r $rip, 1, $noreg, @grid_points + 8, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 9, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %54:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %61:gr32 = COPY killed $eax
  MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %61:gr32 :: (store 4 into %ir.result)
  %62:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %62:gr64
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 10, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %62:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.10

bb.9.if.else28:
; predecessors: %bb.3
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_19__No_input_, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 11, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %30:gr32 = MOV32ri 200
  MOV32mr %stack.4.niter, 1, $noreg, 0, $noreg, %30:gr32 :: (store 4 into %ir.niter)
  %31:gr64 = MOV64ri 4554169646866313825
  MOV64mr $rip, 1, $noreg, @dt, $noreg, %31:gr64 :: (store 8 into @dt)
  %32:gr64 = MOV64ri 438086664294
  MOV64mr $rip, 1, $noreg, @grid_points, $noreg, %32:gr64 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  %33:gr32 = MOV32ri 102
  MOV32mr $rip, 1, $noreg, @grid_points + 8, $noreg, %33:gr32 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

bb.10.if.end30:
; predecessors: %bb.9, %bb.8
  successors: %bb.13(0x40000000), %bb.11(0x40000000); %bb.13(50.00%), %bb.11(50.00%)

  %64:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %65:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %66:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_20__Size___4d, $noreg
  $esi = COPY %64:gr32
  $edx = COPY %65:gr32
  $ecx = COPY %66:gr32
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 12, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %64:gr32, %65:gr32, %66:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %71:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  %72:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dt, $noreg :: (dereferenceable load 8 from @dt)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_21__Iteration, $noreg
  $esi = COPY %71:gr32
  $xmm0 = COPY %72:fr64
  $al = MOV8ri 1
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 13, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %71:gr32, %72:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_22___, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 14, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @grid_points, $noreg, 102, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  JCC_1 %bb.13, 15, implicit killed $eflags
  JMP_1 %bb.11

bb.11.lor.lhs.false:
; predecessors: %bb.10
  successors: %bb.13(0x40000000), %bb.12(0x40000000); %bb.13(50.00%), %bb.12(50.00%)

  CMP32mi8 $rip, 1, $noreg, @grid_points + 4, $noreg, 102, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  JCC_1 %bb.13, 15, implicit killed $eflags
  JMP_1 %bb.12

bb.12.lor.lhs.false36:
; predecessors: %bb.11
  successors: %bb.13(0x40000000), %bb.14(0x40000000); %bb.13(50.00%), %bb.14(50.00%)

  CMP32mi8 $rip, 1, $noreg, @grid_points + 8, $noreg, 103, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.13

bb.13.if.then38:
; predecessors: %bb.10, %bb.11, %bb.12
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  %240:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %241:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %242:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_23___d___d___, $noreg
  $esi = COPY %240:gr32
  $edx = COPY %241:gr32
  $ecx = COPY %242:gr32
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 15, 0, 0, %stack.0.retval, 0, %240:gr32, %241:gr32, %242:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.0.retval, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_24__Problem_s, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 16, 0, 0, %stack.0.retval, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.0.retval, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  JMP_1 %bb.45

bb.14.if.end41:
; predecessors: %bb.12
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @set_constants, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 17, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %86:gr32 = MOV32ri 1
  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %86:gr32 :: (store 4 into %ir.i)

bb.15.for.cond:
; predecessors: %bb.14, %bb.16
  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.17, 15, implicit killed $eflags
  JMP_1 %bb.16

bb.16.for.body:
; predecessors: %bb.15
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %239:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %239:gr32
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 18, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %239:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.15

bb.17.for.end:
; predecessors: %bb.15
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @initialize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 19, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @exact_rhs, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 20, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @adi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 21, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @initialize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 22, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %91:gr32 = MOV32ri 1
  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %91:gr32 :: (store 4 into %ir.i)

bb.18.for.cond43:
; predecessors: %bb.17, %bb.19
  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.20, 15, implicit killed $eflags
  JMP_1 %bb.19

bb.19.for.body45:
; predecessors: %bb.18
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %238:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %238:gr32
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 23, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %238:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.18

bb.20.for.end48:
; predecessors: %bb.18
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %94:gr32 = MOV32ri 1
  $edi = MOV32ri 1
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 24, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.5.step, 1, $noreg, 0, $noreg, %94:gr32 :: (store 4 into %ir.step)
  %217:gr64 = MOV32ri64 1717986919

bb.21.for.cond49:
; predecessors: %bb.20, %bb.25
  successors: %bb.22(0x7c000000), %bb.26(0x04000000); %bb.22(96.88%), %bb.26(3.12%)

  %95:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  CMP32rm %95:gr32, %stack.4.niter, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.niter)
  JCC_1 %bb.26, 15, implicit killed $eflags
  JMP_1 %bb.22

bb.22.for.body51:
; predecessors: %bb.21
  successors: %bb.24(0x30000000), %bb.23(0x50000000); %bb.24(37.50%), %bb.23(62.50%)

  %215:gr64_with_sub_8bit = MOVSX64rm32 %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  %225:gr64_nosp = COPY %215:gr64_with_sub_8bit
  %225:gr64_nosp = IMUL64rr %225:gr64_nosp(tied-def 0), %217:gr64, implicit-def dead $eflags
  %219:gr64_with_sub_8bit = COPY %225:gr64_nosp
  %219:gr64_with_sub_8bit = SHR64ri %219:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
  %225:gr64_nosp = SAR64ri %225:gr64_nosp(tied-def 0), 35, implicit-def dead $eflags
  %225.sub_32bit:gr64_nosp = ADD32rr %225.sub_32bit:gr64_nosp(tied-def 0), %219.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
  %225.sub_32bit:gr64_nosp = SHL32ri %225.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
  %227:gr32 = LEA64_32r %225:gr64_nosp, 4, %225:gr64_nosp, 0, $noreg
  CMP32rr %215.sub_32bit:gr64_with_sub_8bit, %227:gr32, implicit-def $eflags
  JCC_1 %bb.24, 4, implicit killed $eflags
  JMP_1 %bb.23

bb.23.lor.lhs.false53:
; predecessors: %bb.22
  successors: %bb.24(0x40000000), %bb.25(0x40000000); %bb.24(50.00%), %bb.25(50.00%)

  CMP32mi8 %stack.5.step, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (dereferenceable load 4 from %ir.step)
  JCC_1 %bb.25, 5, implicit killed $eflags
  JMP_1 %bb.24

bb.24.if.then55:
; predecessors: %bb.22, %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %231:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_25__Time_step, $noreg
  $esi = COPY %231:gr32
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 25, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %231:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.25.if.end57:
; predecessors: %bb.23, %bb.24
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @adi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 26, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.5.step, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.step), (dereferenceable load 4 from %ir.step)
  JMP_1 %bb.21

bb.26.for.end60:
; predecessors: %bb.21
  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 27, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 28, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %98:fr64 = COPY killed $xmm0
  MOVSDmr %stack.9.tmax, 1, $noreg, 0, $noreg, %98:fr64 :: (store 8 into %ir.tmax)
  %99:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %99:gr32
  $rsi = LEA64r %stack.13.Class, 1, $noreg, 0, $noreg
  $rdx = LEA64r %stack.12.verified, 1, $noreg, 0, $noreg
  CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 29, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %99:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %111:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %103:fr64 = CVTSI2SDrr %111:gr32
  %104:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %106:fr64 = CVTSI2SDrr %104:gr32
  %106:fr64 = MULSDrr %106:fr64(tied-def 0), %103:fr64
  %107:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  %109:fr64 = CVTSI2SDrr %107:gr32
  %109:fr64 = MULSDrr %109:fr64(tied-def 0), %106:fr64
  MOVSDmr %stack.8.n3, 1, $noreg, 0, $noreg, %109:fr64 :: (store 8 into %ir.n3)
  %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %104:gr32, implicit-def dead $eflags
  %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %107:gr32, implicit-def dead $eflags
  %113:fr64 = CVTSI2SDrr %111:gr32
  %113:fr64 = DIVSDrm %113:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  MOVSDmr %stack.6.navg, 1, $noreg, 0, $noreg, %113:fr64 :: (store 8 into %ir.navg)
  %114:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  %115:fr64 = FsFLD0SD
  UCOMISDrr %114:fr64, %115:fr64, implicit-def $eflags
  JCC_1 %bb.27, 5, implicit $eflags
  JCC_1 %bb.27, 10, implicit killed $eflags
  JMP_1 %bb.28

bb.27.if.then70:
; predecessors: %bb.26
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  %117:fr64 = CVTSI2SDrm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  %117:fr64 = MULSDrm %117:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  %119:fr64 = MOVSDrm_alt %stack.8.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3)
  %119:fr64 = MULSDrm %119:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  %125:fr64 = MOVSDrm_alt %stack.6.navg, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.navg)
  %122:fr64 = COPY %125:fr64
  %122:fr64 = MULSDrr %122:fr64(tied-def 0), %122:fr64
  %122:fr64 = MULSDrm %122:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  %122:fr64 = ADDSDrr %122:fr64(tied-def 0), %119:fr64
  %125:fr64 = MULSDrm %125:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  %125:fr64 = ADDSDrr %125:fr64(tied-def 0), %122:fr64
  %125:fr64 = MULSDrr %125:fr64(tied-def 0), %117:fr64
  %125:fr64 = DIVSDrm %125:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  MOVSDmr %stack.7.mflops, 1, $noreg, 0, $noreg, %125:fr64 :: (store 8 into %ir.mflops)
  JMP_1 %bb.29

bb.28.if.else80:
; predecessors: %bb.26
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  MOV64mi32 %stack.7.mflops, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.mflops)

bb.29.if.end81:
; predecessors: %bb.28, %bb.27
  successors: %bb.30(0x50000000), %bb.44(0x30000000); %bb.30(62.50%), %bb.44(37.50%)

  %128:gr32 = MOVSX32rm8 %stack.13.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
  %130:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %131:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %132:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  %133:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  %134:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  %135:fr64 = MOVSDrm_alt %stack.7.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
  %136:gr32 = MOV32rm %stack.12.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
  ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %137:gr64 = LEA64r $rip, 1, $noreg, @bt__str_36__none__, $noreg
  MOV64mr $rsp, 1, $noreg, 80, $noreg, %137:gr64 :: (store 8 into stack + 80)
  %139:gr64 = LEA64r $rip, 1, $noreg, @bt__str_35__O3__mcmod, $noreg
  MOV64mr $rsp, 1, $noreg, 72, $noreg, %139:gr64 :: (store 8 into stack + 72)
  %140:gr64 = LEA64r $rip, 1, $noreg, @bt__str_34__g__Wall__, $noreg
  MOV64mr $rsp, 1, $noreg, 64, $noreg, %140:gr64 :: (store 8 into stack + 64)
  %141:gr64 = LEA64r $rip, 1, $noreg, @bt__str_33__I___commo, $noreg
  MOV64mr $rsp, 1, $noreg, 56, $noreg, %141:gr64 :: (store 8 into stack + 56)
  %142:gr64 = LEA64r $rip, 1, $noreg, @bt__str_32__lm_, $noreg
  MOV64mr $rsp, 1, $noreg, 48, $noreg, %142:gr64 :: (store 8 into stack + 48)
  %143:gr64 = LEA64r $rip, 1, $noreg, @bt__str_31___CC__, $noreg
  MOV64mr $rsp, 1, $noreg, 40, $noreg, %143:gr64 :: (store 8 into stack + 40)
  %144:gr64 = LEA64r $rip, 1, $noreg, @bt__str_30_gcc_, $noreg
  MOV64mr $rsp, 1, $noreg, 32, $noreg, %144:gr64 :: (store 8 into stack + 32)
  %145:gr64 = LEA64r $rip, 1, $noreg, @bt__str_29_03_Nov_201, $noreg
  MOV64mr $rsp, 1, $noreg, 24, $noreg, %145:gr64 :: (store 8 into stack + 24)
  %146:gr64 = LEA64r $rip, 1, $noreg, @bt__str_28_3_3_1_, $noreg
  MOV64mr $rsp, 1, $noreg, 16, $noreg, %146:gr64 :: (store 8 into stack + 16)
  MOV32mr $rsp, 1, $noreg, 8, $noreg, %136:gr32 :: (store 4 into stack + 8)
  %147:gr64 = LEA64r $rip, 1, $noreg, @bt__str_27___________, $noreg
  MOV64mr $rsp, 1, $noreg, 0, $noreg, %147:gr64 :: (store 8 into stack)
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_26_BT_, $noreg
  $esi = COPY %128:gr32
  $edx = COPY %130:gr32
  $ecx = COPY %131:gr32
  $r8d = COPY %132:gr32
  $r9d = COPY %133:gr32
  $xmm0 = COPY %134:fr64
  $xmm1 = COPY %135:fr64
  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 88, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 30, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %128.sub_8bit:gr32, %130:gr32, %131:gr32, %132:gr32, %133:gr32, %134:fr64, %135:fr64, %136:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.44, 4, implicit killed $eflags
  JMP_1 %bb.30

bb.30.if.then82:
; predecessors: %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %149:gr32 = MOV32ri 1
  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %149:gr32 :: (store 4 into %ir.i)
  %214:gr64 = LEA64r %stack.11.trecs, 1, $noreg, 0, $noreg

bb.31.for.cond83:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.33, 15, implicit killed $eflags
  JMP_1 %bb.32

bb.32.for.body86:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %211:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %211:gr32
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 31, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %211:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %212:fr64 = COPY killed $xmm0
  %213:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  MOVSDmr %214:gr64, 8, %213:gr64_nosp, 0, $noreg, %212:fr64 :: (store 8 into %ir.arrayidx88)
  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.31

bb.33.for.end91:
; predecessors: %bb.31
  successors: %bb.34(0x50000000), %bb.35(0x30000000); %bb.34(62.50%), %bb.35(37.50%)

  %152:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  %153:fr64 = FsFLD0SD
  UCOMISDrr %152:fr64, %153:fr64, implicit-def $eflags
  JCC_1 %bb.35, 5, implicit $eflags
  JCC_1 %bb.35, 10, implicit killed $eflags
  JMP_1 %bb.34

bb.34.if.then94:
; predecessors: %bb.33
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  %154:gr64 = MOV64ri 4607182418800017408
  MOV64mr %stack.9.tmax, 1, $noreg, 0, $noreg, %154:gr64 :: (store 8 into %ir.tmax)

bb.35.if.end95:
; predecessors: %bb.33, %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_37___SECTION_, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 32, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %159:gr32 = MOV32ri 1
  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %159:gr32 :: (store 4 into %ir.i)
  %163:gr64 = LEA64r %stack.14.t_names, 1, $noreg, 0, $noreg
  %165:gr64 = LEA64r %stack.11.trecs, 1, $noreg, 0, $noreg
  %250:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)

bb.36.for.cond97:
; predecessors: %bb.35, %bb.43
  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.44, 15, implicit killed $eflags
  JMP_1 %bb.37

bb.37.for.body100:
; predecessors: %bb.36
  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

  %162:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %164:gr64 = MOV64rm %163:gr64, 8, %162:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx102)
  %166:fr64 = MOVSDrm_alt %165:gr64, 8, %162:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
  %168:fr64 = COPY %166:fr64
  %168:fr64 = MULSDrr %168:fr64(tied-def 0), %250:fr64
  %168:fr64 = DIVSDrm %168:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_38_____8s__9_, $noreg
  $rsi = COPY %164:gr64
  $xmm0 = COPY %166:fr64
  $xmm1 = COPY %168:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 33, 0, %168:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %164:gr64, %166:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.39, 5, implicit killed $eflags
  JMP_1 %bb.38

bb.38.if.then112:
; predecessors: %bb.37
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %197:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx113, align 16)
  %197:fr64 = ADDSDrm %197:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx114)
  %197:fr64 = ADDSDrm %197:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
  MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %197:fr64 :: (store 8 into %ir.t)
  %200:fr64 = COPY %197:fr64
  %200:fr64 = MULSDrr %200:fr64(tied-def 0), %250:fr64
  %200:fr64 = DIVSDrm %200:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @bt__str_40_sub_rhs_, $noreg
  $xmm0 = COPY %197:fr64
  $xmm1 = COPY %200:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 34, 0, %200:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %197:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %206:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx121)
  %206:fr64 = SUBSDrm %206:fr64(tied-def 0), %stack.10.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %206:fr64 :: (store 8 into %ir.t)
  %208:fr64 = COPY %206:fr64
  %208:fr64 = MULSDrr %208:fr64(tied-def 0), %250:fr64
  %208:fr64 = DIVSDrm %208:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @bt__str_41_rest_rhs_, $noreg
  $xmm0 = COPY %206:fr64
  $xmm1 = COPY %208:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 35, 0, %208:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %206:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.43

bb.39.if.else126:
; predecessors: %bb.37
  successors: %bb.40(0x40000000), %bb.41(0x40000000); %bb.40(50.00%), %bb.41(50.00%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 8, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.41, 5, implicit killed $eflags
  JMP_1 %bb.40

bb.40.if.then129:
; predecessors: %bb.39
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %188:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 64, $noreg :: (dereferenceable load 8 from %ir.arrayidx130, align 16)
  %188:fr64 = SUBSDrm %188:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx131)
  %188:fr64 = SUBSDrm %188:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
  MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %188:fr64 :: (store 8 into %ir.t)
  %190:fr64 = COPY %188:fr64
  %190:fr64 = MULSDrr %190:fr64(tied-def 0), %250:fr64
  %190:fr64 = DIVSDrm %190:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @bt__str_42_sub_zsol_, $noreg
  $xmm0 = COPY %188:fr64
  $xmm1 = COPY %190:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 36, 0, %190:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %188:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.43

bb.41.if.else138:
; predecessors: %bb.39
  successors: %bb.42(0x40000000), %bb.43(0x40000000); %bb.42(50.00%), %bb.43(50.00%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 10, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.43, 5, implicit killed $eflags
  JMP_1 %bb.42

bb.42.if.then141:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %179:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx142)
  %179:fr64 = ADDSDrm %179:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx143, align 16)
  MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %179:fr64 :: (store 8 into %ir.t)
  %181:fr64 = COPY %179:fr64
  %181:fr64 = MULSDrr %181:fr64(tied-def 0), %250:fr64
  %181:fr64 = DIVSDrm %181:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @bt__str_43_redist_, $noreg
  $xmm0 = COPY %179:fr64
  $xmm1 = COPY %181:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 37, 0, %181:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %179:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.43.if.end150:
; predecessors: %bb.41, %bb.42, %bb.40, %bb.38
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.36

bb.44.if.end154:
; predecessors: %bb.29, %bb.36
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)

bb.45.return:
; predecessors: %bb.44, %bb.13

  %249:gr32 = MOV32rm %stack.0.retval, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.retval)
  $eax = COPY %249:gr32
  RET 0, killed $eax

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %4:gr64 = COPY killed $rax
    To: JCC_1 %bb.2, 4, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %4:gr64 = COPY killed $rax
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%4
    SU(1): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(1):   MOV64mr %stack.15.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(2):   TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.15.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %4:gr64 = COPY killed $rax
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %4:gr64 = COPY killed $rax
SU(1):   MOV64mr %stack.15.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
SU(2):   TEST64rr %4:gr64, %4:gr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.0 entry
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_timer_flag, $noreg
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_timer_flag, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_1_r_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @bt__str_1_r_, $noreg
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_timer_flag, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_timer_flag, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_1_r_, $noreg

********** MI Scheduling **********
main:%bb.0 entry
  From: %1:gr64 = COPY $rsi
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 0 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %0:gr32 = COPY $edi
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:gr64 = COPY $rsi
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gr64 = COPY $rsi
SU(1):   %0:gr32 = COPY $edi
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)

********** MI Scheduling **********
main:%bb.1 if.then
  From: %5:gr32 = MOV32ri 1
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 25
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=2
Live In: 
Live Out: %17 
Live Thru: 
  LiveReg: %17
Top Pressure:

Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   %5:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%5
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %6:gr64 = LEA64r $rip, 1, $noreg, @bt__str_2_total_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%6
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr %stack.14.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
  # preds left       : 1
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%6
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %7:gr64 = LEA64r $rip, 1, $noreg, @bt__str_3_rhsx_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%7
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr %stack.14.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%7
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %8:gr64 = LEA64r $rip, 1, $noreg, @bt__str_4_rhsy_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%8
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr %stack.14.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
  # preds left       : 3
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%8
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %9:gr64 = LEA64r $rip, 1, $noreg, @bt__str_5_rhsz_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%9
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV64mr %stack.14.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 4
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%9
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %10:gr64 = LEA64r $rip, 1, $noreg, @bt__str_6_rhs_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%10
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   MOV64mr %stack.14.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
  # preds left       : 5
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%10
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %11:gr64 = LEA64r $rip, 1, $noreg, @bt__str_7_xsolve_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%11
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV64mr %stack.14.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%11
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %12:gr64 = LEA64r $rip, 1, $noreg, @bt__str_8_ysolve_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%12
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   MOV64mr %stack.14.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
  # preds left       : 7
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%12
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %13:gr64 = LEA64r $rip, 1, $noreg, @bt__str_9_zsolve_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%13
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(17):   MOV64mr %stack.14.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 8
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%13
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   %14:gr64 = LEA64r $rip, 1, $noreg, @bt__str_10_redist1_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(19): Data Latency=1 Reg=%14
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(19):   MOV64mr %stack.14.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
  # preds left       : 9
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%14
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(20):   %15:gr64 = LEA64r $rip, 1, $noreg, @bt__str_11_redist2_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(21): Data Latency=1 Reg=%15
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(21):   MOV64mr %stack.14.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 10
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(20): Data Latency=1 Reg=%15
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(22):   %16:gr64 = LEA64r $rip, 1, $noreg, @bt__str_12_add_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(23): Data Latency=1 Reg=%16
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(23):   MOV64mr %stack.14.t_names, 1, $noreg, 88, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10)
  # preds left       : 11
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(22): Data Latency=1 Reg=%16
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %17:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(24): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 1 24 
  Cand SU(23) ORDER                              
  Cand SU(24) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(24) %17:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
Bottom Pressure:

  Ready @3c
  BotQ.A BotLatency SU(24) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 1 
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) MOV64mr %stack.14.t_names, 1, $noreg, 88, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10)
Bottom Pressure:
GR16=2
  LiveReg: %16
  UpdateRegP: SU(23) MOV64mr %stack.14.t_names, 1, $noreg, 88, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10)
              to 
  Ready @0c
  BotQ.A TopLatency SU(23) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 22 21 
  Cand SU(1) ORDER                              
  Cand SU(22) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(22) %16:gr64 = LEA64r $rip, 1, $noreg, @bt__str_12_add_, $noreg
Bottom Pressure:

  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 21 
  Cand SU(1) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) MOV64mr %stack.14.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %15
  UpdateRegP: SU(21) MOV64mr %stack.14.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 20 19 
  Cand SU(1) ORDER                              
  Cand SU(20) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(20) %15:gr64 = LEA64r $rip, 1, $noreg, @bt__str_11_redist2_, $noreg
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 19 
  Cand SU(1) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) MOV64mr %stack.14.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
Bottom Pressure:
GR16=2
  LiveReg: %14
  UpdateRegP: SU(19) MOV64mr %stack.14.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
              to 
  Ready @1c
  BotQ.A TopLatency SU(19) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(18) %14:gr64 = LEA64r $rip, 1, $noreg, @bt__str_10_redist1_, $noreg
Bottom Pressure:

  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 17 
  Cand SU(1) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) MOV64mr %stack.14.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %13
  UpdateRegP: SU(17) MOV64mr %stack.14.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 15 
  Cand SU(1) ORDER                              
  Cand SU(16) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(16) %13:gr64 = LEA64r $rip, 1, $noreg, @bt__str_9_zsolve_, $noreg
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 15 
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV64mr %stack.14.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
Bottom Pressure:
GR16=2
  LiveReg: %12
  UpdateRegP: SU(15) MOV64mr %stack.14.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
              to 
  Ready @2c
  BotQ.A TopLatency SU(15) 1c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 14 13 
  Cand SU(1) ORDER                              
  Cand SU(14) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(14) %12:gr64 = LEA64r $rip, 1, $noreg, @bt__str_8_ysolve_, $noreg
Bottom Pressure:

  Ready @3c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 13 
  Cand SU(1) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mr %stack.14.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %11
  UpdateRegP: SU(13) MOV64mr %stack.14.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
              to 
  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 12 11 
  Cand SU(1) ORDER                              
  Cand SU(12) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(12) %11:gr64 = LEA64r $rip, 1, $noreg, @bt__str_7_xsolve_, $noreg
Bottom Pressure:

  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 11 
  Cand SU(1) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr %stack.14.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
Bottom Pressure:
GR16=2
  LiveReg: %10
  UpdateRegP: SU(11) MOV64mr %stack.14.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
              to 
  Ready @3c
  BotQ.A TopLatency SU(11) 1c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 10 9 
  Cand SU(1) ORDER                              
  Cand SU(10) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(10) %10:gr64 = LEA64r $rip, 1, $noreg, @bt__str_6_rhs_, $noreg
Bottom Pressure:

  Ready @4c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 9 
  Cand SU(1) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mr %stack.14.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %9
  UpdateRegP: SU(9) MOV64mr %stack.14.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
              to 
  Ready @3c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 7 
  Cand SU(1) ORDER                              
  Cand SU(8) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(8) %9:gr64 = LEA64r $rip, 1, $noreg, @bt__str_5_rhsz_, $noreg
Bottom Pressure:

  Ready @4c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr %stack.14.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
Bottom Pressure:
GR16=2
  LiveReg: %8
  UpdateRegP: SU(7) MOV64mr %stack.14.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
              to 
  Ready @4c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 5 
  Cand SU(1) ORDER                              
  Cand SU(6) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(6) %8:gr64 = LEA64r $rip, 1, $noreg, @bt__str_4_rhsy_, $noreg
Bottom Pressure:

  Ready @5c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr %stack.14.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %7
  UpdateRegP: SU(5) MOV64mr %stack.14.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
              to 
  Ready @4c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(4) %7:gr64 = LEA64r $rip, 1, $noreg, @bt__str_3_rhsx_, $noreg
Bottom Pressure:

  Ready @5c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr %stack.14.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
Bottom Pressure:
GR16=2
  LiveReg: %6
  UpdateRegP: SU(3) MOV64mr %stack.14.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
              to 
  Ready @5c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(2) %6:gr64 = LEA64r $rip, 1, $noreg, @bt__str_2_total_, $noreg
Bottom Pressure:

  Ready @6c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
Bottom Pressure:
GR16=2
  LiveReg: %5
  UpdateRegP: SU(1) MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
              to 
  Ready @5c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:gr32 = MOV32ri 1
Bottom Pressure:

  Ready @6c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %5:gr32 = MOV32ri 1
SU(1):   MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
SU(2):   %6:gr64 = LEA64r $rip, 1, $noreg, @bt__str_2_total_, $noreg
SU(3):   MOV64mr %stack.14.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
SU(4):   %7:gr64 = LEA64r $rip, 1, $noreg, @bt__str_3_rhsx_, $noreg
SU(5):   MOV64mr %stack.14.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
SU(6):   %8:gr64 = LEA64r $rip, 1, $noreg, @bt__str_4_rhsy_, $noreg
SU(7):   MOV64mr %stack.14.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
SU(8):   %9:gr64 = LEA64r $rip, 1, $noreg, @bt__str_5_rhsz_, $noreg
SU(9):   MOV64mr %stack.14.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
SU(10):   %10:gr64 = LEA64r $rip, 1, $noreg, @bt__str_6_rhs_, $noreg
SU(11):   MOV64mr %stack.14.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
SU(12):   %11:gr64 = LEA64r $rip, 1, $noreg, @bt__str_7_xsolve_, $noreg
SU(13):   MOV64mr %stack.14.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
SU(14):   %12:gr64 = LEA64r $rip, 1, $noreg, @bt__str_8_ysolve_, $noreg
SU(15):   MOV64mr %stack.14.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
SU(16):   %13:gr64 = LEA64r $rip, 1, $noreg, @bt__str_9_zsolve_, $noreg
SU(17):   MOV64mr %stack.14.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
SU(18):   %14:gr64 = LEA64r $rip, 1, $noreg, @bt__str_10_redist1_, $noreg
SU(19):   MOV64mr %stack.14.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
SU(20):   %15:gr64 = LEA64r $rip, 1, $noreg, @bt__str_11_redist2_, $noreg
SU(21):   MOV64mr %stack.14.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
SU(22):   %16:gr64 = LEA64r $rip, 1, $noreg, @bt__str_12_add_, $noreg
SU(23):   MOV64mr %stack.14.t_names, 1, $noreg, 88, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10)
SU(24):   %17:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %25:gr64 = COPY killed $rax
    To: JCC_1 %bb.9, 4, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %25:gr64 = COPY killed $rax
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%25
    SU(1): Data Latency=0 Reg=%25
  Single Issue       : false;
SU(1):   MOV64mr %stack.15.fp, 1, $noreg, 0, $noreg, %25:gr64 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%25
  Single Issue       : false;
SU(2):   TEST64rr %25:gr64, %25:gr64, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%25
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.9, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %25:gr64, %25:gr64, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.15.fp, 1, $noreg, 0, $noreg, %25:gr64 :: (store 8 into %ir.fp)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %25:gr64 = COPY killed $rax
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %25:gr64 = COPY killed $rax
SU(1):   MOV64mr %stack.15.fp, 1, $noreg, 0, $noreg, %25:gr64 :: (store 8 into %ir.fp)
SU(2):   TEST64rr %25:gr64, %25:gr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.3 if.end
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_14_inputbt_da, $noreg
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_14_inputbt_da, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_1_r_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @bt__str_1_r_, $noreg
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_14_inputbt_da, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_14_inputbt_da, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_1_r_, $noreg

********** MI Scheduling **********
main:%bb.3 if.end
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_13____NAS_Par, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_13____NAS_Par, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_13____NAS_Par, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_13____NAS_Par, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.4 if.then15
  From: %41:gr32 = COPY killed $eax
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %41:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%41
  Single Issue       : false;
SU(1):   MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %41:gr32 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%41
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %41:gr32 :: (store 4 into %ir.result)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %41:gr32 = COPY killed $eax
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %41:gr32 = COPY killed $eax
SU(1):   MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %41:gr32 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.4 if.then15
  From: $rdi = COPY %38:gr64
    To: CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %38:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_16__d_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = LEA64r %stack.4.niter, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %38:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = LEA64r %stack.4.niter, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @bt__str_16__d_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_16__d_, $noreg
SU(2):   $rdx = LEA64r %stack.4.niter, 1, $noreg, 0, $noreg
SU(0):   $rdi = COPY %38:gr64
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.4 if.then15
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_15__Reading_f, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_15__Reading_f, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_15__Reading_f, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_15__Reading_f, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.5 while.cond
  From: %43:gr32 = COPY killed $eax
    To: JCC_1 %bb.5, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %43:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%43
  Single Issue       : false;
SU(1):   CMP32ri8 %43:gr32, 10, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%43
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.5, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
Cyclic Critical Path: 0c
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32ri8 %43:gr32, 10, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %43:gr32 = COPY killed $eax
  Ready @1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %43:gr32 = COPY killed $eax
SU(1):   CMP32ri8 %43:gr32, 10, implicit-def $eflags

********** MI Scheduling **********
main:%bb.6 while.end
  From: %50:gr32 = COPY killed $eax
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %50:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%50
  Single Issue       : false;
SU(1):   MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %50:gr32 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%50
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %50:gr32 :: (store 4 into %ir.result)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %50:gr32 = COPY killed $eax
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %50:gr32 = COPY killed $eax
SU(1):   MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %50:gr32 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.6 while.end
  From: $rdi = COPY %45:gr64
    To: CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %45:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_17__lf_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @dt, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %45:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = LEA64r $rip, 1, $noreg, @dt, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @bt__str_17__lf_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_17__lf_, $noreg
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @dt, $noreg
SU(0):   $rdi = COPY %45:gr64
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.7 while.cond21
  From: %52:gr32 = COPY killed $eax
    To: JCC_1 %bb.7, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %52:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%52
  Single Issue       : false;
SU(1):   CMP32ri8 %52:gr32, 10, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%52
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.7, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
Cyclic Critical Path: 0c
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32ri8 %52:gr32, 10, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %52:gr32 = COPY killed $eax
  Ready @1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %52:gr32 = COPY killed $eax
SU(1):   CMP32ri8 %52:gr32, 10, implicit-def $eflags

********** MI Scheduling **********
main:%bb.8 while.end25
  From: %61:gr32 = COPY killed $eax
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %61:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%61
  Single Issue       : false;
SU(1):   MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %61:gr32 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%61
  Single Issue       : false;
SU(2):   %62:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %62:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %61:gr32 :: (store 4 into %ir.result)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %61:gr32 = COPY killed $eax
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %61:gr32 = COPY killed $eax
SU(1):   MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %61:gr32 :: (store 4 into %ir.result)
SU(2):   %62:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)

********** MI Scheduling **********
main:%bb.8 while.end25
  From: $rdi = COPY %54:gr64
    To: CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %54:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_18__d_d_d__, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @grid_points, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $rcx = nuw LEA64r $rip, 1, $noreg, @grid_points + 4, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(4):   $r8 = nuw LEA64r $rip, 1, $noreg, @grid_points + 8, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(5):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %54:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 2 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8 = nuw LEA64r $rip, 1, $noreg, @grid_points + 8, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rcx = nuw LEA64r $rip, 1, $noreg, @grid_points + 4, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = LEA64r $rip, 1, $noreg, @grid_points, $noreg
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @bt__str_18__d_d_d__, $noreg
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_18__d_d_d__, $noreg
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @grid_points, $noreg
SU(3):   $rcx = nuw LEA64r $rip, 1, $noreg, @grid_points + 4, $noreg
SU(4):   $r8 = nuw LEA64r $rip, 1, $noreg, @grid_points + 8, $noreg
SU(0):   $rdi = COPY %54:gr64
SU(5):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.9 if.else28
  From: %30:gr32 = MOV32ri 200
    To: End RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %30:gr32 = MOV32ri 200
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%30
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr %stack.4.niter, 1, $noreg, 0, $noreg, %30:gr32 :: (store 4 into %ir.niter)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%30
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %31:gr64 = MOV64ri 4554169646866313825
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%31
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr $rip, 1, $noreg, @dt, $noreg, %31:gr64 :: (store 8 into @dt)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%31
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %32:gr64 = MOV64ri 438086664294
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%32
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr $rip, 1, $noreg, @grid_points, $noreg, %32:gr64 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%32
  Successors:
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %33:gr32 = MOV32ri 102
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%33
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV32mr $rip, 1, $noreg, @grid_points + 8, $noreg, %33:gr32 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%33
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 1 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr $rip, 1, $noreg, @grid_points + 8, $noreg, %33:gr32 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:
GR16=2
  LiveReg: %33
  UpdateRegP: SU(7) MOV32mr $rip, 1, $noreg, @grid_points + 8, $noreg, %33:gr32 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 6 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(6) %33:gr32 = MOV32ri 102
Bottom Pressure:

  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr $rip, 1, $noreg, @grid_points, $noreg, %32:gr64 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
Bottom Pressure:
GR16=2
  LiveReg: %32
  UpdateRegP: SU(5) MOV64mr $rip, 1, $noreg, @grid_points, $noreg, %32:gr64 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(4) %32:gr64 = MOV64ri 438086664294
Bottom Pressure:

  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr $rip, 1, $noreg, @dt, $noreg, %31:gr64 :: (store 8 into @dt)
Bottom Pressure:
GR16=2
  LiveReg: %31
  UpdateRegP: SU(3) MOV64mr $rip, 1, $noreg, @dt, $noreg, %31:gr64 :: (store 8 into @dt)
              to 
  Ready @1c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(2) %31:gr64 = MOV64ri 4554169646866313825
Bottom Pressure:

  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.4.niter, 1, $noreg, 0, $noreg, %30:gr32 :: (store 4 into %ir.niter)
Bottom Pressure:
GR16=2
  LiveReg: %30
  UpdateRegP: SU(1) MOV32mr %stack.4.niter, 1, $noreg, 0, $noreg, %30:gr32 :: (store 4 into %ir.niter)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %30:gr32 = MOV32ri 200
Bottom Pressure:

  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %30:gr32 = MOV32ri 200
SU(1):   MOV32mr %stack.4.niter, 1, $noreg, 0, $noreg, %30:gr32 :: (store 4 into %ir.niter)
SU(2):   %31:gr64 = MOV64ri 4554169646866313825
SU(3):   MOV64mr $rip, 1, $noreg, @dt, $noreg, %31:gr64 :: (store 8 into @dt)
SU(4):   %32:gr64 = MOV64ri 438086664294
SU(5):   MOV64mr $rip, 1, $noreg, @grid_points, $noreg, %32:gr64 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
SU(6):   %33:gr32 = MOV32ri 102
SU(7):   MOV32mr $rip, 1, $noreg, @grid_points + 8, $noreg, %33:gr32 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.9 if.else28
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_19__No_input_, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_19__No_input_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_19__No_input_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_19__No_input_, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.10 if.end30
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_22___, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_22___, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_22___, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_22___, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.10 if.end30
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_21__Iteration, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_21__Iteration, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %71:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %72:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %72:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %71:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_21__Iteration, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_21__Iteration, $noreg
SU(1):   $esi = COPY %71:gr32
SU(2):   $xmm0 = COPY %72:fr64
SU(3):   $al = MOV8ri 1

********** MI Scheduling **********
main:%bb.10 if.end30
  From: %71:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %71:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %72:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dt, $noreg :: (dereferenceable load 8 from @dt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %72:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dt, $noreg :: (dereferenceable load 8 from @dt)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %71:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %71:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
SU(1):   %72:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dt, $noreg :: (dereferenceable load 8 from @dt)

********** MI Scheduling **********
main:%bb.10 if.end30
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_20__Size___4d, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_20__Size___4d, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %64:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %65:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %66:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $ecx = COPY %66:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %65:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %64:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_20__Size___4d, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_20__Size___4d, $noreg
SU(1):   $esi = COPY %64:gr32
SU(2):   $edx = COPY %65:gr32
SU(3):   $ecx = COPY %66:gr32
SU(4):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.10 if.end30
  From: %64:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %64:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %65:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %66:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %66:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %65:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %64:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %64:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(1):   %65:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(2):   %66:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.13 if.then38
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_24__Problem_s, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_24__Problem_s, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_24__Problem_s, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_24__Problem_s, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.13 if.then38
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_23___d___d___, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_23___d___d___, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %240:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %241:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %242:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $ecx = COPY %242:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %241:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %240:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_23___d___d___, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_23___d___d___, $noreg
SU(1):   $esi = COPY %240:gr32
SU(2):   $edx = COPY %241:gr32
SU(3):   $ecx = COPY %242:gr32
SU(4):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.13 if.then38
  From: %240:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %240:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %241:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %242:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %242:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %241:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %240:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %240:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(1):   %241:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(2):   %242:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.14 if.end41
  From: %86:gr32 = MOV32ri 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %86:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%86
  Single Issue       : false;
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %86:gr32 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%86
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %86:gr32 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %86:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %86:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %86:gr32 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.17 for.end
  From: %91:gr32 = MOV32ri 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %91:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%91
  Single Issue       : false;
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %91:gr32 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%91
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %91:gr32 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %91:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %91:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %91:gr32 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.20 for.end48
  From: MOV32mr %stack.5.step, 1, $noreg, 0, $noreg, %94:gr32 :: (store 4 into %ir.step)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mr %stack.5.step, 1, $noreg, 0, $noreg, %94:gr32 :: (store 4 into %ir.step)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %217:gr64 = MOV32ri64 1717986919
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %217:gr64 = MOV32ri64 1717986919
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mr %stack.5.step, 1, $noreg, 0, $noreg, %94:gr32 :: (store 4 into %ir.step)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   MOV32mr %stack.5.step, 1, $noreg, 0, $noreg, %94:gr32 :: (store 4 into %ir.step)
SU(1):   %217:gr64 = MOV32ri64 1717986919

********** MI Scheduling **********
main:%bb.20 for.end48
  From: %94:gr32 = MOV32ri 1
    To: CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %94:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $edi = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %94:gr32 = MOV32ri 1
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %94:gr32 = MOV32ri 1
SU(1):   $edi = MOV32ri 1

********** MI Scheduling **********
main:%bb.21 for.cond49
  From: %95:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
    To: JCC_1 %bb.26, 15, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %95:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%95
  Single Issue       : false;
SU(1):   CMP32rm %95:gr32, %stack.4.niter, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%95
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.26, 15, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %95:gr32, %stack.4.niter, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.niter)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %95:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %95:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
SU(1):   CMP32rm %95:gr32, %stack.4.niter, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.niter)

********** MI Scheduling **********
main:%bb.22 for.body51
  From: %215:gr64_with_sub_8bit = MOVSX64rm32 %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
    To: JCC_1 %bb.24, 4, implicit killed $eflags
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=8
Live In: %217 
Live Out: %217 
Live Thru: GR16=2
  LiveReg: %217
  UpdateRegP: SU(2) %225:gr64_nosp = IMUL64rr %225:gr64_nosp(tied-def 0), %217:gr64, implicit-def dead $eflags
              to 
Top Pressure:
GR16=2
Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   %215:gr64_with_sub_8bit = MOVSX64rm32 %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(9): Data Latency=4 Reg=%215
    SU(1): Data Latency=4 Reg=%215
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %225:gr64_nosp = COPY %215:gr64_with_sub_8bit
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%215
  Successors:
    SU(2): Data Latency=0 Reg=%225
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %225:gr64_nosp = IMUL64rr %225:gr64_nosp(tied-def 0), %217:gr64, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=0 Reg=%225
    SU(1): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%225
    SU(3): Data Latency=1 Reg=%225
    SU(5): Out  Latency=0
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %219:gr64_with_sub_8bit = COPY %225:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%225
  Successors:
    SU(4): Data Latency=0 Reg=%219
    SU(4): Out  Latency=0
    SU(5): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %219:gr64_with_sub_8bit = SHR64ri %219:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Data Latency=0 Reg=%219
    SU(3): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%219
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %225:gr64_nosp = SAR64ri %225:gr64_nosp(tied-def 0), 35, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Data Latency=1 Reg=%225
    SU(2): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%225
    SU(6): Out  Latency=0
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %225.sub_32bit:gr64_nosp = ADD32rr %225.sub_32bit:gr64_nosp(tied-def 0), %219.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(5): Data Latency=1 Reg=%225
    SU(5): Out  Latency=0
    SU(4): Data Latency=1 Reg=%219
  Successors:
    SU(7): Data Latency=1 Reg=%225
    SU(7): Out  Latency=0
    SU(9): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %225.sub_32bit:gr64_nosp = SHL32ri %225.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 3
  Predecessors:
    SU(6): Data Latency=1 Reg=%225
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%225
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %227:gr32 = LEA64_32r %225:gr64_nosp, 4, %225:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(7): Data Latency=1 Reg=%225
  Successors:
    SU(9): Data Latency=1 Reg=%227
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   CMP32rr %215.sub_32bit:gr64_with_sub_8bit, %227:gr32, implicit-def $eflags
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%227
    SU(7): Out  Latency=0
    SU(6): Out  Latency=0
    SU(5): Out  Latency=0
    SU(4): Out  Latency=0
    SU(2): Out  Latency=0
    SU(0): Data Latency=4 Reg=%215
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR16 4
  Single Issue       : false;
ExitSU:   JCC_1 %bb.24, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) CMP32rr %215.sub_32bit:gr64_with_sub_8bit, %227:gr32, implicit-def $eflags
Bottom Pressure:
GR16=6
  LiveReg: %215
  UpdateRegP: SU(1) %225:gr64_nosp = COPY %215:gr64_with_sub_8bit
              to GR16 -2
  UpdateRegP: SU(9) CMP32rr %215.sub_32bit:gr64_with_sub_8bit, %227:gr32, implicit-def $eflags
              to GR16 2
  LiveReg: %227
  UpdateRegP: SU(9) CMP32rr %215.sub_32bit:gr64_with_sub_8bit, %227:gr32, implicit-def $eflags
              to 
  Ready @1c
  BotQ.A TopLatency SU(9) 9c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %227:gr32 = LEA64_32r %225:gr64_nosp, 4, %225:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=6
  LiveReg: %225
  UpdateRegP: SU(8) %227:gr32 = LEA64_32r %225:gr64_nosp, 4, %225:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @2c
  BotQ.A BotLatency SU(8) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %225.sub_32bit:gr64_nosp = SHL32ri %225.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %225
  UpdateRegP: SU(7) %225.sub_32bit:gr64_nosp = SHL32ri %225.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
              to GR16 -2
  Ready @3c
  BotQ.A BotLatency SU(7) 3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %225.sub_32bit:gr64_nosp = ADD32rr %225.sub_32bit:gr64_nosp(tied-def 0), %219.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %225
  UpdateRegP: SU(6) %225.sub_32bit:gr64_nosp = ADD32rr %225.sub_32bit:gr64_nosp(tied-def 0), %219.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %219
  UpdateRegP: SU(6) %225.sub_32bit:gr64_nosp = ADD32rr %225.sub_32bit:gr64_nosp(tied-def 0), %219.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %225:gr64_nosp = SAR64ri %225:gr64_nosp(tied-def 0), 35, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %225
  UpdateRegP: SU(3) %219:gr64_with_sub_8bit = COPY %225:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(5) %225:gr64_nosp = SAR64ri %225:gr64_nosp(tied-def 0), 35, implicit-def dead $eflags
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(5) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %219:gr64_with_sub_8bit = SHR64ri %219:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %219
  UpdateRegP: SU(4) %219:gr64_with_sub_8bit = SHR64ri %219:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %219:gr64_with_sub_8bit = COPY %225:gr64_nosp
Bottom Pressure:
GR16=6
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %225:gr64_nosp = IMUL64rr %225:gr64_nosp(tied-def 0), %217:gr64, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %225
  UpdateRegP: SU(2) %225:gr64_nosp = IMUL64rr %225:gr64_nosp(tied-def 0), %217:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %225:gr64_nosp = COPY %215:gr64_with_sub_8bit
Bottom Pressure:
GR16=4
  Ready @6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %215:gr64_with_sub_8bit = MOVSX64rm32 %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
Bottom Pressure:
GR16=2
  Ready @10c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %215:gr64_with_sub_8bit = MOVSX64rm32 %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
SU(1):   %225:gr64_nosp = COPY %215:gr64_with_sub_8bit
SU(2):   %225:gr64_nosp = IMUL64rr %225:gr64_nosp(tied-def 0), %217:gr64, implicit-def dead $eflags
SU(3):   %219:gr64_with_sub_8bit = COPY %225:gr64_nosp
SU(4):   %219:gr64_with_sub_8bit = SHR64ri %219:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
SU(5):   %225:gr64_nosp = SAR64ri %225:gr64_nosp(tied-def 0), 35, implicit-def dead $eflags
SU(6):   %225.sub_32bit:gr64_nosp = ADD32rr %225.sub_32bit:gr64_nosp(tied-def 0), %219.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
SU(7):   %225.sub_32bit:gr64_nosp = SHL32ri %225.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
SU(8):   %227:gr32 = LEA64_32r %225:gr64_nosp, 4, %225:gr64_nosp, 0, $noreg
SU(9):   CMP32rr %215.sub_32bit:gr64_with_sub_8bit, %227:gr32, implicit-def $eflags

********** MI Scheduling **********
main:%bb.24 if.then55
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_25__Time_step, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_25__Time_step, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %231:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %231:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_25__Time_step, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_25__Time_step, $noreg
SU(1):   $esi = COPY %231:gr32
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.26 for.end60
  From: %111:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
    To: JCC_1 %bb.27, 5, implicit $eflags
 RegionInstrs: 17
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %111:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(9): Data Latency=4 Reg=%111
    SU(1): Data Latency=4 Reg=%111
    SU(9): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %103:fr64 = CVTSI2SDrr %111:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=%111
  Successors:
    SU(4): Data Latency=1 Reg=%103
    SU(9): Anti Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(2):   %104:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(9): Data Latency=4 Reg=%104
    SU(3): Data Latency=4 Reg=%104
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %106:fr64 = CVTSI2SDrr %104:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%104
  Successors:
    SU(4): Data Latency=1 Reg=%106
    SU(4): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(4):   %106:fr64 = MULSDrr %106:fr64(tied-def 0), %103:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%106
    SU(3): Out  Latency=0
    SU(1): Data Latency=1 Reg=%103
  Successors:
    SU(7): Data Latency=1 Reg=%106
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(5):   %107:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(10): Data Latency=4 Reg=%107
    SU(6): Data Latency=4 Reg=%107
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %109:fr64 = CVTSI2SDrr %107:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(5): Data Latency=4 Reg=%107
  Successors:
    SU(7): Data Latency=1 Reg=%109
    SU(7): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(7):   %109:fr64 = MULSDrr %109:fr64(tied-def 0), %106:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%106
    SU(6): Out  Latency=0
    SU(6): Data Latency=1 Reg=%109
  Successors:
    SU(8): Data Latency=1 Reg=%109
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(8):   MOVSDmr %stack.8.n3, 1, $noreg, 0, $noreg, %109:fr64 :: (store 8 into %ir.n3)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%109
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %104:gr32, implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(2): Data Latency=4 Reg=%104
    SU(1): Anti Latency=0
    SU(0): Data Latency=4 Reg=%111
    SU(0): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%111
    SU(10): Out  Latency=0
    SU(16): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %107:gr32, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(9): Data Latency=1 Reg=%111
    SU(9): Out  Latency=0
    SU(5): Data Latency=4 Reg=%107
  Successors:
    SU(11): Data Latency=1 Reg=%111
    SU(16): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   %113:fr64 = CVTSI2SDrr %111:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(10): Data Latency=1 Reg=%111
  Successors:
    SU(12): Data Latency=1 Reg=%113
    SU(12): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(12):   %113:fr64 = DIVSDrm %113:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 4
  Predecessors:
    SU(11): Data Latency=1 Reg=%113
    SU(11): Out  Latency=0
  Successors:
    SU(13): Data Latency=4 Reg=%113
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   MOVSDmr %stack.6.navg, 1, $noreg, 0, $noreg, %113:fr64 :: (store 8 into %ir.navg)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(12): Data Latency=4 Reg=%113
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(14):   %114:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(16): Data Latency=4 Reg=%114
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(15):   %115:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(16): Data Latency=1 Reg=%115
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(16):   UCOMISDrr %114:fr64, %115:fr64, implicit-def $eflags
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(15): Data Latency=1 Reg=%115
    SU(14): Data Latency=4 Reg=%114
    SU(10): Out  Latency=0
    SU(9): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : FR32 2    FR32X 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.27, 5, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(16): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 8 16 
  Cand SU(13) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) UCOMISDrr %114:fr64, %115:fr64, implicit-def $eflags
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %114
  UpdateRegP: SU(16) UCOMISDrr %114:fr64, %115:fr64, implicit-def $eflags
              to FR32 1    FR32X 1
  LiveReg: %115
  UpdateRegP: SU(16) UCOMISDrr %114:fr64, %115:fr64, implicit-def $eflags
              to 
  Ready @1c
  BotQ.A TopLatency SU(16) 5c
  BotQ.A BotLatency SU(16) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 8 15 14 
  Cand SU(13) ORDER                              
  Cand SU(15) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(15) %115:fr64 = FsFLD0SD
Bottom Pressure:
FR32=1
FR32X=1
  Ready @2c
  BotQ.A BotLatency SU(15) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 8 14 
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %114:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(14) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 8 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOVSDmr %stack.6.navg, 1, $noreg, 0, $noreg, %113:fr64 :: (store 8 into %ir.navg)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %113
  UpdateRegP: SU(13) MOVSDmr %stack.6.navg, 1, $noreg, 0, $noreg, %113:fr64 :: (store 8 into %ir.navg)
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 12 
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %113:fr64 = DIVSDrm %113:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %113
  UpdateRegP: SU(12) %113:fr64 = DIVSDrm %113:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %113:fr64 = CVTSI2SDrr %111:gr32
Bottom Pressure:
GR16=2
  LiveReg: %111
  UpdateRegP: SU(11) %113:fr64 = CVTSI2SDrr %111:gr32
              to FR32 -1    FR32X -1
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 10 
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %107:gr32, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %111
  UpdateRegP: SU(10) %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %107:gr32, implicit-def dead $eflags
              to 
  LiveReg: %107
  UpdateRegP: SU(6) %109:fr64 = CVTSI2SDrr %107:gr32
              to FR32 -1    FR32X -1
  UpdateRegP: SU(10) %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %107:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(10) 6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %104:gr32, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %111
  UpdateRegP: SU(1) %103:fr64 = CVTSI2SDrr %111:gr32
              to FR32 -1    FR32X -1
  UpdateRegP: SU(9) %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %104:gr32, implicit-def dead $eflags
              to 
  LiveReg: %104
  UpdateRegP: SU(3) %106:fr64 = CVTSI2SDrr %104:gr32
              to FR32 -1    FR32X -1
  UpdateRegP: SU(9) %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %104:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(9) 7c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) MOVSDmr %stack.8.n3, 1, $noreg, 0, $noreg, %109:fr64 :: (store 8 into %ir.n3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %109
  UpdateRegP: SU(8) MOVSDmr %stack.8.n3, 1, $noreg, 0, $noreg, %109:fr64 :: (store 8 into %ir.n3)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %109:fr64 = MULSDrr %109:fr64(tied-def 0), %106:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %109
  UpdateRegP: SU(7) %109:fr64 = MULSDrr %109:fr64(tied-def 0), %106:fr64
              to 
  LiveReg: %106
  UpdateRegP: SU(7) %109:fr64 = MULSDrr %109:fr64(tied-def 0), %106:fr64
              to FR32 -1    FR32X -1
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(6) %109:fr64 = CVTSI2SDrr %107:gr32
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @4c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %107:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @10c
  BotQ.A BotLatency SU(5) 10c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %106:fr64 = MULSDrr %106:fr64(tied-def 0), %103:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %106
  UpdateRegP: SU(4) %106:fr64 = MULSDrr %106:fr64(tied-def 0), %103:fr64
              to 
  LiveReg: %103
  UpdateRegP: SU(4) %106:fr64 = MULSDrr %106:fr64(tied-def 0), %103:fr64
              to FR32 -1    FR32X -1
  Ready @4c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %106:fr64 = CVTSI2SDrr %104:gr32
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @5c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %104:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @11c
  BotQ.A BotLatency SU(2) 11c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %103:fr64 = CVTSI2SDrr %111:gr32
Bottom Pressure:
GR16=2
  Ready @7c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %111:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
Bottom Pressure:

  Ready @11c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %111:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(1):   %103:fr64 = CVTSI2SDrr %111:gr32
SU(2):   %104:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(3):   %106:fr64 = CVTSI2SDrr %104:gr32
SU(4):   %106:fr64 = MULSDrr %106:fr64(tied-def 0), %103:fr64
SU(5):   %107:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(6):   %109:fr64 = CVTSI2SDrr %107:gr32
SU(7):   %109:fr64 = MULSDrr %109:fr64(tied-def 0), %106:fr64
SU(8):   MOVSDmr %stack.8.n3, 1, $noreg, 0, $noreg, %109:fr64 :: (store 8 into %ir.n3)
SU(9):   %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %104:gr32, implicit-def dead $eflags
SU(10):   %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %107:gr32, implicit-def dead $eflags
SU(11):   %113:fr64 = CVTSI2SDrr %111:gr32
SU(12):   %113:fr64 = DIVSDrm %113:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(13):   MOVSDmr %stack.6.navg, 1, $noreg, 0, $noreg, %113:fr64 :: (store 8 into %ir.navg)
SU(14):   %114:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
SU(15):   %115:fr64 = FsFLD0SD
SU(16):   UCOMISDrr %114:fr64, %115:fr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.26 for.end60
  From: $edi = COPY %99:gr32
    To: CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = COPY %99:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r %stack.13.Class, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = LEA64r %stack.12.verified, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = COPY %99:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = LEA64r %stack.12.verified, 1, $noreg, 0, $noreg
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r %stack.13.Class, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(1):   $rsi = LEA64r %stack.13.Class, 1, $noreg, 0, $noreg
SU(2):   $rdx = LEA64r %stack.12.verified, 1, $noreg, 0, $noreg
SU(0):   $edi = COPY %99:gr32

********** MI Scheduling **********
main:%bb.26 for.end60
  From: %98:fr64 = COPY killed $xmm0
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %98:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%98
  Single Issue       : false;
SU(1):   MOVSDmr %stack.9.tmax, 1, $noreg, 0, $noreg, %98:fr64 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%98
  Single Issue       : false;
SU(2):   %99:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %99:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.9.tmax, 1, $noreg, 0, $noreg, %98:fr64 :: (store 8 into %ir.tmax)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %98:fr64 = COPY killed $xmm0
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %98:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr %stack.9.tmax, 1, $noreg, 0, $noreg, %98:fr64 :: (store 8 into %ir.tmax)
SU(2):   %99:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)

********** MI Scheduling **********
main:%bb.27 if.then70
  From: %117:fr64 = CVTSI2SDrm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
    To: JMP_1 %bb.29
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=4
FR32X=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %117:fr64 = CVTSI2SDrm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%117
    SU(1): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %117:fr64 = MULSDrm %117:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%117
    SU(0): Out  Latency=0
  Successors:
    SU(11): Data Latency=4 Reg=%117
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %119:fr64 = MOVSDrm_alt %stack.8.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Data Latency=4 Reg=%119
    SU(3): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(3):   %119:fr64 = MULSDrm %119:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(2): Data Latency=4 Reg=%119
    SU(2): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%119
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %125:fr64 = MOVSDrm_alt %stack.6.navg, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.navg)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(9): Data Latency=4 Reg=%125
    SU(5): Data Latency=4 Reg=%125
    SU(9): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(5):   %122:fr64 = COPY %125:fr64
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(4): Data Latency=4 Reg=%125
  Successors:
    SU(6): Data Latency=0 Reg=%122
    SU(6): Out  Latency=0
    SU(9): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %122:fr64 = MULSDrr %122:fr64(tied-def 0), %122:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(5): Data Latency=0 Reg=%122
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%122
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %122:fr64 = MULSDrm %122:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(6): Data Latency=1 Reg=%122
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%122
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %122:fr64 = ADDSDrr %122:fr64(tied-def 0), %119:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(7): Data Latency=4 Reg=%122
    SU(7): Out  Latency=0
    SU(3): Data Latency=4 Reg=%119
  Successors:
    SU(10): Data Latency=1 Reg=%122
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %125:fr64 = MULSDrm %125:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Data Latency=4 Reg=%125
    SU(4): Out  Latency=0
  Successors:
    SU(10): Data Latency=4 Reg=%125
    SU(10): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %125:fr64 = ADDSDrr %125:fr64(tied-def 0), %122:fr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(8): Data Latency=1 Reg=%122
    SU(9): Out  Latency=0
    SU(9): Data Latency=4 Reg=%125
  Successors:
    SU(11): Data Latency=1 Reg=%125
    SU(11): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(11):   %125:fr64 = MULSDrr %125:fr64(tied-def 0), %117:fr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(10): Data Latency=1 Reg=%125
    SU(10): Out  Latency=0
    SU(1): Data Latency=4 Reg=%117
  Successors:
    SU(12): Data Latency=1 Reg=%125
    SU(12): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(12):   %125:fr64 = DIVSDrm %125:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(11): Data Latency=1 Reg=%125
    SU(11): Out  Latency=0
  Successors:
    SU(13): Data Latency=4 Reg=%125
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   MOVSDmr %stack.7.mflops, 1, $noreg, 0, $noreg, %125:fr64 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(12): Data Latency=4 Reg=%125
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
ExitSU:   JMP_1 %bb.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) MOVSDmr %stack.7.mflops, 1, $noreg, 0, $noreg, %125:fr64 :: (store 8 into %ir.mflops)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %125
  UpdateRegP: SU(13) MOVSDmr %stack.7.mflops, 1, $noreg, 0, $noreg, %125:fr64 :: (store 8 into %ir.mflops)
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 16c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %125:fr64 = DIVSDrm %125:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %125
  UpdateRegP: SU(12) %125:fr64 = DIVSDrm %125:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(12) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) %125:fr64 = MULSDrr %125:fr64(tied-def 0), %117:fr64
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %125
  UpdateRegP: SU(11) %125:fr64 = MULSDrr %125:fr64(tied-def 0), %117:fr64
              to 
  LiveReg: %117
  UpdateRegP: SU(11) %125:fr64 = MULSDrr %125:fr64(tied-def 0), %117:fr64
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(11) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 1 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %125:fr64 = ADDSDrr %125:fr64(tied-def 0), %122:fr64
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %125
  UpdateRegP: SU(10) %125:fr64 = ADDSDrr %125:fr64(tied-def 0), %122:fr64
              to 
  LiveReg: %122
  UpdateRegP: SU(10) %125:fr64 = ADDSDrr %125:fr64(tied-def 0), %122:fr64
              to FR32 -1    FR32X -1
  Ready @6c
  BotQ.A BotLatency SU(10) 6c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 9 
  Cand SU(1) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %125:fr64 = MULSDrm %125:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %125
  UpdateRegP: SU(5) %122:fr64 = COPY %125:fr64
              to FR32 -1    FR32X -1
  UpdateRegP: SU(9) %125:fr64 = MULSDrm %125:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @10c
  BotQ.A BotLatency SU(9) 10c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 
  Cand SU(1) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %122:fr64 = ADDSDrr %122:fr64(tied-def 0), %119:fr64
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %122
  UpdateRegP: SU(8) %122:fr64 = ADDSDrr %122:fr64(tied-def 0), %119:fr64
              to 
  LiveReg: %119
  UpdateRegP: SU(8) %122:fr64 = ADDSDrr %122:fr64(tied-def 0), %119:fr64
              to FR32 -1    FR32X -1
  Ready @7c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 3 
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %122:fr64 = MULSDrm %122:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %122
  UpdateRegP: SU(7) %122:fr64 = MULSDrm %122:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @11c
  BotQ.A BotLatency SU(7) 11c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 6 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %122:fr64 = MULSDrr %122:fr64(tied-def 0), %122:fr64
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %122
  UpdateRegP: SU(6) %122:fr64 = MULSDrr %122:fr64(tied-def 0), %122:fr64
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(6) 12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %122:fr64 = COPY %125:fr64
Bottom Pressure:
FR32=3
FR32X=3
  Ready @12c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %125:fr64 = MOVSDrm_alt %stack.6.navg, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.navg)
Bottom Pressure:
FR32=2
FR32X=2
  Ready @16c
  BotQ.A BotLatency SU(4) 16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %119:fr64 = MULSDrm %119:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %119
  UpdateRegP: SU(3) %119:fr64 = MULSDrm %119:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @11c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %119:fr64 = MOVSDrm_alt %stack.8.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @15c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %117:fr64 = MULSDrm %117:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %117
  UpdateRegP: SU(1) %117:fr64 = MULSDrm %117:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @9c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %117:fr64 = CVTSI2SDrm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
Bottom Pressure:

  Ready @13c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %117:fr64 = CVTSI2SDrm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
SU(1):   %117:fr64 = MULSDrm %117:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(2):   %119:fr64 = MOVSDrm_alt %stack.8.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3)
SU(3):   %119:fr64 = MULSDrm %119:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(4):   %125:fr64 = MOVSDrm_alt %stack.6.navg, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.navg)
SU(5):   %122:fr64 = COPY %125:fr64
SU(6):   %122:fr64 = MULSDrr %122:fr64(tied-def 0), %122:fr64
SU(7):   %122:fr64 = MULSDrm %122:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
SU(8):   %122:fr64 = ADDSDrr %122:fr64(tied-def 0), %119:fr64
SU(9):   %125:fr64 = MULSDrm %125:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
SU(10):   %125:fr64 = ADDSDrr %125:fr64(tied-def 0), %122:fr64
SU(11):   %125:fr64 = MULSDrr %125:fr64(tied-def 0), %117:fr64
SU(12):   %125:fr64 = DIVSDrm %125:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
SU(13):   MOVSDmr %stack.7.mflops, 1, $noreg, 0, $noreg, %125:fr64 :: (store 8 into %ir.mflops)

********** MI Scheduling **********
main:%bb.29 if.end81
  From: %137:gr64 = LEA64r $rip, 1, $noreg, @bt__str_36__none__, $noreg
    To: CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 29
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=4
GR16=20
Live In: %135 %134 %133 %132 %131 %130 %128 %136 
Live Out: %135 %134 %133 %132 %131 %130 %128 %136 
Live Thru: FR32=2
FR32X=2
GR16=12
  LiveReg: %135
  UpdateRegP: SU(28) $xmm1 = COPY %135:fr64
              to FR32 -1    FR32X -1
  LiveReg: %134
  UpdateRegP: SU(27) $xmm0 = COPY %134:fr64
              to FR32 -1    FR32X -1
  LiveReg: %133
  UpdateRegP: SU(26) $r9d = COPY %133:gr32
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  LiveReg: %132
  UpdateRegP: SU(25) $r8d = COPY %132:gr32
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  LiveReg: %131
  UpdateRegP: SU(24) $ecx = COPY %131:gr32
              to GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  LiveReg: %130
  UpdateRegP: SU(23) $edx = COPY %130:gr32
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  LiveReg: %128
  UpdateRegP: SU(22) $esi = COPY %128:gr32
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  LiveReg: %136
  UpdateRegP: SU(18) MOV32mr $rsp, 1, $noreg, 8, $noreg, %136:gr32 :: (store 4 into stack + 8)
              to 
Top Pressure:
FR32=2
FR32X=2
GR16=12
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=4
GR16=20
Excess PSets: 
SU(0):   %137:gr64 = LEA64r $rip, 1, $noreg, @bt__str_36__none__, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%137
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV64mr $rsp, 1, $noreg, 80, $noreg, %137:gr64 :: (store 8 into stack + 80)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%137
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %139:gr64 = LEA64r $rip, 1, $noreg, @bt__str_35__O3__mcmod, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%139
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr $rsp, 1, $noreg, 72, $noreg, %139:gr64 :: (store 8 into stack + 72)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%139
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %140:gr64 = LEA64r $rip, 1, $noreg, @bt__str_34__g__Wall__, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%140
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr $rsp, 1, $noreg, 64, $noreg, %140:gr64 :: (store 8 into stack + 64)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%140
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %141:gr64 = LEA64r $rip, 1, $noreg, @bt__str_33__I___commo, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%141
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr $rsp, 1, $noreg, 56, $noreg, %141:gr64 :: (store 8 into stack + 56)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%141
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %142:gr64 = LEA64r $rip, 1, $noreg, @bt__str_32__lm_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%142
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %142:gr64 :: (store 8 into stack + 48)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%142
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %143:gr64 = LEA64r $rip, 1, $noreg, @bt__str_31___CC__, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%143
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %143:gr64 :: (store 8 into stack + 40)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%143
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %144:gr64 = LEA64r $rip, 1, $noreg, @bt__str_30_gcc_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%144
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %144:gr64 :: (store 8 into stack + 32)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%144
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %145:gr64 = LEA64r $rip, 1, $noreg, @bt__str_29_03_Nov_201, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%145
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %145:gr64 :: (store 8 into stack + 24)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%145
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %146:gr64 = LEA64r $rip, 1, $noreg, @bt__str_28_3_3_1_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%146
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(17):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %146:gr64 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%146
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %136:gr32 :: (store 4 into stack + 8)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %147:gr64 = LEA64r $rip, 1, $noreg, @bt__str_27___________, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%147
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(20):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %147:gr64 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%147
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_26_BT_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(22):   $esi = COPY %128:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  Single Issue       : false;
SU(23):   $edx = COPY %130:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Single Issue       : false;
SU(24):   $ecx = COPY %131:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  Single Issue       : false;
SU(25):   $r8d = COPY %132:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(26):   $r9d = COPY %133:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(27):   $xmm0 = COPY %134:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(28):   $xmm1 = COPY %135:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=0 Artificial
    SU(22): Ord  Latency=0 Artificial
    SU(21): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 28 27 26 25 24 23 22 21 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(28) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(28) $xmm1 = COPY %135:fr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=3
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=3
GR16=20
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 27 26 25 24 23 22 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(27) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(27) $xmm0 = COPY %134:fr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=20
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 26 25 24 23 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) $r9d = COPY %133:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
FR32X=2
GR16=19
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 25 24 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) $r8d = COPY %132:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
FR32X=2
GR16=18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 24 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) $ecx = COPY %131:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
FR32X=2
GR16=16
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) $edx = COPY %130:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=2
GR16=14
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(22) $esi = COPY %128:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
FR32X=2
GR16=13
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) $rdi = LEA64r $rip, 1, $noreg, @bt__str_26_BT_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
  BotQ.A BotLatency SU(21) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) MOV64mr $rsp, 1, $noreg, 0, $noreg, %147:gr64 :: (store 8 into stack)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %147
  UpdateRegP: SU(20) MOV64mr $rsp, 1, $noreg, 0, $noreg, %147:gr64 :: (store 8 into stack)
              to 
  Ready @0c
  BotQ.A TopLatency SU(20) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 
  Cand SU(1) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %147:gr64 = LEA64r $rip, 1, $noreg, @bt__str_27___________, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 
  Cand SU(1) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) MOV32mr $rsp, 1, $noreg, 8, $noreg, %136:gr32 :: (store 4 into stack + 8)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 17 15 13 11 9 7 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) MOV64mr $rsp, 1, $noreg, 16, $noreg, %146:gr64 :: (store 8 into stack + 16)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %146
  UpdateRegP: SU(17) MOV64mr $rsp, 1, $noreg, 16, $noreg, %146:gr64 :: (store 8 into stack + 16)
              to 
  Ready @1c
  BotQ.A TopLatency SU(17) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 15 13 11 9 7 16 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %146:gr64 = LEA64r $rip, 1, $noreg, @bt__str_28_3_3_1_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 15 13 11 9 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV64mr $rsp, 1, $noreg, 24, $noreg, %145:gr64 :: (store 8 into stack + 24)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %145
  UpdateRegP: SU(15) MOV64mr $rsp, 1, $noreg, 24, $noreg, %145:gr64 :: (store 8 into stack + 24)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 13 11 9 14 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %145:gr64 = LEA64r $rip, 1, $noreg, @bt__str_29_03_Nov_201, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 13 11 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mr $rsp, 1, $noreg, 32, $noreg, %144:gr64 :: (store 8 into stack + 32)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %144
  UpdateRegP: SU(13) MOV64mr $rsp, 1, $noreg, 32, $noreg, %144:gr64 :: (store 8 into stack + 32)
              to 
  Ready @2c
  BotQ.A TopLatency SU(13) 1c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 11 12 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %144:gr64 = LEA64r $rip, 1, $noreg, @bt__str_30_gcc_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 11 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr $rsp, 1, $noreg, 40, $noreg, %143:gr64 :: (store 8 into stack + 40)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %143
  UpdateRegP: SU(11) MOV64mr $rsp, 1, $noreg, 40, $noreg, %143:gr64 :: (store 8 into stack + 40)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 10 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %143:gr64 = LEA64r $rip, 1, $noreg, @bt__str_31___CC__, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @3c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mr $rsp, 1, $noreg, 48, $noreg, %142:gr64 :: (store 8 into stack + 48)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %142
  UpdateRegP: SU(9) MOV64mr $rsp, 1, $noreg, 48, $noreg, %142:gr64 :: (store 8 into stack + 48)
              to 
  Ready @3c
  BotQ.A TopLatency SU(9) 1c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 8 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %142:gr64 = LEA64r $rip, 1, $noreg, @bt__str_32__lm_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @4c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr $rsp, 1, $noreg, 56, $noreg, %141:gr64 :: (store 8 into stack + 56)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %141
  UpdateRegP: SU(7) MOV64mr $rsp, 1, $noreg, 56, $noreg, %141:gr64 :: (store 8 into stack + 56)
              to 
  Ready @3c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 6 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %141:gr64 = LEA64r $rip, 1, $noreg, @bt__str_33__I___commo, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @4c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr $rsp, 1, $noreg, 64, $noreg, %140:gr64 :: (store 8 into stack + 64)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %140
  UpdateRegP: SU(5) MOV64mr $rsp, 1, $noreg, 64, $noreg, %140:gr64 :: (store 8 into stack + 64)
              to 
  Ready @4c
  BotQ.A TopLatency SU(5) 1c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %140:gr64 = LEA64r $rip, 1, $noreg, @bt__str_34__g__Wall__, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @5c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr $rsp, 1, $noreg, 72, $noreg, %139:gr64 :: (store 8 into stack + 72)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %139
  UpdateRegP: SU(3) MOV64mr $rsp, 1, $noreg, 72, $noreg, %139:gr64 :: (store 8 into stack + 72)
              to 
  Ready @4c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %139:gr64 = LEA64r $rip, 1, $noreg, @bt__str_35__O3__mcmod, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @5c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $rsp, 1, $noreg, 80, $noreg, %137:gr64 :: (store 8 into stack + 80)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %137
  UpdateRegP: SU(1) MOV64mr $rsp, 1, $noreg, 80, $noreg, %137:gr64 :: (store 8 into stack + 80)
              to 
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %137:gr64 = LEA64r $rip, 1, $noreg, @bt__str_36__none__, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @6c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %137:gr64 = LEA64r $rip, 1, $noreg, @bt__str_36__none__, $noreg
SU(1):   MOV64mr $rsp, 1, $noreg, 80, $noreg, %137:gr64 :: (store 8 into stack + 80)
SU(2):   %139:gr64 = LEA64r $rip, 1, $noreg, @bt__str_35__O3__mcmod, $noreg
SU(3):   MOV64mr $rsp, 1, $noreg, 72, $noreg, %139:gr64 :: (store 8 into stack + 72)
SU(4):   %140:gr64 = LEA64r $rip, 1, $noreg, @bt__str_34__g__Wall__, $noreg
SU(5):   MOV64mr $rsp, 1, $noreg, 64, $noreg, %140:gr64 :: (store 8 into stack + 64)
SU(6):   %141:gr64 = LEA64r $rip, 1, $noreg, @bt__str_33__I___commo, $noreg
SU(7):   MOV64mr $rsp, 1, $noreg, 56, $noreg, %141:gr64 :: (store 8 into stack + 56)
SU(8):   %142:gr64 = LEA64r $rip, 1, $noreg, @bt__str_32__lm_, $noreg
SU(9):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %142:gr64 :: (store 8 into stack + 48)
SU(10):   %143:gr64 = LEA64r $rip, 1, $noreg, @bt__str_31___CC__, $noreg
SU(11):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %143:gr64 :: (store 8 into stack + 40)
SU(12):   %144:gr64 = LEA64r $rip, 1, $noreg, @bt__str_30_gcc_, $noreg
SU(13):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %144:gr64 :: (store 8 into stack + 32)
SU(14):   %145:gr64 = LEA64r $rip, 1, $noreg, @bt__str_29_03_Nov_201, $noreg
SU(15):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %145:gr64 :: (store 8 into stack + 24)
SU(16):   %146:gr64 = LEA64r $rip, 1, $noreg, @bt__str_28_3_3_1_, $noreg
SU(17):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %146:gr64 :: (store 8 into stack + 16)
SU(18):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %136:gr32 :: (store 4 into stack + 8)
SU(19):   %147:gr64 = LEA64r $rip, 1, $noreg, @bt__str_27___________, $noreg
SU(20):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %147:gr64 :: (store 8 into stack)
SU(21):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_26_BT_, $noreg
SU(22):   $esi = COPY %128:gr32
SU(23):   $edx = COPY %130:gr32
SU(24):   $ecx = COPY %131:gr32
SU(25):   $r8d = COPY %132:gr32
SU(26):   $r9d = COPY %133:gr32
SU(27):   $xmm0 = COPY %134:fr64
SU(28):   $xmm1 = COPY %135:fr64

********** MI Scheduling **********
main:%bb.29 if.end81
  From: %128:gr32 = MOVSX32rm8 %stack.13.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
    To: ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=12
Live In: 
Live Out: %136 %135 %134 %133 %132 %131 %130 %128 
Live Thru: 
  LiveReg: %136
  LiveReg: %135
  LiveReg: %134
  LiveReg: %133
  LiveReg: %132
  LiveReg: %131
  LiveReg: %130
  LiveReg: %128
Top Pressure:

Bottom Pressure:
FR32=2
FR32X=2
GR16=12
Excess PSets: 
SU(0):   %128:gr32 = MOVSX32rm8 %stack.13.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %130:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %131:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %132:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %133:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %134:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(6):   %135:fr64 = MOVSDrm_alt %stack.7.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(7):   %136:gr32 = MOV32rm %stack.12.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 2 1 0 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %136:gr32 = MOV32rm %stack.12.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  Ready @3c
  BotQ.A BotLatency SU(7) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %135:fr64 = MOVSDrm_alt %stack.7.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 5 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %134:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
GR16=10
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 4 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %133:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
Bottom Pressure:
GR16=8
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %132:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:
GR16=6
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %131:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
Bottom Pressure:
GR16=4
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %130:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
Bottom Pressure:
GR16=2
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %128:gr32 = MOVSX32rm8 %stack.13.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
Bottom Pressure:

  Ready @3c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %128:gr32 = MOVSX32rm8 %stack.13.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
SU(1):   %130:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(2):   %131:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(3):   %132:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(4):   %133:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
SU(5):   %134:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
SU(6):   %135:fr64 = MOVSDrm_alt %stack.7.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
SU(7):   %136:gr32 = MOV32rm %stack.12.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)

********** MI Scheduling **********
main:%bb.30 if.then82
  From: %149:gr32 = MOV32ri 1
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %149:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%149
  Single Issue       : false;
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %149:gr32 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%149
  Single Issue       : false;
SU(2):   %214:gr64 = LEA64r %stack.11.trecs, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %214:gr64 = LEA64r %stack.11.trecs, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %149:gr32 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %149:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %149:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %149:gr32 :: (store 4 into %ir.i)
SU(2):   %214:gr64 = LEA64r %stack.11.trecs, 1, $noreg, 0, $noreg

********** MI Scheduling **********
main:%bb.32 for.body86
  From: %212:fr64 = COPY killed $xmm0
    To: JMP_1 %bb.31
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %212:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%212
  Single Issue       : false;
SU(1):   %213:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%213
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %214:gr64, 8, %213:gr64_nosp, 0, $noreg, %212:fr64 :: (store 8 into %ir.arrayidx88)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%213
    SU(0): Data Latency=0 Reg=%212
  Single Issue       : false;
SU(3):   INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.31
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %214:gr64, 8, %213:gr64_nosp, 0, $noreg, %212:fr64 :: (store 8 into %ir.arrayidx88)
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) %213:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %212:fr64 = COPY killed $xmm0
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %212:fr64 = COPY killed $xmm0
SU(1):   %213:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(2):   MOVSDmr %214:gr64, 8, %213:gr64_nosp, 0, $noreg, %212:fr64 :: (store 8 into %ir.arrayidx88)
SU(3):   INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
main:%bb.33 for.end91
  From: %152:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
    To: JCC_1 %bb.35, 5, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %152:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%152
  Single Issue       : false;
SU(1):   %153:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%153
  Single Issue       : false;
SU(2):   UCOMISDrr %152:fr64, %153:fr64, implicit-def $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%153
    SU(0): Data Latency=4 Reg=%152
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.35, 5, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) UCOMISDrr %152:fr64, %153:fr64, implicit-def $eflags
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %153:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %152:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %152:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
SU(1):   %153:fr64 = FsFLD0SD
SU(2):   UCOMISDrr %152:fr64, %153:fr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.34 if.then94
  From: %154:gr64 = MOV64ri 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %154:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%154
  Single Issue       : false;
SU(1):   MOV64mr %stack.9.tmax, 1, $noreg, 0, $noreg, %154:gr64 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%154
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.9.tmax, 1, $noreg, 0, $noreg, %154:gr64 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %154:gr64 = MOV64ri 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %154:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr %stack.9.tmax, 1, $noreg, 0, $noreg, %154:gr64 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.35 if.end95
  From: %159:gr32 = MOV32ri 1
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %159:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%159
  Single Issue       : false;
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %159:gr32 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%159
  Single Issue       : false;
SU(2):   %163:gr64 = LEA64r %stack.14.t_names, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %165:gr64 = LEA64r %stack.11.trecs, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %250:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %250:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %165:gr64 = LEA64r %stack.11.trecs, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %163:gr64 = LEA64r %stack.14.t_names, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %159:gr32 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %159:gr32 = MOV32ri 1
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %159:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %159:gr32 :: (store 4 into %ir.i)
SU(2):   %163:gr64 = LEA64r %stack.14.t_names, 1, $noreg, 0, $noreg
SU(3):   %165:gr64 = LEA64r %stack.11.trecs, 1, $noreg, 0, $noreg
SU(4):   %250:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
main:%bb.35 if.end95
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_37___SECTION_, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_37___SECTION_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_37___SECTION_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_37___SECTION_, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.37 for.body100
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_38_____8s__9_, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_38_____8s__9_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %164:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %166:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %168:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %168:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm0 = COPY %166:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rsi = COPY %164:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_38_____8s__9_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_38_____8s__9_, $noreg
SU(1):   $rsi = COPY %164:gr64
SU(2):   $xmm0 = COPY %166:fr64
SU(3):   $xmm1 = COPY %168:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.37 for.body100
  From: %162:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %162:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%162
    SU(1): Data Latency=4 Reg=%162
  Single Issue       : false;
SU(1):   %164:gr64 = MOV64rm %163:gr64, 8, %162:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx102)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%162
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %166:fr64 = MOVSDrm_alt %165:gr64, 8, %162:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%162
  Successors:
    SU(3): Data Latency=4 Reg=%166
  Single Issue       : false;
SU(3):   %168:fr64 = COPY %166:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%166
  Successors:
    SU(4): Data Latency=0 Reg=%168
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %168:fr64 = MULSDrr %168:fr64(tied-def 0), %250:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%168
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%168
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %168:fr64 = DIVSDrm %168:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%168
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %168:fr64 = DIVSDrm %168:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %168:fr64 = MULSDrr %168:fr64(tied-def 0), %250:fr64
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %168:fr64 = COPY %166:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %166:fr64 = MOVSDrm_alt %165:gr64, 8, %162:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %164:gr64 = MOV64rm %163:gr64, 8, %162:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx102)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %162:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %162:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   %164:gr64 = MOV64rm %163:gr64, 8, %162:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx102)
SU(2):   %166:fr64 = MOVSDrm_alt %165:gr64, 8, %162:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
SU(3):   %168:fr64 = COPY %166:fr64
SU(4):   %168:fr64 = MULSDrr %168:fr64(tied-def 0), %250:fr64
SU(5):   %168:fr64 = DIVSDrm %168:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.38 if.then112
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_41_rest_rhs_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %206:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %208:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %208:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %206:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @bt__str_41_rest_rhs_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_41_rest_rhs_, $noreg
SU(2):   $xmm0 = COPY %206:fr64
SU(3):   $xmm1 = COPY %208:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.38 if.then112
  From: %206:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx121)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %206:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx121)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(1): Data Latency=4 Reg=%206
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %206:fr64 = SUBSDrm %206:fr64(tied-def 0), %stack.10.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%206
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%206
    SU(2): Data Latency=4 Reg=%206
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %206:fr64 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%206
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %208:fr64 = COPY %206:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%206
  Successors:
    SU(4): Data Latency=0 Reg=%208
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %208:fr64 = MULSDrr %208:fr64(tied-def 0), %250:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%208
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%208
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %208:fr64 = DIVSDrm %208:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%208
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %208:fr64 = DIVSDrm %208:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %208:fr64 = MULSDrr %208:fr64(tied-def 0), %250:fr64
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %208:fr64 = COPY %206:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %206:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %206:fr64 = SUBSDrm %206:fr64(tied-def 0), %stack.10.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %206:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx121)
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %206:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx121)
SU(1):   %206:fr64 = SUBSDrm %206:fr64(tied-def 0), %stack.10.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
SU(2):   MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %206:fr64 :: (store 8 into %ir.t)
SU(3):   %208:fr64 = COPY %206:fr64
SU(4):   %208:fr64 = MULSDrr %208:fr64(tied-def 0), %250:fr64
SU(5):   %208:fr64 = DIVSDrm %208:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.38 if.then112
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_40_sub_rhs_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %197:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %200:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %200:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %197:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @bt__str_40_sub_rhs_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_40_sub_rhs_, $noreg
SU(2):   $xmm0 = COPY %197:fr64
SU(3):   $xmm1 = COPY %200:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.38 if.then112
  From: %197:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx113, align 16)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %197:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx113, align 16)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%197
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %197:fr64 = ADDSDrm %197:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx114)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%197
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%197
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %197:fr64 = ADDSDrm %197:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%197
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%197
    SU(3): Data Latency=4 Reg=%197
  Single Issue       : false;
SU(3):   MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %197:fr64 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%197
  Single Issue       : false;
SU(4):   %200:fr64 = COPY %197:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%197
  Successors:
    SU(5): Data Latency=0 Reg=%200
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %200:fr64 = MULSDrr %200:fr64(tied-def 0), %250:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(4): Data Latency=0 Reg=%200
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%200
    SU(6): Out  Latency=0
  Single Issue       : false;
SU(6):   %200:fr64 = DIVSDrm %200:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%200
    SU(5): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %200:fr64 = DIVSDrm %200:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(6) 13c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %200:fr64 = MULSDrr %200:fr64(tied-def 0), %250:fr64
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %200:fr64 = COPY %197:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %197:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %197:fr64 = ADDSDrm %197:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %197:fr64 = ADDSDrm %197:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx114)
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %197:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx113, align 16)
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %197:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx113, align 16)
SU(1):   %197:fr64 = ADDSDrm %197:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx114)
SU(2):   %197:fr64 = ADDSDrm %197:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
SU(3):   MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %197:fr64 :: (store 8 into %ir.t)
SU(4):   %200:fr64 = COPY %197:fr64
SU(5):   %200:fr64 = MULSDrr %200:fr64(tied-def 0), %250:fr64
SU(6):   %200:fr64 = DIVSDrm %200:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.40 if.then129
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_42_sub_zsol_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %188:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %190:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %190:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %188:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @bt__str_42_sub_zsol_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_42_sub_zsol_, $noreg
SU(2):   $xmm0 = COPY %188:fr64
SU(3):   $xmm1 = COPY %190:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.40 if.then129
  From: %188:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 64, $noreg :: (dereferenceable load 8 from %ir.arrayidx130, align 16)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %188:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 64, $noreg :: (dereferenceable load 8 from %ir.arrayidx130, align 16)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%188
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %188:fr64 = SUBSDrm %188:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx131)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%188
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%188
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %188:fr64 = SUBSDrm %188:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%188
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%188
    SU(3): Data Latency=4 Reg=%188
  Single Issue       : false;
SU(3):   MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %188:fr64 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%188
  Single Issue       : false;
SU(4):   %190:fr64 = COPY %188:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%188
  Successors:
    SU(5): Data Latency=0 Reg=%190
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %190:fr64 = MULSDrr %190:fr64(tied-def 0), %250:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(4): Data Latency=0 Reg=%190
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%190
    SU(6): Out  Latency=0
  Single Issue       : false;
SU(6):   %190:fr64 = DIVSDrm %190:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%190
    SU(5): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %190:fr64 = DIVSDrm %190:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(6) 13c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %190:fr64 = MULSDrr %190:fr64(tied-def 0), %250:fr64
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %190:fr64 = COPY %188:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %188:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %188:fr64 = SUBSDrm %188:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %188:fr64 = SUBSDrm %188:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx131)
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %188:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 64, $noreg :: (dereferenceable load 8 from %ir.arrayidx130, align 16)
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %188:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 64, $noreg :: (dereferenceable load 8 from %ir.arrayidx130, align 16)
SU(1):   %188:fr64 = SUBSDrm %188:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx131)
SU(2):   %188:fr64 = SUBSDrm %188:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
SU(3):   MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %188:fr64 :: (store 8 into %ir.t)
SU(4):   %190:fr64 = COPY %188:fr64
SU(5):   %190:fr64 = MULSDrr %190:fr64(tied-def 0), %250:fr64
SU(6):   %190:fr64 = DIVSDrm %190:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.42 if.then141
  From: $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_43_redist_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %179:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %181:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %181:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %179:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @bt__str_43_redist_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @bt__str_43_redist_, $noreg
SU(2):   $xmm0 = COPY %179:fr64
SU(3):   $xmm1 = COPY %181:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.42 if.then141
  From: %179:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx142)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %179:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx142)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(1): Data Latency=4 Reg=%179
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %179:fr64 = ADDSDrm %179:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx143, align 16)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%179
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%179
    SU(2): Data Latency=4 Reg=%179
  Single Issue       : false;
SU(2):   MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %179:fr64 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%179
  Single Issue       : false;
SU(3):   %181:fr64 = COPY %179:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%179
  Successors:
    SU(4): Data Latency=0 Reg=%181
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %181:fr64 = MULSDrr %181:fr64(tied-def 0), %250:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%181
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%181
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %181:fr64 = DIVSDrm %181:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%181
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %181:fr64 = DIVSDrm %181:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %181:fr64 = MULSDrr %181:fr64(tied-def 0), %250:fr64
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %181:fr64 = COPY %179:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %179:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %179:fr64 = ADDSDrm %179:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx143, align 16)
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %179:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx142)
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   %179:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx142)
SU(1):   %179:fr64 = ADDSDrm %179:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx143, align 16)
SU(2):   MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %179:fr64 :: (store 8 into %ir.t)
SU(3):   %181:fr64 = COPY %179:fr64
SU(4):   %181:fr64 = MULSDrr %181:fr64(tied-def 0), %250:fr64
SU(5):   %181:fr64 = DIVSDrm %181:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.45 return
  From: %249:gr32 = MOV32rm %stack.0.retval, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.retval)
    To: RET 0, killed $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %249:gr32 = MOV32rm %stack.0.retval, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.retval)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%249
  Single Issue       : false;
SU(1):   $eax = COPY %249:gr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%249
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   RET 0, killed $eax
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $eax = COPY %249:gr32
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %249:gr32 = MOV32rm %stack.0.retval, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.retval)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %249:gr32 = MOV32rm %stack.0.retval, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.retval)
SU(1):   $eax = COPY %249:gr32

********** INTERVALS **********
DIL [0B,32r:0)[144r,176r:32)[768r,784r:31)[992r,1024r:30)[1152r,1184r:29)[1424r,1456r:27)[1640r,1664r:26)[1824r,1840r:25)[2136r,2160r:24)[2320r,2336r:23)[2696r,2720r:22)[2864r,2880r:21)[3056r,3088r:28)[3424r,3504r:20)[3664r,3728r:19)[3840r,3872r:18)[4256r,4336r:9)[4448r,4480r:8)[4896r,4912r:1)[5664r,5680r:2)[5840r,5856r:7)[6528r,6576r:10)[6880r,6896r:6)[6992r,7008r:5)[7224r,7232r:4)[8672r,8800r:17)[9104r,9120r:3)[9520r,9552r:16)[10032r,10112r:15)[10432r,10512r:12)[10736r,10816r:11)[11168r,11248r:13)[11568r,11648r:14)  0@0B-phi 1@4896r 2@5664r 3@9104r 4@7224r 5@6992r 6@6880r 7@5840r 8@4448r 9@4256r 10@6528r 11@10736r 12@10432r 13@11168r 14@11568r 15@10032r 16@9520r 17@8672r 18@3840r 19@3664r 20@3424r 21@2864r 22@2696r 23@2320r 24@2136r 25@1824r 26@1640r 27@1424r 28@3056r 29@1152r 30@992r 31@768r 32@144r
DIH [0B,32r:0)[144r,176r:32)[768r,784r:31)[992r,1024r:30)[1152r,1184r:29)[1424r,1456r:27)[1640r,1664r:26)[1824r,1840r:25)[2136r,2160r:24)[2320r,2336r:23)[2696r,2720r:22)[2864r,2880r:21)[3056r,3088r:28)[3424r,3504r:20)[3664r,3728r:19)[3840r,3872r:18)[4256r,4336r:9)[4448r,4480r:8)[4896r,4912r:1)[5664r,5680r:2)[5840r,5856r:7)[6528r,6576r:10)[6880r,6896r:6)[6992r,7008r:5)[7224r,7232r:4)[8672r,8800r:17)[9104r,9120r:3)[9520r,9552r:16)[10032r,10112r:15)[10432r,10512r:12)[10736r,10816r:11)[11168r,11248r:13)[11568r,11648r:14)  0@0B-phi 1@4896r 2@5664r 3@9104r 4@7224r 5@6992r 6@6880r 7@5840r 8@4448r 9@4256r 10@6528r 11@10736r 12@10432r 13@11168r 14@11568r 15@10032r 16@9520r 17@8672r 18@3840r 19@3664r 20@3424r 21@2864r 22@2696r 23@2320r 24@2136r 25@1824r 26@1640r 27@1424r 28@3056r 29@1152r 30@992r 31@768r 32@144r
HDI [0B,32r:0)[144r,176r:32)[768r,784r:31)[992r,1024r:30)[1152r,1184r:29)[1424r,1456r:27)[1640r,1664r:26)[1824r,1840r:25)[2136r,2160r:24)[2320r,2336r:23)[2696r,2720r:22)[2864r,2880r:21)[3056r,3088r:28)[3424r,3504r:20)[3664r,3728r:19)[3840r,3872r:18)[4256r,4336r:9)[4448r,4480r:8)[4896r,4912r:1)[5664r,5680r:2)[5840r,5856r:7)[6528r,6576r:10)[6880r,6896r:6)[6992r,7008r:5)[7224r,7232r:4)[8672r,8800r:17)[9104r,9120r:3)[9520r,9552r:16)[10032r,10112r:15)[10432r,10512r:12)[10736r,10816r:11)[11168r,11248r:13)[11568r,11648r:14)  0@0B-phi 1@4896r 2@5664r 3@9104r 4@7224r 5@6992r 6@6880r 7@5840r 8@4448r 9@4256r 10@6528r 11@10736r 12@10432r 13@11168r 14@11568r 15@10032r 16@9520r 17@8672r 18@3840r 19@3664r 20@3424r 21@2864r 22@2696r 23@2320r 24@2136r 25@1824r 26@1640r 27@1424r 28@3056r 29@1152r 30@992r 31@768r 32@144r
SIL [0B,16r:0)[160r,176r:16)[1168r,1184r:15)[1616r,1664r:14)[2112r,2160r:13)[2640r,2720r:12)[3440r,3504r:5)[3680r,3728r:4)[4272r,4336r:1)[6544r,6576r:2)[7200r,7232r:11)[8688r,8800r:3)[10048r,10112r:10)[10448r,10512r:7)[10752r,10816r:6)[11184r,11248r:8)[11584r,11648r:9)  0@0B-phi 1@4272r 2@6544r 3@8688r 4@3680r 5@3440r 6@10752r 7@10448r 8@11184r 9@11584r 10@10048r 11@7200r 12@2640r 13@2112r 14@1616r 15@1168r 16@160r
SIH [0B,16r:0)[160r,176r:16)[1168r,1184r:15)[1616r,1664r:14)[2112r,2160r:13)[2640r,2720r:12)[3440r,3504r:5)[3680r,3728r:4)[4272r,4336r:1)[6544r,6576r:2)[7200r,7232r:11)[8688r,8800r:3)[10048r,10112r:10)[10448r,10512r:7)[10752r,10816r:6)[11184r,11248r:8)[11584r,11648r:9)  0@0B-phi 1@4272r 2@6544r 3@8688r 4@3680r 5@3440r 6@10752r 7@10448r 8@11184r 9@11584r 10@10048r 11@7200r 12@2640r 13@2112r 14@1616r 15@1168r 16@160r
HSI [0B,16r:0)[160r,176r:16)[1168r,1184r:15)[1616r,1664r:14)[2112r,2160r:13)[2640r,2720r:12)[3440r,3504r:5)[3680r,3728r:4)[4272r,4336r:1)[6544r,6576r:2)[7200r,7232r:11)[8688r,8800r:3)[10048r,10112r:10)[10448r,10512r:7)[10752r,10816r:6)[11184r,11248r:8)[11584r,11648r:9)  0@0B-phi 1@4272r 2@6544r 3@8688r 4@3680r 5@3440r 6@10752r 7@10448r 8@11184r 9@11584r 10@10048r 11@7200r 12@2640r 13@2112r 14@1616r 15@1168r 16@160r
SPL [96r,96d:189)[176r,176d:188)[192r,192d:187)[208r,208d:186)[240r,240d:185)[752r,752d:184)[784r,784d:183)[800r,800d:182)[816r,816d:181)[848r,848d:180)[928r,928d:179)[1024r,1024d:178)[1040r,1040d:177)[1056r,1056d:176)[1088r,1088d:175)[1104r,1104d:174)[1184r,1184d:173)[1200r,1200d:172)[1216r,1216d:171)[1248r,1248d:170)[1360r,1360d:164)[1456r,1456d:163)[1472r,1472d:162)[1488r,1488d:161)[1520r,1520d:160)[1552r,1552d:159)[1664r,1664d:158)[1680r,1680d:157)[1696r,1696d:156)[1728r,1728d:155)[1808r,1808d:154)[1840r,1840d:153)[1856r,1856d:152)[1872r,1872d:151)[1904r,1904d:150)[2016r,2016d:149)[2160r,2160d:148)[2176r,2176d:147)[2192r,2192d:146)[2224r,2224d:145)[2304r,2304d:144)[2336r,2336d:143)[2352r,2352d:142)[2368r,2368d:141)[2400r,2400d:140)[2512r,2512d:139)[2720r,2720d:138)[2736r,2736d:137)[2752r,2752d:136)[2784r,2784d:135)[2848r,2848d:134)[2880r,2880d:133)[2896r,2896d:132)[2912r,2912d:131)[2944r,2944d:130)[2992r,2992d:169)[3088r,3088d:168)[3104r,3104d:167)[3120r,3120d:166)[3152r,3152d:165)[3360r,3360d:129)[3504r,3504d:128)[3520r,3520d:127)[3536r,3536d:126)[3568r,3568d:125)[3616r,3616d:124)[3728r,3728d:123)[3744r,3744d:122)[3760r,3760d:121)[3792r,3792d:120)[3808r,3808d:119)[3872r,3872d:118)[3888r,3888d:117)[3904r,3904d:116)[3936r,3936d:115)[4192r,4192d:9)[4336r,4336d:8)[4352r,4352d:7)[4368r,4368d:6)[4400r,4400d:5)[4416r,4416d:4)[4480r,4480d:3)[4496r,4496d:2)[4512r,4512d:1)[4544r,4544d:0)[4608r,4608d:114)[4672r,4672d:113)[4688r,4688d:112)[4704r,4704d:111)[4736r,4736d:110)[4880r,4880d:14)[4912r,4912d:13)[4928r,4928d:12)[4944r,4944d:11)[4976r,4976d:10)[5040r,5040d:109)[5104r,5104d:108)[5120r,5120d:107)[5136r,5136d:106)[5168r,5168d:105)[5184r,5184d:104)[5216r,5216d:103)[5232r,5232d:102)[5248r,5248d:101)[5280r,5280d:100)[5296r,5296d:99)[5328r,5328d:98)[5344r,5344d:97)[5360r,5360d:96)[5392r,5392d:95)[5408r,5408d:94)[5440r,5440d:93)[5456r,5456d:92)[5472r,5472d:91)[5504r,5504d:90)[5648r,5648d:19)[5680r,5680d:18)[5696r,5696d:17)[5712r,5712d:16)[5744r,5744d:15)[5808r,5808d:89)[5856r,5856d:88)[5872r,5872d:87)[5888r,5888d:86)[5920r,5920d:85)[6496r,6496d:29)[6576r,6576d:28)[6592r,6592d:27)[6608r,6608d:26)[6640r,6640d:25)[6672r,6672d:24)[6720r,6720d:23)[6736r,6736d:22)[6752r,6752d:21)[6784r,6784d:20)[6848r,6848d:84)[6896r,6896d:83)[6912r,6912d:82)[6928r,6928d:81)[6960r,6960d:80)[6976r,6976d:79)[7008r,7008d:78)[7024r,7024d:77)[7040r,7040d:76)[7072r,7072d:75)[7136r,7136d:74)[7232r,7232d:73)[7248r,7248d:72)[7264r,7264d:71)[7296r,7296d:70)[8288r,8288d:69)[8800r,8800d:68)[8816r,8816d:67)[8832r,8832d:66)[8864r,8864d:65)[9088r,9088d:34)[9120r,9120d:33)[9136r,9136d:32)[9152r,9152d:31)[9184r,9184d:30)[9456r,9456d:64)[9552r,9552d:63)[9568r,9568d:62)[9584r,9584d:61)[9616r,9616d:60)[10016r,10016d:59)[10112r,10112d:58)[10128r,10128d:57)[10144r,10144d:56)[10176r,10176d:55)[10416r,10416d:44)[10512r,10512d:43)[10528r,10528d:42)[10544r,10544d:41)[10576r,10576d:40)[10720r,10720d:39)[10816r,10816d:38)[10832r,10832d:37)[10848r,10848d:36)[10880r,10880d:35)[11152r,11152d:49)[11248r,11248d:48)[11264r,11264d:47)[11280r,11280d:46)[11312r,11312d:45)[11552r,11552d:54)[11648r,11648d:53)[11664r,11664d:52)[11680r,11680d:51)[11712r,11712d:50)  0@4544r 1@4512r 2@4496r 3@4480r 4@4416r 5@4400r 6@4368r 7@4352r 8@4336r 9@4192r 10@4976r 11@4944r 12@4928r 13@4912r 14@4880r 15@5744r 16@5712r 17@5696r 18@5680r 19@5648r 20@6784r 21@6752r 22@6736r 23@6720r 24@6672r 25@6640r 26@6608r 27@6592r 28@6576r 29@6496r 30@9184r 31@9152r 32@9136r 33@9120r 34@9088r 35@10880r 36@10848r 37@10832r 38@10816r 39@10720r 40@10576r 41@10544r 42@10528r 43@10512r 44@10416r 45@11312r 46@11280r 47@11264r 48@11248r 49@11152r 50@11712r 51@11680r 52@11664r 53@11648r 54@11552r 55@10176r 56@10144r 57@10128r 58@10112r 59@10016r 60@9616r 61@9584r 62@9568r 63@9552r 64@9456r 65@8864r 66@8832r 67@8816r 68@8800r 69@8288r 70@7296r 71@7264r 72@7248r 73@7232r 74@7136r 75@7072r 76@7040r 77@7024r 78@7008r 79@6976r 80@6960r 81@6928r 82@6912r 83@6896r 84@6848r 85@5920r 86@5888r 87@5872r 88@5856r 89@5808r 90@5504r 91@5472r 92@5456r 93@5440r 94@5408r 95@5392r 96@5360r 97@5344r 98@5328r 99@5296r 100@5280r 101@5248r 102@5232r 103@5216r 104@5184r 105@5168r 106@5136r 107@5120r 108@5104r 109@5040r 110@4736r 111@4704r 112@4688r 113@4672r 114@4608r 115@3936r 116@3904r 117@3888r 118@3872r 119@3808r 120@3792r 121@3760r 122@3744r 123@3728r 124@3616r 125@3568r 126@3536r 127@3520r 128@3504r 129@3360r 130@2944r 131@2912r 132@2896r 133@2880r 134@2848r 135@2784r 136@2752r 137@2736r 138@2720r 139@2512r 140@2400r 141@2368r 142@2352r 143@2336r 144@2304r 145@2224r 146@2192r 147@2176r 148@2160r 149@2016r 150@1904r 151@1872r 152@1856r 153@1840r 154@1808r 155@1728r 156@1696r 157@1680r 158@1664r 159@1552r 160@1520r 161@1488r 162@1472r 163@1456r 164@1360r 165@3152r 166@3120r 167@3104r 168@3088r 169@2992r 170@1248r 171@1216r 172@1200r 173@1184r 174@1104r 175@1088r 176@1056r 177@1040r 178@1024r 179@928r 180@848r 181@816r 182@800r 183@784r 184@752r 185@240r 186@208r 187@192r 188@176r 189@96r
SPH [96r,96d:189)[176r,176d:188)[192r,192d:187)[208r,208d:186)[240r,240d:185)[752r,752d:184)[784r,784d:183)[800r,800d:182)[816r,816d:181)[848r,848d:180)[928r,928d:179)[1024r,1024d:178)[1040r,1040d:177)[1056r,1056d:176)[1088r,1088d:175)[1104r,1104d:174)[1184r,1184d:173)[1200r,1200d:172)[1216r,1216d:171)[1248r,1248d:170)[1360r,1360d:164)[1456r,1456d:163)[1472r,1472d:162)[1488r,1488d:161)[1520r,1520d:160)[1552r,1552d:159)[1664r,1664d:158)[1680r,1680d:157)[1696r,1696d:156)[1728r,1728d:155)[1808r,1808d:154)[1840r,1840d:153)[1856r,1856d:152)[1872r,1872d:151)[1904r,1904d:150)[2016r,2016d:149)[2160r,2160d:148)[2176r,2176d:147)[2192r,2192d:146)[2224r,2224d:145)[2304r,2304d:144)[2336r,2336d:143)[2352r,2352d:142)[2368r,2368d:141)[2400r,2400d:140)[2512r,2512d:139)[2720r,2720d:138)[2736r,2736d:137)[2752r,2752d:136)[2784r,2784d:135)[2848r,2848d:134)[2880r,2880d:133)[2896r,2896d:132)[2912r,2912d:131)[2944r,2944d:130)[2992r,2992d:169)[3088r,3088d:168)[3104r,3104d:167)[3120r,3120d:166)[3152r,3152d:165)[3360r,3360d:129)[3504r,3504d:128)[3520r,3520d:127)[3536r,3536d:126)[3568r,3568d:125)[3616r,3616d:124)[3728r,3728d:123)[3744r,3744d:122)[3760r,3760d:121)[3792r,3792d:120)[3808r,3808d:119)[3872r,3872d:118)[3888r,3888d:117)[3904r,3904d:116)[3936r,3936d:115)[4192r,4192d:9)[4336r,4336d:8)[4352r,4352d:7)[4368r,4368d:6)[4400r,4400d:5)[4416r,4416d:4)[4480r,4480d:3)[4496r,4496d:2)[4512r,4512d:1)[4544r,4544d:0)[4608r,4608d:114)[4672r,4672d:113)[4688r,4688d:112)[4704r,4704d:111)[4736r,4736d:110)[4880r,4880d:14)[4912r,4912d:13)[4928r,4928d:12)[4944r,4944d:11)[4976r,4976d:10)[5040r,5040d:109)[5104r,5104d:108)[5120r,5120d:107)[5136r,5136d:106)[5168r,5168d:105)[5184r,5184d:104)[5216r,5216d:103)[5232r,5232d:102)[5248r,5248d:101)[5280r,5280d:100)[5296r,5296d:99)[5328r,5328d:98)[5344r,5344d:97)[5360r,5360d:96)[5392r,5392d:95)[5408r,5408d:94)[5440r,5440d:93)[5456r,5456d:92)[5472r,5472d:91)[5504r,5504d:90)[5648r,5648d:19)[5680r,5680d:18)[5696r,5696d:17)[5712r,5712d:16)[5744r,5744d:15)[5808r,5808d:89)[5856r,5856d:88)[5872r,5872d:87)[5888r,5888d:86)[5920r,5920d:85)[6496r,6496d:29)[6576r,6576d:28)[6592r,6592d:27)[6608r,6608d:26)[6640r,6640d:25)[6672r,6672d:24)[6720r,6720d:23)[6736r,6736d:22)[6752r,6752d:21)[6784r,6784d:20)[6848r,6848d:84)[6896r,6896d:83)[6912r,6912d:82)[6928r,6928d:81)[6960r,6960d:80)[6976r,6976d:79)[7008r,7008d:78)[7024r,7024d:77)[7040r,7040d:76)[7072r,7072d:75)[7136r,7136d:74)[7232r,7232d:73)[7248r,7248d:72)[7264r,7264d:71)[7296r,7296d:70)[8288r,8288d:69)[8800r,8800d:68)[8816r,8816d:67)[8832r,8832d:66)[8864r,8864d:65)[9088r,9088d:34)[9120r,9120d:33)[9136r,9136d:32)[9152r,9152d:31)[9184r,9184d:30)[9456r,9456d:64)[9552r,9552d:63)[9568r,9568d:62)[9584r,9584d:61)[9616r,9616d:60)[10016r,10016d:59)[10112r,10112d:58)[10128r,10128d:57)[10144r,10144d:56)[10176r,10176d:55)[10416r,10416d:44)[10512r,10512d:43)[10528r,10528d:42)[10544r,10544d:41)[10576r,10576d:40)[10720r,10720d:39)[10816r,10816d:38)[10832r,10832d:37)[10848r,10848d:36)[10880r,10880d:35)[11152r,11152d:49)[11248r,11248d:48)[11264r,11264d:47)[11280r,11280d:46)[11312r,11312d:45)[11552r,11552d:54)[11648r,11648d:53)[11664r,11664d:52)[11680r,11680d:51)[11712r,11712d:50)  0@4544r 1@4512r 2@4496r 3@4480r 4@4416r 5@4400r 6@4368r 7@4352r 8@4336r 9@4192r 10@4976r 11@4944r 12@4928r 13@4912r 14@4880r 15@5744r 16@5712r 17@5696r 18@5680r 19@5648r 20@6784r 21@6752r 22@6736r 23@6720r 24@6672r 25@6640r 26@6608r 27@6592r 28@6576r 29@6496r 30@9184r 31@9152r 32@9136r 33@9120r 34@9088r 35@10880r 36@10848r 37@10832r 38@10816r 39@10720r 40@10576r 41@10544r 42@10528r 43@10512r 44@10416r 45@11312r 46@11280r 47@11264r 48@11248r 49@11152r 50@11712r 51@11680r 52@11664r 53@11648r 54@11552r 55@10176r 56@10144r 57@10128r 58@10112r 59@10016r 60@9616r 61@9584r 62@9568r 63@9552r 64@9456r 65@8864r 66@8832r 67@8816r 68@8800r 69@8288r 70@7296r 71@7264r 72@7248r 73@7232r 74@7136r 75@7072r 76@7040r 77@7024r 78@7008r 79@6976r 80@6960r 81@6928r 82@6912r 83@6896r 84@6848r 85@5920r 86@5888r 87@5872r 88@5856r 89@5808r 90@5504r 91@5472r 92@5456r 93@5440r 94@5408r 95@5392r 96@5360r 97@5344r 98@5328r 99@5296r 100@5280r 101@5248r 102@5232r 103@5216r 104@5184r 105@5168r 106@5136r 107@5120r 108@5104r 109@5040r 110@4736r 111@4704r 112@4688r 113@4672r 114@4608r 115@3936r 116@3904r 117@3888r 118@3872r 119@3808r 120@3792r 121@3760r 122@3744r 123@3728r 124@3616r 125@3568r 126@3536r 127@3520r 128@3504r 129@3360r 130@2944r 131@2912r 132@2896r 133@2880r 134@2848r 135@2784r 136@2752r 137@2736r 138@2720r 139@2512r 140@2400r 141@2368r 142@2352r 143@2336r 144@2304r 145@2224r 146@2192r 147@2176r 148@2160r 149@2016r 150@1904r 151@1872r 152@1856r 153@1840r 154@1808r 155@1728r 156@1696r 157@1680r 158@1664r 159@1552r 160@1520r 161@1488r 162@1472r 163@1456r 164@1360r 165@3152r 166@3120r 167@3104r 168@3088r 169@2992r 170@1248r 171@1216r 172@1200r 173@1184r 174@1104r 175@1088r 176@1056r 177@1040r 178@1024r 179@928r 180@848r 181@816r 182@800r 183@784r 184@752r 185@240r 186@208r 187@192r 188@176r 189@96r
HSP [96r,96d:189)[176r,176d:188)[192r,192d:187)[208r,208d:186)[240r,240d:185)[752r,752d:184)[784r,784d:183)[800r,800d:182)[816r,816d:181)[848r,848d:180)[928r,928d:179)[1024r,1024d:178)[1040r,1040d:177)[1056r,1056d:176)[1088r,1088d:175)[1104r,1104d:174)[1184r,1184d:173)[1200r,1200d:172)[1216r,1216d:171)[1248r,1248d:170)[1360r,1360d:164)[1456r,1456d:163)[1472r,1472d:162)[1488r,1488d:161)[1520r,1520d:160)[1552r,1552d:159)[1664r,1664d:158)[1680r,1680d:157)[1696r,1696d:156)[1728r,1728d:155)[1808r,1808d:154)[1840r,1840d:153)[1856r,1856d:152)[1872r,1872d:151)[1904r,1904d:150)[2016r,2016d:149)[2160r,2160d:148)[2176r,2176d:147)[2192r,2192d:146)[2224r,2224d:145)[2304r,2304d:144)[2336r,2336d:143)[2352r,2352d:142)[2368r,2368d:141)[2400r,2400d:140)[2512r,2512d:139)[2720r,2720d:138)[2736r,2736d:137)[2752r,2752d:136)[2784r,2784d:135)[2848r,2848d:134)[2880r,2880d:133)[2896r,2896d:132)[2912r,2912d:131)[2944r,2944d:130)[2992r,2992d:169)[3088r,3088d:168)[3104r,3104d:167)[3120r,3120d:166)[3152r,3152d:165)[3360r,3360d:129)[3504r,3504d:128)[3520r,3520d:127)[3536r,3536d:126)[3568r,3568d:125)[3616r,3616d:124)[3728r,3728d:123)[3744r,3744d:122)[3760r,3760d:121)[3792r,3792d:120)[3808r,3808d:119)[3872r,3872d:118)[3888r,3888d:117)[3904r,3904d:116)[3936r,3936d:115)[4192r,4192d:9)[4336r,4336d:8)[4352r,4352d:7)[4368r,4368d:6)[4400r,4400d:5)[4416r,4416d:4)[4480r,4480d:3)[4496r,4496d:2)[4512r,4512d:1)[4544r,4544d:0)[4608r,4608d:114)[4672r,4672d:113)[4688r,4688d:112)[4704r,4704d:111)[4736r,4736d:110)[4880r,4880d:14)[4912r,4912d:13)[4928r,4928d:12)[4944r,4944d:11)[4976r,4976d:10)[5040r,5040d:109)[5104r,5104d:108)[5120r,5120d:107)[5136r,5136d:106)[5168r,5168d:105)[5184r,5184d:104)[5216r,5216d:103)[5232r,5232d:102)[5248r,5248d:101)[5280r,5280d:100)[5296r,5296d:99)[5328r,5328d:98)[5344r,5344d:97)[5360r,5360d:96)[5392r,5392d:95)[5408r,5408d:94)[5440r,5440d:93)[5456r,5456d:92)[5472r,5472d:91)[5504r,5504d:90)[5648r,5648d:19)[5680r,5680d:18)[5696r,5696d:17)[5712r,5712d:16)[5744r,5744d:15)[5808r,5808d:89)[5856r,5856d:88)[5872r,5872d:87)[5888r,5888d:86)[5920r,5920d:85)[6496r,6496d:29)[6576r,6576d:28)[6592r,6592d:27)[6608r,6608d:26)[6640r,6640d:25)[6672r,6672d:24)[6720r,6720d:23)[6736r,6736d:22)[6752r,6752d:21)[6784r,6784d:20)[6848r,6848d:84)[6896r,6896d:83)[6912r,6912d:82)[6928r,6928d:81)[6960r,6960d:80)[6976r,6976d:79)[7008r,7008d:78)[7024r,7024d:77)[7040r,7040d:76)[7072r,7072d:75)[7136r,7136d:74)[7232r,7232d:73)[7248r,7248d:72)[7264r,7264d:71)[7296r,7296d:70)[8288r,8288d:69)[8800r,8800d:68)[8816r,8816d:67)[8832r,8832d:66)[8864r,8864d:65)[9088r,9088d:34)[9120r,9120d:33)[9136r,9136d:32)[9152r,9152d:31)[9184r,9184d:30)[9456r,9456d:64)[9552r,9552d:63)[9568r,9568d:62)[9584r,9584d:61)[9616r,9616d:60)[10016r,10016d:59)[10112r,10112d:58)[10128r,10128d:57)[10144r,10144d:56)[10176r,10176d:55)[10416r,10416d:44)[10512r,10512d:43)[10528r,10528d:42)[10544r,10544d:41)[10576r,10576d:40)[10720r,10720d:39)[10816r,10816d:38)[10832r,10832d:37)[10848r,10848d:36)[10880r,10880d:35)[11152r,11152d:49)[11248r,11248d:48)[11264r,11264d:47)[11280r,11280d:46)[11312r,11312d:45)[11552r,11552d:54)[11648r,11648d:53)[11664r,11664d:52)[11680r,11680d:51)[11712r,11712d:50)  0@4544r 1@4512r 2@4496r 3@4480r 4@4416r 5@4400r 6@4368r 7@4352r 8@4336r 9@4192r 10@4976r 11@4944r 12@4928r 13@4912r 14@4880r 15@5744r 16@5712r 17@5696r 18@5680r 19@5648r 20@6784r 21@6752r 22@6736r 23@6720r 24@6672r 25@6640r 26@6608r 27@6592r 28@6576r 29@6496r 30@9184r 31@9152r 32@9136r 33@9120r 34@9088r 35@10880r 36@10848r 37@10832r 38@10816r 39@10720r 40@10576r 41@10544r 42@10528r 43@10512r 44@10416r 45@11312r 46@11280r 47@11264r 48@11248r 49@11152r 50@11712r 51@11680r 52@11664r 53@11648r 54@11552r 55@10176r 56@10144r 57@10128r 58@10112r 59@10016r 60@9616r 61@9584r 62@9568r 63@9552r 64@9456r 65@8864r 66@8832r 67@8816r 68@8800r 69@8288r 70@7296r 71@7264r 72@7248r 73@7232r 74@7136r 75@7072r 76@7040r 77@7024r 78@7008r 79@6976r 80@6960r 81@6928r 82@6912r 83@6896r 84@6848r 85@5920r 86@5888r 87@5872r 88@5856r 89@5808r 90@5504r 91@5472r 92@5456r 93@5440r 94@5408r 95@5392r 96@5360r 97@5344r 98@5328r 99@5296r 100@5280r 101@5248r 102@5232r 103@5216r 104@5184r 105@5168r 106@5136r 107@5120r 108@5104r 109@5040r 110@4736r 111@4704r 112@4688r 113@4672r 114@4608r 115@3936r 116@3904r 117@3888r 118@3872r 119@3808r 120@3792r 121@3760r 122@3744r 123@3728r 124@3616r 125@3568r 126@3536r 127@3520r 128@3504r 129@3360r 130@2944r 131@2912r 132@2896r 133@2880r 134@2848r 135@2784r 136@2752r 137@2736r 138@2720r 139@2512r 140@2400r 141@2368r 142@2352r 143@2336r 144@2304r 145@2224r 146@2192r 147@2176r 148@2160r 149@2016r 150@1904r 151@1872r 152@1856r 153@1840r 154@1808r 155@1728r 156@1696r 157@1680r 158@1664r 159@1552r 160@1520r 161@1488r 162@1472r 163@1456r 164@1360r 165@3152r 166@3120r 167@3104r 168@3088r 169@2992r 170@1248r 171@1216r 172@1200r 173@1184r 174@1104r 175@1088r 176@1056r 177@1040r 178@1024r 179@928r 180@848r 181@816r 182@800r 183@784r 184@752r 185@240r 186@208r 187@192r 188@176r 189@96r
%0 [32r,64r:0)  0@32r weight:0.000000e+00
%1 [16r,80r:0)  0@16r weight:0.000000e+00
%4 [256r,288r:0)  0@256r weight:0.000000e+00
%5 [352r,368r:0)  0@352r weight:0.000000e+00
%6 [384r,400r:0)  0@384r weight:0.000000e+00
%7 [416r,432r:0)  0@416r weight:0.000000e+00
%8 [448r,464r:0)  0@448r weight:0.000000e+00
%9 [480r,496r:0)  0@480r weight:0.000000e+00
%10 [512r,528r:0)  0@512r weight:0.000000e+00
%11 [544r,560r:0)  0@544r weight:0.000000e+00
%12 [576r,592r:0)  0@576r weight:0.000000e+00
%13 [608r,624r:0)  0@608r weight:0.000000e+00
%14 [640r,656r:0)  0@640r weight:0.000000e+00
%15 [672r,688r:0)  0@672r weight:0.000000e+00
%16 [704r,720r:0)  0@704r weight:0.000000e+00
%17 [736r,832r:0)  0@736r weight:0.000000e+00
%25 [1264r,1296r:0)  0@1264r weight:0.000000e+00
%30 [3168r,3184r:0)  0@3168r weight:0.000000e+00
%31 [3200r,3216r:0)  0@3200r weight:0.000000e+00
%32 [3232r,3248r:0)  0@3232r weight:0.000000e+00
%33 [3264r,3280r:0)  0@3264r weight:0.000000e+00
%38 [1536r,1712r:0)  0@1536r weight:0.000000e+00
%41 [1744r,1760r:0)  0@1744r weight:0.000000e+00
%42 [1792r,1888r:0)  0@1792r weight:0.000000e+00
%43 [1920r,1936r:0)  0@1920r weight:0.000000e+00
%45 [2000r,2208r:0)  0@2000r weight:0.000000e+00
%50 [2240r,2256r:0)  0@2240r weight:0.000000e+00
%51 [2288r,2384r:0)  0@2288r weight:0.000000e+00
%52 [2416r,2432r:0)  0@2416r weight:0.000000e+00
%54 [2496r,2768r:0)  0@2496r weight:0.000000e+00
%61 [2800r,2816r:0)  0@2800r weight:0.000000e+00
%62 [2832r,2928r:0)  0@2832r weight:0.000000e+00
%64 [3312r,3552r:0)  0@3312r weight:0.000000e+00
%65 [3328r,3552r:0)  0@3328r weight:0.000000e+00
%66 [3344r,3552r:0)  0@3344r weight:0.000000e+00
%71 [3584r,3776r:0)  0@3584r weight:0.000000e+00
%72 [3600r,3776r:0)  0@3600r weight:0.000000e+00
%86 [4752r,4768r:0)  0@4752r weight:0.000000e+00
%91 [5520r,5536r:0)  0@5520r weight:0.000000e+00
%94 [5824r,5936r:0)  0@5824r weight:0.000000e+00
%95 [6016r,6032r:0)  0@6016r weight:0.000000e+00
%98 [7088r,7104r:0)  0@7088r weight:0.000000e+00
%99 [7120r,7280r:0)  0@7120r weight:0.000000e+00
%103 [7328r,7392r:0)  0@7328r weight:0.000000e+00
%104 [7344r,7504r:0)  0@7344r weight:0.000000e+00
%106 [7360r,7392r:0)[7392r,7456r:1)  0@7360r 1@7392r weight:0.000000e+00
%107 [7408r,7536r:0)  0@7408r weight:0.000000e+00
%109 [7424r,7456r:0)[7456r,7472r:1)  0@7424r 1@7456r weight:0.000000e+00
%111 [7312r,7504r:2)[7504r,7536r:0)[7536r,7552r:1)  0@7504r 1@7536r 2@7312r weight:0.000000e+00
%113 [7552r,7584r:0)[7584r,7600r:1)  0@7552r 1@7584r weight:0.000000e+00
%114 [7616r,7648r:0)  0@7616r weight:0.000000e+00
%115 [7632r,7648r:0)  0@7632r weight:0.000000e+00
%117 [7728r,7760r:0)[7760r,8016r:1)  0@7728r 1@7760r weight:0.000000e+00
%119 [7776r,7808r:0)[7808r,7920r:1)  0@7776r 1@7808r weight:0.000000e+00
%122 [7840r,7856r:2)[7856r,7888r:0)[7888r,7920r:1)[7920r,7984r:3)  0@7856r 1@7888r 2@7840r 3@7920r weight:0.000000e+00
%125 [7824r,7952r:2)[7952r,7984r:0)[7984r,8016r:1)[8016r,8048r:3)[8048r,8064r:4)  0@7952r 1@7984r 2@7824r 3@8016r 4@8048r weight:0.000000e+00
%128 [8144r,8848r:0)  0@8144r weight:0.000000e+00
%130 [8176r,8848r:0)  0@8176r weight:0.000000e+00
%131 [8192r,8848r:0)  0@8192r weight:0.000000e+00
%132 [8208r,8848r:0)  0@8208r weight:0.000000e+00
%133 [8224r,8848r:0)  0@8224r weight:0.000000e+00
%134 [8240r,8848r:0)  0@8240r weight:0.000000e+00
%135 [8256r,8848r:0)  0@8256r weight:0.000000e+00
%136 [8272r,8848r:0)  0@8272r weight:0.000000e+00
%137 [8304r,8336r:0)  0@8304r weight:0.000000e+00
%139 [8352r,8368r:0)  0@8352r weight:0.000000e+00
%140 [8384r,8400r:0)  0@8384r weight:0.000000e+00
%141 [8416r,8432r:0)  0@8416r weight:0.000000e+00
%142 [8448r,8464r:0)  0@8448r weight:0.000000e+00
%143 [8480r,8496r:0)  0@8480r weight:0.000000e+00
%144 [8512r,8528r:0)  0@8512r weight:0.000000e+00
%145 [8544r,8560r:0)  0@8544r weight:0.000000e+00
%146 [8576r,8592r:0)  0@8576r weight:0.000000e+00
%147 [8624r,8640r:0)  0@8624r weight:0.000000e+00
%149 [8944r,8960r:0)  0@8944r weight:0.000000e+00
%152 [9296r,9328r:0)  0@9296r weight:0.000000e+00
%153 [9312r,9328r:0)  0@9312r weight:0.000000e+00
%154 [9408r,9424r:0)  0@9408r weight:0.000000e+00
%159 [9632r,9648r:0)  0@9632r weight:0.000000e+00
%162 [9904r,9936r:0)  0@9904r weight:0.000000e+00
%163 [9664r,11776B:0)  0@9664r weight:0.000000e+00
%164 [9920r,10160r:0)  0@9920r weight:0.000000e+00
%165 [9680r,11776B:0)  0@9680r weight:0.000000e+00
%166 [9936r,10160r:0)  0@9936r weight:0.000000e+00
%168 [9952r,9968r:2)[9968r,10000r:0)[10000r,10160r:1)  0@9968r 1@10000r 2@9952r weight:0.000000e+00
%179 [11424r,11456r:0)[11456r,11696r:1)  0@11424r 1@11456r weight:0.000000e+00
%181 [11488r,11504r:2)[11504r,11536r:0)[11536r,11696r:1)  0@11504r 1@11536r 2@11488r weight:0.000000e+00
%188 [10992r,11024r:2)[11024r,11056r:0)[11056r,11296r:1)  0@11024r 1@11056r 2@10992r weight:0.000000e+00
%190 [11088r,11104r:2)[11104r,11136r:0)[11136r,11296r:1)  0@11104r 1@11136r 2@11088r weight:0.000000e+00
%197 [10256r,10288r:2)[10288r,10320r:0)[10320r,10560r:1)  0@10288r 1@10320r 2@10256r weight:0.000000e+00
%200 [10352r,10368r:2)[10368r,10400r:0)[10400r,10560r:1)  0@10368r 1@10400r 2@10352r weight:0.000000e+00
%206 [10592r,10624r:0)[10624r,10864r:1)  0@10592r 1@10624r weight:0.000000e+00
%208 [10656r,10672r:2)[10672r,10704r:0)[10704r,10864r:1)  0@10672r 1@10704r 2@10656r weight:0.000000e+00
%211 [9072r,9168r:0)  0@9072r weight:0.000000e+00
%212 [9200r,9232r:0)  0@9200r weight:0.000000e+00
%213 [9216r,9232r:0)  0@9216r weight:0.000000e+00
%214 [8976r,9280B:0)  0@8976r weight:0.000000e+00
%215 [6096r,6352r:0)  0@6096r weight:0.000000e+00
%217 [5952r,6832B:0)  0@5952r weight:0.000000e+00
%219 [6160r,6176r:0)[6176r,6272r:1)  0@6160r 1@6176r weight:0.000000e+00
%225 [6128r,6144r:4)[6144r,6224r:3)[6224r,6272r:0)[6272r,6304r:1)[6304r,6336r:2)  0@6224r 1@6272r 2@6304r 3@6144r 4@6128r weight:0.000000e+00
%227 [6336r,6352r:0)  0@6336r weight:0.000000e+00
%231 [6480r,6624r:0)  0@6480r weight:0.000000e+00
%238 [5632r,5728r:0)  0@5632r weight:0.000000e+00
%239 [4864r,4960r:0)  0@4864r weight:0.000000e+00
%240 [4144r,4384r:0)  0@4144r weight:0.000000e+00
%241 [4160r,4384r:0)  0@4160r weight:0.000000e+00
%242 [4176r,4384r:0)  0@4176r weight:0.000000e+00
%249 [11824r,11840r:0)  0@11824r weight:0.000000e+00
%250 [9696r,11776B:0)  0@9696r weight:0.000000e+00
RegMasks: 176r 784r 1024r 1184r 1456r 1664r 1840r 2160r 2336r 2720r 2880r 3088r 3504r 3728r 3872r 4336r 4480r 4672r 4912r 5104r 5216r 5328r 5440r 5680r 5856r 6576r 6720r 6896r 7008r 7232r 8800r 9120r 9552r 10112r 10512r 10816r 11248r 11648r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=96, align=16, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=1, align=4, at location [SP+8]
  fi#14: size=96, align=16, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.000000e+00, align=8
  cp#1: 0x3EB0C6F7A0B5ED8D, align=8
  cp#2: 3.478800e+03, align=8
  cp#3: -1.765570e+04, align=8
  cp#4: 2.802370e+04, align=8
  cp#5: 1.000000e+02, align=8
Function Live Ins: $edi in %0, $rsi in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $edi, $rsi
16B	  %1:gr64 = COPY $rsi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
64B	  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
80B	  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
144B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_timer_flag, $noreg
160B	  $rsi = LEA64r $rip, 1, $noreg, @bt__str_1_r_, $noreg
176B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  PCN_STACKMAP 0, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
240B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = COPY killed $rax
272B	  MOV64mr %stack.15.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
288B	  TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
304B	  JCC_1 %bb.2, 4, implicit killed $eflags
320B	  JMP_1 %bb.1

336B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

352B	  %5:gr32 = MOV32ri 1
368B	  MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
384B	  %6:gr64 = LEA64r $rip, 1, $noreg, @bt__str_2_total_, $noreg
400B	  MOV64mr %stack.14.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
416B	  %7:gr64 = LEA64r $rip, 1, $noreg, @bt__str_3_rhsx_, $noreg
432B	  MOV64mr %stack.14.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
448B	  %8:gr64 = LEA64r $rip, 1, $noreg, @bt__str_4_rhsy_, $noreg
464B	  MOV64mr %stack.14.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
480B	  %9:gr64 = LEA64r $rip, 1, $noreg, @bt__str_5_rhsz_, $noreg
496B	  MOV64mr %stack.14.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
512B	  %10:gr64 = LEA64r $rip, 1, $noreg, @bt__str_6_rhs_, $noreg
528B	  MOV64mr %stack.14.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
544B	  %11:gr64 = LEA64r $rip, 1, $noreg, @bt__str_7_xsolve_, $noreg
560B	  MOV64mr %stack.14.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
576B	  %12:gr64 = LEA64r $rip, 1, $noreg, @bt__str_8_ysolve_, $noreg
592B	  MOV64mr %stack.14.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
608B	  %13:gr64 = LEA64r $rip, 1, $noreg, @bt__str_9_zsolve_, $noreg
624B	  MOV64mr %stack.14.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
640B	  %14:gr64 = LEA64r $rip, 1, $noreg, @bt__str_10_redist1_, $noreg
656B	  MOV64mr %stack.14.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
672B	  %15:gr64 = LEA64r $rip, 1, $noreg, @bt__str_11_redist2_, $noreg
688B	  MOV64mr %stack.14.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
704B	  %16:gr64 = LEA64r $rip, 1, $noreg, @bt__str_12_add_, $noreg
720B	  MOV64mr %stack.14.t_names, 1, $noreg, 88, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10)
736B	  %17:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $rdi = COPY %17:gr64
784B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  PCN_STACKMAP 1, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %17:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
848B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
864B	  JMP_1 %bb.3

880B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

896B	  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0 :: (store 4 into @timeron)

912B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x50000000), %bb.9(0x30000000); %bb.4(62.50%), %bb.9(37.50%)

928B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
992B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_13____NAS_Par, $noreg
1008B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1024B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1072B	  PCN_STACKMAP 2, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
1088B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_14_inputbt_da, $noreg
1168B	  $rsi = LEA64r $rip, 1, $noreg, @bt__str_1_r_, $noreg
1184B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1200B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1216B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  PCN_STACKMAP 3, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
1248B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1264B	  %25:gr64 = COPY killed $rax
1280B	  MOV64mr %stack.15.fp, 1, $noreg, 0, $noreg, %25:gr64 :: (store 8 into %ir.fp)
1296B	  TEST64rr %25:gr64, %25:gr64, implicit-def $eflags
1312B	  JCC_1 %bb.9, 4, implicit killed $eflags
1328B	  JMP_1 %bb.4

1344B	bb.4.if.then15:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1360B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1424B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_15__Reading_f, $noreg
1440B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1456B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
1472B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1488B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1504B	  PCN_STACKMAP 4, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1536B	  %38:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
1552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1616B	  $rsi = LEA64r $rip, 1, $noreg, @bt__str_16__d_, $noreg
1632B	  $rdx = LEA64r %stack.4.niter, 1, $noreg, 0, $noreg
1640B	  $rdi = COPY %38:gr64
1648B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1664B	  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1712B	  PCN_STACKMAP 5, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %38:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
1728B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1744B	  %41:gr32 = COPY killed $eax
1760B	  MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %41:gr32 :: (store 4 into %ir.result)

1776B	bb.5.while.cond:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

1792B	  %42:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
1808B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1824B	  $rdi = COPY %42:gr64
1840B	  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1856B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1872B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1888B	  PCN_STACKMAP 6, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %42:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
1904B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1920B	  %43:gr32 = COPY killed $eax
1936B	  CMP32ri8 %43:gr32, 10, implicit-def $eflags
1952B	  JCC_1 %bb.5, 5, implicit killed $eflags
1968B	  JMP_1 %bb.6

1984B	bb.6.while.end:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

2000B	  %45:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2016B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2112B	  $rsi = LEA64r $rip, 1, $noreg, @bt__str_17__lf_, $noreg
2128B	  $rdx = LEA64r $rip, 1, $noreg, @dt, $noreg
2136B	  $rdi = COPY %45:gr64
2144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
2160B	  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2176B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2208B	  PCN_STACKMAP 7, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %45:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
2224B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2240B	  %50:gr32 = COPY killed $eax
2256B	  MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %50:gr32 :: (store 4 into %ir.result)

2272B	bb.7.while.cond21:
	; predecessors: %bb.6, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

2288B	  %51:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2320B	  $rdi = COPY %51:gr64
2336B	  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2384B	  PCN_STACKMAP 8, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %51:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
2400B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2416B	  %52:gr32 = COPY killed $eax
2432B	  CMP32ri8 %52:gr32, 10, implicit-def $eflags
2448B	  JCC_1 %bb.7, 5, implicit killed $eflags
2464B	  JMP_1 %bb.8

2480B	bb.8.while.end25:
	; predecessors: %bb.7
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2496B	  %54:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2640B	  $rsi = LEA64r $rip, 1, $noreg, @bt__str_18__d_d_d__, $noreg
2656B	  $rdx = LEA64r $rip, 1, $noreg, @grid_points, $noreg
2672B	  $rcx = nuw LEA64r $rip, 1, $noreg, @grid_points + 4, $noreg
2688B	  $r8 = nuw LEA64r $rip, 1, $noreg, @grid_points + 8, $noreg
2696B	  $rdi = COPY %54:gr64
2704B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
2720B	  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2768B	  PCN_STACKMAP 9, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %54:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
2784B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2800B	  %61:gr32 = COPY killed $eax
2816B	  MOV32mr %stack.16.result, 1, $noreg, 0, $noreg, %61:gr32 :: (store 4 into %ir.result)
2832B	  %62:gr64 = MOV64rm %stack.15.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2864B	  $rdi = COPY %62:gr64
2880B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
2896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2912B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2928B	  PCN_STACKMAP 10, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %62:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
2944B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2960B	  JMP_1 %bb.10

2976B	bb.9.if.else28:
	; predecessors: %bb.3
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3056B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_19__No_input_, $noreg
3072B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
3088B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3104B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3120B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3136B	  PCN_STACKMAP 11, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
3152B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3168B	  %30:gr32 = MOV32ri 200
3184B	  MOV32mr %stack.4.niter, 1, $noreg, 0, $noreg, %30:gr32 :: (store 4 into %ir.niter)
3200B	  %31:gr64 = MOV64ri 4554169646866313825
3216B	  MOV64mr $rip, 1, $noreg, @dt, $noreg, %31:gr64 :: (store 8 into @dt)
3232B	  %32:gr64 = MOV64ri 438086664294
3248B	  MOV64mr $rip, 1, $noreg, @grid_points, $noreg, %32:gr64 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
3264B	  %33:gr32 = MOV32ri 102
3280B	  MOV32mr $rip, 1, $noreg, @grid_points + 8, $noreg, %33:gr32 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

3296B	bb.10.if.end30:
	; predecessors: %bb.9, %bb.8
	  successors: %bb.13(0x40000000), %bb.11(0x40000000); %bb.13(50.00%), %bb.11(50.00%)

3312B	  %64:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
3328B	  %65:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
3344B	  %66:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
3360B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3424B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_20__Size___4d, $noreg
3440B	  $esi = COPY %64:gr32
3456B	  $edx = COPY %65:gr32
3472B	  $ecx = COPY %66:gr32
3488B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
3504B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3536B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3552B	  PCN_STACKMAP 12, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %64:gr32, %65:gr32, %66:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
3568B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3584B	  %71:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
3600B	  %72:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dt, $noreg :: (dereferenceable load 8 from @dt)
3616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3664B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_21__Iteration, $noreg
3680B	  $esi = COPY %71:gr32
3696B	  $xmm0 = COPY %72:fr64
3712B	  $al = MOV8ri 1
3728B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3744B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3776B	  PCN_STACKMAP 13, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %71:gr32, %72:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
3792B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3808B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3840B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_22___, $noreg
3856B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
3872B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3888B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3920B	  PCN_STACKMAP 14, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
3936B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3952B	  CMP32mi8 $rip, 1, $noreg, @grid_points, $noreg, 102, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
3968B	  JCC_1 %bb.13, 15, implicit killed $eflags
3984B	  JMP_1 %bb.11

4000B	bb.11.lor.lhs.false:
	; predecessors: %bb.10
	  successors: %bb.13(0x40000000), %bb.12(0x40000000); %bb.13(50.00%), %bb.12(50.00%)

4016B	  CMP32mi8 $rip, 1, $noreg, @grid_points + 4, $noreg, 102, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
4032B	  JCC_1 %bb.13, 15, implicit killed $eflags
4048B	  JMP_1 %bb.12

4064B	bb.12.lor.lhs.false36:
	; predecessors: %bb.11
	  successors: %bb.13(0x40000000), %bb.14(0x40000000); %bb.13(50.00%), %bb.14(50.00%)

4080B	  CMP32mi8 $rip, 1, $noreg, @grid_points + 8, $noreg, 103, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
4096B	  JCC_1 %bb.14, 12, implicit killed $eflags
4112B	  JMP_1 %bb.13

4128B	bb.13.if.then38:
	; predecessors: %bb.10, %bb.11, %bb.12
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

4144B	  %240:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
4160B	  %241:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
4176B	  %242:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
4192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4256B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_23___d___d___, $noreg
4272B	  $esi = COPY %240:gr32
4288B	  $edx = COPY %241:gr32
4304B	  $ecx = COPY %242:gr32
4320B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4384B	  PCN_STACKMAP 15, 0, 0, %stack.0.retval, 0, %240:gr32, %241:gr32, %242:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.0.retval, align 4)
4400B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4416B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4448B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_24__Problem_s, $noreg
4464B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4480B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4496B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4528B	  PCN_STACKMAP 16, 0, 0, %stack.0.retval, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.0.retval, align 4)
4544B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4560B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
4576B	  JMP_1 %bb.45

4592B	bb.14.if.end41:
	; predecessors: %bb.12
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

4608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4656B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4672B	  CALL64pcrel32 @set_constants, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
4688B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4720B	  PCN_STACKMAP 17, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
4736B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4752B	  %86:gr32 = MOV32ri 1
4768B	  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %86:gr32 :: (store 4 into %ir.i)

4784B	bb.15.for.cond:
	; predecessors: %bb.14, %bb.16
	  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

4800B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
4816B	  JCC_1 %bb.17, 15, implicit killed $eflags
4832B	  JMP_1 %bb.16

4848B	bb.16.for.body:
	; predecessors: %bb.15
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

4864B	  %239:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
4880B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4896B	  $edi = COPY %239:gr32
4912B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
4928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4960B	  PCN_STACKMAP 18, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %239:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
4976B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4992B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
5008B	  JMP_1 %bb.15

5024B	bb.17.for.end:
	; predecessors: %bb.15
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

5040B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5088B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
5104B	  CALL64pcrel32 @initialize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
5120B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5152B	  PCN_STACKMAP 19, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
5168B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5200B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
5216B	  CALL64pcrel32 @exact_rhs, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
5232B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5248B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5264B	  PCN_STACKMAP 20, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
5280B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5312B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
5328B	  CALL64pcrel32 @adi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
5344B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5360B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5376B	  PCN_STACKMAP 21, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
5392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5408B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5424B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
5440B	  CALL64pcrel32 @initialize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
5456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5472B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5488B	  PCN_STACKMAP 22, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
5504B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5520B	  %91:gr32 = MOV32ri 1
5536B	  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %91:gr32 :: (store 4 into %ir.i)

5552B	bb.18.for.cond43:
	; predecessors: %bb.17, %bb.19
	  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

5568B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
5584B	  JCC_1 %bb.20, 15, implicit killed $eflags
5600B	  JMP_1 %bb.19

5616B	bb.19.for.body45:
	; predecessors: %bb.18
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

5632B	  %238:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
5648B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5664B	  $edi = COPY %238:gr32
5680B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
5696B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5712B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5728B	  PCN_STACKMAP 23, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %238:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
5744B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5760B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
5776B	  JMP_1 %bb.18

5792B	bb.20.for.end48:
	; predecessors: %bb.18
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

5808B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5824B	  %94:gr32 = MOV32ri 1
5840B	  $edi = MOV32ri 1
5856B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
5872B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5888B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5904B	  PCN_STACKMAP 24, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
5920B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5936B	  MOV32mr %stack.5.step, 1, $noreg, 0, $noreg, %94:gr32 :: (store 4 into %ir.step)
5952B	  %217:gr64 = MOV32ri64 1717986919

6000B	bb.21.for.cond49:
	; predecessors: %bb.20, %bb.25
	  successors: %bb.22(0x7c000000), %bb.26(0x04000000); %bb.22(96.88%), %bb.26(3.12%)

6016B	  %95:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
6032B	  CMP32rm %95:gr32, %stack.4.niter, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.niter)
6048B	  JCC_1 %bb.26, 15, implicit killed $eflags
6064B	  JMP_1 %bb.22

6080B	bb.22.for.body51:
	; predecessors: %bb.21
	  successors: %bb.24(0x30000000), %bb.23(0x50000000); %bb.24(37.50%), %bb.23(62.50%)

6096B	  %215:gr64_with_sub_8bit = MOVSX64rm32 %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
6128B	  %225:gr64_nosp = COPY %215:gr64_with_sub_8bit
6144B	  %225:gr64_nosp = IMUL64rr %225:gr64_nosp(tied-def 0), %217:gr64, implicit-def dead $eflags
6160B	  %219:gr64_with_sub_8bit = COPY %225:gr64_nosp
6176B	  %219:gr64_with_sub_8bit = SHR64ri %219:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
6224B	  %225:gr64_nosp = SAR64ri %225:gr64_nosp(tied-def 0), 35, implicit-def dead $eflags
6272B	  %225.sub_32bit:gr64_nosp = ADD32rr %225.sub_32bit:gr64_nosp(tied-def 0), %219.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
6304B	  %225.sub_32bit:gr64_nosp = SHL32ri %225.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
6336B	  %227:gr32 = LEA64_32r %225:gr64_nosp, 4, %225:gr64_nosp, 0, $noreg
6352B	  CMP32rr %215.sub_32bit:gr64_with_sub_8bit, %227:gr32, implicit-def $eflags
6368B	  JCC_1 %bb.24, 4, implicit killed $eflags
6384B	  JMP_1 %bb.23

6400B	bb.23.lor.lhs.false53:
	; predecessors: %bb.22
	  successors: %bb.24(0x40000000), %bb.25(0x40000000); %bb.24(50.00%), %bb.25(50.00%)

6416B	  CMP32mi8 %stack.5.step, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (dereferenceable load 4 from %ir.step)
6432B	  JCC_1 %bb.25, 5, implicit killed $eflags
6448B	  JMP_1 %bb.24

6464B	bb.24.if.then55:
	; predecessors: %bb.22, %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

6480B	  %231:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
6496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6528B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_25__Time_step, $noreg
6544B	  $esi = COPY %231:gr32
6560B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
6576B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
6592B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6624B	  PCN_STACKMAP 25, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %231:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
6640B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

6656B	bb.25.if.end57:
	; predecessors: %bb.23, %bb.24
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

6672B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6704B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
6720B	  CALL64pcrel32 @adi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
6736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6768B	  PCN_STACKMAP 26, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
6784B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6800B	  INC32m %stack.5.step, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.step), (dereferenceable load 4 from %ir.step)
6816B	  JMP_1 %bb.21

6832B	bb.26.for.end60:
	; predecessors: %bb.21
	  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

6848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6880B	  $edi = MOV32ri 1
6896B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
6912B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6928B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6944B	  PCN_STACKMAP 27, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
6960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6976B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6992B	  $edi = MOV32ri 1
7008B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
7024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7040B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7056B	  PCN_STACKMAP 28, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
7072B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7088B	  %98:fr64 = COPY killed $xmm0
7104B	  MOVSDmr %stack.9.tmax, 1, $noreg, 0, $noreg, %98:fr64 :: (store 8 into %ir.tmax)
7120B	  %99:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
7136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7200B	  $rsi = LEA64r %stack.13.Class, 1, $noreg, 0, $noreg
7216B	  $rdx = LEA64r %stack.12.verified, 1, $noreg, 0, $noreg
7224B	  $edi = COPY %99:gr32
7232B	  CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
7248B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7264B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7280B	  PCN_STACKMAP 29, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %99:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
7296B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7312B	  %111:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
7328B	  %103:fr64 = CVTSI2SDrr %111:gr32
7344B	  %104:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
7360B	  %106:fr64 = CVTSI2SDrr %104:gr32
7392B	  %106:fr64 = MULSDrr %106:fr64(tied-def 0), %103:fr64
7408B	  %107:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
7424B	  %109:fr64 = CVTSI2SDrr %107:gr32
7456B	  %109:fr64 = MULSDrr %109:fr64(tied-def 0), %106:fr64
7472B	  MOVSDmr %stack.8.n3, 1, $noreg, 0, $noreg, %109:fr64 :: (store 8 into %ir.n3)
7504B	  %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %104:gr32, implicit-def dead $eflags
7536B	  %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %107:gr32, implicit-def dead $eflags
7552B	  %113:fr64 = CVTSI2SDrr %111:gr32
7584B	  %113:fr64 = DIVSDrm %113:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
7600B	  MOVSDmr %stack.6.navg, 1, $noreg, 0, $noreg, %113:fr64 :: (store 8 into %ir.navg)
7616B	  %114:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
7632B	  %115:fr64 = FsFLD0SD
7648B	  UCOMISDrr %114:fr64, %115:fr64, implicit-def $eflags
7664B	  JCC_1 %bb.27, 5, implicit $eflags
7680B	  JCC_1 %bb.27, 10, implicit killed $eflags
7696B	  JMP_1 %bb.28

7712B	bb.27.if.then70:
	; predecessors: %bb.26
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

7728B	  %117:fr64 = CVTSI2SDrm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
7760B	  %117:fr64 = MULSDrm %117:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
7776B	  %119:fr64 = MOVSDrm_alt %stack.8.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3)
7808B	  %119:fr64 = MULSDrm %119:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
7824B	  %125:fr64 = MOVSDrm_alt %stack.6.navg, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.navg)
7840B	  %122:fr64 = COPY %125:fr64
7856B	  %122:fr64 = MULSDrr %122:fr64(tied-def 0), %122:fr64
7888B	  %122:fr64 = MULSDrm %122:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
7920B	  %122:fr64 = ADDSDrr %122:fr64(tied-def 0), %119:fr64
7952B	  %125:fr64 = MULSDrm %125:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
7984B	  %125:fr64 = ADDSDrr %125:fr64(tied-def 0), %122:fr64
8016B	  %125:fr64 = MULSDrr %125:fr64(tied-def 0), %117:fr64
8048B	  %125:fr64 = DIVSDrm %125:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
8064B	  MOVSDmr %stack.7.mflops, 1, $noreg, 0, $noreg, %125:fr64 :: (store 8 into %ir.mflops)
8080B	  JMP_1 %bb.29

8096B	bb.28.if.else80:
	; predecessors: %bb.26
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

8112B	  MOV64mi32 %stack.7.mflops, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.mflops)

8128B	bb.29.if.end81:
	; predecessors: %bb.28, %bb.27
	  successors: %bb.30(0x50000000), %bb.44(0x30000000); %bb.30(62.50%), %bb.44(37.50%)

8144B	  %128:gr32 = MOVSX32rm8 %stack.13.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
8176B	  %130:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
8192B	  %131:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
8208B	  %132:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
8224B	  %133:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
8240B	  %134:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
8256B	  %135:fr64 = MOVSDrm_alt %stack.7.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
8272B	  %136:gr32 = MOV32rm %stack.12.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
8288B	  ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8304B	  %137:gr64 = LEA64r $rip, 1, $noreg, @bt__str_36__none__, $noreg
8336B	  MOV64mr $rsp, 1, $noreg, 80, $noreg, %137:gr64 :: (store 8 into stack + 80)
8352B	  %139:gr64 = LEA64r $rip, 1, $noreg, @bt__str_35__O3__mcmod, $noreg
8368B	  MOV64mr $rsp, 1, $noreg, 72, $noreg, %139:gr64 :: (store 8 into stack + 72)
8384B	  %140:gr64 = LEA64r $rip, 1, $noreg, @bt__str_34__g__Wall__, $noreg
8400B	  MOV64mr $rsp, 1, $noreg, 64, $noreg, %140:gr64 :: (store 8 into stack + 64)
8416B	  %141:gr64 = LEA64r $rip, 1, $noreg, @bt__str_33__I___commo, $noreg
8432B	  MOV64mr $rsp, 1, $noreg, 56, $noreg, %141:gr64 :: (store 8 into stack + 56)
8448B	  %142:gr64 = LEA64r $rip, 1, $noreg, @bt__str_32__lm_, $noreg
8464B	  MOV64mr $rsp, 1, $noreg, 48, $noreg, %142:gr64 :: (store 8 into stack + 48)
8480B	  %143:gr64 = LEA64r $rip, 1, $noreg, @bt__str_31___CC__, $noreg
8496B	  MOV64mr $rsp, 1, $noreg, 40, $noreg, %143:gr64 :: (store 8 into stack + 40)
8512B	  %144:gr64 = LEA64r $rip, 1, $noreg, @bt__str_30_gcc_, $noreg
8528B	  MOV64mr $rsp, 1, $noreg, 32, $noreg, %144:gr64 :: (store 8 into stack + 32)
8544B	  %145:gr64 = LEA64r $rip, 1, $noreg, @bt__str_29_03_Nov_201, $noreg
8560B	  MOV64mr $rsp, 1, $noreg, 24, $noreg, %145:gr64 :: (store 8 into stack + 24)
8576B	  %146:gr64 = LEA64r $rip, 1, $noreg, @bt__str_28_3_3_1_, $noreg
8592B	  MOV64mr $rsp, 1, $noreg, 16, $noreg, %146:gr64 :: (store 8 into stack + 16)
8608B	  MOV32mr $rsp, 1, $noreg, 8, $noreg, %136:gr32 :: (store 4 into stack + 8)
8624B	  %147:gr64 = LEA64r $rip, 1, $noreg, @bt__str_27___________, $noreg
8640B	  MOV64mr $rsp, 1, $noreg, 0, $noreg, %147:gr64 :: (store 8 into stack)
8672B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_26_BT_, $noreg
8688B	  $esi = COPY %128:gr32
8704B	  $edx = COPY %130:gr32
8720B	  $ecx = COPY %131:gr32
8736B	  $r8d = COPY %132:gr32
8752B	  $r9d = COPY %133:gr32
8768B	  $xmm0 = COPY %134:fr64
8784B	  $xmm1 = COPY %135:fr64
8800B	  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
8816B	  ADJCALLSTACKUP64 88, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
8832B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
8848B	  PCN_STACKMAP 30, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %128.sub_8bit:gr32, %130:gr32, %131:gr32, %132:gr32, %133:gr32, %134:fr64, %135:fr64, %136:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
8864B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8880B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
8896B	  JCC_1 %bb.44, 4, implicit killed $eflags
8912B	  JMP_1 %bb.30

8928B	bb.30.if.then82:
	; predecessors: %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

8944B	  %149:gr32 = MOV32ri 1
8960B	  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %149:gr32 :: (store 4 into %ir.i)
8976B	  %214:gr64 = LEA64r %stack.11.trecs, 1, $noreg, 0, $noreg

8992B	bb.31.for.cond83:
	; predecessors: %bb.30, %bb.32
	  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

9008B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
9024B	  JCC_1 %bb.33, 15, implicit killed $eflags
9040B	  JMP_1 %bb.32

9056B	bb.32.for.body86:
	; predecessors: %bb.31
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

9072B	  %211:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
9088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9104B	  $edi = COPY %211:gr32
9120B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
9136B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
9152B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
9168B	  PCN_STACKMAP 31, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %211:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
9184B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9200B	  %212:fr64 = COPY killed $xmm0
9216B	  %213:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
9232B	  MOVSDmr %214:gr64, 8, %213:gr64_nosp, 0, $noreg, %212:fr64 :: (store 8 into %ir.arrayidx88)
9248B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
9264B	  JMP_1 %bb.31

9280B	bb.33.for.end91:
	; predecessors: %bb.31
	  successors: %bb.34(0x50000000), %bb.35(0x30000000); %bb.34(62.50%), %bb.35(37.50%)

9296B	  %152:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
9312B	  %153:fr64 = FsFLD0SD
9328B	  UCOMISDrr %152:fr64, %153:fr64, implicit-def $eflags
9344B	  JCC_1 %bb.35, 5, implicit $eflags
9360B	  JCC_1 %bb.35, 10, implicit killed $eflags
9376B	  JMP_1 %bb.34

9392B	bb.34.if.then94:
	; predecessors: %bb.33
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

9408B	  %154:gr64 = MOV64ri 4607182418800017408
9424B	  MOV64mr %stack.9.tmax, 1, $noreg, 0, $noreg, %154:gr64 :: (store 8 into %ir.tmax)

9440B	bb.35.if.end95:
	; predecessors: %bb.33, %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

9456B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9520B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_37___SECTION_, $noreg
9536B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
9552B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
9568B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
9584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
9600B	  PCN_STACKMAP 32, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
9616B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9632B	  %159:gr32 = MOV32ri 1
9648B	  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %159:gr32 :: (store 4 into %ir.i)
9664B	  %163:gr64 = LEA64r %stack.14.t_names, 1, $noreg, 0, $noreg
9680B	  %165:gr64 = LEA64r %stack.11.trecs, 1, $noreg, 0, $noreg
9696B	  %250:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)

9824B	bb.36.for.cond97:
	; predecessors: %bb.35, %bb.43
	  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

9840B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
9856B	  JCC_1 %bb.44, 15, implicit killed $eflags
9872B	  JMP_1 %bb.37

9888B	bb.37.for.body100:
	; predecessors: %bb.36
	  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

9904B	  %162:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
9920B	  %164:gr64 = MOV64rm %163:gr64, 8, %162:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx102)
9936B	  %166:fr64 = MOVSDrm_alt %165:gr64, 8, %162:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
9952B	  %168:fr64 = COPY %166:fr64
9968B	  %168:fr64 = MULSDrr %168:fr64(tied-def 0), %250:fr64
10000B	  %168:fr64 = DIVSDrm %168:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
10016B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10032B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_38_____8s__9_, $noreg
10048B	  $rsi = COPY %164:gr64
10064B	  $xmm0 = COPY %166:fr64
10080B	  $xmm1 = COPY %168:fr64
10096B	  $al = MOV8ri 2
10112B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
10128B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
10144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
10160B	  PCN_STACKMAP 33, 0, %168:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %164:gr64, %166:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
10176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10192B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
10208B	  JCC_1 %bb.39, 5, implicit killed $eflags
10224B	  JMP_1 %bb.38

10240B	bb.38.if.then112:
	; predecessors: %bb.37
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

10256B	  %197:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx113, align 16)
10288B	  %197:fr64 = ADDSDrm %197:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx114)
10320B	  %197:fr64 = ADDSDrm %197:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
10336B	  MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %197:fr64 :: (store 8 into %ir.t)
10352B	  %200:fr64 = COPY %197:fr64
10368B	  %200:fr64 = MULSDrr %200:fr64(tied-def 0), %250:fr64
10400B	  %200:fr64 = DIVSDrm %200:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
10416B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10432B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
10448B	  $rsi = LEA64r $rip, 1, $noreg, @bt__str_40_sub_rhs_, $noreg
10464B	  $xmm0 = COPY %197:fr64
10480B	  $xmm1 = COPY %200:fr64
10496B	  $al = MOV8ri 2
10512B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
10528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
10544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
10560B	  PCN_STACKMAP 34, 0, %200:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %197:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
10576B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10592B	  %206:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx121)
10624B	  %206:fr64 = SUBSDrm %206:fr64(tied-def 0), %stack.10.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
10640B	  MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %206:fr64 :: (store 8 into %ir.t)
10656B	  %208:fr64 = COPY %206:fr64
10672B	  %208:fr64 = MULSDrr %208:fr64(tied-def 0), %250:fr64
10704B	  %208:fr64 = DIVSDrm %208:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
10720B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10736B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
10752B	  $rsi = LEA64r $rip, 1, $noreg, @bt__str_41_rest_rhs_, $noreg
10768B	  $xmm0 = COPY %206:fr64
10784B	  $xmm1 = COPY %208:fr64
10800B	  $al = MOV8ri 2
10816B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
10832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
10848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
10864B	  PCN_STACKMAP 35, 0, %208:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %206:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
10880B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10896B	  JMP_1 %bb.43

10912B	bb.39.if.else126:
	; predecessors: %bb.37
	  successors: %bb.40(0x40000000), %bb.41(0x40000000); %bb.40(50.00%), %bb.41(50.00%)

10928B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 8, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
10944B	  JCC_1 %bb.41, 5, implicit killed $eflags
10960B	  JMP_1 %bb.40

10976B	bb.40.if.then129:
	; predecessors: %bb.39
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

10992B	  %188:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 64, $noreg :: (dereferenceable load 8 from %ir.arrayidx130, align 16)
11024B	  %188:fr64 = SUBSDrm %188:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx131)
11056B	  %188:fr64 = SUBSDrm %188:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
11072B	  MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %188:fr64 :: (store 8 into %ir.t)
11088B	  %190:fr64 = COPY %188:fr64
11104B	  %190:fr64 = MULSDrr %190:fr64(tied-def 0), %250:fr64
11136B	  %190:fr64 = DIVSDrm %190:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
11152B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11168B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
11184B	  $rsi = LEA64r $rip, 1, $noreg, @bt__str_42_sub_zsol_, $noreg
11200B	  $xmm0 = COPY %188:fr64
11216B	  $xmm1 = COPY %190:fr64
11232B	  $al = MOV8ri 2
11248B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
11264B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11296B	  PCN_STACKMAP 36, 0, %190:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %188:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
11312B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11328B	  JMP_1 %bb.43

11344B	bb.41.if.else138:
	; predecessors: %bb.39
	  successors: %bb.42(0x40000000), %bb.43(0x40000000); %bb.42(50.00%), %bb.43(50.00%)

11360B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 10, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
11376B	  JCC_1 %bb.43, 5, implicit killed $eflags
11392B	  JMP_1 %bb.42

11408B	bb.42.if.then141:
	; predecessors: %bb.41
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

11424B	  %179:fr64 = MOVSDrm_alt %stack.11.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx142)
11456B	  %179:fr64 = ADDSDrm %179:fr64(tied-def 0), %stack.11.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx143, align 16)
11472B	  MOVSDmr %stack.10.t, 1, $noreg, 0, $noreg, %179:fr64 :: (store 8 into %ir.t)
11488B	  %181:fr64 = COPY %179:fr64
11504B	  %181:fr64 = MULSDrr %181:fr64(tied-def 0), %250:fr64
11536B	  %181:fr64 = DIVSDrm %181:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
11552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11568B	  $rdi = LEA64r $rip, 1, $noreg, @bt__str_39__________8, $noreg
11584B	  $rsi = LEA64r $rip, 1, $noreg, @bt__str_43_redist_, $noreg
11600B	  $xmm0 = COPY %179:fr64
11616B	  $xmm1 = COPY %181:fr64
11632B	  $al = MOV8ri 2
11648B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
11664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11680B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11696B	  PCN_STACKMAP 37, 0, %181:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %179:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
11712B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

11728B	bb.43.if.end150:
	; predecessors: %bb.41, %bb.42, %bb.40, %bb.38
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

11744B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
11760B	  JMP_1 %bb.36

11776B	bb.44.if.end154:
	; predecessors: %bb.29, %bb.36
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

11792B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)

11808B	bb.45.return:
	; predecessors: %bb.44, %bb.13

11824B	  %249:gr32 = MOV32rm %stack.0.retval, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.retval)
11840B	  $eax = COPY %249:gr32
11856B	  RET 0, killed $eax

# End machine code for function main.

warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 17 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 17 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 17 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 17 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 17 across call to printf
