Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=128, align=16, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=1, align=4, at location [SP+8]
  fi#13: size=128, align=16, at location [SP+8]
  fi#14: size=8, align=8, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.000000e+00, align=8
  cp#1: 0x408B89645A1CAC08, align=8
  cp#2: -4.683910e+03, align=8
  cp#3: 1.148450e+04, align=8
  cp#4: -1.927240e+04, align=8
  cp#5: 1.000000e+06, align=8
  cp#6: 1.000000e+02, align=8
Function Live Ins: $edi in %0, $rsi in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $edi, $rsi
  %1:gr64 = COPY $rsi
  %0:gr32 = COPY $edi
  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_timer_flag, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @sp__str_1_r_, $noreg
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 0, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = COPY killed $rax
  MOV64mr %stack.14.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  JCC_1 %bb.2, 4, implicit killed $eflags
  JMP_1 %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %5:gr32 = MOV32ri 1
  MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
  %6:gr64 = LEA64r $rip, 1, $noreg, @sp__str_2_total_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
  %7:gr64 = LEA64r $rip, 1, $noreg, @sp__str_3_rhsx_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
  %8:gr64 = LEA64r $rip, 1, $noreg, @sp__str_4_rhsy_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
  %9:gr64 = LEA64r $rip, 1, $noreg, @sp__str_5_rhsz_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
  %10:gr64 = LEA64r $rip, 1, $noreg, @sp__str_6_rhs_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
  %11:gr64 = LEA64r $rip, 1, $noreg, @sp__str_7_xsolve_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
  %12:gr64 = LEA64r $rip, 1, $noreg, @sp__str_8_ysolve_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
  %13:gr64 = LEA64r $rip, 1, $noreg, @sp__str_9_zsolve_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
  %14:gr64 = LEA64r $rip, 1, $noreg, @sp__str_10_redist1_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
  %15:gr64 = LEA64r $rip, 1, $noreg, @sp__str_11_redist2_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
  %16:gr64 = LEA64r $rip, 1, $noreg, @sp__str_12_tzetar_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 112, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10, align 16)
  %17:gr64 = LEA64r $rip, 1, $noreg, @sp__str_13_ninvr_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 104, $noreg, %17:gr64 :: (store 8 into %ir.arrayidx11)
  %18:gr64 = LEA64r $rip, 1, $noreg, @sp__str_14_pinvr_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 96, $noreg, %18:gr64 :: (store 8 into %ir.arrayidx12, align 16)
  %19:gr64 = LEA64r $rip, 1, $noreg, @sp__str_15_txinvr_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 88, $noreg, %19:gr64 :: (store 8 into %ir.arrayidx13)
  %20:gr64 = LEA64r $rip, 1, $noreg, @sp__str_16_add_, $noreg
  MOV64mr %stack.13.t_names, 1, $noreg, 120, $noreg, %20:gr64 :: (store 8 into %ir.arrayidx14)
  %21:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 1, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %21:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0 :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.9(0x30000000); %bb.4(62.50%), %bb.9(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_17____NAS_Par, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 2, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_18_inputsp_da, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @sp__str_1_r_, $noreg
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 3, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %29:gr64 = COPY killed $rax
  MOV64mr %stack.14.fp, 1, $noreg, 0, $noreg, %29:gr64 :: (store 8 into %ir.fp)
  TEST64rr %29:gr64, %29:gr64, implicit-def $eflags
  JCC_1 %bb.9, 4, implicit killed $eflags
  JMP_1 %bb.4

bb.4.if.then19:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_19__Reading_f, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 4, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %42:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %42:gr64
  $rsi = LEA64r $rip, 1, $noreg, @sp__str_20__d_, $noreg
  $rdx = LEA64r %stack.4.niter, 1, $noreg, 0, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 5, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %42:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr32 = COPY killed $eax
  MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %45:gr32 :: (store 4 into %ir.result)

bb.5.while.cond:
; predecessors: %bb.4, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %46:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %46:gr64
  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 6, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %46:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY killed $eax
  CMP32ri8 %47:gr32, 10, implicit-def $eflags
  JCC_1 %bb.5, 5, implicit killed $eflags
  JMP_1 %bb.6

bb.6.while.end:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %49:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %49:gr64
  $rsi = LEA64r $rip, 1, $noreg, @sp__str_21__lf_, $noreg
  $rdx = LEA64r $rip, 1, $noreg, @dt, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 7, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %49:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %54:gr32 = COPY killed $eax
  MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %54:gr32 :: (store 4 into %ir.result)

bb.7.while.cond25:
; predecessors: %bb.6, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  %55:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %55:gr64
  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 8, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %55:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %56:gr32 = COPY killed $eax
  CMP32ri8 %56:gr32, 10, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit killed $eflags
  JMP_1 %bb.8

bb.8.while.end29:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %58:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %58:gr64
  $rsi = LEA64r $rip, 1, $noreg, @sp__str_22__d_d_d_, $noreg
  $rdx = LEA64r $rip, 1, $noreg, @grid_points, $noreg
  $rcx = nuw LEA64r $rip, 1, $noreg, @grid_points + 4, $noreg
  $r8 = nuw LEA64r $rip, 1, $noreg, @grid_points + 8, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 9, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %58:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %65:gr32 = COPY killed $eax
  MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %65:gr32 :: (store 4 into %ir.result)
  %66:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %66:gr64
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 10, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %66:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.10

bb.9.if.else32:
; predecessors: %bb.3
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_23__No_input_, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 11, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = MOV32ri 400
  MOV32mr %stack.4.niter, 1, $noreg, 0, $noreg, %34:gr32 :: (store 4 into %ir.niter)
  %35:gr64 = MOV64ri 4562254508917369340
  MOV64mr $rip, 1, $noreg, @dt, $noreg, %35:gr64 :: (store 8 into @dt)
  %36:gr64 = MOV64ri 438086664294
  MOV64mr $rip, 1, $noreg, @grid_points, $noreg, %36:gr64 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  %37:gr32 = MOV32ri 102
  MOV32mr $rip, 1, $noreg, @grid_points + 8, $noreg, %37:gr32 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

bb.10.if.end34:
; predecessors: %bb.9, %bb.8
  successors: %bb.13(0x40000000), %bb.11(0x40000000); %bb.13(50.00%), %bb.11(50.00%)

  %68:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %69:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %70:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_24__Size___4d, $noreg
  $esi = COPY %68:gr32
  $edx = COPY %69:gr32
  $ecx = COPY %70:gr32
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 12, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %68:gr32, %69:gr32, %70:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %75:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  %76:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dt, $noreg :: (dereferenceable load 8 from @dt)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_25__Iteration, $noreg
  $esi = COPY %75:gr32
  $xmm0 = COPY %76:fr64
  $al = MOV8ri 1
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 13, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %75:gr32, %76:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_26___, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 14, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @grid_points, $noreg, 102, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  JCC_1 %bb.13, 15, implicit killed $eflags
  JMP_1 %bb.11

bb.11.lor.lhs.false:
; predecessors: %bb.10
  successors: %bb.13(0x40000000), %bb.12(0x40000000); %bb.13(50.00%), %bb.12(50.00%)

  CMP32mi8 $rip, 1, $noreg, @grid_points + 4, $noreg, 102, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  JCC_1 %bb.13, 15, implicit killed $eflags
  JMP_1 %bb.12

bb.12.lor.lhs.false40:
; predecessors: %bb.11
  successors: %bb.13(0x40000000), %bb.14(0x40000000); %bb.13(50.00%), %bb.14(50.00%)

  CMP32mi8 $rip, 1, $noreg, @grid_points + 8, $noreg, 103, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.13

bb.13.if.then42:
; predecessors: %bb.10, %bb.11, %bb.12
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  %248:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %249:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %250:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_27___d___d___, $noreg
  $esi = COPY %248:gr32
  $edx = COPY %249:gr32
  $ecx = COPY %250:gr32
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 15, 0, 0, %stack.0.retval, 0, %248:gr32, %249:gr32, %250:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.0.retval, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_28__Problem_s, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 16, 0, 0, %stack.0.retval, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.0.retval, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  JMP_1 %bb.45

bb.14.if.end45:
; predecessors: %bb.12
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %89:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %89:gr32 = ADD32ri8 %89:gr32(tied-def 0), -2, implicit-def dead $eflags
  MOV32mr $rip, 1, $noreg, @nx2, $noreg, %89:gr32 :: (store 4 into @nx2)
  %91:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %91:gr32 = ADD32ri8 %91:gr32(tied-def 0), -2, implicit-def dead $eflags
  MOV32mr $rip, 1, $noreg, @ny2, $noreg, %91:gr32 :: (store 4 into @ny2)
  %93:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  %93:gr32 = ADD32ri8 %93:gr32(tied-def 0), -2, implicit-def dead $eflags
  MOV32mr $rip, 1, $noreg, @nz2, $noreg, %93:gr32 :: (store 4 into @nz2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @set_constants, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 17, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %96:gr32 = MOV32ri 1
  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %96:gr32 :: (store 4 into %ir.i)

bb.15.for.cond:
; predecessors: %bb.14, %bb.16
  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.17, 15, implicit killed $eflags
  JMP_1 %bb.16

bb.16.for.body:
; predecessors: %bb.15
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %247:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %247:gr32
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 18, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %247:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.15

bb.17.for.end:
; predecessors: %bb.15
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @exact_rhs, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 19, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @initialize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 20, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @adi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 21, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @initialize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 22, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %101:gr32 = MOV32ri 1
  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %101:gr32 :: (store 4 into %ir.i)

bb.18.for.cond49:
; predecessors: %bb.17, %bb.19
  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.20, 15, implicit killed $eflags
  JMP_1 %bb.19

bb.19.for.body51:
; predecessors: %bb.18
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %246:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %246:gr32
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 23, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %246:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.18

bb.20.for.end54:
; predecessors: %bb.18
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %104:gr32 = MOV32ri 1
  $edi = MOV32ri 1
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 24, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.5.step, 1, $noreg, 0, $noreg, %104:gr32 :: (store 4 into %ir.step)
  %225:gr64 = MOV32ri64 1717986919

bb.21.for.cond55:
; predecessors: %bb.20, %bb.25
  successors: %bb.22(0x7c000000), %bb.26(0x04000000); %bb.22(96.88%), %bb.26(3.12%)

  %105:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  CMP32rm %105:gr32, %stack.4.niter, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.niter)
  JCC_1 %bb.26, 15, implicit killed $eflags
  JMP_1 %bb.22

bb.22.for.body57:
; predecessors: %bb.21
  successors: %bb.24(0x30000000), %bb.23(0x50000000); %bb.24(37.50%), %bb.23(62.50%)

  %223:gr64_with_sub_8bit = MOVSX64rm32 %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  %233:gr64_nosp = COPY %223:gr64_with_sub_8bit
  %233:gr64_nosp = IMUL64rr %233:gr64_nosp(tied-def 0), %225:gr64, implicit-def dead $eflags
  %227:gr64_with_sub_8bit = COPY %233:gr64_nosp
  %227:gr64_with_sub_8bit = SHR64ri %227:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
  %233:gr64_nosp = SAR64ri %233:gr64_nosp(tied-def 0), 35, implicit-def dead $eflags
  %233.sub_32bit:gr64_nosp = ADD32rr %233.sub_32bit:gr64_nosp(tied-def 0), %227.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
  %233.sub_32bit:gr64_nosp = SHL32ri %233.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
  %235:gr32 = LEA64_32r %233:gr64_nosp, 4, %233:gr64_nosp, 0, $noreg
  CMP32rr %223.sub_32bit:gr64_with_sub_8bit, %235:gr32, implicit-def $eflags
  JCC_1 %bb.24, 4, implicit killed $eflags
  JMP_1 %bb.23

bb.23.lor.lhs.false59:
; predecessors: %bb.22
  successors: %bb.24(0x40000000), %bb.25(0x40000000); %bb.24(50.00%), %bb.25(50.00%)

  CMP32mi8 %stack.5.step, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (dereferenceable load 4 from %ir.step)
  JCC_1 %bb.25, 5, implicit killed $eflags
  JMP_1 %bb.24

bb.24.if.then61:
; predecessors: %bb.22, %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %239:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_29__Time_step, $noreg
  $esi = COPY %239:gr32
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 25, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %239:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.25.if.end63:
; predecessors: %bb.23, %bb.24
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @adi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 26, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.5.step, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.step), (dereferenceable load 4 from %ir.step)
  JMP_1 %bb.21

bb.26.for.end66:
; predecessors: %bb.21
  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 27, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 28, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %108:fr64 = COPY killed $xmm0
  MOVSDmr %stack.9.tmax, 1, $noreg, 0, $noreg, %108:fr64 :: (store 8 into %ir.tmax)
  %109:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %109:gr32
  $rsi = LEA64r %stack.12.Class, 1, $noreg, 0, $noreg
  $rdx = LEA64r %stack.11.verified, 1, $noreg, 0, $noreg
  CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 29, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %109:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %112:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  %113:fr64 = FsFLD0SD
  UCOMISDrr %112:fr64, %113:fr64, implicit-def $eflags
  JCC_1 %bb.27, 5, implicit $eflags
  JCC_1 %bb.27, 10, implicit killed $eflags
  JMP_1 %bb.28

bb.27.if.then69:
; predecessors: %bb.26
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  %120:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %115:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %117:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  %118:gr32 = COPY %115:gr32
  %118:gr32 = IMUL32rr %118:gr32(tied-def 0), %117:gr32, implicit-def dead $eflags
  %118:gr32 = IMUL32rr %118:gr32(tied-def 0), %120:gr32, implicit-def dead $eflags
  MOV32mr %stack.6.n3, 1, $noreg, 0, $noreg, %118:gr32 :: (store 4 into %ir.n3)
  %120:gr32 = nsw ADD32rr %120:gr32(tied-def 0), %115:gr32, implicit-def dead $eflags
  %120:gr32 = nsw ADD32rr %120:gr32(tied-def 0), %117:gr32, implicit-def dead $eflags
  %128:fr64 = CVTSI2SDrr %120:gr32
  %128:fr64 = DIVSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %128:fr64 :: (store 8 into %ir.t)
  %124:fr64 = CVTSI2SDrr %118:gr32
  %124:fr64 = MULSDrm %124:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  %126:fr64 = COPY %128:fr64
  %126:fr64 = MULSDrr %126:fr64(tied-def 0), %126:fr64
  %126:fr64 = MULSDrm %126:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  %126:fr64 = ADDSDrr %126:fr64(tied-def 0), %124:fr64
  %128:fr64 = MULSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  %128:fr64 = ADDSDrr %128:fr64(tied-def 0), %126:fr64
  %128:fr64 = ADDSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  %135:fr64 = CVTSI2SDrm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  %135:fr64 = MULSDrr %135:fr64(tied-def 0), %128:fr64
  %134:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  %134:fr64 = MULSDrm %134:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  %135:fr64 = DIVSDrr %135:fr64(tied-def 0), %134:fr64
  MOVSDmr %stack.7.mflops, 1, $noreg, 0, $noreg, %135:fr64 :: (store 8 into %ir.mflops)
  JMP_1 %bb.29

bb.28.if.else84:
; predecessors: %bb.26
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  MOV64mi32 %stack.7.mflops, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.mflops)

bb.29.if.end85:
; predecessors: %bb.28, %bb.27
  successors: %bb.30(0x50000000), %bb.44(0x30000000); %bb.30(62.50%), %bb.44(37.50%)

  %136:gr32 = MOVSX32rm8 %stack.12.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
  %138:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %139:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %140:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  %141:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  %142:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  %143:fr64 = MOVSDrm_alt %stack.7.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
  %144:gr32 = MOV32rm %stack.11.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
  ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %145:gr64 = LEA64r $rip, 1, $noreg, @sp__str_40__none__, $noreg
  MOV64mr $rsp, 1, $noreg, 80, $noreg, %145:gr64 :: (store 8 into stack + 80)
  %147:gr64 = LEA64r $rip, 1, $noreg, @sp__str_39__O3__mcmod, $noreg
  MOV64mr $rsp, 1, $noreg, 72, $noreg, %147:gr64 :: (store 8 into stack + 72)
  %148:gr64 = LEA64r $rip, 1, $noreg, @sp__str_38__g__Wall__, $noreg
  MOV64mr $rsp, 1, $noreg, 64, $noreg, %148:gr64 :: (store 8 into stack + 64)
  %149:gr64 = LEA64r $rip, 1, $noreg, @sp__str_37__I___commo, $noreg
  MOV64mr $rsp, 1, $noreg, 56, $noreg, %149:gr64 :: (store 8 into stack + 56)
  %150:gr64 = LEA64r $rip, 1, $noreg, @sp__str_36__lm_, $noreg
  MOV64mr $rsp, 1, $noreg, 48, $noreg, %150:gr64 :: (store 8 into stack + 48)
  %151:gr64 = LEA64r $rip, 1, $noreg, @sp__str_35___CC__, $noreg
  MOV64mr $rsp, 1, $noreg, 40, $noreg, %151:gr64 :: (store 8 into stack + 40)
  %152:gr64 = LEA64r $rip, 1, $noreg, @sp__str_34_gcc_, $noreg
  MOV64mr $rsp, 1, $noreg, 32, $noreg, %152:gr64 :: (store 8 into stack + 32)
  %153:gr64 = LEA64r $rip, 1, $noreg, @sp__str_33_03_Nov_201, $noreg
  MOV64mr $rsp, 1, $noreg, 24, $noreg, %153:gr64 :: (store 8 into stack + 24)
  %154:gr64 = LEA64r $rip, 1, $noreg, @sp__str_32_3_3_1_, $noreg
  MOV64mr $rsp, 1, $noreg, 16, $noreg, %154:gr64 :: (store 8 into stack + 16)
  MOV32mr $rsp, 1, $noreg, 8, $noreg, %144:gr32 :: (store 4 into stack + 8)
  %155:gr64 = LEA64r $rip, 1, $noreg, @sp__str_31___________, $noreg
  MOV64mr $rsp, 1, $noreg, 0, $noreg, %155:gr64 :: (store 8 into stack)
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_30_SP_, $noreg
  $esi = COPY %136:gr32
  $edx = COPY %138:gr32
  $ecx = COPY %139:gr32
  $r8d = COPY %140:gr32
  $r9d = COPY %141:gr32
  $xmm0 = COPY %142:fr64
  $xmm1 = COPY %143:fr64
  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 88, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 30, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %136.sub_8bit:gr32, %138:gr32, %139:gr32, %140:gr32, %141:gr32, %142:fr64, %143:fr64, %144:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.44, 4, implicit killed $eflags
  JMP_1 %bb.30

bb.30.if.then86:
; predecessors: %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %157:gr32 = MOV32ri 1
  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %157:gr32 :: (store 4 into %ir.i)
  %222:gr64 = LEA64r %stack.10.trecs, 1, $noreg, 0, $noreg

bb.31.for.cond87:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.33, 15, implicit killed $eflags
  JMP_1 %bb.32

bb.32.for.body90:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %219:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %219:gr32
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 31, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %219:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %220:fr64 = COPY killed $xmm0
  %221:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  MOVSDmr %222:gr64, 8, %221:gr64_nosp, 0, $noreg, %220:fr64 :: (store 8 into %ir.arrayidx92)
  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.31

bb.33.for.end95:
; predecessors: %bb.31
  successors: %bb.34(0x50000000), %bb.35(0x30000000); %bb.34(62.50%), %bb.35(37.50%)

  %160:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  %161:fr64 = FsFLD0SD
  UCOMISDrr %160:fr64, %161:fr64, implicit-def $eflags
  JCC_1 %bb.35, 5, implicit $eflags
  JCC_1 %bb.35, 10, implicit killed $eflags
  JMP_1 %bb.34

bb.34.if.then98:
; predecessors: %bb.33
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  %162:gr64 = MOV64ri 4607182418800017408
  MOV64mr %stack.9.tmax, 1, $noreg, 0, $noreg, %162:gr64 :: (store 8 into %ir.tmax)

bb.35.if.end99:
; predecessors: %bb.33, %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_41___SECTION_, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 32, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %167:gr32 = MOV32ri 1
  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %167:gr32 :: (store 4 into %ir.i)
  %171:gr64 = LEA64r %stack.13.t_names, 1, $noreg, 0, $noreg
  %173:gr64 = LEA64r %stack.10.trecs, 1, $noreg, 0, $noreg
  %259:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)

bb.36.for.cond101:
; predecessors: %bb.35, %bb.43
  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.44, 15, implicit killed $eflags
  JMP_1 %bb.37

bb.37.for.body104:
; predecessors: %bb.36
  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

  %170:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %172:gr64 = MOV64rm %171:gr64, 8, %170:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
  %174:fr64 = MOVSDrm_alt %173:gr64, 8, %170:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx110)
  %176:fr64 = COPY %174:fr64
  %176:fr64 = MULSDrr %176:fr64(tied-def 0), %259:fr64
  %176:fr64 = DIVSDrm %176:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_42_____8s__9_, $noreg
  $rsi = COPY %172:gr64
  $xmm0 = COPY %174:fr64
  $xmm1 = COPY %176:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 33, 0, %176:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %172:gr64, %174:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.39, 5, implicit killed $eflags
  JMP_1 %bb.38

bb.38.if.then116:
; predecessors: %bb.37
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %205:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
  %205:fr64 = ADDSDrm %205:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx118)
  %205:fr64 = ADDSDrm %205:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
  MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %205:fr64 :: (store 8 into %ir.t)
  %208:fr64 = COPY %205:fr64
  %208:fr64 = MULSDrr %208:fr64(tied-def 0), %259:fr64
  %208:fr64 = DIVSDrm %208:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @sp__str_44_sub_rhs_, $noreg
  $xmm0 = COPY %205:fr64
  $xmm1 = COPY %208:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 34, 0, %208:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %205:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %214:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx125)
  %214:fr64 = SUBSDrm %214:fr64(tied-def 0), %stack.8.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %214:fr64 :: (store 8 into %ir.t)
  %216:fr64 = COPY %214:fr64
  %216:fr64 = MULSDrr %216:fr64(tied-def 0), %259:fr64
  %216:fr64 = DIVSDrm %216:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @sp__str_45_rest_rhs_, $noreg
  $xmm0 = COPY %214:fr64
  $xmm1 = COPY %216:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 35, 0, %216:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %214:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.43

bb.39.if.else130:
; predecessors: %bb.37
  successors: %bb.40(0x40000000), %bb.41(0x40000000); %bb.40(50.00%), %bb.41(50.00%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 8, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.41, 5, implicit killed $eflags
  JMP_1 %bb.40

bb.40.if.then133:
; predecessors: %bb.39
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %196:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 64, $noreg :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
  %196:fr64 = SUBSDrm %196:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx135)
  %196:fr64 = SUBSDrm %196:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
  MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %196:fr64 :: (store 8 into %ir.t)
  %198:fr64 = COPY %196:fr64
  %198:fr64 = MULSDrr %198:fr64(tied-def 0), %259:fr64
  %198:fr64 = DIVSDrm %198:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @sp__str_46_sub_zsol_, $noreg
  $xmm0 = COPY %196:fr64
  $xmm1 = COPY %198:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 36, 0, %198:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %196:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.43

bb.41.if.else142:
; predecessors: %bb.39
  successors: %bb.42(0x40000000), %bb.43(0x40000000); %bb.42(50.00%), %bb.43(50.00%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 10, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.43, 5, implicit killed $eflags
  JMP_1 %bb.42

bb.42.if.then145:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %187:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx146)
  %187:fr64 = ADDSDrm %187:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
  MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %187:fr64 :: (store 8 into %ir.t)
  %189:fr64 = COPY %187:fr64
  %189:fr64 = MULSDrr %189:fr64(tied-def 0), %259:fr64
  %189:fr64 = DIVSDrm %189:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @sp__str_47_redist_, $noreg
  $xmm0 = COPY %187:fr64
  $xmm1 = COPY %189:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 37, 0, %189:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %187:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.43.if.end154:
; predecessors: %bb.41, %bb.42, %bb.40, %bb.38
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.36

bb.44.if.end158:
; predecessors: %bb.29, %bb.36
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)

bb.45.return:
; predecessors: %bb.44, %bb.13

  %257:gr32 = MOV32rm %stack.0.retval, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.retval)
  $eax = COPY %257:gr32
  RET 0, killed $eax

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %4:gr64 = COPY killed $rax
    To: JCC_1 %bb.2, 4, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %4:gr64 = COPY killed $rax
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%4
    SU(1): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(1):   MOV64mr %stack.14.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(2):   TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.14.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %4:gr64 = COPY killed $rax
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %4:gr64 = COPY killed $rax
SU(1):   MOV64mr %stack.14.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
SU(2):   TEST64rr %4:gr64, %4:gr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.0 entry
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_timer_flag, $noreg
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_timer_flag, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_1_r_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @sp__str_1_r_, $noreg
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_timer_flag, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_timer_flag, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_1_r_, $noreg

********** MI Scheduling **********
main:%bb.0 entry
  From: %1:gr64 = COPY $rsi
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 0 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %0:gr32 = COPY $edi
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:gr64 = COPY $rsi
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gr64 = COPY $rsi
SU(1):   %0:gr32 = COPY $edi
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)

********** MI Scheduling **********
main:%bb.1 if.then
  From: %5:gr32 = MOV32ri 1
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 33
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=2
Live In: 
Live Out: %21 
Live Thru: 
  LiveReg: %21
Top Pressure:

Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   %5:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%5
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %6:gr64 = LEA64r $rip, 1, $noreg, @sp__str_2_total_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%6
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr %stack.13.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
  # preds left       : 1
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%6
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %7:gr64 = LEA64r $rip, 1, $noreg, @sp__str_3_rhsx_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%7
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr %stack.13.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 2
  # succs left       : 13
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%7
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %8:gr64 = LEA64r $rip, 1, $noreg, @sp__str_4_rhsy_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%8
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr %stack.13.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
  # preds left       : 3
  # succs left       : 12
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%8
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %9:gr64 = LEA64r $rip, 1, $noreg, @sp__str_5_rhsz_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%9
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV64mr %stack.13.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 4
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%9
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %10:gr64 = LEA64r $rip, 1, $noreg, @sp__str_6_rhs_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%10
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   MOV64mr %stack.13.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
  # preds left       : 5
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%10
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %11:gr64 = LEA64r $rip, 1, $noreg, @sp__str_7_xsolve_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%11
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV64mr %stack.13.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 6
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%11
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %12:gr64 = LEA64r $rip, 1, $noreg, @sp__str_8_ysolve_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%12
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   MOV64mr %stack.13.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
  # preds left       : 7
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%12
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %13:gr64 = LEA64r $rip, 1, $noreg, @sp__str_9_zsolve_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%13
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(17):   MOV64mr %stack.13.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 8
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%13
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   %14:gr64 = LEA64r $rip, 1, $noreg, @sp__str_10_redist1_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(19): Data Latency=1 Reg=%14
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(19):   MOV64mr %stack.13.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
  # preds left       : 9
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%14
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(20):   %15:gr64 = LEA64r $rip, 1, $noreg, @sp__str_11_redist2_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(21): Data Latency=1 Reg=%15
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(21):   MOV64mr %stack.13.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 10
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(20): Data Latency=1 Reg=%15
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(22):   %16:gr64 = LEA64r $rip, 1, $noreg, @sp__str_12_tzetar_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(23): Data Latency=1 Reg=%16
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(23):   MOV64mr %stack.13.t_names, 1, $noreg, 112, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10, align 16)
  # preds left       : 11
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(22): Data Latency=1 Reg=%16
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %17:gr64 = LEA64r $rip, 1, $noreg, @sp__str_13_ninvr_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(25): Data Latency=1 Reg=%17
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(25):   MOV64mr %stack.13.t_names, 1, $noreg, 104, $noreg, %17:gr64 :: (store 8 into %ir.arrayidx11)
  # preds left       : 12
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(24): Data Latency=1 Reg=%17
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(26):   %18:gr64 = LEA64r $rip, 1, $noreg, @sp__str_14_pinvr_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(27): Data Latency=1 Reg=%18
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(27):   MOV64mr %stack.13.t_names, 1, $noreg, 96, $noreg, %18:gr64 :: (store 8 into %ir.arrayidx12, align 16)
  # preds left       : 13
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(26): Data Latency=1 Reg=%18
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(28):   %19:gr64 = LEA64r $rip, 1, $noreg, @sp__str_15_txinvr_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(29): Data Latency=1 Reg=%19
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(29):   MOV64mr %stack.13.t_names, 1, $noreg, 88, $noreg, %19:gr64 :: (store 8 into %ir.arrayidx13)
  # preds left       : 14
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(28): Data Latency=1 Reg=%19
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(30):   %20:gr64 = LEA64r $rip, 1, $noreg, @sp__str_16_add_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(31): Data Latency=1 Reg=%20
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(31):   MOV64mr %stack.13.t_names, 1, $noreg, 120, $noreg, %20:gr64 :: (store 8 into %ir.arrayidx14)
  # preds left       : 15
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(30): Data Latency=1 Reg=%20
    SU(29): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(32):   %21:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(32): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 1 32 
  Cand SU(31) ORDER                              
  Cand SU(32) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(32) %21:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
Bottom Pressure:

  Ready @3c
  BotQ.A BotLatency SU(32) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 1 
  Cand SU(31) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) MOV64mr %stack.13.t_names, 1, $noreg, 120, $noreg, %20:gr64 :: (store 8 into %ir.arrayidx14)
Bottom Pressure:
GR16=2
  LiveReg: %20
  UpdateRegP: SU(31) MOV64mr %stack.13.t_names, 1, $noreg, 120, $noreg, %20:gr64 :: (store 8 into %ir.arrayidx14)
              to 
  Ready @0c
  BotQ.A TopLatency SU(31) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 30 29 
  Cand SU(1) ORDER                              
  Cand SU(30) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(30) %20:gr64 = LEA64r $rip, 1, $noreg, @sp__str_16_add_, $noreg
Bottom Pressure:

  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 29 
  Cand SU(1) ORDER                              
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) MOV64mr %stack.13.t_names, 1, $noreg, 88, $noreg, %19:gr64 :: (store 8 into %ir.arrayidx13)
Bottom Pressure:
GR16=2
  LiveReg: %19
  UpdateRegP: SU(29) MOV64mr %stack.13.t_names, 1, $noreg, 88, $noreg, %19:gr64 :: (store 8 into %ir.arrayidx13)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 28 27 
  Cand SU(1) ORDER                              
  Cand SU(28) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(28) %19:gr64 = LEA64r $rip, 1, $noreg, @sp__str_15_txinvr_, $noreg
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 27 
  Cand SU(1) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) MOV64mr %stack.13.t_names, 1, $noreg, 96, $noreg, %18:gr64 :: (store 8 into %ir.arrayidx12, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %18
  UpdateRegP: SU(27) MOV64mr %stack.13.t_names, 1, $noreg, 96, $noreg, %18:gr64 :: (store 8 into %ir.arrayidx12, align 16)
              to 
  Ready @1c
  BotQ.A TopLatency SU(27) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 26 25 
  Cand SU(1) ORDER                              
  Cand SU(26) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(26) %18:gr64 = LEA64r $rip, 1, $noreg, @sp__str_14_pinvr_, $noreg
Bottom Pressure:

  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 25 
  Cand SU(1) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) MOV64mr %stack.13.t_names, 1, $noreg, 104, $noreg, %17:gr64 :: (store 8 into %ir.arrayidx11)
Bottom Pressure:
GR16=2
  LiveReg: %17
  UpdateRegP: SU(25) MOV64mr %stack.13.t_names, 1, $noreg, 104, $noreg, %17:gr64 :: (store 8 into %ir.arrayidx11)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 24 23 
  Cand SU(1) ORDER                              
  Cand SU(24) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(24) %17:gr64 = LEA64r $rip, 1, $noreg, @sp__str_13_ninvr_, $noreg
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 23 
  Cand SU(1) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) MOV64mr %stack.13.t_names, 1, $noreg, 112, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %16
  UpdateRegP: SU(23) MOV64mr %stack.13.t_names, 1, $noreg, 112, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10, align 16)
              to 
  Ready @2c
  BotQ.A TopLatency SU(23) 1c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 22 21 
  Cand SU(1) ORDER                              
  Cand SU(22) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(22) %16:gr64 = LEA64r $rip, 1, $noreg, @sp__str_12_tzetar_, $noreg
Bottom Pressure:

  Ready @3c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 21 
  Cand SU(1) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) MOV64mr %stack.13.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %15
  UpdateRegP: SU(21) MOV64mr %stack.13.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
              to 
  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 20 19 
  Cand SU(1) ORDER                              
  Cand SU(20) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(20) %15:gr64 = LEA64r $rip, 1, $noreg, @sp__str_11_redist2_, $noreg
Bottom Pressure:

  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 19 
  Cand SU(1) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) MOV64mr %stack.13.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
Bottom Pressure:
GR16=2
  LiveReg: %14
  UpdateRegP: SU(19) MOV64mr %stack.13.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
              to 
  Ready @3c
  BotQ.A TopLatency SU(19) 1c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(18) %14:gr64 = LEA64r $rip, 1, $noreg, @sp__str_10_redist1_, $noreg
Bottom Pressure:

  Ready @4c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 17 
  Cand SU(1) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) MOV64mr %stack.13.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %13
  UpdateRegP: SU(17) MOV64mr %stack.13.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
              to 
  Ready @3c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 15 
  Cand SU(1) ORDER                              
  Cand SU(16) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(16) %13:gr64 = LEA64r $rip, 1, $noreg, @sp__str_9_zsolve_, $noreg
Bottom Pressure:

  Ready @4c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 15 
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV64mr %stack.13.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
Bottom Pressure:
GR16=2
  LiveReg: %12
  UpdateRegP: SU(15) MOV64mr %stack.13.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
              to 
  Ready @4c
  BotQ.A TopLatency SU(15) 1c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 14 13 
  Cand SU(1) ORDER                              
  Cand SU(14) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(14) %12:gr64 = LEA64r $rip, 1, $noreg, @sp__str_8_ysolve_, $noreg
Bottom Pressure:

  Ready @5c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 13 
  Cand SU(1) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mr %stack.13.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %11
  UpdateRegP: SU(13) MOV64mr %stack.13.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
              to 
  Ready @4c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 12 11 
  Cand SU(1) ORDER                              
  Cand SU(12) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(12) %11:gr64 = LEA64r $rip, 1, $noreg, @sp__str_7_xsolve_, $noreg
Bottom Pressure:

  Ready @5c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 11 
  Cand SU(1) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr %stack.13.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
Bottom Pressure:
GR16=2
  LiveReg: %10
  UpdateRegP: SU(11) MOV64mr %stack.13.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
              to 
  Ready @5c
  BotQ.A TopLatency SU(11) 1c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 10 9 
  Cand SU(1) ORDER                              
  Cand SU(10) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(10) %10:gr64 = LEA64r $rip, 1, $noreg, @sp__str_6_rhs_, $noreg
Bottom Pressure:

  Ready @6c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 9 
  Cand SU(1) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mr %stack.13.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %9
  UpdateRegP: SU(9) MOV64mr %stack.13.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
              to 
  Ready @5c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 7 
  Cand SU(1) ORDER                              
  Cand SU(8) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(8) %9:gr64 = LEA64r $rip, 1, $noreg, @sp__str_5_rhsz_, $noreg
Bottom Pressure:

  Ready @6c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr %stack.13.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
Bottom Pressure:
GR16=2
  LiveReg: %8
  UpdateRegP: SU(7) MOV64mr %stack.13.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
              to 
  Ready @6c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 5 
  Cand SU(1) ORDER                              
  Cand SU(6) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(6) %8:gr64 = LEA64r $rip, 1, $noreg, @sp__str_4_rhsy_, $noreg
Bottom Pressure:

  Ready @7c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr %stack.13.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %7
  UpdateRegP: SU(5) MOV64mr %stack.13.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
              to 
  Ready @6c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(4) %7:gr64 = LEA64r $rip, 1, $noreg, @sp__str_3_rhsx_, $noreg
Bottom Pressure:

  Ready @7c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr %stack.13.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
Bottom Pressure:
GR16=2
  LiveReg: %6
  UpdateRegP: SU(3) MOV64mr %stack.13.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
              to 
  Ready @7c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(2) %6:gr64 = LEA64r $rip, 1, $noreg, @sp__str_2_total_, $noreg
Bottom Pressure:

  Ready @8c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
Bottom Pressure:
GR16=2
  LiveReg: %5
  UpdateRegP: SU(1) MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
              to 
  Ready @7c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:gr32 = MOV32ri 1
Bottom Pressure:

  Ready @8c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %5:gr32 = MOV32ri 1
SU(1):   MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
SU(2):   %6:gr64 = LEA64r $rip, 1, $noreg, @sp__str_2_total_, $noreg
SU(3):   MOV64mr %stack.13.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
SU(4):   %7:gr64 = LEA64r $rip, 1, $noreg, @sp__str_3_rhsx_, $noreg
SU(5):   MOV64mr %stack.13.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
SU(6):   %8:gr64 = LEA64r $rip, 1, $noreg, @sp__str_4_rhsy_, $noreg
SU(7):   MOV64mr %stack.13.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
SU(8):   %9:gr64 = LEA64r $rip, 1, $noreg, @sp__str_5_rhsz_, $noreg
SU(9):   MOV64mr %stack.13.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
SU(10):   %10:gr64 = LEA64r $rip, 1, $noreg, @sp__str_6_rhs_, $noreg
SU(11):   MOV64mr %stack.13.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
SU(12):   %11:gr64 = LEA64r $rip, 1, $noreg, @sp__str_7_xsolve_, $noreg
SU(13):   MOV64mr %stack.13.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
SU(14):   %12:gr64 = LEA64r $rip, 1, $noreg, @sp__str_8_ysolve_, $noreg
SU(15):   MOV64mr %stack.13.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
SU(16):   %13:gr64 = LEA64r $rip, 1, $noreg, @sp__str_9_zsolve_, $noreg
SU(17):   MOV64mr %stack.13.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
SU(18):   %14:gr64 = LEA64r $rip, 1, $noreg, @sp__str_10_redist1_, $noreg
SU(19):   MOV64mr %stack.13.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
SU(20):   %15:gr64 = LEA64r $rip, 1, $noreg, @sp__str_11_redist2_, $noreg
SU(21):   MOV64mr %stack.13.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
SU(22):   %16:gr64 = LEA64r $rip, 1, $noreg, @sp__str_12_tzetar_, $noreg
SU(23):   MOV64mr %stack.13.t_names, 1, $noreg, 112, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10, align 16)
SU(24):   %17:gr64 = LEA64r $rip, 1, $noreg, @sp__str_13_ninvr_, $noreg
SU(25):   MOV64mr %stack.13.t_names, 1, $noreg, 104, $noreg, %17:gr64 :: (store 8 into %ir.arrayidx11)
SU(26):   %18:gr64 = LEA64r $rip, 1, $noreg, @sp__str_14_pinvr_, $noreg
SU(27):   MOV64mr %stack.13.t_names, 1, $noreg, 96, $noreg, %18:gr64 :: (store 8 into %ir.arrayidx12, align 16)
SU(28):   %19:gr64 = LEA64r $rip, 1, $noreg, @sp__str_15_txinvr_, $noreg
SU(29):   MOV64mr %stack.13.t_names, 1, $noreg, 88, $noreg, %19:gr64 :: (store 8 into %ir.arrayidx13)
SU(30):   %20:gr64 = LEA64r $rip, 1, $noreg, @sp__str_16_add_, $noreg
SU(31):   MOV64mr %stack.13.t_names, 1, $noreg, 120, $noreg, %20:gr64 :: (store 8 into %ir.arrayidx14)
SU(32):   %21:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %29:gr64 = COPY killed $rax
    To: JCC_1 %bb.9, 4, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %29:gr64 = COPY killed $rax
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%29
    SU(1): Data Latency=0 Reg=%29
  Single Issue       : false;
SU(1):   MOV64mr %stack.14.fp, 1, $noreg, 0, $noreg, %29:gr64 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%29
  Single Issue       : false;
SU(2):   TEST64rr %29:gr64, %29:gr64, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%29
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.9, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %29:gr64, %29:gr64, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.14.fp, 1, $noreg, 0, $noreg, %29:gr64 :: (store 8 into %ir.fp)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %29:gr64 = COPY killed $rax
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %29:gr64 = COPY killed $rax
SU(1):   MOV64mr %stack.14.fp, 1, $noreg, 0, $noreg, %29:gr64 :: (store 8 into %ir.fp)
SU(2):   TEST64rr %29:gr64, %29:gr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.3 if.end
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_18_inputsp_da, $noreg
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_18_inputsp_da, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_1_r_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @sp__str_1_r_, $noreg
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_18_inputsp_da, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_18_inputsp_da, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_1_r_, $noreg

********** MI Scheduling **********
main:%bb.3 if.end
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_17____NAS_Par, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_17____NAS_Par, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_17____NAS_Par, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_17____NAS_Par, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.4 if.then19
  From: %45:gr32 = COPY killed $eax
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %45:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%45
  Single Issue       : false;
SU(1):   MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %45:gr32 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%45
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %45:gr32 :: (store 4 into %ir.result)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %45:gr32 = COPY killed $eax
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %45:gr32 = COPY killed $eax
SU(1):   MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %45:gr32 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.4 if.then19
  From: $rdi = COPY %42:gr64
    To: CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %42:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_20__d_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = LEA64r %stack.4.niter, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %42:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = LEA64r %stack.4.niter, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @sp__str_20__d_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_20__d_, $noreg
SU(2):   $rdx = LEA64r %stack.4.niter, 1, $noreg, 0, $noreg
SU(0):   $rdi = COPY %42:gr64
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.4 if.then19
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_19__Reading_f, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_19__Reading_f, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_19__Reading_f, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_19__Reading_f, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.5 while.cond
  From: %47:gr32 = COPY killed $eax
    To: JCC_1 %bb.5, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %47:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%47
  Single Issue       : false;
SU(1):   CMP32ri8 %47:gr32, 10, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%47
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.5, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
Cyclic Critical Path: 0c
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32ri8 %47:gr32, 10, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %47:gr32 = COPY killed $eax
  Ready @1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %47:gr32 = COPY killed $eax
SU(1):   CMP32ri8 %47:gr32, 10, implicit-def $eflags

********** MI Scheduling **********
main:%bb.6 while.end
  From: %54:gr32 = COPY killed $eax
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %54:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%54
  Single Issue       : false;
SU(1):   MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %54:gr32 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%54
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %54:gr32 :: (store 4 into %ir.result)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %54:gr32 = COPY killed $eax
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %54:gr32 = COPY killed $eax
SU(1):   MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %54:gr32 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.6 while.end
  From: $rdi = COPY %49:gr64
    To: CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %49:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_21__lf_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @dt, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %49:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = LEA64r $rip, 1, $noreg, @dt, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @sp__str_21__lf_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_21__lf_, $noreg
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @dt, $noreg
SU(0):   $rdi = COPY %49:gr64
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.7 while.cond25
  From: %56:gr32 = COPY killed $eax
    To: JCC_1 %bb.7, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %56:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%56
  Single Issue       : false;
SU(1):   CMP32ri8 %56:gr32, 10, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%56
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.7, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
Cyclic Critical Path: 0c
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32ri8 %56:gr32, 10, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %56:gr32 = COPY killed $eax
  Ready @1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %56:gr32 = COPY killed $eax
SU(1):   CMP32ri8 %56:gr32, 10, implicit-def $eflags

********** MI Scheduling **********
main:%bb.8 while.end29
  From: %65:gr32 = COPY killed $eax
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %65:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%65
  Single Issue       : false;
SU(1):   MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %65:gr32 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%65
  Single Issue       : false;
SU(2):   %66:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %66:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %65:gr32 :: (store 4 into %ir.result)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %65:gr32 = COPY killed $eax
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %65:gr32 = COPY killed $eax
SU(1):   MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %65:gr32 :: (store 4 into %ir.result)
SU(2):   %66:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)

********** MI Scheduling **********
main:%bb.8 while.end29
  From: $rdi = COPY %58:gr64
    To: CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %58:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_22__d_d_d_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @grid_points, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $rcx = nuw LEA64r $rip, 1, $noreg, @grid_points + 4, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(4):   $r8 = nuw LEA64r $rip, 1, $noreg, @grid_points + 8, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(5):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %58:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 2 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8 = nuw LEA64r $rip, 1, $noreg, @grid_points + 8, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rcx = nuw LEA64r $rip, 1, $noreg, @grid_points + 4, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = LEA64r $rip, 1, $noreg, @grid_points, $noreg
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @sp__str_22__d_d_d_, $noreg
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_22__d_d_d_, $noreg
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @grid_points, $noreg
SU(3):   $rcx = nuw LEA64r $rip, 1, $noreg, @grid_points + 4, $noreg
SU(4):   $r8 = nuw LEA64r $rip, 1, $noreg, @grid_points + 8, $noreg
SU(0):   $rdi = COPY %58:gr64
SU(5):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.9 if.else32
  From: %34:gr32 = MOV32ri 400
    To: End RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %34:gr32 = MOV32ri 400
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%34
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr %stack.4.niter, 1, $noreg, 0, $noreg, %34:gr32 :: (store 4 into %ir.niter)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%34
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %35:gr64 = MOV64ri 4562254508917369340
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%35
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr $rip, 1, $noreg, @dt, $noreg, %35:gr64 :: (store 8 into @dt)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%35
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %36:gr64 = MOV64ri 438086664294
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%36
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr $rip, 1, $noreg, @grid_points, $noreg, %36:gr64 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%36
  Successors:
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %37:gr32 = MOV32ri 102
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%37
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV32mr $rip, 1, $noreg, @grid_points + 8, $noreg, %37:gr32 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%37
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 1 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr $rip, 1, $noreg, @grid_points + 8, $noreg, %37:gr32 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:
GR16=2
  LiveReg: %37
  UpdateRegP: SU(7) MOV32mr $rip, 1, $noreg, @grid_points + 8, $noreg, %37:gr32 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 6 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(6) %37:gr32 = MOV32ri 102
Bottom Pressure:

  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr $rip, 1, $noreg, @grid_points, $noreg, %36:gr64 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
Bottom Pressure:
GR16=2
  LiveReg: %36
  UpdateRegP: SU(5) MOV64mr $rip, 1, $noreg, @grid_points, $noreg, %36:gr64 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(4) %36:gr64 = MOV64ri 438086664294
Bottom Pressure:

  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr $rip, 1, $noreg, @dt, $noreg, %35:gr64 :: (store 8 into @dt)
Bottom Pressure:
GR16=2
  LiveReg: %35
  UpdateRegP: SU(3) MOV64mr $rip, 1, $noreg, @dt, $noreg, %35:gr64 :: (store 8 into @dt)
              to 
  Ready @1c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(2) %35:gr64 = MOV64ri 4562254508917369340
Bottom Pressure:

  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.4.niter, 1, $noreg, 0, $noreg, %34:gr32 :: (store 4 into %ir.niter)
Bottom Pressure:
GR16=2
  LiveReg: %34
  UpdateRegP: SU(1) MOV32mr %stack.4.niter, 1, $noreg, 0, $noreg, %34:gr32 :: (store 4 into %ir.niter)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %34:gr32 = MOV32ri 400
Bottom Pressure:

  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %34:gr32 = MOV32ri 400
SU(1):   MOV32mr %stack.4.niter, 1, $noreg, 0, $noreg, %34:gr32 :: (store 4 into %ir.niter)
SU(2):   %35:gr64 = MOV64ri 4562254508917369340
SU(3):   MOV64mr $rip, 1, $noreg, @dt, $noreg, %35:gr64 :: (store 8 into @dt)
SU(4):   %36:gr64 = MOV64ri 438086664294
SU(5):   MOV64mr $rip, 1, $noreg, @grid_points, $noreg, %36:gr64 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
SU(6):   %37:gr32 = MOV32ri 102
SU(7):   MOV32mr $rip, 1, $noreg, @grid_points + 8, $noreg, %37:gr32 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.9 if.else32
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_23__No_input_, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_23__No_input_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_23__No_input_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_23__No_input_, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.10 if.end34
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_26___, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_26___, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_26___, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_26___, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.10 if.end34
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_25__Iteration, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_25__Iteration, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %75:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %76:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %76:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %75:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_25__Iteration, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_25__Iteration, $noreg
SU(1):   $esi = COPY %75:gr32
SU(2):   $xmm0 = COPY %76:fr64
SU(3):   $al = MOV8ri 1

********** MI Scheduling **********
main:%bb.10 if.end34
  From: %75:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %75:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %76:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dt, $noreg :: (dereferenceable load 8 from @dt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %76:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dt, $noreg :: (dereferenceable load 8 from @dt)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %75:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %75:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
SU(1):   %76:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dt, $noreg :: (dereferenceable load 8 from @dt)

********** MI Scheduling **********
main:%bb.10 if.end34
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_24__Size___4d, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_24__Size___4d, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %68:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %69:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %70:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $ecx = COPY %70:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %69:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %68:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_24__Size___4d, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_24__Size___4d, $noreg
SU(1):   $esi = COPY %68:gr32
SU(2):   $edx = COPY %69:gr32
SU(3):   $ecx = COPY %70:gr32
SU(4):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.10 if.end34
  From: %68:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %68:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %69:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %70:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %70:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %69:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %68:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %68:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(1):   %69:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(2):   %70:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.13 if.then42
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_28__Problem_s, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_28__Problem_s, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_28__Problem_s, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_28__Problem_s, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.13 if.then42
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_27___d___d___, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_27___d___d___, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %248:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %249:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %250:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $ecx = COPY %250:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %249:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %248:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_27___d___d___, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_27___d___d___, $noreg
SU(1):   $esi = COPY %248:gr32
SU(2):   $edx = COPY %249:gr32
SU(3):   $ecx = COPY %250:gr32
SU(4):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.13 if.then42
  From: %248:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %248:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %249:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %250:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %250:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %249:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %248:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %248:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(1):   %249:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(2):   %250:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.14 if.end45
  From: %96:gr32 = MOV32ri 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %96:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%96
  Single Issue       : false;
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %96:gr32 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%96
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %96:gr32 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %96:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %96:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %96:gr32 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.14 if.end45
  From: %89:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %89:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%89
    SU(1): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %89:gr32 = ADD32ri8 %89:gr32(tied-def 0), -2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%89
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%89
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOV32mr $rip, 1, $noreg, @nx2, $noreg, %89:gr32 :: (store 4 into @nx2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%89
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(3):   %91:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%91
    SU(4): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %91:gr32 = ADD32ri8 %91:gr32(tied-def 0), -2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%91
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%91
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOV32mr $rip, 1, $noreg, @ny2, $noreg, %91:gr32 :: (store 4 into @ny2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%91
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %93:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=%93
    SU(7): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %93:gr32 = ADD32ri8 %93:gr32(tied-def 0), -2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%93
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%93
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOV32mr $rip, 1, $noreg, @nz2, $noreg, %93:gr32 :: (store 4 into @nz2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%93
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 2 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV32mr $rip, 1, $noreg, @nz2, $noreg, %93:gr32 :: (store 4 into @nz2)
Bottom Pressure:
GR16=2
  LiveReg: %93
  UpdateRegP: SU(8) MOV32mr $rip, 1, $noreg, @nz2, $noreg, %93:gr32 :: (store 4 into @nz2)
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 7 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(7) %93:gr32 = ADD32ri8 %93:gr32(tied-def 0), -2, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %93
  UpdateRegP: SU(7) %93:gr32 = ADD32ri8 %93:gr32(tied-def 0), -2, implicit-def dead $eflags
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(7) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 6 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(6) %93:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(6) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr $rip, 1, $noreg, @ny2, $noreg, %91:gr32 :: (store 4 into @ny2)
Bottom Pressure:
GR16=2
  LiveReg: %91
  UpdateRegP: SU(5) MOV32mr $rip, 1, $noreg, @ny2, $noreg, %91:gr32 :: (store 4 into @ny2)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(4) %91:gr32 = ADD32ri8 %91:gr32(tied-def 0), -2, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %91
  UpdateRegP: SU(4) %91:gr32 = ADD32ri8 %91:gr32(tied-def 0), -2, implicit-def dead $eflags
              to GR16 -2
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(3) %91:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
Bottom Pressure:

  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr $rip, 1, $noreg, @nx2, $noreg, %89:gr32 :: (store 4 into @nx2)
Bottom Pressure:
GR16=2
  LiveReg: %89
  UpdateRegP: SU(2) MOV32mr $rip, 1, $noreg, @nx2, $noreg, %89:gr32 :: (store 4 into @nx2)
              to 
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %89:gr32 = ADD32ri8 %89:gr32(tied-def 0), -2, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %89
  UpdateRegP: SU(1) %89:gr32 = ADD32ri8 %89:gr32(tied-def 0), -2, implicit-def dead $eflags
              to GR16 -2
  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %89:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
Bottom Pressure:

  Ready @6c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %89:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(1):   %89:gr32 = ADD32ri8 %89:gr32(tied-def 0), -2, implicit-def dead $eflags
SU(2):   MOV32mr $rip, 1, $noreg, @nx2, $noreg, %89:gr32 :: (store 4 into @nx2)
SU(3):   %91:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(4):   %91:gr32 = ADD32ri8 %91:gr32(tied-def 0), -2, implicit-def dead $eflags
SU(5):   MOV32mr $rip, 1, $noreg, @ny2, $noreg, %91:gr32 :: (store 4 into @ny2)
SU(6):   %93:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(7):   %93:gr32 = ADD32ri8 %93:gr32(tied-def 0), -2, implicit-def dead $eflags
SU(8):   MOV32mr $rip, 1, $noreg, @nz2, $noreg, %93:gr32 :: (store 4 into @nz2)

********** MI Scheduling **********
main:%bb.17 for.end
  From: %101:gr32 = MOV32ri 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %101:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%101
  Single Issue       : false;
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %101:gr32 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%101
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %101:gr32 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %101:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %101:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %101:gr32 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.20 for.end54
  From: MOV32mr %stack.5.step, 1, $noreg, 0, $noreg, %104:gr32 :: (store 4 into %ir.step)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mr %stack.5.step, 1, $noreg, 0, $noreg, %104:gr32 :: (store 4 into %ir.step)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %225:gr64 = MOV32ri64 1717986919
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %225:gr64 = MOV32ri64 1717986919
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mr %stack.5.step, 1, $noreg, 0, $noreg, %104:gr32 :: (store 4 into %ir.step)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   MOV32mr %stack.5.step, 1, $noreg, 0, $noreg, %104:gr32 :: (store 4 into %ir.step)
SU(1):   %225:gr64 = MOV32ri64 1717986919

********** MI Scheduling **********
main:%bb.20 for.end54
  From: %104:gr32 = MOV32ri 1
    To: CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %104:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $edi = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %104:gr32 = MOV32ri 1
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %104:gr32 = MOV32ri 1
SU(1):   $edi = MOV32ri 1

********** MI Scheduling **********
main:%bb.21 for.cond55
  From: %105:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
    To: JCC_1 %bb.26, 15, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %105:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%105
  Single Issue       : false;
SU(1):   CMP32rm %105:gr32, %stack.4.niter, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%105
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.26, 15, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %105:gr32, %stack.4.niter, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.niter)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %105:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %105:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
SU(1):   CMP32rm %105:gr32, %stack.4.niter, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.niter)

********** MI Scheduling **********
main:%bb.22 for.body57
  From: %223:gr64_with_sub_8bit = MOVSX64rm32 %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
    To: JCC_1 %bb.24, 4, implicit killed $eflags
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=8
Live In: %225 
Live Out: %225 
Live Thru: GR16=2
  LiveReg: %225
  UpdateRegP: SU(2) %233:gr64_nosp = IMUL64rr %233:gr64_nosp(tied-def 0), %225:gr64, implicit-def dead $eflags
              to 
Top Pressure:
GR16=2
Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   %223:gr64_with_sub_8bit = MOVSX64rm32 %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(9): Data Latency=4 Reg=%223
    SU(1): Data Latency=4 Reg=%223
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %233:gr64_nosp = COPY %223:gr64_with_sub_8bit
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%223
  Successors:
    SU(2): Data Latency=0 Reg=%233
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %233:gr64_nosp = IMUL64rr %233:gr64_nosp(tied-def 0), %225:gr64, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=0 Reg=%233
    SU(1): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%233
    SU(3): Data Latency=1 Reg=%233
    SU(5): Out  Latency=0
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %227:gr64_with_sub_8bit = COPY %233:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%233
  Successors:
    SU(4): Data Latency=0 Reg=%227
    SU(4): Out  Latency=0
    SU(5): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %227:gr64_with_sub_8bit = SHR64ri %227:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Data Latency=0 Reg=%227
    SU(3): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%227
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %233:gr64_nosp = SAR64ri %233:gr64_nosp(tied-def 0), 35, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Data Latency=1 Reg=%233
    SU(2): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%233
    SU(6): Out  Latency=0
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %233.sub_32bit:gr64_nosp = ADD32rr %233.sub_32bit:gr64_nosp(tied-def 0), %227.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(5): Data Latency=1 Reg=%233
    SU(5): Out  Latency=0
    SU(4): Data Latency=1 Reg=%227
  Successors:
    SU(7): Data Latency=1 Reg=%233
    SU(7): Out  Latency=0
    SU(9): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %233.sub_32bit:gr64_nosp = SHL32ri %233.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 3
  Predecessors:
    SU(6): Data Latency=1 Reg=%233
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%233
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %235:gr32 = LEA64_32r %233:gr64_nosp, 4, %233:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(7): Data Latency=1 Reg=%233
  Successors:
    SU(9): Data Latency=1 Reg=%235
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   CMP32rr %223.sub_32bit:gr64_with_sub_8bit, %235:gr32, implicit-def $eflags
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%235
    SU(7): Out  Latency=0
    SU(6): Out  Latency=0
    SU(5): Out  Latency=0
    SU(4): Out  Latency=0
    SU(2): Out  Latency=0
    SU(0): Data Latency=4 Reg=%223
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR16 4
  Single Issue       : false;
ExitSU:   JCC_1 %bb.24, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) CMP32rr %223.sub_32bit:gr64_with_sub_8bit, %235:gr32, implicit-def $eflags
Bottom Pressure:
GR16=6
  LiveReg: %223
  UpdateRegP: SU(1) %233:gr64_nosp = COPY %223:gr64_with_sub_8bit
              to GR16 -2
  UpdateRegP: SU(9) CMP32rr %223.sub_32bit:gr64_with_sub_8bit, %235:gr32, implicit-def $eflags
              to GR16 2
  LiveReg: %235
  UpdateRegP: SU(9) CMP32rr %223.sub_32bit:gr64_with_sub_8bit, %235:gr32, implicit-def $eflags
              to 
  Ready @1c
  BotQ.A TopLatency SU(9) 9c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %235:gr32 = LEA64_32r %233:gr64_nosp, 4, %233:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=6
  LiveReg: %233
  UpdateRegP: SU(8) %235:gr32 = LEA64_32r %233:gr64_nosp, 4, %233:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @2c
  BotQ.A BotLatency SU(8) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %233.sub_32bit:gr64_nosp = SHL32ri %233.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %233
  UpdateRegP: SU(7) %233.sub_32bit:gr64_nosp = SHL32ri %233.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
              to GR16 -2
  Ready @3c
  BotQ.A BotLatency SU(7) 3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %233.sub_32bit:gr64_nosp = ADD32rr %233.sub_32bit:gr64_nosp(tied-def 0), %227.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %233
  UpdateRegP: SU(6) %233.sub_32bit:gr64_nosp = ADD32rr %233.sub_32bit:gr64_nosp(tied-def 0), %227.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %227
  UpdateRegP: SU(6) %233.sub_32bit:gr64_nosp = ADD32rr %233.sub_32bit:gr64_nosp(tied-def 0), %227.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %233:gr64_nosp = SAR64ri %233:gr64_nosp(tied-def 0), 35, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %233
  UpdateRegP: SU(3) %227:gr64_with_sub_8bit = COPY %233:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(5) %233:gr64_nosp = SAR64ri %233:gr64_nosp(tied-def 0), 35, implicit-def dead $eflags
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(5) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %227:gr64_with_sub_8bit = SHR64ri %227:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %227
  UpdateRegP: SU(4) %227:gr64_with_sub_8bit = SHR64ri %227:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %227:gr64_with_sub_8bit = COPY %233:gr64_nosp
Bottom Pressure:
GR16=6
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %233:gr64_nosp = IMUL64rr %233:gr64_nosp(tied-def 0), %225:gr64, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %233
  UpdateRegP: SU(2) %233:gr64_nosp = IMUL64rr %233:gr64_nosp(tied-def 0), %225:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %233:gr64_nosp = COPY %223:gr64_with_sub_8bit
Bottom Pressure:
GR16=4
  Ready @6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %223:gr64_with_sub_8bit = MOVSX64rm32 %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
Bottom Pressure:
GR16=2
  Ready @10c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %223:gr64_with_sub_8bit = MOVSX64rm32 %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
SU(1):   %233:gr64_nosp = COPY %223:gr64_with_sub_8bit
SU(2):   %233:gr64_nosp = IMUL64rr %233:gr64_nosp(tied-def 0), %225:gr64, implicit-def dead $eflags
SU(3):   %227:gr64_with_sub_8bit = COPY %233:gr64_nosp
SU(4):   %227:gr64_with_sub_8bit = SHR64ri %227:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
SU(5):   %233:gr64_nosp = SAR64ri %233:gr64_nosp(tied-def 0), 35, implicit-def dead $eflags
SU(6):   %233.sub_32bit:gr64_nosp = ADD32rr %233.sub_32bit:gr64_nosp(tied-def 0), %227.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
SU(7):   %233.sub_32bit:gr64_nosp = SHL32ri %233.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
SU(8):   %235:gr32 = LEA64_32r %233:gr64_nosp, 4, %233:gr64_nosp, 0, $noreg
SU(9):   CMP32rr %223.sub_32bit:gr64_with_sub_8bit, %235:gr32, implicit-def $eflags

********** MI Scheduling **********
main:%bb.24 if.then61
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_29__Time_step, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_29__Time_step, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %239:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %239:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_29__Time_step, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_29__Time_step, $noreg
SU(1):   $esi = COPY %239:gr32
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.26 for.end66
  From: %112:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
    To: JCC_1 %bb.27, 5, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %112:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%112
  Single Issue       : false;
SU(1):   %113:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%113
  Single Issue       : false;
SU(2):   UCOMISDrr %112:fr64, %113:fr64, implicit-def $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%113
    SU(0): Data Latency=4 Reg=%112
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.27, 5, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) UCOMISDrr %112:fr64, %113:fr64, implicit-def $eflags
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %113:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %112:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %112:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
SU(1):   %113:fr64 = FsFLD0SD
SU(2):   UCOMISDrr %112:fr64, %113:fr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.26 for.end66
  From: $edi = COPY %109:gr32
    To: CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = COPY %109:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r %stack.12.Class, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = LEA64r %stack.11.verified, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = COPY %109:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = LEA64r %stack.11.verified, 1, $noreg, 0, $noreg
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r %stack.12.Class, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(1):   $rsi = LEA64r %stack.12.Class, 1, $noreg, 0, $noreg
SU(2):   $rdx = LEA64r %stack.11.verified, 1, $noreg, 0, $noreg
SU(0):   $edi = COPY %109:gr32

********** MI Scheduling **********
main:%bb.26 for.end66
  From: %108:fr64 = COPY killed $xmm0
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %108:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%108
  Single Issue       : false;
SU(1):   MOVSDmr %stack.9.tmax, 1, $noreg, 0, $noreg, %108:fr64 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%108
  Single Issue       : false;
SU(2):   %109:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %109:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.9.tmax, 1, $noreg, 0, $noreg, %108:fr64 :: (store 8 into %ir.tmax)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %108:fr64 = COPY killed $xmm0
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %108:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr %stack.9.tmax, 1, $noreg, 0, $noreg, %108:fr64 :: (store 8 into %ir.tmax)
SU(2):   %109:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)

********** MI Scheduling **********
main:%bb.27 if.then69
  From: %120:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
    To: JMP_1 %bb.29
 RegionInstrs: 27
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
GR16=8
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %120:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 33
  Successors:
    SU(7): Data Latency=4 Reg=%120
    SU(5): Data Latency=4 Reg=%120
    SU(7): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %115:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
    SU(7): Data Latency=4 Reg=%115
    SU(3): Data Latency=4 Reg=%115
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %117:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
    SU(8): Data Latency=4 Reg=%117
    SU(4): Data Latency=4 Reg=%117
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %118:gr32 = COPY %115:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 30
  Predecessors:
    SU(1): Data Latency=4 Reg=%115
  Successors:
    SU(4): Data Latency=0 Reg=%118
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %118:gr32 = IMUL32rr %118:gr32(tied-def 0), %117:gr32, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 30
  Predecessors:
    SU(3): Data Latency=0 Reg=%118
    SU(3): Out  Latency=0
    SU(2): Data Latency=4 Reg=%117
  Successors:
    SU(5): Data Latency=1 Reg=%118
    SU(5): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %118:gr32 = IMUL32rr %118:gr32(tied-def 0), %120:gr32, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 29
  Predecessors:
    SU(4): Data Latency=1 Reg=%118
    SU(4): Out  Latency=0
    SU(0): Data Latency=4 Reg=%120
  Successors:
    SU(12): Data Latency=1 Reg=%118
    SU(6): Data Latency=1 Reg=%118
    SU(7): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   MOV32mr %stack.6.n3, 1, $noreg, 0, $noreg, %118:gr32 :: (store 4 into %ir.n3)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%118
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %120:gr32 = nsw ADD32rr %120:gr32(tied-def 0), %115:gr32, implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 29
  Predecessors:
    SU(5): Anti Latency=0
    SU(1): Data Latency=4 Reg=%115
    SU(0): Data Latency=4 Reg=%120
    SU(0): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%120
    SU(8): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %120:gr32 = nsw ADD32rr %120:gr32(tied-def 0), %117:gr32, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 28
  Predecessors:
    SU(7): Data Latency=1 Reg=%120
    SU(7): Out  Latency=0
    SU(2): Data Latency=4 Reg=%117
  Successors:
    SU(9): Data Latency=1 Reg=%120
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   %128:fr64 = CVTSI2SDrr %120:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 27
  Predecessors:
    SU(8): Data Latency=1 Reg=%120
  Successors:
    SU(10): Data Latency=1 Reg=%128
    SU(10): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(10):   %128:fr64 = DIVSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 26
  Predecessors:
    SU(9): Data Latency=1 Reg=%128
    SU(9): Out  Latency=0
  Successors:
    SU(18): Data Latency=4 Reg=%128
    SU(14): Data Latency=4 Reg=%128
    SU(11): Data Latency=4 Reg=%128
    SU(18): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %128:fr64 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 20
  Predecessors:
    SU(10): Data Latency=4 Reg=%128
  Successors:
    SU(18): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(12):   %124:fr64 = CVTSI2SDrr %118:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 22
  Predecessors:
    SU(5): Data Latency=1 Reg=%118
  Successors:
    SU(13): Data Latency=1 Reg=%124
    SU(13): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(13):   %124:fr64 = MULSDrm %124:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 21
  Predecessors:
    SU(12): Data Latency=1 Reg=%124
    SU(12): Out  Latency=0
  Successors:
    SU(17): Data Latency=4 Reg=%124
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %126:fr64 = COPY %128:fr64
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 22
  Predecessors:
    SU(10): Data Latency=4 Reg=%128
  Successors:
    SU(15): Data Latency=0 Reg=%126
    SU(15): Out  Latency=0
    SU(18): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %126:fr64 = MULSDrr %126:fr64(tied-def 0), %126:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 22
  Predecessors:
    SU(14): Data Latency=0 Reg=%126
    SU(14): Out  Latency=0
  Successors:
    SU(16): Data Latency=1 Reg=%126
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %126:fr64 = MULSDrm %126:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 21
  Predecessors:
    SU(15): Data Latency=1 Reg=%126
    SU(15): Out  Latency=0
  Successors:
    SU(17): Data Latency=4 Reg=%126
    SU(17): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %126:fr64 = ADDSDrr %126:fr64(tied-def 0), %124:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 17
  Predecessors:
    SU(16): Data Latency=4 Reg=%126
    SU(16): Out  Latency=0
    SU(13): Data Latency=4 Reg=%124
  Successors:
    SU(19): Data Latency=1 Reg=%126
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(18):   %128:fr64 = MULSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 20
  Predecessors:
    SU(14): Anti Latency=0
    SU(11): Anti Latency=0
    SU(10): Data Latency=4 Reg=%128
    SU(10): Out  Latency=0
  Successors:
    SU(19): Data Latency=4 Reg=%128
    SU(19): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %128:fr64 = ADDSDrr %128:fr64(tied-def 0), %126:fr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 16
  Predecessors:
    SU(17): Data Latency=1 Reg=%126
    SU(18): Out  Latency=0
    SU(18): Data Latency=4 Reg=%128
  Successors:
    SU(20): Data Latency=1 Reg=%128
    SU(20): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(20):   %128:fr64 = ADDSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 15
  Predecessors:
    SU(19): Data Latency=1 Reg=%128
    SU(19): Out  Latency=0
  Successors:
    SU(22): Data Latency=4 Reg=%128
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   %135:fr64 = CVTSI2SDrm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(22): Data Latency=4 Reg=%135
    SU(22): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(22):   %135:fr64 = MULSDrr %135:fr64(tied-def 0), %128:fr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 11
  Predecessors:
    SU(20): Data Latency=4 Reg=%128
    SU(21): Out  Latency=0
    SU(21): Data Latency=4 Reg=%135
  Successors:
    SU(25): Data Latency=1 Reg=%135
    SU(25): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(23):   %134:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(24): Data Latency=4 Reg=%134
    SU(24): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(24):   %134:fr64 = MULSDrm %134:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(23): Data Latency=4 Reg=%134
    SU(23): Out  Latency=0
  Successors:
    SU(25): Data Latency=4 Reg=%134
  Pressure Diff      : 
  Single Issue       : false;
SU(25):   %135:fr64 = DIVSDrr %135:fr64(tied-def 0), %134:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 24
  Height             : 10
  Predecessors:
    SU(22): Data Latency=1 Reg=%135
    SU(24): Data Latency=4 Reg=%134
    SU(22): Out  Latency=0
  Successors:
    SU(26): Data Latency=10 Reg=%135
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(26):   MOVSDmr %stack.7.mflops, 1, $noreg, 0, $noreg, %135:fr64 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 0
  Predecessors:
    SU(25): Data Latency=10 Reg=%135
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
ExitSU:   JMP_1 %bb.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 34
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 6 
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) MOVSDmr %stack.7.mflops, 1, $noreg, 0, $noreg, %135:fr64 :: (store 8 into %ir.mflops)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %135
  UpdateRegP: SU(26) MOVSDmr %stack.7.mflops, 1, $noreg, 0, $noreg, %135:fr64 :: (store 8 into %ir.mflops)
              to 
  Ready @0c
  BotQ.A TopLatency SU(26) 34c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 25 
  Cand SU(6) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %135:fr64 = DIVSDrr %135:fr64(tied-def 0), %134:fr64
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %135
  UpdateRegP: SU(25) %135:fr64 = DIVSDrr %135:fr64(tied-def 0), %134:fr64
              to 
  LiveReg: %134
  UpdateRegP: SU(25) %135:fr64 = DIVSDrr %135:fr64(tied-def 0), %134:fr64
              to FR32 -1    FR32X -1
  Ready @10c
  BotQ.A BotLatency SU(25) 10c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 24 22 
  Cand SU(6) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %134:fr64 = MULSDrm %134:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %134
  UpdateRegP: SU(24) %134:fr64 = MULSDrm %134:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @14c
  BotQ.A BotLatency SU(24) 14c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 22 23 
  Cand SU(6) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %134:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @18c
  BotQ.A BotLatency SU(23) 18c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 22 
  Cand SU(6) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %135:fr64 = MULSDrr %135:fr64(tied-def 0), %128:fr64
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %135
  UpdateRegP: SU(22) %135:fr64 = MULSDrr %135:fr64(tied-def 0), %128:fr64
              to 
  LiveReg: %128
  UpdateRegP: SU(22) %135:fr64 = MULSDrr %135:fr64(tied-def 0), %128:fr64
              to FR32 -1    FR32X -1
  Ready @11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 20 21 
  Cand SU(6) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %135:fr64 = CVTSI2SDrm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @15c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 20 
  Cand SU(6) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %128:fr64 = ADDSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %128
  UpdateRegP: SU(20) %128:fr64 = ADDSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @15c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 19 
  Cand SU(6) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %128:fr64 = ADDSDrr %128:fr64(tied-def 0), %126:fr64
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %128
  UpdateRegP: SU(19) %128:fr64 = ADDSDrr %128:fr64(tied-def 0), %126:fr64
              to 
  LiveReg: %126
  UpdateRegP: SU(19) %128:fr64 = ADDSDrr %128:fr64(tied-def 0), %126:fr64
              to FR32 -1    FR32X -1
  Ready @16c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 17 18 
  Cand SU(6) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %128:fr64 = MULSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %128
  UpdateRegP: SU(11) MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %128:fr64 :: (store 8 into %ir.t)
              to 
  UpdateRegP: SU(14) %126:fr64 = COPY %128:fr64
              to FR32 -1    FR32X -1
  UpdateRegP: SU(18) %128:fr64 = MULSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @20c
  BotQ.A BotLatency SU(18) 20c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 17 11 
  Cand SU(6) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %126:fr64 = ADDSDrr %126:fr64(tied-def 0), %124:fr64
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %126
  UpdateRegP: SU(17) %126:fr64 = ADDSDrr %126:fr64(tied-def 0), %124:fr64
              to 
  LiveReg: %124
  UpdateRegP: SU(17) %126:fr64 = ADDSDrr %126:fr64(tied-def 0), %124:fr64
              to FR32 -1    FR32X -1
  Ready @17c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 16 13 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %126:fr64 = MULSDrm %126:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %126
  UpdateRegP: SU(16) %126:fr64 = MULSDrm %126:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @21c
  BotQ.A BotLatency SU(16) 21c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 13 15 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %126:fr64 = MULSDrr %126:fr64(tied-def 0), %126:fr64
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %126
  UpdateRegP: SU(15) %126:fr64 = MULSDrr %126:fr64(tied-def 0), %126:fr64
              to FR32 -1    FR32X -1
  Ready @22c
  BotQ.A BotLatency SU(15) 22c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 13 14 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %126:fr64 = COPY %128:fr64
Bottom Pressure:
FR32=2
FR32X=2
  Ready @22c
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 13 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %124:fr64 = MULSDrm %124:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %124
  UpdateRegP: SU(13) %124:fr64 = MULSDrm %124:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @21c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 12 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %124:fr64 = CVTSI2SDrr %118:gr32
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %118
  UpdateRegP: SU(6) MOV32mr %stack.6.n3, 1, $noreg, 0, $noreg, %118:gr32 :: (store 4 into %ir.n3)
              to 
  UpdateRegP: SU(12) %124:fr64 = CVTSI2SDrr %118:gr32
              to FR32 -1    FR32X -1
  Ready @22c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %128:fr64 :: (store 8 into %ir.t)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @20c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 10 
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %128:fr64 = DIVSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %128
  UpdateRegP: SU(10) %128:fr64 = DIVSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @26c
  BotQ.A BotLatency SU(10) 26c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %128:fr64 = CVTSI2SDrr %120:gr32
Bottom Pressure:
GR16=4
  LiveReg: %120
  UpdateRegP: SU(9) %128:fr64 = CVTSI2SDrr %120:gr32
              to FR32 -1    FR32X -1
  Ready @27c
  BotQ.A BotLatency SU(9) 27c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %120:gr32 = nsw ADD32rr %120:gr32(tied-def 0), %117:gr32, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %120
  UpdateRegP: SU(8) %120:gr32 = nsw ADD32rr %120:gr32(tied-def 0), %117:gr32, implicit-def dead $eflags
              to 
  LiveReg: %117
  UpdateRegP: SU(4) %118:gr32 = IMUL32rr %118:gr32(tied-def 0), %117:gr32, implicit-def dead $eflags
              to 
  UpdateRegP: SU(8) %120:gr32 = nsw ADD32rr %120:gr32(tied-def 0), %117:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @28c
  BotQ.A BotLatency SU(8) 28c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %120:gr32 = nsw ADD32rr %120:gr32(tied-def 0), %115:gr32, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %120
  UpdateRegP: SU(5) %118:gr32 = IMUL32rr %118:gr32(tied-def 0), %120:gr32, implicit-def dead $eflags
              to 
  UpdateRegP: SU(7) %120:gr32 = nsw ADD32rr %120:gr32(tied-def 0), %115:gr32, implicit-def dead $eflags
              to 
  LiveReg: %115
  UpdateRegP: SU(3) %118:gr32 = COPY %115:gr32
              to GR16 -2
  UpdateRegP: SU(7) %120:gr32 = nsw ADD32rr %120:gr32(tied-def 0), %115:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @29c
  BotQ.A BotLatency SU(7) 29c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV32mr %stack.6.n3, 1, $noreg, 0, $noreg, %118:gr32 :: (store 4 into %ir.n3)
Bottom Pressure:
GR16=8
  Ready @4c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %118:gr32 = IMUL32rr %118:gr32(tied-def 0), %120:gr32, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %118
  UpdateRegP: SU(5) %118:gr32 = IMUL32rr %118:gr32(tied-def 0), %120:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @29c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %118:gr32 = IMUL32rr %118:gr32(tied-def 0), %117:gr32, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %118
  UpdateRegP: SU(4) %118:gr32 = IMUL32rr %118:gr32(tied-def 0), %117:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @30c
  BotQ.A BotLatency SU(4) 30c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %118:gr32 = COPY %115:gr32
Bottom Pressure:
GR16=6
  Ready @30c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %117:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:
GR16=4
  Ready @34c
  BotQ.A BotLatency SU(2) 34c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %115:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
Bottom Pressure:
GR16=2
  Ready @34c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %120:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
Bottom Pressure:

  Ready @33c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %120:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(1):   %115:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(2):   %117:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(3):   %118:gr32 = COPY %115:gr32
SU(4):   %118:gr32 = IMUL32rr %118:gr32(tied-def 0), %117:gr32, implicit-def dead $eflags
SU(5):   %118:gr32 = IMUL32rr %118:gr32(tied-def 0), %120:gr32, implicit-def dead $eflags
SU(6):   MOV32mr %stack.6.n3, 1, $noreg, 0, $noreg, %118:gr32 :: (store 4 into %ir.n3)
SU(7):   %120:gr32 = nsw ADD32rr %120:gr32(tied-def 0), %115:gr32, implicit-def dead $eflags
SU(8):   %120:gr32 = nsw ADD32rr %120:gr32(tied-def 0), %117:gr32, implicit-def dead $eflags
SU(9):   %128:fr64 = CVTSI2SDrr %120:gr32
SU(10):   %128:fr64 = DIVSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(11):   MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %128:fr64 :: (store 8 into %ir.t)
SU(12):   %124:fr64 = CVTSI2SDrr %118:gr32
SU(13):   %124:fr64 = MULSDrm %124:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(14):   %126:fr64 = COPY %128:fr64
SU(15):   %126:fr64 = MULSDrr %126:fr64(tied-def 0), %126:fr64
SU(16):   %126:fr64 = MULSDrm %126:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(17):   %126:fr64 = ADDSDrr %126:fr64(tied-def 0), %124:fr64
SU(18):   %128:fr64 = MULSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
SU(19):   %128:fr64 = ADDSDrr %128:fr64(tied-def 0), %126:fr64
SU(20):   %128:fr64 = ADDSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
SU(21):   %135:fr64 = CVTSI2SDrm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
SU(22):   %135:fr64 = MULSDrr %135:fr64(tied-def 0), %128:fr64
SU(23):   %134:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
SU(24):   %134:fr64 = MULSDrm %134:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
SU(25):   %135:fr64 = DIVSDrr %135:fr64(tied-def 0), %134:fr64
SU(26):   MOVSDmr %stack.7.mflops, 1, $noreg, 0, $noreg, %135:fr64 :: (store 8 into %ir.mflops)

********** MI Scheduling **********
main:%bb.29 if.end85
  From: %145:gr64 = LEA64r $rip, 1, $noreg, @sp__str_40__none__, $noreg
    To: CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 29
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=4
GR16=20
Live In: %143 %142 %141 %140 %139 %138 %136 %144 
Live Out: %143 %142 %141 %140 %139 %138 %136 %144 
Live Thru: FR32=2
FR32X=2
GR16=12
  LiveReg: %143
  UpdateRegP: SU(28) $xmm1 = COPY %143:fr64
              to FR32 -1    FR32X -1
  LiveReg: %142
  UpdateRegP: SU(27) $xmm0 = COPY %142:fr64
              to FR32 -1    FR32X -1
  LiveReg: %141
  UpdateRegP: SU(26) $r9d = COPY %141:gr32
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  LiveReg: %140
  UpdateRegP: SU(25) $r8d = COPY %140:gr32
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  LiveReg: %139
  UpdateRegP: SU(24) $ecx = COPY %139:gr32
              to GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  LiveReg: %138
  UpdateRegP: SU(23) $edx = COPY %138:gr32
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  LiveReg: %136
  UpdateRegP: SU(22) $esi = COPY %136:gr32
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  LiveReg: %144
  UpdateRegP: SU(18) MOV32mr $rsp, 1, $noreg, 8, $noreg, %144:gr32 :: (store 4 into stack + 8)
              to 
Top Pressure:
FR32=2
FR32X=2
GR16=12
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=4
GR16=20
Excess PSets: 
SU(0):   %145:gr64 = LEA64r $rip, 1, $noreg, @sp__str_40__none__, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%145
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV64mr $rsp, 1, $noreg, 80, $noreg, %145:gr64 :: (store 8 into stack + 80)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%145
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %147:gr64 = LEA64r $rip, 1, $noreg, @sp__str_39__O3__mcmod, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%147
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr $rsp, 1, $noreg, 72, $noreg, %147:gr64 :: (store 8 into stack + 72)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%147
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %148:gr64 = LEA64r $rip, 1, $noreg, @sp__str_38__g__Wall__, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%148
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr $rsp, 1, $noreg, 64, $noreg, %148:gr64 :: (store 8 into stack + 64)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%148
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %149:gr64 = LEA64r $rip, 1, $noreg, @sp__str_37__I___commo, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%149
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr $rsp, 1, $noreg, 56, $noreg, %149:gr64 :: (store 8 into stack + 56)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%149
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %150:gr64 = LEA64r $rip, 1, $noreg, @sp__str_36__lm_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%150
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %150:gr64 :: (store 8 into stack + 48)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%150
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %151:gr64 = LEA64r $rip, 1, $noreg, @sp__str_35___CC__, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%151
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %151:gr64 :: (store 8 into stack + 40)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%151
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %152:gr64 = LEA64r $rip, 1, $noreg, @sp__str_34_gcc_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%152
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %152:gr64 :: (store 8 into stack + 32)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%152
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %153:gr64 = LEA64r $rip, 1, $noreg, @sp__str_33_03_Nov_201, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%153
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %153:gr64 :: (store 8 into stack + 24)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%153
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %154:gr64 = LEA64r $rip, 1, $noreg, @sp__str_32_3_3_1_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%154
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(17):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %154:gr64 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%154
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %144:gr32 :: (store 4 into stack + 8)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %155:gr64 = LEA64r $rip, 1, $noreg, @sp__str_31___________, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%155
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(20):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %155:gr64 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%155
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_30_SP_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(22):   $esi = COPY %136:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  Single Issue       : false;
SU(23):   $edx = COPY %138:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Single Issue       : false;
SU(24):   $ecx = COPY %139:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  Single Issue       : false;
SU(25):   $r8d = COPY %140:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(26):   $r9d = COPY %141:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(27):   $xmm0 = COPY %142:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(28):   $xmm1 = COPY %143:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=0 Artificial
    SU(22): Ord  Latency=0 Artificial
    SU(21): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 28 27 26 25 24 23 22 21 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(28) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(28) $xmm1 = COPY %143:fr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=3
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=3
GR16=20
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 27 26 25 24 23 22 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(27) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(27) $xmm0 = COPY %142:fr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=20
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 26 25 24 23 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) $r9d = COPY %141:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
FR32X=2
GR16=19
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 25 24 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) $r8d = COPY %140:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
FR32X=2
GR16=18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 24 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) $ecx = COPY %139:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
FR32X=2
GR16=16
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) $edx = COPY %138:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=2
GR16=14
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(22) $esi = COPY %136:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
FR32X=2
GR16=13
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) $rdi = LEA64r $rip, 1, $noreg, @sp__str_30_SP_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
  BotQ.A BotLatency SU(21) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) MOV64mr $rsp, 1, $noreg, 0, $noreg, %155:gr64 :: (store 8 into stack)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %155
  UpdateRegP: SU(20) MOV64mr $rsp, 1, $noreg, 0, $noreg, %155:gr64 :: (store 8 into stack)
              to 
  Ready @0c
  BotQ.A TopLatency SU(20) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 
  Cand SU(1) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %155:gr64 = LEA64r $rip, 1, $noreg, @sp__str_31___________, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 
  Cand SU(1) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) MOV32mr $rsp, 1, $noreg, 8, $noreg, %144:gr32 :: (store 4 into stack + 8)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 17 15 13 11 9 7 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) MOV64mr $rsp, 1, $noreg, 16, $noreg, %154:gr64 :: (store 8 into stack + 16)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %154
  UpdateRegP: SU(17) MOV64mr $rsp, 1, $noreg, 16, $noreg, %154:gr64 :: (store 8 into stack + 16)
              to 
  Ready @1c
  BotQ.A TopLatency SU(17) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 15 13 11 9 7 16 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %154:gr64 = LEA64r $rip, 1, $noreg, @sp__str_32_3_3_1_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 15 13 11 9 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV64mr $rsp, 1, $noreg, 24, $noreg, %153:gr64 :: (store 8 into stack + 24)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %153
  UpdateRegP: SU(15) MOV64mr $rsp, 1, $noreg, 24, $noreg, %153:gr64 :: (store 8 into stack + 24)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 13 11 9 14 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %153:gr64 = LEA64r $rip, 1, $noreg, @sp__str_33_03_Nov_201, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 13 11 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mr $rsp, 1, $noreg, 32, $noreg, %152:gr64 :: (store 8 into stack + 32)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %152
  UpdateRegP: SU(13) MOV64mr $rsp, 1, $noreg, 32, $noreg, %152:gr64 :: (store 8 into stack + 32)
              to 
  Ready @2c
  BotQ.A TopLatency SU(13) 1c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 11 12 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %152:gr64 = LEA64r $rip, 1, $noreg, @sp__str_34_gcc_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 11 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr $rsp, 1, $noreg, 40, $noreg, %151:gr64 :: (store 8 into stack + 40)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %151
  UpdateRegP: SU(11) MOV64mr $rsp, 1, $noreg, 40, $noreg, %151:gr64 :: (store 8 into stack + 40)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 10 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %151:gr64 = LEA64r $rip, 1, $noreg, @sp__str_35___CC__, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @3c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mr $rsp, 1, $noreg, 48, $noreg, %150:gr64 :: (store 8 into stack + 48)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %150
  UpdateRegP: SU(9) MOV64mr $rsp, 1, $noreg, 48, $noreg, %150:gr64 :: (store 8 into stack + 48)
              to 
  Ready @3c
  BotQ.A TopLatency SU(9) 1c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 8 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %150:gr64 = LEA64r $rip, 1, $noreg, @sp__str_36__lm_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @4c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr $rsp, 1, $noreg, 56, $noreg, %149:gr64 :: (store 8 into stack + 56)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %149
  UpdateRegP: SU(7) MOV64mr $rsp, 1, $noreg, 56, $noreg, %149:gr64 :: (store 8 into stack + 56)
              to 
  Ready @3c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 6 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %149:gr64 = LEA64r $rip, 1, $noreg, @sp__str_37__I___commo, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @4c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr $rsp, 1, $noreg, 64, $noreg, %148:gr64 :: (store 8 into stack + 64)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %148
  UpdateRegP: SU(5) MOV64mr $rsp, 1, $noreg, 64, $noreg, %148:gr64 :: (store 8 into stack + 64)
              to 
  Ready @4c
  BotQ.A TopLatency SU(5) 1c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %148:gr64 = LEA64r $rip, 1, $noreg, @sp__str_38__g__Wall__, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @5c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr $rsp, 1, $noreg, 72, $noreg, %147:gr64 :: (store 8 into stack + 72)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %147
  UpdateRegP: SU(3) MOV64mr $rsp, 1, $noreg, 72, $noreg, %147:gr64 :: (store 8 into stack + 72)
              to 
  Ready @4c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %147:gr64 = LEA64r $rip, 1, $noreg, @sp__str_39__O3__mcmod, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @5c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $rsp, 1, $noreg, 80, $noreg, %145:gr64 :: (store 8 into stack + 80)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %145
  UpdateRegP: SU(1) MOV64mr $rsp, 1, $noreg, 80, $noreg, %145:gr64 :: (store 8 into stack + 80)
              to 
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %145:gr64 = LEA64r $rip, 1, $noreg, @sp__str_40__none__, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @6c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %145:gr64 = LEA64r $rip, 1, $noreg, @sp__str_40__none__, $noreg
SU(1):   MOV64mr $rsp, 1, $noreg, 80, $noreg, %145:gr64 :: (store 8 into stack + 80)
SU(2):   %147:gr64 = LEA64r $rip, 1, $noreg, @sp__str_39__O3__mcmod, $noreg
SU(3):   MOV64mr $rsp, 1, $noreg, 72, $noreg, %147:gr64 :: (store 8 into stack + 72)
SU(4):   %148:gr64 = LEA64r $rip, 1, $noreg, @sp__str_38__g__Wall__, $noreg
SU(5):   MOV64mr $rsp, 1, $noreg, 64, $noreg, %148:gr64 :: (store 8 into stack + 64)
SU(6):   %149:gr64 = LEA64r $rip, 1, $noreg, @sp__str_37__I___commo, $noreg
SU(7):   MOV64mr $rsp, 1, $noreg, 56, $noreg, %149:gr64 :: (store 8 into stack + 56)
SU(8):   %150:gr64 = LEA64r $rip, 1, $noreg, @sp__str_36__lm_, $noreg
SU(9):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %150:gr64 :: (store 8 into stack + 48)
SU(10):   %151:gr64 = LEA64r $rip, 1, $noreg, @sp__str_35___CC__, $noreg
SU(11):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %151:gr64 :: (store 8 into stack + 40)
SU(12):   %152:gr64 = LEA64r $rip, 1, $noreg, @sp__str_34_gcc_, $noreg
SU(13):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %152:gr64 :: (store 8 into stack + 32)
SU(14):   %153:gr64 = LEA64r $rip, 1, $noreg, @sp__str_33_03_Nov_201, $noreg
SU(15):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %153:gr64 :: (store 8 into stack + 24)
SU(16):   %154:gr64 = LEA64r $rip, 1, $noreg, @sp__str_32_3_3_1_, $noreg
SU(17):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %154:gr64 :: (store 8 into stack + 16)
SU(18):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %144:gr32 :: (store 4 into stack + 8)
SU(19):   %155:gr64 = LEA64r $rip, 1, $noreg, @sp__str_31___________, $noreg
SU(20):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %155:gr64 :: (store 8 into stack)
SU(21):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_30_SP_, $noreg
SU(22):   $esi = COPY %136:gr32
SU(23):   $edx = COPY %138:gr32
SU(24):   $ecx = COPY %139:gr32
SU(25):   $r8d = COPY %140:gr32
SU(26):   $r9d = COPY %141:gr32
SU(27):   $xmm0 = COPY %142:fr64
SU(28):   $xmm1 = COPY %143:fr64

********** MI Scheduling **********
main:%bb.29 if.end85
  From: %136:gr32 = MOVSX32rm8 %stack.12.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
    To: ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=12
Live In: 
Live Out: %144 %143 %142 %141 %140 %139 %138 %136 
Live Thru: 
  LiveReg: %144
  LiveReg: %143
  LiveReg: %142
  LiveReg: %141
  LiveReg: %140
  LiveReg: %139
  LiveReg: %138
  LiveReg: %136
Top Pressure:

Bottom Pressure:
FR32=2
FR32X=2
GR16=12
Excess PSets: 
SU(0):   %136:gr32 = MOVSX32rm8 %stack.12.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %138:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %139:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %140:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %141:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %142:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(6):   %143:fr64 = MOVSDrm_alt %stack.7.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(7):   %144:gr32 = MOV32rm %stack.11.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 2 1 0 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %144:gr32 = MOV32rm %stack.11.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  Ready @3c
  BotQ.A BotLatency SU(7) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %143:fr64 = MOVSDrm_alt %stack.7.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 5 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %142:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
GR16=10
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 4 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %141:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
Bottom Pressure:
GR16=8
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %140:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:
GR16=6
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %139:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
Bottom Pressure:
GR16=4
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %138:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
Bottom Pressure:
GR16=2
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %136:gr32 = MOVSX32rm8 %stack.12.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
Bottom Pressure:

  Ready @3c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %136:gr32 = MOVSX32rm8 %stack.12.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
SU(1):   %138:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(2):   %139:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(3):   %140:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(4):   %141:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
SU(5):   %142:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
SU(6):   %143:fr64 = MOVSDrm_alt %stack.7.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
SU(7):   %144:gr32 = MOV32rm %stack.11.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)

********** MI Scheduling **********
main:%bb.30 if.then86
  From: %157:gr32 = MOV32ri 1
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %157:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%157
  Single Issue       : false;
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %157:gr32 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%157
  Single Issue       : false;
SU(2):   %222:gr64 = LEA64r %stack.10.trecs, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %222:gr64 = LEA64r %stack.10.trecs, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %157:gr32 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %157:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %157:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %157:gr32 :: (store 4 into %ir.i)
SU(2):   %222:gr64 = LEA64r %stack.10.trecs, 1, $noreg, 0, $noreg

********** MI Scheduling **********
main:%bb.32 for.body90
  From: %220:fr64 = COPY killed $xmm0
    To: JMP_1 %bb.31
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %220:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%220
  Single Issue       : false;
SU(1):   %221:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%221
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %222:gr64, 8, %221:gr64_nosp, 0, $noreg, %220:fr64 :: (store 8 into %ir.arrayidx92)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%221
    SU(0): Data Latency=0 Reg=%220
  Single Issue       : false;
SU(3):   INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.31
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %222:gr64, 8, %221:gr64_nosp, 0, $noreg, %220:fr64 :: (store 8 into %ir.arrayidx92)
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) %221:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %220:fr64 = COPY killed $xmm0
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %220:fr64 = COPY killed $xmm0
SU(1):   %221:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(2):   MOVSDmr %222:gr64, 8, %221:gr64_nosp, 0, $noreg, %220:fr64 :: (store 8 into %ir.arrayidx92)
SU(3):   INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
main:%bb.33 for.end95
  From: %160:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
    To: JCC_1 %bb.35, 5, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %160:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%160
  Single Issue       : false;
SU(1):   %161:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%161
  Single Issue       : false;
SU(2):   UCOMISDrr %160:fr64, %161:fr64, implicit-def $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%161
    SU(0): Data Latency=4 Reg=%160
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.35, 5, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) UCOMISDrr %160:fr64, %161:fr64, implicit-def $eflags
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %161:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %160:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %160:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
SU(1):   %161:fr64 = FsFLD0SD
SU(2):   UCOMISDrr %160:fr64, %161:fr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.34 if.then98
  From: %162:gr64 = MOV64ri 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %162:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%162
  Single Issue       : false;
SU(1):   MOV64mr %stack.9.tmax, 1, $noreg, 0, $noreg, %162:gr64 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%162
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.9.tmax, 1, $noreg, 0, $noreg, %162:gr64 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %162:gr64 = MOV64ri 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %162:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr %stack.9.tmax, 1, $noreg, 0, $noreg, %162:gr64 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.35 if.end99
  From: %167:gr32 = MOV32ri 1
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %167:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%167
  Single Issue       : false;
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %167:gr32 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%167
  Single Issue       : false;
SU(2):   %171:gr64 = LEA64r %stack.13.t_names, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %173:gr64 = LEA64r %stack.10.trecs, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %259:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %259:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %173:gr64 = LEA64r %stack.10.trecs, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %171:gr64 = LEA64r %stack.13.t_names, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %167:gr32 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %167:gr32 = MOV32ri 1
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %167:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %167:gr32 :: (store 4 into %ir.i)
SU(2):   %171:gr64 = LEA64r %stack.13.t_names, 1, $noreg, 0, $noreg
SU(3):   %173:gr64 = LEA64r %stack.10.trecs, 1, $noreg, 0, $noreg
SU(4):   %259:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
main:%bb.35 if.end99
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_41___SECTION_, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_41___SECTION_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_41___SECTION_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_41___SECTION_, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.37 for.body104
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_42_____8s__9_, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_42_____8s__9_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %172:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %174:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %176:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %176:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm0 = COPY %174:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rsi = COPY %172:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_42_____8s__9_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_42_____8s__9_, $noreg
SU(1):   $rsi = COPY %172:gr64
SU(2):   $xmm0 = COPY %174:fr64
SU(3):   $xmm1 = COPY %176:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.37 for.body104
  From: %170:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %170:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%170
    SU(1): Data Latency=4 Reg=%170
  Single Issue       : false;
SU(1):   %172:gr64 = MOV64rm %171:gr64, 8, %170:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%170
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %174:fr64 = MOVSDrm_alt %173:gr64, 8, %170:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx110)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%170
  Successors:
    SU(3): Data Latency=4 Reg=%174
  Single Issue       : false;
SU(3):   %176:fr64 = COPY %174:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%174
  Successors:
    SU(4): Data Latency=0 Reg=%176
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %176:fr64 = MULSDrr %176:fr64(tied-def 0), %259:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%176
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%176
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %176:fr64 = DIVSDrm %176:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%176
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %176:fr64 = DIVSDrm %176:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %176:fr64 = MULSDrr %176:fr64(tied-def 0), %259:fr64
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %176:fr64 = COPY %174:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %174:fr64 = MOVSDrm_alt %173:gr64, 8, %170:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx110)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %172:gr64 = MOV64rm %171:gr64, 8, %170:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %170:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %170:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   %172:gr64 = MOV64rm %171:gr64, 8, %170:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
SU(2):   %174:fr64 = MOVSDrm_alt %173:gr64, 8, %170:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx110)
SU(3):   %176:fr64 = COPY %174:fr64
SU(4):   %176:fr64 = MULSDrr %176:fr64(tied-def 0), %259:fr64
SU(5):   %176:fr64 = DIVSDrm %176:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.38 if.then116
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_45_rest_rhs_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %214:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %216:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %216:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %214:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @sp__str_45_rest_rhs_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_45_rest_rhs_, $noreg
SU(2):   $xmm0 = COPY %214:fr64
SU(3):   $xmm1 = COPY %216:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.38 if.then116
  From: %214:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx125)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %214:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx125)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(1): Data Latency=4 Reg=%214
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %214:fr64 = SUBSDrm %214:fr64(tied-def 0), %stack.8.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%214
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%214
    SU(2): Data Latency=4 Reg=%214
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %214:fr64 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%214
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %216:fr64 = COPY %214:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%214
  Successors:
    SU(4): Data Latency=0 Reg=%216
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %216:fr64 = MULSDrr %216:fr64(tied-def 0), %259:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%216
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%216
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %216:fr64 = DIVSDrm %216:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%216
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %216:fr64 = DIVSDrm %216:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %216:fr64 = MULSDrr %216:fr64(tied-def 0), %259:fr64
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %216:fr64 = COPY %214:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %214:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %214:fr64 = SUBSDrm %214:fr64(tied-def 0), %stack.8.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %214:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx125)
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %214:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx125)
SU(1):   %214:fr64 = SUBSDrm %214:fr64(tied-def 0), %stack.8.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
SU(2):   MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %214:fr64 :: (store 8 into %ir.t)
SU(3):   %216:fr64 = COPY %214:fr64
SU(4):   %216:fr64 = MULSDrr %216:fr64(tied-def 0), %259:fr64
SU(5):   %216:fr64 = DIVSDrm %216:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.38 if.then116
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_44_sub_rhs_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %205:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %208:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %208:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %205:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @sp__str_44_sub_rhs_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_44_sub_rhs_, $noreg
SU(2):   $xmm0 = COPY %205:fr64
SU(3):   $xmm1 = COPY %208:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.38 if.then116
  From: %205:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %205:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%205
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %205:fr64 = ADDSDrm %205:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx118)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%205
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%205
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %205:fr64 = ADDSDrm %205:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%205
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%205
    SU(3): Data Latency=4 Reg=%205
  Single Issue       : false;
SU(3):   MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %205:fr64 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%205
  Single Issue       : false;
SU(4):   %208:fr64 = COPY %205:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%205
  Successors:
    SU(5): Data Latency=0 Reg=%208
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %208:fr64 = MULSDrr %208:fr64(tied-def 0), %259:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(4): Data Latency=0 Reg=%208
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%208
    SU(6): Out  Latency=0
  Single Issue       : false;
SU(6):   %208:fr64 = DIVSDrm %208:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%208
    SU(5): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %208:fr64 = DIVSDrm %208:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(6) 13c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %208:fr64 = MULSDrr %208:fr64(tied-def 0), %259:fr64
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %208:fr64 = COPY %205:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %205:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %205:fr64 = ADDSDrm %205:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %205:fr64 = ADDSDrm %205:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx118)
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %205:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %205:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
SU(1):   %205:fr64 = ADDSDrm %205:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx118)
SU(2):   %205:fr64 = ADDSDrm %205:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
SU(3):   MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %205:fr64 :: (store 8 into %ir.t)
SU(4):   %208:fr64 = COPY %205:fr64
SU(5):   %208:fr64 = MULSDrr %208:fr64(tied-def 0), %259:fr64
SU(6):   %208:fr64 = DIVSDrm %208:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.40 if.then133
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_46_sub_zsol_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %196:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %198:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %198:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %196:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @sp__str_46_sub_zsol_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_46_sub_zsol_, $noreg
SU(2):   $xmm0 = COPY %196:fr64
SU(3):   $xmm1 = COPY %198:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.40 if.then133
  From: %196:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 64, $noreg :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %196:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 64, $noreg :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%196
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %196:fr64 = SUBSDrm %196:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx135)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%196
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%196
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %196:fr64 = SUBSDrm %196:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%196
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%196
    SU(3): Data Latency=4 Reg=%196
  Single Issue       : false;
SU(3):   MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %196:fr64 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%196
  Single Issue       : false;
SU(4):   %198:fr64 = COPY %196:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%196
  Successors:
    SU(5): Data Latency=0 Reg=%198
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %198:fr64 = MULSDrr %198:fr64(tied-def 0), %259:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(4): Data Latency=0 Reg=%198
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%198
    SU(6): Out  Latency=0
  Single Issue       : false;
SU(6):   %198:fr64 = DIVSDrm %198:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%198
    SU(5): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %198:fr64 = DIVSDrm %198:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(6) 13c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %198:fr64 = MULSDrr %198:fr64(tied-def 0), %259:fr64
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %198:fr64 = COPY %196:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %196:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %196:fr64 = SUBSDrm %196:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %196:fr64 = SUBSDrm %196:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx135)
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %196:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 64, $noreg :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %196:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 64, $noreg :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
SU(1):   %196:fr64 = SUBSDrm %196:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx135)
SU(2):   %196:fr64 = SUBSDrm %196:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
SU(3):   MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %196:fr64 :: (store 8 into %ir.t)
SU(4):   %198:fr64 = COPY %196:fr64
SU(5):   %198:fr64 = MULSDrr %198:fr64(tied-def 0), %259:fr64
SU(6):   %198:fr64 = DIVSDrm %198:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.42 if.then145
  From: $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_47_redist_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %187:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %189:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %189:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %187:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @sp__str_47_redist_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @sp__str_47_redist_, $noreg
SU(2):   $xmm0 = COPY %187:fr64
SU(3):   $xmm1 = COPY %189:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.42 if.then145
  From: %187:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx146)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %187:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx146)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(1): Data Latency=4 Reg=%187
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %187:fr64 = ADDSDrm %187:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%187
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%187
    SU(2): Data Latency=4 Reg=%187
  Single Issue       : false;
SU(2):   MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %187:fr64 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%187
  Single Issue       : false;
SU(3):   %189:fr64 = COPY %187:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%187
  Successors:
    SU(4): Data Latency=0 Reg=%189
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %189:fr64 = MULSDrr %189:fr64(tied-def 0), %259:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%189
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%189
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %189:fr64 = DIVSDrm %189:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%189
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %189:fr64 = DIVSDrm %189:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %189:fr64 = MULSDrr %189:fr64(tied-def 0), %259:fr64
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %189:fr64 = COPY %187:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %187:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %187:fr64 = ADDSDrm %187:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %187:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx146)
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   %187:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx146)
SU(1):   %187:fr64 = ADDSDrm %187:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
SU(2):   MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %187:fr64 :: (store 8 into %ir.t)
SU(3):   %189:fr64 = COPY %187:fr64
SU(4):   %189:fr64 = MULSDrr %189:fr64(tied-def 0), %259:fr64
SU(5):   %189:fr64 = DIVSDrm %189:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.45 return
  From: %257:gr32 = MOV32rm %stack.0.retval, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.retval)
    To: RET 0, killed $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %257:gr32 = MOV32rm %stack.0.retval, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.retval)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%257
  Single Issue       : false;
SU(1):   $eax = COPY %257:gr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%257
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   RET 0, killed $eax
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $eax = COPY %257:gr32
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %257:gr32 = MOV32rm %stack.0.retval, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.retval)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %257:gr32 = MOV32rm %stack.0.retval, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.retval)
SU(1):   $eax = COPY %257:gr32

********** INTERVALS **********
DIL [0B,32r:0)[144r,176r:32)[896r,912r:31)[1120r,1152r:30)[1280r,1312r:29)[1552r,1584r:27)[1768r,1792r:26)[1952r,1968r:25)[2264r,2288r:24)[2448r,2464r:23)[2824r,2848r:22)[2992r,3008r:21)[3184r,3216r:28)[3552r,3632r:20)[3792r,3856r:19)[3968r,4000r:18)[4384r,4464r:9)[4576r,4608r:8)[5216r,5232r:1)[5984r,6000r:2)[6160r,6176r:7)[6848r,6896r:10)[7200r,7216r:6)[7312r,7328r:5)[7544r,7552r:4)[8976r,9104r:17)[9408r,9424r:3)[9824r,9856r:16)[10336r,10416r:15)[10736r,10816r:12)[11040r,11120r:11)[11472r,11552r:13)[11872r,11952r:14)  0@0B-phi 1@5216r 2@5984r 3@9408r 4@7544r 5@7312r 6@7200r 7@6160r 8@4576r 9@4384r 10@6848r 11@11040r 12@10736r 13@11472r 14@11872r 15@10336r 16@9824r 17@8976r 18@3968r 19@3792r 20@3552r 21@2992r 22@2824r 23@2448r 24@2264r 25@1952r 26@1768r 27@1552r 28@3184r 29@1280r 30@1120r 31@896r 32@144r
DIH [0B,32r:0)[144r,176r:32)[896r,912r:31)[1120r,1152r:30)[1280r,1312r:29)[1552r,1584r:27)[1768r,1792r:26)[1952r,1968r:25)[2264r,2288r:24)[2448r,2464r:23)[2824r,2848r:22)[2992r,3008r:21)[3184r,3216r:28)[3552r,3632r:20)[3792r,3856r:19)[3968r,4000r:18)[4384r,4464r:9)[4576r,4608r:8)[5216r,5232r:1)[5984r,6000r:2)[6160r,6176r:7)[6848r,6896r:10)[7200r,7216r:6)[7312r,7328r:5)[7544r,7552r:4)[8976r,9104r:17)[9408r,9424r:3)[9824r,9856r:16)[10336r,10416r:15)[10736r,10816r:12)[11040r,11120r:11)[11472r,11552r:13)[11872r,11952r:14)  0@0B-phi 1@5216r 2@5984r 3@9408r 4@7544r 5@7312r 6@7200r 7@6160r 8@4576r 9@4384r 10@6848r 11@11040r 12@10736r 13@11472r 14@11872r 15@10336r 16@9824r 17@8976r 18@3968r 19@3792r 20@3552r 21@2992r 22@2824r 23@2448r 24@2264r 25@1952r 26@1768r 27@1552r 28@3184r 29@1280r 30@1120r 31@896r 32@144r
HDI [0B,32r:0)[144r,176r:32)[896r,912r:31)[1120r,1152r:30)[1280r,1312r:29)[1552r,1584r:27)[1768r,1792r:26)[1952r,1968r:25)[2264r,2288r:24)[2448r,2464r:23)[2824r,2848r:22)[2992r,3008r:21)[3184r,3216r:28)[3552r,3632r:20)[3792r,3856r:19)[3968r,4000r:18)[4384r,4464r:9)[4576r,4608r:8)[5216r,5232r:1)[5984r,6000r:2)[6160r,6176r:7)[6848r,6896r:10)[7200r,7216r:6)[7312r,7328r:5)[7544r,7552r:4)[8976r,9104r:17)[9408r,9424r:3)[9824r,9856r:16)[10336r,10416r:15)[10736r,10816r:12)[11040r,11120r:11)[11472r,11552r:13)[11872r,11952r:14)  0@0B-phi 1@5216r 2@5984r 3@9408r 4@7544r 5@7312r 6@7200r 7@6160r 8@4576r 9@4384r 10@6848r 11@11040r 12@10736r 13@11472r 14@11872r 15@10336r 16@9824r 17@8976r 18@3968r 19@3792r 20@3552r 21@2992r 22@2824r 23@2448r 24@2264r 25@1952r 26@1768r 27@1552r 28@3184r 29@1280r 30@1120r 31@896r 32@144r
SIL [0B,16r:0)[160r,176r:16)[1296r,1312r:15)[1744r,1792r:14)[2240r,2288r:13)[2768r,2848r:12)[3568r,3632r:5)[3808r,3856r:4)[4400r,4464r:1)[6864r,6896r:2)[7520r,7552r:11)[8992r,9104r:3)[10352r,10416r:10)[10752r,10816r:7)[11056r,11120r:6)[11488r,11552r:8)[11888r,11952r:9)  0@0B-phi 1@4400r 2@6864r 3@8992r 4@3808r 5@3568r 6@11056r 7@10752r 8@11488r 9@11888r 10@10352r 11@7520r 12@2768r 13@2240r 14@1744r 15@1296r 16@160r
SIH [0B,16r:0)[160r,176r:16)[1296r,1312r:15)[1744r,1792r:14)[2240r,2288r:13)[2768r,2848r:12)[3568r,3632r:5)[3808r,3856r:4)[4400r,4464r:1)[6864r,6896r:2)[7520r,7552r:11)[8992r,9104r:3)[10352r,10416r:10)[10752r,10816r:7)[11056r,11120r:6)[11488r,11552r:8)[11888r,11952r:9)  0@0B-phi 1@4400r 2@6864r 3@8992r 4@3808r 5@3568r 6@11056r 7@10752r 8@11488r 9@11888r 10@10352r 11@7520r 12@2768r 13@2240r 14@1744r 15@1296r 16@160r
HSI [0B,16r:0)[160r,176r:16)[1296r,1312r:15)[1744r,1792r:14)[2240r,2288r:13)[2768r,2848r:12)[3568r,3632r:5)[3808r,3856r:4)[4400r,4464r:1)[6864r,6896r:2)[7520r,7552r:11)[8992r,9104r:3)[10352r,10416r:10)[10752r,10816r:7)[11056r,11120r:6)[11488r,11552r:8)[11888r,11952r:9)  0@0B-phi 1@4400r 2@6864r 3@8992r 4@3808r 5@3568r 6@11056r 7@10752r 8@11488r 9@11888r 10@10352r 11@7520r 12@2768r 13@2240r 14@1744r 15@1296r 16@160r
SPL [96r,96d:189)[176r,176d:188)[192r,192d:187)[208r,208d:186)[240r,240d:185)[880r,880d:184)[912r,912d:183)[928r,928d:182)[944r,944d:181)[976r,976d:180)[1056r,1056d:179)[1152r,1152d:178)[1168r,1168d:177)[1184r,1184d:176)[1216r,1216d:175)[1232r,1232d:174)[1312r,1312d:173)[1328r,1328d:172)[1344r,1344d:171)[1376r,1376d:170)[1488r,1488d:164)[1584r,1584d:163)[1600r,1600d:162)[1616r,1616d:161)[1648r,1648d:160)[1680r,1680d:159)[1792r,1792d:158)[1808r,1808d:157)[1824r,1824d:156)[1856r,1856d:155)[1936r,1936d:154)[1968r,1968d:153)[1984r,1984d:152)[2000r,2000d:151)[2032r,2032d:150)[2144r,2144d:149)[2288r,2288d:148)[2304r,2304d:147)[2320r,2320d:146)[2352r,2352d:145)[2432r,2432d:144)[2464r,2464d:143)[2480r,2480d:142)[2496r,2496d:141)[2528r,2528d:140)[2640r,2640d:139)[2848r,2848d:138)[2864r,2864d:137)[2880r,2880d:136)[2912r,2912d:135)[2976r,2976d:134)[3008r,3008d:133)[3024r,3024d:132)[3040r,3040d:131)[3072r,3072d:130)[3120r,3120d:169)[3216r,3216d:168)[3232r,3232d:167)[3248r,3248d:166)[3280r,3280d:165)[3488r,3488d:129)[3632r,3632d:128)[3648r,3648d:127)[3664r,3664d:126)[3696r,3696d:125)[3744r,3744d:124)[3856r,3856d:123)[3872r,3872d:122)[3888r,3888d:121)[3920r,3920d:120)[3936r,3936d:119)[4000r,4000d:118)[4016r,4016d:117)[4032r,4032d:116)[4064r,4064d:115)[4320r,4320d:9)[4464r,4464d:8)[4480r,4480d:7)[4496r,4496d:6)[4528r,4528d:5)[4544r,4544d:4)[4608r,4608d:3)[4624r,4624d:2)[4640r,4640d:1)[4672r,4672d:0)[4928r,4928d:114)[4992r,4992d:113)[5008r,5008d:112)[5024r,5024d:111)[5056r,5056d:110)[5200r,5200d:14)[5232r,5232d:13)[5248r,5248d:12)[5264r,5264d:11)[5296r,5296d:10)[5360r,5360d:109)[5424r,5424d:108)[5440r,5440d:107)[5456r,5456d:106)[5488r,5488d:105)[5504r,5504d:104)[5536r,5536d:103)[5552r,5552d:102)[5568r,5568d:101)[5600r,5600d:100)[5616r,5616d:99)[5648r,5648d:98)[5664r,5664d:97)[5680r,5680d:96)[5712r,5712d:95)[5728r,5728d:94)[5760r,5760d:93)[5776r,5776d:92)[5792r,5792d:91)[5824r,5824d:90)[5968r,5968d:19)[6000r,6000d:18)[6016r,6016d:17)[6032r,6032d:16)[6064r,6064d:15)[6128r,6128d:89)[6176r,6176d:88)[6192r,6192d:87)[6208r,6208d:86)[6240r,6240d:85)[6816r,6816d:29)[6896r,6896d:28)[6912r,6912d:27)[6928r,6928d:26)[6960r,6960d:25)[6992r,6992d:24)[7040r,7040d:23)[7056r,7056d:22)[7072r,7072d:21)[7104r,7104d:20)[7168r,7168d:84)[7216r,7216d:83)[7232r,7232d:82)[7248r,7248d:81)[7280r,7280d:80)[7296r,7296d:79)[7328r,7328d:78)[7344r,7344d:77)[7360r,7360d:76)[7392r,7392d:75)[7456r,7456d:74)[7552r,7552d:73)[7568r,7568d:72)[7584r,7584d:71)[7616r,7616d:70)[8592r,8592d:69)[9104r,9104d:68)[9120r,9120d:67)[9136r,9136d:66)[9168r,9168d:65)[9392r,9392d:34)[9424r,9424d:33)[9440r,9440d:32)[9456r,9456d:31)[9488r,9488d:30)[9760r,9760d:64)[9856r,9856d:63)[9872r,9872d:62)[9888r,9888d:61)[9920r,9920d:60)[10320r,10320d:59)[10416r,10416d:58)[10432r,10432d:57)[10448r,10448d:56)[10480r,10480d:55)[10720r,10720d:44)[10816r,10816d:43)[10832r,10832d:42)[10848r,10848d:41)[10880r,10880d:40)[11024r,11024d:39)[11120r,11120d:38)[11136r,11136d:37)[11152r,11152d:36)[11184r,11184d:35)[11456r,11456d:49)[11552r,11552d:48)[11568r,11568d:47)[11584r,11584d:46)[11616r,11616d:45)[11856r,11856d:54)[11952r,11952d:53)[11968r,11968d:52)[11984r,11984d:51)[12016r,12016d:50)  0@4672r 1@4640r 2@4624r 3@4608r 4@4544r 5@4528r 6@4496r 7@4480r 8@4464r 9@4320r 10@5296r 11@5264r 12@5248r 13@5232r 14@5200r 15@6064r 16@6032r 17@6016r 18@6000r 19@5968r 20@7104r 21@7072r 22@7056r 23@7040r 24@6992r 25@6960r 26@6928r 27@6912r 28@6896r 29@6816r 30@9488r 31@9456r 32@9440r 33@9424r 34@9392r 35@11184r 36@11152r 37@11136r 38@11120r 39@11024r 40@10880r 41@10848r 42@10832r 43@10816r 44@10720r 45@11616r 46@11584r 47@11568r 48@11552r 49@11456r 50@12016r 51@11984r 52@11968r 53@11952r 54@11856r 55@10480r 56@10448r 57@10432r 58@10416r 59@10320r 60@9920r 61@9888r 62@9872r 63@9856r 64@9760r 65@9168r 66@9136r 67@9120r 68@9104r 69@8592r 70@7616r 71@7584r 72@7568r 73@7552r 74@7456r 75@7392r 76@7360r 77@7344r 78@7328r 79@7296r 80@7280r 81@7248r 82@7232r 83@7216r 84@7168r 85@6240r 86@6208r 87@6192r 88@6176r 89@6128r 90@5824r 91@5792r 92@5776r 93@5760r 94@5728r 95@5712r 96@5680r 97@5664r 98@5648r 99@5616r 100@5600r 101@5568r 102@5552r 103@5536r 104@5504r 105@5488r 106@5456r 107@5440r 108@5424r 109@5360r 110@5056r 111@5024r 112@5008r 113@4992r 114@4928r 115@4064r 116@4032r 117@4016r 118@4000r 119@3936r 120@3920r 121@3888r 122@3872r 123@3856r 124@3744r 125@3696r 126@3664r 127@3648r 128@3632r 129@3488r 130@3072r 131@3040r 132@3024r 133@3008r 134@2976r 135@2912r 136@2880r 137@2864r 138@2848r 139@2640r 140@2528r 141@2496r 142@2480r 143@2464r 144@2432r 145@2352r 146@2320r 147@2304r 148@2288r 149@2144r 150@2032r 151@2000r 152@1984r 153@1968r 154@1936r 155@1856r 156@1824r 157@1808r 158@1792r 159@1680r 160@1648r 161@1616r 162@1600r 163@1584r 164@1488r 165@3280r 166@3248r 167@3232r 168@3216r 169@3120r 170@1376r 171@1344r 172@1328r 173@1312r 174@1232r 175@1216r 176@1184r 177@1168r 178@1152r 179@1056r 180@976r 181@944r 182@928r 183@912r 184@880r 185@240r 186@208r 187@192r 188@176r 189@96r
SPH [96r,96d:189)[176r,176d:188)[192r,192d:187)[208r,208d:186)[240r,240d:185)[880r,880d:184)[912r,912d:183)[928r,928d:182)[944r,944d:181)[976r,976d:180)[1056r,1056d:179)[1152r,1152d:178)[1168r,1168d:177)[1184r,1184d:176)[1216r,1216d:175)[1232r,1232d:174)[1312r,1312d:173)[1328r,1328d:172)[1344r,1344d:171)[1376r,1376d:170)[1488r,1488d:164)[1584r,1584d:163)[1600r,1600d:162)[1616r,1616d:161)[1648r,1648d:160)[1680r,1680d:159)[1792r,1792d:158)[1808r,1808d:157)[1824r,1824d:156)[1856r,1856d:155)[1936r,1936d:154)[1968r,1968d:153)[1984r,1984d:152)[2000r,2000d:151)[2032r,2032d:150)[2144r,2144d:149)[2288r,2288d:148)[2304r,2304d:147)[2320r,2320d:146)[2352r,2352d:145)[2432r,2432d:144)[2464r,2464d:143)[2480r,2480d:142)[2496r,2496d:141)[2528r,2528d:140)[2640r,2640d:139)[2848r,2848d:138)[2864r,2864d:137)[2880r,2880d:136)[2912r,2912d:135)[2976r,2976d:134)[3008r,3008d:133)[3024r,3024d:132)[3040r,3040d:131)[3072r,3072d:130)[3120r,3120d:169)[3216r,3216d:168)[3232r,3232d:167)[3248r,3248d:166)[3280r,3280d:165)[3488r,3488d:129)[3632r,3632d:128)[3648r,3648d:127)[3664r,3664d:126)[3696r,3696d:125)[3744r,3744d:124)[3856r,3856d:123)[3872r,3872d:122)[3888r,3888d:121)[3920r,3920d:120)[3936r,3936d:119)[4000r,4000d:118)[4016r,4016d:117)[4032r,4032d:116)[4064r,4064d:115)[4320r,4320d:9)[4464r,4464d:8)[4480r,4480d:7)[4496r,4496d:6)[4528r,4528d:5)[4544r,4544d:4)[4608r,4608d:3)[4624r,4624d:2)[4640r,4640d:1)[4672r,4672d:0)[4928r,4928d:114)[4992r,4992d:113)[5008r,5008d:112)[5024r,5024d:111)[5056r,5056d:110)[5200r,5200d:14)[5232r,5232d:13)[5248r,5248d:12)[5264r,5264d:11)[5296r,5296d:10)[5360r,5360d:109)[5424r,5424d:108)[5440r,5440d:107)[5456r,5456d:106)[5488r,5488d:105)[5504r,5504d:104)[5536r,5536d:103)[5552r,5552d:102)[5568r,5568d:101)[5600r,5600d:100)[5616r,5616d:99)[5648r,5648d:98)[5664r,5664d:97)[5680r,5680d:96)[5712r,5712d:95)[5728r,5728d:94)[5760r,5760d:93)[5776r,5776d:92)[5792r,5792d:91)[5824r,5824d:90)[5968r,5968d:19)[6000r,6000d:18)[6016r,6016d:17)[6032r,6032d:16)[6064r,6064d:15)[6128r,6128d:89)[6176r,6176d:88)[6192r,6192d:87)[6208r,6208d:86)[6240r,6240d:85)[6816r,6816d:29)[6896r,6896d:28)[6912r,6912d:27)[6928r,6928d:26)[6960r,6960d:25)[6992r,6992d:24)[7040r,7040d:23)[7056r,7056d:22)[7072r,7072d:21)[7104r,7104d:20)[7168r,7168d:84)[7216r,7216d:83)[7232r,7232d:82)[7248r,7248d:81)[7280r,7280d:80)[7296r,7296d:79)[7328r,7328d:78)[7344r,7344d:77)[7360r,7360d:76)[7392r,7392d:75)[7456r,7456d:74)[7552r,7552d:73)[7568r,7568d:72)[7584r,7584d:71)[7616r,7616d:70)[8592r,8592d:69)[9104r,9104d:68)[9120r,9120d:67)[9136r,9136d:66)[9168r,9168d:65)[9392r,9392d:34)[9424r,9424d:33)[9440r,9440d:32)[9456r,9456d:31)[9488r,9488d:30)[9760r,9760d:64)[9856r,9856d:63)[9872r,9872d:62)[9888r,9888d:61)[9920r,9920d:60)[10320r,10320d:59)[10416r,10416d:58)[10432r,10432d:57)[10448r,10448d:56)[10480r,10480d:55)[10720r,10720d:44)[10816r,10816d:43)[10832r,10832d:42)[10848r,10848d:41)[10880r,10880d:40)[11024r,11024d:39)[11120r,11120d:38)[11136r,11136d:37)[11152r,11152d:36)[11184r,11184d:35)[11456r,11456d:49)[11552r,11552d:48)[11568r,11568d:47)[11584r,11584d:46)[11616r,11616d:45)[11856r,11856d:54)[11952r,11952d:53)[11968r,11968d:52)[11984r,11984d:51)[12016r,12016d:50)  0@4672r 1@4640r 2@4624r 3@4608r 4@4544r 5@4528r 6@4496r 7@4480r 8@4464r 9@4320r 10@5296r 11@5264r 12@5248r 13@5232r 14@5200r 15@6064r 16@6032r 17@6016r 18@6000r 19@5968r 20@7104r 21@7072r 22@7056r 23@7040r 24@6992r 25@6960r 26@6928r 27@6912r 28@6896r 29@6816r 30@9488r 31@9456r 32@9440r 33@9424r 34@9392r 35@11184r 36@11152r 37@11136r 38@11120r 39@11024r 40@10880r 41@10848r 42@10832r 43@10816r 44@10720r 45@11616r 46@11584r 47@11568r 48@11552r 49@11456r 50@12016r 51@11984r 52@11968r 53@11952r 54@11856r 55@10480r 56@10448r 57@10432r 58@10416r 59@10320r 60@9920r 61@9888r 62@9872r 63@9856r 64@9760r 65@9168r 66@9136r 67@9120r 68@9104r 69@8592r 70@7616r 71@7584r 72@7568r 73@7552r 74@7456r 75@7392r 76@7360r 77@7344r 78@7328r 79@7296r 80@7280r 81@7248r 82@7232r 83@7216r 84@7168r 85@6240r 86@6208r 87@6192r 88@6176r 89@6128r 90@5824r 91@5792r 92@5776r 93@5760r 94@5728r 95@5712r 96@5680r 97@5664r 98@5648r 99@5616r 100@5600r 101@5568r 102@5552r 103@5536r 104@5504r 105@5488r 106@5456r 107@5440r 108@5424r 109@5360r 110@5056r 111@5024r 112@5008r 113@4992r 114@4928r 115@4064r 116@4032r 117@4016r 118@4000r 119@3936r 120@3920r 121@3888r 122@3872r 123@3856r 124@3744r 125@3696r 126@3664r 127@3648r 128@3632r 129@3488r 130@3072r 131@3040r 132@3024r 133@3008r 134@2976r 135@2912r 136@2880r 137@2864r 138@2848r 139@2640r 140@2528r 141@2496r 142@2480r 143@2464r 144@2432r 145@2352r 146@2320r 147@2304r 148@2288r 149@2144r 150@2032r 151@2000r 152@1984r 153@1968r 154@1936r 155@1856r 156@1824r 157@1808r 158@1792r 159@1680r 160@1648r 161@1616r 162@1600r 163@1584r 164@1488r 165@3280r 166@3248r 167@3232r 168@3216r 169@3120r 170@1376r 171@1344r 172@1328r 173@1312r 174@1232r 175@1216r 176@1184r 177@1168r 178@1152r 179@1056r 180@976r 181@944r 182@928r 183@912r 184@880r 185@240r 186@208r 187@192r 188@176r 189@96r
HSP [96r,96d:189)[176r,176d:188)[192r,192d:187)[208r,208d:186)[240r,240d:185)[880r,880d:184)[912r,912d:183)[928r,928d:182)[944r,944d:181)[976r,976d:180)[1056r,1056d:179)[1152r,1152d:178)[1168r,1168d:177)[1184r,1184d:176)[1216r,1216d:175)[1232r,1232d:174)[1312r,1312d:173)[1328r,1328d:172)[1344r,1344d:171)[1376r,1376d:170)[1488r,1488d:164)[1584r,1584d:163)[1600r,1600d:162)[1616r,1616d:161)[1648r,1648d:160)[1680r,1680d:159)[1792r,1792d:158)[1808r,1808d:157)[1824r,1824d:156)[1856r,1856d:155)[1936r,1936d:154)[1968r,1968d:153)[1984r,1984d:152)[2000r,2000d:151)[2032r,2032d:150)[2144r,2144d:149)[2288r,2288d:148)[2304r,2304d:147)[2320r,2320d:146)[2352r,2352d:145)[2432r,2432d:144)[2464r,2464d:143)[2480r,2480d:142)[2496r,2496d:141)[2528r,2528d:140)[2640r,2640d:139)[2848r,2848d:138)[2864r,2864d:137)[2880r,2880d:136)[2912r,2912d:135)[2976r,2976d:134)[3008r,3008d:133)[3024r,3024d:132)[3040r,3040d:131)[3072r,3072d:130)[3120r,3120d:169)[3216r,3216d:168)[3232r,3232d:167)[3248r,3248d:166)[3280r,3280d:165)[3488r,3488d:129)[3632r,3632d:128)[3648r,3648d:127)[3664r,3664d:126)[3696r,3696d:125)[3744r,3744d:124)[3856r,3856d:123)[3872r,3872d:122)[3888r,3888d:121)[3920r,3920d:120)[3936r,3936d:119)[4000r,4000d:118)[4016r,4016d:117)[4032r,4032d:116)[4064r,4064d:115)[4320r,4320d:9)[4464r,4464d:8)[4480r,4480d:7)[4496r,4496d:6)[4528r,4528d:5)[4544r,4544d:4)[4608r,4608d:3)[4624r,4624d:2)[4640r,4640d:1)[4672r,4672d:0)[4928r,4928d:114)[4992r,4992d:113)[5008r,5008d:112)[5024r,5024d:111)[5056r,5056d:110)[5200r,5200d:14)[5232r,5232d:13)[5248r,5248d:12)[5264r,5264d:11)[5296r,5296d:10)[5360r,5360d:109)[5424r,5424d:108)[5440r,5440d:107)[5456r,5456d:106)[5488r,5488d:105)[5504r,5504d:104)[5536r,5536d:103)[5552r,5552d:102)[5568r,5568d:101)[5600r,5600d:100)[5616r,5616d:99)[5648r,5648d:98)[5664r,5664d:97)[5680r,5680d:96)[5712r,5712d:95)[5728r,5728d:94)[5760r,5760d:93)[5776r,5776d:92)[5792r,5792d:91)[5824r,5824d:90)[5968r,5968d:19)[6000r,6000d:18)[6016r,6016d:17)[6032r,6032d:16)[6064r,6064d:15)[6128r,6128d:89)[6176r,6176d:88)[6192r,6192d:87)[6208r,6208d:86)[6240r,6240d:85)[6816r,6816d:29)[6896r,6896d:28)[6912r,6912d:27)[6928r,6928d:26)[6960r,6960d:25)[6992r,6992d:24)[7040r,7040d:23)[7056r,7056d:22)[7072r,7072d:21)[7104r,7104d:20)[7168r,7168d:84)[7216r,7216d:83)[7232r,7232d:82)[7248r,7248d:81)[7280r,7280d:80)[7296r,7296d:79)[7328r,7328d:78)[7344r,7344d:77)[7360r,7360d:76)[7392r,7392d:75)[7456r,7456d:74)[7552r,7552d:73)[7568r,7568d:72)[7584r,7584d:71)[7616r,7616d:70)[8592r,8592d:69)[9104r,9104d:68)[9120r,9120d:67)[9136r,9136d:66)[9168r,9168d:65)[9392r,9392d:34)[9424r,9424d:33)[9440r,9440d:32)[9456r,9456d:31)[9488r,9488d:30)[9760r,9760d:64)[9856r,9856d:63)[9872r,9872d:62)[9888r,9888d:61)[9920r,9920d:60)[10320r,10320d:59)[10416r,10416d:58)[10432r,10432d:57)[10448r,10448d:56)[10480r,10480d:55)[10720r,10720d:44)[10816r,10816d:43)[10832r,10832d:42)[10848r,10848d:41)[10880r,10880d:40)[11024r,11024d:39)[11120r,11120d:38)[11136r,11136d:37)[11152r,11152d:36)[11184r,11184d:35)[11456r,11456d:49)[11552r,11552d:48)[11568r,11568d:47)[11584r,11584d:46)[11616r,11616d:45)[11856r,11856d:54)[11952r,11952d:53)[11968r,11968d:52)[11984r,11984d:51)[12016r,12016d:50)  0@4672r 1@4640r 2@4624r 3@4608r 4@4544r 5@4528r 6@4496r 7@4480r 8@4464r 9@4320r 10@5296r 11@5264r 12@5248r 13@5232r 14@5200r 15@6064r 16@6032r 17@6016r 18@6000r 19@5968r 20@7104r 21@7072r 22@7056r 23@7040r 24@6992r 25@6960r 26@6928r 27@6912r 28@6896r 29@6816r 30@9488r 31@9456r 32@9440r 33@9424r 34@9392r 35@11184r 36@11152r 37@11136r 38@11120r 39@11024r 40@10880r 41@10848r 42@10832r 43@10816r 44@10720r 45@11616r 46@11584r 47@11568r 48@11552r 49@11456r 50@12016r 51@11984r 52@11968r 53@11952r 54@11856r 55@10480r 56@10448r 57@10432r 58@10416r 59@10320r 60@9920r 61@9888r 62@9872r 63@9856r 64@9760r 65@9168r 66@9136r 67@9120r 68@9104r 69@8592r 70@7616r 71@7584r 72@7568r 73@7552r 74@7456r 75@7392r 76@7360r 77@7344r 78@7328r 79@7296r 80@7280r 81@7248r 82@7232r 83@7216r 84@7168r 85@6240r 86@6208r 87@6192r 88@6176r 89@6128r 90@5824r 91@5792r 92@5776r 93@5760r 94@5728r 95@5712r 96@5680r 97@5664r 98@5648r 99@5616r 100@5600r 101@5568r 102@5552r 103@5536r 104@5504r 105@5488r 106@5456r 107@5440r 108@5424r 109@5360r 110@5056r 111@5024r 112@5008r 113@4992r 114@4928r 115@4064r 116@4032r 117@4016r 118@4000r 119@3936r 120@3920r 121@3888r 122@3872r 123@3856r 124@3744r 125@3696r 126@3664r 127@3648r 128@3632r 129@3488r 130@3072r 131@3040r 132@3024r 133@3008r 134@2976r 135@2912r 136@2880r 137@2864r 138@2848r 139@2640r 140@2528r 141@2496r 142@2480r 143@2464r 144@2432r 145@2352r 146@2320r 147@2304r 148@2288r 149@2144r 150@2032r 151@2000r 152@1984r 153@1968r 154@1936r 155@1856r 156@1824r 157@1808r 158@1792r 159@1680r 160@1648r 161@1616r 162@1600r 163@1584r 164@1488r 165@3280r 166@3248r 167@3232r 168@3216r 169@3120r 170@1376r 171@1344r 172@1328r 173@1312r 174@1232r 175@1216r 176@1184r 177@1168r 178@1152r 179@1056r 180@976r 181@944r 182@928r 183@912r 184@880r 185@240r 186@208r 187@192r 188@176r 189@96r
%0 [32r,64r:0)  0@32r weight:0.000000e+00
%1 [16r,80r:0)  0@16r weight:0.000000e+00
%4 [256r,288r:0)  0@256r weight:0.000000e+00
%5 [352r,368r:0)  0@352r weight:0.000000e+00
%6 [384r,400r:0)  0@384r weight:0.000000e+00
%7 [416r,432r:0)  0@416r weight:0.000000e+00
%8 [448r,464r:0)  0@448r weight:0.000000e+00
%9 [480r,496r:0)  0@480r weight:0.000000e+00
%10 [512r,528r:0)  0@512r weight:0.000000e+00
%11 [544r,560r:0)  0@544r weight:0.000000e+00
%12 [576r,592r:0)  0@576r weight:0.000000e+00
%13 [608r,624r:0)  0@608r weight:0.000000e+00
%14 [640r,656r:0)  0@640r weight:0.000000e+00
%15 [672r,688r:0)  0@672r weight:0.000000e+00
%16 [704r,720r:0)  0@704r weight:0.000000e+00
%17 [736r,752r:0)  0@736r weight:0.000000e+00
%18 [768r,784r:0)  0@768r weight:0.000000e+00
%19 [800r,816r:0)  0@800r weight:0.000000e+00
%20 [832r,848r:0)  0@832r weight:0.000000e+00
%21 [864r,960r:0)  0@864r weight:0.000000e+00
%29 [1392r,1424r:0)  0@1392r weight:0.000000e+00
%34 [3296r,3312r:0)  0@3296r weight:0.000000e+00
%35 [3328r,3344r:0)  0@3328r weight:0.000000e+00
%36 [3360r,3376r:0)  0@3360r weight:0.000000e+00
%37 [3392r,3408r:0)  0@3392r weight:0.000000e+00
%42 [1664r,1840r:0)  0@1664r weight:0.000000e+00
%45 [1872r,1888r:0)  0@1872r weight:0.000000e+00
%46 [1920r,2016r:0)  0@1920r weight:0.000000e+00
%47 [2048r,2064r:0)  0@2048r weight:0.000000e+00
%49 [2128r,2336r:0)  0@2128r weight:0.000000e+00
%54 [2368r,2384r:0)  0@2368r weight:0.000000e+00
%55 [2416r,2512r:0)  0@2416r weight:0.000000e+00
%56 [2544r,2560r:0)  0@2544r weight:0.000000e+00
%58 [2624r,2896r:0)  0@2624r weight:0.000000e+00
%65 [2928r,2944r:0)  0@2928r weight:0.000000e+00
%66 [2960r,3056r:0)  0@2960r weight:0.000000e+00
%68 [3440r,3680r:0)  0@3440r weight:0.000000e+00
%69 [3456r,3680r:0)  0@3456r weight:0.000000e+00
%70 [3472r,3680r:0)  0@3472r weight:0.000000e+00
%75 [3712r,3904r:0)  0@3712r weight:0.000000e+00
%76 [3728r,3904r:0)  0@3728r weight:0.000000e+00
%89 [4736r,4768r:0)[4768r,4784r:1)  0@4736r 1@4768r weight:0.000000e+00
%91 [4800r,4832r:0)[4832r,4848r:1)  0@4800r 1@4832r weight:0.000000e+00
%93 [4864r,4896r:0)[4896r,4912r:1)  0@4864r 1@4896r weight:0.000000e+00
%96 [5072r,5088r:0)  0@5072r weight:0.000000e+00
%101 [5840r,5856r:0)  0@5840r weight:0.000000e+00
%104 [6144r,6256r:0)  0@6144r weight:0.000000e+00
%105 [6336r,6352r:0)  0@6336r weight:0.000000e+00
%108 [7408r,7424r:0)  0@7408r weight:0.000000e+00
%109 [7440r,7600r:0)  0@7440r weight:0.000000e+00
%112 [7632r,7664r:0)  0@7632r weight:0.000000e+00
%113 [7648r,7664r:0)  0@7648r weight:0.000000e+00
%115 [7760r,7888r:0)  0@7760r weight:0.000000e+00
%117 [7776r,7920r:0)  0@7776r weight:0.000000e+00
%118 [7792r,7808r:2)[7808r,7840r:0)[7840r,8000r:1)  0@7808r 1@7840r 2@7792r weight:0.000000e+00
%120 [7744r,7888r:2)[7888r,7920r:0)[7920r,7936r:1)  0@7888r 1@7920r 2@7744r weight:0.000000e+00
%124 [8000r,8032r:0)[8032r,8128r:1)  0@8000r 1@8032r weight:0.000000e+00
%126 [8048r,8064r:2)[8064r,8096r:0)[8096r,8128r:1)[8128r,8192r:3)  0@8064r 1@8096r 2@8048r 3@8128r weight:0.000000e+00
%128 [7936r,7968r:2)[7968r,8160r:0)[8160r,8192r:1)[8192r,8224r:3)[8224r,8272r:4)  0@7968r 1@8160r 2@7936r 3@8192r 4@8224r weight:0.000000e+00
%134 [8288r,8320r:0)[8320r,8352r:1)  0@8288r 1@8320r weight:0.000000e+00
%135 [8240r,8272r:2)[8272r,8352r:0)[8352r,8368r:1)  0@8272r 1@8352r 2@8240r weight:0.000000e+00
%136 [8448r,9152r:0)  0@8448r weight:0.000000e+00
%138 [8480r,9152r:0)  0@8480r weight:0.000000e+00
%139 [8496r,9152r:0)  0@8496r weight:0.000000e+00
%140 [8512r,9152r:0)  0@8512r weight:0.000000e+00
%141 [8528r,9152r:0)  0@8528r weight:0.000000e+00
%142 [8544r,9152r:0)  0@8544r weight:0.000000e+00
%143 [8560r,9152r:0)  0@8560r weight:0.000000e+00
%144 [8576r,9152r:0)  0@8576r weight:0.000000e+00
%145 [8608r,8640r:0)  0@8608r weight:0.000000e+00
%147 [8656r,8672r:0)  0@8656r weight:0.000000e+00
%148 [8688r,8704r:0)  0@8688r weight:0.000000e+00
%149 [8720r,8736r:0)  0@8720r weight:0.000000e+00
%150 [8752r,8768r:0)  0@8752r weight:0.000000e+00
%151 [8784r,8800r:0)  0@8784r weight:0.000000e+00
%152 [8816r,8832r:0)  0@8816r weight:0.000000e+00
%153 [8848r,8864r:0)  0@8848r weight:0.000000e+00
%154 [8880r,8896r:0)  0@8880r weight:0.000000e+00
%155 [8928r,8944r:0)  0@8928r weight:0.000000e+00
%157 [9248r,9264r:0)  0@9248r weight:0.000000e+00
%160 [9600r,9632r:0)  0@9600r weight:0.000000e+00
%161 [9616r,9632r:0)  0@9616r weight:0.000000e+00
%162 [9712r,9728r:0)  0@9712r weight:0.000000e+00
%167 [9936r,9952r:0)  0@9936r weight:0.000000e+00
%170 [10208r,10240r:0)  0@10208r weight:0.000000e+00
%171 [9968r,12080B:0)  0@9968r weight:0.000000e+00
%172 [10224r,10464r:0)  0@10224r weight:0.000000e+00
%173 [9984r,12080B:0)  0@9984r weight:0.000000e+00
%174 [10240r,10464r:0)  0@10240r weight:0.000000e+00
%176 [10256r,10272r:2)[10272r,10304r:0)[10304r,10464r:1)  0@10272r 1@10304r 2@10256r weight:0.000000e+00
%187 [11728r,11760r:0)[11760r,12000r:1)  0@11728r 1@11760r weight:0.000000e+00
%189 [11792r,11808r:2)[11808r,11840r:0)[11840r,12000r:1)  0@11808r 1@11840r 2@11792r weight:0.000000e+00
%196 [11296r,11328r:2)[11328r,11360r:0)[11360r,11600r:1)  0@11328r 1@11360r 2@11296r weight:0.000000e+00
%198 [11392r,11408r:2)[11408r,11440r:0)[11440r,11600r:1)  0@11408r 1@11440r 2@11392r weight:0.000000e+00
%205 [10560r,10592r:2)[10592r,10624r:0)[10624r,10864r:1)  0@10592r 1@10624r 2@10560r weight:0.000000e+00
%208 [10656r,10672r:2)[10672r,10704r:0)[10704r,10864r:1)  0@10672r 1@10704r 2@10656r weight:0.000000e+00
%214 [10896r,10928r:0)[10928r,11168r:1)  0@10896r 1@10928r weight:0.000000e+00
%216 [10960r,10976r:2)[10976r,11008r:0)[11008r,11168r:1)  0@10976r 1@11008r 2@10960r weight:0.000000e+00
%219 [9376r,9472r:0)  0@9376r weight:0.000000e+00
%220 [9504r,9536r:0)  0@9504r weight:0.000000e+00
%221 [9520r,9536r:0)  0@9520r weight:0.000000e+00
%222 [9280r,9584B:0)  0@9280r weight:0.000000e+00
%223 [6416r,6672r:0)  0@6416r weight:0.000000e+00
%225 [6272r,7152B:0)  0@6272r weight:0.000000e+00
%227 [6480r,6496r:0)[6496r,6592r:1)  0@6480r 1@6496r weight:0.000000e+00
%233 [6448r,6464r:4)[6464r,6544r:3)[6544r,6592r:0)[6592r,6624r:1)[6624r,6656r:2)  0@6544r 1@6592r 2@6624r 3@6464r 4@6448r weight:0.000000e+00
%235 [6656r,6672r:0)  0@6656r weight:0.000000e+00
%239 [6800r,6944r:0)  0@6800r weight:0.000000e+00
%246 [5952r,6048r:0)  0@5952r weight:0.000000e+00
%247 [5184r,5280r:0)  0@5184r weight:0.000000e+00
%248 [4272r,4512r:0)  0@4272r weight:0.000000e+00
%249 [4288r,4512r:0)  0@4288r weight:0.000000e+00
%250 [4304r,4512r:0)  0@4304r weight:0.000000e+00
%257 [12128r,12144r:0)  0@12128r weight:0.000000e+00
%259 [10000r,12080B:0)  0@10000r weight:0.000000e+00
RegMasks: 176r 912r 1152r 1312r 1584r 1792r 1968r 2288r 2464r 2848r 3008r 3216r 3632r 3856r 4000r 4464r 4608r 4992r 5232r 5424r 5536r 5648r 5760r 6000r 6176r 6896r 7040r 7216r 7328r 7552r 9104r 9424r 9856r 10416r 10816r 11120r 11552r 11952r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=128, align=16, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=1, align=4, at location [SP+8]
  fi#13: size=128, align=16, at location [SP+8]
  fi#14: size=8, align=8, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.000000e+00, align=8
  cp#1: 0x408B89645A1CAC08, align=8
  cp#2: -4.683910e+03, align=8
  cp#3: 1.148450e+04, align=8
  cp#4: -1.927240e+04, align=8
  cp#5: 1.000000e+06, align=8
  cp#6: 1.000000e+02, align=8
Function Live Ins: $edi in %0, $rsi in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $edi, $rsi
16B	  %1:gr64 = COPY $rsi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
64B	  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
80B	  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
144B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_timer_flag, $noreg
160B	  $rsi = LEA64r $rip, 1, $noreg, @sp__str_1_r_, $noreg
176B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  PCN_STACKMAP 0, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
240B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = COPY killed $rax
272B	  MOV64mr %stack.14.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
288B	  TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
304B	  JCC_1 %bb.2, 4, implicit killed $eflags
320B	  JMP_1 %bb.1

336B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

352B	  %5:gr32 = MOV32ri 1
368B	  MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
384B	  %6:gr64 = LEA64r $rip, 1, $noreg, @sp__str_2_total_, $noreg
400B	  MOV64mr %stack.13.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
416B	  %7:gr64 = LEA64r $rip, 1, $noreg, @sp__str_3_rhsx_, $noreg
432B	  MOV64mr %stack.13.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
448B	  %8:gr64 = LEA64r $rip, 1, $noreg, @sp__str_4_rhsy_, $noreg
464B	  MOV64mr %stack.13.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
480B	  %9:gr64 = LEA64r $rip, 1, $noreg, @sp__str_5_rhsz_, $noreg
496B	  MOV64mr %stack.13.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
512B	  %10:gr64 = LEA64r $rip, 1, $noreg, @sp__str_6_rhs_, $noreg
528B	  MOV64mr %stack.13.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
544B	  %11:gr64 = LEA64r $rip, 1, $noreg, @sp__str_7_xsolve_, $noreg
560B	  MOV64mr %stack.13.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
576B	  %12:gr64 = LEA64r $rip, 1, $noreg, @sp__str_8_ysolve_, $noreg
592B	  MOV64mr %stack.13.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
608B	  %13:gr64 = LEA64r $rip, 1, $noreg, @sp__str_9_zsolve_, $noreg
624B	  MOV64mr %stack.13.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
640B	  %14:gr64 = LEA64r $rip, 1, $noreg, @sp__str_10_redist1_, $noreg
656B	  MOV64mr %stack.13.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
672B	  %15:gr64 = LEA64r $rip, 1, $noreg, @sp__str_11_redist2_, $noreg
688B	  MOV64mr %stack.13.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
704B	  %16:gr64 = LEA64r $rip, 1, $noreg, @sp__str_12_tzetar_, $noreg
720B	  MOV64mr %stack.13.t_names, 1, $noreg, 112, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10, align 16)
736B	  %17:gr64 = LEA64r $rip, 1, $noreg, @sp__str_13_ninvr_, $noreg
752B	  MOV64mr %stack.13.t_names, 1, $noreg, 104, $noreg, %17:gr64 :: (store 8 into %ir.arrayidx11)
768B	  %18:gr64 = LEA64r $rip, 1, $noreg, @sp__str_14_pinvr_, $noreg
784B	  MOV64mr %stack.13.t_names, 1, $noreg, 96, $noreg, %18:gr64 :: (store 8 into %ir.arrayidx12, align 16)
800B	  %19:gr64 = LEA64r $rip, 1, $noreg, @sp__str_15_txinvr_, $noreg
816B	  MOV64mr %stack.13.t_names, 1, $noreg, 88, $noreg, %19:gr64 :: (store 8 into %ir.arrayidx13)
832B	  %20:gr64 = LEA64r $rip, 1, $noreg, @sp__str_16_add_, $noreg
848B	  MOV64mr %stack.13.t_names, 1, $noreg, 120, $noreg, %20:gr64 :: (store 8 into %ir.arrayidx14)
864B	  %21:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
880B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
896B	  $rdi = COPY %21:gr64
912B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  PCN_STACKMAP 1, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %21:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
976B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
992B	  JMP_1 %bb.3

1008B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1024B	  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0 :: (store 4 into @timeron)

1040B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x50000000), %bb.9(0x30000000); %bb.4(62.50%), %bb.9(37.50%)

1056B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1120B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_17____NAS_Par, $noreg
1136B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1152B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
1168B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1200B	  PCN_STACKMAP 2, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1280B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_18_inputsp_da, $noreg
1296B	  $rsi = LEA64r $rip, 1, $noreg, @sp__str_1_r_, $noreg
1312B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1328B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1344B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1360B	  PCN_STACKMAP 3, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1392B	  %29:gr64 = COPY killed $rax
1408B	  MOV64mr %stack.14.fp, 1, $noreg, 0, $noreg, %29:gr64 :: (store 8 into %ir.fp)
1424B	  TEST64rr %29:gr64, %29:gr64, implicit-def $eflags
1440B	  JCC_1 %bb.9, 4, implicit killed $eflags
1456B	  JMP_1 %bb.4

1472B	bb.4.if.then19:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1488B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1552B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_19__Reading_f, $noreg
1568B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1584B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
1600B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  PCN_STACKMAP 4, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
1648B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1664B	  %42:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
1680B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1744B	  $rsi = LEA64r $rip, 1, $noreg, @sp__str_20__d_, $noreg
1760B	  $rdx = LEA64r %stack.4.niter, 1, $noreg, 0, $noreg
1768B	  $rdi = COPY %42:gr64
1776B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1792B	  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1808B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1824B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1840B	  PCN_STACKMAP 5, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %42:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
1856B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1872B	  %45:gr32 = COPY killed $eax
1888B	  MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %45:gr32 :: (store 4 into %ir.result)

1904B	bb.5.while.cond:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

1920B	  %46:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
1936B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1952B	  $rdi = COPY %46:gr64
1968B	  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1984B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2000B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2016B	  PCN_STACKMAP 6, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %46:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
2032B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2048B	  %47:gr32 = COPY killed $eax
2064B	  CMP32ri8 %47:gr32, 10, implicit-def $eflags
2080B	  JCC_1 %bb.5, 5, implicit killed $eflags
2096B	  JMP_1 %bb.6

2112B	bb.6.while.end:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

2128B	  %49:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2240B	  $rsi = LEA64r $rip, 1, $noreg, @sp__str_21__lf_, $noreg
2256B	  $rdx = LEA64r $rip, 1, $noreg, @dt, $noreg
2264B	  $rdi = COPY %49:gr64
2272B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
2288B	  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2336B	  PCN_STACKMAP 7, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %49:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
2352B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2368B	  %54:gr32 = COPY killed $eax
2384B	  MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %54:gr32 :: (store 4 into %ir.result)

2400B	bb.7.while.cond25:
	; predecessors: %bb.6, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

2416B	  %55:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2448B	  $rdi = COPY %55:gr64
2464B	  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2512B	  PCN_STACKMAP 8, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %55:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
2528B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2544B	  %56:gr32 = COPY killed $eax
2560B	  CMP32ri8 %56:gr32, 10, implicit-def $eflags
2576B	  JCC_1 %bb.7, 5, implicit killed $eflags
2592B	  JMP_1 %bb.8

2608B	bb.8.while.end29:
	; predecessors: %bb.7
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2624B	  %58:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2768B	  $rsi = LEA64r $rip, 1, $noreg, @sp__str_22__d_d_d_, $noreg
2784B	  $rdx = LEA64r $rip, 1, $noreg, @grid_points, $noreg
2800B	  $rcx = nuw LEA64r $rip, 1, $noreg, @grid_points + 4, $noreg
2816B	  $r8 = nuw LEA64r $rip, 1, $noreg, @grid_points + 8, $noreg
2824B	  $rdi = COPY %58:gr64
2832B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
2848B	  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2864B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2880B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2896B	  PCN_STACKMAP 9, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %58:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
2912B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2928B	  %65:gr32 = COPY killed $eax
2944B	  MOV32mr %stack.15.result, 1, $noreg, 0, $noreg, %65:gr32 :: (store 4 into %ir.result)
2960B	  %66:gr64 = MOV64rm %stack.14.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2976B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2992B	  $rdi = COPY %66:gr64
3008B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3040B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3056B	  PCN_STACKMAP 10, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %66:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
3072B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3088B	  JMP_1 %bb.10

3104B	bb.9.if.else32:
	; predecessors: %bb.3
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

3120B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3184B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_23__No_input_, $noreg
3200B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
3216B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3232B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3248B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3264B	  PCN_STACKMAP 11, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
3280B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3296B	  %34:gr32 = MOV32ri 400
3312B	  MOV32mr %stack.4.niter, 1, $noreg, 0, $noreg, %34:gr32 :: (store 4 into %ir.niter)
3328B	  %35:gr64 = MOV64ri 4562254508917369340
3344B	  MOV64mr $rip, 1, $noreg, @dt, $noreg, %35:gr64 :: (store 8 into @dt)
3360B	  %36:gr64 = MOV64ri 438086664294
3376B	  MOV64mr $rip, 1, $noreg, @grid_points, $noreg, %36:gr64 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
3392B	  %37:gr32 = MOV32ri 102
3408B	  MOV32mr $rip, 1, $noreg, @grid_points + 8, $noreg, %37:gr32 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

3424B	bb.10.if.end34:
	; predecessors: %bb.9, %bb.8
	  successors: %bb.13(0x40000000), %bb.11(0x40000000); %bb.13(50.00%), %bb.11(50.00%)

3440B	  %68:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
3456B	  %69:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
3472B	  %70:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
3488B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3552B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_24__Size___4d, $noreg
3568B	  $esi = COPY %68:gr32
3584B	  $edx = COPY %69:gr32
3600B	  $ecx = COPY %70:gr32
3616B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
3632B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3648B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3664B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3680B	  PCN_STACKMAP 12, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %68:gr32, %69:gr32, %70:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
3696B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3712B	  %75:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
3728B	  %76:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dt, $noreg :: (dereferenceable load 8 from @dt)
3744B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3792B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_25__Iteration, $noreg
3808B	  $esi = COPY %75:gr32
3824B	  $xmm0 = COPY %76:fr64
3840B	  $al = MOV8ri 1
3856B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3872B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3888B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3904B	  PCN_STACKMAP 13, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %75:gr32, %76:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
3920B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3936B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3968B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_26___, $noreg
3984B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4000B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4016B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4032B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4048B	  PCN_STACKMAP 14, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
4064B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4080B	  CMP32mi8 $rip, 1, $noreg, @grid_points, $noreg, 102, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
4096B	  JCC_1 %bb.13, 15, implicit killed $eflags
4112B	  JMP_1 %bb.11

4128B	bb.11.lor.lhs.false:
	; predecessors: %bb.10
	  successors: %bb.13(0x40000000), %bb.12(0x40000000); %bb.13(50.00%), %bb.12(50.00%)

4144B	  CMP32mi8 $rip, 1, $noreg, @grid_points + 4, $noreg, 102, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
4160B	  JCC_1 %bb.13, 15, implicit killed $eflags
4176B	  JMP_1 %bb.12

4192B	bb.12.lor.lhs.false40:
	; predecessors: %bb.11
	  successors: %bb.13(0x40000000), %bb.14(0x40000000); %bb.13(50.00%), %bb.14(50.00%)

4208B	  CMP32mi8 $rip, 1, $noreg, @grid_points + 8, $noreg, 103, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
4224B	  JCC_1 %bb.14, 12, implicit killed $eflags
4240B	  JMP_1 %bb.13

4256B	bb.13.if.then42:
	; predecessors: %bb.10, %bb.11, %bb.12
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

4272B	  %248:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
4288B	  %249:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
4304B	  %250:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
4320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4384B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_27___d___d___, $noreg
4400B	  $esi = COPY %248:gr32
4416B	  $edx = COPY %249:gr32
4432B	  $ecx = COPY %250:gr32
4448B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4464B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4512B	  PCN_STACKMAP 15, 0, 0, %stack.0.retval, 0, %248:gr32, %249:gr32, %250:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.0.retval, align 4)
4528B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4576B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_28__Problem_s, $noreg
4592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4656B	  PCN_STACKMAP 16, 0, 0, %stack.0.retval, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.0.retval, align 4)
4672B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4688B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
4704B	  JMP_1 %bb.45

4720B	bb.14.if.end45:
	; predecessors: %bb.12
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

4736B	  %89:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
4768B	  %89:gr32 = ADD32ri8 %89:gr32(tied-def 0), -2, implicit-def dead $eflags
4784B	  MOV32mr $rip, 1, $noreg, @nx2, $noreg, %89:gr32 :: (store 4 into @nx2)
4800B	  %91:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
4832B	  %91:gr32 = ADD32ri8 %91:gr32(tied-def 0), -2, implicit-def dead $eflags
4848B	  MOV32mr $rip, 1, $noreg, @ny2, $noreg, %91:gr32 :: (store 4 into @ny2)
4864B	  %93:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
4896B	  %93:gr32 = ADD32ri8 %93:gr32(tied-def 0), -2, implicit-def dead $eflags
4912B	  MOV32mr $rip, 1, $noreg, @nz2, $noreg, %93:gr32 :: (store 4 into @nz2)
4928B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4976B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4992B	  CALL64pcrel32 @set_constants, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
5008B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5024B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5040B	  PCN_STACKMAP 17, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
5056B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5072B	  %96:gr32 = MOV32ri 1
5088B	  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %96:gr32 :: (store 4 into %ir.i)

5104B	bb.15.for.cond:
	; predecessors: %bb.14, %bb.16
	  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

5120B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
5136B	  JCC_1 %bb.17, 15, implicit killed $eflags
5152B	  JMP_1 %bb.16

5168B	bb.16.for.body:
	; predecessors: %bb.15
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

5184B	  %247:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
5200B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5216B	  $edi = COPY %247:gr32
5232B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
5248B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5264B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5280B	  PCN_STACKMAP 18, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %247:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
5296B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5312B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
5328B	  JMP_1 %bb.15

5344B	bb.17.for.end:
	; predecessors: %bb.15
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

5360B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5408B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
5424B	  CALL64pcrel32 @exact_rhs, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
5440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5456B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5472B	  PCN_STACKMAP 19, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
5488B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5504B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5520B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
5536B	  CALL64pcrel32 @initialize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
5552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5568B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5584B	  PCN_STACKMAP 20, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
5600B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5632B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
5648B	  CALL64pcrel32 @adi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
5664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5680B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5696B	  PCN_STACKMAP 21, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
5712B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5728B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5744B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
5760B	  CALL64pcrel32 @initialize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
5776B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5792B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5808B	  PCN_STACKMAP 22, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
5824B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5840B	  %101:gr32 = MOV32ri 1
5856B	  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %101:gr32 :: (store 4 into %ir.i)

5872B	bb.18.for.cond49:
	; predecessors: %bb.17, %bb.19
	  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

5888B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
5904B	  JCC_1 %bb.20, 15, implicit killed $eflags
5920B	  JMP_1 %bb.19

5936B	bb.19.for.body51:
	; predecessors: %bb.18
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

5952B	  %246:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
5968B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5984B	  $edi = COPY %246:gr32
6000B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
6016B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6032B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6048B	  PCN_STACKMAP 23, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %246:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
6064B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6080B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
6096B	  JMP_1 %bb.18

6112B	bb.20.for.end54:
	; predecessors: %bb.18
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

6128B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6144B	  %104:gr32 = MOV32ri 1
6160B	  $edi = MOV32ri 1
6176B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
6192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6224B	  PCN_STACKMAP 24, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
6240B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6256B	  MOV32mr %stack.5.step, 1, $noreg, 0, $noreg, %104:gr32 :: (store 4 into %ir.step)
6272B	  %225:gr64 = MOV32ri64 1717986919

6320B	bb.21.for.cond55:
	; predecessors: %bb.20, %bb.25
	  successors: %bb.22(0x7c000000), %bb.26(0x04000000); %bb.22(96.88%), %bb.26(3.12%)

6336B	  %105:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
6352B	  CMP32rm %105:gr32, %stack.4.niter, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.niter)
6368B	  JCC_1 %bb.26, 15, implicit killed $eflags
6384B	  JMP_1 %bb.22

6400B	bb.22.for.body57:
	; predecessors: %bb.21
	  successors: %bb.24(0x30000000), %bb.23(0x50000000); %bb.24(37.50%), %bb.23(62.50%)

6416B	  %223:gr64_with_sub_8bit = MOVSX64rm32 %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
6448B	  %233:gr64_nosp = COPY %223:gr64_with_sub_8bit
6464B	  %233:gr64_nosp = IMUL64rr %233:gr64_nosp(tied-def 0), %225:gr64, implicit-def dead $eflags
6480B	  %227:gr64_with_sub_8bit = COPY %233:gr64_nosp
6496B	  %227:gr64_with_sub_8bit = SHR64ri %227:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
6544B	  %233:gr64_nosp = SAR64ri %233:gr64_nosp(tied-def 0), 35, implicit-def dead $eflags
6592B	  %233.sub_32bit:gr64_nosp = ADD32rr %233.sub_32bit:gr64_nosp(tied-def 0), %227.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
6624B	  %233.sub_32bit:gr64_nosp = SHL32ri %233.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
6656B	  %235:gr32 = LEA64_32r %233:gr64_nosp, 4, %233:gr64_nosp, 0, $noreg
6672B	  CMP32rr %223.sub_32bit:gr64_with_sub_8bit, %235:gr32, implicit-def $eflags
6688B	  JCC_1 %bb.24, 4, implicit killed $eflags
6704B	  JMP_1 %bb.23

6720B	bb.23.lor.lhs.false59:
	; predecessors: %bb.22
	  successors: %bb.24(0x40000000), %bb.25(0x40000000); %bb.24(50.00%), %bb.25(50.00%)

6736B	  CMP32mi8 %stack.5.step, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (dereferenceable load 4 from %ir.step)
6752B	  JCC_1 %bb.25, 5, implicit killed $eflags
6768B	  JMP_1 %bb.24

6784B	bb.24.if.then61:
	; predecessors: %bb.22, %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

6800B	  %239:gr32 = MOV32rm %stack.5.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
6816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6848B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_29__Time_step, $noreg
6864B	  $esi = COPY %239:gr32
6880B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
6896B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
6912B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6928B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6944B	  PCN_STACKMAP 25, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %239:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
6960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

6976B	bb.25.if.end63:
	; predecessors: %bb.23, %bb.24
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

6992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7024B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
7040B	  CALL64pcrel32 @adi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
7056B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7072B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7088B	  PCN_STACKMAP 26, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
7104B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7120B	  INC32m %stack.5.step, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.step), (dereferenceable load 4 from %ir.step)
7136B	  JMP_1 %bb.21

7152B	bb.26.for.end66:
	; predecessors: %bb.21
	  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

7168B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7200B	  $edi = MOV32ri 1
7216B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
7232B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7248B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7264B	  PCN_STACKMAP 27, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
7280B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7312B	  $edi = MOV32ri 1
7328B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
7344B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7360B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7376B	  PCN_STACKMAP 28, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
7392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7408B	  %108:fr64 = COPY killed $xmm0
7424B	  MOVSDmr %stack.9.tmax, 1, $noreg, 0, $noreg, %108:fr64 :: (store 8 into %ir.tmax)
7440B	  %109:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
7456B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7520B	  $rsi = LEA64r %stack.12.Class, 1, $noreg, 0, $noreg
7536B	  $rdx = LEA64r %stack.11.verified, 1, $noreg, 0, $noreg
7544B	  $edi = COPY %109:gr32
7552B	  CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
7568B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7600B	  PCN_STACKMAP 29, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %109:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
7616B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7632B	  %112:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
7648B	  %113:fr64 = FsFLD0SD
7664B	  UCOMISDrr %112:fr64, %113:fr64, implicit-def $eflags
7680B	  JCC_1 %bb.27, 5, implicit $eflags
7696B	  JCC_1 %bb.27, 10, implicit killed $eflags
7712B	  JMP_1 %bb.28

7728B	bb.27.if.then69:
	; predecessors: %bb.26
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

7744B	  %120:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
7760B	  %115:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
7776B	  %117:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
7792B	  %118:gr32 = COPY %115:gr32
7808B	  %118:gr32 = IMUL32rr %118:gr32(tied-def 0), %117:gr32, implicit-def dead $eflags
7840B	  %118:gr32 = IMUL32rr %118:gr32(tied-def 0), %120:gr32, implicit-def dead $eflags
7856B	  MOV32mr %stack.6.n3, 1, $noreg, 0, $noreg, %118:gr32 :: (store 4 into %ir.n3)
7888B	  %120:gr32 = nsw ADD32rr %120:gr32(tied-def 0), %115:gr32, implicit-def dead $eflags
7920B	  %120:gr32 = nsw ADD32rr %120:gr32(tied-def 0), %117:gr32, implicit-def dead $eflags
7936B	  %128:fr64 = CVTSI2SDrr %120:gr32
7968B	  %128:fr64 = DIVSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
7984B	  MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %128:fr64 :: (store 8 into %ir.t)
8000B	  %124:fr64 = CVTSI2SDrr %118:gr32
8032B	  %124:fr64 = MULSDrm %124:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
8048B	  %126:fr64 = COPY %128:fr64
8064B	  %126:fr64 = MULSDrr %126:fr64(tied-def 0), %126:fr64
8096B	  %126:fr64 = MULSDrm %126:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
8128B	  %126:fr64 = ADDSDrr %126:fr64(tied-def 0), %124:fr64
8160B	  %128:fr64 = MULSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
8192B	  %128:fr64 = ADDSDrr %128:fr64(tied-def 0), %126:fr64
8224B	  %128:fr64 = ADDSDrm %128:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
8240B	  %135:fr64 = CVTSI2SDrm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
8272B	  %135:fr64 = MULSDrr %135:fr64(tied-def 0), %128:fr64
8288B	  %134:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
8320B	  %134:fr64 = MULSDrm %134:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
8352B	  %135:fr64 = DIVSDrr %135:fr64(tied-def 0), %134:fr64
8368B	  MOVSDmr %stack.7.mflops, 1, $noreg, 0, $noreg, %135:fr64 :: (store 8 into %ir.mflops)
8384B	  JMP_1 %bb.29

8400B	bb.28.if.else84:
	; predecessors: %bb.26
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

8416B	  MOV64mi32 %stack.7.mflops, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.mflops)

8432B	bb.29.if.end85:
	; predecessors: %bb.28, %bb.27
	  successors: %bb.30(0x50000000), %bb.44(0x30000000); %bb.30(62.50%), %bb.44(37.50%)

8448B	  %136:gr32 = MOVSX32rm8 %stack.12.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
8480B	  %138:gr32 = MOV32rm $rip, 1, $noreg, @grid_points, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
8496B	  %139:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 4, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
8512B	  %140:gr32 = MOV32rm $rip, 1, $noreg, @grid_points + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
8528B	  %141:gr32 = MOV32rm %stack.4.niter, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.niter)
8544B	  %142:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
8560B	  %143:fr64 = MOVSDrm_alt %stack.7.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
8576B	  %144:gr32 = MOV32rm %stack.11.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
8592B	  ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8608B	  %145:gr64 = LEA64r $rip, 1, $noreg, @sp__str_40__none__, $noreg
8640B	  MOV64mr $rsp, 1, $noreg, 80, $noreg, %145:gr64 :: (store 8 into stack + 80)
8656B	  %147:gr64 = LEA64r $rip, 1, $noreg, @sp__str_39__O3__mcmod, $noreg
8672B	  MOV64mr $rsp, 1, $noreg, 72, $noreg, %147:gr64 :: (store 8 into stack + 72)
8688B	  %148:gr64 = LEA64r $rip, 1, $noreg, @sp__str_38__g__Wall__, $noreg
8704B	  MOV64mr $rsp, 1, $noreg, 64, $noreg, %148:gr64 :: (store 8 into stack + 64)
8720B	  %149:gr64 = LEA64r $rip, 1, $noreg, @sp__str_37__I___commo, $noreg
8736B	  MOV64mr $rsp, 1, $noreg, 56, $noreg, %149:gr64 :: (store 8 into stack + 56)
8752B	  %150:gr64 = LEA64r $rip, 1, $noreg, @sp__str_36__lm_, $noreg
8768B	  MOV64mr $rsp, 1, $noreg, 48, $noreg, %150:gr64 :: (store 8 into stack + 48)
8784B	  %151:gr64 = LEA64r $rip, 1, $noreg, @sp__str_35___CC__, $noreg
8800B	  MOV64mr $rsp, 1, $noreg, 40, $noreg, %151:gr64 :: (store 8 into stack + 40)
8816B	  %152:gr64 = LEA64r $rip, 1, $noreg, @sp__str_34_gcc_, $noreg
8832B	  MOV64mr $rsp, 1, $noreg, 32, $noreg, %152:gr64 :: (store 8 into stack + 32)
8848B	  %153:gr64 = LEA64r $rip, 1, $noreg, @sp__str_33_03_Nov_201, $noreg
8864B	  MOV64mr $rsp, 1, $noreg, 24, $noreg, %153:gr64 :: (store 8 into stack + 24)
8880B	  %154:gr64 = LEA64r $rip, 1, $noreg, @sp__str_32_3_3_1_, $noreg
8896B	  MOV64mr $rsp, 1, $noreg, 16, $noreg, %154:gr64 :: (store 8 into stack + 16)
8912B	  MOV32mr $rsp, 1, $noreg, 8, $noreg, %144:gr32 :: (store 4 into stack + 8)
8928B	  %155:gr64 = LEA64r $rip, 1, $noreg, @sp__str_31___________, $noreg
8944B	  MOV64mr $rsp, 1, $noreg, 0, $noreg, %155:gr64 :: (store 8 into stack)
8976B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_30_SP_, $noreg
8992B	  $esi = COPY %136:gr32
9008B	  $edx = COPY %138:gr32
9024B	  $ecx = COPY %139:gr32
9040B	  $r8d = COPY %140:gr32
9056B	  $r9d = COPY %141:gr32
9072B	  $xmm0 = COPY %142:fr64
9088B	  $xmm1 = COPY %143:fr64
9104B	  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
9120B	  ADJCALLSTACKUP64 88, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
9136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
9152B	  PCN_STACKMAP 30, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %136.sub_8bit:gr32, %138:gr32, %139:gr32, %140:gr32, %141:gr32, %142:fr64, %143:fr64, %144:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
9168B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9184B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
9200B	  JCC_1 %bb.44, 4, implicit killed $eflags
9216B	  JMP_1 %bb.30

9232B	bb.30.if.then86:
	; predecessors: %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

9248B	  %157:gr32 = MOV32ri 1
9264B	  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %157:gr32 :: (store 4 into %ir.i)
9280B	  %222:gr64 = LEA64r %stack.10.trecs, 1, $noreg, 0, $noreg

9296B	bb.31.for.cond87:
	; predecessors: %bb.30, %bb.32
	  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

9312B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
9328B	  JCC_1 %bb.33, 15, implicit killed $eflags
9344B	  JMP_1 %bb.32

9360B	bb.32.for.body90:
	; predecessors: %bb.31
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

9376B	  %219:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
9392B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9408B	  $edi = COPY %219:gr32
9424B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
9440B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
9456B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
9472B	  PCN_STACKMAP 31, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %219:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
9488B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9504B	  %220:fr64 = COPY killed $xmm0
9520B	  %221:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
9536B	  MOVSDmr %222:gr64, 8, %221:gr64_nosp, 0, $noreg, %220:fr64 :: (store 8 into %ir.arrayidx92)
9552B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
9568B	  JMP_1 %bb.31

9584B	bb.33.for.end95:
	; predecessors: %bb.31
	  successors: %bb.34(0x50000000), %bb.35(0x30000000); %bb.34(62.50%), %bb.35(37.50%)

9600B	  %160:fr64 = MOVSDrm_alt %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
9616B	  %161:fr64 = FsFLD0SD
9632B	  UCOMISDrr %160:fr64, %161:fr64, implicit-def $eflags
9648B	  JCC_1 %bb.35, 5, implicit $eflags
9664B	  JCC_1 %bb.35, 10, implicit killed $eflags
9680B	  JMP_1 %bb.34

9696B	bb.34.if.then98:
	; predecessors: %bb.33
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

9712B	  %162:gr64 = MOV64ri 4607182418800017408
9728B	  MOV64mr %stack.9.tmax, 1, $noreg, 0, $noreg, %162:gr64 :: (store 8 into %ir.tmax)

9744B	bb.35.if.end99:
	; predecessors: %bb.33, %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

9760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9824B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_41___SECTION_, $noreg
9840B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
9856B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
9872B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
9888B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
9904B	  PCN_STACKMAP 32, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
9920B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9936B	  %167:gr32 = MOV32ri 1
9952B	  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %167:gr32 :: (store 4 into %ir.i)
9968B	  %171:gr64 = LEA64r %stack.13.t_names, 1, $noreg, 0, $noreg
9984B	  %173:gr64 = LEA64r %stack.10.trecs, 1, $noreg, 0, $noreg
10000B	  %259:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)

10128B	bb.36.for.cond101:
	; predecessors: %bb.35, %bb.43
	  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

10144B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
10160B	  JCC_1 %bb.44, 15, implicit killed $eflags
10176B	  JMP_1 %bb.37

10192B	bb.37.for.body104:
	; predecessors: %bb.36
	  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

10208B	  %170:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
10224B	  %172:gr64 = MOV64rm %171:gr64, 8, %170:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
10240B	  %174:fr64 = MOVSDrm_alt %173:gr64, 8, %170:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx110)
10256B	  %176:fr64 = COPY %174:fr64
10272B	  %176:fr64 = MULSDrr %176:fr64(tied-def 0), %259:fr64
10304B	  %176:fr64 = DIVSDrm %176:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
10320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10336B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_42_____8s__9_, $noreg
10352B	  $rsi = COPY %172:gr64
10368B	  $xmm0 = COPY %174:fr64
10384B	  $xmm1 = COPY %176:fr64
10400B	  $al = MOV8ri 2
10416B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
10432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
10448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
10464B	  PCN_STACKMAP 33, 0, %176:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %172:gr64, %174:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
10480B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10496B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
10512B	  JCC_1 %bb.39, 5, implicit killed $eflags
10528B	  JMP_1 %bb.38

10544B	bb.38.if.then116:
	; predecessors: %bb.37
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

10560B	  %205:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
10592B	  %205:fr64 = ADDSDrm %205:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx118)
10624B	  %205:fr64 = ADDSDrm %205:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
10640B	  MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %205:fr64 :: (store 8 into %ir.t)
10656B	  %208:fr64 = COPY %205:fr64
10672B	  %208:fr64 = MULSDrr %208:fr64(tied-def 0), %259:fr64
10704B	  %208:fr64 = DIVSDrm %208:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
10720B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10736B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
10752B	  $rsi = LEA64r $rip, 1, $noreg, @sp__str_44_sub_rhs_, $noreg
10768B	  $xmm0 = COPY %205:fr64
10784B	  $xmm1 = COPY %208:fr64
10800B	  $al = MOV8ri 2
10816B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
10832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
10848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
10864B	  PCN_STACKMAP 34, 0, %208:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %205:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
10880B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10896B	  %214:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx125)
10928B	  %214:fr64 = SUBSDrm %214:fr64(tied-def 0), %stack.8.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
10944B	  MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %214:fr64 :: (store 8 into %ir.t)
10960B	  %216:fr64 = COPY %214:fr64
10976B	  %216:fr64 = MULSDrr %216:fr64(tied-def 0), %259:fr64
11008B	  %216:fr64 = DIVSDrm %216:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
11024B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11040B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
11056B	  $rsi = LEA64r $rip, 1, $noreg, @sp__str_45_rest_rhs_, $noreg
11072B	  $xmm0 = COPY %214:fr64
11088B	  $xmm1 = COPY %216:fr64
11104B	  $al = MOV8ri 2
11120B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
11136B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11152B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11168B	  PCN_STACKMAP 35, 0, %216:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %214:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
11184B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11200B	  JMP_1 %bb.43

11216B	bb.39.if.else130:
	; predecessors: %bb.37
	  successors: %bb.40(0x40000000), %bb.41(0x40000000); %bb.40(50.00%), %bb.41(50.00%)

11232B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 8, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
11248B	  JCC_1 %bb.41, 5, implicit killed $eflags
11264B	  JMP_1 %bb.40

11280B	bb.40.if.then133:
	; predecessors: %bb.39
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

11296B	  %196:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 64, $noreg :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
11328B	  %196:fr64 = SUBSDrm %196:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx135)
11360B	  %196:fr64 = SUBSDrm %196:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
11376B	  MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %196:fr64 :: (store 8 into %ir.t)
11392B	  %198:fr64 = COPY %196:fr64
11408B	  %198:fr64 = MULSDrr %198:fr64(tied-def 0), %259:fr64
11440B	  %198:fr64 = DIVSDrm %198:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
11456B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11472B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
11488B	  $rsi = LEA64r $rip, 1, $noreg, @sp__str_46_sub_zsol_, $noreg
11504B	  $xmm0 = COPY %196:fr64
11520B	  $xmm1 = COPY %198:fr64
11536B	  $al = MOV8ri 2
11552B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
11568B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11600B	  PCN_STACKMAP 36, 0, %198:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %196:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
11616B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11632B	  JMP_1 %bb.43

11648B	bb.41.if.else142:
	; predecessors: %bb.39
	  successors: %bb.42(0x40000000), %bb.43(0x40000000); %bb.42(50.00%), %bb.43(50.00%)

11664B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 10, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
11680B	  JCC_1 %bb.43, 5, implicit killed $eflags
11696B	  JMP_1 %bb.42

11712B	bb.42.if.then145:
	; predecessors: %bb.41
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

11728B	  %187:fr64 = MOVSDrm_alt %stack.10.trecs, 1, $noreg, 72, $noreg :: (dereferenceable load 8 from %ir.arrayidx146)
11760B	  %187:fr64 = ADDSDrm %187:fr64(tied-def 0), %stack.10.trecs, 1, $noreg, 80, $noreg :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
11776B	  MOVSDmr %stack.8.t, 1, $noreg, 0, $noreg, %187:fr64 :: (store 8 into %ir.t)
11792B	  %189:fr64 = COPY %187:fr64
11808B	  %189:fr64 = MULSDrr %189:fr64(tied-def 0), %259:fr64
11840B	  %189:fr64 = DIVSDrm %189:fr64(tied-def 0), %stack.9.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
11856B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11872B	  $rdi = LEA64r $rip, 1, $noreg, @sp__str_43__________8, $noreg
11888B	  $rsi = LEA64r $rip, 1, $noreg, @sp__str_47_redist_, $noreg
11904B	  $xmm0 = COPY %187:fr64
11920B	  $xmm1 = COPY %189:fr64
11936B	  $al = MOV8ri 2
11952B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
11968B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11984B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
12000B	  PCN_STACKMAP 37, 0, %189:fr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %187:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
12016B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

12032B	bb.43.if.end154:
	; predecessors: %bb.41, %bb.42, %bb.40, %bb.38
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

12048B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
12064B	  JMP_1 %bb.36

12080B	bb.44.if.end158:
	; predecessors: %bb.29, %bb.36
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

12096B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)

12112B	bb.45.return:
	; predecessors: %bb.44, %bb.13

12128B	  %257:gr32 = MOV32rm %stack.0.retval, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.retval)
12144B	  $eax = COPY %257:gr32
12160B	  RET 0, killed $eax

# End machine code for function main.

warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 16 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 16 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 16 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 16 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 16 across call to printf
