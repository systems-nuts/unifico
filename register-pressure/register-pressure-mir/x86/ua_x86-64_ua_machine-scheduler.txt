Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
  fi#12: size=1, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
  fi#16: size=88, align=16, at location [SP+8]
  fi#17: size=88, align=16, at location [SP+8]
  fi#18: size=8, align=8, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 5.000000e-01, align=8
  cp#1: 7.000000e+00, align=8
  cp#2: 4.000000e-02, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
Function Live Ins: $edi in %0, $rsi in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $edi, $rsi
  %1:gr64 = COPY $rsi
  %0:gr32 = COPY $edi
  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  MOV64mi32 %stack.11.nelt_tot, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.nelt_tot)
  MOV32mi %stack.13.ifmortar, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ifmortar)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_timer_flag, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @ua__str_1_r_, $noreg
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 0, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = COPY killed $rax
  MOV64mr %stack.18.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  JCC_1 %bb.2, 4, implicit killed $eflags
  JMP_1 %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %5:gr32 = MOV32ri 1
  MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
  %6:gr64 = LEA64r $rip, 1, $noreg, @ua__str_2_total_, $noreg
  MOV64mr %stack.17.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
  %7:gr64 = LEA64r $rip, 1, $noreg, @ua__str_3_init_, $noreg
  MOV64mr %stack.17.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
  %8:gr64 = LEA64r $rip, 1, $noreg, @ua__str_4_convect_, $noreg
  MOV64mr %stack.17.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
  %9:gr64 = LEA64r $rip, 1, $noreg, @ua__str_5_transfb_c_, $noreg
  MOV64mr %stack.17.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
  %10:gr64 = LEA64r $rip, 1, $noreg, @ua__str_6_diffusion_, $noreg
  MOV64mr %stack.17.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
  %11:gr64 = LEA64r $rip, 1, $noreg, @ua__str_7_transf_, $noreg
  MOV64mr %stack.17.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
  %12:gr64 = LEA64r $rip, 1, $noreg, @ua__str_8_transfb_, $noreg
  MOV64mr %stack.17.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
  %13:gr64 = LEA64r $rip, 1, $noreg, @ua__str_9_adaptation, $noreg
  MOV64mr %stack.17.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
  %14:gr64 = LEA64r $rip, 1, $noreg, @ua__str_10_transf_b_, $noreg
  MOV64mr %stack.17.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
  %15:gr64 = LEA64r $rip, 1, $noreg, @ua__str_11_add2_, $noreg
  MOV64mr %stack.17.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
  %16:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %16:gr64
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 1, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %16:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0 :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.11(0x30000000); %bb.4(62.50%), %bb.11(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_12____NAS_Par, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 2, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_13_inputua_da, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @ua__str_1_r_, $noreg
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 3, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %24:gr64 = COPY killed $rax
  MOV64mr %stack.18.fp, 1, $noreg, 0, $noreg, %24:gr64 :: (store 8 into %ir.fp)
  TEST64rr %24:gr64, %24:gr64, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit killed $eflags
  JMP_1 %bb.4

bb.4.if.then14:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_14__Reading_f, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 4, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %37:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %37:gr64
  $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
  $rdx = LEA64r $rip, 1, $noreg, @fre, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 5, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %37:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr32 = COPY killed $eax
  MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %40:gr32 :: (store 4 into %ir.result)

bb.5.while.cond:
; predecessors: %bb.4, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %41:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %41:gr64
  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 6, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %41:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %42:gr32 = COPY killed $eax
  CMP32ri8 %42:gr32, 10, implicit-def $eflags
  JCC_1 %bb.5, 5, implicit killed $eflags
  JMP_1 %bb.6

bb.6.while.end:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %44:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %44:gr64
  $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
  $rdx = LEA64r $rip, 1, $noreg, @niter, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 7, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %44:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %49:gr32 = COPY killed $eax
  MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %49:gr32 :: (store 4 into %ir.result)

bb.7.while.cond20:
; predecessors: %bb.6, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  %50:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %50:gr64
  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 8, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %50:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %51:gr32 = COPY killed $eax
  CMP32ri8 %51:gr32, 10, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit killed $eflags
  JMP_1 %bb.8

bb.8.while.end24:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %53:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %53:gr64
  $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
  $rdx = LEA64r $rip, 1, $noreg, @nmxh, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 9, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %53:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY killed $eax
  MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %58:gr32 :: (store 4 into %ir.result)

bb.9.while.cond26:
; predecessors: %bb.8, %bb.9
  successors: %bb.9(0x7c000000), %bb.10(0x04000000); %bb.9(96.88%), %bb.10(3.12%)

  %59:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %59:gr64
  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 10, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %59:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %60:gr32 = COPY killed $eax
  CMP32ri8 %60:gr32, 10, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10.while.end30:
; predecessors: %bb.9
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %62:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %62:gr64
  $rsi = LEA64r $rip, 1, $noreg, @ua__str_16__lf_, $noreg
  $rdx = LEA64r $rip, 1, $noreg, @alpha, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 11, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %62:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %67:gr32 = COPY killed $eax
  MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %67:gr32 :: (store 4 into %ir.result)
  MOV8mi %stack.12.Class, 1, $noreg, 0, $noreg, 85 :: (store 1 into %ir.Class, align 4)
  %68:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %68:gr64
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 12, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %68:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.12

bb.11.if.else33:
; predecessors: %bb.3
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_17__No_input_, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 13, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %29:gr32 = MOV32ri 5
  MOV32mr $rip, 1, $noreg, @fre, $noreg, %29:gr32 :: (store 4 into @fre)
  %30:gr32 = MOV32ri 200
  MOV32mr $rip, 1, $noreg, @niter, $noreg, %30:gr32 :: (store 4 into @niter)
  %31:gr32 = MOV32ri 10
  MOV32mr $rip, 1, $noreg, @nmxh, $noreg, %31:gr32 :: (store 4 into @nmxh)
  %32:gr64 = MOV64ri 4590140797810047451
  MOV64mr $rip, 1, $noreg, @alpha, $noreg, %32:gr64 :: (store 8 into @alpha)
  MOV8mi %stack.12.Class, 1, $noreg, 0, $noreg, 66 :: (store 1 into %ir.Class, align 4)

bb.12.if.end35:
; predecessors: %bb.11, %bb.10
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %70:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %71:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  $xmm0 = COPY %70:fr64
  $xmm1 = COPY %71:fr64
  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 14, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %73:fr64 = COPY killed $xmm0
  MOVSDmr $rip, 1, $noreg, @dlmin, $noreg, %73:fr64 :: (store 8 into @dlmin)
  %73:fr64 = MULSDrm %73:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  MOVSDmr $rip, 1, $noreg, @dtime, $noreg, %73:fr64 :: (store 8 into @dtime)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_18__Levels_of, $noreg
  $esi = MOV32ri 7
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 15, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %79:gr32 = MOV32rm $rip, 1, $noreg, @fre, $noreg :: (dereferenceable load 4 from @fre)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_19__Adaptatio, $noreg
  $esi = COPY %79:gr32
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 16, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %79:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %82:gr32 = MOV32rm $rip, 1, $noreg, @niter, $noreg :: (dereferenceable load 4 from @niter)
  %83:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dtime, $noreg :: (dereferenceable load 8 from @dtime)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_20__Time_step, $noreg
  $esi = COPY %82:gr32
  $xmm0 = COPY %83:fr64
  $al = MOV8ri 1
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 17, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %82:gr32, %83:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %87:gr32 = MOV32rm $rip, 1, $noreg, @nmxh, $noreg :: (dereferenceable load 4 from @nmxh)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_21__CG_iterat, $noreg
  $esi = COPY %87:gr32
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 18, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %87:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %90:fr64 = MOVSDrm_alt $rip, 1, $noreg, @alpha, $noreg :: (dereferenceable load 8 from @alpha)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_22__Heat_sour, $noreg
  $xmm0 = COPY %90:fr64
  $al = MOV8ri 1
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 19, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %90:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @top_constants, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 20, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %93:gr32 = MOV32ri 1
  MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %93:gr32 :: (store 4 into %ir.i)

bb.13.for.cond:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 10, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.15, 15, implicit killed $eflags
  JMP_1 %bb.14

bb.14.for.body:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %290:gr32 = MOV32rm %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %290:gr32
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 21, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %290:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.13

bb.15.for.end:
; predecessors: %bb.13
  successors: %bb.16(0x50000000), %bb.17(0x30000000); %bb.16(62.50%), %bb.17(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.17, 4, implicit killed $eflags
  JMP_1 %bb.16

bb.16.if.then43:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 2
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 22, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.17.if.end44:
; predecessors: %bb.15, %bb.16
  successors: %bb.18(0x50000000), %bb.19(0x30000000); %bb.18(62.50%), %bb.19(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @create_initial_grid, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 23, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %99:gr32 = MOV32rm $rip, 1, $noreg, @ntot, $noreg :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
  $esi = COPY %99:gr32
  $xmm0 = FsFLD0SD
  CALL64pcrel32 @r_init, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 24, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %99:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  undef %104.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @nelt, $noreg :: (dereferenceable load 4 from @nelt)
  %104.sub_32bit:gr64_nosp = SHL32ri %104.sub_32bit:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
  %106:gr32 = LEA64_32r %104:gr64_nosp, 2, %104:gr64_nosp, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @sje, $noreg
  $esi = COPY %106:gr32
  $edx = MOV32ri -1
  CALL64pcrel32 @nr_init, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 25, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, %106:gr32, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @coef, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 26, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @geom1, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 27, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @setdef, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 28, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @setpcmo_pre, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 29, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mi32 $rip, 1, $noreg, @time, $noreg, 0 :: (store 8 into @time)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @mortar, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 30, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @prepwork, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 31, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r %stack.13.ifmortar, 1, $noreg, 0, $noreg
  $esi = MOV32r0 implicit-def dead $eflags
  CALL64pcrel32 @adaptation, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 32, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.19, 4, implicit killed $eflags
  JMP_1 %bb.18

bb.18.if.then47:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 2
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 33, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.19.if.end48:
; predecessors: %bb.17, %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %111:gr32 = MOV32ri 1
  $edi = MOV32ri 1
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 34, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mi32 $rip, 1, $noreg, @time, $noreg, 0 :: (store 8 into @time)
  MOV32mi %stack.3.step, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.step)
  %195:gr64 = LEA64r $rip, 1, $noreg, @ta1, $noreg
  undef %198.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
  %279:gr64 = MOV32ri64 1000
  %281:gr64 = LEA64r $rip, 1, $noreg, @ta2, $noreg
  %285:gr64 = LEA64r $rip, 1, $noreg, @size_e, $noreg
  %261:gr64 = LEA64r $rip, 1, $noreg, @trhs, $noreg
  %264:gr64 = MOV32ri64 200
  %242:gr64 = LEA64r $rip, 1, $noreg, @cbc, $noreg

bb.20.for.cond49:
; predecessors: %bb.19, %bb.64
  successors: %bb.21(0x7c000000), %bb.65(0x04000000); %bb.21(96.88%), %bb.65(3.12%)

  %112:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  CMP32rm %112:gr32, $rip, 1, $noreg, @niter, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @niter)
  JCC_1 %bb.65, 15, implicit killed $eflags
  JMP_1 %bb.21

bb.21.for.body51:
; predecessors: %bb.20
  successors: %bb.22(0x40000000), %bb.28(0x40000000); %bb.22(50.00%), %bb.28(50.00%)

  CMP32mi8 %stack.3.step, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (dereferenceable load 4 from %ir.step)
  JCC_1 %bb.28, 5, implicit killed $eflags
  JMP_1 %bb.22

bb.22.if.then53:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  %194:gr32 = MOV32rm $rip, 1, $noreg, @ntot, $noreg :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
  $esi = COPY %194:gr32
  $xmm0 = FsFLD0SD
  CALL64pcrel32 @r_init, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 35, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %194:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mi32 $rip, 1, $noreg, @time, $noreg, 0 :: (store 8 into @time)
  MOV64mr %stack.11.nelt_tot, 1, $noreg, 0, $noreg, %198:gr64_with_sub_32bit_in_gr32temp :: (store 8 into %ir.nelt_tot)
  MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %111:gr32 :: (store 4 into %ir.i)

bb.23.for.cond54:
; predecessors: %bb.22, %bb.26
  successors: %bb.24(0x7c000000), %bb.27(0x04000000); %bb.24(96.88%), %bb.27(3.12%)

  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 10, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.27, 15, implicit killed $eflags
  JMP_1 %bb.24

bb.24.for.body56:
; predecessors: %bb.23
  successors: %bb.25(0x40000000), %bb.26(0x40000000); %bb.25(50.00%), %bb.26(50.00%)

  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.26, 4, implicit killed $eflags
  JMP_1 %bb.25

bb.25.if.then58:
; predecessors: %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)

  %289:gr32 = MOV32rm %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %289:gr32
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 36, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %289:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.26.if.end59:
; predecessors: %bb.24, %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.23

bb.27.for.end62:
; predecessors: %bb.23
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 37, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.28.if.end63:
; predecessors: %bb.21, %bb.27
  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)

  %203:gr32 = MOV32rm %stack.13.ifmortar, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ifmortar)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %203:gr32
  CALL64pcrel32 @convect, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 38, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %203:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.30, 4, implicit killed $eflags
  JMP_1 %bb.29

bb.29.if.then65:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 39, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.30.if.end66:
; predecessors: %bb.28, %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @tmort, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @ta1, $noreg
  CALL64pcrel32 @transf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 40, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.4.ie, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ie)

bb.31.for.cond67:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

  %207:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  CMP32rm %207:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)
  JCC_1 %bb.33, 13, implicit killed $eflags
  JMP_1 %bb.32

bb.32.for.body69:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %278:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  %284:gr64_nosp = COPY %278:gr64_nosp
  %284:gr64_nosp = IMUL64rr %284:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
  %282:gr64 = LEA64r %281:gr64, 1, %284:gr64_nosp, 0, $noreg
  %284:gr64_nosp = ADD64rr %284:gr64_nosp(tied-def 0), %195:gr64, implicit-def dead $eflags
  %286:gr32 = MOV32rm %285:gr64, 4, %278:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx75)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %282:gr64
  $rsi = COPY %284:gr64_nosp
  $edx = COPY %286:gr32
  CALL64pcrel32 @laplacian, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 41, 0, 0, %stack.12.Class, 0, %282:gr64, %284:gr64_nosp, %282:gr64, %284:gr64_nosp, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %286:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.4.ie, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ie), (dereferenceable load 4 from %ir.ie)
  JMP_1 %bb.31

bb.33.for.end78:
; predecessors: %bb.31
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  MOV32mi %stack.4.ie, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ie)

bb.34.for.cond79:
; predecessors: %bb.33, %bb.44
  successors: %bb.35(0x7c000000), %bb.45(0x04000000); %bb.35(96.88%), %bb.45(3.12%)

  %209:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  CMP32rm %209:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)
  JCC_1 %bb.45, 13, implicit killed $eflags
  JMP_1 %bb.35

bb.35.for.body81:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  MOV32mi %stack.8.k, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.k)

bb.36.for.cond82:
; predecessors: %bb.35, %bb.43
  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

  CMP32mi8 %stack.8.k, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
  JCC_1 %bb.44, 15, implicit killed $eflags
  JMP_1 %bb.37

bb.37.for.body84:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  MOV32mi %stack.7.j, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.j)

bb.38.for.cond85:
; predecessors: %bb.37, %bb.42
  successors: %bb.39(0x7c000000), %bb.43(0x04000000); %bb.39(96.88%), %bb.43(3.12%)

  CMP32mi8 %stack.7.j, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (dereferenceable load 4 from %ir.j)
  JCC_1 %bb.43, 15, implicit killed $eflags
  JMP_1 %bb.39

bb.39.for.body87:
; predecessors: %bb.38
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  MOV32mi %stack.6.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)

bb.40.for.cond88:
; predecessors: %bb.39, %bb.41
  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)

  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.42, 15, implicit killed $eflags
  JMP_1 %bb.41

bb.41.for.body90:
; predecessors: %bb.40
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  %274:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  %274:gr64_nosp = IMUL64rr %274:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
  %270:gr64 = LEA64r %261:gr64, 1, %274:gr64_nosp, 0, $noreg
  %265:gr64 = MOVSX64rm32 %stack.8.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %265:gr64 = IMUL64rr %265:gr64(tied-def 0), %264:gr64, implicit-def dead $eflags
  %270:gr64 = ADD64rr %270:gr64(tied-def 0), %265:gr64, implicit-def dead $eflags
  %268:gr64_nosp = MOVSX64rm32 %stack.7.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
  %268:gr64_nosp = SHL64ri %268:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
  %269:gr64 = LEA64r %268:gr64_nosp, 4, %268:gr64_nosp, 0, $noreg
  %270:gr64 = ADD64rr %270:gr64(tied-def 0), %269:gr64, implicit-def dead $eflags
  %271:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %277:fr64 = MOVSDrm_alt %270:gr64, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx98)
  %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %281:gr64, implicit-def dead $eflags
  %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %265:gr64, implicit-def dead $eflags
  %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %269:gr64, implicit-def dead $eflags
  %277:fr64 = SUBSDrm %277:fr64(tied-def 0), %274:gr64_nosp, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
  MOVSDmr %270:gr64, 8, %271:gr64_nosp, 0, $noreg, %277:fr64 :: (store 8 into %ir.arrayidx114)
  INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.40

bb.42.for.end117:
; predecessors: %bb.40
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  INC32m %stack.7.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j)
  JMP_1 %bb.38

bb.43.for.end120:
; predecessors: %bb.38
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  INC32m %stack.8.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k)
  JMP_1 %bb.36

bb.44.for.end123:
; predecessors: %bb.36
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  INC32m %stack.4.ie, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ie), (dereferenceable load 4 from %ir.ie)
  JMP_1 %bb.34

bb.45.for.end126:
; predecessors: %bb.34
  successors: %bb.46(0x50000000), %bb.47(0x30000000); %bb.46(62.50%), %bb.47(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @rmor, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @trhs, $noreg
  CALL64pcrel32 @transfb, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 42, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.47, 4, implicit killed $eflags
  JMP_1 %bb.46

bb.46.if.then128:
; predecessors: %bb.45
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 43, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.47.if.end129:
; predecessors: %bb.45, %bb.46
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  MOV32mi %stack.4.ie, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ie)

bb.48.for.cond130:
; predecessors: %bb.47, %bb.54
  successors: %bb.49(0x7c000000), %bb.55(0x04000000); %bb.49(96.88%), %bb.55(3.12%)

  %214:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  CMP32rm %214:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)
  JCC_1 %bb.55, 13, implicit killed $eflags
  JMP_1 %bb.49

bb.49.for.body132:
; predecessors: %bb.48
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  MOV32mi %stack.5.iside, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.iside)

bb.50.for.cond133:
; predecessors: %bb.49, %bb.53
  successors: %bb.51(0x7c000000), %bb.54(0x04000000); %bb.51(96.88%), %bb.54(3.12%)

  CMP32mi8 %stack.5.iside, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.iside)
  JCC_1 %bb.54, 15, implicit killed $eflags
  JMP_1 %bb.51

bb.51.for.body135:
; predecessors: %bb.50
  successors: %bb.52(0x30000000), %bb.53(0x50000000); %bb.52(37.50%), %bb.53(62.50%)

  %240:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  %241:gr64_nosp = LEA64r %240:gr64_nosp, 2, %240:gr64_nosp, 0, $noreg
  %243:gr64 = LEA64r %242:gr64, 8, %241:gr64_nosp, 0, $noreg
  %244:gr64_nosp = MOVSX64rm32 %stack.5.iside, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.iside)
  CMP32mi8 %243:gr64, 4, %244:gr64_nosp, 0, $noreg, 0, implicit-def $eflags :: (load 4 from %ir.arrayidx139)
  JCC_1 %bb.53, 5, implicit killed $eflags
  JMP_1 %bb.52

bb.52.if.then141:
; predecessors: %bb.51
  successors: %bb.53(0x80000000); %bb.53(100.00%)

  %249:gr64 = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  %249:gr64 = IMUL64rr %249:gr64(tied-def 0), %279:gr64, implicit-def dead $eflags
  %249:gr64 = ADD64rr %249:gr64(tied-def 0), %261:gr64, implicit-def dead $eflags
  %250:gr32 = MOV32rm %stack.5.iside, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.iside)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %249:gr64
  $esi = COPY %250:gr32
  $xmm0 = FsFLD0SD
  CALL64pcrel32 @facev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 44, 0, 0, %stack.12.Class, 0, %249:gr64, %249:gr64, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %250:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.53.if.end145:
; predecessors: %bb.51, %bb.52
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  INC32m %stack.5.iside, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.iside), (dereferenceable load 4 from %ir.iside)
  JMP_1 %bb.50

bb.54.for.end148:
; predecessors: %bb.50
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  INC32m %stack.4.ie, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ie), (dereferenceable load 4 from %ir.ie)
  JMP_1 %bb.48

bb.55.for.end151:
; predecessors: %bb.48
  successors: %bb.56(0x50000000), %bb.57(0x30000000); %bb.56(62.50%), %bb.57(37.50%)

  %216:gr32 = MOV32rm $rip, 1, $noreg, @nmor, $noreg :: (dereferenceable load 4 from @nmor)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @rmor, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @tmmor, $noreg
  $edx = COPY %216:gr32
  CALL64pcrel32 @col2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 45, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %216:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %219:gr32 = MOV32rm %stack.13.ifmortar, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ifmortar)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %219:gr32
  CALL64pcrel32 @diffusion, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 46, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %219:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.57, 4, implicit killed $eflags
  JMP_1 %bb.56

bb.56.if.then153:
; predecessors: %bb.55
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 10
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 47, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.57.if.end154:
; predecessors: %bb.55, %bb.56
  successors: %bb.58(0x50000000), %bb.59(0x30000000); %bb.58(62.50%), %bb.59(37.50%)

  %221:gr32 = MOV32rm $rip, 1, $noreg, @ntot, $noreg :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @t, $noreg
  $edx = COPY %221:gr32
  CALL64pcrel32 @add2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 48, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %221:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.59, 4, implicit killed $eflags
  JMP_1 %bb.58

bb.58.if.then156:
; predecessors: %bb.57
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 10
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 49, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.59.if.end157:
; predecessors: %bb.57, %bb.58
  successors: %bb.60(0x50000000), %bb.63(0x30000000); %bb.60(62.50%), %bb.63(37.50%)

  %226:fr64 = MOVSDrm_alt $rip, 1, $noreg, @time, $noreg :: (dereferenceable load 8 from @time)
  %226:fr64 = ADDSDrm %226:fr64(tied-def 0), $rip, 1, $noreg, @dtime, $noreg :: (dereferenceable load 8 from @dtime)
  MOVSDmr $rip, 1, $noreg, @time, $noreg, %226:fr64 :: (store 8 into @time)
  CMP32mi8 %stack.3.step, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.step)
  JCC_1 %bb.63, 4, implicit killed $eflags
  JMP_1 %bb.60

bb.60.land.lhs.true:
; predecessors: %bb.59
  successors: %bb.61(0x40000000), %bb.63(0x40000000); %bb.61(50.00%), %bb.63(50.00%)

  %227:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  %228:gr32 = MOV32rm $rip, 1, $noreg, @fre, $noreg :: (dereferenceable load 4 from @fre)
  $eax = COPY %227:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r %228:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %230:gr32 = COPY killed $eax
  %230:gr32 = nsw IMUL32rr %230:gr32(tied-def 0), %228:gr32, implicit-def dead $eflags
  CMP32rr %230:gr32, %227:gr32, implicit-def $eflags
  JCC_1 %bb.63, 5, implicit killed $eflags
  JMP_1 %bb.61

bb.61.if.then161:
; predecessors: %bb.60
  successors: %bb.62(0x40000000), %bb.64(0x40000000); %bb.62(50.00%), %bb.64(50.00%)

  %232:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  CMP32rm %232:gr32, $rip, 1, $noreg, @niter, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @niter)
  JCC_1 %bb.64, 4, implicit killed $eflags
  JMP_1 %bb.62

bb.62.if.then163:
; predecessors: %bb.61
  successors: %bb.64(0x80000000); %bb.64(100.00%)

  %234:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r %stack.13.ifmortar, 1, $noreg, 0, $noreg
  $esi = COPY %234:gr32
  CALL64pcrel32 @adaptation, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 50, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %234:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.64

bb.63.if.else165:
; predecessors: %bb.59, %bb.60
  successors: %bb.64(0x80000000); %bb.64(100.00%)

  MOV32mi %stack.13.ifmortar, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ifmortar)

bb.64.if.end166:
; predecessors: %bb.63, %bb.61, %bb.62
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %237:fr64 = CVTSI2SDrm $rip, 1, $noreg, @nelt, $noreg :: (dereferenceable load 4 from @nelt)
  %237:fr64 = ADDSDrm %237:fr64(tied-def 0), %stack.11.nelt_tot, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nelt_tot)
  MOVSDmr %stack.11.nelt_tot, 1, $noreg, 0, $noreg, %237:fr64 :: (store 8 into %ir.nelt_tot)
  INC32m %stack.3.step, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.step), (dereferenceable load 4 from %ir.step)
  JMP_1 %bb.20

bb.65.for.end170:
; predecessors: %bb.20
  successors: %bb.66(0x50000000), %bb.78(0x30000000); %bb.66(62.50%), %bb.78(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 51, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 52, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %115:fr64 = COPY killed $xmm0
  MOVSDmr %stack.10.tmax, 1, $noreg, 0, $noreg, %115:fr64 :: (store 8 into %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r %stack.12.Class, 1, $noreg, 0, $noreg
  $rsi = LEA64r %stack.14.verified, 1, $noreg, 0, $noreg
  CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 53, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %119:gr32 = IMUL32rmi8 $rip, 1, $noreg, @nmxh, $noreg, 125, implicit-def dead $eflags :: (dereferenceable load 4 from @nmxh)
  %119:gr32 = ADD32ri8 %119:gr32(tied-def 0), 125, implicit-def dead $eflags
  %124:fr64 = CVTSI2SDrr %119:gr32
  %124:fr64 = MULSDrm %124:fr64(tied-def 0), %stack.11.nelt_tot, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nelt_tot)
  %122:fr64 = MOVSDrm_alt %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  %123:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  %123:fr64 = MULSDrr %123:fr64(tied-def 0), %122:fr64
  %124:fr64 = DIVSDrr %124:fr64(tied-def 0), %123:fr64
  MOVSDmr %stack.9.mflops, 1, $noreg, 0, $noreg, %124:fr64 :: (store 8 into %ir.mflops)
  %125:gr32 = MOVSX32rm8 %stack.12.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
  %127:gr32 = MOV32rm $rip, 1, $noreg, @niter, $noreg :: (dereferenceable load 4 from @niter)
  %128:gr32 = MOV32rm %stack.14.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
  ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %129:gr64 = LEA64r $rip, 1, $noreg, @ua__str_33__none__, $noreg
  MOV64mr $rsp, 1, $noreg, 80, $noreg, %129:gr64 :: (store 8 into stack + 80)
  %131:gr64 = LEA64r $rip, 1, $noreg, @ua__str_32__O3__mcmod, $noreg
  MOV64mr $rsp, 1, $noreg, 72, $noreg, %131:gr64 :: (store 8 into stack + 72)
  %132:gr64 = LEA64r $rip, 1, $noreg, @ua__str_31__g__Wall__, $noreg
  MOV64mr $rsp, 1, $noreg, 64, $noreg, %132:gr64 :: (store 8 into stack + 64)
  %133:gr64 = LEA64r $rip, 1, $noreg, @ua__str_30__I___commo, $noreg
  MOV64mr $rsp, 1, $noreg, 56, $noreg, %133:gr64 :: (store 8 into stack + 56)
  %134:gr64 = LEA64r $rip, 1, $noreg, @ua__str_29__lm_, $noreg
  MOV64mr $rsp, 1, $noreg, 48, $noreg, %134:gr64 :: (store 8 into stack + 48)
  %135:gr64 = LEA64r $rip, 1, $noreg, @ua__str_28___CC__, $noreg
  MOV64mr $rsp, 1, $noreg, 40, $noreg, %135:gr64 :: (store 8 into stack + 40)
  %136:gr64 = LEA64r $rip, 1, $noreg, @ua__str_27_gcc_, $noreg
  MOV64mr $rsp, 1, $noreg, 32, $noreg, %136:gr64 :: (store 8 into stack + 32)
  %137:gr64 = LEA64r $rip, 1, $noreg, @ua__str_26_03_Nov_201, $noreg
  MOV64mr $rsp, 1, $noreg, 24, $noreg, %137:gr64 :: (store 8 into stack + 24)
  %138:gr64 = LEA64r $rip, 1, $noreg, @ua__str_25_3_3_1_, $noreg
  MOV64mr $rsp, 1, $noreg, 16, $noreg, %138:gr64 :: (store 8 into stack + 16)
  MOV32mr $rsp, 1, $noreg, 8, $noreg, %128:gr32 :: (store 4 into stack + 8)
  %139:gr64 = LEA64r $rip, 1, $noreg, @ua__str_24_____coll__, $noreg
  MOV64mr $rsp, 1, $noreg, 0, $noreg, %139:gr64 :: (store 8 into stack)
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_23_UA_, $noreg
  $esi = COPY %125:gr32
  $edx = MOV32ri 7
  $ecx = MOV32ri 0
  $r8d = MOV32r0 implicit-def dead $eflags
  $r9d = COPY %127:gr32
  $xmm0 = COPY %122:fr64
  $xmm1 = COPY %124:fr64
  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 88, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 54, 0, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %125.sub_8bit:gr32, %127:gr32, %122:fr64, %124:fr64, %128:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.78, 4, implicit killed $eflags
  JMP_1 %bb.66

bb.66.if.then179:
; predecessors: %bb.65
  successors: %bb.67(0x80000000); %bb.67(100.00%)

  %143:gr32 = MOV32ri 1
  MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %143:gr32 :: (store 4 into %ir.i)
  %191:gr64 = LEA64r %stack.16.trecs, 1, $noreg, 0, $noreg

bb.67.for.cond180:
; predecessors: %bb.66, %bb.68
  successors: %bb.68(0x7c000000), %bb.69(0x04000000); %bb.68(96.88%), %bb.69(3.12%)

  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 10, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.69, 15, implicit killed $eflags
  JMP_1 %bb.68

bb.68.for.body183:
; predecessors: %bb.67
  successors: %bb.67(0x80000000); %bb.67(100.00%)

  %188:gr32 = MOV32rm %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %188:gr32
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 55, 0, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %188:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %189:fr64 = COPY killed $xmm0
  %190:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  MOVSDmr %191:gr64, 8, %190:gr64_nosp, 0, $noreg, %189:fr64 :: (store 8 into %ir.arrayidx186)
  INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.67

bb.69.for.end189:
; predecessors: %bb.67
  successors: %bb.70(0x50000000), %bb.71(0x30000000); %bb.70(62.50%), %bb.71(37.50%)

  %146:fr64 = MOVSDrm_alt %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  %147:fr64 = FsFLD0SD
  UCOMISDrr %146:fr64, %147:fr64, implicit-def $eflags
  JCC_1 %bb.71, 5, implicit $eflags
  JCC_1 %bb.71, 10, implicit killed $eflags
  JMP_1 %bb.70

bb.70.if.then192:
; predecessors: %bb.69
  successors: %bb.71(0x80000000); %bb.71(100.00%)

  %148:gr64 = MOV64ri 4607182418800017408
  MOV64mr %stack.10.tmax, 1, $noreg, 0, $noreg, %148:gr64 :: (store 8 into %ir.tmax)

bb.71.if.end193:
; predecessors: %bb.69, %bb.70
  successors: %bb.72(0x80000000); %bb.72(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_34___SECTION_, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 56, 0, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %153:gr32 = MOV32ri 1
  MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %153:gr32 :: (store 4 into %ir.i)
  %158:gr64 = LEA64r %stack.17.t_names, 1, $noreg, 0, $noreg
  %160:gr64 = LEA64r %stack.16.trecs, 1, $noreg, 0, $noreg
  %291:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)

bb.72.for.cond195:
; predecessors: %bb.71, %bb.77
  successors: %bb.73(0x7c000000), %bb.78(0x04000000); %bb.73(96.88%), %bb.78(3.12%)

  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 10, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.78, 15, implicit killed $eflags
  JMP_1 %bb.73

bb.73.for.body198:
; predecessors: %bb.72
  successors: %bb.74(0x40000000), %bb.75(0x40000000); %bb.74(50.00%), %bb.75(50.00%)

  %157:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %159:gr64 = MOV64rm %158:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx200)
  %161:fr64 = MOVSDrm_alt %160:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx204)
  %163:fr64 = COPY %161:fr64
  %163:fr64 = MULSDrr %163:fr64(tied-def 0), %291:fr64
  %163:fr64 = DIVSDrm %163:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_35_____10s__9, $noreg
  $rsi = COPY %159:gr64
  $xmm0 = COPY %161:fr64
  $xmm1 = COPY %163:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 57, 0, %163:fr64, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %159:gr64, %161:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.75, 5, implicit killed $eflags
  JMP_1 %bb.74

bb.74.if.then210:
; predecessors: %bb.73
  successors: %bb.77(0x80000000); %bb.77(100.00%)

  %181:fr64 = MOVSDrm_alt %stack.16.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx211)
  %181:fr64 = SUBSDrm %181:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
  MOVSDmr %stack.15.t2, 1, $noreg, 0, $noreg, %181:fr64 :: (store 8 into %ir.t2)
  %183:fr64 = COPY %181:fr64
  %183:fr64 = MULSDrr %183:fr64(tied-def 0), %291:fr64
  %183:fr64 = DIVSDrm %183:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_36__________1, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @ua__str_37_sub_convec, $noreg
  $xmm0 = COPY %181:fr64
  $xmm1 = COPY %183:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 58, 0, %183:fr64, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %181:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.77

bb.75.if.else217:
; predecessors: %bb.73
  successors: %bb.76(0x40000000), %bb.77(0x40000000); %bb.76(50.00%), %bb.77(50.00%)

  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 7, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.77, 5, implicit killed $eflags
  JMP_1 %bb.76

bb.76.if.then220:
; predecessors: %bb.75
  successors: %bb.77(0x80000000); %bb.77(100.00%)

  %173:fr64 = MOVSDrm_alt %stack.16.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx221)
  %173:fr64 = SUBSDrm %173:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 48, $noreg :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
  %173:fr64 = SUBSDrm %173:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 56, $noreg :: (dereferenceable load 8 from %ir.arrayidx224)
  MOVSDmr %stack.15.t2, 1, $noreg, 0, $noreg, %173:fr64 :: (store 8 into %ir.t2)
  %175:fr64 = COPY %173:fr64
  %175:fr64 = MULSDrr %175:fr64(tied-def 0), %291:fr64
  %175:fr64 = DIVSDrm %175:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @ua__str_36__________1, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @ua__str_38_sub_diffus, $noreg
  $xmm0 = COPY %173:fr64
  $xmm1 = COPY %175:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 59, 0, %175:fr64, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %173:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.77.if.end230:
; predecessors: %bb.75, %bb.76, %bb.74
  successors: %bb.72(0x80000000); %bb.72(100.00%)

  INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.72

bb.78.if.end234:
; predecessors: %bb.65, %bb.72

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, killed $eax

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %4:gr64 = COPY killed $rax
    To: JCC_1 %bb.2, 4, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %4:gr64 = COPY killed $rax
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%4
    SU(1): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(1):   MOV64mr %stack.18.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(2):   TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.18.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %4:gr64 = COPY killed $rax
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %4:gr64 = COPY killed $rax
SU(1):   MOV64mr %stack.18.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
SU(2):   TEST64rr %4:gr64, %4:gr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.0 entry
  From: $rdi = LEA64r $rip, 1, $noreg, @ua__str_timer_flag, $noreg
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_timer_flag, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_1_r_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @ua__str_1_r_, $noreg
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ua__str_timer_flag, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_timer_flag, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_1_r_, $noreg

********** MI Scheduling **********
main:%bb.0 entry
  From: %1:gr64 = COPY $rsi
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(5):   MOV64mi32 %stack.11.nelt_tot, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.nelt_tot)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   MOV32mi %stack.13.ifmortar, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ifmortar)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mi %stack.13.ifmortar, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ifmortar)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 4 3 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mi32 %stack.11.nelt_tot, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.nelt_tot)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 0 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %0:gr32 = COPY $edi
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:gr64 = COPY $rsi
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gr64 = COPY $rsi
SU(1):   %0:gr32 = COPY $edi
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
SU(5):   MOV64mi32 %stack.11.nelt_tot, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.nelt_tot)
SU(6):   MOV32mi %stack.13.ifmortar, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ifmortar)

********** MI Scheduling **********
main:%bb.1 if.then
  From: %5:gr32 = MOV32ri 1
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 23
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=2
Live In: 
Live Out: %16 
Live Thru: 
  LiveReg: %16
Top Pressure:

Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   %5:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%5
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %6:gr64 = LEA64r $rip, 1, $noreg, @ua__str_2_total_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%6
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr %stack.17.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
  # preds left       : 1
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%6
  Successors:
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %7:gr64 = LEA64r $rip, 1, $noreg, @ua__str_3_init_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%7
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr %stack.17.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 2
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%7
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %8:gr64 = LEA64r $rip, 1, $noreg, @ua__str_4_convect_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%8
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr %stack.17.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
  # preds left       : 3
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%8
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %9:gr64 = LEA64r $rip, 1, $noreg, @ua__str_5_transfb_c_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%9
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV64mr %stack.17.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 4
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%9
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %10:gr64 = LEA64r $rip, 1, $noreg, @ua__str_6_diffusion_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%10
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   MOV64mr %stack.17.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
  # preds left       : 5
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%10
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %11:gr64 = LEA64r $rip, 1, $noreg, @ua__str_7_transf_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%11
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV64mr %stack.17.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%11
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %12:gr64 = LEA64r $rip, 1, $noreg, @ua__str_8_transfb_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%12
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   MOV64mr %stack.17.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%12
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %13:gr64 = LEA64r $rip, 1, $noreg, @ua__str_9_adaptation, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%13
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(17):   MOV64mr %stack.17.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%13
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   %14:gr64 = LEA64r $rip, 1, $noreg, @ua__str_10_transf_b_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(19): Data Latency=1 Reg=%14
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(19):   MOV64mr %stack.17.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
  # preds left       : 9
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%14
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(20):   %15:gr64 = LEA64r $rip, 1, $noreg, @ua__str_11_add2_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(21): Data Latency=1 Reg=%15
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(21):   MOV64mr %stack.17.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(20): Data Latency=1 Reg=%15
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(22):   %16:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(22): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 1 22 
  Cand SU(21) ORDER                              
  Cand SU(22) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(22) %16:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
Bottom Pressure:

  Ready @3c
  BotQ.A BotLatency SU(22) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 1 
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) MOV64mr %stack.17.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %15
  UpdateRegP: SU(21) MOV64mr %stack.17.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
              to 
  Ready @0c
  BotQ.A TopLatency SU(21) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 20 19 
  Cand SU(1) ORDER                              
  Cand SU(20) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(20) %15:gr64 = LEA64r $rip, 1, $noreg, @ua__str_11_add2_, $noreg
Bottom Pressure:

  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 19 
  Cand SU(1) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) MOV64mr %stack.17.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
Bottom Pressure:
GR16=2
  LiveReg: %14
  UpdateRegP: SU(19) MOV64mr %stack.17.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(18) %14:gr64 = LEA64r $rip, 1, $noreg, @ua__str_10_transf_b_, $noreg
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 17 
  Cand SU(1) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) MOV64mr %stack.17.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %13
  UpdateRegP: SU(17) MOV64mr %stack.17.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
              to 
  Ready @1c
  BotQ.A TopLatency SU(17) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 15 
  Cand SU(1) ORDER                              
  Cand SU(16) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(16) %13:gr64 = LEA64r $rip, 1, $noreg, @ua__str_9_adaptation, $noreg
Bottom Pressure:

  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 15 
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV64mr %stack.17.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
Bottom Pressure:
GR16=2
  LiveReg: %12
  UpdateRegP: SU(15) MOV64mr %stack.17.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 14 13 
  Cand SU(1) ORDER                              
  Cand SU(14) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(14) %12:gr64 = LEA64r $rip, 1, $noreg, @ua__str_8_transfb_, $noreg
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 13 
  Cand SU(1) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mr %stack.17.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %11
  UpdateRegP: SU(13) MOV64mr %stack.17.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
              to 
  Ready @2c
  BotQ.A TopLatency SU(13) 1c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 12 11 
  Cand SU(1) ORDER                              
  Cand SU(12) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(12) %11:gr64 = LEA64r $rip, 1, $noreg, @ua__str_7_transf_, $noreg
Bottom Pressure:

  Ready @3c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 11 
  Cand SU(1) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr %stack.17.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
Bottom Pressure:
GR16=2
  LiveReg: %10
  UpdateRegP: SU(11) MOV64mr %stack.17.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
              to 
  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 10 9 
  Cand SU(1) ORDER                              
  Cand SU(10) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(10) %10:gr64 = LEA64r $rip, 1, $noreg, @ua__str_6_diffusion_, $noreg
Bottom Pressure:

  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 9 
  Cand SU(1) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mr %stack.17.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %9
  UpdateRegP: SU(9) MOV64mr %stack.17.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
              to 
  Ready @3c
  BotQ.A TopLatency SU(9) 1c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 7 
  Cand SU(1) ORDER                              
  Cand SU(8) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(8) %9:gr64 = LEA64r $rip, 1, $noreg, @ua__str_5_transfb_c_, $noreg
Bottom Pressure:

  Ready @4c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr %stack.17.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
Bottom Pressure:
GR16=2
  LiveReg: %8
  UpdateRegP: SU(7) MOV64mr %stack.17.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
              to 
  Ready @3c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 5 
  Cand SU(1) ORDER                              
  Cand SU(6) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(6) %8:gr64 = LEA64r $rip, 1, $noreg, @ua__str_4_convect_, $noreg
Bottom Pressure:

  Ready @4c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr %stack.17.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %7
  UpdateRegP: SU(5) MOV64mr %stack.17.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
              to 
  Ready @4c
  BotQ.A TopLatency SU(5) 1c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(4) %7:gr64 = LEA64r $rip, 1, $noreg, @ua__str_3_init_, $noreg
Bottom Pressure:

  Ready @5c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr %stack.17.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
Bottom Pressure:
GR16=2
  LiveReg: %6
  UpdateRegP: SU(3) MOV64mr %stack.17.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
              to 
  Ready @4c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(2) %6:gr64 = LEA64r $rip, 1, $noreg, @ua__str_2_total_, $noreg
Bottom Pressure:

  Ready @5c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
Bottom Pressure:
GR16=2
  LiveReg: %5
  UpdateRegP: SU(1) MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
              to 
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:gr32 = MOV32ri 1
Bottom Pressure:

  Ready @6c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %5:gr32 = MOV32ri 1
SU(1):   MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
SU(2):   %6:gr64 = LEA64r $rip, 1, $noreg, @ua__str_2_total_, $noreg
SU(3):   MOV64mr %stack.17.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
SU(4):   %7:gr64 = LEA64r $rip, 1, $noreg, @ua__str_3_init_, $noreg
SU(5):   MOV64mr %stack.17.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
SU(6):   %8:gr64 = LEA64r $rip, 1, $noreg, @ua__str_4_convect_, $noreg
SU(7):   MOV64mr %stack.17.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
SU(8):   %9:gr64 = LEA64r $rip, 1, $noreg, @ua__str_5_transfb_c_, $noreg
SU(9):   MOV64mr %stack.17.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
SU(10):   %10:gr64 = LEA64r $rip, 1, $noreg, @ua__str_6_diffusion_, $noreg
SU(11):   MOV64mr %stack.17.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
SU(12):   %11:gr64 = LEA64r $rip, 1, $noreg, @ua__str_7_transf_, $noreg
SU(13):   MOV64mr %stack.17.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
SU(14):   %12:gr64 = LEA64r $rip, 1, $noreg, @ua__str_8_transfb_, $noreg
SU(15):   MOV64mr %stack.17.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
SU(16):   %13:gr64 = LEA64r $rip, 1, $noreg, @ua__str_9_adaptation, $noreg
SU(17):   MOV64mr %stack.17.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
SU(18):   %14:gr64 = LEA64r $rip, 1, $noreg, @ua__str_10_transf_b_, $noreg
SU(19):   MOV64mr %stack.17.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
SU(20):   %15:gr64 = LEA64r $rip, 1, $noreg, @ua__str_11_add2_, $noreg
SU(21):   MOV64mr %stack.17.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
SU(22):   %16:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %24:gr64 = COPY killed $rax
    To: JCC_1 %bb.11, 4, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %24:gr64 = COPY killed $rax
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%24
    SU(1): Data Latency=0 Reg=%24
  Single Issue       : false;
SU(1):   MOV64mr %stack.18.fp, 1, $noreg, 0, $noreg, %24:gr64 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%24
  Single Issue       : false;
SU(2):   TEST64rr %24:gr64, %24:gr64, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%24
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.11, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %24:gr64, %24:gr64, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.18.fp, 1, $noreg, 0, $noreg, %24:gr64 :: (store 8 into %ir.fp)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %24:gr64 = COPY killed $rax
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %24:gr64 = COPY killed $rax
SU(1):   MOV64mr %stack.18.fp, 1, $noreg, 0, $noreg, %24:gr64 :: (store 8 into %ir.fp)
SU(2):   TEST64rr %24:gr64, %24:gr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.3 if.end
  From: $rdi = LEA64r $rip, 1, $noreg, @ua__str_13_inputua_da, $noreg
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_13_inputua_da, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_1_r_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @ua__str_1_r_, $noreg
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ua__str_13_inputua_da, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_13_inputua_da, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_1_r_, $noreg

********** MI Scheduling **********
main:%bb.3 if.end
  From: $rdi = LEA64r $rip, 1, $noreg, @ua__str_12____NAS_Par, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_12____NAS_Par, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ua__str_12____NAS_Par, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_12____NAS_Par, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.4 if.then14
  From: %40:gr32 = COPY killed $eax
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %40:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%40
  Single Issue       : false;
SU(1):   MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %40:gr32 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%40
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %40:gr32 :: (store 4 into %ir.result)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %40:gr32 = COPY killed $eax
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %40:gr32 = COPY killed $eax
SU(1):   MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %40:gr32 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.4 if.then14
  From: $rdi = COPY %37:gr64
    To: CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %37:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @fre, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %37:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = LEA64r $rip, 1, $noreg, @fre, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @fre, $noreg
SU(0):   $rdi = COPY %37:gr64
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.4 if.then14
  From: $rdi = LEA64r $rip, 1, $noreg, @ua__str_14__Reading_f, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_14__Reading_f, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ua__str_14__Reading_f, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_14__Reading_f, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.5 while.cond
  From: %42:gr32 = COPY killed $eax
    To: JCC_1 %bb.5, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %42:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%42
  Single Issue       : false;
SU(1):   CMP32ri8 %42:gr32, 10, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%42
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.5, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
Cyclic Critical Path: 0c
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32ri8 %42:gr32, 10, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %42:gr32 = COPY killed $eax
  Ready @1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %42:gr32 = COPY killed $eax
SU(1):   CMP32ri8 %42:gr32, 10, implicit-def $eflags

********** MI Scheduling **********
main:%bb.6 while.end
  From: %49:gr32 = COPY killed $eax
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %49:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%49
  Single Issue       : false;
SU(1):   MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %49:gr32 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%49
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %49:gr32 :: (store 4 into %ir.result)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %49:gr32 = COPY killed $eax
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %49:gr32 = COPY killed $eax
SU(1):   MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %49:gr32 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.6 while.end
  From: $rdi = COPY %44:gr64
    To: CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %44:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @niter, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %44:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = LEA64r $rip, 1, $noreg, @niter, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @niter, $noreg
SU(0):   $rdi = COPY %44:gr64
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.7 while.cond20
  From: %51:gr32 = COPY killed $eax
    To: JCC_1 %bb.7, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %51:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%51
  Single Issue       : false;
SU(1):   CMP32ri8 %51:gr32, 10, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%51
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.7, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
Cyclic Critical Path: 0c
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32ri8 %51:gr32, 10, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %51:gr32 = COPY killed $eax
  Ready @1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %51:gr32 = COPY killed $eax
SU(1):   CMP32ri8 %51:gr32, 10, implicit-def $eflags

********** MI Scheduling **********
main:%bb.8 while.end24
  From: %58:gr32 = COPY killed $eax
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %58:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%58
  Single Issue       : false;
SU(1):   MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %58:gr32 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%58
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %58:gr32 :: (store 4 into %ir.result)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %58:gr32 = COPY killed $eax
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %58:gr32 = COPY killed $eax
SU(1):   MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %58:gr32 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.8 while.end24
  From: $rdi = COPY %53:gr64
    To: CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %53:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @nmxh, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %53:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = LEA64r $rip, 1, $noreg, @nmxh, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @nmxh, $noreg
SU(0):   $rdi = COPY %53:gr64
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.9 while.cond26
  From: %60:gr32 = COPY killed $eax
    To: JCC_1 %bb.9, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %60:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%60
  Single Issue       : false;
SU(1):   CMP32ri8 %60:gr32, 10, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%60
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.9, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
Cyclic Critical Path: 0c
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32ri8 %60:gr32, 10, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %60:gr32 = COPY killed $eax
  Ready @1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %60:gr32 = COPY killed $eax
SU(1):   CMP32ri8 %60:gr32, 10, implicit-def $eflags

********** MI Scheduling **********
main:%bb.10 while.end30
  From: %67:gr32 = COPY killed $eax
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %67:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%67
  Single Issue       : false;
SU(1):   MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %67:gr32 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%67
  Single Issue       : false;
SU(2):   MOV8mi %stack.12.Class, 1, $noreg, 0, $noreg, 85 :: (store 1 into %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %68:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %68:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV8mi %stack.12.Class, 1, $noreg, 0, $noreg, 85 :: (store 1 into %ir.Class, align 4)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %67:gr32 :: (store 4 into %ir.result)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %67:gr32 = COPY killed $eax
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %67:gr32 = COPY killed $eax
SU(1):   MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %67:gr32 :: (store 4 into %ir.result)
SU(2):   MOV8mi %stack.12.Class, 1, $noreg, 0, $noreg, 85 :: (store 1 into %ir.Class, align 4)
SU(3):   %68:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)

********** MI Scheduling **********
main:%bb.10 while.end30
  From: $rdi = COPY %62:gr64
    To: CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %62:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_16__lf_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @alpha, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %62:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = LEA64r $rip, 1, $noreg, @alpha, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @ua__str_16__lf_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_16__lf_, $noreg
SU(2):   $rdx = LEA64r $rip, 1, $noreg, @alpha, $noreg
SU(0):   $rdi = COPY %62:gr64
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.11 if.else33
  From: %29:gr32 = MOV32ri 5
    To: End RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %29:gr32 = MOV32ri 5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%29
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr $rip, 1, $noreg, @fre, $noreg, %29:gr32 :: (store 4 into @fre)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%29
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %30:gr32 = MOV32ri 200
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%30
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV32mr $rip, 1, $noreg, @niter, $noreg, %30:gr32 :: (store 4 into @niter)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%30
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %31:gr32 = MOV32ri 10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%31
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV32mr $rip, 1, $noreg, @nmxh, $noreg, %31:gr32 :: (store 4 into @nmxh)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%31
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %32:gr64 = MOV64ri 4590140797810047451
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%32
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr $rip, 1, $noreg, @alpha, $noreg, %32:gr64 :: (store 8 into @alpha)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%32
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV8mi %stack.12.Class, 1, $noreg, 0, $noreg, 66 :: (store 1 into %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 5 3 1 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV8mi %stack.12.Class, 1, $noreg, 0, $noreg, 66 :: (store 1 into %ir.Class, align 4)
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 5 3 
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr $rip, 1, $noreg, @alpha, $noreg, %32:gr64 :: (store 8 into @alpha)
Bottom Pressure:
GR16=2
  LiveReg: %32
  UpdateRegP: SU(7) MOV64mr $rip, 1, $noreg, @alpha, $noreg, %32:gr64 :: (store 8 into @alpha)
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 6 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(6) %32:gr64 = MOV64ri 4590140797810047451
Bottom Pressure:

  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr $rip, 1, $noreg, @nmxh, $noreg, %31:gr32 :: (store 4 into @nmxh)
Bottom Pressure:
GR16=2
  LiveReg: %31
  UpdateRegP: SU(5) MOV32mr $rip, 1, $noreg, @nmxh, $noreg, %31:gr32 :: (store 4 into @nmxh)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(4) %31:gr32 = MOV32ri 10
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr $rip, 1, $noreg, @niter, $noreg, %30:gr32 :: (store 4 into @niter)
Bottom Pressure:
GR16=2
  LiveReg: %30
  UpdateRegP: SU(3) MOV32mr $rip, 1, $noreg, @niter, $noreg, %30:gr32 :: (store 4 into @niter)
              to 
  Ready @1c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(2) %30:gr32 = MOV32ri 200
Bottom Pressure:

  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr $rip, 1, $noreg, @fre, $noreg, %29:gr32 :: (store 4 into @fre)
Bottom Pressure:
GR16=2
  LiveReg: %29
  UpdateRegP: SU(1) MOV32mr $rip, 1, $noreg, @fre, $noreg, %29:gr32 :: (store 4 into @fre)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %29:gr32 = MOV32ri 5
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %29:gr32 = MOV32ri 5
SU(1):   MOV32mr $rip, 1, $noreg, @fre, $noreg, %29:gr32 :: (store 4 into @fre)
SU(2):   %30:gr32 = MOV32ri 200
SU(3):   MOV32mr $rip, 1, $noreg, @niter, $noreg, %30:gr32 :: (store 4 into @niter)
SU(4):   %31:gr32 = MOV32ri 10
SU(5):   MOV32mr $rip, 1, $noreg, @nmxh, $noreg, %31:gr32 :: (store 4 into @nmxh)
SU(6):   %32:gr64 = MOV64ri 4590140797810047451
SU(7):   MOV64mr $rip, 1, $noreg, @alpha, $noreg, %32:gr64 :: (store 8 into @alpha)
SU(8):   MOV8mi %stack.12.Class, 1, $noreg, 0, $noreg, 66 :: (store 1 into %ir.Class, align 4)

********** MI Scheduling **********
main:%bb.11 if.else33
  From: $rdi = LEA64r $rip, 1, $noreg, @ua__str_17__No_input_, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_17__No_input_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ua__str_17__No_input_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_17__No_input_, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %93:gr32 = MOV32ri 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %93:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%93
  Single Issue       : false;
SU(1):   MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %93:gr32 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%93
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %93:gr32 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %93:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %93:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %93:gr32 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: $rdi = LEA64r $rip, 1, $noreg, @ua__str_22__Heat_sour, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_22__Heat_sour, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %90:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %90:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ua__str_22__Heat_sour, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_22__Heat_sour, $noreg
SU(1):   $xmm0 = COPY %90:fr64
SU(2):   $al = MOV8ri 1

********** MI Scheduling **********
main:%bb.12 if.end35
  From: $rdi = LEA64r $rip, 1, $noreg, @ua__str_21__CG_iterat, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_21__CG_iterat, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %87:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %87:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ua__str_21__CG_iterat, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_21__CG_iterat, $noreg
SU(1):   $esi = COPY %87:gr32
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.12 if.end35
  From: $rdi = LEA64r $rip, 1, $noreg, @ua__str_20__Time_step, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_20__Time_step, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %82:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %83:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %83:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %82:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ua__str_20__Time_step, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_20__Time_step, $noreg
SU(1):   $esi = COPY %82:gr32
SU(2):   $xmm0 = COPY %83:fr64
SU(3):   $al = MOV8ri 1

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %82:gr32 = MOV32rm $rip, 1, $noreg, @niter, $noreg :: (dereferenceable load 4 from @niter)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %82:gr32 = MOV32rm $rip, 1, $noreg, @niter, $noreg :: (dereferenceable load 4 from @niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %83:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dtime, $noreg :: (dereferenceable load 8 from @dtime)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %83:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dtime, $noreg :: (dereferenceable load 8 from @dtime)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %82:gr32 = MOV32rm $rip, 1, $noreg, @niter, $noreg :: (dereferenceable load 4 from @niter)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %82:gr32 = MOV32rm $rip, 1, $noreg, @niter, $noreg :: (dereferenceable load 4 from @niter)
SU(1):   %83:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dtime, $noreg :: (dereferenceable load 8 from @dtime)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: $rdi = LEA64r $rip, 1, $noreg, @ua__str_19__Adaptatio, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_19__Adaptatio, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %79:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %79:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ua__str_19__Adaptatio, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_19__Adaptatio, $noreg
SU(1):   $esi = COPY %79:gr32
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.12 if.end35
  From: $rdi = LEA64r $rip, 1, $noreg, @ua__str_18__Levels_of, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_18__Levels_of, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = MOV32ri 7
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ua__str_18__Levels_of, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_18__Levels_of, $noreg
SU(1):   $esi = MOV32ri 7
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %73:fr64 = COPY killed $xmm0
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %73:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=0 Reg=%73
    SU(1): Data Latency=0 Reg=%73
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(1):   MOVSDmr $rip, 1, $noreg, @dlmin, $noreg, %73:fr64 :: (store 8 into @dlmin)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%73
  Successors:
    SU(2): Anti Latency=0
  Single Issue       : false;
SU(2):   %73:fr64 = MULSDrm %73:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Data Latency=0 Reg=%73
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%73
  Single Issue       : false;
SU(3):   MOVSDmr $rip, 1, $noreg, @dtime, $noreg, %73:fr64 :: (store 8 into @dtime)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%73
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr $rip, 1, $noreg, @dtime, $noreg, %73:fr64 :: (store 8 into @dtime)
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %73:fr64 = MULSDrm %73:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr $rip, 1, $noreg, @dlmin, $noreg, %73:fr64 :: (store 8 into @dlmin)
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %73:fr64 = COPY killed $xmm0
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %73:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr $rip, 1, $noreg, @dlmin, $noreg, %73:fr64 :: (store 8 into @dlmin)
SU(2):   %73:fr64 = MULSDrm %73:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(3):   MOVSDmr $rip, 1, $noreg, @dtime, $noreg, %73:fr64 :: (store 8 into @dtime)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %70:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
    To: CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %70:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%70
  Single Issue       : false;
SU(1):   %71:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%71
  Single Issue       : false;
SU(2):   $xmm0 = COPY %70:fr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%70
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %71:fr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%71
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $xmm1 = COPY %71:fr64
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %70:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %71:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %70:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %70:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(1):   %71:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(2):   $xmm0 = COPY %70:fr64
SU(3):   $xmm1 = COPY %71:fr64

********** MI Scheduling **********
main:%bb.17 if.end44
  From: $rdi = LEA64r %stack.13.ifmortar, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @adaptation, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r %stack.13.ifmortar, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32r0 implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @adaptation, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = MOV32r0 implicit-def dead $eflags
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r %stack.13.ifmortar, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   $rdi = LEA64r %stack.13.ifmortar, 1, $noreg, 0, $noreg
SU(1):   $esi = MOV32r0 implicit-def dead $eflags

********** MI Scheduling **********
main:%bb.17 if.end44
  From: $rdi = LEA64r $rip, 1, $noreg, @sje, $noreg
    To: CALL64pcrel32 @nr_init, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sje, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %106:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = MOV32ri -1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @nr_init, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = MOV32ri -1
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %106:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @sje, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @sje, $noreg
SU(1):   $esi = COPY %106:gr32
SU(2):   $edx = MOV32ri -1

********** MI Scheduling **********
main:%bb.17 if.end44
  From: undef %104.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @nelt, $noreg :: (dereferenceable load 4 from @nelt)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   undef %104.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @nelt, $noreg :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%104
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %104.sub_32bit:gr64_nosp = SHL32ri %104.sub_32bit:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%104
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%104
  Single Issue       : false;
SU(2):   %106:gr32 = LEA64_32r %104:gr64_nosp, 2, %104:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%104
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %106:gr32 = LEA64_32r %104:gr64_nosp, 2, %104:gr64_nosp, 0, $noreg
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %104.sub_32bit:gr64_nosp = SHL32ri %104.sub_32bit:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) undef %104.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @nelt, $noreg :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   undef %104.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @nelt, $noreg :: (dereferenceable load 4 from @nelt)
SU(1):   %104.sub_32bit:gr64_nosp = SHL32ri %104.sub_32bit:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
SU(2):   %106:gr32 = LEA64_32r %104:gr64_nosp, 2, %104:gr64_nosp, 0, $noreg

********** MI Scheduling **********
main:%bb.17 if.end44
  From: $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
    To: CALL64pcrel32 @r_init, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %99:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @r_init, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %99:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm0 = FsFLD0SD
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
SU(2):   $xmm0 = FsFLD0SD
SU(1):   $esi = COPY %99:gr32

********** MI Scheduling **********
main:%bb.19 if.end48
  From: MOV64mi32 $rip, 1, $noreg, @time, $noreg, 0 :: (store 8 into @time)
    To: End RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=16
Live In: 
Live Out: %242 %264 %261 %285 %281 %279 %198 %195 
Live Thru: 
  LiveReg: %242
  LiveReg: %264
  LiveReg: %261
  LiveReg: %285
  LiveReg: %281
  LiveReg: %279
  LiveReg: %198
  LiveReg: %195
Top Pressure:

Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=16
Excess PSets: 
SU(0):   MOV64mi32 $rip, 1, $noreg, @time, $noreg, 0 :: (store 8 into @time)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   MOV32mi %stack.3.step, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.step)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %195:gr64 = LEA64r $rip, 1, $noreg, @ta1, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   undef %198.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32temp -2    GR32temp+GR32_DIBP -2    GR32temp+GR64_TC -2    GR8+GR32temp -2    GR16 -2
  Single Issue       : false;
SU(4):   %279:gr64 = MOV32ri64 1000
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %281:gr64 = LEA64r $rip, 1, $noreg, @ta2, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %285:gr64 = LEA64r $rip, 1, $noreg, @size_e, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %261:gr64 = LEA64r $rip, 1, $noreg, @trhs, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %264:gr64 = MOV32ri64 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %242:gr64 = LEA64r $rip, 1, $noreg, @cbc, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 8 7 6 5 4 3 2 1 0 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %242:gr64 = LEA64r $rip, 1, $noreg, @cbc, $noreg
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=14
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 8 7 6 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %264:gr64 = MOV32ri64 200
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 7 6 5 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %261:gr64 = LEA64r $rip, 1, $noreg, @trhs, $noreg
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=10
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 6 5 4 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %285:gr64 = LEA64r $rip, 1, $noreg, @size_e, $noreg
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=8
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 5 4 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %281:gr64 = LEA64r $rip, 1, $noreg, @ta2, $noreg
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=6
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %279:gr64 = MOV32ri64 1000
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=4
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) undef %198.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
Bottom Pressure:
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %195:gr64 = LEA64r $rip, 1, $noreg, @ta1, $noreg
Bottom Pressure:

  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.3.step, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.step)
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 $rip, 1, $noreg, @time, $noreg, 0 :: (store 8 into @time)
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   MOV64mi32 $rip, 1, $noreg, @time, $noreg, 0 :: (store 8 into @time)
SU(1):   MOV32mi %stack.3.step, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.step)
SU(2):   %195:gr64 = LEA64r $rip, 1, $noreg, @ta1, $noreg
SU(3):   undef %198.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
SU(4):   %279:gr64 = MOV32ri64 1000
SU(5):   %281:gr64 = LEA64r $rip, 1, $noreg, @ta2, $noreg
SU(6):   %285:gr64 = LEA64r $rip, 1, $noreg, @size_e, $noreg
SU(7):   %261:gr64 = LEA64r $rip, 1, $noreg, @trhs, $noreg
SU(8):   %264:gr64 = MOV32ri64 200
SU(9):   %242:gr64 = LEA64r $rip, 1, $noreg, @cbc, $noreg

********** MI Scheduling **********
main:%bb.19 if.end48
  From: %111:gr32 = MOV32ri 1
    To: CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %111:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $edi = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %111:gr32 = MOV32ri 1
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %111:gr32 = MOV32ri 1
SU(1):   $edi = MOV32ri 1

********** MI Scheduling **********
main:%bb.20 for.cond49
  From: %112:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
    To: JCC_1 %bb.65, 15, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %112:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%112
  Single Issue       : false;
SU(1):   CMP32rm %112:gr32, $rip, 1, $noreg, @niter, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @niter)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%112
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.65, 15, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %112:gr32, $rip, 1, $noreg, @niter, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @niter)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %112:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %112:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
SU(1):   CMP32rm %112:gr32, $rip, 1, $noreg, @niter, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @niter)

********** MI Scheduling **********
main:%bb.22 if.then53
  From: MOV64mi32 $rip, 1, $noreg, @time, $noreg, 0 :: (store 8 into @time)
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 $rip, 1, $noreg, @time, $noreg, 0 :: (store 8 into @time)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV64mr %stack.11.nelt_tot, 1, $noreg, 0, $noreg, %198:gr64_with_sub_32bit_in_gr32temp :: (store 8 into %ir.nelt_tot)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %111:gr32 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %111:gr32 :: (store 4 into %ir.i)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV64mr %stack.11.nelt_tot, 1, $noreg, 0, $noreg, %198:gr64_with_sub_32bit_in_gr32temp :: (store 8 into %ir.nelt_tot)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 $rip, 1, $noreg, @time, $noreg, 0 :: (store 8 into @time)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   MOV64mi32 $rip, 1, $noreg, @time, $noreg, 0 :: (store 8 into @time)
SU(1):   MOV64mr %stack.11.nelt_tot, 1, $noreg, 0, $noreg, %198:gr64_with_sub_32bit_in_gr32temp :: (store 8 into %ir.nelt_tot)
SU(2):   MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %111:gr32 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.22 if.then53
  From: $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
    To: CALL64pcrel32 @r_init, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %194:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @r_init, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %194:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm0 = FsFLD0SD
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
SU(2):   $xmm0 = FsFLD0SD
SU(1):   $esi = COPY %194:gr32

********** MI Scheduling **********
main:%bb.30 if.end66
  From: $rdi = LEA64r $rip, 1, $noreg, @tmort, $noreg
    To: CALL64pcrel32 @transf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @tmort, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ta1, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @transf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @ta1, $noreg
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @tmort, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @tmort, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ta1, $noreg

********** MI Scheduling **********
main:%bb.31 for.cond67
  From: %207:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
    To: JCC_1 %bb.33, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %207:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%207
  Single Issue       : false;
SU(1):   CMP32rm %207:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%207
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.33, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %207:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %207:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %207:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
SU(1):   CMP32rm %207:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)

********** MI Scheduling **********
main:%bb.32 for.body69
  From: $rdi = COPY %282:gr64
    To: CALL64pcrel32 @laplacian, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %282:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %284:gr64_nosp
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %286:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @laplacian, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %286:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %284:gr64_nosp
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %282:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   $rdi = COPY %282:gr64
SU(1):   $rsi = COPY %284:gr64_nosp
SU(2):   $edx = COPY %286:gr32

********** MI Scheduling **********
main:%bb.32 for.body69
  From: %278:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Constraining copy SU(1)
  Local use SU(5) -> SU(1)
SU(0):   %278:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(5): Data Latency=4 Reg=%278
    SU(1): Data Latency=4 Reg=%278
  Single Issue       : false;
SU(1):   %284:gr64_nosp = COPY %278:gr64_nosp
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%278
    SU(5): Ord  Latency=0 Weak
  Successors:
    SU(2): Data Latency=0 Reg=%284
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %284:gr64_nosp = IMUL64rr %284:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=0 Reg=%284
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%284
    SU(3): Data Latency=1 Reg=%284
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(3):   %282:gr64 = LEA64r %281:gr64, 1, %284:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%284
  Successors:
    SU(4): Anti Latency=0
  Single Issue       : false;
SU(4):   %284:gr64_nosp = ADD64rr %284:gr64_nosp(tied-def 0), %195:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Data Latency=1 Reg=%284
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(5):   %286:gr32 = MOV32rm %285:gr64, 4, %278:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx75)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%278
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(1): Ord  Latency=0 Weak
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
Pick Bot WEAK      
Scheduling SU(4) %284:gr64_nosp = ADD64rr %284:gr64_nosp(tied-def 0), %195:gr64, implicit-def dead $eflags
  Ready @0c
  BotQ.A TopLatency SU(4) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
  Cand SU(5) ORDER                              
  Cand SU(3) WEAK                               
Pick Bot WEAK      
Scheduling SU(3) %282:gr64 = LEA64r %281:gr64, 1, %284:gr64_nosp, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
  Cand SU(5) ORDER                              
  Cand SU(2) WEAK                               
Pick Bot WEAK      
Scheduling SU(2) %284:gr64_nosp = IMUL64rr %284:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot WEAK      
Scheduling SU(1) %284:gr64_nosp = COPY %278:gr64_nosp
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %286:gr32 = MOV32rm %285:gr64, 4, %278:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx75)
  Ready @3c
  BotQ.A BotLatency SU(5) 3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %278:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  Ready @7c
  BotQ.A BotLatency SU(0) 7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %278:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
SU(5):   %286:gr32 = MOV32rm %285:gr64, 4, %278:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx75)
SU(1):   %284:gr64_nosp = COPY %278:gr64_nosp
SU(2):   %284:gr64_nosp = IMUL64rr %284:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
SU(3):   %282:gr64 = LEA64r %281:gr64, 1, %284:gr64_nosp, 0, $noreg
SU(4):   %284:gr64_nosp = ADD64rr %284:gr64_nosp(tied-def 0), %195:gr64, implicit-def dead $eflags

********** MI Scheduling **********
main:%bb.34 for.cond79
  From: %209:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
    To: JCC_1 %bb.45, 13, implicit $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %209:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%209
  Single Issue       : false;
SU(1):   CMP32rm %209:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%209
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.45, 13, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %209:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %209:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %209:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
SU(1):   CMP32rm %209:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)

********** MI Scheduling **********
main:%bb.41 for.body90
  From: %274:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
    To: JMP_1 %bb.40
 RegionInstrs: 18
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=18
Live In: %281 %264 %261 %279 
Live Out: %281 %264 %261 %279 
Live Thru: GR16=8
  LiveReg: %281
  UpdateRegP: SU(12) %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %281:gr64, implicit-def dead $eflags
              to 
  LiveReg: %264
  UpdateRegP: SU(4) %265:gr64 = IMUL64rr %265:gr64(tied-def 0), %264:gr64, implicit-def dead $eflags
              to 
  LiveReg: %261
  UpdateRegP: SU(2) %270:gr64 = LEA64r %261:gr64, 1, %274:gr64_nosp, 0, $noreg
              to 
  LiveReg: %279
  UpdateRegP: SU(1) %274:gr64_nosp = IMUL64rr %274:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
              to 
Top Pressure:
GR16=8
Bottom Pressure:
GR16=8
Excess PSets: 
SU(0):   %274:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%274
    SU(1): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %274:gr64_nosp = IMUL64rr %274:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%274
    SU(0): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%274
    SU(2): Data Latency=1 Reg=%274
    SU(12): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %270:gr64 = LEA64r %261:gr64, 1, %274:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(1): Data Latency=1 Reg=%274
  Successors:
    SU(5): Data Latency=1 Reg=%270
    SU(5): Out  Latency=0
    SU(12): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %265:gr64 = MOVSX64rm32 %stack.8.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Data Latency=4 Reg=%265
    SU(4): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %265:gr64 = IMUL64rr %265:gr64(tied-def 0), %264:gr64, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(3): Data Latency=4 Reg=%265
    SU(3): Out  Latency=0
  Successors:
    SU(13): Data Latency=1 Reg=%265
    SU(5): Data Latency=1 Reg=%265
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %270:gr64 = ADD64rr %270:gr64(tied-def 0), %265:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=%270
    SU(4): Data Latency=1 Reg=%265
    SU(2): Out  Latency=0
  Successors:
    SU(9): Data Latency=1 Reg=%270
    SU(9): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %268:gr64_nosp = MOVSX64rm32 %stack.7.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(7): Data Latency=4 Reg=%268
    SU(7): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %268:gr64_nosp = SHL64ri %268:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(6): Data Latency=4 Reg=%268
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%268
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %269:gr64 = LEA64r %268:gr64_nosp, 4, %268:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(7): Data Latency=1 Reg=%268
  Successors:
    SU(14): Data Latency=1 Reg=%269
    SU(9): Data Latency=1 Reg=%269
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %270:gr64 = ADD64rr %270:gr64(tied-def 0), %269:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(5): Data Latency=1 Reg=%270
    SU(8): Data Latency=1 Reg=%269
    SU(5): Out  Latency=0
  Successors:
    SU(16): Data Latency=1 Reg=%270
    SU(11): Data Latency=1 Reg=%270
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %271:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(16): Data Latency=4 Reg=%271
    SU(15): Data Latency=4 Reg=%271
    SU(11): Data Latency=4 Reg=%271
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   %277:fr64 = MOVSDrm_alt %270:gr64, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx98)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(9): Data Latency=1 Reg=%270
    SU(10): Data Latency=4 Reg=%271
  Successors:
    SU(15): Data Latency=4 Reg=%277
    SU(15): Out  Latency=0
    SU(16): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(12):   %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %281:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=1 Reg=%274
    SU(1): Out  Latency=0
  Successors:
    SU(13): Data Latency=1 Reg=%274
    SU(13): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %265:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 6
  Predecessors:
    SU(12): Data Latency=1 Reg=%274
    SU(12): Out  Latency=0
    SU(4): Data Latency=1 Reg=%265
  Successors:
    SU(14): Data Latency=1 Reg=%274
    SU(14): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %269:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(13): Data Latency=1 Reg=%274
    SU(13): Out  Latency=0
    SU(8): Data Latency=1 Reg=%269
  Successors:
    SU(15): Data Latency=1 Reg=%274
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(15):   %277:fr64 = SUBSDrm %277:fr64(tied-def 0), %274:gr64_nosp, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(11): Data Latency=4 Reg=%277
    SU(14): Data Latency=1 Reg=%274
    SU(11): Out  Latency=0
    SU(10): Data Latency=4 Reg=%271
  Successors:
    SU(16): Data Latency=4 Reg=%277
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(16):   MOVSDmr %270:gr64, 8, %271:gr64_nosp, 0, $noreg, %277:fr64 :: (store 8 into %ir.arrayidx114)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(15): Data Latency=4 Reg=%277
    SU(11): Ord  Latency=0 Memory
    SU(10): Data Latency=4 Reg=%271
    SU(9): Data Latency=1 Reg=%270
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(17):   INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(10): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.40
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(17): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 17 
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GR16=8
  Ready @3c
  BotQ.A BotLatency SU(17) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Scheduling SU(16) MOVSDmr %270:gr64, 8, %271:gr64_nosp, 0, $noreg, %277:fr64 :: (store 8 into %ir.arrayidx114)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %270
  UpdateRegP: SU(11) %277:fr64 = MOVSDrm_alt %270:gr64, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx98)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(16) MOVSDmr %270:gr64, 8, %271:gr64_nosp, 0, $noreg, %277:fr64 :: (store 8 into %ir.arrayidx114)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %271
  UpdateRegP: SU(11) %277:fr64 = MOVSDrm_alt %270:gr64, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx98)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(15) %277:fr64 = SUBSDrm %277:fr64(tied-def 0), %274:gr64_nosp, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
              to GR16 2
  UpdateRegP: SU(16) MOVSDmr %270:gr64, 8, %271:gr64_nosp, 0, $noreg, %277:fr64 :: (store 8 into %ir.arrayidx114)
              to FR32 1    FR32X 1
  LiveReg: %277
  UpdateRegP: SU(16) MOVSDmr %270:gr64, 8, %271:gr64_nosp, 0, $noreg, %277:fr64 :: (store 8 into %ir.arrayidx114)
              to 
  Ready @0c
  BotQ.A TopLatency SU(16) 16c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) %277:fr64 = SUBSDrm %277:fr64(tied-def 0), %274:gr64_nosp, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  LiveReg: %277
  UpdateRegP: SU(15) %277:fr64 = SUBSDrm %277:fr64(tied-def 0), %274:gr64_nosp, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %274
  UpdateRegP: SU(15) %277:fr64 = SUBSDrm %277:fr64(tied-def 0), %274:gr64_nosp, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(15) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 11 
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %269:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %274
  UpdateRegP: SU(14) %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %269:gr64, implicit-def dead $eflags
              to 
  LiveReg: %269
  UpdateRegP: SU(9) %270:gr64 = ADD64rr %270:gr64(tied-def 0), %269:gr64, implicit-def dead $eflags
              to 
  UpdateRegP: SU(14) %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %269:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(14) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 13 
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %265:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %274
  UpdateRegP: SU(13) %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %265:gr64, implicit-def dead $eflags
              to 
  LiveReg: %265
  UpdateRegP: SU(5) %270:gr64 = ADD64rr %270:gr64(tied-def 0), %265:gr64, implicit-def dead $eflags
              to 
  UpdateRegP: SU(13) %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %265:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(13) 6c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 12 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %281:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %274
  UpdateRegP: SU(2) %270:gr64 = LEA64r %261:gr64, 1, %274:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(12) %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %281:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(12) 7c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) %277:fr64 = MOVSDrm_alt %270:gr64, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx98)
Bottom Pressure:
GR16=18
  Ready @8c
  BotQ.A BotLatency SU(11) 8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 10 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %271:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GR16=16
  Ready @12c
  BotQ.A BotLatency SU(10) 12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %270:gr64 = ADD64rr %270:gr64(tied-def 0), %269:gr64, implicit-def dead $eflags
Bottom Pressure:
GR16=16
  LiveReg: %270
  UpdateRegP: SU(9) %270:gr64 = ADD64rr %270:gr64(tied-def 0), %269:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %269:gr64 = LEA64r %268:gr64_nosp, 4, %268:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=16
  LiveReg: %268
  UpdateRegP: SU(8) %269:gr64 = LEA64r %268:gr64_nosp, 4, %268:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @10c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %268:gr64_nosp = SHL64ri %268:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=16
  LiveReg: %268
  UpdateRegP: SU(7) %268:gr64_nosp = SHL64ri %268:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @11c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %268:gr64_nosp = MOVSX64rm32 %stack.7.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GR16=14
  Ready @15c
  BotQ.A BotLatency SU(6) 15c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %270:gr64 = ADD64rr %270:gr64(tied-def 0), %265:gr64, implicit-def dead $eflags
Bottom Pressure:
GR16=14
  LiveReg: %270
  UpdateRegP: SU(5) %270:gr64 = ADD64rr %270:gr64(tied-def 0), %265:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @10c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %265:gr64 = IMUL64rr %265:gr64(tied-def 0), %264:gr64, implicit-def dead $eflags
Bottom Pressure:
GR16=14
  LiveReg: %265
  UpdateRegP: SU(4) %265:gr64 = IMUL64rr %265:gr64(tied-def 0), %264:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @11c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %265:gr64 = MOVSX64rm32 %stack.8.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GR16=12
  Ready @15c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %270:gr64 = LEA64r %261:gr64, 1, %274:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=10
  Ready @11c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %274:gr64_nosp = IMUL64rr %274:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
Bottom Pressure:
GR16=10
  LiveReg: %274
  UpdateRegP: SU(1) %274:gr64_nosp = IMUL64rr %274:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @12c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %274:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
Bottom Pressure:
GR16=8
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %274:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
SU(1):   %274:gr64_nosp = IMUL64rr %274:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
SU(2):   %270:gr64 = LEA64r %261:gr64, 1, %274:gr64_nosp, 0, $noreg
SU(3):   %265:gr64 = MOVSX64rm32 %stack.8.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(4):   %265:gr64 = IMUL64rr %265:gr64(tied-def 0), %264:gr64, implicit-def dead $eflags
SU(5):   %270:gr64 = ADD64rr %270:gr64(tied-def 0), %265:gr64, implicit-def dead $eflags
SU(6):   %268:gr64_nosp = MOVSX64rm32 %stack.7.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
SU(7):   %268:gr64_nosp = SHL64ri %268:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
SU(8):   %269:gr64 = LEA64r %268:gr64_nosp, 4, %268:gr64_nosp, 0, $noreg
SU(9):   %270:gr64 = ADD64rr %270:gr64(tied-def 0), %269:gr64, implicit-def dead $eflags
SU(10):   %271:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(11):   %277:fr64 = MOVSDrm_alt %270:gr64, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx98)
SU(12):   %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %281:gr64, implicit-def dead $eflags
SU(13):   %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %265:gr64, implicit-def dead $eflags
SU(14):   %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %269:gr64, implicit-def dead $eflags
SU(15):   %277:fr64 = SUBSDrm %277:fr64(tied-def 0), %274:gr64_nosp, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
SU(16):   MOVSDmr %270:gr64, 8, %271:gr64_nosp, 0, $noreg, %277:fr64 :: (store 8 into %ir.arrayidx114)
SU(17):   INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
main:%bb.45 for.end126
  From: $rdi = LEA64r $rip, 1, $noreg, @rmor, $noreg
    To: CALL64pcrel32 @transfb, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @rmor, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @trhs, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @transfb, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @trhs, $noreg
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @rmor, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @rmor, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @trhs, $noreg

********** MI Scheduling **********
main:%bb.48 for.cond130
  From: %214:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
    To: JCC_1 %bb.55, 13, implicit $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %214:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%214
  Single Issue       : false;
SU(1):   CMP32rm %214:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%214
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.55, 13, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %214:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %214:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %214:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
SU(1):   CMP32rm %214:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)

********** MI Scheduling **********
main:%bb.51 for.body135
  From: %240:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
    To: JCC_1 %bb.53, 5, implicit $eflags
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %240:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=4 Reg=%240
  Single Issue       : false;
SU(1):   %241:gr64_nosp = LEA64r %240:gr64_nosp, 2, %240:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%240
  Successors:
    SU(2): Data Latency=1 Reg=%241
  Single Issue       : false;
SU(2):   %243:gr64 = LEA64r %242:gr64, 8, %241:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%241
  Successors:
    SU(4): Data Latency=1 Reg=%243
  Single Issue       : false;
SU(3):   %244:gr64_nosp = MOVSX64rm32 %stack.5.iside, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=4 Reg=%244
  Single Issue       : false;
SU(4):   CMP32mi8 %243:gr64, 4, %244:gr64_nosp, 0, $noreg, 0, implicit-def $eflags :: (load 4 from %ir.arrayidx139)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%243
    SU(3): Data Latency=4 Reg=%244
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.53, 5, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) CMP32mi8 %243:gr64, 4, %244:gr64_nosp, 0, $noreg, 0, implicit-def $eflags :: (load 4 from %ir.arrayidx139)
  Ready @4c
  BotQ.A TopLatency SU(4) 6c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %244:gr64_nosp = MOVSX64rm32 %stack.5.iside, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.iside)
  Ready @8c
  BotQ.A BotLatency SU(3) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %243:gr64 = LEA64r %242:gr64, 8, %241:gr64_nosp, 0, $noreg
  Ready @5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %241:gr64_nosp = LEA64r %240:gr64_nosp, 2, %240:gr64_nosp, 0, $noreg
  Ready @6c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %240:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  Ready @10c
  BotQ.A BotLatency SU(0) 10c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %240:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
SU(1):   %241:gr64_nosp = LEA64r %240:gr64_nosp, 2, %240:gr64_nosp, 0, $noreg
SU(2):   %243:gr64 = LEA64r %242:gr64, 8, %241:gr64_nosp, 0, $noreg
SU(3):   %244:gr64_nosp = MOVSX64rm32 %stack.5.iside, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.iside)
SU(4):   CMP32mi8 %243:gr64, 4, %244:gr64_nosp, 0, $noreg, 0, implicit-def $eflags :: (load 4 from %ir.arrayidx139)

********** MI Scheduling **********
main:%bb.52 if.then141
  From: $rdi = COPY %249:gr64
    To: CALL64pcrel32 @facev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %249:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %250:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @facev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %250:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %249:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) $xmm0 = FsFLD0SD
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(2):   $xmm0 = FsFLD0SD
SU(0):   $rdi = COPY %249:gr64
SU(1):   $esi = COPY %250:gr32

********** MI Scheduling **********
main:%bb.52 if.then141
  From: %249:gr64 = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %249:gr64 = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%249
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %249:gr64 = IMUL64rr %249:gr64(tied-def 0), %279:gr64, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%249
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%249
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %249:gr64 = ADD64rr %249:gr64(tied-def 0), %261:gr64, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%249
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(3):   %250:gr32 = MOV32rm %stack.5.iside, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %250:gr32 = MOV32rm %stack.5.iside, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.iside)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %249:gr64 = ADD64rr %249:gr64(tied-def 0), %261:gr64, implicit-def dead $eflags
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %249:gr64 = IMUL64rr %249:gr64(tied-def 0), %279:gr64, implicit-def dead $eflags
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %249:gr64 = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %249:gr64 = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
SU(1):   %249:gr64 = IMUL64rr %249:gr64(tied-def 0), %279:gr64, implicit-def dead $eflags
SU(2):   %249:gr64 = ADD64rr %249:gr64(tied-def 0), %261:gr64, implicit-def dead $eflags
SU(3):   %250:gr32 = MOV32rm %stack.5.iside, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.iside)

********** MI Scheduling **********
main:%bb.55 for.end151
  From: $rdi = LEA64r $rip, 1, $noreg, @rmor, $noreg
    To: CALL64pcrel32 @col2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @rmor, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @tmmor, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %216:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @col2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = COPY %216:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @tmmor, $noreg
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @rmor, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @rmor, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @tmmor, $noreg
SU(2):   $edx = COPY %216:gr32

********** MI Scheduling **********
main:%bb.57 if.end154
  From: $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
    To: CALL64pcrel32 @add2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @t, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %221:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @add2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = COPY %221:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @t, $noreg
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @t, $noreg
SU(2):   $edx = COPY %221:gr32

********** MI Scheduling **********
main:%bb.59 if.end157
  From: %226:fr64 = MOVSDrm_alt $rip, 1, $noreg, @time, $noreg :: (dereferenceable load 8 from @time)
    To: JCC_1 %bb.63, 4, implicit $eflags
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %226:fr64 = MOVSDrm_alt $rip, 1, $noreg, @time, $noreg :: (dereferenceable load 8 from @time)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%226
    SU(1): Out  Latency=0
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %226:fr64 = ADDSDrm %226:fr64(tied-def 0), $rip, 1, $noreg, @dtime, $noreg :: (dereferenceable load 8 from @dtime)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%226
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%226
  Single Issue       : false;
SU(2):   MOVSDmr $rip, 1, $noreg, @time, $noreg, %226:fr64 :: (store 8 into @time)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%226
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   CMP32mi8 %stack.3.step, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.63, 4, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) CMP32mi8 %stack.3.step, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.step)
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr $rip, 1, $noreg, @time, $noreg, %226:fr64 :: (store 8 into @time)
  Ready @0c
  BotQ.A TopLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %226:fr64 = ADDSDrm %226:fr64(tied-def 0), $rip, 1, $noreg, @dtime, $noreg :: (dereferenceable load 8 from @dtime)
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %226:fr64 = MOVSDrm_alt $rip, 1, $noreg, @time, $noreg :: (dereferenceable load 8 from @time)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %226:fr64 = MOVSDrm_alt $rip, 1, $noreg, @time, $noreg :: (dereferenceable load 8 from @time)
SU(1):   %226:fr64 = ADDSDrm %226:fr64(tied-def 0), $rip, 1, $noreg, @dtime, $noreg :: (dereferenceable load 8 from @dtime)
SU(2):   MOVSDmr $rip, 1, $noreg, @time, $noreg, %226:fr64 :: (store 8 into @time)
SU(3):   CMP32mi8 %stack.3.step, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.step)

********** MI Scheduling **********
main:%bb.60 land.lhs.true
  From: %227:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
    To: JCC_1 %bb.63, 5, implicit $eflags
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Global memory object and new barrier chain: SU(4).
Max Pressure: GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=4
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=4
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
GR16=8
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %227:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(7): Data Latency=4 Reg=%227
    SU(2): Data Latency=4 Reg=%227
    SU(4): Ord  Latency=0 Barrier
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %228:gr32 = MOV32rm $rip, 1, $noreg, @fre, $noreg :: (dereferenceable load 4 from @fre)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(6): Data Latency=4 Reg=%228
    SU(4): Data Latency=4 Reg=%228
    SU(4): Ord  Latency=0 Barrier
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   $eax = COPY %227:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%227
  Successors:
    SU(3): Out  Latency=0
    SU(3): Data Latency=0 Reg=$eax
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Single Issue       : false;
SU(3):   CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Out  Latency=0
    SU(2): Data Latency=0 Reg=$eax
  Successors:
    SU(4): Out  Latency=0
    SU(4): Data Latency=1 Reg=$eax
    SU(4): Out  Latency=0
    SU(4): Data Latency=1 Reg=$edx
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Single Issue       : false;
SU(4):   IDIV32r %228:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(3): Out  Latency=0
    SU(3): Data Latency=1 Reg=$eax
    SU(3): Out  Latency=0
    SU(3): Data Latency=1 Reg=$edx
    SU(1): Data Latency=4 Reg=%228
    SU(1): Ord  Latency=0 Barrier
    SU(0): Ord  Latency=0 Barrier
  Successors:
    SU(5): Data Latency=1 Reg=$eax
    SU(7): Out  Latency=0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR32temp 2    GR32temp+GR32_DIBP 2
  Single Issue       : false;
SU(5):   %230:gr32 = COPY killed $eax
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=$eax
  Successors:
    SU(6): Data Latency=0 Reg=%230
    SU(6): Out  Latency=0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR32temp 2    GR32temp+GR32_DIBP 2
  Single Issue       : false;
SU(6):   %230:gr32 = nsw IMUL32rr %230:gr32(tied-def 0), %228:gr32, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(5): Data Latency=0 Reg=%230
    SU(5): Out  Latency=0
    SU(1): Data Latency=4 Reg=%228
  Successors:
    SU(7): Data Latency=1 Reg=%230
    SU(7): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   CMP32rr %230:gr32, %227:gr32, implicit-def $eflags
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=%230
    SU(6): Out  Latency=0
    SU(4): Out  Latency=0
    SU(0): Data Latency=4 Reg=%227
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR16 4
  Single Issue       : false;
ExitSU:   JCC_1 %bb.63, 5, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) CMP32rr %230:gr32, %227:gr32, implicit-def $eflags
Bottom Pressure:
GR16=4
  LiveReg: %230
  UpdateRegP: SU(7) CMP32rr %230:gr32, %227:gr32, implicit-def $eflags
              to GR16 2
  LiveReg: %227
  UpdateRegP: SU(2) $eax = COPY %227:gr32
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  UpdateRegP: SU(7) CMP32rr %230:gr32, %227:gr32, implicit-def $eflags
              to 
  Ready @1c
  BotQ.A TopLatency SU(7) 7c
  BotQ.A BotLatency SU(7) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %230:gr32 = nsw IMUL32rr %230:gr32(tied-def 0), %228:gr32, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %230
  UpdateRegP: SU(6) %230:gr32 = nsw IMUL32rr %230:gr32(tied-def 0), %228:gr32, implicit-def dead $eflags
              to 
  LiveReg: %228
  UpdateRegP: SU(4) IDIV32r %228:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
              to GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR32temp 2    GR32temp+GR32_DIBP 2
  UpdateRegP: SU(6) %230:gr32 = nsw IMUL32rr %230:gr32(tied-def 0), %228:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @2c
  BotQ.A BotLatency SU(6) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %230:gr32 = COPY killed $eax
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=6
  Ready @2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) IDIV32r %228:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=4
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=4
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
GR16=8
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
  Rescheduling physreg copy SU(5):   %230:gr32 = COPY killed $eax
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) CDQ implicit-def $eax, implicit-def $edx, implicit $eax
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=6
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $eax = COPY %227:gr32
Bottom Pressure:
GR16=4
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @4c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %228:gr32 = MOV32rm $rip, 1, $noreg, @fre, $noreg :: (dereferenceable load 4 from @fre)
Bottom Pressure:
GR16=2
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %227:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
Bottom Pressure:

  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   %227:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
SU(1):   %228:gr32 = MOV32rm $rip, 1, $noreg, @fre, $noreg :: (dereferenceable load 4 from @fre)
SU(2):   $eax = COPY %227:gr32
SU(3):   CDQ implicit-def $eax, implicit-def $edx, implicit $eax
SU(4):   IDIV32r %228:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
SU(5):   %230:gr32 = COPY $eax
SU(6):   %230:gr32 = nsw IMUL32rr %230:gr32(tied-def 0), %228:gr32, implicit-def dead $eflags
SU(7):   CMP32rr %230:gr32, %227:gr32, implicit-def $eflags

********** MI Scheduling **********
main:%bb.61 if.then161
  From: %232:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
    To: JCC_1 %bb.64, 4, implicit $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %232:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%232
  Single Issue       : false;
SU(1):   CMP32rm %232:gr32, $rip, 1, $noreg, @niter, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @niter)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%232
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.64, 4, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %232:gr32, $rip, 1, $noreg, @niter, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @niter)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %232:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.61 ***
SU(0):   %232:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
SU(1):   CMP32rm %232:gr32, $rip, 1, $noreg, @niter, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @niter)

********** MI Scheduling **********
main:%bb.62 if.then163
  From: $rdi = LEA64r %stack.13.ifmortar, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @adaptation, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r %stack.13.ifmortar, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %234:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @adaptation, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %234:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r %stack.13.ifmortar, 1, $noreg, 0, $noreg
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   $rdi = LEA64r %stack.13.ifmortar, 1, $noreg, 0, $noreg
SU(1):   $esi = COPY %234:gr32

********** MI Scheduling **********
main:%bb.64 if.end166
  From: %237:fr64 = CVTSI2SDrm $rip, 1, $noreg, @nelt, $noreg :: (dereferenceable load 4 from @nelt)
    To: JMP_1 %bb.20
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %237:fr64 = CVTSI2SDrm $rip, 1, $noreg, @nelt, $noreg :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%237
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %237:fr64 = ADDSDrm %237:fr64(tied-def 0), %stack.11.nelt_tot, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nelt_tot)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%237
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%237
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %stack.11.nelt_tot, 1, $noreg, 0, $noreg, %237:fr64 :: (store 8 into %ir.nelt_tot)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%237
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   INC32m %stack.3.step, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.step), (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) INC32m %stack.3.step, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.step), (dereferenceable load 4 from %ir.step)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.11.nelt_tot, 1, $noreg, 0, $noreg, %237:fr64 :: (store 8 into %ir.nelt_tot)
  Ready @0c
  BotQ.A TopLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %237:fr64 = ADDSDrm %237:fr64(tied-def 0), %stack.11.nelt_tot, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nelt_tot)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %237:fr64 = CVTSI2SDrm $rip, 1, $noreg, @nelt, $noreg :: (dereferenceable load 4 from @nelt)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   %237:fr64 = CVTSI2SDrm $rip, 1, $noreg, @nelt, $noreg :: (dereferenceable load 4 from @nelt)
SU(1):   %237:fr64 = ADDSDrm %237:fr64(tied-def 0), %stack.11.nelt_tot, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nelt_tot)
SU(2):   MOVSDmr %stack.11.nelt_tot, 1, $noreg, 0, $noreg, %237:fr64 :: (store 8 into %ir.nelt_tot)
SU(3):   INC32m %stack.3.step, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.step), (dereferenceable load 4 from %ir.step)

********** MI Scheduling **********
main:%bb.65 for.end170
  From: %129:gr64 = LEA64r $rip, 1, $noreg, @ua__str_33__none__, $noreg
    To: CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 29
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=4
GR16=14
Live In: %124 %122 %127 %125 %128 
Live Out: %124 %122 %127 %125 %128 
Live Thru: FR32=2
FR32X=2
GR16=6
  LiveReg: %124
  UpdateRegP: SU(28) $xmm1 = COPY %124:fr64
              to FR32 -1    FR32X -1
  LiveReg: %122
  UpdateRegP: SU(27) $xmm0 = COPY %122:fr64
              to FR32 -1    FR32X -1
  LiveReg: %127
  UpdateRegP: SU(26) $r9d = COPY %127:gr32
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  LiveReg: %125
  UpdateRegP: SU(22) $esi = COPY %125:gr32
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  LiveReg: %128
  UpdateRegP: SU(18) MOV32mr $rsp, 1, $noreg, 8, $noreg, %128:gr32 :: (store 4 into stack + 8)
              to 
Top Pressure:
FR32=2
FR32X=2
GR16=6
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=4
GR16=14
Excess PSets: 
SU(0):   %129:gr64 = LEA64r $rip, 1, $noreg, @ua__str_33__none__, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%129
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV64mr $rsp, 1, $noreg, 80, $noreg, %129:gr64 :: (store 8 into stack + 80)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%129
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %131:gr64 = LEA64r $rip, 1, $noreg, @ua__str_32__O3__mcmod, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%131
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr $rsp, 1, $noreg, 72, $noreg, %131:gr64 :: (store 8 into stack + 72)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%131
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %132:gr64 = LEA64r $rip, 1, $noreg, @ua__str_31__g__Wall__, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%132
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr $rsp, 1, $noreg, 64, $noreg, %132:gr64 :: (store 8 into stack + 64)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%132
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %133:gr64 = LEA64r $rip, 1, $noreg, @ua__str_30__I___commo, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%133
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr $rsp, 1, $noreg, 56, $noreg, %133:gr64 :: (store 8 into stack + 56)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%133
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %134:gr64 = LEA64r $rip, 1, $noreg, @ua__str_29__lm_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%134
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %134:gr64 :: (store 8 into stack + 48)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%134
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %135:gr64 = LEA64r $rip, 1, $noreg, @ua__str_28___CC__, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%135
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %135:gr64 :: (store 8 into stack + 40)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%135
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %136:gr64 = LEA64r $rip, 1, $noreg, @ua__str_27_gcc_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%136
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %136:gr64 :: (store 8 into stack + 32)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%136
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %137:gr64 = LEA64r $rip, 1, $noreg, @ua__str_26_03_Nov_201, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%137
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %137:gr64 :: (store 8 into stack + 24)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%137
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %138:gr64 = LEA64r $rip, 1, $noreg, @ua__str_25_3_3_1_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%138
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(17):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %138:gr64 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%138
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %128:gr32 :: (store 4 into stack + 8)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %139:gr64 = LEA64r $rip, 1, $noreg, @ua__str_24_____coll__, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%139
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(20):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %139:gr64 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%139
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_23_UA_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(22):   $esi = COPY %125:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  Single Issue       : false;
SU(23):   $edx = MOV32ri 7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Single Issue       : false;
SU(24):   $ecx = MOV32ri 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  Single Issue       : false;
SU(25):   $r8d = MOV32r0 implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(26):   $r9d = COPY %127:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(27):   $xmm0 = COPY %122:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(28):   $xmm1 = COPY %124:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=1 Artificial
    SU(24): Ord  Latency=1 Artificial
    SU(23): Ord  Latency=1 Artificial
    SU(22): Ord  Latency=0 Artificial
    SU(21): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 28 27 26 25 24 23 22 21 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(28) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(28) $xmm1 = COPY %124:fr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=3
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=3
GR16=14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 27 26 25 24 23 22 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(27) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(27) $xmm0 = COPY %122:fr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 26 25 24 23 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) $r9d = COPY %127:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
FR32X=2
GR16=13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 25 24 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) $r8d = MOV32r0 implicit-def dead $eflags
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
FR32X=2
GR16=12
  Ready @1c
  BotQ.A BotLatency SU(25) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 24 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) $ecx = MOV32ri 0
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
FR32X=2
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) $edx = MOV32ri 7
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=2
GR16=8
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(22) $esi = COPY %125:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
FR32X=2
GR16=7
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) $rdi = LEA64r $rip, 1, $noreg, @ua__str_23_UA_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) MOV64mr $rsp, 1, $noreg, 0, $noreg, %139:gr64 :: (store 8 into stack)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %139
  UpdateRegP: SU(20) MOV64mr $rsp, 1, $noreg, 0, $noreg, %139:gr64 :: (store 8 into stack)
              to 
  Ready @1c
  BotQ.A TopLatency SU(20) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 
  Cand SU(1) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %139:gr64 = LEA64r $rip, 1, $noreg, @ua__str_24_____coll__, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 
  Cand SU(1) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) MOV32mr $rsp, 1, $noreg, 8, $noreg, %128:gr32 :: (store 4 into stack + 8)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 17 15 13 11 9 7 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) MOV64mr $rsp, 1, $noreg, 16, $noreg, %138:gr64 :: (store 8 into stack + 16)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %138
  UpdateRegP: SU(17) MOV64mr $rsp, 1, $noreg, 16, $noreg, %138:gr64 :: (store 8 into stack + 16)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 15 13 11 9 7 16 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %138:gr64 = LEA64r $rip, 1, $noreg, @ua__str_25_3_3_1_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 15 13 11 9 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV64mr $rsp, 1, $noreg, 24, $noreg, %137:gr64 :: (store 8 into stack + 24)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %137
  UpdateRegP: SU(15) MOV64mr $rsp, 1, $noreg, 24, $noreg, %137:gr64 :: (store 8 into stack + 24)
              to 
  Ready @2c
  BotQ.A TopLatency SU(15) 1c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 13 11 9 14 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %137:gr64 = LEA64r $rip, 1, $noreg, @ua__str_26_03_Nov_201, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @3c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 13 11 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mr $rsp, 1, $noreg, 32, $noreg, %136:gr64 :: (store 8 into stack + 32)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %136
  UpdateRegP: SU(13) MOV64mr $rsp, 1, $noreg, 32, $noreg, %136:gr64 :: (store 8 into stack + 32)
              to 
  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 11 12 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %136:gr64 = LEA64r $rip, 1, $noreg, @ua__str_27_gcc_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 11 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr $rsp, 1, $noreg, 40, $noreg, %135:gr64 :: (store 8 into stack + 40)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %135
  UpdateRegP: SU(11) MOV64mr $rsp, 1, $noreg, 40, $noreg, %135:gr64 :: (store 8 into stack + 40)
              to 
  Ready @3c
  BotQ.A TopLatency SU(11) 1c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 10 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %135:gr64 = LEA64r $rip, 1, $noreg, @ua__str_28___CC__, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @4c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mr $rsp, 1, $noreg, 48, $noreg, %134:gr64 :: (store 8 into stack + 48)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %134
  UpdateRegP: SU(9) MOV64mr $rsp, 1, $noreg, 48, $noreg, %134:gr64 :: (store 8 into stack + 48)
              to 
  Ready @3c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 8 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %134:gr64 = LEA64r $rip, 1, $noreg, @ua__str_29__lm_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @4c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr $rsp, 1, $noreg, 56, $noreg, %133:gr64 :: (store 8 into stack + 56)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %133
  UpdateRegP: SU(7) MOV64mr $rsp, 1, $noreg, 56, $noreg, %133:gr64 :: (store 8 into stack + 56)
              to 
  Ready @4c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 6 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %133:gr64 = LEA64r $rip, 1, $noreg, @ua__str_30__I___commo, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @5c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr $rsp, 1, $noreg, 64, $noreg, %132:gr64 :: (store 8 into stack + 64)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %132
  UpdateRegP: SU(5) MOV64mr $rsp, 1, $noreg, 64, $noreg, %132:gr64 :: (store 8 into stack + 64)
              to 
  Ready @4c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %132:gr64 = LEA64r $rip, 1, $noreg, @ua__str_31__g__Wall__, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @5c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr $rsp, 1, $noreg, 72, $noreg, %131:gr64 :: (store 8 into stack + 72)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %131
  UpdateRegP: SU(3) MOV64mr $rsp, 1, $noreg, 72, $noreg, %131:gr64 :: (store 8 into stack + 72)
              to 
  Ready @5c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %131:gr64 = LEA64r $rip, 1, $noreg, @ua__str_32__O3__mcmod, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @6c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $rsp, 1, $noreg, 80, $noreg, %129:gr64 :: (store 8 into stack + 80)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %129
  UpdateRegP: SU(1) MOV64mr $rsp, 1, $noreg, 80, $noreg, %129:gr64 :: (store 8 into stack + 80)
              to 
  Ready @5c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %129:gr64 = LEA64r $rip, 1, $noreg, @ua__str_33__none__, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @6c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   %129:gr64 = LEA64r $rip, 1, $noreg, @ua__str_33__none__, $noreg
SU(1):   MOV64mr $rsp, 1, $noreg, 80, $noreg, %129:gr64 :: (store 8 into stack + 80)
SU(2):   %131:gr64 = LEA64r $rip, 1, $noreg, @ua__str_32__O3__mcmod, $noreg
SU(3):   MOV64mr $rsp, 1, $noreg, 72, $noreg, %131:gr64 :: (store 8 into stack + 72)
SU(4):   %132:gr64 = LEA64r $rip, 1, $noreg, @ua__str_31__g__Wall__, $noreg
SU(5):   MOV64mr $rsp, 1, $noreg, 64, $noreg, %132:gr64 :: (store 8 into stack + 64)
SU(6):   %133:gr64 = LEA64r $rip, 1, $noreg, @ua__str_30__I___commo, $noreg
SU(7):   MOV64mr $rsp, 1, $noreg, 56, $noreg, %133:gr64 :: (store 8 into stack + 56)
SU(8):   %134:gr64 = LEA64r $rip, 1, $noreg, @ua__str_29__lm_, $noreg
SU(9):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %134:gr64 :: (store 8 into stack + 48)
SU(10):   %135:gr64 = LEA64r $rip, 1, $noreg, @ua__str_28___CC__, $noreg
SU(11):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %135:gr64 :: (store 8 into stack + 40)
SU(12):   %136:gr64 = LEA64r $rip, 1, $noreg, @ua__str_27_gcc_, $noreg
SU(13):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %136:gr64 :: (store 8 into stack + 32)
SU(14):   %137:gr64 = LEA64r $rip, 1, $noreg, @ua__str_26_03_Nov_201, $noreg
SU(15):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %137:gr64 :: (store 8 into stack + 24)
SU(16):   %138:gr64 = LEA64r $rip, 1, $noreg, @ua__str_25_3_3_1_, $noreg
SU(17):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %138:gr64 :: (store 8 into stack + 16)
SU(18):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %128:gr32 :: (store 4 into stack + 8)
SU(19):   %139:gr64 = LEA64r $rip, 1, $noreg, @ua__str_24_____coll__, $noreg
SU(20):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %139:gr64 :: (store 8 into stack)
SU(21):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_23_UA_, $noreg
SU(22):   $esi = COPY %125:gr32
SU(23):   $edx = MOV32ri 7
SU(24):   $ecx = MOV32ri 0
SU(25):   $r8d = MOV32r0 implicit-def dead $eflags
SU(26):   $r9d = COPY %127:gr32
SU(27):   $xmm0 = COPY %122:fr64
SU(28):   $xmm1 = COPY %124:fr64

********** MI Scheduling **********
main:%bb.65 for.end170
  From: %119:gr32 = IMUL32rmi8 $rip, 1, $noreg, @nmxh, $noreg, 125, implicit-def dead $eflags :: (dereferenceable load 4 from @nmxh)
    To: ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
GR16=6
Live In: 
Live Out: %128 %127 %125 %124 %122 
Live Thru: 
  LiveReg: %128
  LiveReg: %127
  LiveReg: %125
  LiveReg: %124
  UpdateRegP: SU(8) MOVSDmr %stack.9.mflops, 1, $noreg, 0, $noreg, %124:fr64 :: (store 8 into %ir.mflops)
              to 
  LiveReg: %122
  UpdateRegP: SU(6) %123:fr64 = MULSDrr %123:fr64(tied-def 0), %122:fr64
              to 
Top Pressure:

Bottom Pressure:
FR32=2
FR32X=2
GR16=6
Excess PSets: 
SU(0):   %119:gr32 = IMUL32rmi8 $rip, 1, $noreg, @nmxh, $noreg, 125, implicit-def dead $eflags :: (dereferenceable load 4 from @nmxh)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(1): Data Latency=4 Reg=%119
    SU(1): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %119:gr32 = ADD32ri8 %119:gr32(tied-def 0), 125, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(0): Data Latency=4 Reg=%119
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%119
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %124:fr64 = CVTSI2SDrr %119:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(1): Data Latency=1 Reg=%119
  Successors:
    SU(3): Data Latency=1 Reg=%124
    SU(3): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(3):   %124:fr64 = MULSDrm %124:fr64(tied-def 0), %stack.11.nelt_tot, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nelt_tot)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 14
  Predecessors:
    SU(2): Data Latency=1 Reg=%124
    SU(2): Out  Latency=0
  Successors:
    SU(7): Data Latency=4 Reg=%124
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %122:fr64 = MOVSDrm_alt %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=%122
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(5):   %123:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=%123
    SU(6): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(6):   %123:fr64 = MULSDrr %123:fr64(tied-def 0), %122:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(5): Data Latency=4 Reg=%123
    SU(5): Out  Latency=0
    SU(4): Data Latency=4 Reg=%122
  Successors:
    SU(7): Data Latency=1 Reg=%123
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %124:fr64 = DIVSDrr %124:fr64(tied-def 0), %123:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 10
  Height             : 10
  Predecessors:
    SU(3): Data Latency=4 Reg=%124
    SU(6): Data Latency=1 Reg=%123
    SU(3): Out  Latency=0
  Successors:
    SU(8): Data Latency=10 Reg=%124
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(8):   MOVSDmr %stack.9.mflops, 1, $noreg, 0, $noreg, %124:fr64 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(7): Data Latency=10 Reg=%124
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %125:gr32 = MOVSX32rm8 %stack.12.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %127:gr32 = MOV32rm $rip, 1, $noreg, @niter, $noreg :: (dereferenceable load 4 from @niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   %128:gr32 = MOV32rm %stack.14.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=3 Artificial
    SU(10): Ord  Latency=3 Artificial
    SU(9): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 20
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 10 9 
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %128:gr32 = MOV32rm %stack.14.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @3c
  BotQ.A BotLatency SU(11) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %127:gr32 = MOV32rm $rip, 1, $noreg, @niter, $noreg :: (dereferenceable load 4 from @niter)
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %125:gr32 = MOVSX32rm8 %stack.12.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
Bottom Pressure:
FR32=2
FR32X=2
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) MOVSDmr %stack.9.mflops, 1, $noreg, 0, $noreg, %124:fr64 :: (store 8 into %ir.mflops)
Bottom Pressure:
FR32=2
FR32X=2
  Ready @0c
  BotQ.A TopLatency SU(8) 20c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %124:fr64 = DIVSDrr %124:fr64(tied-def 0), %123:fr64
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %124
  UpdateRegP: SU(7) %124:fr64 = DIVSDrr %124:fr64(tied-def 0), %123:fr64
              to 
  LiveReg: %123
  UpdateRegP: SU(7) %124:fr64 = DIVSDrr %124:fr64(tied-def 0), %123:fr64
              to FR32 -1    FR32X -1
  Ready @10c
  BotQ.A BotLatency SU(7) 10c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %123:fr64 = MULSDrr %123:fr64(tied-def 0), %122:fr64
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %123
  UpdateRegP: SU(6) %123:fr64 = MULSDrr %123:fr64(tied-def 0), %122:fr64
              to FR32 -1    FR32X -1
  Ready @11c
  BotQ.A BotLatency SU(6) 11c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 4 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %123:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=2
FR32X=2
  Ready @15c
  BotQ.A BotLatency SU(5) 15c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %122:fr64 = MOVSDrm_alt %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @15c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %124:fr64 = MULSDrm %124:fr64(tied-def 0), %stack.11.nelt_tot, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nelt_tot)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %124
  UpdateRegP: SU(3) %124:fr64 = MULSDrm %124:fr64(tied-def 0), %stack.11.nelt_tot, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nelt_tot)
              to FR32 -1    FR32X -1
  Ready @14c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %124:fr64 = CVTSI2SDrr %119:gr32
Bottom Pressure:
GR16=2
  LiveReg: %119
  UpdateRegP: SU(2) %124:fr64 = CVTSI2SDrr %119:gr32
              to FR32 -1    FR32X -1
  Ready @15c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %119:gr32 = ADD32ri8 %119:gr32(tied-def 0), 125, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %119
  UpdateRegP: SU(1) %119:gr32 = ADD32ri8 %119:gr32(tied-def 0), 125, implicit-def dead $eflags
              to GR16 -2
  Ready @16c
  BotQ.A BotLatency SU(1) 16c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %119:gr32 = IMUL32rmi8 $rip, 1, $noreg, @nmxh, $noreg, 125, implicit-def dead $eflags :: (dereferenceable load 4 from @nmxh)
Bottom Pressure:

  Ready @20c
  BotQ.A BotLatency SU(0) 20c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   %119:gr32 = IMUL32rmi8 $rip, 1, $noreg, @nmxh, $noreg, 125, implicit-def dead $eflags :: (dereferenceable load 4 from @nmxh)
SU(1):   %119:gr32 = ADD32ri8 %119:gr32(tied-def 0), 125, implicit-def dead $eflags
SU(2):   %124:fr64 = CVTSI2SDrr %119:gr32
SU(3):   %124:fr64 = MULSDrm %124:fr64(tied-def 0), %stack.11.nelt_tot, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nelt_tot)
SU(4):   %122:fr64 = MOVSDrm_alt %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
SU(5):   %123:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
SU(6):   %123:fr64 = MULSDrr %123:fr64(tied-def 0), %122:fr64
SU(7):   %124:fr64 = DIVSDrr %124:fr64(tied-def 0), %123:fr64
SU(8):   MOVSDmr %stack.9.mflops, 1, $noreg, 0, $noreg, %124:fr64 :: (store 8 into %ir.mflops)
SU(9):   %125:gr32 = MOVSX32rm8 %stack.12.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
SU(10):   %127:gr32 = MOV32rm $rip, 1, $noreg, @niter, $noreg :: (dereferenceable load 4 from @niter)
SU(11):   %128:gr32 = MOV32rm %stack.14.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)

********** MI Scheduling **********
main:%bb.65 for.end170
  From: $rdi = LEA64r %stack.12.Class, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r %stack.12.Class, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r %stack.14.verified, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r %stack.14.verified, 1, $noreg, 0, $noreg
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r %stack.12.Class, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   $rdi = LEA64r %stack.12.Class, 1, $noreg, 0, $noreg
SU(1):   $rsi = LEA64r %stack.14.verified, 1, $noreg, 0, $noreg

********** MI Scheduling **********
main:%bb.65 for.end170
  From: %115:fr64 = COPY killed $xmm0
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %115:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%115
  Single Issue       : false;
SU(1):   MOVSDmr %stack.10.tmax, 1, $noreg, 0, $noreg, %115:fr64 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%115
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.10.tmax, 1, $noreg, 0, $noreg, %115:fr64 :: (store 8 into %ir.tmax)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %115:fr64 = COPY killed $xmm0
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   %115:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr %stack.10.tmax, 1, $noreg, 0, $noreg, %115:fr64 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.66 if.then179
  From: %143:gr32 = MOV32ri 1
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %143:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%143
  Single Issue       : false;
SU(1):   MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %143:gr32 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%143
  Single Issue       : false;
SU(2):   %191:gr64 = LEA64r %stack.16.trecs, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %191:gr64 = LEA64r %stack.16.trecs, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %143:gr32 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %143:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   %143:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %143:gr32 :: (store 4 into %ir.i)
SU(2):   %191:gr64 = LEA64r %stack.16.trecs, 1, $noreg, 0, $noreg

********** MI Scheduling **********
main:%bb.68 for.body183
  From: %189:fr64 = COPY killed $xmm0
    To: JMP_1 %bb.67
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %189:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%189
  Single Issue       : false;
SU(1):   %190:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%190
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %191:gr64, 8, %190:gr64_nosp, 0, $noreg, %189:fr64 :: (store 8 into %ir.arrayidx186)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%190
    SU(0): Data Latency=0 Reg=%189
  Single Issue       : false;
SU(3):   INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.67
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %191:gr64, 8, %190:gr64_nosp, 0, $noreg, %189:fr64 :: (store 8 into %ir.arrayidx186)
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) %190:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %189:fr64 = COPY killed $xmm0
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.68 ***
SU(0):   %189:fr64 = COPY killed $xmm0
SU(1):   %190:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(2):   MOVSDmr %191:gr64, 8, %190:gr64_nosp, 0, $noreg, %189:fr64 :: (store 8 into %ir.arrayidx186)
SU(3):   INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
main:%bb.69 for.end189
  From: %146:fr64 = MOVSDrm_alt %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
    To: JCC_1 %bb.71, 5, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %146:fr64 = MOVSDrm_alt %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%146
  Single Issue       : false;
SU(1):   %147:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%147
  Single Issue       : false;
SU(2):   UCOMISDrr %146:fr64, %147:fr64, implicit-def $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%147
    SU(0): Data Latency=4 Reg=%146
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.71, 5, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) UCOMISDrr %146:fr64, %147:fr64, implicit-def $eflags
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %147:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %146:fr64 = MOVSDrm_alt %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.69 ***
SU(0):   %146:fr64 = MOVSDrm_alt %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
SU(1):   %147:fr64 = FsFLD0SD
SU(2):   UCOMISDrr %146:fr64, %147:fr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.70 if.then192
  From: %148:gr64 = MOV64ri 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %148:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%148
  Single Issue       : false;
SU(1):   MOV64mr %stack.10.tmax, 1, $noreg, 0, $noreg, %148:gr64 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%148
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.10.tmax, 1, $noreg, 0, $noreg, %148:gr64 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %148:gr64 = MOV64ri 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.70 ***
SU(0):   %148:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr %stack.10.tmax, 1, $noreg, 0, $noreg, %148:gr64 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.71 if.end193
  From: %153:gr32 = MOV32ri 1
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %153:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%153
  Single Issue       : false;
SU(1):   MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %153:gr32 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%153
  Single Issue       : false;
SU(2):   %158:gr64 = LEA64r %stack.17.t_names, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %160:gr64 = LEA64r %stack.16.trecs, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %291:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %291:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %160:gr64 = LEA64r %stack.16.trecs, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %158:gr64 = LEA64r %stack.17.t_names, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %153:gr32 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %153:gr32 = MOV32ri 1
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.71 ***
SU(0):   %153:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %153:gr32 :: (store 4 into %ir.i)
SU(2):   %158:gr64 = LEA64r %stack.17.t_names, 1, $noreg, 0, $noreg
SU(3):   %160:gr64 = LEA64r %stack.16.trecs, 1, $noreg, 0, $noreg
SU(4):   %291:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
main:%bb.71 if.end193
  From: $rdi = LEA64r $rip, 1, $noreg, @ua__str_34___SECTION_, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_34___SECTION_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ua__str_34___SECTION_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.71 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_34___SECTION_, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.73 for.body198
  From: $rdi = LEA64r $rip, 1, $noreg, @ua__str_35_____10s__9, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_35_____10s__9, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %159:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %161:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %163:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %163:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm0 = COPY %161:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rsi = COPY %159:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ua__str_35_____10s__9, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_35_____10s__9, $noreg
SU(1):   $rsi = COPY %159:gr64
SU(2):   $xmm0 = COPY %161:fr64
SU(3):   $xmm1 = COPY %163:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.73 for.body198
  From: %157:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %157:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%157
    SU(1): Data Latency=4 Reg=%157
  Single Issue       : false;
SU(1):   %159:gr64 = MOV64rm %158:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx200)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%157
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %161:fr64 = MOVSDrm_alt %160:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx204)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%157
  Successors:
    SU(3): Data Latency=4 Reg=%161
  Single Issue       : false;
SU(3):   %163:fr64 = COPY %161:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%161
  Successors:
    SU(4): Data Latency=0 Reg=%163
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %163:fr64 = MULSDrr %163:fr64(tied-def 0), %291:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%163
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%163
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %163:fr64 = DIVSDrm %163:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%163
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %163:fr64 = DIVSDrm %163:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %163:fr64 = MULSDrr %163:fr64(tied-def 0), %291:fr64
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %163:fr64 = COPY %161:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %161:fr64 = MOVSDrm_alt %160:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx204)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %159:gr64 = MOV64rm %158:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx200)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %157:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   %157:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   %159:gr64 = MOV64rm %158:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx200)
SU(2):   %161:fr64 = MOVSDrm_alt %160:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx204)
SU(3):   %163:fr64 = COPY %161:fr64
SU(4):   %163:fr64 = MULSDrr %163:fr64(tied-def 0), %291:fr64
SU(5):   %163:fr64 = DIVSDrm %163:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.74 if.then210
  From: $rdi = LEA64r $rip, 1, $noreg, @ua__str_36__________1, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_36__________1, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_37_sub_convec, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %181:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %183:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %183:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %181:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @ua__str_37_sub_convec, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ua__str_36__________1, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.74 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_36__________1, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_37_sub_convec, $noreg
SU(2):   $xmm0 = COPY %181:fr64
SU(3):   $xmm1 = COPY %183:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.74 if.then210
  From: %181:fr64 = MOVSDrm_alt %stack.16.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx211)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %181:fr64 = MOVSDrm_alt %stack.16.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx211)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(1): Data Latency=4 Reg=%181
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %181:fr64 = SUBSDrm %181:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%181
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%181
    SU(2): Data Latency=4 Reg=%181
  Single Issue       : false;
SU(2):   MOVSDmr %stack.15.t2, 1, $noreg, 0, $noreg, %181:fr64 :: (store 8 into %ir.t2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%181
  Single Issue       : false;
SU(3):   %183:fr64 = COPY %181:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%181
  Successors:
    SU(4): Data Latency=0 Reg=%183
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %183:fr64 = MULSDrr %183:fr64(tied-def 0), %291:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%183
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%183
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %183:fr64 = DIVSDrm %183:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%183
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %183:fr64 = DIVSDrm %183:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %183:fr64 = MULSDrr %183:fr64(tied-def 0), %291:fr64
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %183:fr64 = COPY %181:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.15.t2, 1, $noreg, 0, $noreg, %181:fr64 :: (store 8 into %ir.t2)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %181:fr64 = SUBSDrm %181:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %181:fr64 = MOVSDrm_alt %stack.16.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx211)
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.74 ***
SU(0):   %181:fr64 = MOVSDrm_alt %stack.16.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx211)
SU(1):   %181:fr64 = SUBSDrm %181:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
SU(2):   MOVSDmr %stack.15.t2, 1, $noreg, 0, $noreg, %181:fr64 :: (store 8 into %ir.t2)
SU(3):   %183:fr64 = COPY %181:fr64
SU(4):   %183:fr64 = MULSDrr %183:fr64(tied-def 0), %291:fr64
SU(5):   %183:fr64 = DIVSDrm %183:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.76 if.then220
  From: $rdi = LEA64r $rip, 1, $noreg, @ua__str_36__________1, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_36__________1, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_38_sub_diffus, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %173:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %175:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %175:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %173:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @ua__str_38_sub_diffus, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ua__str_36__________1, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.76 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ua__str_36__________1, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ua__str_38_sub_diffus, $noreg
SU(2):   $xmm0 = COPY %173:fr64
SU(3):   $xmm1 = COPY %175:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.76 if.then220
  From: %173:fr64 = MOVSDrm_alt %stack.16.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx221)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %173:fr64 = MOVSDrm_alt %stack.16.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx221)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%173
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %173:fr64 = SUBSDrm %173:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 48, $noreg :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%173
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%173
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %173:fr64 = SUBSDrm %173:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 56, $noreg :: (dereferenceable load 8 from %ir.arrayidx224)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%173
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%173
    SU(3): Data Latency=4 Reg=%173
  Single Issue       : false;
SU(3):   MOVSDmr %stack.15.t2, 1, $noreg, 0, $noreg, %173:fr64 :: (store 8 into %ir.t2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%173
  Single Issue       : false;
SU(4):   %175:fr64 = COPY %173:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%173
  Successors:
    SU(5): Data Latency=0 Reg=%175
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %175:fr64 = MULSDrr %175:fr64(tied-def 0), %291:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(4): Data Latency=0 Reg=%175
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%175
    SU(6): Out  Latency=0
  Single Issue       : false;
SU(6):   %175:fr64 = DIVSDrm %175:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%175
    SU(5): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %175:fr64 = DIVSDrm %175:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(6) 13c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %175:fr64 = MULSDrr %175:fr64(tied-def 0), %291:fr64
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %175:fr64 = COPY %173:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.15.t2, 1, $noreg, 0, $noreg, %173:fr64 :: (store 8 into %ir.t2)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %173:fr64 = SUBSDrm %173:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 56, $noreg :: (dereferenceable load 8 from %ir.arrayidx224)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %173:fr64 = SUBSDrm %173:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 48, $noreg :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %173:fr64 = MOVSDrm_alt %stack.16.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx221)
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.76 ***
SU(0):   %173:fr64 = MOVSDrm_alt %stack.16.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx221)
SU(1):   %173:fr64 = SUBSDrm %173:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 48, $noreg :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
SU(2):   %173:fr64 = SUBSDrm %173:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 56, $noreg :: (dereferenceable load 8 from %ir.arrayidx224)
SU(3):   MOVSDmr %stack.15.t2, 1, $noreg, 0, $noreg, %173:fr64 :: (store 8 into %ir.t2)
SU(4):   %175:fr64 = COPY %173:fr64
SU(5):   %175:fr64 = MULSDrr %175:fr64(tied-def 0), %291:fr64
SU(6):   %175:fr64 = DIVSDrm %175:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** INTERVALS **********
AH [208r,288r:45)[784r,784d:43)[1008r,1008d:18)[1024r,1024d:42)[1184r,1264r:44)[1440r,1440d:5)[1456r,1456d:40)[1648r,1648d:4)[1664r,1744r:39)[1840r,1920r:38)[2144r,2144d:3)[2160r,2240r:37)[2336r,2416r:36)[2640r,2640d:2)[2656r,2736r:35)[2832r,2912r:34)[3136r,3136d:1)[3152r,3232r:33)[3328r,3328d:32)[3520r,3520d:0)[3536r,3536d:41)[4128r,4128d:10)[4144r,4144d:31)[4304r,4304d:9)[4320r,4320d:30)[4544r,4544d:29)[4704r,4704d:8)[4720r,4720d:28)[4896r,4896d:27)[4992r,4992d:7)[5632r,5632d:17)[6192r,6192d:16)[6304r,6304d:15)[6416r,6416d:14)[6528r,6528d:13)[6656r,6656d:12)[6768r,6768d:11)[12352r,12368r:22)[12368r,12384r:21)[12384r,12392r:20)[14896r,14896d:6)[14912r,14912d:26)[15440r,15440d:25)[15808r,15808d:23)[16240r,16240d:24)[16400r,16416r:19)  0@3520r 1@3136r 2@2640r 3@2144r 4@1648r 5@1440r 6@14896r 7@4992r 8@4704r 9@4304r 10@4128r 11@6768r 12@6656r 13@6528r 14@6416r 15@6304r 16@6192r 17@5632r 18@1008r 19@16400r 20@12384r 21@12368r 22@12352r 23@15808r 24@16240r 25@15440r 26@14912r 27@4896r 28@4720r 29@4544r 30@4320r 31@4144r 32@3328r 33@3152r 34@2832r 35@2656r 36@2336r 37@2160r 38@1840r 39@1664r 40@1456r 41@3536r 42@1024r 43@784r 44@1184r 45@208r
AL [208r,288r:50)[784r,784d:48)[1008r,1024r:18)[1024r,1024d:47)[1184r,1264r:49)[1440r,1456r:5)[1456r,1456d:45)[1648r,1664r:4)[1664r,1744r:44)[1840r,1920r:43)[2144r,2160r:3)[2160r,2240r:42)[2336r,2416r:41)[2640r,2656r:2)[2656r,2736r:40)[2832r,2912r:39)[3136r,3152r:1)[3152r,3232r:38)[3328r,3328d:37)[3520r,3536r:0)[3536r,3536d:46)[4128r,4144r:10)[4144r,4144d:36)[4304r,4320r:9)[4320r,4320d:35)[4528r,4544r:20)[4544r,4544d:34)[4704r,4720r:8)[4720r,4720d:33)[4880r,4896r:19)[4896r,4896d:32)[4992r,5008r:7)[5632r,5648r:17)[6192r,6208r:16)[6304r,6320r:15)[6416r,6432r:14)[6528r,6544r:13)[6656r,6672r:12)[6768r,6784r:11)[12352r,12368r:27)[12368r,12384r:26)[12384r,12392r:25)[14896r,14912r:6)[14912r,14912d:31)[15424r,15440r:23)[15440r,15440d:30)[15792r,15808r:22)[15808r,15808d:28)[16224r,16240r:21)[16240r,16240d:29)[16400r,16416r:24)  0@3520r 1@3136r 2@2640r 3@2144r 4@1648r 5@1440r 6@14896r 7@4992r 8@4704r 9@4304r 10@4128r 11@6768r 12@6656r 13@6528r 14@6416r 15@6304r 16@6192r 17@5632r 18@1008r 19@4880r 20@4528r 21@16224r 22@15792r 23@15424r 24@16400r 25@12384r 26@12368r 27@12352r 28@15808r 29@16240r 30@15440r 31@14912r 32@4896r 33@4720r 34@4544r 35@4320r 36@4144r 37@3328r 38@3152r 39@2832r 40@2656r 41@2336r 42@2160r 43@1840r 44@1664r 45@1456r 46@3536r 47@1024r 48@784r 49@1184r 50@208r
DIL [0B,32r:0)[176r,208r:51)[768r,784r:50)[992r,1024r:49)[1152r,1184r:48)[1424r,1456r:46)[1640r,1664r:45)[1824r,1840r:44)[2136r,2160r:43)[2320r,2336r:42)[2632r,2656r:41)[2816r,2832r:40)[3128r,3152r:39)[3312r,3328r:38)[3504r,3536r:47)[4096r,4144r:37)[4272r,4320r:36)[4480r,4544r:35)[4672r,4720r:34)[4848r,4896r:33)[5232r,5248r:1)[5472r,5488r:15)[5792r,5840r:32)[6048r,6096r:31)[6896r,6928r:30)[7104r,7120r:14)[7248r,7264r:13)[7840r,7888r:23)[8192r,8208r:2)[8368r,8384r:9)[8512r,8528r:8)[8688r,8704r:7)[8816r,8848r:22)[9176r,9216r:16)[10368r,10400r:21)[10560r,10576r:6)[11156r,11168r:17)[11392r,11440r:20)[11552r,11568r:5)[11728r,11744r:4)[11872r,11920r:19)[12080r,12096r:3)[12624r,12656r:18)[12944r,12960r:12)[13056r,13072r:11)[13232r,13264r:29)[14032r,14160r:28)[14464r,14480r:10)[14880r,14912r:27)[15360r,15440r:26)[15728r,15808r:24)[16160r,16240r:25)  0@0B-phi 1@5232r 2@8192r 3@12080r 4@11728r 5@11552r 6@10560r 7@8688r 8@8512r 9@8368r 10@14464r 11@13056r 12@12944r 13@7248r 14@7104r 15@5472r 16@9176r 17@11156r 18@12624r 19@11872r 20@11392r 21@10368r 22@8816r 23@7840r 24@15728r 25@16160r 26@15360r 27@14880r 28@14032r 29@13232r 30@6896r 31@6048r 32@5792r 33@4848r 34@4672r 35@4480r 36@4272r 37@4096r 38@3312r 39@3128r 40@2816r 41@2632r 42@2320r 43@2136r 44@1824r 45@1640r 46@1424r 47@3504r 48@1152r 49@992r 50@768r 51@176r
DIH [0B,32r:0)[176r,208r:51)[768r,784r:50)[992r,1024r:49)[1152r,1184r:48)[1424r,1456r:46)[1640r,1664r:45)[1824r,1840r:44)[2136r,2160r:43)[2320r,2336r:42)[2632r,2656r:41)[2816r,2832r:40)[3128r,3152r:39)[3312r,3328r:38)[3504r,3536r:47)[4096r,4144r:37)[4272r,4320r:36)[4480r,4544r:35)[4672r,4720r:34)[4848r,4896r:33)[5232r,5248r:1)[5472r,5488r:15)[5792r,5840r:32)[6048r,6096r:31)[6896r,6928r:30)[7104r,7120r:14)[7248r,7264r:13)[7840r,7888r:23)[8192r,8208r:2)[8368r,8384r:9)[8512r,8528r:8)[8688r,8704r:7)[8816r,8848r:22)[9176r,9216r:16)[10368r,10400r:21)[10560r,10576r:6)[11156r,11168r:17)[11392r,11440r:20)[11552r,11568r:5)[11728r,11744r:4)[11872r,11920r:19)[12080r,12096r:3)[12624r,12656r:18)[12944r,12960r:12)[13056r,13072r:11)[13232r,13264r:29)[14032r,14160r:28)[14464r,14480r:10)[14880r,14912r:27)[15360r,15440r:26)[15728r,15808r:24)[16160r,16240r:25)  0@0B-phi 1@5232r 2@8192r 3@12080r 4@11728r 5@11552r 6@10560r 7@8688r 8@8512r 9@8368r 10@14464r 11@13056r 12@12944r 13@7248r 14@7104r 15@5472r 16@9176r 17@11156r 18@12624r 19@11872r 20@11392r 21@10368r 22@8816r 23@7840r 24@15728r 25@16160r 26@15360r 27@14880r 28@14032r 29@13232r 30@6896r 31@6048r 32@5792r 33@4848r 34@4672r 35@4480r 36@4272r 37@4096r 38@3312r 39@3128r 40@2816r 41@2632r 42@2320r 43@2136r 44@1824r 45@1640r 46@1424r 47@3504r 48@1152r 49@992r 50@768r 51@176r
HAX [208r,288r:45)[784r,784d:43)[1008r,1008d:18)[1024r,1024d:42)[1184r,1264r:44)[1440r,1440d:5)[1456r,1456d:40)[1648r,1648d:4)[1664r,1744r:39)[1840r,1920r:38)[2144r,2144d:3)[2160r,2240r:37)[2336r,2416r:36)[2640r,2640d:2)[2656r,2736r:35)[2832r,2912r:34)[3136r,3136d:1)[3152r,3232r:33)[3328r,3328d:32)[3520r,3520d:0)[3536r,3536d:41)[4128r,4128d:10)[4144r,4144d:31)[4304r,4304d:9)[4320r,4320d:30)[4544r,4544d:29)[4704r,4704d:8)[4720r,4720d:28)[4896r,4896d:27)[4992r,4992d:7)[5632r,5632d:17)[6192r,6192d:16)[6304r,6304d:15)[6416r,6416d:14)[6528r,6528d:13)[6656r,6656d:12)[6768r,6768d:11)[12352r,12368r:22)[12368r,12384r:21)[12384r,12392r:20)[14896r,14896d:6)[14912r,14912d:26)[15440r,15440d:25)[15808r,15808d:23)[16240r,16240d:24)[16400r,16416r:19)  0@3520r 1@3136r 2@2640r 3@2144r 4@1648r 5@1440r 6@14896r 7@4992r 8@4704r 9@4304r 10@4128r 11@6768r 12@6656r 13@6528r 14@6416r 15@6304r 16@6192r 17@5632r 18@1008r 19@16400r 20@12384r 21@12368r 22@12352r 23@15808r 24@16240r 25@15440r 26@14912r 27@4896r 28@4720r 29@4544r 30@4320r 31@4144r 32@3328r 33@3152r 34@2832r 35@2656r 36@2336r 37@2160r 38@1840r 39@1664r 40@1456r 41@3536r 42@1024r 43@784r 44@1184r 45@208r
HDI [0B,32r:0)[176r,208r:51)[768r,784r:50)[992r,1024r:49)[1152r,1184r:48)[1424r,1456r:46)[1640r,1664r:45)[1824r,1840r:44)[2136r,2160r:43)[2320r,2336r:42)[2632r,2656r:41)[2816r,2832r:40)[3128r,3152r:39)[3312r,3328r:38)[3504r,3536r:47)[4096r,4144r:37)[4272r,4320r:36)[4480r,4544r:35)[4672r,4720r:34)[4848r,4896r:33)[5232r,5248r:1)[5472r,5488r:15)[5792r,5840r:32)[6048r,6096r:31)[6896r,6928r:30)[7104r,7120r:14)[7248r,7264r:13)[7840r,7888r:23)[8192r,8208r:2)[8368r,8384r:9)[8512r,8528r:8)[8688r,8704r:7)[8816r,8848r:22)[9176r,9216r:16)[10368r,10400r:21)[10560r,10576r:6)[11156r,11168r:17)[11392r,11440r:20)[11552r,11568r:5)[11728r,11744r:4)[11872r,11920r:19)[12080r,12096r:3)[12624r,12656r:18)[12944r,12960r:12)[13056r,13072r:11)[13232r,13264r:29)[14032r,14160r:28)[14464r,14480r:10)[14880r,14912r:27)[15360r,15440r:26)[15728r,15808r:24)[16160r,16240r:25)  0@0B-phi 1@5232r 2@8192r 3@12080r 4@11728r 5@11552r 6@10560r 7@8688r 8@8512r 9@8368r 10@14464r 11@13056r 12@12944r 13@7248r 14@7104r 15@5472r 16@9176r 17@11156r 18@12624r 19@11872r 20@11392r 21@10368r 22@8816r 23@7840r 24@15728r 25@16160r 26@15360r 27@14880r 28@14032r 29@13232r 30@6896r 31@6048r 32@5792r 33@4848r 34@4672r 35@4480r 36@4272r 37@4096r 38@3312r 39@3128r 40@2816r 41@2632r 42@2320r 43@2136r 44@1824r 45@1640r 46@1424r 47@3504r 48@1152r 49@992r 50@768r 51@176r
EFLAGS [128r,128d:324)[224r,224d:323)[240r,240d:322)[272r,272d:321)[320r,336r:320)[752r,752d:319)[800r,800d:318)[816r,816d:317)[848r,848d:316)[928r,928d:315)[1008r,1008d:18)[1040r,1040d:314)[1056r,1056d:313)[1088r,1088d:312)[1104r,1104d:311)[1200r,1200d:310)[1216r,1216d:309)[1248r,1248d:308)[1296r,1312r:307)[1360r,1360d:302)[1440r,1440d:5)[1472r,1472d:301)[1488r,1488d:300)[1520r,1520d:299)[1552r,1552d:298)[1648r,1648d:4)[1680r,1680d:297)[1696r,1696d:296)[1728r,1728d:295)[1808r,1808d:294)[1856r,1856d:293)[1872r,1872d:292)[1904r,1904d:291)[1936r,1952r:290)[2016r,2016d:289)[2144r,2144d:3)[2176r,2176d:288)[2192r,2192d:287)[2224r,2224d:286)[2304r,2304d:285)[2352r,2352d:284)[2368r,2368d:283)[2400r,2400d:282)[2432r,2448r:281)[2512r,2512d:280)[2640r,2640d:2)[2672r,2672d:279)[2688r,2688d:278)[2720r,2720d:277)[2800r,2800d:276)[2848r,2848d:275)[2864r,2864d:274)[2896r,2896d:273)[2928r,2944r:272)[3008r,3008d:271)[3136r,3136d:1)[3168r,3168d:270)[3184r,3184d:269)[3216r,3216d:268)[3296r,3296d:267)[3344r,3344d:266)[3360r,3360d:265)[3392r,3392d:264)[3440r,3440d:306)[3520r,3520d:0)[3552r,3552d:305)[3568r,3568d:304)[3600r,3600d:303)[3776r,3776d:263)[3872r,3872d:262)[3888r,3888d:261)[3920r,3920d:260)[4016r,4016d:259)[4128r,4128d:10)[4160r,4160d:258)[4176r,4176d:257)[4208r,4208d:256)[4240r,4240d:255)[4304r,4304d:9)[4336r,4336d:254)[4352r,4352d:253)[4384r,4384d:252)[4432r,4432d:251)[4560r,4560d:250)[4576r,4576d:249)[4608r,4608d:248)[4640r,4640d:247)[4704r,4704d:8)[4736r,4736d:246)[4752r,4752d:245)[4784r,4784d:244)[4816r,4816d:243)[4912r,4912d:242)[4928r,4928d:241)[4960r,4960d:240)[4976r,4976d:239)[4992r,4992d:7)[5024r,5024d:238)[5040r,5040d:237)[5072r,5072d:236)[5136r,5152r:33)[5216r,5216d:38)[5264r,5264d:37)[5280r,5280d:36)[5312r,5312d:35)[5328r,5328d:34)[5376r,5392r:235)[5440r,5440d:234)[5504r,5504d:233)[5520r,5520d:232)[5552r,5552d:231)[5584r,5584d:230)[5632r,5632d:17)[5664r,5664d:229)[5680r,5680d:228)[5712r,5712d:227)[5744r,5744d:226)[5856r,5856d:225)[5872r,5872d:224)[5904r,5904d:223)[5952r,5952d:222)[6000r,6000d:221)[6112r,6112d:220)[6128r,6128d:219)[6160r,6160d:218)[6176r,6176d:217)[6192r,6192d:16)[6224r,6224d:216)[6240r,6240d:215)[6272r,6272d:214)[6288r,6288d:213)[6304r,6304d:15)[6336r,6336d:212)[6352r,6352d:211)[6384r,6384d:210)[6400r,6400d:209)[6416r,6416d:14)[6448r,6448d:208)[6464r,6464d:207)[6496r,6496d:206)[6512r,6512d:205)[6528r,6528d:13)[6560r,6560d:204)[6576r,6576d:203)[6608r,6608d:202)[6640r,6640d:201)[6656r,6656d:12)[6688r,6688d:200)[6704r,6704d:199)[6736r,6736d:198)[6752r,6752d:197)[6768r,6768d:11)[6800r,6800d:196)[6816r,6816d:195)[6848r,6848d:194)[6864r,6864d:193)[6912r,6912d:21)[6944r,6944d:192)[6960r,6960d:191)[6992r,6992d:190)[7008r,7024r:189)[7072r,7072d:188)[7136r,7136d:187)[7152r,7152d:186)[7184r,7184d:185)[7216r,7216d:184)[7280r,7280d:183)[7296r,7296d:182)[7328r,7328d:181)[7408r,7408d:133)[7680r,7696r:180)[7744r,7760r:32)[7824r,7824d:137)[7904r,7904d:136)[7920r,7920d:135)[7952r,7952d:134)[8032r,8048r:31)[8096r,8112r:30)[8176r,8176d:43)[8224r,8224d:42)[8240r,8240d:41)[8272r,8272d:40)[8304r,8304d:39)[8352r,8352d:132)[8400r,8400d:131)[8416r,8416d:130)[8448r,8448d:129)[8496r,8496d:128)[8544r,8544d:127)[8560r,8560d:126)[8592r,8592d:125)[8608r,8624r:124)[8672r,8672d:123)[8720r,8720d:122)[8736r,8736d:121)[8768r,8768d:120)[8800r,8800d:119)[8864r,8864d:118)[8880r,8880d:117)[8912r,8912d:116)[8976r,8992r:115)[9144r,9144d:50)[9160r,9160d:49)[9168r,9168d:48)[9232r,9232d:47)[9248r,9248d:46)[9280r,9280d:45)[9296r,9296d:44)[9392r,9408r:114)[9488r,9504r:29)[9584r,9600r:28)[9680r,9696r:27)[9776r,9776d:59)[9840r,9840d:58)[9872r,9872d:57)[9920r,9920d:56)[9968r,9968d:55)[10032r,10032d:54)[10064r,10064d:53)[10096r,10096d:52)[10160r,10160d:51)[10208r,10208d:60)[10256r,10256d:61)[10304r,10304d:62)[10352r,10352d:113)[10416r,10416d:112)[10432r,10432d:111)[10464r,10464d:110)[10480r,10496r:109)[10544r,10544d:108)[10592r,10592d:107)[10608r,10608d:106)[10640r,10640d:105)[10720r,10736r:104)[10816r,10832r:26)[10944r,10960r:70)[11040r,11040d:69)[11072r,11072d:68)[11104r,11104d:67)[11184r,11184d:66)[11200r,11200d:65)[11232r,11232d:64)[11264r,11264d:63)[11312r,11312d:71)[11376r,11376d:103)[11456r,11456d:102)[11472r,11472d:101)[11504r,11504d:100)[11536r,11536d:99)[11584r,11584d:98)[11600r,11600d:97)[11632r,11632d:96)[11648r,11664r:95)[11712r,11712d:94)[11760r,11760d:93)[11776r,11776d:92)[11808r,11808d:91)[11856r,11856d:90)[11936r,11936d:89)[11952r,11952d:88)[11984r,11984d:87)[12000r,12016r:86)[12064r,12064d:85)[12112r,12112d:84)[12128r,12128d:83)[12160r,12160d:82)[12256r,12272r:81)[12384r,12384d:80)[12432r,12432d:79)[12448r,12464r:78)[12528r,12544r:77)[12608r,12608d:76)[12672r,12672d:75)[12688r,12688d:74)[12720r,12720d:73)[12864r,12864d:72)[12912r,12912d:179)[12976r,12976d:178)[12992r,12992d:177)[13024r,13024d:176)[13040r,13040d:175)[13088r,13088d:174)[13104r,13104d:173)[13136r,13136d:172)[13184r,13184d:171)[13280r,13280d:170)[13296r,13296d:169)[13328r,13328d:168)[13344r,13344d:167)[13376r,13376d:166)[13616r,13616d:165)[14096r,14096d:20)[14176r,14176d:164)[14192r,14192d:163)[14224r,14224d:162)[14240r,14256r:161)[14368r,14384r:25)[14448r,14448d:142)[14496r,14496d:141)[14512r,14512d:140)[14544r,14544d:139)[14608r,14608d:138)[14688r,14720r:160)[14816r,14816d:159)[14896r,14896d:6)[14928r,14928d:158)[14944r,14944d:157)[14976r,14976d:156)[15168r,15184r:24)[15344r,15344d:155)[15456r,15456d:154)[15472r,15472d:153)[15504r,15504d:152)[15520r,15536r:23)[15712r,15712d:147)[15824r,15824d:146)[15840r,15840d:145)[15872r,15872d:144)[15920r,15936r:22)[16144r,16144d:151)[16256r,16256d:150)[16272r,16272d:149)[16304r,16304d:148)[16336r,16336d:143)[16400r,16400d:19)  0@3520r 1@3136r 2@2640r 3@2144r 4@1648r 5@1440r 6@14896r 7@4992r 8@4704r 9@4304r 10@4128r 11@6768r 12@6656r 13@6528r 14@6416r 15@6304r 16@6192r 17@5632r 18@1008r 19@16400r 20@14096r 21@6912r 22@15920r 23@15520r 24@15168r 25@14368r 26@10816r 27@9680r 28@9584r 29@9488r 30@8096r 31@8032r 32@7744r 33@5136r 34@5328r 35@5312r 36@5280r 37@5264r 38@5216r 39@8304r 40@8272r 41@8240r 42@8224r 43@8176r 44@9296r 45@9280r 46@9248r 47@9232r 48@9168r 49@9160r 50@9144r 51@10160r 52@10096r 53@10064r 54@10032r 55@9968r 56@9920r 57@9872r 58@9840r 59@9776r 60@10208r 61@10256r 62@10304r 63@11264r 64@11232r 65@11200r 66@11184r 67@11104r 68@11072r 69@11040r 70@10944r 71@11312r 72@12864r 73@12720r 74@12688r 75@12672r 76@12608r 77@12528r 78@12448r 79@12432r 80@12384r 81@12256r 82@12160r 83@12128r 84@12112r 85@12064r 86@12000r 87@11984r 88@11952r 89@11936r 90@11856r 91@11808r 92@11776r 93@11760r 94@11712r 95@11648r 96@11632r 97@11600r 98@11584r 99@11536r 100@11504r 101@11472r 102@11456r 103@11376r 104@10720r 105@10640r 106@10608r 107@10592r 108@10544r 109@10480r 110@10464r 111@10432r 112@10416r 113@10352r 114@9392r 115@8976r 116@8912r 117@8880r 118@8864r 119@8800r 120@8768r 121@8736r 122@8720r 123@8672r 124@8608r 125@8592r 126@8560r 127@8544r 128@8496r 129@8448r 130@8416r 131@8400r 132@8352r 133@7408r 134@7952r 135@7920r 136@7904r 137@7824r 138@14608r 139@14544r 140@14512r 141@14496r 142@14448r 143@16336r 144@15872r 145@15840r 146@15824r 147@15712r 148@16304r 149@16272r 150@16256r 151@16144r 152@15504r 153@15472r 154@15456r 155@15344r 156@14976r 157@14944r 158@14928r 159@14816r 160@14688r 161@14240r 162@14224r 163@14192r 164@14176r 165@13616r 166@13376r 167@13344r 168@13328r 169@13296r 170@13280r 171@13184r 172@13136r 173@13104r 174@13088r 175@13040r 176@13024r 177@12992r 178@12976r 179@12912r 180@7680r 181@7328r 182@7296r 183@7280r 184@7216r 185@7184r 186@7152r 187@7136r 188@7072r 189@7008r 190@6992r 191@6960r 192@6944r 193@6864r 194@6848r 195@6816r 196@6800r 197@6752r 198@6736r 199@6704r 200@6688r 201@6640r 202@6608r 203@6576r 204@6560r 205@6512r 206@6496r 207@6464r 208@6448r 209@6400r 210@6384r 211@6352r 212@6336r 213@6288r 214@6272r 215@6240r 216@6224r 217@6176r 218@6160r 219@6128r 220@6112r 221@6000r 222@5952r 223@5904r 224@5872r 225@5856r 226@5744r 227@5712r 228@5680r 229@5664r 230@5584r 231@5552r 232@5520r 233@5504r 234@5440r 235@5376r 236@5072r 237@5040r 238@5024r 239@4976r 240@4960r 241@4928r 242@4912r 243@4816r 244@4784r 245@4752r 246@4736r 247@4640r 248@4608r 249@4576r 250@4560r 251@4432r 252@4384r 253@4352r 254@4336r 255@4240r 256@4208r 257@4176r 258@4160r 259@4016r 260@3920r 261@3888r 262@3872r 263@3776r 264@3392r 265@3360r 266@3344r 267@3296r 268@3216r 269@3184r 270@3168r 271@3008r 272@2928r 273@2896r 274@2864r 275@2848r 276@2800r 277@2720r 278@2688r 279@2672r 280@2512r 281@2432r 282@2400r 283@2368r 284@2352r 285@2304r 286@2224r 287@2192r 288@2176r 289@2016r 290@1936r 291@1904r 292@1872r 293@1856r 294@1808r 295@1728r 296@1696r 297@1680r 298@1552r 299@1520r 300@1488r 301@1472r 302@1360r 303@3600r 304@3568r 305@3552r 306@3440r 307@1296r 308@1248r 309@1216r 310@1200r 311@1104r 312@1088r 313@1056r 314@1040r 315@928r 316@848r 317@816r 318@800r 319@752r 320@320r 321@272r 322@240r 323@224r 324@128r
SIL [0B,16r:0)[192r,208r:26)[1168r,1184r:25)[1616r,1664r:24)[2112r,2160r:23)[2608r,2656r:22)[3104r,3152r:21)[4112r,4144r:11)[4288r,4320r:10)[4496r,4544r:9)[4688r,4720r:8)[5832r,5840r:7)[6064r,6096r:6)[6912r,6928r:5)[7880r,7888r:3)[8832r,8848r:16)[9184r,9216r:12)[10384r,10400r:15)[11160r,11168r:1)[11408r,11440r:14)[11888r,11920r:13)[12640r,12656r:2)[13248r,13264r:20)[14048r,14160r:4)[15376r,15440r:19)[15744r,15808r:17)[16176r,16240r:18)  0@0B-phi 1@11160r 2@12640r 3@7880r 4@14048r 5@6912r 6@6064r 7@5832r 8@4688r 9@4496r 10@4288r 11@4112r 12@9184r 13@11888r 14@11408r 15@10384r 16@8832r 17@15744r 18@16176r 19@15376r 20@13248r 21@3104r 22@2608r 23@2112r 24@1616r 25@1168r 26@192r
SIH [0B,16r:0)[192r,208r:26)[1168r,1184r:25)[1616r,1664r:24)[2112r,2160r:23)[2608r,2656r:22)[3104r,3152r:21)[4112r,4144r:11)[4288r,4320r:10)[4496r,4544r:9)[4688r,4720r:8)[5832r,5840r:7)[6064r,6096r:6)[6912r,6928r:5)[7880r,7888r:3)[8832r,8848r:16)[9184r,9216r:12)[10384r,10400r:15)[11160r,11168r:1)[11408r,11440r:14)[11888r,11920r:13)[12640r,12656r:2)[13248r,13264r:20)[14048r,14160r:4)[15376r,15440r:19)[15744r,15808r:17)[16176r,16240r:18)  0@0B-phi 1@11160r 2@12640r 3@7880r 4@14048r 5@6912r 6@6064r 7@5832r 8@4688r 9@4496r 10@4288r 11@4112r 12@9184r 13@11888r 14@11408r 15@10384r 16@8832r 17@15744r 18@16176r 19@15376r 20@13248r 21@3104r 22@2608r 23@2112r 24@1616r 25@1168r 26@192r
HSI [0B,16r:0)[192r,208r:26)[1168r,1184r:25)[1616r,1664r:24)[2112r,2160r:23)[2608r,2656r:22)[3104r,3152r:21)[4112r,4144r:11)[4288r,4320r:10)[4496r,4544r:9)[4688r,4720r:8)[5832r,5840r:7)[6064r,6096r:6)[6912r,6928r:5)[7880r,7888r:3)[8832r,8848r:16)[9184r,9216r:12)[10384r,10400r:15)[11160r,11168r:1)[11408r,11440r:14)[11888r,11920r:13)[12640r,12656r:2)[13248r,13264r:20)[14048r,14160r:4)[15376r,15440r:19)[15744r,15808r:17)[16176r,16240r:18)  0@0B-phi 1@11160r 2@12640r 3@7880r 4@14048r 5@6912r 6@6064r 7@5832r 8@4688r 9@4496r 10@4288r 11@4112r 12@9184r 13@11888r 14@11408r 15@10384r 16@8832r 17@15744r 18@16176r 19@15376r 20@13248r 21@3104r 22@2608r 23@2112r 24@1616r 25@1168r 26@192r
SPL [128r,128d:299)[208r,208d:298)[224r,224d:297)[240r,240d:296)[272r,272d:295)[752r,752d:294)[784r,784d:293)[800r,800d:292)[816r,816d:291)[848r,848d:290)[928r,928d:289)[1024r,1024d:288)[1040r,1040d:287)[1056r,1056d:286)[1088r,1088d:285)[1104r,1104d:284)[1184r,1184d:283)[1200r,1200d:282)[1216r,1216d:281)[1248r,1248d:280)[1360r,1360d:274)[1456r,1456d:273)[1472r,1472d:272)[1488r,1488d:271)[1520r,1520d:270)[1552r,1552d:269)[1664r,1664d:268)[1680r,1680d:267)[1696r,1696d:266)[1728r,1728d:265)[1808r,1808d:264)[1840r,1840d:263)[1856r,1856d:262)[1872r,1872d:261)[1904r,1904d:260)[2016r,2016d:259)[2160r,2160d:258)[2176r,2176d:257)[2192r,2192d:256)[2224r,2224d:255)[2304r,2304d:254)[2336r,2336d:253)[2352r,2352d:252)[2368r,2368d:251)[2400r,2400d:250)[2512r,2512d:249)[2656r,2656d:248)[2672r,2672d:247)[2688r,2688d:246)[2720r,2720d:245)[2800r,2800d:244)[2832r,2832d:243)[2848r,2848d:242)[2864r,2864d:241)[2896r,2896d:240)[3008r,3008d:239)[3152r,3152d:238)[3168r,3168d:237)[3184r,3184d:236)[3216r,3216d:235)[3296r,3296d:234)[3328r,3328d:233)[3344r,3344d:232)[3360r,3360d:231)[3392r,3392d:230)[3440r,3440d:279)[3536r,3536d:278)[3552r,3552d:277)[3568r,3568d:276)[3600r,3600d:275)[3776r,3776d:229)[3856r,3856d:228)[3872r,3872d:227)[3888r,3888d:226)[3920r,3920d:225)[4016r,4016d:224)[4144r,4144d:223)[4160r,4160d:222)[4176r,4176d:221)[4208r,4208d:220)[4240r,4240d:219)[4320r,4320d:218)[4336r,4336d:217)[4352r,4352d:216)[4384r,4384d:215)[4432r,4432d:214)[4544r,4544d:213)[4560r,4560d:212)[4576r,4576d:211)[4608r,4608d:210)[4640r,4640d:209)[4720r,4720d:208)[4736r,4736d:207)[4752r,4752d:206)[4784r,4784d:205)[4816r,4816d:204)[4896r,4896d:203)[4912r,4912d:202)[4928r,4928d:201)[4960r,4960d:200)[4976r,4976d:199)[5008r,5008d:198)[5024r,5024d:197)[5040r,5040d:196)[5072r,5072d:195)[5216r,5216d:4)[5248r,5248d:3)[5264r,5264d:2)[5280r,5280d:1)[5312r,5312d:0)[5440r,5440d:194)[5488r,5488d:193)[5504r,5504d:192)[5520r,5520d:191)[5552r,5552d:190)[5584r,5584d:189)[5648r,5648d:188)[5664r,5664d:187)[5680r,5680d:186)[5712r,5712d:185)[5744r,5744d:184)[5840r,5840d:183)[5856r,5856d:182)[5872r,5872d:181)[5904r,5904d:180)[6000r,6000d:179)[6096r,6096d:178)[6112r,6112d:177)[6128r,6128d:176)[6160r,6160d:175)[6176r,6176d:174)[6208r,6208d:173)[6224r,6224d:172)[6240r,6240d:171)[6272r,6272d:170)[6288r,6288d:169)[6320r,6320d:168)[6336r,6336d:167)[6352r,6352d:166)[6384r,6384d:165)[6400r,6400d:164)[6432r,6432d:163)[6448r,6448d:162)[6464r,6464d:161)[6496r,6496d:160)[6512r,6512d:159)[6544r,6544d:158)[6560r,6560d:157)[6576r,6576d:156)[6608r,6608d:155)[6640r,6640d:154)[6672r,6672d:153)[6688r,6688d:152)[6704r,6704d:151)[6736r,6736d:150)[6752r,6752d:149)[6784r,6784d:148)[6800r,6800d:147)[6816r,6816d:146)[6848r,6848d:145)[6864r,6864d:144)[6928r,6928d:143)[6944r,6944d:142)[6960r,6960d:141)[6992r,6992d:140)[7072r,7072d:139)[7120r,7120d:138)[7136r,7136d:137)[7152r,7152d:136)[7184r,7184d:135)[7216r,7216d:134)[7264r,7264d:133)[7280r,7280d:132)[7296r,7296d:131)[7328r,7328d:130)[7824r,7824d:84)[7888r,7888d:83)[7904r,7904d:82)[7920r,7920d:81)[7952r,7952d:80)[8176r,8176d:9)[8208r,8208d:8)[8224r,8224d:7)[8240r,8240d:6)[8272r,8272d:5)[8352r,8352d:79)[8384r,8384d:78)[8400r,8400d:77)[8416r,8416d:76)[8448r,8448d:75)[8496r,8496d:74)[8528r,8528d:73)[8544r,8544d:72)[8560r,8560d:71)[8592r,8592d:70)[8672r,8672d:69)[8704r,8704d:68)[8720r,8720d:67)[8736r,8736d:66)[8768r,8768d:65)[8800r,8800d:64)[8848r,8848d:63)[8864r,8864d:62)[8880r,8880d:61)[8912r,8912d:60)[9168r,9168d:14)[9216r,9216d:13)[9232r,9232d:12)[9248r,9248d:11)[9280r,9280d:10)[10352r,10352d:59)[10400r,10400d:58)[10416r,10416d:57)[10432r,10432d:56)[10464r,10464d:55)[10544r,10544d:54)[10576r,10576d:53)[10592r,10592d:52)[10608r,10608d:51)[10640r,10640d:50)[11104r,11104d:19)[11168r,11168d:18)[11184r,11184d:17)[11200r,11200d:16)[11232r,11232d:15)[11376r,11376d:49)[11440r,11440d:48)[11456r,11456d:47)[11472r,11472d:46)[11504r,11504d:45)[11536r,11536d:44)[11568r,11568d:43)[11584r,11584d:42)[11600r,11600d:41)[11632r,11632d:40)[11712r,11712d:39)[11744r,11744d:38)[11760r,11760d:37)[11776r,11776d:36)[11808r,11808d:35)[11856r,11856d:34)[11920r,11920d:33)[11936r,11936d:32)[11952r,11952d:31)[11984r,11984d:30)[12064r,12064d:29)[12096r,12096d:28)[12112r,12112d:27)[12128r,12128d:26)[12160r,12160d:25)[12608r,12608d:24)[12656r,12656d:23)[12672r,12672d:22)[12688r,12688d:21)[12720r,12720d:20)[12912r,12912d:129)[12960r,12960d:128)[12976r,12976d:127)[12992r,12992d:126)[13024r,13024d:125)[13040r,13040d:124)[13072r,13072d:123)[13088r,13088d:122)[13104r,13104d:121)[13136r,13136d:120)[13184r,13184d:119)[13264r,13264d:118)[13280r,13280d:117)[13296r,13296d:116)[13328r,13328d:115)[13616r,13616d:114)[14160r,14160d:113)[14176r,14176d:112)[14192r,14192d:111)[14224r,14224d:110)[14448r,14448d:89)[14480r,14480d:88)[14496r,14496d:87)[14512r,14512d:86)[14544r,14544d:85)[14816r,14816d:109)[14912r,14912d:108)[14928r,14928d:107)[14944r,14944d:106)[14976r,14976d:105)[15344r,15344d:104)[15440r,15440d:103)[15456r,15456d:102)[15472r,15472d:101)[15504r,15504d:100)[15712r,15712d:94)[15808r,15808d:93)[15824r,15824d:92)[15840r,15840d:91)[15872r,15872d:90)[16144r,16144d:99)[16240r,16240d:98)[16256r,16256d:97)[16272r,16272d:96)[16304r,16304d:95)  0@5312r 1@5280r 2@5264r 3@5248r 4@5216r 5@8272r 6@8240r 7@8224r 8@8208r 9@8176r 10@9280r 11@9248r 12@9232r 13@9216r 14@9168r 15@11232r 16@11200r 17@11184r 18@11168r 19@11104r 20@12720r 21@12688r 22@12672r 23@12656r 24@12608r 25@12160r 26@12128r 27@12112r 28@12096r 29@12064r 30@11984r 31@11952r 32@11936r 33@11920r 34@11856r 35@11808r 36@11776r 37@11760r 38@11744r 39@11712r 40@11632r 41@11600r 42@11584r 43@11568r 44@11536r 45@11504r 46@11472r 47@11456r 48@11440r 49@11376r 50@10640r 51@10608r 52@10592r 53@10576r 54@10544r 55@10464r 56@10432r 57@10416r 58@10400r 59@10352r 60@8912r 61@8880r 62@8864r 63@8848r 64@8800r 65@8768r 66@8736r 67@8720r 68@8704r 69@8672r 70@8592r 71@8560r 72@8544r 73@8528r 74@8496r 75@8448r 76@8416r 77@8400r 78@8384r 79@8352r 80@7952r 81@7920r 82@7904r 83@7888r 84@7824r 85@14544r 86@14512r 87@14496r 88@14480r 89@14448r 90@15872r 91@15840r 92@15824r 93@15808r 94@15712r 95@16304r 96@16272r 97@16256r 98@16240r 99@16144r 100@15504r 101@15472r 102@15456r 103@15440r 104@15344r 105@14976r 106@14944r 107@14928r 108@14912r 109@14816r 110@14224r 111@14192r 112@14176r 113@14160r 114@13616r 115@13328r 116@13296r 117@13280r 118@13264r 119@13184r 120@13136r 121@13104r 122@13088r 123@13072r 124@13040r 125@13024r 126@12992r 127@12976r 128@12960r 129@12912r 130@7328r 131@7296r 132@7280r 133@7264r 134@7216r 135@7184r 136@7152r 137@7136r 138@7120r 139@7072r 140@6992r 141@6960r 142@6944r 143@6928r 144@6864r 145@6848r 146@6816r 147@6800r 148@6784r 149@6752r 150@6736r 151@6704r 152@6688r 153@6672r 154@6640r 155@6608r 156@6576r 157@6560r 158@6544r 159@6512r 160@6496r 161@6464r 162@6448r 163@6432r 164@6400r 165@6384r 166@6352r 167@6336r 168@6320r 169@6288r 170@6272r 171@6240r 172@6224r 173@6208r 174@6176r 175@6160r 176@6128r 177@6112r 178@6096r 179@6000r 180@5904r 181@5872r 182@5856r 183@5840r 184@5744r 185@5712r 186@5680r 187@5664r 188@5648r 189@5584r 190@5552r 191@5520r 192@5504r 193@5488r 194@5440r 195@5072r 196@5040r 197@5024r 198@5008r 199@4976r 200@4960r 201@4928r 202@4912r 203@4896r 204@4816r 205@4784r 206@4752r 207@4736r 208@4720r 209@4640r 210@4608r 211@4576r 212@4560r 213@4544r 214@4432r 215@4384r 216@4352r 217@4336r 218@4320r 219@4240r 220@4208r 221@4176r 222@4160r 223@4144r 224@4016r 225@3920r 226@3888r 227@3872r 228@3856r 229@3776r 230@3392r 231@3360r 232@3344r 233@3328r 234@3296r 235@3216r 236@3184r 237@3168r 238@3152r 239@3008r 240@2896r 241@2864r 242@2848r 243@2832r 244@2800r 245@2720r 246@2688r 247@2672r 248@2656r 249@2512r 250@2400r 251@2368r 252@2352r 253@2336r 254@2304r 255@2224r 256@2192r 257@2176r 258@2160r 259@2016r 260@1904r 261@1872r 262@1856r 263@1840r 264@1808r 265@1728r 266@1696r 267@1680r 268@1664r 269@1552r 270@1520r 271@1488r 272@1472r 273@1456r 274@1360r 275@3600r 276@3568r 277@3552r 278@3536r 279@3440r 280@1248r 281@1216r 282@1200r 283@1184r 284@1104r 285@1088r 286@1056r 287@1040r 288@1024r 289@928r 290@848r 291@816r 292@800r 293@784r 294@752r 295@272r 296@240r 297@224r 298@208r 299@128r
SPH [128r,128d:299)[208r,208d:298)[224r,224d:297)[240r,240d:296)[272r,272d:295)[752r,752d:294)[784r,784d:293)[800r,800d:292)[816r,816d:291)[848r,848d:290)[928r,928d:289)[1024r,1024d:288)[1040r,1040d:287)[1056r,1056d:286)[1088r,1088d:285)[1104r,1104d:284)[1184r,1184d:283)[1200r,1200d:282)[1216r,1216d:281)[1248r,1248d:280)[1360r,1360d:274)[1456r,1456d:273)[1472r,1472d:272)[1488r,1488d:271)[1520r,1520d:270)[1552r,1552d:269)[1664r,1664d:268)[1680r,1680d:267)[1696r,1696d:266)[1728r,1728d:265)[1808r,1808d:264)[1840r,1840d:263)[1856r,1856d:262)[1872r,1872d:261)[1904r,1904d:260)[2016r,2016d:259)[2160r,2160d:258)[2176r,2176d:257)[2192r,2192d:256)[2224r,2224d:255)[2304r,2304d:254)[2336r,2336d:253)[2352r,2352d:252)[2368r,2368d:251)[2400r,2400d:250)[2512r,2512d:249)[2656r,2656d:248)[2672r,2672d:247)[2688r,2688d:246)[2720r,2720d:245)[2800r,2800d:244)[2832r,2832d:243)[2848r,2848d:242)[2864r,2864d:241)[2896r,2896d:240)[3008r,3008d:239)[3152r,3152d:238)[3168r,3168d:237)[3184r,3184d:236)[3216r,3216d:235)[3296r,3296d:234)[3328r,3328d:233)[3344r,3344d:232)[3360r,3360d:231)[3392r,3392d:230)[3440r,3440d:279)[3536r,3536d:278)[3552r,3552d:277)[3568r,3568d:276)[3600r,3600d:275)[3776r,3776d:229)[3856r,3856d:228)[3872r,3872d:227)[3888r,3888d:226)[3920r,3920d:225)[4016r,4016d:224)[4144r,4144d:223)[4160r,4160d:222)[4176r,4176d:221)[4208r,4208d:220)[4240r,4240d:219)[4320r,4320d:218)[4336r,4336d:217)[4352r,4352d:216)[4384r,4384d:215)[4432r,4432d:214)[4544r,4544d:213)[4560r,4560d:212)[4576r,4576d:211)[4608r,4608d:210)[4640r,4640d:209)[4720r,4720d:208)[4736r,4736d:207)[4752r,4752d:206)[4784r,4784d:205)[4816r,4816d:204)[4896r,4896d:203)[4912r,4912d:202)[4928r,4928d:201)[4960r,4960d:200)[4976r,4976d:199)[5008r,5008d:198)[5024r,5024d:197)[5040r,5040d:196)[5072r,5072d:195)[5216r,5216d:4)[5248r,5248d:3)[5264r,5264d:2)[5280r,5280d:1)[5312r,5312d:0)[5440r,5440d:194)[5488r,5488d:193)[5504r,5504d:192)[5520r,5520d:191)[5552r,5552d:190)[5584r,5584d:189)[5648r,5648d:188)[5664r,5664d:187)[5680r,5680d:186)[5712r,5712d:185)[5744r,5744d:184)[5840r,5840d:183)[5856r,5856d:182)[5872r,5872d:181)[5904r,5904d:180)[6000r,6000d:179)[6096r,6096d:178)[6112r,6112d:177)[6128r,6128d:176)[6160r,6160d:175)[6176r,6176d:174)[6208r,6208d:173)[6224r,6224d:172)[6240r,6240d:171)[6272r,6272d:170)[6288r,6288d:169)[6320r,6320d:168)[6336r,6336d:167)[6352r,6352d:166)[6384r,6384d:165)[6400r,6400d:164)[6432r,6432d:163)[6448r,6448d:162)[6464r,6464d:161)[6496r,6496d:160)[6512r,6512d:159)[6544r,6544d:158)[6560r,6560d:157)[6576r,6576d:156)[6608r,6608d:155)[6640r,6640d:154)[6672r,6672d:153)[6688r,6688d:152)[6704r,6704d:151)[6736r,6736d:150)[6752r,6752d:149)[6784r,6784d:148)[6800r,6800d:147)[6816r,6816d:146)[6848r,6848d:145)[6864r,6864d:144)[6928r,6928d:143)[6944r,6944d:142)[6960r,6960d:141)[6992r,6992d:140)[7072r,7072d:139)[7120r,7120d:138)[7136r,7136d:137)[7152r,7152d:136)[7184r,7184d:135)[7216r,7216d:134)[7264r,7264d:133)[7280r,7280d:132)[7296r,7296d:131)[7328r,7328d:130)[7824r,7824d:84)[7888r,7888d:83)[7904r,7904d:82)[7920r,7920d:81)[7952r,7952d:80)[8176r,8176d:9)[8208r,8208d:8)[8224r,8224d:7)[8240r,8240d:6)[8272r,8272d:5)[8352r,8352d:79)[8384r,8384d:78)[8400r,8400d:77)[8416r,8416d:76)[8448r,8448d:75)[8496r,8496d:74)[8528r,8528d:73)[8544r,8544d:72)[8560r,8560d:71)[8592r,8592d:70)[8672r,8672d:69)[8704r,8704d:68)[8720r,8720d:67)[8736r,8736d:66)[8768r,8768d:65)[8800r,8800d:64)[8848r,8848d:63)[8864r,8864d:62)[8880r,8880d:61)[8912r,8912d:60)[9168r,9168d:14)[9216r,9216d:13)[9232r,9232d:12)[9248r,9248d:11)[9280r,9280d:10)[10352r,10352d:59)[10400r,10400d:58)[10416r,10416d:57)[10432r,10432d:56)[10464r,10464d:55)[10544r,10544d:54)[10576r,10576d:53)[10592r,10592d:52)[10608r,10608d:51)[10640r,10640d:50)[11104r,11104d:19)[11168r,11168d:18)[11184r,11184d:17)[11200r,11200d:16)[11232r,11232d:15)[11376r,11376d:49)[11440r,11440d:48)[11456r,11456d:47)[11472r,11472d:46)[11504r,11504d:45)[11536r,11536d:44)[11568r,11568d:43)[11584r,11584d:42)[11600r,11600d:41)[11632r,11632d:40)[11712r,11712d:39)[11744r,11744d:38)[11760r,11760d:37)[11776r,11776d:36)[11808r,11808d:35)[11856r,11856d:34)[11920r,11920d:33)[11936r,11936d:32)[11952r,11952d:31)[11984r,11984d:30)[12064r,12064d:29)[12096r,12096d:28)[12112r,12112d:27)[12128r,12128d:26)[12160r,12160d:25)[12608r,12608d:24)[12656r,12656d:23)[12672r,12672d:22)[12688r,12688d:21)[12720r,12720d:20)[12912r,12912d:129)[12960r,12960d:128)[12976r,12976d:127)[12992r,12992d:126)[13024r,13024d:125)[13040r,13040d:124)[13072r,13072d:123)[13088r,13088d:122)[13104r,13104d:121)[13136r,13136d:120)[13184r,13184d:119)[13264r,13264d:118)[13280r,13280d:117)[13296r,13296d:116)[13328r,13328d:115)[13616r,13616d:114)[14160r,14160d:113)[14176r,14176d:112)[14192r,14192d:111)[14224r,14224d:110)[14448r,14448d:89)[14480r,14480d:88)[14496r,14496d:87)[14512r,14512d:86)[14544r,14544d:85)[14816r,14816d:109)[14912r,14912d:108)[14928r,14928d:107)[14944r,14944d:106)[14976r,14976d:105)[15344r,15344d:104)[15440r,15440d:103)[15456r,15456d:102)[15472r,15472d:101)[15504r,15504d:100)[15712r,15712d:94)[15808r,15808d:93)[15824r,15824d:92)[15840r,15840d:91)[15872r,15872d:90)[16144r,16144d:99)[16240r,16240d:98)[16256r,16256d:97)[16272r,16272d:96)[16304r,16304d:95)  0@5312r 1@5280r 2@5264r 3@5248r 4@5216r 5@8272r 6@8240r 7@8224r 8@8208r 9@8176r 10@9280r 11@9248r 12@9232r 13@9216r 14@9168r 15@11232r 16@11200r 17@11184r 18@11168r 19@11104r 20@12720r 21@12688r 22@12672r 23@12656r 24@12608r 25@12160r 26@12128r 27@12112r 28@12096r 29@12064r 30@11984r 31@11952r 32@11936r 33@11920r 34@11856r 35@11808r 36@11776r 37@11760r 38@11744r 39@11712r 40@11632r 41@11600r 42@11584r 43@11568r 44@11536r 45@11504r 46@11472r 47@11456r 48@11440r 49@11376r 50@10640r 51@10608r 52@10592r 53@10576r 54@10544r 55@10464r 56@10432r 57@10416r 58@10400r 59@10352r 60@8912r 61@8880r 62@8864r 63@8848r 64@8800r 65@8768r 66@8736r 67@8720r 68@8704r 69@8672r 70@8592r 71@8560r 72@8544r 73@8528r 74@8496r 75@8448r 76@8416r 77@8400r 78@8384r 79@8352r 80@7952r 81@7920r 82@7904r 83@7888r 84@7824r 85@14544r 86@14512r 87@14496r 88@14480r 89@14448r 90@15872r 91@15840r 92@15824r 93@15808r 94@15712r 95@16304r 96@16272r 97@16256r 98@16240r 99@16144r 100@15504r 101@15472r 102@15456r 103@15440r 104@15344r 105@14976r 106@14944r 107@14928r 108@14912r 109@14816r 110@14224r 111@14192r 112@14176r 113@14160r 114@13616r 115@13328r 116@13296r 117@13280r 118@13264r 119@13184r 120@13136r 121@13104r 122@13088r 123@13072r 124@13040r 125@13024r 126@12992r 127@12976r 128@12960r 129@12912r 130@7328r 131@7296r 132@7280r 133@7264r 134@7216r 135@7184r 136@7152r 137@7136r 138@7120r 139@7072r 140@6992r 141@6960r 142@6944r 143@6928r 144@6864r 145@6848r 146@6816r 147@6800r 148@6784r 149@6752r 150@6736r 151@6704r 152@6688r 153@6672r 154@6640r 155@6608r 156@6576r 157@6560r 158@6544r 159@6512r 160@6496r 161@6464r 162@6448r 163@6432r 164@6400r 165@6384r 166@6352r 167@6336r 168@6320r 169@6288r 170@6272r 171@6240r 172@6224r 173@6208r 174@6176r 175@6160r 176@6128r 177@6112r 178@6096r 179@6000r 180@5904r 181@5872r 182@5856r 183@5840r 184@5744r 185@5712r 186@5680r 187@5664r 188@5648r 189@5584r 190@5552r 191@5520r 192@5504r 193@5488r 194@5440r 195@5072r 196@5040r 197@5024r 198@5008r 199@4976r 200@4960r 201@4928r 202@4912r 203@4896r 204@4816r 205@4784r 206@4752r 207@4736r 208@4720r 209@4640r 210@4608r 211@4576r 212@4560r 213@4544r 214@4432r 215@4384r 216@4352r 217@4336r 218@4320r 219@4240r 220@4208r 221@4176r 222@4160r 223@4144r 224@4016r 225@3920r 226@3888r 227@3872r 228@3856r 229@3776r 230@3392r 231@3360r 232@3344r 233@3328r 234@3296r 235@3216r 236@3184r 237@3168r 238@3152r 239@3008r 240@2896r 241@2864r 242@2848r 243@2832r 244@2800r 245@2720r 246@2688r 247@2672r 248@2656r 249@2512r 250@2400r 251@2368r 252@2352r 253@2336r 254@2304r 255@2224r 256@2192r 257@2176r 258@2160r 259@2016r 260@1904r 261@1872r 262@1856r 263@1840r 264@1808r 265@1728r 266@1696r 267@1680r 268@1664r 269@1552r 270@1520r 271@1488r 272@1472r 273@1456r 274@1360r 275@3600r 276@3568r 277@3552r 278@3536r 279@3440r 280@1248r 281@1216r 282@1200r 283@1184r 284@1104r 285@1088r 286@1056r 287@1040r 288@1024r 289@928r 290@848r 291@816r 292@800r 293@784r 294@752r 295@272r 296@240r 297@224r 298@208r 299@128r
HSP [128r,128d:299)[208r,208d:298)[224r,224d:297)[240r,240d:296)[272r,272d:295)[752r,752d:294)[784r,784d:293)[800r,800d:292)[816r,816d:291)[848r,848d:290)[928r,928d:289)[1024r,1024d:288)[1040r,1040d:287)[1056r,1056d:286)[1088r,1088d:285)[1104r,1104d:284)[1184r,1184d:283)[1200r,1200d:282)[1216r,1216d:281)[1248r,1248d:280)[1360r,1360d:274)[1456r,1456d:273)[1472r,1472d:272)[1488r,1488d:271)[1520r,1520d:270)[1552r,1552d:269)[1664r,1664d:268)[1680r,1680d:267)[1696r,1696d:266)[1728r,1728d:265)[1808r,1808d:264)[1840r,1840d:263)[1856r,1856d:262)[1872r,1872d:261)[1904r,1904d:260)[2016r,2016d:259)[2160r,2160d:258)[2176r,2176d:257)[2192r,2192d:256)[2224r,2224d:255)[2304r,2304d:254)[2336r,2336d:253)[2352r,2352d:252)[2368r,2368d:251)[2400r,2400d:250)[2512r,2512d:249)[2656r,2656d:248)[2672r,2672d:247)[2688r,2688d:246)[2720r,2720d:245)[2800r,2800d:244)[2832r,2832d:243)[2848r,2848d:242)[2864r,2864d:241)[2896r,2896d:240)[3008r,3008d:239)[3152r,3152d:238)[3168r,3168d:237)[3184r,3184d:236)[3216r,3216d:235)[3296r,3296d:234)[3328r,3328d:233)[3344r,3344d:232)[3360r,3360d:231)[3392r,3392d:230)[3440r,3440d:279)[3536r,3536d:278)[3552r,3552d:277)[3568r,3568d:276)[3600r,3600d:275)[3776r,3776d:229)[3856r,3856d:228)[3872r,3872d:227)[3888r,3888d:226)[3920r,3920d:225)[4016r,4016d:224)[4144r,4144d:223)[4160r,4160d:222)[4176r,4176d:221)[4208r,4208d:220)[4240r,4240d:219)[4320r,4320d:218)[4336r,4336d:217)[4352r,4352d:216)[4384r,4384d:215)[4432r,4432d:214)[4544r,4544d:213)[4560r,4560d:212)[4576r,4576d:211)[4608r,4608d:210)[4640r,4640d:209)[4720r,4720d:208)[4736r,4736d:207)[4752r,4752d:206)[4784r,4784d:205)[4816r,4816d:204)[4896r,4896d:203)[4912r,4912d:202)[4928r,4928d:201)[4960r,4960d:200)[4976r,4976d:199)[5008r,5008d:198)[5024r,5024d:197)[5040r,5040d:196)[5072r,5072d:195)[5216r,5216d:4)[5248r,5248d:3)[5264r,5264d:2)[5280r,5280d:1)[5312r,5312d:0)[5440r,5440d:194)[5488r,5488d:193)[5504r,5504d:192)[5520r,5520d:191)[5552r,5552d:190)[5584r,5584d:189)[5648r,5648d:188)[5664r,5664d:187)[5680r,5680d:186)[5712r,5712d:185)[5744r,5744d:184)[5840r,5840d:183)[5856r,5856d:182)[5872r,5872d:181)[5904r,5904d:180)[6000r,6000d:179)[6096r,6096d:178)[6112r,6112d:177)[6128r,6128d:176)[6160r,6160d:175)[6176r,6176d:174)[6208r,6208d:173)[6224r,6224d:172)[6240r,6240d:171)[6272r,6272d:170)[6288r,6288d:169)[6320r,6320d:168)[6336r,6336d:167)[6352r,6352d:166)[6384r,6384d:165)[6400r,6400d:164)[6432r,6432d:163)[6448r,6448d:162)[6464r,6464d:161)[6496r,6496d:160)[6512r,6512d:159)[6544r,6544d:158)[6560r,6560d:157)[6576r,6576d:156)[6608r,6608d:155)[6640r,6640d:154)[6672r,6672d:153)[6688r,6688d:152)[6704r,6704d:151)[6736r,6736d:150)[6752r,6752d:149)[6784r,6784d:148)[6800r,6800d:147)[6816r,6816d:146)[6848r,6848d:145)[6864r,6864d:144)[6928r,6928d:143)[6944r,6944d:142)[6960r,6960d:141)[6992r,6992d:140)[7072r,7072d:139)[7120r,7120d:138)[7136r,7136d:137)[7152r,7152d:136)[7184r,7184d:135)[7216r,7216d:134)[7264r,7264d:133)[7280r,7280d:132)[7296r,7296d:131)[7328r,7328d:130)[7824r,7824d:84)[7888r,7888d:83)[7904r,7904d:82)[7920r,7920d:81)[7952r,7952d:80)[8176r,8176d:9)[8208r,8208d:8)[8224r,8224d:7)[8240r,8240d:6)[8272r,8272d:5)[8352r,8352d:79)[8384r,8384d:78)[8400r,8400d:77)[8416r,8416d:76)[8448r,8448d:75)[8496r,8496d:74)[8528r,8528d:73)[8544r,8544d:72)[8560r,8560d:71)[8592r,8592d:70)[8672r,8672d:69)[8704r,8704d:68)[8720r,8720d:67)[8736r,8736d:66)[8768r,8768d:65)[8800r,8800d:64)[8848r,8848d:63)[8864r,8864d:62)[8880r,8880d:61)[8912r,8912d:60)[9168r,9168d:14)[9216r,9216d:13)[9232r,9232d:12)[9248r,9248d:11)[9280r,9280d:10)[10352r,10352d:59)[10400r,10400d:58)[10416r,10416d:57)[10432r,10432d:56)[10464r,10464d:55)[10544r,10544d:54)[10576r,10576d:53)[10592r,10592d:52)[10608r,10608d:51)[10640r,10640d:50)[11104r,11104d:19)[11168r,11168d:18)[11184r,11184d:17)[11200r,11200d:16)[11232r,11232d:15)[11376r,11376d:49)[11440r,11440d:48)[11456r,11456d:47)[11472r,11472d:46)[11504r,11504d:45)[11536r,11536d:44)[11568r,11568d:43)[11584r,11584d:42)[11600r,11600d:41)[11632r,11632d:40)[11712r,11712d:39)[11744r,11744d:38)[11760r,11760d:37)[11776r,11776d:36)[11808r,11808d:35)[11856r,11856d:34)[11920r,11920d:33)[11936r,11936d:32)[11952r,11952d:31)[11984r,11984d:30)[12064r,12064d:29)[12096r,12096d:28)[12112r,12112d:27)[12128r,12128d:26)[12160r,12160d:25)[12608r,12608d:24)[12656r,12656d:23)[12672r,12672d:22)[12688r,12688d:21)[12720r,12720d:20)[12912r,12912d:129)[12960r,12960d:128)[12976r,12976d:127)[12992r,12992d:126)[13024r,13024d:125)[13040r,13040d:124)[13072r,13072d:123)[13088r,13088d:122)[13104r,13104d:121)[13136r,13136d:120)[13184r,13184d:119)[13264r,13264d:118)[13280r,13280d:117)[13296r,13296d:116)[13328r,13328d:115)[13616r,13616d:114)[14160r,14160d:113)[14176r,14176d:112)[14192r,14192d:111)[14224r,14224d:110)[14448r,14448d:89)[14480r,14480d:88)[14496r,14496d:87)[14512r,14512d:86)[14544r,14544d:85)[14816r,14816d:109)[14912r,14912d:108)[14928r,14928d:107)[14944r,14944d:106)[14976r,14976d:105)[15344r,15344d:104)[15440r,15440d:103)[15456r,15456d:102)[15472r,15472d:101)[15504r,15504d:100)[15712r,15712d:94)[15808r,15808d:93)[15824r,15824d:92)[15840r,15840d:91)[15872r,15872d:90)[16144r,16144d:99)[16240r,16240d:98)[16256r,16256d:97)[16272r,16272d:96)[16304r,16304d:95)  0@5312r 1@5280r 2@5264r 3@5248r 4@5216r 5@8272r 6@8240r 7@8224r 8@8208r 9@8176r 10@9280r 11@9248r 12@9232r 13@9216r 14@9168r 15@11232r 16@11200r 17@11184r 18@11168r 19@11104r 20@12720r 21@12688r 22@12672r 23@12656r 24@12608r 25@12160r 26@12128r 27@12112r 28@12096r 29@12064r 30@11984r 31@11952r 32@11936r 33@11920r 34@11856r 35@11808r 36@11776r 37@11760r 38@11744r 39@11712r 40@11632r 41@11600r 42@11584r 43@11568r 44@11536r 45@11504r 46@11472r 47@11456r 48@11440r 49@11376r 50@10640r 51@10608r 52@10592r 53@10576r 54@10544r 55@10464r 56@10432r 57@10416r 58@10400r 59@10352r 60@8912r 61@8880r 62@8864r 63@8848r 64@8800r 65@8768r 66@8736r 67@8720r 68@8704r 69@8672r 70@8592r 71@8560r 72@8544r 73@8528r 74@8496r 75@8448r 76@8416r 77@8400r 78@8384r 79@8352r 80@7952r 81@7920r 82@7904r 83@7888r 84@7824r 85@14544r 86@14512r 87@14496r 88@14480r 89@14448r 90@15872r 91@15840r 92@15824r 93@15808r 94@15712r 95@16304r 96@16272r 97@16256r 98@16240r 99@16144r 100@15504r 101@15472r 102@15456r 103@15440r 104@15344r 105@14976r 106@14944r 107@14928r 108@14912r 109@14816r 110@14224r 111@14192r 112@14176r 113@14160r 114@13616r 115@13328r 116@13296r 117@13280r 118@13264r 119@13184r 120@13136r 121@13104r 122@13088r 123@13072r 124@13040r 125@13024r 126@12992r 127@12976r 128@12960r 129@12912r 130@7328r 131@7296r 132@7280r 133@7264r 134@7216r 135@7184r 136@7152r 137@7136r 138@7120r 139@7072r 140@6992r 141@6960r 142@6944r 143@6928r 144@6864r 145@6848r 146@6816r 147@6800r 148@6784r 149@6752r 150@6736r 151@6704r 152@6688r 153@6672r 154@6640r 155@6608r 156@6576r 157@6560r 158@6544r 159@6512r 160@6496r 161@6464r 162@6448r 163@6432r 164@6400r 165@6384r 166@6352r 167@6336r 168@6320r 169@6288r 170@6272r 171@6240r 172@6224r 173@6208r 174@6176r 175@6160r 176@6128r 177@6112r 178@6096r 179@6000r 180@5904r 181@5872r 182@5856r 183@5840r 184@5744r 185@5712r 186@5680r 187@5664r 188@5648r 189@5584r 190@5552r 191@5520r 192@5504r 193@5488r 194@5440r 195@5072r 196@5040r 197@5024r 198@5008r 199@4976r 200@4960r 201@4928r 202@4912r 203@4896r 204@4816r 205@4784r 206@4752r 207@4736r 208@4720r 209@4640r 210@4608r 211@4576r 212@4560r 213@4544r 214@4432r 215@4384r 216@4352r 217@4336r 218@4320r 219@4240r 220@4208r 221@4176r 222@4160r 223@4144r 224@4016r 225@3920r 226@3888r 227@3872r 228@3856r 229@3776r 230@3392r 231@3360r 232@3344r 233@3328r 234@3296r 235@3216r 236@3184r 237@3168r 238@3152r 239@3008r 240@2896r 241@2864r 242@2848r 243@2832r 244@2800r 245@2720r 246@2688r 247@2672r 248@2656r 249@2512r 250@2400r 251@2368r 252@2352r 253@2336r 254@2304r 255@2224r 256@2192r 257@2176r 258@2160r 259@2016r 260@1904r 261@1872r 262@1856r 263@1840r 264@1808r 265@1728r 266@1696r 267@1680r 268@1664r 269@1552r 270@1520r 271@1488r 272@1472r 273@1456r 274@1360r 275@3600r 276@3568r 277@3552r 278@3536r 279@3440r 280@1248r 281@1216r 282@1200r 283@1184r 284@1104r 285@1088r 286@1056r 287@1040r 288@1024r 289@928r 290@848r 291@816r 292@800r 293@784r 294@752r 295@272r 296@240r 297@224r 298@208r 299@128r
%0 [32r,64r:0)  0@32r weight:0.000000e+00
%1 [16r,80r:0)  0@16r weight:0.000000e+00
%4 [288r,320r:0)  0@288r weight:0.000000e+00
%5 [384r,400r:0)  0@384r weight:0.000000e+00
%6 [416r,432r:0)  0@416r weight:0.000000e+00
%7 [448r,464r:0)  0@448r weight:0.000000e+00
%8 [480r,496r:0)  0@480r weight:0.000000e+00
%9 [512r,528r:0)  0@512r weight:0.000000e+00
%10 [544r,560r:0)  0@544r weight:0.000000e+00
%11 [576r,592r:0)  0@576r weight:0.000000e+00
%12 [608r,624r:0)  0@608r weight:0.000000e+00
%13 [640r,656r:0)  0@640r weight:0.000000e+00
%14 [672r,688r:0)  0@672r weight:0.000000e+00
%15 [704r,720r:0)  0@704r weight:0.000000e+00
%16 [736r,832r:0)  0@736r weight:0.000000e+00
%24 [1264r,1296r:0)  0@1264r weight:0.000000e+00
%29 [3616r,3632r:0)  0@3616r weight:0.000000e+00
%30 [3648r,3664r:0)  0@3648r weight:0.000000e+00
%31 [3680r,3696r:0)  0@3680r weight:0.000000e+00
%32 [3712r,3728r:0)  0@3712r weight:0.000000e+00
%37 [1536r,1712r:0)  0@1536r weight:0.000000e+00
%40 [1744r,1760r:0)  0@1744r weight:0.000000e+00
%41 [1792r,1888r:0)  0@1792r weight:0.000000e+00
%42 [1920r,1936r:0)  0@1920r weight:0.000000e+00
%44 [2000r,2208r:0)  0@2000r weight:0.000000e+00
%49 [2240r,2256r:0)  0@2240r weight:0.000000e+00
%50 [2288r,2384r:0)  0@2288r weight:0.000000e+00
%51 [2416r,2432r:0)  0@2416r weight:0.000000e+00
%53 [2496r,2704r:0)  0@2496r weight:0.000000e+00
%58 [2736r,2752r:0)  0@2736r weight:0.000000e+00
%59 [2784r,2880r:0)  0@2784r weight:0.000000e+00
%60 [2912r,2928r:0)  0@2912r weight:0.000000e+00
%62 [2992r,3200r:0)  0@2992r weight:0.000000e+00
%67 [3232r,3248r:0)  0@3232r weight:0.000000e+00
%68 [3280r,3376r:0)  0@3280r weight:0.000000e+00
%70 [3792r,3824r:0)  0@3792r weight:0.000000e+00
%71 [3808r,3840r:0)  0@3808r weight:0.000000e+00
%73 [3936r,3984r:0)[3984r,4000r:1)  0@3936r 1@3984r weight:0.000000e+00
%79 [4224r,4368r:0)  0@4224r weight:0.000000e+00
%82 [4400r,4592r:0)  0@4400r weight:0.000000e+00
%83 [4416r,4592r:0)  0@4416r weight:0.000000e+00
%87 [4624r,4768r:0)  0@4624r weight:0.000000e+00
%90 [4800r,4944r:0)  0@4800r weight:0.000000e+00
%93 [5088r,5104r:0)  0@5088r weight:0.000000e+00
%99 [5728r,5888r:0)  0@5728r weight:0.000000e+00
%104 [5920r,5952r:1)[5952r,5984r:0)  0@5952r 1@5920r weight:0.000000e+00
%106 [5984r,6144r:0)  0@5984r weight:0.000000e+00
%111 [7232r,12896B:0)  0@7232r weight:0.000000e+00
%112 [7664r,7680r:0)  0@7664r weight:0.000000e+00
%115 [13152r,13168r:0)  0@13152r weight:0.000000e+00
%119 [13344r,13376r:0)[13376r,13392r:1)  0@13344r 1@13376r weight:0.000000e+00
%122 [13440r,14208r:0)  0@13440r weight:0.000000e+00
%123 [13456r,13488r:0)[13488r,13520r:1)  0@13456r 1@13488r weight:0.000000e+00
%124 [13392r,13424r:2)[13424r,13520r:0)[13520r,14208r:1)  0@13424r 1@13520r 2@13392r weight:0.000000e+00
%125 [13552r,14208r:0)  0@13552r weight:0.000000e+00
%127 [13584r,14208r:0)  0@13584r weight:0.000000e+00
%128 [13600r,14208r:0)  0@13600r weight:0.000000e+00
%129 [13632r,13664r:0)  0@13632r weight:0.000000e+00
%131 [13680r,13696r:0)  0@13680r weight:0.000000e+00
%132 [13712r,13728r:0)  0@13712r weight:0.000000e+00
%133 [13744r,13760r:0)  0@13744r weight:0.000000e+00
%134 [13776r,13792r:0)  0@13776r weight:0.000000e+00
%135 [13808r,13824r:0)  0@13808r weight:0.000000e+00
%136 [13840r,13856r:0)  0@13840r weight:0.000000e+00
%137 [13872r,13888r:0)  0@13872r weight:0.000000e+00
%138 [13904r,13920r:0)  0@13904r weight:0.000000e+00
%139 [13952r,13968r:0)  0@13952r weight:0.000000e+00
%143 [14304r,14320r:0)  0@14304r weight:0.000000e+00
%146 [14656r,14688r:0)  0@14656r weight:0.000000e+00
%147 [14672r,14688r:0)  0@14672r weight:0.000000e+00
%148 [14768r,14784r:0)  0@14768r weight:0.000000e+00
%153 [14992r,15008r:0)  0@14992r weight:0.000000e+00
%157 [15232r,15264r:0)  0@15232r weight:0.000000e+00
%158 [15024r,16368B:0)  0@15024r weight:0.000000e+00
%159 [15248r,15488r:0)  0@15248r weight:0.000000e+00
%160 [15040r,16368B:0)  0@15040r weight:0.000000e+00
%161 [15264r,15488r:0)  0@15264r weight:0.000000e+00
%163 [15280r,15296r:2)[15296r,15328r:0)[15328r,15488r:1)  0@15296r 1@15328r 2@15280r weight:0.000000e+00
%173 [15984r,16016r:2)[16016r,16048r:0)[16048r,16288r:1)  0@16016r 1@16048r 2@15984r weight:0.000000e+00
%175 [16080r,16096r:2)[16096r,16128r:0)[16128r,16288r:1)  0@16096r 1@16128r 2@16080r weight:0.000000e+00
%181 [15584r,15616r:0)[15616r,15856r:1)  0@15584r 1@15616r weight:0.000000e+00
%183 [15648r,15664r:2)[15664r,15696r:0)[15696r,15856r:1)  0@15664r 1@15696r 2@15648r weight:0.000000e+00
%188 [14432r,14528r:0)  0@14432r weight:0.000000e+00
%189 [14560r,14592r:0)  0@14560r weight:0.000000e+00
%190 [14576r,14592r:0)  0@14576r weight:0.000000e+00
%191 [14336r,14640B:0)  0@14336r weight:0.000000e+00
%194 [7808r,7936r:0)  0@7808r weight:0.000000e+00
%195 [7376r,12896B:0)  0@7376r weight:0.000000e+00
%198 [7408r,12896B:0)  0@7408r weight:0.000000e+00
%203 [8480r,8576r:0)  0@8480r weight:0.000000e+00
%207 [8960r,8976r:0)  0@8960r weight:0.000000e+00
%209 [9376r,9392r:0)  0@9376r weight:0.000000e+00
%214 [10704r,10720r:0)  0@10704r weight:0.000000e+00
%216 [11360r,11488r:0)  0@11360r weight:0.000000e+00
%219 [11520r,11616r:0)  0@11520r weight:0.000000e+00
%221 [11840r,11968r:0)  0@11840r weight:0.000000e+00
%226 [12192r,12224r:0)[12224r,12240r:1)  0@12192r 1@12224r weight:0.000000e+00
%227 [12320r,12448r:0)  0@12320r weight:0.000000e+00
%228 [12336r,12432r:0)  0@12336r weight:0.000000e+00
%230 [12392r,12432r:0)[12432r,12448r:1)  0@12392r 1@12432r weight:0.000000e+00
%232 [12512r,12528r:0)  0@12512r weight:0.000000e+00
%234 [12592r,12704r:0)  0@12592r weight:0.000000e+00
%237 [12800r,12832r:0)[12832r,12848r:1)  0@12800r 1@12832r weight:0.000000e+00
%240 [10880r,10896r:0)  0@10880r weight:0.000000e+00
%241 [10896r,10912r:0)  0@10896r weight:0.000000e+00
%242 [7568r,12896B:0)  0@7568r weight:0.000000e+00
%243 [10912r,10944r:0)  0@10912r weight:0.000000e+00
%244 [10928r,10944r:0)  0@10928r weight:0.000000e+00
%249 [11008r,11040r:2)[11040r,11072r:0)[11072r,11216r:1)  0@11040r 1@11072r 2@11008r weight:0.000000e+00
%250 [11088r,11216r:0)  0@11088r weight:0.000000e+00
%261 [7520r,12896B:0)  0@7520r weight:0.000000e+00
%264 [7536r,12896B:0)  0@7536r weight:0.000000e+00
%265 [9808r,9840r:0)[9840r,10064r:1)  0@9808r 1@9840r weight:0.000000e+00
%268 [9888r,9920r:0)[9920r,9936r:1)  0@9888r 1@9920r weight:0.000000e+00
%269 [9936r,10096r:0)  0@9936r weight:0.000000e+00
%270 [9792r,9872r:2)[9872r,9968r:0)[9968r,10144r:1)  0@9872r 1@9968r 2@9792r weight:0.000000e+00
%271 [9984r,10144r:0)  0@9984r weight:0.000000e+00
%274 [9744r,9776r:2)[9776r,10032r:0)[10032r,10064r:1)[10064r,10096r:3)[10096r,10128r:4)  0@9776r 1@10032r 2@9744r 3@10064r 4@10096r weight:0.000000e+00
%277 [10000r,10128r:0)[10128r,10144r:1)  0@10000r 1@10128r weight:0.000000e+00
%278 [9040r,9140r:0)  0@9040r weight:0.000000e+00
%279 [7472r,12896B:0)  0@7472r weight:0.000000e+00
%281 [7488r,12896B:0)  0@7488r weight:0.000000e+00
%282 [9152r,9264r:0)  0@9152r weight:0.000000e+00
%284 [9140r,9144r:2)[9144r,9160r:0)[9160r,9264r:1)  0@9144r 1@9160r 2@9140r weight:0.000000e+00
%285 [7504r,12896B:0)  0@7504r weight:0.000000e+00
%286 [9136r,9264r:0)  0@9136r weight:0.000000e+00
%289 [8160r,8256r:0)  0@8160r weight:0.000000e+00
%290 [5200r,5296r:0)  0@5200r weight:0.000000e+00
%291 [15056r,16368B:0)  0@15056r weight:0.000000e+00
RegMasks: 208r 784r 1024r 1184r 1456r 1664r 1840r 2160r 2336r 2656r 2832r 3152r 3328r 3536r 3856r 4144r 4320r 4544r 4720r 4896r 5008r 5248r 5488r 5648r 5840r 6096r 6208r 6320r 6432r 6544r 6672r 6784r 6928r 7120r 7264r 7888r 8208r 8384r 8528r 8704r 8848r 9216r 10400r 10576r 11168r 11440r 11568r 11744r 11920r 12096r 12656r 12960r 13072r 13264r 14160r 14480r 14912r 15440r 15808r 16240r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
  fi#12: size=1, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
  fi#16: size=88, align=16, at location [SP+8]
  fi#17: size=88, align=16, at location [SP+8]
  fi#18: size=8, align=8, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 5.000000e-01, align=8
  cp#1: 7.000000e+00, align=8
  cp#2: 4.000000e-02, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
Function Live Ins: $edi in %0, $rsi in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $edi, $rsi
16B	  %1:gr64 = COPY $rsi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
64B	  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
80B	  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
96B	  MOV64mi32 %stack.11.nelt_tot, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.nelt_tot)
112B	  MOV32mi %stack.13.ifmortar, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ifmortar)
128B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_timer_flag, $noreg
192B	  $rsi = LEA64r $rip, 1, $noreg, @ua__str_1_r_, $noreg
208B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  PCN_STACKMAP 0, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  %4:gr64 = COPY $rax
304B	  MOV64mr %stack.18.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
320B	  TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
336B	  JCC_1 %bb.2, 4, implicit $eflags
352B	  JMP_1 %bb.1

368B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

384B	  %5:gr32 = MOV32ri 1
400B	  MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
416B	  %6:gr64 = LEA64r $rip, 1, $noreg, @ua__str_2_total_, $noreg
432B	  MOV64mr %stack.17.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
448B	  %7:gr64 = LEA64r $rip, 1, $noreg, @ua__str_3_init_, $noreg
464B	  MOV64mr %stack.17.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
480B	  %8:gr64 = LEA64r $rip, 1, $noreg, @ua__str_4_convect_, $noreg
496B	  MOV64mr %stack.17.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
512B	  %9:gr64 = LEA64r $rip, 1, $noreg, @ua__str_5_transfb_c_, $noreg
528B	  MOV64mr %stack.17.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
544B	  %10:gr64 = LEA64r $rip, 1, $noreg, @ua__str_6_diffusion_, $noreg
560B	  MOV64mr %stack.17.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
576B	  %11:gr64 = LEA64r $rip, 1, $noreg, @ua__str_7_transf_, $noreg
592B	  MOV64mr %stack.17.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
608B	  %12:gr64 = LEA64r $rip, 1, $noreg, @ua__str_8_transfb_, $noreg
624B	  MOV64mr %stack.17.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
640B	  %13:gr64 = LEA64r $rip, 1, $noreg, @ua__str_9_adaptation, $noreg
656B	  MOV64mr %stack.17.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
672B	  %14:gr64 = LEA64r $rip, 1, $noreg, @ua__str_10_transf_b_, $noreg
688B	  MOV64mr %stack.17.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
704B	  %15:gr64 = LEA64r $rip, 1, $noreg, @ua__str_11_add2_, $noreg
720B	  MOV64mr %stack.17.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
736B	  %16:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $rdi = COPY %16:gr64
784B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  PCN_STACKMAP 1, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %16:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
848B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
864B	  JMP_1 %bb.3

880B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

896B	  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0 :: (store 4 into @timeron)

912B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x50000000), %bb.11(0x30000000); %bb.4(62.50%), %bb.11(37.50%)

928B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
992B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_12____NAS_Par, $noreg
1008B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1024B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1072B	  PCN_STACKMAP 2, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
1088B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_13_inputua_da, $noreg
1168B	  $rsi = LEA64r $rip, 1, $noreg, @ua__str_1_r_, $noreg
1184B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1200B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1216B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  PCN_STACKMAP 3, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
1248B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1264B	  %24:gr64 = COPY $rax
1280B	  MOV64mr %stack.18.fp, 1, $noreg, 0, $noreg, %24:gr64 :: (store 8 into %ir.fp)
1296B	  TEST64rr %24:gr64, %24:gr64, implicit-def $eflags
1312B	  JCC_1 %bb.11, 4, implicit $eflags
1328B	  JMP_1 %bb.4

1344B	bb.4.if.then14:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1360B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1424B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_14__Reading_f, $noreg
1440B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1456B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
1472B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1488B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1504B	  PCN_STACKMAP 4, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1536B	  %37:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
1552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1616B	  $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
1632B	  $rdx = LEA64r $rip, 1, $noreg, @fre, $noreg
1640B	  $rdi = COPY %37:gr64
1648B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1664B	  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1696B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1712B	  PCN_STACKMAP 5, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %37:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
1728B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1744B	  %40:gr32 = COPY $eax
1760B	  MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %40:gr32 :: (store 4 into %ir.result)

1776B	bb.5.while.cond:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

1792B	  %41:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
1808B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1824B	  $rdi = COPY %41:gr64
1840B	  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1856B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1872B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1888B	  PCN_STACKMAP 6, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %41:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
1904B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1920B	  %42:gr32 = COPY $eax
1936B	  CMP32ri8 %42:gr32, 10, implicit-def $eflags
1952B	  JCC_1 %bb.5, 5, implicit $eflags
1968B	  JMP_1 %bb.6

1984B	bb.6.while.end:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

2000B	  %44:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2016B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2112B	  $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
2128B	  $rdx = LEA64r $rip, 1, $noreg, @niter, $noreg
2136B	  $rdi = COPY %44:gr64
2144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
2160B	  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2176B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2208B	  PCN_STACKMAP 7, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %44:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
2224B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2240B	  %49:gr32 = COPY $eax
2256B	  MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %49:gr32 :: (store 4 into %ir.result)

2272B	bb.7.while.cond20:
	; predecessors: %bb.6, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

2288B	  %50:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2320B	  $rdi = COPY %50:gr64
2336B	  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2384B	  PCN_STACKMAP 8, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %50:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
2400B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2416B	  %51:gr32 = COPY $eax
2432B	  CMP32ri8 %51:gr32, 10, implicit-def $eflags
2448B	  JCC_1 %bb.7, 5, implicit $eflags
2464B	  JMP_1 %bb.8

2480B	bb.8.while.end24:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2496B	  %53:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2608B	  $rsi = LEA64r $rip, 1, $noreg, @ua__str_15__d_, $noreg
2624B	  $rdx = LEA64r $rip, 1, $noreg, @nmxh, $noreg
2632B	  $rdi = COPY %53:gr64
2640B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
2656B	  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2672B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2688B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2704B	  PCN_STACKMAP 9, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %53:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
2720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2736B	  %58:gr32 = COPY $eax
2752B	  MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %58:gr32 :: (store 4 into %ir.result)

2768B	bb.9.while.cond26:
	; predecessors: %bb.8, %bb.9
	  successors: %bb.9(0x7c000000), %bb.10(0x04000000); %bb.9(96.88%), %bb.10(3.12%)

2784B	  %59:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2800B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2816B	  $rdi = COPY %59:gr64
2832B	  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2848B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2880B	  PCN_STACKMAP 10, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %59:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
2896B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2912B	  %60:gr32 = COPY $eax
2928B	  CMP32ri8 %60:gr32, 10, implicit-def $eflags
2944B	  JCC_1 %bb.9, 5, implicit $eflags
2960B	  JMP_1 %bb.10

2976B	bb.10.while.end30:
	; predecessors: %bb.9
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2992B	  %62:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
3008B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3104B	  $rsi = LEA64r $rip, 1, $noreg, @ua__str_16__lf_, $noreg
3120B	  $rdx = LEA64r $rip, 1, $noreg, @alpha, $noreg
3128B	  $rdi = COPY %62:gr64
3136B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
3152B	  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
3168B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3200B	  PCN_STACKMAP 11, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %62:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
3216B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3232B	  %67:gr32 = COPY $eax
3248B	  MOV32mr %stack.19.result, 1, $noreg, 0, $noreg, %67:gr32 :: (store 4 into %ir.result)
3264B	  MOV8mi %stack.12.Class, 1, $noreg, 0, $noreg, 85 :: (store 1 into %ir.Class, align 4)
3280B	  %68:gr64 = MOV64rm %stack.18.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
3296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3312B	  $rdi = COPY %68:gr64
3328B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3344B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3360B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3376B	  PCN_STACKMAP 12, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %68:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
3392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3408B	  JMP_1 %bb.12

3424B	bb.11.if.else33:
	; predecessors: %bb.3
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3504B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_17__No_input_, $noreg
3520B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
3536B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3568B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3584B	  PCN_STACKMAP 13, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
3600B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3616B	  %29:gr32 = MOV32ri 5
3632B	  MOV32mr $rip, 1, $noreg, @fre, $noreg, %29:gr32 :: (store 4 into @fre)
3648B	  %30:gr32 = MOV32ri 200
3664B	  MOV32mr $rip, 1, $noreg, @niter, $noreg, %30:gr32 :: (store 4 into @niter)
3680B	  %31:gr32 = MOV32ri 10
3696B	  MOV32mr $rip, 1, $noreg, @nmxh, $noreg, %31:gr32 :: (store 4 into @nmxh)
3712B	  %32:gr64 = MOV64ri 4590140797810047451
3728B	  MOV64mr $rip, 1, $noreg, @alpha, $noreg, %32:gr64 :: (store 8 into @alpha)
3744B	  MOV8mi %stack.12.Class, 1, $noreg, 0, $noreg, 66 :: (store 1 into %ir.Class, align 4)

3760B	bb.12.if.end35:
	; predecessors: %bb.11, %bb.10
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3776B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3792B	  %70:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
3808B	  %71:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
3824B	  $xmm0 = COPY %70:fr64
3840B	  $xmm1 = COPY %71:fr64
3856B	  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
3872B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3888B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3904B	  PCN_STACKMAP 14, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
3920B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3936B	  %73:fr64 = COPY killed $xmm0
3952B	  MOVSDmr $rip, 1, $noreg, @dlmin, $noreg, %73:fr64 :: (store 8 into @dlmin)
3984B	  %73:fr64 = MULSDrm %73:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
4000B	  MOVSDmr $rip, 1, $noreg, @dtime, $noreg, %73:fr64 :: (store 8 into @dtime)
4016B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4096B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_18__Levels_of, $noreg
4112B	  $esi = MOV32ri 7
4128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4144B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4192B	  PCN_STACKMAP 15, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
4208B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4224B	  %79:gr32 = MOV32rm $rip, 1, $noreg, @fre, $noreg :: (dereferenceable load 4 from @fre)
4240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4272B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_19__Adaptatio, $noreg
4288B	  $esi = COPY %79:gr32
4304B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4320B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4368B	  PCN_STACKMAP 16, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %79:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  %82:gr32 = MOV32rm $rip, 1, $noreg, @niter, $noreg :: (dereferenceable load 4 from @niter)
4416B	  %83:fr64 = MOVSDrm_alt $rip, 1, $noreg, @dtime, $noreg :: (dereferenceable load 8 from @dtime)
4432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4480B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_20__Time_step, $noreg
4496B	  $esi = COPY %82:gr32
4512B	  $xmm0 = COPY %83:fr64
4528B	  $al = MOV8ri 1
4544B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4560B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4592B	  PCN_STACKMAP 17, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %82:gr32, %83:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
4608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4624B	  %87:gr32 = MOV32rm $rip, 1, $noreg, @nmxh, $noreg :: (dereferenceable load 4 from @nmxh)
4640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4672B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_21__CG_iterat, $noreg
4688B	  $esi = COPY %87:gr32
4704B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4720B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4768B	  PCN_STACKMAP 18, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %87:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
4784B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4800B	  %90:fr64 = MOVSDrm_alt $rip, 1, $noreg, @alpha, $noreg :: (dereferenceable load 8 from @alpha)
4816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4848B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_22__Heat_sour, $noreg
4864B	  $xmm0 = COPY %90:fr64
4880B	  $al = MOV8ri 1
4896B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4912B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4928B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4944B	  PCN_STACKMAP 19, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %90:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
4960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4976B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4992B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
5008B	  CALL64pcrel32 @top_constants, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $al, implicit-def $rsp, implicit-def $ssp
5024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5040B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5056B	  PCN_STACKMAP 20, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
5072B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5088B	  %93:gr32 = MOV32ri 1
5104B	  MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %93:gr32 :: (store 4 into %ir.i)

5120B	bb.13.for.cond:
	; predecessors: %bb.12, %bb.14
	  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

5136B	  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 10, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
5152B	  JCC_1 %bb.15, 15, implicit $eflags
5168B	  JMP_1 %bb.14

5184B	bb.14.for.body:
	; predecessors: %bb.13
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

5200B	  %290:gr32 = MOV32rm %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
5216B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5232B	  $edi = COPY %290:gr32
5248B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
5264B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5296B	  PCN_STACKMAP 21, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %290:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
5312B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5328B	  INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
5344B	  JMP_1 %bb.13

5360B	bb.15.for.end:
	; predecessors: %bb.13
	  successors: %bb.16(0x50000000), %bb.17(0x30000000); %bb.16(62.50%), %bb.17(37.50%)

5376B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
5392B	  JCC_1 %bb.17, 4, implicit $eflags
5408B	  JMP_1 %bb.16

5424B	bb.16.if.then43:
	; predecessors: %bb.15
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

5440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5472B	  $edi = MOV32ri 2
5488B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
5504B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5536B	  PCN_STACKMAP 22, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
5552B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

5568B	bb.17.if.end44:
	; predecessors: %bb.15, %bb.16
	  successors: %bb.18(0x50000000), %bb.19(0x30000000); %bb.18(62.50%), %bb.19(37.50%)

5584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5632B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
5648B	  CALL64pcrel32 @create_initial_grid, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $al, implicit-def $rsp, implicit-def $ssp
5664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5680B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5696B	  PCN_STACKMAP 23, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
5712B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5728B	  %99:gr32 = MOV32rm $rip, 1, $noreg, @ntot, $noreg :: (dereferenceable load 4 from @ntot)
5744B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5792B	  $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
5824B	  $xmm0 = FsFLD0SD
5832B	  $esi = COPY %99:gr32
5840B	  CALL64pcrel32 @r_init, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp
5856B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5872B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5888B	  PCN_STACKMAP 24, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %99:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
5904B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5920B	  undef %104.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @nelt, $noreg :: (dereferenceable load 4 from @nelt)
5952B	  %104.sub_32bit:gr64_nosp = SHL32ri %104.sub_32bit:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
5984B	  %106:gr32 = LEA64_32r %104:gr64_nosp, 2, %104:gr64_nosp, 0, $noreg
6000B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6048B	  $rdi = LEA64r $rip, 1, $noreg, @sje, $noreg
6064B	  $esi = COPY %106:gr32
6080B	  $edx = MOV32ri -1
6096B	  CALL64pcrel32 @nr_init, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
6112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6128B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6144B	  PCN_STACKMAP 25, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, %106:gr32, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6192B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
6208B	  CALL64pcrel32 @coef, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $al, implicit-def $rsp, implicit-def $ssp
6224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6256B	  PCN_STACKMAP 26, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6304B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
6320B	  CALL64pcrel32 @geom1, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $al, implicit-def $rsp, implicit-def $ssp
6336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6368B	  PCN_STACKMAP 27, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
6432B	  CALL64pcrel32 @setdef, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $al, implicit-def $rsp, implicit-def $ssp
6448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6480B	  PCN_STACKMAP 28, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6496B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
6544B	  CALL64pcrel32 @setpcmo_pre, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $al, implicit-def $rsp, implicit-def $ssp
6560B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6592B	  PCN_STACKMAP 29, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6624B	  MOV64mi32 $rip, 1, $noreg, @time, $noreg, 0 :: (store 8 into @time)
6640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6656B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
6672B	  CALL64pcrel32 @mortar, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $al, implicit-def $rsp, implicit-def $ssp
6688B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6720B	  PCN_STACKMAP 30, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6736B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6768B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
6784B	  CALL64pcrel32 @prepwork, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $al, implicit-def $rsp, implicit-def $ssp
6800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6832B	  PCN_STACKMAP 31, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6848B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6896B	  $rdi = LEA64r %stack.13.ifmortar, 1, $noreg, 0, $noreg
6912B	  $esi = MOV32r0 implicit-def dead $eflags
6928B	  CALL64pcrel32 @adaptation, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp
6944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6976B	  PCN_STACKMAP 32, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6992B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7008B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
7024B	  JCC_1 %bb.19, 4, implicit $eflags
7040B	  JMP_1 %bb.18

7056B	bb.18.if.then47:
	; predecessors: %bb.17
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

7072B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7104B	  $edi = MOV32ri 2
7120B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
7136B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7152B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7168B	  PCN_STACKMAP 33, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
7184B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

7200B	bb.19.if.end48:
	; predecessors: %bb.17, %bb.18
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

7216B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7232B	  %111:gr32 = MOV32ri 1
7248B	  $edi = MOV32ri 1
7264B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
7280B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7312B	  PCN_STACKMAP 34, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
7328B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7344B	  MOV64mi32 $rip, 1, $noreg, @time, $noreg, 0 :: (store 8 into @time)
7360B	  MOV32mi %stack.3.step, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.step)
7376B	  %195:gr64 = LEA64r $rip, 1, $noreg, @ta1, $noreg
7408B	  undef %198.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
7472B	  %279:gr64 = MOV32ri64 1000
7488B	  %281:gr64 = LEA64r $rip, 1, $noreg, @ta2, $noreg
7504B	  %285:gr64 = LEA64r $rip, 1, $noreg, @size_e, $noreg
7520B	  %261:gr64 = LEA64r $rip, 1, $noreg, @trhs, $noreg
7536B	  %264:gr64 = MOV32ri64 200
7568B	  %242:gr64 = LEA64r $rip, 1, $noreg, @cbc, $noreg

7648B	bb.20.for.cond49:
	; predecessors: %bb.19, %bb.64
	  successors: %bb.21(0x7c000000), %bb.65(0x04000000); %bb.21(96.88%), %bb.65(3.12%)

7664B	  %112:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
7680B	  CMP32rm %112:gr32, $rip, 1, $noreg, @niter, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @niter)
7696B	  JCC_1 %bb.65, 15, implicit $eflags
7712B	  JMP_1 %bb.21

7728B	bb.21.for.body51:
	; predecessors: %bb.20
	  successors: %bb.22(0x40000000), %bb.28(0x40000000); %bb.22(50.00%), %bb.28(50.00%)

7744B	  CMP32mi8 %stack.3.step, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (dereferenceable load 4 from %ir.step)
7760B	  JCC_1 %bb.28, 5, implicit $eflags
7776B	  JMP_1 %bb.22

7792B	bb.22.if.then53:
	; predecessors: %bb.21
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

7808B	  %194:gr32 = MOV32rm $rip, 1, $noreg, @ntot, $noreg :: (dereferenceable load 4 from @ntot)
7824B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7840B	  $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
7872B	  $xmm0 = FsFLD0SD
7880B	  $esi = COPY %194:gr32
7888B	  CALL64pcrel32 @r_init, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp
7904B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7920B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
7936B	  PCN_STACKMAP 35, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %194:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
7952B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7968B	  MOV64mi32 $rip, 1, $noreg, @time, $noreg, 0 :: (store 8 into @time)
7984B	  MOV64mr %stack.11.nelt_tot, 1, $noreg, 0, $noreg, %198:gr64_with_sub_32bit_in_gr32temp :: (store 8 into %ir.nelt_tot)
8000B	  MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %111:gr32 :: (store 4 into %ir.i)

8016B	bb.23.for.cond54:
	; predecessors: %bb.22, %bb.26
	  successors: %bb.24(0x7c000000), %bb.27(0x04000000); %bb.24(96.88%), %bb.27(3.12%)

8032B	  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 10, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
8048B	  JCC_1 %bb.27, 15, implicit $eflags
8064B	  JMP_1 %bb.24

8080B	bb.24.for.body56:
	; predecessors: %bb.23
	  successors: %bb.25(0x40000000), %bb.26(0x40000000); %bb.25(50.00%), %bb.26(50.00%)

8096B	  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
8112B	  JCC_1 %bb.26, 4, implicit $eflags
8128B	  JMP_1 %bb.25

8144B	bb.25.if.then58:
	; predecessors: %bb.24
	  successors: %bb.26(0x80000000); %bb.26(100.00%)

8160B	  %289:gr32 = MOV32rm %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
8176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8192B	  $edi = COPY %289:gr32
8208B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
8224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
8240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
8256B	  PCN_STACKMAP 36, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %289:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
8272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

8288B	bb.26.if.end59:
	; predecessors: %bb.24, %bb.25
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

8304B	  INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
8320B	  JMP_1 %bb.23

8336B	bb.27.for.end62:
	; predecessors: %bb.23
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

8352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8368B	  $edi = MOV32ri 1
8384B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
8400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
8416B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
8432B	  PCN_STACKMAP 37, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
8448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

8464B	bb.28.if.end63:
	; predecessors: %bb.21, %bb.27
	  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)

8480B	  %203:gr32 = MOV32rm %stack.13.ifmortar, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ifmortar)
8496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8512B	  $edi = COPY %203:gr32
8528B	  CALL64pcrel32 @convect, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
8544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
8560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
8576B	  PCN_STACKMAP 38, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %203:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
8592B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8608B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
8624B	  JCC_1 %bb.30, 4, implicit $eflags
8640B	  JMP_1 %bb.29

8656B	bb.29.if.then65:
	; predecessors: %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

8672B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8688B	  $edi = MOV32ri 9
8704B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
8720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
8736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
8752B	  PCN_STACKMAP 39, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
8768B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

8784B	bb.30.if.end66:
	; predecessors: %bb.28, %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

8800B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8816B	  $rdi = LEA64r $rip, 1, $noreg, @tmort, $noreg
8832B	  $rsi = LEA64r $rip, 1, $noreg, @ta1, $noreg
8848B	  CALL64pcrel32 @transf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
8864B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
8880B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
8896B	  PCN_STACKMAP 40, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
8912B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8928B	  MOV32mi %stack.4.ie, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ie)

8944B	bb.31.for.cond67:
	; predecessors: %bb.30, %bb.32
	  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

8960B	  %207:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
8976B	  CMP32rm %207:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)
8992B	  JCC_1 %bb.33, 13, implicit $eflags
9008B	  JMP_1 %bb.32

9024B	bb.32.for.body69:
	; predecessors: %bb.31
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

9040B	  %278:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
9136B	  %286:gr32 = MOV32rm %285:gr64, 4, %278:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx75)
9140B	  %284:gr64_nosp = COPY %278:gr64_nosp
9144B	  %284:gr64_nosp = IMUL64rr %284:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
9152B	  %282:gr64 = LEA64r %281:gr64, 1, %284:gr64_nosp, 0, $noreg
9160B	  %284:gr64_nosp = ADD64rr %284:gr64_nosp(tied-def 0), %195:gr64, implicit-def dead $eflags
9168B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9176B	  $rdi = COPY %282:gr64
9184B	  $rsi = COPY %284:gr64_nosp
9200B	  $edx = COPY %286:gr32
9216B	  CALL64pcrel32 @laplacian, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
9232B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
9248B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
9264B	  PCN_STACKMAP 41, 0, 0, %stack.12.Class, 0, %282:gr64, %284:gr64_nosp, %282:gr64, %284:gr64_nosp, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %286:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
9280B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9296B	  INC32m %stack.4.ie, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ie), (dereferenceable load 4 from %ir.ie)
9312B	  JMP_1 %bb.31

9328B	bb.33.for.end78:
	; predecessors: %bb.31
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

9344B	  MOV32mi %stack.4.ie, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ie)

9360B	bb.34.for.cond79:
	; predecessors: %bb.33, %bb.44
	  successors: %bb.35(0x7c000000), %bb.45(0x04000000); %bb.35(96.88%), %bb.45(3.12%)

9376B	  %209:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
9392B	  CMP32rm %209:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)
9408B	  JCC_1 %bb.45, 13, implicit $eflags
9424B	  JMP_1 %bb.35

9440B	bb.35.for.body81:
	; predecessors: %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

9456B	  MOV32mi %stack.8.k, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.k)

9472B	bb.36.for.cond82:
	; predecessors: %bb.35, %bb.43
	  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

9488B	  CMP32mi8 %stack.8.k, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
9504B	  JCC_1 %bb.44, 15, implicit $eflags
9520B	  JMP_1 %bb.37

9536B	bb.37.for.body84:
	; predecessors: %bb.36
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

9552B	  MOV32mi %stack.7.j, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.j)

9568B	bb.38.for.cond85:
	; predecessors: %bb.37, %bb.42
	  successors: %bb.39(0x7c000000), %bb.43(0x04000000); %bb.39(96.88%), %bb.43(3.12%)

9584B	  CMP32mi8 %stack.7.j, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (dereferenceable load 4 from %ir.j)
9600B	  JCC_1 %bb.43, 15, implicit $eflags
9616B	  JMP_1 %bb.39

9632B	bb.39.for.body87:
	; predecessors: %bb.38
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

9648B	  MOV32mi %stack.6.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)

9664B	bb.40.for.cond88:
	; predecessors: %bb.39, %bb.41
	  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)

9680B	  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
9696B	  JCC_1 %bb.42, 15, implicit $eflags
9712B	  JMP_1 %bb.41

9728B	bb.41.for.body90:
	; predecessors: %bb.40
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

9744B	  %274:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
9776B	  %274:gr64_nosp = IMUL64rr %274:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
9792B	  %270:gr64 = LEA64r %261:gr64, 1, %274:gr64_nosp, 0, $noreg
9808B	  %265:gr64 = MOVSX64rm32 %stack.8.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
9840B	  %265:gr64 = IMUL64rr %265:gr64(tied-def 0), %264:gr64, implicit-def dead $eflags
9872B	  %270:gr64 = ADD64rr %270:gr64(tied-def 0), %265:gr64, implicit-def dead $eflags
9888B	  %268:gr64_nosp = MOVSX64rm32 %stack.7.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
9920B	  %268:gr64_nosp = SHL64ri %268:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
9936B	  %269:gr64 = LEA64r %268:gr64_nosp, 4, %268:gr64_nosp, 0, $noreg
9968B	  %270:gr64 = ADD64rr %270:gr64(tied-def 0), %269:gr64, implicit-def dead $eflags
9984B	  %271:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
10000B	  %277:fr64 = MOVSDrm_alt %270:gr64, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx98)
10032B	  %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %281:gr64, implicit-def dead $eflags
10064B	  %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %265:gr64, implicit-def dead $eflags
10096B	  %274:gr64_nosp = ADD64rr %274:gr64_nosp(tied-def 0), %269:gr64, implicit-def dead $eflags
10128B	  %277:fr64 = SUBSDrm %277:fr64(tied-def 0), %274:gr64_nosp, 8, %271:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
10144B	  MOVSDmr %270:gr64, 8, %271:gr64_nosp, 0, $noreg, %277:fr64 :: (store 8 into %ir.arrayidx114)
10160B	  INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
10176B	  JMP_1 %bb.40

10192B	bb.42.for.end117:
	; predecessors: %bb.40
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

10208B	  INC32m %stack.7.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j)
10224B	  JMP_1 %bb.38

10240B	bb.43.for.end120:
	; predecessors: %bb.38
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

10256B	  INC32m %stack.8.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k)
10272B	  JMP_1 %bb.36

10288B	bb.44.for.end123:
	; predecessors: %bb.36
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

10304B	  INC32m %stack.4.ie, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ie), (dereferenceable load 4 from %ir.ie)
10320B	  JMP_1 %bb.34

10336B	bb.45.for.end126:
	; predecessors: %bb.34
	  successors: %bb.46(0x50000000), %bb.47(0x30000000); %bb.46(62.50%), %bb.47(37.50%)

10352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10368B	  $rdi = LEA64r $rip, 1, $noreg, @rmor, $noreg
10384B	  $rsi = LEA64r $rip, 1, $noreg, @trhs, $noreg
10400B	  CALL64pcrel32 @transfb, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
10416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
10432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
10448B	  PCN_STACKMAP 42, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
10464B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10480B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
10496B	  JCC_1 %bb.47, 4, implicit $eflags
10512B	  JMP_1 %bb.46

10528B	bb.46.if.then128:
	; predecessors: %bb.45
	  successors: %bb.47(0x80000000); %bb.47(100.00%)

10544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10560B	  $edi = MOV32ri 9
10576B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
10592B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
10608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
10624B	  PCN_STACKMAP 43, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
10640B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

10656B	bb.47.if.end129:
	; predecessors: %bb.45, %bb.46
	  successors: %bb.48(0x80000000); %bb.48(100.00%)

10672B	  MOV32mi %stack.4.ie, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ie)

10688B	bb.48.for.cond130:
	; predecessors: %bb.47, %bb.54
	  successors: %bb.49(0x7c000000), %bb.55(0x04000000); %bb.49(96.88%), %bb.55(3.12%)

10704B	  %214:gr32 = MOV32rm %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
10720B	  CMP32rm %214:gr32, $rip, 1, $noreg, @nelt, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @nelt)
10736B	  JCC_1 %bb.55, 13, implicit $eflags
10752B	  JMP_1 %bb.49

10768B	bb.49.for.body132:
	; predecessors: %bb.48
	  successors: %bb.50(0x80000000); %bb.50(100.00%)

10784B	  MOV32mi %stack.5.iside, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.iside)

10800B	bb.50.for.cond133:
	; predecessors: %bb.49, %bb.53
	  successors: %bb.51(0x7c000000), %bb.54(0x04000000); %bb.51(96.88%), %bb.54(3.12%)

10816B	  CMP32mi8 %stack.5.iside, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.iside)
10832B	  JCC_1 %bb.54, 15, implicit $eflags
10848B	  JMP_1 %bb.51

10864B	bb.51.for.body135:
	; predecessors: %bb.50
	  successors: %bb.52(0x30000000), %bb.53(0x50000000); %bb.52(37.50%), %bb.53(62.50%)

10880B	  %240:gr64_nosp = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
10896B	  %241:gr64_nosp = LEA64r %240:gr64_nosp, 2, %240:gr64_nosp, 0, $noreg
10912B	  %243:gr64 = LEA64r %242:gr64, 8, %241:gr64_nosp, 0, $noreg
10928B	  %244:gr64_nosp = MOVSX64rm32 %stack.5.iside, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.iside)
10944B	  CMP32mi8 %243:gr64, 4, %244:gr64_nosp, 0, $noreg, 0, implicit-def $eflags :: (load 4 from %ir.arrayidx139)
10960B	  JCC_1 %bb.53, 5, implicit $eflags
10976B	  JMP_1 %bb.52

10992B	bb.52.if.then141:
	; predecessors: %bb.51
	  successors: %bb.53(0x80000000); %bb.53(100.00%)

11008B	  %249:gr64 = MOVSX64rm32 %stack.4.ie, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ie)
11040B	  %249:gr64 = IMUL64rr %249:gr64(tied-def 0), %279:gr64, implicit-def dead $eflags
11072B	  %249:gr64 = ADD64rr %249:gr64(tied-def 0), %261:gr64, implicit-def dead $eflags
11088B	  %250:gr32 = MOV32rm %stack.5.iside, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.iside)
11104B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11152B	  $xmm0 = FsFLD0SD
11156B	  $rdi = COPY %249:gr64
11160B	  $esi = COPY %250:gr32
11168B	  CALL64pcrel32 @facev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp
11184B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11200B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11216B	  PCN_STACKMAP 44, 0, 0, %stack.12.Class, 0, %249:gr64, %249:gr64, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %250:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
11232B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

11248B	bb.53.if.end145:
	; predecessors: %bb.51, %bb.52
	  successors: %bb.50(0x80000000); %bb.50(100.00%)

11264B	  INC32m %stack.5.iside, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.iside), (dereferenceable load 4 from %ir.iside)
11280B	  JMP_1 %bb.50

11296B	bb.54.for.end148:
	; predecessors: %bb.50
	  successors: %bb.48(0x80000000); %bb.48(100.00%)

11312B	  INC32m %stack.4.ie, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ie), (dereferenceable load 4 from %ir.ie)
11328B	  JMP_1 %bb.48

11344B	bb.55.for.end151:
	; predecessors: %bb.48
	  successors: %bb.56(0x50000000), %bb.57(0x30000000); %bb.56(62.50%), %bb.57(37.50%)

11360B	  %216:gr32 = MOV32rm $rip, 1, $noreg, @nmor, $noreg :: (dereferenceable load 4 from @nmor)
11376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11392B	  $rdi = LEA64r $rip, 1, $noreg, @rmor, $noreg
11408B	  $rsi = LEA64r $rip, 1, $noreg, @tmmor, $noreg
11424B	  $edx = COPY %216:gr32
11440B	  CALL64pcrel32 @col2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
11456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11472B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11488B	  PCN_STACKMAP 45, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %216:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
11504B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11520B	  %219:gr32 = MOV32rm %stack.13.ifmortar, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ifmortar)
11536B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11552B	  $edi = COPY %219:gr32
11568B	  CALL64pcrel32 @diffusion, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
11584B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11600B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11616B	  PCN_STACKMAP 46, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %219:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
11632B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11648B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
11664B	  JCC_1 %bb.57, 4, implicit $eflags
11680B	  JMP_1 %bb.56

11696B	bb.56.if.then153:
	; predecessors: %bb.55
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

11712B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11728B	  $edi = MOV32ri 10
11744B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
11760B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11776B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11792B	  PCN_STACKMAP 47, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
11808B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

11824B	bb.57.if.end154:
	; predecessors: %bb.55, %bb.56
	  successors: %bb.58(0x50000000), %bb.59(0x30000000); %bb.58(62.50%), %bb.59(37.50%)

11840B	  %221:gr32 = MOV32rm $rip, 1, $noreg, @ntot, $noreg :: (dereferenceable load 4 from @ntot)
11856B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11872B	  $rdi = LEA64r $rip, 1, $noreg, @ta1, $noreg
11888B	  $rsi = LEA64r $rip, 1, $noreg, @t, $noreg
11904B	  $edx = COPY %221:gr32
11920B	  CALL64pcrel32 @add2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit-def $rsp, implicit-def $ssp
11936B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11952B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11968B	  PCN_STACKMAP 48, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %221:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
11984B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
12000B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
12016B	  JCC_1 %bb.59, 4, implicit $eflags
12032B	  JMP_1 %bb.58

12048B	bb.58.if.then156:
	; predecessors: %bb.57
	  successors: %bb.59(0x80000000); %bb.59(100.00%)

12064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
12080B	  $edi = MOV32ri 10
12096B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
12112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
12128B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
12144B	  PCN_STACKMAP 49, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
12160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

12176B	bb.59.if.end157:
	; predecessors: %bb.57, %bb.58
	  successors: %bb.60(0x50000000), %bb.63(0x30000000); %bb.60(62.50%), %bb.63(37.50%)

12192B	  %226:fr64 = MOVSDrm_alt $rip, 1, $noreg, @time, $noreg :: (dereferenceable load 8 from @time)
12224B	  %226:fr64 = ADDSDrm %226:fr64(tied-def 0), $rip, 1, $noreg, @dtime, $noreg :: (dereferenceable load 8 from @dtime)
12240B	  MOVSDmr $rip, 1, $noreg, @time, $noreg, %226:fr64 :: (store 8 into @time)
12256B	  CMP32mi8 %stack.3.step, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.step)
12272B	  JCC_1 %bb.63, 4, implicit $eflags
12288B	  JMP_1 %bb.60

12304B	bb.60.land.lhs.true:
	; predecessors: %bb.59
	  successors: %bb.61(0x40000000), %bb.63(0x40000000); %bb.61(50.00%), %bb.63(50.00%)

12320B	  %227:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
12336B	  %228:gr32 = MOV32rm $rip, 1, $noreg, @fre, $noreg :: (dereferenceable load 4 from @fre)
12352B	  $eax = COPY %227:gr32
12368B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
12384B	  IDIV32r %228:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
12392B	  %230:gr32 = COPY $eax
12432B	  %230:gr32 = nsw IMUL32rr %230:gr32(tied-def 0), %228:gr32, implicit-def dead $eflags
12448B	  CMP32rr %230:gr32, %227:gr32, implicit-def $eflags
12464B	  JCC_1 %bb.63, 5, implicit $eflags
12480B	  JMP_1 %bb.61

12496B	bb.61.if.then161:
	; predecessors: %bb.60
	  successors: %bb.62(0x40000000), %bb.64(0x40000000); %bb.62(50.00%), %bb.64(50.00%)

12512B	  %232:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
12528B	  CMP32rm %232:gr32, $rip, 1, $noreg, @niter, $noreg, implicit-def $eflags :: (dereferenceable load 4 from @niter)
12544B	  JCC_1 %bb.64, 4, implicit $eflags
12560B	  JMP_1 %bb.62

12576B	bb.62.if.then163:
	; predecessors: %bb.61
	  successors: %bb.64(0x80000000); %bb.64(100.00%)

12592B	  %234:gr32 = MOV32rm %stack.3.step, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.step)
12608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
12624B	  $rdi = LEA64r %stack.13.ifmortar, 1, $noreg, 0, $noreg
12640B	  $esi = COPY %234:gr32
12656B	  CALL64pcrel32 @adaptation, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp
12672B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
12688B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
12704B	  PCN_STACKMAP 50, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %234:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
12720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
12736B	  JMP_1 %bb.64

12752B	bb.63.if.else165:
	; predecessors: %bb.59, %bb.60
	  successors: %bb.64(0x80000000); %bb.64(100.00%)

12768B	  MOV32mi %stack.13.ifmortar, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ifmortar)

12784B	bb.64.if.end166:
	; predecessors: %bb.63, %bb.61, %bb.62
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

12800B	  %237:fr64 = CVTSI2SDrm $rip, 1, $noreg, @nelt, $noreg :: (dereferenceable load 4 from @nelt)
12832B	  %237:fr64 = ADDSDrm %237:fr64(tied-def 0), %stack.11.nelt_tot, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nelt_tot)
12848B	  MOVSDmr %stack.11.nelt_tot, 1, $noreg, 0, $noreg, %237:fr64 :: (store 8 into %ir.nelt_tot)
12864B	  INC32m %stack.3.step, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.step), (dereferenceable load 4 from %ir.step)
12880B	  JMP_1 %bb.20

12896B	bb.65.for.end170:
	; predecessors: %bb.20
	  successors: %bb.66(0x50000000), %bb.78(0x30000000); %bb.66(62.50%), %bb.78(37.50%)

12912B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
12944B	  $edi = MOV32ri 1
12960B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
12976B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
12992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
13008B	  PCN_STACKMAP 51, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
13024B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
13040B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
13056B	  $edi = MOV32ri 1
13072B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
13088B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
13104B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
13120B	  PCN_STACKMAP 52, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
13136B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
13152B	  %115:fr64 = COPY killed $xmm0
13168B	  MOVSDmr %stack.10.tmax, 1, $noreg, 0, $noreg, %115:fr64 :: (store 8 into %ir.tmax)
13184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
13232B	  $rdi = LEA64r %stack.12.Class, 1, $noreg, 0, $noreg
13248B	  $rsi = LEA64r %stack.14.verified, 1, $noreg, 0, $noreg
13264B	  CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
13280B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
13296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
13312B	  PCN_STACKMAP 53, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
13328B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
13344B	  %119:gr32 = IMUL32rmi8 $rip, 1, $noreg, @nmxh, $noreg, 125, implicit-def dead $eflags :: (dereferenceable load 4 from @nmxh)
13376B	  %119:gr32 = ADD32ri8 %119:gr32(tied-def 0), 125, implicit-def dead $eflags
13392B	  %124:fr64 = CVTSI2SDrr %119:gr32
13424B	  %124:fr64 = MULSDrm %124:fr64(tied-def 0), %stack.11.nelt_tot, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nelt_tot)
13440B	  %122:fr64 = MOVSDrm_alt %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
13456B	  %123:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
13488B	  %123:fr64 = MULSDrr %123:fr64(tied-def 0), %122:fr64
13520B	  %124:fr64 = DIVSDrr %124:fr64(tied-def 0), %123:fr64
13536B	  MOVSDmr %stack.9.mflops, 1, $noreg, 0, $noreg, %124:fr64 :: (store 8 into %ir.mflops)
13552B	  %125:gr32 = MOVSX32rm8 %stack.12.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
13584B	  %127:gr32 = MOV32rm $rip, 1, $noreg, @niter, $noreg :: (dereferenceable load 4 from @niter)
13600B	  %128:gr32 = MOV32rm %stack.14.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
13616B	  ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
13632B	  %129:gr64 = LEA64r $rip, 1, $noreg, @ua__str_33__none__, $noreg
13664B	  MOV64mr $rsp, 1, $noreg, 80, $noreg, %129:gr64 :: (store 8 into stack + 80)
13680B	  %131:gr64 = LEA64r $rip, 1, $noreg, @ua__str_32__O3__mcmod, $noreg
13696B	  MOV64mr $rsp, 1, $noreg, 72, $noreg, %131:gr64 :: (store 8 into stack + 72)
13712B	  %132:gr64 = LEA64r $rip, 1, $noreg, @ua__str_31__g__Wall__, $noreg
13728B	  MOV64mr $rsp, 1, $noreg, 64, $noreg, %132:gr64 :: (store 8 into stack + 64)
13744B	  %133:gr64 = LEA64r $rip, 1, $noreg, @ua__str_30__I___commo, $noreg
13760B	  MOV64mr $rsp, 1, $noreg, 56, $noreg, %133:gr64 :: (store 8 into stack + 56)
13776B	  %134:gr64 = LEA64r $rip, 1, $noreg, @ua__str_29__lm_, $noreg
13792B	  MOV64mr $rsp, 1, $noreg, 48, $noreg, %134:gr64 :: (store 8 into stack + 48)
13808B	  %135:gr64 = LEA64r $rip, 1, $noreg, @ua__str_28___CC__, $noreg
13824B	  MOV64mr $rsp, 1, $noreg, 40, $noreg, %135:gr64 :: (store 8 into stack + 40)
13840B	  %136:gr64 = LEA64r $rip, 1, $noreg, @ua__str_27_gcc_, $noreg
13856B	  MOV64mr $rsp, 1, $noreg, 32, $noreg, %136:gr64 :: (store 8 into stack + 32)
13872B	  %137:gr64 = LEA64r $rip, 1, $noreg, @ua__str_26_03_Nov_201, $noreg
13888B	  MOV64mr $rsp, 1, $noreg, 24, $noreg, %137:gr64 :: (store 8 into stack + 24)
13904B	  %138:gr64 = LEA64r $rip, 1, $noreg, @ua__str_25_3_3_1_, $noreg
13920B	  MOV64mr $rsp, 1, $noreg, 16, $noreg, %138:gr64 :: (store 8 into stack + 16)
13936B	  MOV32mr $rsp, 1, $noreg, 8, $noreg, %128:gr32 :: (store 4 into stack + 8)
13952B	  %139:gr64 = LEA64r $rip, 1, $noreg, @ua__str_24_____coll__, $noreg
13968B	  MOV64mr $rsp, 1, $noreg, 0, $noreg, %139:gr64 :: (store 8 into stack)
14032B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_23_UA_, $noreg
14048B	  $esi = COPY %125:gr32
14064B	  $edx = MOV32ri 7
14080B	  $ecx = MOV32ri 0
14096B	  $r8d = MOV32r0 implicit-def dead $eflags
14112B	  $r9d = COPY %127:gr32
14128B	  $xmm0 = COPY %122:fr64
14144B	  $xmm1 = COPY %124:fr64
14160B	  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
14176B	  ADJCALLSTACKUP64 88, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
14192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
14208B	  PCN_STACKMAP 54, 0, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %125.sub_8bit:gr32, %127:gr32, %122:fr64, %124:fr64, %128:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
14224B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
14240B	  CMP32mi $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
14256B	  JCC_1 %bb.78, 4, implicit $eflags
14272B	  JMP_1 %bb.66

14288B	bb.66.if.then179:
	; predecessors: %bb.65
	  successors: %bb.67(0x80000000); %bb.67(100.00%)

14304B	  %143:gr32 = MOV32ri 1
14320B	  MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %143:gr32 :: (store 4 into %ir.i)
14336B	  %191:gr64 = LEA64r %stack.16.trecs, 1, $noreg, 0, $noreg

14352B	bb.67.for.cond180:
	; predecessors: %bb.66, %bb.68
	  successors: %bb.68(0x7c000000), %bb.69(0x04000000); %bb.68(96.88%), %bb.69(3.12%)

14368B	  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 10, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
14384B	  JCC_1 %bb.69, 15, implicit $eflags
14400B	  JMP_1 %bb.68

14416B	bb.68.for.body183:
	; predecessors: %bb.67
	  successors: %bb.67(0x80000000); %bb.67(100.00%)

14432B	  %188:gr32 = MOV32rm %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
14448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
14464B	  $edi = COPY %188:gr32
14480B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
14496B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
14512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
14528B	  PCN_STACKMAP 55, 0, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %188:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
14544B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
14560B	  %189:fr64 = COPY killed $xmm0
14576B	  %190:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
14592B	  MOVSDmr %191:gr64, 8, %190:gr64_nosp, 0, $noreg, %189:fr64 :: (store 8 into %ir.arrayidx186)
14608B	  INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
14624B	  JMP_1 %bb.67

14640B	bb.69.for.end189:
	; predecessors: %bb.67
	  successors: %bb.70(0x50000000), %bb.71(0x30000000); %bb.70(62.50%), %bb.71(37.50%)

14656B	  %146:fr64 = MOVSDrm_alt %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
14672B	  %147:fr64 = FsFLD0SD
14688B	  UCOMISDrr %146:fr64, %147:fr64, implicit-def $eflags
14704B	  JCC_1 %bb.71, 5, implicit $eflags
14720B	  JCC_1 %bb.71, 10, implicit $eflags
14736B	  JMP_1 %bb.70

14752B	bb.70.if.then192:
	; predecessors: %bb.69
	  successors: %bb.71(0x80000000); %bb.71(100.00%)

14768B	  %148:gr64 = MOV64ri 4607182418800017408
14784B	  MOV64mr %stack.10.tmax, 1, $noreg, 0, $noreg, %148:gr64 :: (store 8 into %ir.tmax)

14800B	bb.71.if.end193:
	; predecessors: %bb.69, %bb.70
	  successors: %bb.72(0x80000000); %bb.72(100.00%)

14816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
14880B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_34___SECTION_, $noreg
14896B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
14912B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
14928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
14944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
14960B	  PCN_STACKMAP 56, 0, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
14976B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
14992B	  %153:gr32 = MOV32ri 1
15008B	  MOV32mr %stack.6.i, 1, $noreg, 0, $noreg, %153:gr32 :: (store 4 into %ir.i)
15024B	  %158:gr64 = LEA64r %stack.17.t_names, 1, $noreg, 0, $noreg
15040B	  %160:gr64 = LEA64r %stack.16.trecs, 1, $noreg, 0, $noreg
15056B	  %291:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)

15152B	bb.72.for.cond195:
	; predecessors: %bb.71, %bb.77
	  successors: %bb.73(0x7c000000), %bb.78(0x04000000); %bb.73(96.88%), %bb.78(3.12%)

15168B	  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 10, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
15184B	  JCC_1 %bb.78, 15, implicit $eflags
15200B	  JMP_1 %bb.73

15216B	bb.73.for.body198:
	; predecessors: %bb.72
	  successors: %bb.74(0x40000000), %bb.75(0x40000000); %bb.74(50.00%), %bb.75(50.00%)

15232B	  %157:gr64_nosp = MOVSX64rm32 %stack.6.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
15248B	  %159:gr64 = MOV64rm %158:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx200)
15264B	  %161:fr64 = MOVSDrm_alt %160:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx204)
15280B	  %163:fr64 = COPY %161:fr64
15296B	  %163:fr64 = MULSDrr %163:fr64(tied-def 0), %291:fr64
15328B	  %163:fr64 = DIVSDrm %163:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
15344B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15360B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_35_____10s__9, $noreg
15376B	  $rsi = COPY %159:gr64
15392B	  $xmm0 = COPY %161:fr64
15408B	  $xmm1 = COPY %163:fr64
15424B	  $al = MOV8ri 2
15440B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
15456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
15472B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
15488B	  PCN_STACKMAP 57, 0, %163:fr64, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %159:gr64, %161:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
15504B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15520B	  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
15536B	  JCC_1 %bb.75, 5, implicit $eflags
15552B	  JMP_1 %bb.74

15568B	bb.74.if.then210:
	; predecessors: %bb.73
	  successors: %bb.77(0x80000000); %bb.77(100.00%)

15584B	  %181:fr64 = MOVSDrm_alt %stack.16.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx211)
15616B	  %181:fr64 = SUBSDrm %181:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
15632B	  MOVSDmr %stack.15.t2, 1, $noreg, 0, $noreg, %181:fr64 :: (store 8 into %ir.t2)
15648B	  %183:fr64 = COPY %181:fr64
15664B	  %183:fr64 = MULSDrr %183:fr64(tied-def 0), %291:fr64
15696B	  %183:fr64 = DIVSDrm %183:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
15712B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15728B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_36__________1, $noreg
15744B	  $rsi = LEA64r $rip, 1, $noreg, @ua__str_37_sub_convec, $noreg
15760B	  $xmm0 = COPY %181:fr64
15776B	  $xmm1 = COPY %183:fr64
15792B	  $al = MOV8ri 2
15808B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
15824B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
15840B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
15856B	  PCN_STACKMAP 58, 0, %183:fr64, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %181:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
15872B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15888B	  JMP_1 %bb.77

15904B	bb.75.if.else217:
	; predecessors: %bb.73
	  successors: %bb.76(0x40000000), %bb.77(0x40000000); %bb.76(50.00%), %bb.77(50.00%)

15920B	  CMP32mi8 %stack.6.i, 1, $noreg, 0, $noreg, 7, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
15936B	  JCC_1 %bb.77, 5, implicit $eflags
15952B	  JMP_1 %bb.76

15968B	bb.76.if.then220:
	; predecessors: %bb.75
	  successors: %bb.77(0x80000000); %bb.77(100.00%)

15984B	  %173:fr64 = MOVSDrm_alt %stack.16.trecs, 1, $noreg, 40, $noreg :: (dereferenceable load 8 from %ir.arrayidx221)
16016B	  %173:fr64 = SUBSDrm %173:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 48, $noreg :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
16048B	  %173:fr64 = SUBSDrm %173:fr64(tied-def 0), %stack.16.trecs, 1, $noreg, 56, $noreg :: (dereferenceable load 8 from %ir.arrayidx224)
16064B	  MOVSDmr %stack.15.t2, 1, $noreg, 0, $noreg, %173:fr64 :: (store 8 into %ir.t2)
16080B	  %175:fr64 = COPY %173:fr64
16096B	  %175:fr64 = MULSDrr %175:fr64(tied-def 0), %291:fr64
16128B	  %175:fr64 = DIVSDrm %175:fr64(tied-def 0), %stack.10.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
16144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
16160B	  $rdi = LEA64r $rip, 1, $noreg, @ua__str_36__________1, $noreg
16176B	  $rsi = LEA64r $rip, 1, $noreg, @ua__str_38_sub_diffus, $noreg
16192B	  $xmm0 = COPY %173:fr64
16208B	  $xmm1 = COPY %175:fr64
16224B	  $al = MOV8ri 2
16240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
16256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
16272B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
16288B	  PCN_STACKMAP 59, 0, %175:fr64, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %173:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
16304B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

16320B	bb.77.if.end230:
	; predecessors: %bb.75, %bb.76, %bb.74
	  successors: %bb.72(0x80000000); %bb.72(100.00%)

16336B	  INC32m %stack.6.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
16352B	  JMP_1 %bb.72

16368B	bb.78.if.end234:
	; predecessors: %bb.65, %bb.72

16400B	  $eax = MOV32r0 implicit-def dead $eflags
16416B	  RET 0, $eax

# End machine code for function main.

warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 20 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 20 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 20 across call to printf
