Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
  fi#12: size=8, align=8, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=8, align=8, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
  fi#16: size=8, align=8, at location [SP+8]
  fi#17: size=8, align=8, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=4, align=4, at location [SP+8]
  fi#22: size=4, align=4, at location [SP+8]
  fi#23: size=4, align=4, at location [SP+8]
  fi#24: size=4, align=4, at location [SP+8]
  fi#25: size=4, align=4, at location [SP+8]
  fi#26: size=4, align=4, at location [SP+8]
  fi#27: size=4, align=4, at location [SP+8]
  fi#28: size=4, align=4, at location [SP+8]
  fi#29: size=24, align=16, at location [SP+8]
  fi#30: size=16, align=16, at location [SP+8]
  fi#31: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 2.000000e+00, align=8
  cp#1: 3.100000e+01, align=8
  cp#2: 1.000000e+00, align=8
  cp#3: 0x41D2309CE5400000, align=8
  cp#4: <double 0x7FFFFFFFFFFFFFFF, double 0x7FFFFFFFFFFFFFFF>, align=16
  cp#5: 1.000000e-08, align=8
  cp#6: 1.000000e+06, align=8
  cp#7: 1.000000e+02, align=8
  cp#8: -2.000000e+00, align=8

bb.0.entry:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)

  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  %13:vr128 = MOVAPSrm $rip, 1, $noreg, @ep___const_main_dum_, $noreg, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)`); ep.c:82:12
  MOVAPSmr %stack.29.dum, 1, $noreg, 0, $noreg, %13:vr128, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  %14:gr64 = MOV64rm $rip, 1, $noreg, @ep___const_main_dum_ + 16, $noreg, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)` + 16, align 16); ep.c:82:12
  MOV64mr %stack.29.dum, 1, $noreg, 16, $noreg, %14:gr64, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !106; ep.c:87:15
  $rdi = LEA64r $rip, 1, $noreg, @ep__str_timer_flag, $noreg, debug-location !106; ep.c:87:15
  $rsi = LEA64r $rip, 1, $noreg, @ep__str_1_r_, $noreg, debug-location !106; ep.c:87:15
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !106; ep.c:87:15
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !106; ep.c:87:15
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !108; ep.c:87:13
  PCN_STACKMAP 0, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, 0, %stack.31.fp, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !108 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.31.fp), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:87:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !108; ep.c:87:13
  %17:gr64 = COPY killed $rax, debug-location !106; ep.c:87:15
  MOV64mr %stack.31.fp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
  TEST64rr %17:gr64, %17:gr64, implicit-def $eflags, debug-location !109; ep.c:87:41
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !110; ep.c:87:9
  JMP_1 %bb.1, debug-location !110; ep.c:87:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, debug-location !111 :: (store 4 into %ir.timers_enabled); ep.c:88:24
  JMP_1 %bb.3, debug-location !113; ep.c:89:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %18:gr32 = MOV32ri 1
  MOV32mr %stack.28.timers_enabled, 1, $noreg, 0, $noreg, %18:gr32, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  %19:gr64 = MOV64rm %stack.31.fp, 1, $noreg, 0, $noreg, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !117; ep.c:92:9
  $rdi = COPY %19:gr64, debug-location !117; ep.c:92:9
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !117; ep.c:92:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !117; ep.c:92:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 1, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %19:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !119; ep.c:102:30
  %21:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %22:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  $xmm0 = COPY %21:fr64, debug-location !119; ep.c:102:30
  $xmm1 = COPY %22:fr64, debug-location !119; ep.c:102:30
  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !119; ep.c:102:30
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !119; ep.c:102:30
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !120; ep.c:102:5
  PCN_STACKMAP 2, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.30.size, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !120 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:102:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !120; ep.c:102:5
  %23:fr64 = COPY killed $xmm0, debug-location !119; ep.c:102:30
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !120; ep.c:102:5
  $rdi = LEA64r %stack.30.size, 1, $noreg, 0, $noreg, debug-location !120; ep.c:102:5
  $rsi = LEA64r $rip, 1, $noreg, @ep__str_2__15_0lf_, $noreg, debug-location !120; ep.c:102:5
  $xmm0 = COPY %23:fr64, debug-location !120; ep.c:102:5
  $al = MOV8ri 1, debug-location !120; ep.c:102:5
  CALL64pcrel32 @sprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !120; ep.c:102:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !120; ep.c:102:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !121; ep.c:103:7
  PCN_STACKMAP 3, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.30.size, 0, %23:fr64, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !121 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:103:7
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !121; ep.c:103:7
  %28:gr32 = MOV32ri 14
  MOV32mr %stack.26.j, 1, $noreg, 0, $noreg, %28:gr32, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  CMP8mi %stack.30.size, 1, $noreg, 14, $noreg, 46, implicit-def $eflags, debug-location !125 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:17
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !126; ep.c:104:9
  JMP_1 %bb.4, debug-location !126; ep.c:104:9

bb.4.if.then6:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  DEC32m %stack.26.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !127 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); ep.c:105:10

bb.5.if.end7:
; predecessors: %bb.3, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %31:gr64 = MOVSX64rm32 %stack.26.j, 1, $noreg, 0, $noreg, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  %32:gr32temp = MOV32r0 implicit-def dead $eflags
  %34:gr64_nosp = LEA64r %stack.30.size, 1, $noreg, 0, $noreg
  MOV8mr %31:gr64, 1, %34:gr64_nosp, 1, $noreg, %32.sub_8bit:gr32temp, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !133; ep.c:107:5
  $rdi = LEA64r $rip, 1, $noreg, @ep__str_3____NAS_Par, $noreg, debug-location !133; ep.c:107:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !133; ep.c:107:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !133; ep.c:107:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !133; ep.c:107:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !134; ep.c:108:61
  PCN_STACKMAP 4, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !134 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:108:61
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !134; ep.c:108:61
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !135; ep.c:108:5
  $rdi = LEA64r $rip, 1, $noreg, @ep__str_4___Number_o, $noreg, debug-location !135; ep.c:108:5
  $rsi = LEA64r %stack.30.size, 1, $noreg, 0, $noreg, debug-location !135; ep.c:108:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !135; ep.c:108:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !135; ep.c:108:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !135; ep.c:108:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !136; ep.c:110:14
  PCN_STACKMAP 5, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.30.size, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !136 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:110:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !136; ep.c:110:14
  MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  %39:gr32 = MOV32ri 16384
  MOV32mr %stack.18.np, 1, $noreg, 0, $noreg, %39:gr32, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  %40:gr64 = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139; ep.c:127:24
  %41:fr64 = MOVSDrm_alt %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  %42:gr64 = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !140; ep.c:127:33
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; ep.c:127:5
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !141; ep.c:127:5
  $rsi = LEA64r %stack.29.dum, 1, $noreg, 0, $noreg, debug-location !141; ep.c:127:5
  $xmm0 = COPY %41:fr64, debug-location !141; ep.c:127:5
  $rdx = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !141; ep.c:127:5
  CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $rsi, implicit killed $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !141; ep.c:127:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !141; ep.c:127:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !142; ep.c:128:22
  PCN_STACKMAP 6, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, %42:gr64, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %41:fr64, implicit-def dead early-clobber $r11, debug-location !142 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:128:22
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !142; ep.c:128:22
  %44:fr64 = MOVSDrm_alt %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !144; ep.c:128:14
  $rdi = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !144; ep.c:128:14
  $xmm0 = COPY %44:fr64, debug-location !144; ep.c:128:14
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !144; ep.c:128:14
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !144; ep.c:128:14
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !145; ep.c:128:5
  PCN_STACKMAP 7, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, %40:gr64, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %44:fr64, implicit-def dead early-clobber $r11, debug-location !145 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:128:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !145; ep.c:128:5
  %45:fr64 = COPY killed $xmm0, debug-location !144; ep.c:128:14
  MOVSDmr %stack.29.dum, 1, $noreg, 0, $noreg, %45:fr64, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  %261:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
  %262:gr64 = MOV64ri -3135276447761457362

bb.6.for.cond:
; predecessors: %bb.5, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  CMP32mi %stack.19.i, 1, $noreg, 0, $noreg, 131071, implicit-def $eflags, debug-location !152 :: (dereferenceable load 4 from %ir.i); ep.c:129:19
  JCC_1 %bb.8, 15, implicit killed $eflags, debug-location !153; ep.c:129:5
  JMP_1 %bb.7, debug-location !153; ep.c:129:5

bb.7.for.body:
; predecessors: %bb.6
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %272:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  MOV64mr %261:gr64, 8, %272:gr64_nosp, 0, $noreg, %262:gr64, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  %263:gr32 = LEA64_32r %272:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !158; ep.c:129:30
  MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %263:gr32, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  JMP_1 %bb.6, debug-location !159; ep.c:129:5

bb.8.for.end:
; predecessors: %bb.6
  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

  %0:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  %48:gr8 = MOV8ri 1
  TEST8rr %48:gr8, %48:gr8, implicit-def $eflags, debug-location !164; ep.c:132:12
  JCC_1 %bb.10, 4, implicit killed $eflags, debug-location !164; ep.c:132:12

bb.9:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %268:fr64 = SQRTSDr %0:fr64
  JMP_1 %bb.11

bb.10.call.sqrt:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
  $xmm0 = COPY %0:fr64, debug-location !164; ep.c:132:12
  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !164; ep.c:132:12
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
  %268:fr64 = COPY killed $xmm0, debug-location !164; ep.c:132:12

bb.11.for.end.split:
; predecessors: %bb.10, %bb.9
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
  PCN_STACKMAP 8, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %0:fr64, implicit-def dead early-clobber $r11, debug-location !164 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:132:12
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
  $xmm0 = COPY %268:fr64, debug-location !164; ep.c:132:12
  CALL64pcrel32 @log, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !164; ep.c:132:12
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !165; ep.c:132:10
  PCN_STACKMAP 9, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, %268:fr64, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !165 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:132:10
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !165; ep.c:132:10
  %50:fr64 = COPY killed $xmm0, debug-location !164; ep.c:132:12
  MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %50:fr64, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; ep.c:134:5
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !166; ep.c:134:5
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !166; ep.c:134:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !166; ep.c:134:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !167; ep.c:135:5
  PCN_STACKMAP 10, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !167 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:135:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !167; ep.c:135:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !167; ep.c:135:5
  $edi = MOV32ri 1, debug-location !167; ep.c:135:5
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !167; ep.c:135:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !167; ep.c:135:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !168; ep.c:136:5
  PCN_STACKMAP 11, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !168 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:136:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !168; ep.c:136:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !168; ep.c:136:5
  $edi = MOV32ri 2, debug-location !168; ep.c:136:5
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !168; ep.c:136:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !168; ep.c:136:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !169; ep.c:137:5
  PCN_STACKMAP 12, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !169 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:137:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !169; ep.c:137:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !169; ep.c:137:5
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !169; ep.c:137:5
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !169; ep.c:137:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !169; ep.c:137:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !170; ep.c:139:5
  PCN_STACKMAP 13, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !170 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:139:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !170; ep.c:139:5
  %54:gr64 = MOV64ri 4742906807993761792
  MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %54:gr64, debug-location !171 :: (store 8 into %ir.t1); ep.c:141:8
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !172; ep.c:142:5
  %57:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !172; ep.c:142:5
  $rsi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !172; ep.c:142:5
  $xmm0 = COPY %57:fr64, debug-location !172; ep.c:142:5
  $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !172; ep.c:142:5
  CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $rsi, implicit killed $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !172; ep.c:142:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !172; ep.c:142:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !173; ep.c:148:8
  PCN_STACKMAP 14, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !173 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:148:8
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !173; ep.c:148:8
  MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %54:gr64, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !174 :: (store 4 into %ir.i); ep.c:150:12

bb.12.for.cond26:
; predecessors: %bb.11, %bb.13
  successors: %bb.13(0x7c000000), %bb.14(0x04000000); %bb.13(96.88%), %bb.14(3.12%)

  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 16, implicit-def $eflags, debug-location !179 :: (dereferenceable load 4 from %ir.i); ep.c:150:19
  JCC_1 %bb.14, 15, implicit killed $eflags, debug-location !180; ep.c:150:5
  JMP_1 %bb.13, debug-location !180; ep.c:150:5

bb.13.for.body29:
; predecessors: %bb.12
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %256:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !181 :: (dereferenceable load 8 from %ir.t1); ep.c:151:26
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !183; ep.c:151:14
  $rdi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !183; ep.c:151:14
  $xmm0 = COPY %256:fr64, debug-location !183; ep.c:151:14
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !183; ep.c:151:14
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !183; ep.c:151:14
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !184; ep.c:151:12
  PCN_STACKMAP 15, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %256:fr64, implicit-def dead early-clobber $r11, debug-location !184 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:151:12
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !184; ep.c:151:12
  %258:fr64 = COPY killed $xmm0, debug-location !183; ep.c:151:14
  MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %258:fr64, debug-location !184 :: (store 8 into %ir.t2); ep.c:151:12
  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !185 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:150:30
  JMP_1 %bb.12, debug-location !186; ep.c:150:5

bb.14.for.end33:
; predecessors: %bb.12
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %60:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
  MOVSDmr %stack.11.an, 1, $noreg, 0, $noreg, %60:fr64, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
  %61:gr64 = MOV64ri 4733340128880099328
  MOV64mr %stack.12.tt, 1, $noreg, 0, $noreg, %61:gr64, debug-location !191 :: (store 8 into %ir.tt); ep.c:155:8
  MOV64mi32 %stack.13.gc, 1, $noreg, 0, $noreg, 0, debug-location !192 :: (store 8 into %ir.gc); ep.c:156:8
  undef %63.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
  MOV64mr %stack.8.sx, 1, $noreg, 0, $noreg, %63:gr64_with_sub_32bit_in_gr32temp, debug-location !193 :: (store 8 into %ir.sx); ep.c:157:8
  MOV64mr %stack.9.sy, 1, $noreg, 0, $noreg, %63:gr64_with_sub_32bit_in_gr32temp, debug-location !194 :: (store 8 into %ir.sy); ep.c:158:8
  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !195 :: (store 4 into %ir.i); ep.c:160:12
  %254:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg

bb.15.for.cond34:
; predecessors: %bb.14, %bb.16
  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags, debug-location !200 :: (dereferenceable load 4 from %ir.i); ep.c:160:19
  JCC_1 %bb.17, 15, implicit killed $eflags, debug-location !201; ep.c:160:5
  JMP_1 %bb.16, debug-location !201; ep.c:160:5

bb.16.for.body37:
; predecessors: %bb.15
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %273:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  MOV64mi32 %254:gr64, 8, %273:gr64_nosp, 0, $noreg, 0, debug-location !205 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  %255:gr32 = LEA64_32r %273:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !206; ep.c:160:26
  MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %255:gr32, debug-location !206 :: (store 4 into %ir.i); ep.c:160:26
  JMP_1 %bb.15, debug-location !207; ep.c:160:5

bb.17.for.end42:
; predecessors: %bb.15
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %66:gr32 = MOV32ri -1
  MOV32mr %stack.25.k_offset, 1, $noreg, 0, $noreg, %66:gr32, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
  %67:gr32 = MOV32ri 1
  MOV32mr %stack.23.k, 1, $noreg, 0, $noreg, %67:gr32, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
  %182:gr64 = MOV64ri 4733340128880099328
  %201:gr64_nosp = LEA64r $rip, 1, $noreg, @x, $noreg
  %204:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  %216:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  %264:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.8, $noreg :: (load 8 from constant-pool)
  %226:fr64 = FsFLD0SD
  %231:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
  %265:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
  %245:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg

bb.18.for.cond43:
; predecessors: %bb.17, %bb.44
  successors: %bb.19(0x7c000000), %bb.45(0x04000000); %bb.19(96.88%), %bb.45(3.12%)

  %68:gr32 = MOV32rm %stack.23.k, 1, $noreg, 0, $noreg, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  CMP32rm %68:gr32, %stack.18.np, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !217 :: (dereferenceable load 4 from %ir.np); ep.c:172:19
  JCC_1 %bb.45, 15, implicit killed $eflags, debug-location !218; ep.c:172:5
  JMP_1 %bb.19, debug-location !218; ep.c:172:5

bb.19.for.body46:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %181:gr32 = MOV32rm %stack.25.k_offset, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  %181:gr32 = nsw ADD32rm %181:gr32(tied-def 0), %stack.23.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !222 :: (dereferenceable load 4 from %ir.k); ep.c:173:23
  MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %181:gr32, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
  MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %182:gr64, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
  %183:fr64 = MOVSDrm_alt %stack.11.an, 1, $noreg, 0, $noreg, debug-location !225 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %183:fr64, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12
  MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %67:gr32, debug-location !227 :: (store 4 into %ir.i); ep.c:179:16

bb.20.for.cond48:
; predecessors: %bb.19, %bb.24
  successors: %bb.21(0x7c000000), %bb.25(0x04000000); %bb.21(96.88%), %bb.25(3.12%)

  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 100, implicit-def $eflags, debug-location !232 :: (dereferenceable load 4 from %ir.i); ep.c:179:23
  JCC_1 %bb.25, 15, implicit killed $eflags, debug-location !233; ep.c:179:9
  JMP_1 %bb.21, debug-location !233; ep.c:179:9

bb.21.for.body51:
; predecessors: %bb.20
  successors: %bb.22(0x40000000), %bb.23(0x40000000); %bb.22(50.00%), %bb.23(50.00%)

  %187:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  %189:gr32 = COPY %187:gr32, debug-location !236; ep.c:180:21
  %189:gr32 = SHR32ri %189:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !236; ep.c:180:21
  %189:gr32 = ADD32rr %189:gr32(tied-def 0), %187:gr32, implicit-def dead $eflags, debug-location !236; ep.c:180:21
  %190:gr32 = COPY %189:gr32, debug-location !236; ep.c:180:21
  %190:gr32 = SAR32r1 %190:gr32(tied-def 0), implicit-def dead $eflags, debug-location !236; ep.c:180:21
  MOV32mr %stack.20.ik, 1, $noreg, 0, $noreg, %190:gr32, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16
  %189:gr32 = AND32ri8 %189:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !240; ep.c:181:20
  CMP32rr %189:gr32, %187:gr32, implicit-def $eflags, debug-location !242; ep.c:181:26
  JCC_1 %bb.23, 4, implicit killed $eflags, debug-location !243; ep.c:181:17
  JMP_1 %bb.22, debug-location !243; ep.c:181:17

bb.22.if.then54:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  %193:fr64 = MOVSDrm_alt %stack.3.t2, 1, $noreg, 0, $noreg, debug-location !244 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !245; ep.c:182:22
  $rdi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !245; ep.c:182:22
  $xmm0 = COPY %193:fr64, debug-location !245; ep.c:182:22
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !245; ep.c:182:22
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !245; ep.c:182:22
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !246; ep.c:182:20
  PCN_STACKMAP 16, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %193:fr64, implicit-def dead early-clobber $r11, debug-location !246 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:182:20
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !246; ep.c:182:20
  %195:fr64 = COPY killed $xmm0, debug-location !245; ep.c:182:22
  MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %195:fr64, debug-location !246 :: (store 8 into %ir.t3); ep.c:182:20

bb.23.if.end56:
; predecessors: %bb.21, %bb.22
  successors: %bb.25(0x04000000), %bb.24(0x7c000000); %bb.25(3.12%), %bb.24(96.88%)

  CMP32mi8 %stack.20.ik, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !250 :: (dereferenceable load 4 from %ir.ik); ep.c:183:20
  JCC_1 %bb.25, 4, implicit killed $eflags, debug-location !251; ep.c:183:17
  JMP_1 %bb.24, debug-location !251; ep.c:183:17

bb.24.if.end60:
; predecessors: %bb.23
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %196:fr64 = MOVSDrm_alt %stack.3.t2, 1, $noreg, 0, $noreg, debug-location !252 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !253; ep.c:185:18
  $rdi = LEA64r %stack.3.t2, 1, $noreg, 0, $noreg, debug-location !253; ep.c:185:18
  $xmm0 = COPY %196:fr64, debug-location !253; ep.c:185:18
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !253; ep.c:185:18
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !253; ep.c:185:18
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !254; ep.c:185:16
  PCN_STACKMAP 17, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %196:fr64, implicit-def dead early-clobber $r11, debug-location !254 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:185:16
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !254; ep.c:185:16
  %198:fr64 = COPY killed $xmm0, debug-location !253; ep.c:185:18
  MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %198:fr64, debug-location !254 :: (store 8 into %ir.t3); ep.c:185:16
  %199:gr32 = MOV32rm %stack.20.ik, 1, $noreg, 0, $noreg, debug-location !255 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
  MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %199:gr32, debug-location !256 :: (store 4 into %ir.kk); ep.c:186:16
  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !257 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:179:32
  JMP_1 %bb.20, debug-location !258; ep.c:179:9

bb.25.for.end64:
; predecessors: %bb.20, %bb.23
  successors: %bb.26(0x50000000), %bb.27(0x30000000); %bb.26(62.50%), %bb.27(37.50%)

  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !261 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:192:13
  JCC_1 %bb.27, 4, implicit killed $eflags, debug-location !263; ep.c:192:13
  JMP_1 %bb.26, debug-location !263; ep.c:192:13

bb.26.if.then65:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; ep.c:193:13
  $edi = MOV32ri 2, debug-location !264; ep.c:193:13
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !264; ep.c:193:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !264; ep.c:193:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !264; ep.c:193:13
  PCN_STACKMAP 18, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !264 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:193:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; ep.c:193:13

bb.27.if.end66:
; predecessors: %bb.25, %bb.26
  successors: %bb.28(0x50000000), %bb.29(0x30000000); %bb.28(62.50%), %bb.29(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !265; ep.c:194:9
  $edi = MOV32ri 131072, debug-location !265; ep.c:194:9
  $rsi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !265; ep.c:194:9
  $xmm0 = COPY %204:fr64, debug-location !265; ep.c:194:9
  $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !265; ep.c:194:9
  CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $rsi, implicit killed $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !265; ep.c:194:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !265; ep.c:194:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !266; ep.c:195:13
  PCN_STACKMAP 19, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !266 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:195:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !266; ep.c:195:13
  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !266 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:195:13
  JCC_1 %bb.29, 4, implicit killed $eflags, debug-location !268; ep.c:195:13
  JMP_1 %bb.28, debug-location !268; ep.c:195:13

bb.28.if.then68:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !269; ep.c:196:13
  $edi = MOV32ri 2, debug-location !269; ep.c:196:13
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !269; ep.c:196:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !269; ep.c:196:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !269; ep.c:196:13
  PCN_STACKMAP 20, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !269 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:196:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !269; ep.c:196:13

bb.29.if.end69:
; predecessors: %bb.27, %bb.28
  successors: %bb.30(0x50000000), %bb.31(0x30000000); %bb.30(62.50%), %bb.31(37.50%)

  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !270 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:203:13
  JCC_1 %bb.31, 4, implicit killed $eflags, debug-location !272; ep.c:203:13
  JMP_1 %bb.30, debug-location !272; ep.c:203:13

bb.30.if.then71:
; predecessors: %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !273; ep.c:204:13
  $edi = MOV32ri 1, debug-location !273; ep.c:204:13
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !273; ep.c:204:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !273; ep.c:204:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !273; ep.c:204:13
  PCN_STACKMAP 21, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !273 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:204:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !273; ep.c:204:13

bb.31.if.end72:
; predecessors: %bb.29, %bb.30
  successors: %bb.32(0x80000000); %bb.32(100.00%)

  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !274 :: (store 4 into %ir.i); ep.c:206:16

bb.32.for.cond73:
; predecessors: %bb.31, %bb.41
  successors: %bb.33(0x7c000000), %bb.42(0x04000000); %bb.33(96.88%), %bb.42(3.12%)

  CMP32mi %stack.19.i, 1, $noreg, 0, $noreg, 65535, implicit-def $eflags, debug-location !279 :: (dereferenceable load 4 from %ir.i); ep.c:206:23
  JCC_1 %bb.42, 15, implicit killed $eflags, debug-location !280; ep.c:206:9
  JMP_1 %bb.33, debug-location !280; ep.c:206:9

bb.33.for.body76:
; predecessors: %bb.32
  successors: %bb.34(0x40000000), %bb.41(0x40000000); %bb.34(50.00%), %bb.41(50.00%)

  %212:gr64 = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  %212:gr64 = SHL64ri %212:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !290; ep.c:208:32
  %217:fr64 = MOVSDrm_alt %212:gr64, 1, %201:gr64_nosp, 0, $noreg, debug-location !284 :: (load 8 from %ir.arrayidx79); ep.c:207:24
  %219:fr64 = MOVSDrm_alt %212:gr64, 1, %201:gr64_nosp, 8, $noreg, debug-location !291 :: (load 8 from %ir.arrayidx84); ep.c:208:24
  %217:fr64 = ADDSDrr %217:fr64(tied-def 0), %217:fr64, debug-location !285; ep.c:207:22
  %217:fr64 = SUBSDrr %217:fr64(tied-def 0), %216:fr64, debug-location !286; ep.c:207:33
  MOVSDmr %stack.6.x1, 1, $noreg, 0, $noreg, %217:fr64, debug-location !287 :: (store 8 into %ir.x1); ep.c:207:16
  %219:fr64 = ADDSDrr %219:fr64(tied-def 0), %219:fr64, debug-location !292; ep.c:208:22
  %219:fr64 = SUBSDrr %219:fr64(tied-def 0), %216:fr64, debug-location !293; ep.c:208:37
  MOVSDmr %stack.7.x2, 1, $noreg, 0, $noreg, %219:fr64, debug-location !294 :: (store 8 into %ir.x2); ep.c:208:16
  %217:fr64 = MULSDrr %217:fr64(tied-def 0), %217:fr64, debug-location !297; ep.c:209:21
  %219:fr64 = MULSDrr %219:fr64(tied-def 0), %219:fr64, debug-location !300; ep.c:209:31
  %219:fr64 = ADDSDrr %219:fr64(tied-def 0), %217:fr64, debug-location !301; ep.c:209:26
  MOVSDmr %stack.2.t1, 1, $noreg, 0, $noreg, %219:fr64, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16
  UCOMISDrr %216:fr64, %219:fr64, implicit-def $eflags, debug-location !305; ep.c:210:20
  JCC_1 %bb.41, 2, implicit killed $eflags, debug-location !306; ep.c:210:17
  JMP_1 %bb.34, debug-location !306; ep.c:210:17

bb.34.if.then92:
; predecessors: %bb.33
  successors: %bb.35(0x40000000), %bb.36(0x40000000); %bb.35(50.00%), %bb.36(50.00%)

  %223:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !307 :: (dereferenceable load 8 from %ir.t1); ep.c:211:38
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !309; ep.c:211:34
  $xmm0 = COPY %223:fr64, debug-location !309; ep.c:211:34
  CALL64pcrel32 @log, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !309; ep.c:211:34
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !309; ep.c:211:34
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !310; ep.c:211:32
  PCN_STACKMAP 22, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %223:fr64, implicit-def dead early-clobber $r11, debug-location !310 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:211:32
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !310; ep.c:211:32
  %4:fr64 = COPY killed $xmm0, debug-location !309; ep.c:211:34
  %4:fr64 = MULSDrr %4:fr64(tied-def 0), %264:fr64, debug-location !310; ep.c:211:32
  %4:fr64 = DIVSDrm %4:fr64(tied-def 0), %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !312 :: (dereferenceable load 8 from %ir.t1); ep.c:211:42
  UCOMISDrr %4:fr64, %226:fr64, implicit-def $eflags, debug-location !314; ep.c:211:20
  JCC_1 %bb.36, 2, implicit killed $eflags, debug-location !314; ep.c:211:20

bb.35:
; predecessors: %bb.34
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  %269:vr128 = SQRTSDr %4:fr64
  JMP_1 %bb.37

bb.36.call.sqrt1:
; predecessors: %bb.34
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !314; ep.c:211:20
  $xmm0 = COPY %4:fr64, debug-location !314; ep.c:211:20
  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !314; ep.c:211:20
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !314; ep.c:211:20
  %269:vr128 = COPY killed $xmm0, debug-location !314; ep.c:211:20

bb.37.if.then92.split:
; predecessors: %bb.36, %bb.35
  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !314; ep.c:211:20
  PCN_STACKMAP 23, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, %4:fr64, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !314 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:211:20
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !314; ep.c:211:20
  MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %269:vr128, debug-location !314 :: (store 8 into %ir.t2); ep.c:211:20
  %232:vr128 = MOVSDrm_alt %stack.6.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
  %232:vr128 = MULSDrr %232:vr128(tied-def 0), %269:vr128, debug-location !317; ep.c:212:26
  MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %232:vr128, debug-location !318 :: (store 8 into %ir.t3); ep.c:212:20
  %269:vr128 = MULSDrm %269:vr128(tied-def 0), %stack.7.x2, 1, $noreg, 0, $noreg, debug-location !321 :: (dereferenceable load 8 from %ir.x2); ep.c:213:26
  MOVSDmr %stack.5.t4, 1, $noreg, 0, $noreg, %269:vr128, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
  %232:vr128 = PANDrr %232:vr128(tied-def 0), %231:vr128, debug-location !323; ep.c:214:21
  %269:vr128 = PANDrr %269:vr128(tied-def 0), %231:vr128, debug-location !323; ep.c:214:21
  UCOMISDrr %232:vr128, %269:vr128, implicit-def $eflags, debug-location !323; ep.c:214:21
  JCC_1 %bb.39, 6, implicit killed $eflags, debug-location !323; ep.c:214:21
  JMP_1 %bb.38, debug-location !323; ep.c:214:21

bb.38.cond.true:
; predecessors: %bb.37
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  %270:vr128 = MOVSDrm %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.t3); ep.c:214:21
  %270:vr128 = PANDrr %270:vr128(tied-def 0), %265:vr128, debug-location !323; ep.c:214:21
  JMP_1 %bb.40, debug-location !323; ep.c:214:21

bb.39.cond.false:
; predecessors: %bb.37
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  %270:vr128 = MOVSDrm %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.t4); ep.c:214:21
  %270:vr128 = PANDrr %270:vr128(tied-def 0), %265:vr128, debug-location !323; ep.c:214:21

bb.40.cond.end:
; predecessors: %bb.39, %bb.38
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  %243:gr32 = CVTTSD2SIrr %270:vr128, debug-location !323; ep.c:214:21
  MOV32mr %stack.22.l, 1, $noreg, 0, $noreg, %243:gr32, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
  %244:gr64_nosp = MOVSX64rr32 %243:gr32, debug-location !325; ep.c:215:26
  %247:fr64 = MOVSDrm_alt %245:gr64, 8, %244:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx103)
  %247:fr64 = ADDSDrr %247:fr64(tied-def 0), %216:fr64, debug-location !327; ep.c:215:29
  MOVSDmr %245:gr64, 8, %244:gr64_nosp, 0, $noreg, %247:fr64, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
  %249:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !331 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
  %249:fr64 = ADDSDrm %249:fr64(tied-def 0), %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !333 :: (dereferenceable load 8 from %ir.t3); ep.c:216:25
  MOVSDmr %stack.8.sx, 1, $noreg, 0, $noreg, %249:fr64, debug-location !334 :: (store 8 into %ir.sx); ep.c:216:20
  %251:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !335 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
  %251:fr64 = ADDSDrm %251:fr64(tied-def 0), %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !337 :: (dereferenceable load 8 from %ir.t4); ep.c:217:25
  MOVSDmr %stack.9.sy, 1, $noreg, 0, $noreg, %251:fr64, debug-location !338 :: (store 8 into %ir.sy); ep.c:217:20

bb.41.if.end109:
; predecessors: %bb.33, %bb.40
  successors: %bb.32(0x80000000); %bb.32(100.00%)

  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !340 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:206:30
  JMP_1 %bb.32, debug-location !341; ep.c:206:9

bb.42.for.end112:
; predecessors: %bb.32
  successors: %bb.43(0x50000000), %bb.44(0x30000000); %bb.43(62.50%), %bb.44(37.50%)

  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !344 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:221:13
  JCC_1 %bb.44, 4, implicit killed $eflags, debug-location !346; ep.c:221:13
  JMP_1 %bb.43, debug-location !346; ep.c:221:13

bb.43.if.then114:
; predecessors: %bb.42
  successors: %bb.44(0x80000000); %bb.44(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !347; ep.c:222:13
  $edi = MOV32ri 1, debug-location !347; ep.c:222:13
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !347; ep.c:222:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !347; ep.c:222:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !347; ep.c:222:13
  PCN_STACKMAP 24, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !347 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:222:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !347; ep.c:222:13

bb.44.if.end115:
; predecessors: %bb.42, %bb.43
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  INC32m %stack.23.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !348 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); ep.c:172:27
  JMP_1 %bb.18, debug-location !349; ep.c:172:5

bb.45.for.end118:
; predecessors: %bb.18
  successors: %bb.46(0x80000000); %bb.46(100.00%)

  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
  %177:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg

bb.46.for.cond119:
; predecessors: %bb.45, %bb.47
  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)

  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags, debug-location !357 :: (dereferenceable load 4 from %ir.i); ep.c:225:19
  JCC_1 %bb.48, 15, implicit killed $eflags, debug-location !358; ep.c:225:5
  JMP_1 %bb.47, debug-location !358; ep.c:225:5

bb.47.for.body122:
; predecessors: %bb.46
  successors: %bb.46(0x80000000); %bb.46(100.00%)

  %178:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  %276:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  %178:fr64 = ADDSDrm %178:fr64(tied-def 0), %177:gr64, 8, %276:gr64_nosp, 0, $noreg, debug-location !363 :: (load 8 from %ir.arrayidx124); ep.c:226:17
  MOVSDmr %stack.13.gc, 1, $noreg, 0, $noreg, %178:fr64, debug-location !364 :: (store 8 into %ir.gc); ep.c:226:12
  %179:gr32 = LEA64_32r %276:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !365; ep.c:225:26
  MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %179:gr32, debug-location !365 :: (store 4 into %ir.i); ep.c:225:26
  JMP_1 %bb.46, debug-location !366; ep.c:225:5

bb.48.for.end128:
; predecessors: %bb.46
  successors: %bb.49(0x50000000), %bb.53(0x30000000); %bb.49(62.50%), %bb.53(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !369; ep.c:231:5
  %72:gr32temp = MOV32r0 implicit-def dead $eflags
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !369; ep.c:231:5
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !369; ep.c:231:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !369; ep.c:231:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !370; ep.c:232:10
  PCN_STACKMAP 25, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $r11, debug-location !370 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:232:10
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !370; ep.c:232:10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !370; ep.c:232:10
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !370; ep.c:232:10
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !370; ep.c:232:10
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !370; ep.c:232:10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !371; ep.c:232:8
  PCN_STACKMAP 26, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $r11, debug-location !371 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:232:8
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !371; ep.c:232:8
  %73:fr64 = COPY killed $xmm0, debug-location !370; ep.c:232:10
  MOVSDmr %stack.10.tm, 1, $noreg, 0, $noreg, %73:fr64, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
  MOV32mi %stack.24.nit, 1, $noreg, 0, $noreg, 0, debug-location !372 :: (store 4 into %ir.nit); ep.c:234:9
  %74:gr32 = MOV32ri 1
  MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %74:gr32, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
  %75:gr64 = MOV64ri 4675776847449726827
  MOV64mr %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, %75:gr64, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  %76:gr64 = MOV64ri -4550329231111044107
  MOV64mr %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, %76:gr64, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  TEST8rr %72.sub_8bit:gr32temp, %72.sub_8bit:gr32temp, implicit-def $eflags, debug-location !383; ep.c:268:9
  JCC_1 %bb.53, 5, implicit killed $eflags, debug-location !383; ep.c:268:9
  JMP_1 %bb.49, debug-location !383; ep.c:268:9

bb.49.if.then133:
; predecessors: %bb.48
  successors: %bb.51(0x40000000), %bb.50(0x40000000); %bb.51(50.00%), %bb.50(50.00%)

  %82:vr128 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !384 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
  %80:fr64 = MOVSDrm_alt %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, debug-location !386 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
  %82:vr128 = SUBSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !387; ep.c:269:27
  %82:vr128 = DIVSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !389; ep.c:269:46
  %84:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg, debug-location !390 :: (load 16 from constant-pool); ep.c:269:18
  %82:vr128 = PANDrr %82:vr128(tied-def 0), %84:vr128, debug-location !390; ep.c:269:18
  MOVLPDmr %stack.16.sx_err, 1, $noreg, 0, $noreg, %82:vr128, debug-location !391 :: (store 8 into %ir.sx_err); ep.c:269:16
  %90:vr128 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !392 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
  %88:fr64 = MOVSDrm_alt %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, debug-location !393 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
  %90:vr128 = SUBSDrr %90:vr128(tied-def 0), %88:fr64, debug-location !394; ep.c:270:27
  %90:vr128 = DIVSDrr %90:vr128(tied-def 0), %88:fr64, debug-location !396; ep.c:270:46
  %90:vr128 = PANDrr %90:vr128(tied-def 0), %84:vr128, debug-location !397; ep.c:270:18
  MOVLPDmr %stack.17.sy_err, 1, $noreg, 0, $noreg, %90:vr128, debug-location !398 :: (store 8 into %ir.sy_err); ep.c:270:16
  %94:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  UCOMISDrr %94:fr64, %82:vr128, implicit-def $eflags, debug-location !400; ep.c:271:29
  JCC_1 %bb.51, 3, implicit killed $eflags, debug-location !401; ep.c:271:41

bb.50:
; predecessors: %bb.49
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  %93:gr32temp = MOV32r0 implicit-def dead $eflags
  JMP_1 %bb.52

bb.51.land.rhs:
; predecessors: %bb.49
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  %95:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  UCOMISDrm %95:fr64, %stack.17.sy_err, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !403 :: (dereferenceable load 8 from %ir.sy_err); ep.c:271:52
  undef %93.sub_8bit:gr32temp = SETCCr 3, implicit killed $eflags, debug-location !403; ep.c:271:52

bb.52.land.end:
; predecessors: %bb.51, %bb.50
  successors: %bb.53(0x80000000); %bb.53(100.00%)

  %96:gr32 = MOVZX32rr8 %93.sub_8bit:gr32temp, debug-location !401; ep.c:271:41
  MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %96:gr32, debug-location !405 :: (store 4 into %ir.verified); ep.c:271:18

bb.53.if.end142:
; predecessors: %bb.48, %bb.52
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !407; ep.c:274:12
  %97:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %98:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  $xmm0 = COPY %97:fr64, debug-location !407; ep.c:274:12
  $xmm1 = COPY %98:fr64, debug-location !407; ep.c:274:12
  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !407; ep.c:274:12
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !407; ep.c:274:12
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !408; ep.c:274:30
  PCN_STACKMAP 27, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $r11, debug-location !408 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:274:30
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !408; ep.c:274:30
  %101:fr64 = COPY killed $xmm0, debug-location !407; ep.c:274:12
  %101:fr64 = DIVSDrm %101:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !409 :: (dereferenceable load 8 from %ir.tm); ep.c:274:28
  %101:fr64 = DIVSDrm %101:fr64(tied-def 0), $rip, 1, $noreg, %const.6, $noreg, debug-location !410 :: (load 8 from constant-pool); ep.c:274:33
  MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %101:fr64, debug-location !411 :: (store 8 into %ir.Mops); ep.c:274:10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !412; ep.c:276:5
  $rdi = LEA64r $rip, 1, $noreg, @ep__str_5__EP_Benchm, $noreg, debug-location !412; ep.c:276:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !412; ep.c:276:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !412; ep.c:276:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !412; ep.c:276:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !413; ep.c:277:35
  PCN_STACKMAP 28, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $r11, debug-location !413 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:277:35
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !413; ep.c:277:35
  %106:fr64 = MOVSDrm_alt %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !413 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !414; ep.c:277:5
  $rdi = LEA64r $rip, 1, $noreg, @ep__str_6_CPU_Time__, $noreg, debug-location !414; ep.c:277:5
  $xmm0 = COPY %106:fr64, debug-location !414; ep.c:277:5
  $al = MOV8ri 1, debug-location !414; ep.c:277:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !414; ep.c:277:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !414; ep.c:277:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !415; ep.c:278:5
  PCN_STACKMAP 29, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %106:fr64, implicit-def dead early-clobber $r11, debug-location !415 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:278:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !415; ep.c:278:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !415; ep.c:278:5
  $rdi = LEA64r $rip, 1, $noreg, @ep__str_7_N___2__5d_, $noreg, debug-location !415; ep.c:278:5
  $esi = MOV32ri 30, debug-location !415; ep.c:278:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !415; ep.c:278:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !415; ep.c:278:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !415; ep.c:278:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !416; ep.c:279:46
  PCN_STACKMAP 30, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $r11, debug-location !416 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:279:46
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !416; ep.c:279:46
  %113:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !416 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !417; ep.c:279:5
  $rdi = LEA64r $rip, 1, $noreg, @ep__str_8_No__Gaussi, $noreg, debug-location !417; ep.c:279:5
  $xmm0 = COPY %113:fr64, debug-location !417; ep.c:279:5
  $al = MOV8ri 1, debug-location !417; ep.c:279:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !417; ep.c:279:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !417; ep.c:279:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !418; ep.c:280:42
  PCN_STACKMAP 31, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %113:fr64, implicit-def dead early-clobber $r11, debug-location !418 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:280:42
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !418; ep.c:280:42
  %116:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
  %117:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !419 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !420; ep.c:280:5
  $rdi = LEA64r $rip, 1, $noreg, @ep__str_9_Sums____25, $noreg, debug-location !420; ep.c:280:5
  $xmm0 = COPY %116:fr64, debug-location !420; ep.c:280:5
  $xmm1 = COPY %117:fr64, debug-location !420; ep.c:280:5
  $al = MOV8ri 2, debug-location !420; ep.c:280:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !420; ep.c:280:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !420; ep.c:280:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !421; ep.c:281:5
  PCN_STACKMAP 32, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %116:fr64, %117:fr64, implicit-def dead early-clobber $r11, debug-location !421 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:281:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !421; ep.c:281:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !421; ep.c:281:5
  $rdi = LEA64r $rip, 1, $noreg, @ep__str_10_Counts____, $noreg, debug-location !421; ep.c:281:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !421; ep.c:281:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !421; ep.c:281:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !421; ep.c:281:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !422; ep.c:282:12
  PCN_STACKMAP 33, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $r11, debug-location !422 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:282:12
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !422; ep.c:282:12
  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !422 :: (store 4 into %ir.i); ep.c:282:12
  %169:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg

bb.54.for.cond152:
; predecessors: %bb.53, %bb.55
  successors: %bb.55(0x7c000000), %bb.56(0x04000000); %bb.55(96.88%), %bb.56(3.12%)

  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags, debug-location !427 :: (dereferenceable load 4 from %ir.i); ep.c:282:19
  JCC_1 %bb.56, 15, implicit killed $eflags, debug-location !428; ep.c:282:5
  JMP_1 %bb.55, debug-location !428; ep.c:282:5

bb.55.for.body155:
; predecessors: %bb.54
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  %167:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  %170:fr64 = MOVSDrm_alt %169:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !432 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !433; ep.c:283:9
  $rdi = LEA64r $rip, 1, $noreg, @ep__str_11__3d_15_0lf, $noreg, debug-location !433; ep.c:283:9
  $esi = COPY %167.sub_32bit:gr64_nosp, debug-location !433; ep.c:283:9
  $xmm0 = COPY %170:fr64, debug-location !433; ep.c:283:9
  $al = MOV8ri 1, debug-location !433; ep.c:283:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !433; ep.c:283:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !433; ep.c:283:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !434; ep.c:284:5
  PCN_STACKMAP 34, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %167.sub_32bit:gr64_nosp, %170:fr64, implicit-def dead early-clobber $r11, debug-location !434 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:284:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !434; ep.c:284:5
  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !435 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:282:26
  JMP_1 %bb.54, debug-location !436; ep.c:282:5

bb.56.for.end161:
; predecessors: %bb.54
  successors: %bb.57(0x50000000), %bb.60(0x30000000); %bb.57(62.50%), %bb.60(37.50%)

  %125:gr32 = MOV32rm %stack.24.nit, 1, $noreg, 0, $noreg, debug-location !439 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  %126:fr64 = MOVSDrm_alt %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !440 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  %127:fr64 = MOVSDrm_alt %stack.1.Mops, 1, $noreg, 0, $noreg, debug-location !441 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  %128:gr32 = MOV32rm %stack.27.verified, 1, $noreg, 0, $noreg, debug-location !442 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !443; ep.c:286:5
  %129:gr64 = LEA64r $rip, 1, $noreg, @ep__str_22_randdp_, $noreg, debug-location !443; ep.c:286:5
  MOV64mr $rsp, 1, $noreg, 80, $noreg, %129:gr64, debug-location !443 :: (store 8 into stack + 80); ep.c:286:5
  %131:gr64 = LEA64r $rip, 1, $noreg, @ep__str_21__O3__mcmod, $noreg, debug-location !443; ep.c:286:5
  MOV64mr $rsp, 1, $noreg, 72, $noreg, %131:gr64, debug-location !443 :: (store 8 into stack + 72); ep.c:286:5
  %132:gr64 = LEA64r $rip, 1, $noreg, @ep__str_20__g__Wall__, $noreg, debug-location !443; ep.c:286:5
  MOV64mr $rsp, 1, $noreg, 64, $noreg, %132:gr64, debug-location !443 :: (store 8 into stack + 64); ep.c:286:5
  %133:gr64 = LEA64r $rip, 1, $noreg, @ep__str_19__I___commo, $noreg, debug-location !443; ep.c:286:5
  MOV64mr $rsp, 1, $noreg, 56, $noreg, %133:gr64, debug-location !443 :: (store 8 into stack + 56); ep.c:286:5
  %134:gr64 = LEA64r $rip, 1, $noreg, @ep__str_18__lm_, $noreg, debug-location !443; ep.c:286:5
  MOV64mr $rsp, 1, $noreg, 48, $noreg, %134:gr64, debug-location !443 :: (store 8 into stack + 48); ep.c:286:5
  %135:gr64 = LEA64r $rip, 1, $noreg, @ep__str_17___CC__, $noreg, debug-location !443; ep.c:286:5
  MOV64mr $rsp, 1, $noreg, 40, $noreg, %135:gr64, debug-location !443 :: (store 8 into stack + 40); ep.c:286:5
  %136:gr64 = LEA64r $rip, 1, $noreg, @ep__str_16_gcc_, $noreg, debug-location !443; ep.c:286:5
  MOV64mr $rsp, 1, $noreg, 32, $noreg, %136:gr64, debug-location !443 :: (store 8 into stack + 32); ep.c:286:5
  %137:gr64 = LEA64r $rip, 1, $noreg, @ep__str_15_03_Nov_201, $noreg, debug-location !443; ep.c:286:5
  MOV64mr $rsp, 1, $noreg, 24, $noreg, %137:gr64, debug-location !443 :: (store 8 into stack + 24); ep.c:286:5
  %138:gr64 = LEA64r $rip, 1, $noreg, @ep__str_14_3_3_1_, $noreg, debug-location !443; ep.c:286:5
  MOV64mr $rsp, 1, $noreg, 16, $noreg, %138:gr64, debug-location !443 :: (store 8 into stack + 16); ep.c:286:5
  MOV32mr $rsp, 1, $noreg, 8, $noreg, %128:gr32, debug-location !443 :: (store 4 into stack + 8); ep.c:286:5
  %139:gr64 = LEA64r $rip, 1, $noreg, @ep__str_13_Random_num, $noreg, debug-location !443; ep.c:286:5
  MOV64mr $rsp, 1, $noreg, 0, $noreg, %139:gr64, debug-location !443 :: (store 8 into stack); ep.c:286:5
  $rdi = LEA64r $rip, 1, $noreg, @ep__str_12_EP_, $noreg, debug-location !443; ep.c:286:5
  $esi = MOV32ri 66, debug-location !443; ep.c:286:5
  $edx = MOV32ri 31, debug-location !443; ep.c:286:5
  $ecx = MOV32ri 0, debug-location !443; ep.c:286:5
  $r8d = MOV32r0 implicit-def dead $eflags, debug-location !443; ep.c:286:5
  $r9d = COPY %125:gr32, debug-location !443; ep.c:286:5
  $xmm0 = COPY %126:fr64, debug-location !443; ep.c:286:5
  $xmm1 = COPY %127:fr64, debug-location !443; ep.c:286:5
  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !443; ep.c:286:5
  ADJCALLSTACKUP64 88, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !443; ep.c:286:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !444; ep.c:290:9
  PCN_STACKMAP 35, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, %125:gr32, %126:fr64, %127:fr64, %128:gr32, implicit-def dead early-clobber $r11, debug-location !444 :: (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:290:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !444; ep.c:290:9
  CMP32mi %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !444 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:290:9
  JCC_1 %bb.60, 4, implicit killed $eflags, debug-location !446; ep.c:290:9
  JMP_1 %bb.57, debug-location !446; ep.c:290:9

bb.57.if.then163:
; predecessors: %bb.56
  successors: %bb.58(0x40000000), %bb.59(0x40000000); %bb.58(50.00%), %bb.59(50.00%)

  %144:fr64 = FsFLD0SD
  UCOMISDrm %144:fr64, %stack.10.tm, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !450 :: (dereferenceable load 8 from %ir.tm); ep.c:291:16
  JCC_1 %bb.59, 2, implicit killed $eflags, debug-location !451; ep.c:291:13
  JMP_1 %bb.58, debug-location !451; ep.c:291:13

bb.58.if.then166:
; predecessors: %bb.57
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  %145:gr64 = MOV64ri 4607182418800017408
  MOV64mr %stack.10.tm, 1, $noreg, 0, $noreg, %145:gr64, debug-location !452 :: (store 8 into %ir.tm); ep.c:292:16

bb.59.if.end167:
; predecessors: %bb.57, %bb.58
  successors: %bb.60(0x80000000); %bb.60(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !454; ep.c:293:14
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !454; ep.c:293:14
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !454; ep.c:293:14
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !454; ep.c:293:14
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !455; ep.c:293:12
  PCN_STACKMAP 36, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, implicit-def dead early-clobber $r11, debug-location !455 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:293:12
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !455; ep.c:293:12
  %147:fr64 = COPY killed $xmm0, debug-location !454; ep.c:293:14
  MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %147:fr64, debug-location !455 :: (store 8 into %ir.tt); ep.c:293:12
  %163:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)
  %150:fr64 = COPY %147:fr64, debug-location !458; ep.c:294:62
  %150:fr64 = MULSDrr %150:fr64(tied-def 0), %163:fr64, debug-location !458; ep.c:294:62
  %150:fr64 = DIVSDrm %150:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !460 :: (dereferenceable load 8 from %ir.tm); ep.c:294:70
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !461; ep.c:294:9
  $rdi = LEA64r $rip, 1, $noreg, @ep__str_23__Total_tim, $noreg, debug-location !461; ep.c:294:9
  $xmm0 = COPY %147:fr64, debug-location !461; ep.c:294:9
  $xmm1 = COPY %150:fr64, debug-location !461; ep.c:294:9
  $al = MOV8ri 2, debug-location !461; ep.c:294:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !461; ep.c:294:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !461; ep.c:294:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !462; ep.c:295:14
  PCN_STACKMAP 37, 0, %150:fr64, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, %147:fr64, implicit-def dead early-clobber $r11, debug-location !462 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:295:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !462; ep.c:295:14
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !462; ep.c:295:14
  $edi = MOV32ri 1, debug-location !462; ep.c:295:14
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !462; ep.c:295:14
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !462; ep.c:295:14
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !463; ep.c:295:12
  PCN_STACKMAP 38, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, implicit-def dead early-clobber $r11, debug-location !463 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:295:12
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !463; ep.c:295:12
  %155:fr64 = COPY killed $xmm0, debug-location !462; ep.c:295:14
  MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %155:fr64, debug-location !463 :: (store 8 into %ir.tt); ep.c:295:12
  %157:fr64 = COPY %155:fr64, debug-location !466; ep.c:296:60
  %157:fr64 = MULSDrr %157:fr64(tied-def 0), %163:fr64, debug-location !466; ep.c:296:60
  %157:fr64 = DIVSDrm %157:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !468 :: (dereferenceable load 8 from %ir.tm); ep.c:296:68
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !469; ep.c:296:9
  $rdi = LEA64r $rip, 1, $noreg, @ep__str_24_Gaussian_p, $noreg, debug-location !469; ep.c:296:9
  $xmm0 = COPY %155:fr64, debug-location !469; ep.c:296:9
  $xmm1 = COPY %157:fr64, debug-location !469; ep.c:296:9
  $al = MOV8ri 2, debug-location !469; ep.c:296:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !469; ep.c:296:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !469; ep.c:296:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !470; ep.c:297:14
  PCN_STACKMAP 39, 0, %157:fr64, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, %155:fr64, implicit-def dead early-clobber $r11, debug-location !470 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:297:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !470; ep.c:297:14
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !470; ep.c:297:14
  $edi = MOV32ri 2, debug-location !470; ep.c:297:14
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !470; ep.c:297:14
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !470; ep.c:297:14
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !471; ep.c:297:12
  PCN_STACKMAP 40, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, implicit-def dead early-clobber $r11, debug-location !471 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:297:12
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !471; ep.c:297:12
  %161:fr64 = COPY killed $xmm0, debug-location !470; ep.c:297:14
  MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %161:fr64, debug-location !471 :: (store 8 into %ir.tt); ep.c:297:12
  %163:fr64 = MULSDrr %163:fr64(tied-def 0), %161:fr64, debug-location !474; ep.c:298:60
  %163:fr64 = DIVSDrm %163:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !476 :: (dereferenceable load 8 from %ir.tm); ep.c:298:68
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !477; ep.c:298:9
  $rdi = LEA64r $rip, 1, $noreg, @ep__str_25_Random_num, $noreg, debug-location !477; ep.c:298:9
  $xmm0 = COPY %161:fr64, debug-location !477; ep.c:298:9
  $xmm1 = COPY %163:fr64, debug-location !477; ep.c:298:9
  $al = MOV8ri 2, debug-location !477; ep.c:298:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !477; ep.c:298:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !477; ep.c:298:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !478; ep.c:299:5
  PCN_STACKMAP 41, 0, %163:fr64, %161:fr64, implicit-def dead early-clobber $r11, debug-location !478; ep.c:299:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !478; ep.c:299:5

bb.60.if.end180:
; predecessors: %bb.56, %bb.59

  $eax = MOV32r0 implicit-def dead $eflags, debug-location !479; ep.c:301:5
  RET 0, killed $eax, debug-location !479; ep.c:301:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %17:gr64 = COPY killed $rax, debug-location !106; ep.c:87:15
    To: JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !110; ep.c:87:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %17:gr64 = COPY killed $rax, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%17
    SU(1): Data Latency=0 Reg=%17
  Single Issue       : false;
SU(1):   MOV64mr %stack.31.fp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%17
  Single Issue       : false;
SU(2):   TEST64rr %17:gr64, %17:gr64, implicit-def $eflags, debug-location !109; ep.c:87:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !110; ep.c:87:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %17:gr64, %17:gr64, implicit-def $eflags, debug-location !109; ep.c:87:41
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.31.fp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %17:gr64 = COPY killed $rax, debug-location !106; ep.c:87:15
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %17:gr64 = COPY killed $rax, debug-location !106; ep.c:87:15
SU(1):   MOV64mr %stack.31.fp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
SU(2):   TEST64rr %17:gr64, %17:gr64, implicit-def $eflags, debug-location !109; ep.c:87:41

********** MI Scheduling **********
main:%bb.0 entry
  From: $rdi = LEA64r $rip, 1, $noreg, @ep__str_timer_flag, $noreg, debug-location !106; ep.c:87:15
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !106; ep.c:87:15
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_timer_flag, $noreg, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ep__str_1_r_, $noreg, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !106; ep.c:87:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @ep__str_1_r_, $noreg, debug-location !106; ep.c:87:15
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ep__str_timer_flag, $noreg, debug-location !106; ep.c:87:15
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_timer_flag, $noreg, debug-location !106; ep.c:87:15
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ep__str_1_r_, $noreg, debug-location !106; ep.c:87:15

********** MI Scheduling **********
main:%bb.0 entry
  From: MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !106; ep.c:87:15
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %13:vr128 = MOVAPSrm $rip, 1, $noreg, @ep___const_main_dum_, $noreg, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)`); ep.c:82:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%13
  Single Issue       : false;
SU(2):   MOVAPSmr %stack.29.dum, 1, $noreg, 0, $noreg, %13:vr128, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%13
  Single Issue       : false;
SU(3):   %14:gr64 = MOV64rm $rip, 1, $noreg, @ep___const_main_dum_ + 16, $noreg, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)` + 16, align 16); ep.c:82:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=4 Reg=%14
  Single Issue       : false;
SU(4):   MOV64mr %stack.29.dum, 1, $noreg, 16, $noreg, %14:gr64, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%14
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr %stack.29.dum, 1, $noreg, 16, $noreg, %14:gr64, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %14:gr64 = MOV64rm $rip, 1, $noreg, @ep___const_main_dum_ + 16, $noreg, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)` + 16, align 16); ep.c:82:12
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOVAPSmr %stack.29.dum, 1, $noreg, 0, $noreg, %13:vr128, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %13:vr128 = MOVAPSrm $rip, 1, $noreg, @ep___const_main_dum_, $noreg, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)`); ep.c:82:12
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
SU(1):   %13:vr128 = MOVAPSrm $rip, 1, $noreg, @ep___const_main_dum_, $noreg, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)`); ep.c:82:12
SU(2):   MOVAPSmr %stack.29.dum, 1, $noreg, 0, $noreg, %13:vr128, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
SU(3):   %14:gr64 = MOV64rm $rip, 1, $noreg, @ep___const_main_dum_ + 16, $noreg, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)` + 16, align 16); ep.c:82:12
SU(4):   MOV64mr %stack.29.dum, 1, $noreg, 16, $noreg, %14:gr64, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12

********** MI Scheduling **********
main:%bb.2 if.else
  From: %18:gr32 = MOV32ri 1
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !117; ep.c:92:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %18:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%18
  Single Issue       : false;
SU(1):   MOV32mr %stack.28.timers_enabled, 1, $noreg, 0, $noreg, %18:gr32, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%18
  Single Issue       : false;
SU(2):   %19:gr64 = MOV64rm %stack.31.fp, 1, $noreg, 0, $noreg, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !117; ep.c:92:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %19:gr64 = MOV64rm %stack.31.fp, 1, $noreg, 0, $noreg, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.28.timers_enabled, 1, $noreg, 0, $noreg, %18:gr32, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %18:gr32 = MOV32ri 1
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %18:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.28.timers_enabled, 1, $noreg, 0, $noreg, %18:gr32, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
SU(2):   %19:gr64 = MOV64rm %stack.31.fp, 1, $noreg, 0, $noreg, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16

********** MI Scheduling **********
main:%bb.3 if.end
  From: %28:gr32 = MOV32ri 14
    To: JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !126; ep.c:104:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %28:gr32 = MOV32ri 14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%28
  Single Issue       : false;
SU(1):   MOV32mr %stack.26.j, 1, $noreg, 0, $noreg, %28:gr32, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%28
  Single Issue       : false;
SU(2):   CMP8mi %stack.30.size, 1, $noreg, 14, $noreg, 46, implicit-def $eflags, debug-location !125 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !126; ep.c:104:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) CMP8mi %stack.30.size, 1, $noreg, 14, $noreg, 46, implicit-def $eflags, debug-location !125 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:17
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.26.j, 1, $noreg, 0, $noreg, %28:gr32, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %28:gr32 = MOV32ri 14
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %28:gr32 = MOV32ri 14
SU(1):   MOV32mr %stack.26.j, 1, $noreg, 0, $noreg, %28:gr32, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
SU(2):   CMP8mi %stack.30.size, 1, $noreg, 14, $noreg, 46, implicit-def $eflags, debug-location !125 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:17

********** MI Scheduling **********
main:%bb.3 if.end
  From: $rdi = LEA64r %stack.30.size, 1, $noreg, 0, $noreg, debug-location !120; ep.c:102:5
    To: CALL64pcrel32 @sprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !120; ep.c:102:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r %stack.30.size, 1, $noreg, 0, $noreg, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ep__str_2__15_0lf_, $noreg, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %23:fr64, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @sprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !120; ep.c:102:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !120; ep.c:102:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %23:fr64, debug-location !120; ep.c:102:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @ep__str_2__15_0lf_, $noreg, debug-location !120; ep.c:102:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r %stack.30.size, 1, $noreg, 0, $noreg, debug-location !120; ep.c:102:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = LEA64r %stack.30.size, 1, $noreg, 0, $noreg, debug-location !120; ep.c:102:5
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @ep__str_2__15_0lf_, $noreg, debug-location !120; ep.c:102:5
SU(2):   $xmm0 = COPY %23:fr64, debug-location !120; ep.c:102:5
SU(3):   $al = MOV8ri 1, debug-location !120; ep.c:102:5

********** MI Scheduling **********
main:%bb.3 if.end
  From: %21:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
    To: CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !119; ep.c:102:30
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %21:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%21
  Single Issue       : false;
SU(1):   %22:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%22
  Single Issue       : false;
SU(2):   $xmm0 = COPY %21:fr64, debug-location !119; ep.c:102:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%21
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %22:fr64, debug-location !119; ep.c:102:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%22
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !119; ep.c:102:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $xmm1 = COPY %22:fr64, debug-location !119; ep.c:102:30
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %21:fr64, debug-location !119; ep.c:102:30
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %22:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %21:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %21:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(1):   %22:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(2):   $xmm0 = COPY %21:fr64, debug-location !119; ep.c:102:30
SU(3):   $xmm1 = COPY %22:fr64, debug-location !119; ep.c:102:30

********** MI Scheduling **********
main:%bb.5 if.end7
  From: %45:fr64 = COPY killed $xmm0, debug-location !144; ep.c:128:14
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %45:fr64 = COPY killed $xmm0, debug-location !144; ep.c:128:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%45
  Single Issue       : false;
SU(1):   MOVSDmr %stack.29.dum, 1, $noreg, 0, $noreg, %45:fr64, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%45
  Single Issue       : false;
SU(2):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %261:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %262:gr64 = MOV64ri -3135276447761457362
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %262:gr64 = MOV64ri -3135276447761457362
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %261:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.29.dum, 1, $noreg, 0, $noreg, %45:fr64, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %45:fr64 = COPY killed $xmm0, debug-location !144; ep.c:128:14
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %45:fr64 = COPY killed $xmm0, debug-location !144; ep.c:128:14
SU(1):   MOVSDmr %stack.29.dum, 1, $noreg, 0, $noreg, %45:fr64, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
SU(2):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
SU(3):   %261:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
SU(4):   %262:gr64 = MOV64ri -3135276447761457362

********** MI Scheduling **********
main:%bb.5 if.end7
  From: $rdi = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !144; ep.c:128:14
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !144; ep.c:128:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !144; ep.c:128:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %44:fr64, debug-location !144; ep.c:128:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !144; ep.c:128:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %44:fr64, debug-location !144; ep.c:128:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !144; ep.c:128:14
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $rdi = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !144; ep.c:128:14
SU(1):   $xmm0 = COPY %44:fr64, debug-location !144; ep.c:128:14

********** MI Scheduling **********
main:%bb.5 if.end7
  From: $edi = MOV32r0 implicit-def dead $eflags, debug-location !141; ep.c:127:5
    To: CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $rsi, implicit killed $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !141; ep.c:127:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = MOV32r0 implicit-def dead $eflags, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r %stack.29.dum, 1, $noreg, 0, $noreg, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %41:fr64, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $rdx = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $rsi, implicit killed $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !141; ep.c:127:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %41:fr64, debug-location !141; ep.c:127:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
  Cand SU(3) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = MOV32r0 implicit-def dead $eflags, debug-location !141; ep.c:127:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rdx = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !141; ep.c:127:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r %stack.29.dum, 1, $noreg, 0, $noreg, debug-location !141; ep.c:127:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(1):   $rsi = LEA64r %stack.29.dum, 1, $noreg, 0, $noreg, debug-location !141; ep.c:127:5
SU(3):   $rdx = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !141; ep.c:127:5
SU(0):   $edi = MOV32r0 implicit-def dead $eflags, debug-location !141; ep.c:127:5
SU(2):   $xmm0 = COPY %41:fr64, debug-location !141; ep.c:127:5

********** MI Scheduling **********
main:%bb.5 if.end7
  From: MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; ep.c:127:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %39:gr32 = MOV32ri 16384
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%39
  Single Issue       : false;
SU(2):   MOV32mr %stack.18.np, 1, $noreg, 0, $noreg, %39:gr32, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%39
  Single Issue       : false;
SU(3):   %40:gr64 = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139; ep.c:127:24
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %41:fr64 = MOVSDrm_alt %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %42:gr64 = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !140; ep.c:127:33
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; ep.c:127:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 2 0 4 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %42:gr64 = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !140; ep.c:127:33
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %41:fr64 = MOVSDrm_alt %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %40:gr64 = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139; ep.c:127:24
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mr %stack.18.np, 1, $noreg, 0, $noreg, %39:gr32, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  Ready @0c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %39:gr32 = MOV32ri 16384
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
SU(1):   %39:gr32 = MOV32ri 16384
SU(2):   MOV32mr %stack.18.np, 1, $noreg, 0, $noreg, %39:gr32, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
SU(3):   %40:gr64 = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139; ep.c:127:24
SU(4):   %41:fr64 = MOVSDrm_alt %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
SU(5):   %42:gr64 = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !140; ep.c:127:33

********** MI Scheduling **********
main:%bb.5 if.end7
  From: $rdi = LEA64r $rip, 1, $noreg, @ep__str_4___Number_o, $noreg, debug-location !135; ep.c:108:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !135; ep.c:108:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_4___Number_o, $noreg, debug-location !135; ep.c:108:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r %stack.30.size, 1, $noreg, 0, $noreg, debug-location !135; ep.c:108:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !135; ep.c:108:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !135; ep.c:108:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !135; ep.c:108:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r %stack.30.size, 1, $noreg, 0, $noreg, debug-location !135; ep.c:108:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ep__str_4___Number_o, $noreg, debug-location !135; ep.c:108:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_4___Number_o, $noreg, debug-location !135; ep.c:108:5
SU(1):   $rsi = LEA64r %stack.30.size, 1, $noreg, 0, $noreg, debug-location !135; ep.c:108:5
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !135; ep.c:108:5

********** MI Scheduling **********
main:%bb.5 if.end7
  From: $rdi = LEA64r $rip, 1, $noreg, @ep__str_3____NAS_Par, $noreg, debug-location !133; ep.c:107:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !133; ep.c:107:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_3____NAS_Par, $noreg, debug-location !133; ep.c:107:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !133; ep.c:107:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !133; ep.c:107:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !133; ep.c:107:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ep__str_3____NAS_Par, $noreg, debug-location !133; ep.c:107:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_3____NAS_Par, $noreg, debug-location !133; ep.c:107:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !133; ep.c:107:5

********** MI Scheduling **********
main:%bb.5 if.end7
  From: %31:gr64 = MOVSX64rm32 %stack.26.j, 1, $noreg, 0, $noreg, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !133; ep.c:107:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %31:gr64 = MOVSX64rm32 %stack.26.j, 1, $noreg, 0, $noreg, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%31
  Single Issue       : false;
SU(1):   %32:gr32temp = MOV32r0 implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%32
  Single Issue       : false;
SU(2):   %34:gr64_nosp = LEA64r %stack.30.size, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%34
  Single Issue       : false;
SU(3):   MOV8mr %31:gr64, 1, %34:gr64_nosp, 1, $noreg, %32.sub_8bit:gr32temp, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%34
    SU(1): Data Latency=1 Reg=%32
    SU(0): Data Latency=4 Reg=%31
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !133; ep.c:107:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV8mr %31:gr64, 1, %34:gr64_nosp, 1, $noreg, %32.sub_8bit:gr32temp, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %34:gr64_nosp = LEA64r %stack.30.size, 1, $noreg, 0, $noreg
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %32:gr32temp = MOV32r0 implicit-def dead $eflags
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %31:gr64 = MOVSX64rm32 %stack.26.j, 1, $noreg, 0, $noreg, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %31:gr64 = MOVSX64rm32 %stack.26.j, 1, $noreg, 0, $noreg, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
SU(1):   %32:gr32temp = MOV32r0 implicit-def dead $eflags
SU(2):   %34:gr64_nosp = LEA64r %stack.30.size, 1, $noreg, 0, $noreg
SU(3):   MOV8mr %31:gr64, 1, %34:gr64_nosp, 1, $noreg, %32.sub_8bit:gr32temp, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17

********** MI Scheduling **********
main:%bb.7 for.body
  From: %272:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
    To: JMP_1 %bb.6, debug-location !159; ep.c:129:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %272:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%272
    SU(1): Data Latency=4 Reg=%272
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV64mr %261:gr64, 8, %272:gr64_nosp, 0, $noreg, %262:gr64, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%272
  Single Issue       : false;
SU(2):   %263:gr32 = LEA64_32r %272:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !158; ep.c:129:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%272
  Successors:
    SU(3): Data Latency=1 Reg=%263
  Single Issue       : false;
SU(3):   MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %263:gr32, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%263
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.6, debug-location !159; ep.c:129:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %263:gr32, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %263:gr32 = LEA64_32r %272:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !158; ep.c:129:30
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %261:gr64, 8, %272:gr64_nosp, 0, $noreg, %262:gr64, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %272:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %272:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
SU(1):   MOV64mr %261:gr64, 8, %272:gr64_nosp, 0, $noreg, %262:gr64, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
SU(2):   %263:gr32 = LEA64_32r %272:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !158; ep.c:129:30
SU(3):   MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %263:gr32, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30

********** MI Scheduling **********
main:%bb.8 for.end
  From: %0:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
    To: JCC_1 %bb.10, 4, implicit $eflags, debug-location !164; ep.c:132:12
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %0:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %48:gr8 = MOV8ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%48
  Single Issue       : false;
SU(2):   TEST8rr %48:gr8, %48:gr8, implicit-def $eflags, debug-location !164; ep.c:132:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%48
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.10, 4, implicit $eflags, debug-location !164; ep.c:132:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST8rr %48:gr8, %48:gr8, implicit-def $eflags, debug-location !164; ep.c:132:12
  Ready @1c
  BotQ.A TopLatency SU(2) 1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %48:gr8 = MOV8ri 1
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(0) 3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %0:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(1):   %48:gr8 = MOV8ri 1
SU(2):   TEST8rr %48:gr8, %48:gr8, implicit-def $eflags, debug-location !164; ep.c:132:12

********** MI Scheduling **********
main:%bb.11 for.end.split
  From: MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %54:gr64, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %54:gr64, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !174 :: (store 4 into %ir.i); ep.c:150:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !174 :: (store 4 into %ir.i); ep.c:150:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %54:gr64, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %54:gr64, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
SU(1):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !174 :: (store 4 into %ir.i); ep.c:150:12

********** MI Scheduling **********
main:%bb.11 for.end.split
  From: %57:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
    To: CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $rsi, implicit $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !172; ep.c:142:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %57:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%57
  Single Issue       : false;
SU(1):   $edi = MOV32r0 implicit-def dead $eflags, debug-location !172; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rsi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !172; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $xmm0 = COPY %57:fr64, debug-location !172; ep.c:142:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%57
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !172; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $rsi, implicit $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !172; ep.c:142:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 
  Cand SU(4) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm0 = COPY %57:fr64, debug-location !172; ep.c:142:5
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 2 0 
  Cand SU(4) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32r0 implicit-def dead $eflags, debug-location !172; ep.c:142:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 2 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !172; ep.c:142:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rsi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !172; ep.c:142:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %57:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %57:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
SU(2):   $rsi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !172; ep.c:142:5
SU(4):   $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !172; ep.c:142:5
SU(1):   $edi = MOV32r0 implicit-def dead $eflags, debug-location !172; ep.c:142:5
SU(3):   $xmm0 = COPY %57:fr64, debug-location !172; ep.c:142:5

********** MI Scheduling **********
main:%bb.11 for.end.split
  From: %54:gr64 = MOV64ri 4742906807993761792
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !172; ep.c:142:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %54:gr64 = MOV64ri 4742906807993761792
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%54
  Single Issue       : false;
SU(1):   MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %54:gr64, debug-location !171 :: (store 8 into %ir.t1); ep.c:141:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%54
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !172; ep.c:142:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %54:gr64, debug-location !171 :: (store 8 into %ir.t1); ep.c:141:8
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %54:gr64 = MOV64ri 4742906807993761792
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %54:gr64 = MOV64ri 4742906807993761792
SU(1):   MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %54:gr64, debug-location !171 :: (store 8 into %ir.t1); ep.c:141:8

********** MI Scheduling **********
main:%bb.11 for.end.split
  From: %50:fr64 = COPY $xmm0, debug-location !164; ep.c:132:12
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; ep.c:134:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %50:fr64 = COPY $xmm0, debug-location !164; ep.c:132:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%50
  Single Issue       : false;
SU(1):   MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %50:fr64, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%50
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; ep.c:134:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %50:fr64, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %50:fr64 = COPY $xmm0, debug-location !164; ep.c:132:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %50:fr64 = COPY $xmm0, debug-location !164; ep.c:132:12
SU(1):   MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %50:fr64, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10

********** MI Scheduling **********
main:%bb.13 for.body29
  From: %258:fr64 = COPY $xmm0, debug-location !183; ep.c:151:14
    To: JMP_1 %bb.12, debug-location !186; ep.c:150:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %258:fr64 = COPY $xmm0, debug-location !183; ep.c:151:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%258
  Single Issue       : false;
SU(1):   MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %258:fr64, debug-location !184 :: (store 8 into %ir.t2); ep.c:151:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%258
  Single Issue       : false;
SU(2):   INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !185 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:150:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.12, debug-location !186; ep.c:150:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !185 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:150:30
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %258:fr64, debug-location !184 :: (store 8 into %ir.t2); ep.c:151:12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %258:fr64 = COPY $xmm0, debug-location !183; ep.c:151:14
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %258:fr64 = COPY $xmm0, debug-location !183; ep.c:151:14
SU(1):   MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %258:fr64, debug-location !184 :: (store 8 into %ir.t2); ep.c:151:12
SU(2):   INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !185 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:150:30

********** MI Scheduling **********
main:%bb.13 for.body29
  From: $rdi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !183; ep.c:151:14
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !183; ep.c:151:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !183; ep.c:151:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %256:fr64, debug-location !183; ep.c:151:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !183; ep.c:151:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %256:fr64, debug-location !183; ep.c:151:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !183; ep.c:151:14
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $rdi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !183; ep.c:151:14
SU(1):   $xmm0 = COPY %256:fr64, debug-location !183; ep.c:151:14

********** MI Scheduling **********
main:%bb.14 for.end33
  From: %60:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
    To: End RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=1
GR16=2
Live In: 
Live Out: %254 
Live Thru: 
  LiveReg: %254
Top Pressure:

Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   %60:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%60
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   MOVSDmr %stack.11.an, 1, $noreg, 0, $noreg, %60:fr64, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%60
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(2):   %61:gr64 = MOV64ri 4733340128880099328
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%61
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr %stack.12.tt, 1, $noreg, 0, $noreg, %61:gr64, debug-location !191 :: (store 8 into %ir.tt); ep.c:155:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%61
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   MOV64mi32 %stack.13.gc, 1, $noreg, 0, $noreg, 0, debug-location !192 :: (store 8 into %ir.gc); ep.c:156:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   undef %63.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%63
    SU(6): Data Latency=1 Reg=%63
  Pressure Diff      : GR32temp -2    GR32temp+GR32_DIBP -2    GR32temp+GR64_TC -2    GR8+GR32temp -2    GR16 -2
  Single Issue       : false;
SU(6):   MOV64mr %stack.8.sx, 1, $noreg, 0, $noreg, %63:gr64_with_sub_32bit_in_gr32temp, debug-location !193 :: (store 8 into %ir.sx); ep.c:157:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%63
  Pressure Diff      : GR32temp 2    GR32temp+GR32_DIBP 2    GR32temp+GR64_TC 2    GR8+GR32temp 2    GR16 2
  Single Issue       : false;
SU(7):   MOV64mr %stack.9.sy, 1, $noreg, 0, $noreg, %63:gr64_with_sub_32bit_in_gr32temp, debug-location !194 :: (store 8 into %ir.sy); ep.c:158:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%63
  Pressure Diff      : GR32temp 2    GR32temp+GR32_DIBP 2    GR32temp+GR64_TC 2    GR8+GR32temp 2    GR16 2
  Single Issue       : false;
SU(8):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !195 :: (store 4 into %ir.i); ep.c:160:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %254:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 8 7 6 4 3 1 
  Cand SU(9) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(9) %254:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 7 6 4 3 
  Cand SU(1) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !195 :: (store 4 into %ir.i); ep.c:160:12
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 7 6 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr %stack.9.sy, 1, $noreg, 0, $noreg, %63:gr64_with_sub_32bit_in_gr32temp, debug-location !194 :: (store 8 into %ir.sy); ep.c:158:8
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
  LiveReg: %63
  UpdateRegP: SU(6) MOV64mr %stack.8.sx, 1, $noreg, 0, $noreg, %63:gr64_with_sub_32bit_in_gr32temp, debug-location !193 :: (store 8 into %ir.sx); ep.c:157:8
              to 
  UpdateRegP: SU(7) MOV64mr %stack.9.sy, 1, $noreg, 0, $noreg, %63:gr64_with_sub_32bit_in_gr32temp, debug-location !194 :: (store 8 into %ir.sy); ep.c:158:8
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 6 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV64mr %stack.8.sx, 1, $noreg, 0, $noreg, %63:gr64_with_sub_32bit_in_gr32temp, debug-location !193 :: (store 8 into %ir.sx); ep.c:157:8
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 5 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) undef %63.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
Bottom Pressure:

  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mi32 %stack.13.gc, 1, $noreg, 0, $noreg, 0, debug-location !192 :: (store 8 into %ir.gc); ep.c:156:8
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr %stack.12.tt, 1, $noreg, 0, $noreg, %61:gr64, debug-location !191 :: (store 8 into %ir.tt); ep.c:155:8
Bottom Pressure:
GR16=2
  LiveReg: %61
  UpdateRegP: SU(3) MOV64mr %stack.12.tt, 1, $noreg, 0, $noreg, %61:gr64, debug-location !191 :: (store 8 into %ir.tt); ep.c:155:8
              to 
  Ready @1c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %61:gr64 = MOV64ri 4733340128880099328
Bottom Pressure:

  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.11.an, 1, $noreg, 0, $noreg, %60:fr64, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %60
  UpdateRegP: SU(1) MOVSDmr %stack.11.an, 1, $noreg, 0, $noreg, %60:fr64, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
              to 
  Ready @2c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %60:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
Bottom Pressure:

  Ready @6c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %60:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
SU(1):   MOVSDmr %stack.11.an, 1, $noreg, 0, $noreg, %60:fr64, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
SU(2):   %61:gr64 = MOV64ri 4733340128880099328
SU(3):   MOV64mr %stack.12.tt, 1, $noreg, 0, $noreg, %61:gr64, debug-location !191 :: (store 8 into %ir.tt); ep.c:155:8
SU(4):   MOV64mi32 %stack.13.gc, 1, $noreg, 0, $noreg, 0, debug-location !192 :: (store 8 into %ir.gc); ep.c:156:8
SU(5):   undef %63.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
SU(6):   MOV64mr %stack.8.sx, 1, $noreg, 0, $noreg, %63:gr64_with_sub_32bit_in_gr32temp, debug-location !193 :: (store 8 into %ir.sx); ep.c:157:8
SU(7):   MOV64mr %stack.9.sy, 1, $noreg, 0, $noreg, %63:gr64_with_sub_32bit_in_gr32temp, debug-location !194 :: (store 8 into %ir.sy); ep.c:158:8
SU(8):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !195 :: (store 4 into %ir.i); ep.c:160:12
SU(9):   %254:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg

********** MI Scheduling **********
main:%bb.16 for.body37
  From: %273:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
    To: JMP_1 %bb.15, debug-location !207; ep.c:160:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %273:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%273
    SU(1): Data Latency=4 Reg=%273
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV64mi32 %254:gr64, 8, %273:gr64_nosp, 0, $noreg, 0, debug-location !205 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%273
  Single Issue       : false;
SU(2):   %255:gr32 = LEA64_32r %273:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !206; ep.c:160:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%273
  Successors:
    SU(3): Data Latency=1 Reg=%255
  Single Issue       : false;
SU(3):   MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %255:gr32, debug-location !206 :: (store 4 into %ir.i); ep.c:160:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%255
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.15, debug-location !207; ep.c:160:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %255:gr32, debug-location !206 :: (store 4 into %ir.i); ep.c:160:26
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %255:gr32 = LEA64_32r %273:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !206; ep.c:160:26
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mi32 %254:gr64, 8, %273:gr64_nosp, 0, $noreg, 0, debug-location !205 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %273:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %273:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
SU(1):   MOV64mi32 %254:gr64, 8, %273:gr64_nosp, 0, $noreg, 0, debug-location !205 :: (store 8 into %ir.arrayidx39); ep.c:161:14
SU(2):   %255:gr32 = LEA64_32r %273:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !206; ep.c:160:26
SU(3):   MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %255:gr32, debug-location !206 :: (store 4 into %ir.i); ep.c:160:26

********** MI Scheduling **********
main:%bb.17 for.end42
  From: %66:gr32 = MOV32ri -1
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=6
FR32X=6
GR16=8
Live In: 
Live Out: %245 %265 %231 %226 %264 %216 %204 %201 %182 %67 
Live Thru: 
  LiveReg: %245
  LiveReg: %265
  LiveReg: %231
  LiveReg: %226
  LiveReg: %264
  LiveReg: %216
  LiveReg: %204
  LiveReg: %201
  LiveReg: %182
  LiveReg: %67
  UpdateRegP: SU(3) MOV32mr %stack.23.k, 1, $noreg, 0, $noreg, %67:gr32, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
              to 
Top Pressure:

Bottom Pressure:
FR32=6
FR32X=6
GR16=8
Excess PSets: 
SU(0):   %66:gr32 = MOV32ri -1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%66
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr %stack.25.k_offset, 1, $noreg, 0, $noreg, %66:gr32, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%66
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %67:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%67
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV32mr %stack.23.k, 1, $noreg, 0, $noreg, %67:gr32, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%67
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %182:gr64 = MOV64ri 4733340128880099328
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %201:gr64_nosp = LEA64r $rip, 1, $noreg, @x, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %204:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(7):   %216:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(8):   %264:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.8, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(9):   %226:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(10):   %231:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(11):   %265:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(12):   %245:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 9 5 4 3 1 11 10 8 7 6 
  Cand SU(12) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(12) %245:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
Bottom Pressure:
FR32=6
FR32X=6
GR16=6
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 5 4 3 1 11 10 8 7 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %265:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
Bottom Pressure:
FR32=5
FR32X=5
GR16=6
  Ready @3c
  BotQ.A BotLatency SU(11) 3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 5 4 3 1 7 10 8 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %231:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
Bottom Pressure:
FR32=4
FR32X=4
GR16=6
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 5 4 3 1 7 8 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %226:fr64 = FsFLD0SD
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 5 4 3 1 7 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %264:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.8, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 5 4 3 1 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %216:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 1 5 4 3 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %204:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
GR16=6
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 5 4 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %201:gr64_nosp = LEA64r $rip, 1, $noreg, @x, $noreg
Bottom Pressure:
GR16=4
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %182:gr64 = MOV64ri 4733340128880099328
Bottom Pressure:
GR16=2
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.23.k, 1, $noreg, 0, $noreg, %67:gr32, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
Bottom Pressure:
GR16=2
  Ready @2c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %67:gr32 = MOV32ri 1
Bottom Pressure:

  Ready @3c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.25.k_offset, 1, $noreg, 0, $noreg, %66:gr32, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
Bottom Pressure:
GR16=2
  LiveReg: %66
  UpdateRegP: SU(1) MOV32mr %stack.25.k_offset, 1, $noreg, 0, $noreg, %66:gr32, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
              to 
  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %66:gr32 = MOV32ri -1
Bottom Pressure:

  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %66:gr32 = MOV32ri -1
SU(1):   MOV32mr %stack.25.k_offset, 1, $noreg, 0, $noreg, %66:gr32, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
SU(2):   %67:gr32 = MOV32ri 1
SU(3):   MOV32mr %stack.23.k, 1, $noreg, 0, $noreg, %67:gr32, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
SU(4):   %182:gr64 = MOV64ri 4733340128880099328
SU(5):   %201:gr64_nosp = LEA64r $rip, 1, $noreg, @x, $noreg
SU(6):   %204:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
SU(7):   %216:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(8):   %264:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.8, $noreg :: (load 8 from constant-pool)
SU(9):   %226:fr64 = FsFLD0SD
SU(10):   %231:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
SU(11):   %265:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
SU(12):   %245:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg

********** MI Scheduling **********
main:%bb.18 for.cond43
  From: %68:gr32 = MOV32rm %stack.23.k, 1, $noreg, 0, $noreg, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
    To: JCC_1 %bb.45, 15, implicit $eflags, debug-location !218; ep.c:172:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %68:gr32 = MOV32rm %stack.23.k, 1, $noreg, 0, $noreg, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%68
  Single Issue       : false;
SU(1):   CMP32rm %68:gr32, %stack.18.np, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !217 :: (dereferenceable load 4 from %ir.np); ep.c:172:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%68
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.45, 15, implicit $eflags, debug-location !218; ep.c:172:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %68:gr32, %stack.18.np, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !217 :: (dereferenceable load 4 from %ir.np); ep.c:172:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %68:gr32 = MOV32rm %stack.23.k, 1, $noreg, 0, $noreg, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %68:gr32 = MOV32rm %stack.23.k, 1, $noreg, 0, $noreg, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
SU(1):   CMP32rm %68:gr32, %stack.18.np, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !217 :: (dereferenceable load 4 from %ir.np); ep.c:172:19

********** MI Scheduling **********
main:%bb.19 for.body46
  From: %181:gr32 = MOV32rm %stack.25.k_offset, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %181:gr32 = MOV32rm %stack.25.k_offset, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%181
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %181:gr32 = nsw ADD32rm %181:gr32(tied-def 0), %stack.23.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !222 :: (dereferenceable load 4 from %ir.k); ep.c:173:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%181
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%181
  Single Issue       : false;
SU(2):   MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %181:gr32, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%181
  Single Issue       : false;
SU(3):   MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %182:gr64, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %183:fr64 = MOVSDrm_alt %stack.11.an, 1, $noreg, 0, $noreg, debug-location !225 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=4 Reg=%183
  Single Issue       : false;
SU(5):   MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %183:fr64, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%183
  Single Issue       : false;
SU(6):   MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %67:gr32, debug-location !227 :: (store 4 into %ir.i); ep.c:179:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 3 2 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %67:gr32, debug-location !227 :: (store 4 into %ir.i); ep.c:179:16
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 3 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %183:fr64, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12
  Ready @0c
  BotQ.A TopLatency SU(5) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %183:fr64 = MOVSDrm_alt %stack.11.an, 1, $noreg, 0, $noreg, debug-location !225 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %182:gr64, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %181:gr32, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
  Ready @1c
  BotQ.A TopLatency SU(2) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %181:gr32 = nsw ADD32rm %181:gr32(tied-def 0), %stack.23.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !222 :: (dereferenceable load 4 from %ir.k); ep.c:173:23
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %181:gr32 = MOV32rm %stack.25.k_offset, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  Ready @9c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %181:gr32 = MOV32rm %stack.25.k_offset, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
SU(1):   %181:gr32 = nsw ADD32rm %181:gr32(tied-def 0), %stack.23.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !222 :: (dereferenceable load 4 from %ir.k); ep.c:173:23
SU(2):   MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %181:gr32, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
SU(3):   MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %182:gr64, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
SU(4):   %183:fr64 = MOVSDrm_alt %stack.11.an, 1, $noreg, 0, $noreg, debug-location !225 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
SU(5):   MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %183:fr64, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12
SU(6):   MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %67:gr32, debug-location !227 :: (store 4 into %ir.i); ep.c:179:16

********** MI Scheduling **********
main:%bb.21 for.body51
  From: %187:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
    To: JCC_1 %bb.23, 4, implicit $eflags, debug-location !243; ep.c:181:17
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %187:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(8): Data Latency=4 Reg=%187
    SU(3): Data Latency=4 Reg=%187
    SU(1): Data Latency=4 Reg=%187
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %189:gr32 = COPY %187:gr32, debug-location !236; ep.c:180:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%187
  Successors:
    SU(2): Data Latency=0 Reg=%189
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %189:gr32 = SHR32ri %189:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !236; ep.c:180:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=0 Reg=%189
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%189
    SU(3): Out  Latency=0
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %189:gr32 = ADD32rr %189:gr32(tied-def 0), %187:gr32, implicit-def dead $eflags, debug-location !236; ep.c:180:21
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=%189
    SU(2): Out  Latency=0
    SU(0): Data Latency=4 Reg=%187
  Successors:
    SU(7): Data Latency=1 Reg=%189
    SU(4): Data Latency=1 Reg=%189
    SU(7): Out  Latency=0
    SU(8): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %190:gr32 = COPY %189:gr32, debug-location !236; ep.c:180:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%189
  Successors:
    SU(5): Data Latency=0 Reg=%190
    SU(5): Out  Latency=0
    SU(7): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %190:gr32 = SAR32r1 %190:gr32(tied-def 0), implicit-def dead $eflags, debug-location !236; ep.c:180:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=0 Reg=%190
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%190
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOV32mr %stack.20.ik, 1, $noreg, 0, $noreg, %190:gr32, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%190
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %189:gr32 = AND32ri8 %189:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !240; ep.c:181:20
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Data Latency=1 Reg=%189
    SU(3): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%189
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   CMP32rr %189:gr32, %187:gr32, implicit-def $eflags, debug-location !242; ep.c:181:26
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%189
    SU(7): Out  Latency=0
    SU(5): Out  Latency=0
    SU(3): Out  Latency=0
    SU(2): Out  Latency=0
    SU(0): Data Latency=4 Reg=%187
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR16 4
  Single Issue       : false;
ExitSU:   JCC_1 %bb.23, 4, implicit $eflags, debug-location !243; ep.c:181:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) CMP32rr %189:gr32, %187:gr32, implicit-def $eflags, debug-location !242; ep.c:181:26
Bottom Pressure:
GR16=4
  LiveReg: %189
  UpdateRegP: SU(8) CMP32rr %189:gr32, %187:gr32, implicit-def $eflags, debug-location !242; ep.c:181:26
              to GR16 2
  LiveReg: %187
  UpdateRegP: SU(1) %189:gr32 = COPY %187:gr32, debug-location !236; ep.c:180:21
              to GR16 -2
  UpdateRegP: SU(3) %189:gr32 = ADD32rr %189:gr32(tied-def 0), %187:gr32, implicit-def dead $eflags, debug-location !236; ep.c:180:21
              to 
  UpdateRegP: SU(8) CMP32rr %189:gr32, %187:gr32, implicit-def $eflags, debug-location !242; ep.c:181:26
              to 
  Ready @1c
  BotQ.A TopLatency SU(8) 7c
  BotQ.A BotLatency SU(8) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %189:gr32 = AND32ri8 %189:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !240; ep.c:181:20
Bottom Pressure:
GR16=4
  LiveReg: %189
  UpdateRegP: SU(4) %190:gr32 = COPY %189:gr32, debug-location !236; ep.c:180:21
              to GR16 -2
  UpdateRegP: SU(7) %189:gr32 = AND32ri8 %189:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !240; ep.c:181:20
              to GR16 -2
  Ready @2c
  BotQ.A BotLatency SU(7) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV32mr %stack.20.ik, 1, $noreg, 0, $noreg, %190:gr32, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16
Bottom Pressure:
GR16=6
  LiveReg: %190
  UpdateRegP: SU(6) MOV32mr %stack.20.ik, 1, $noreg, 0, $noreg, %190:gr32, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %190:gr32 = SAR32r1 %190:gr32(tied-def 0), implicit-def dead $eflags, debug-location !236; ep.c:180:21
Bottom Pressure:
GR16=6
  LiveReg: %190
  UpdateRegP: SU(5) %190:gr32 = SAR32r1 %190:gr32(tied-def 0), implicit-def dead $eflags, debug-location !236; ep.c:180:21
              to GR16 -2
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %190:gr32 = COPY %189:gr32, debug-location !236; ep.c:180:21
Bottom Pressure:
GR16=4
  Ready @2c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %189:gr32 = ADD32rr %189:gr32(tied-def 0), %187:gr32, implicit-def dead $eflags, debug-location !236; ep.c:180:21
Bottom Pressure:
GR16=4
  LiveReg: %189
  UpdateRegP: SU(3) %189:gr32 = ADD32rr %189:gr32(tied-def 0), %187:gr32, implicit-def dead $eflags, debug-location !236; ep.c:180:21
              to GR16 -2
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %189:gr32 = SHR32ri %189:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !236; ep.c:180:21
Bottom Pressure:
GR16=4
  LiveReg: %189
  UpdateRegP: SU(2) %189:gr32 = SHR32ri %189:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !236; ep.c:180:21
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %189:gr32 = COPY %187:gr32, debug-location !236; ep.c:180:21
Bottom Pressure:
GR16=2
  Ready @4c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %187:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
Bottom Pressure:

  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %187:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
SU(1):   %189:gr32 = COPY %187:gr32, debug-location !236; ep.c:180:21
SU(2):   %189:gr32 = SHR32ri %189:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !236; ep.c:180:21
SU(3):   %189:gr32 = ADD32rr %189:gr32(tied-def 0), %187:gr32, implicit-def dead $eflags, debug-location !236; ep.c:180:21
SU(4):   %190:gr32 = COPY %189:gr32, debug-location !236; ep.c:180:21
SU(5):   %190:gr32 = SAR32r1 %190:gr32(tied-def 0), implicit-def dead $eflags, debug-location !236; ep.c:180:21
SU(6):   MOV32mr %stack.20.ik, 1, $noreg, 0, $noreg, %190:gr32, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16
SU(7):   %189:gr32 = AND32ri8 %189:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !240; ep.c:181:20
SU(8):   CMP32rr %189:gr32, %187:gr32, implicit-def $eflags, debug-location !242; ep.c:181:26

********** MI Scheduling **********
main:%bb.22 if.then54
  From: %195:fr64 = COPY $xmm0, debug-location !245; ep.c:182:22
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %195:fr64 = COPY $xmm0, debug-location !245; ep.c:182:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%195
  Single Issue       : false;
SU(1):   MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %195:fr64, debug-location !246 :: (store 8 into %ir.t3); ep.c:182:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%195
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %195:fr64, debug-location !246 :: (store 8 into %ir.t3); ep.c:182:20
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %195:fr64 = COPY $xmm0, debug-location !245; ep.c:182:22
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %195:fr64 = COPY $xmm0, debug-location !245; ep.c:182:22
SU(1):   MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %195:fr64, debug-location !246 :: (store 8 into %ir.t3); ep.c:182:20

********** MI Scheduling **********
main:%bb.22 if.then54
  From: $rdi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !245; ep.c:182:22
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !245; ep.c:182:22
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !245; ep.c:182:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %193:fr64, debug-location !245; ep.c:182:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !245; ep.c:182:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %193:fr64, debug-location !245; ep.c:182:22
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !245; ep.c:182:22
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   $rdi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !245; ep.c:182:22
SU(1):   $xmm0 = COPY %193:fr64, debug-location !245; ep.c:182:22

********** MI Scheduling **********
main:%bb.24 if.end60
  From: %198:fr64 = COPY $xmm0, debug-location !253; ep.c:185:18
    To: JMP_1 %bb.20, debug-location !258; ep.c:179:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %198:fr64 = COPY $xmm0, debug-location !253; ep.c:185:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%198
  Single Issue       : false;
SU(1):   MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %198:fr64, debug-location !254 :: (store 8 into %ir.t3); ep.c:185:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%198
  Single Issue       : false;
SU(2):   %199:gr32 = MOV32rm %stack.20.ik, 1, $noreg, 0, $noreg, debug-location !255 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%199
  Single Issue       : false;
SU(3):   MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %199:gr32, debug-location !256 :: (store 4 into %ir.kk); ep.c:186:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%199
  Single Issue       : false;
SU(4):   INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !257 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:179:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.20, debug-location !258; ep.c:179:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !257 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:179:32
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %199:gr32, debug-location !256 :: (store 4 into %ir.kk); ep.c:186:16
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %199:gr32 = MOV32rm %stack.20.ik, 1, $noreg, 0, $noreg, debug-location !255 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %198:fr64, debug-location !254 :: (store 8 into %ir.t3); ep.c:185:16
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %198:fr64 = COPY $xmm0, debug-location !253; ep.c:185:18
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %198:fr64 = COPY $xmm0, debug-location !253; ep.c:185:18
SU(1):   MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %198:fr64, debug-location !254 :: (store 8 into %ir.t3); ep.c:185:16
SU(2):   %199:gr32 = MOV32rm %stack.20.ik, 1, $noreg, 0, $noreg, debug-location !255 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
SU(3):   MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %199:gr32, debug-location !256 :: (store 4 into %ir.kk); ep.c:186:16
SU(4):   INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !257 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:179:32

********** MI Scheduling **********
main:%bb.24 if.end60
  From: $rdi = LEA64r %stack.3.t2, 1, $noreg, 0, $noreg, debug-location !253; ep.c:185:18
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !253; ep.c:185:18
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r %stack.3.t2, 1, $noreg, 0, $noreg, debug-location !253; ep.c:185:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %196:fr64, debug-location !253; ep.c:185:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !253; ep.c:185:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %196:fr64, debug-location !253; ep.c:185:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r %stack.3.t2, 1, $noreg, 0, $noreg, debug-location !253; ep.c:185:18
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   $rdi = LEA64r %stack.3.t2, 1, $noreg, 0, $noreg, debug-location !253; ep.c:185:18
SU(1):   $xmm0 = COPY %196:fr64, debug-location !253; ep.c:185:18

********** MI Scheduling **********
main:%bb.27 if.end66
  From: $edi = MOV32ri 131072, debug-location !265; ep.c:194:9
    To: CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $rsi, implicit $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !265; ep.c:194:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = MOV32ri 131072, debug-location !265; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !265; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %204:fr64, debug-location !265; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !265; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $rsi, implicit $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !265; ep.c:194:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %204:fr64, debug-location !265; ep.c:194:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
  Cand SU(3) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = MOV32ri 131072, debug-location !265; ep.c:194:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !265; ep.c:194:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !265; ep.c:194:9
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(1):   $rsi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !265; ep.c:194:9
SU(3):   $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !265; ep.c:194:9
SU(0):   $edi = MOV32ri 131072, debug-location !265; ep.c:194:9
SU(2):   $xmm0 = COPY %204:fr64, debug-location !265; ep.c:194:9

********** MI Scheduling **********
main:%bb.33 for.body76
  From: %212:gr64 = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
    To: JCC_1 %bb.41, 2, implicit $eflags, debug-location !306; ep.c:210:17
 RegionInstrs: 15
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
GR16=4
Live In: %216 %201 
Live Out: %216 %201 
Live Thru: FR32=1
FR32X=1
GR16=2
  LiveReg: %216
  UpdateRegP: SU(5) %217:fr64 = SUBSDrr %217:fr64(tied-def 0), %216:fr64, debug-location !286; ep.c:207:33
              to 
  UpdateRegP: SU(8) %219:fr64 = SUBSDrr %219:fr64(tied-def 0), %216:fr64, debug-location !293; ep.c:208:37
              to 
  UpdateRegP: SU(14) UCOMISDrr %216:fr64, %219:fr64, implicit-def $eflags, debug-location !305; ep.c:210:20
              to FR32 1    FR32X 1
  LiveReg: %201
  UpdateRegP: SU(2) %217:fr64 = MOVSDrm_alt %212:gr64, 1, %201:gr64_nosp, 0, $noreg, debug-location !284 :: (load 8 from %ir.arrayidx79); ep.c:207:24
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(3) %219:fr64 = MOVSDrm_alt %212:gr64, 1, %201:gr64_nosp, 8, $noreg, debug-location !291 :: (load 8 from %ir.arrayidx84); ep.c:208:24
              to FR32 -1    FR32X -1    GR16 2
Top Pressure:
FR32=1
FR32X=1
GR16=2
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
Excess PSets: 
SU(0):   %212:gr64 = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(1): Data Latency=4 Reg=%212
    SU(1): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %212:gr64 = SHL64ri %212:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !290; ep.c:208:32
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(0): Data Latency=4 Reg=%212
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%212
    SU(2): Data Latency=1 Reg=%212
    SU(14): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %217:fr64 = MOVSDrm_alt %212:gr64, 1, %201:gr64_nosp, 0, $noreg, debug-location !284 :: (load 8 from %ir.arrayidx79); ep.c:207:24
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=%212
  Successors:
    SU(4): Data Latency=4 Reg=%217
    SU(4): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(3):   %219:fr64 = MOVSDrm_alt %212:gr64, 1, %201:gr64_nosp, 8, $noreg, debug-location !291 :: (load 8 from %ir.arrayidx84); ep.c:208:24
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=%212
  Successors:
    SU(7): Data Latency=4 Reg=%219
    SU(7): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(4):   %217:fr64 = ADDSDrr %217:fr64(tied-def 0), %217:fr64, debug-location !285; ep.c:207:22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%217
    SU(2): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%217
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %217:fr64 = SUBSDrr %217:fr64(tied-def 0), %216:fr64, debug-location !286; ep.c:207:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=%217
    SU(4): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%217
    SU(6): Data Latency=1 Reg=%217
    SU(10): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOVSDmr %stack.6.x1, 1, $noreg, 0, $noreg, %217:fr64, debug-location !287 :: (store 8 into %ir.x1); ep.c:207:16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%217
  Successors:
    SU(10): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(7):   %219:fr64 = ADDSDrr %219:fr64(tied-def 0), %219:fr64, debug-location !292; ep.c:208:22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(3): Data Latency=4 Reg=%219
    SU(3): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%219
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %219:fr64 = SUBSDrr %219:fr64(tied-def 0), %216:fr64, debug-location !293; ep.c:208:37
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(7): Data Latency=1 Reg=%219
    SU(7): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%219
    SU(9): Data Latency=1 Reg=%219
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOVSDmr %stack.7.x2, 1, $noreg, 0, $noreg, %219:fr64, debug-location !294 :: (store 8 into %ir.x2); ep.c:208:16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(8): Data Latency=1 Reg=%219
  Successors:
    SU(11): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(10):   %217:fr64 = MULSDrr %217:fr64(tied-def 0), %217:fr64, debug-location !297; ep.c:209:21
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Data Latency=1 Reg=%217
    SU(5): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%217
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %219:fr64 = MULSDrr %219:fr64(tied-def 0), %219:fr64, debug-location !300; ep.c:209:31
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(9): Anti Latency=0
    SU(8): Data Latency=1 Reg=%219
    SU(8): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%219
    SU(12): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %219:fr64 = ADDSDrr %219:fr64(tied-def 0), %217:fr64, debug-location !301; ep.c:209:26
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(11): Data Latency=1 Reg=%219
    SU(11): Out  Latency=0
    SU(10): Data Latency=1 Reg=%217
  Successors:
    SU(14): Data Latency=1 Reg=%219
    SU(13): Data Latency=1 Reg=%219
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(13):   MOVSDmr %stack.2.t1, 1, $noreg, 0, $noreg, %219:fr64, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%219
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(14):   UCOMISDrr %216:fr64, %219:fr64, implicit-def $eflags, debug-location !305; ep.c:210:20
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(12): Data Latency=1 Reg=%219
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
ExitSU:   JCC_1 %bb.41, 2, implicit $eflags, debug-location !306; ep.c:210:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(14): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 14
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) UCOMISDrr %216:fr64, %219:fr64, implicit-def $eflags, debug-location !305; ep.c:210:20
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %219
  UpdateRegP: SU(13) MOVSDmr %stack.2.t1, 1, $noreg, 0, $noreg, %219:fr64, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16
              to 
  UpdateRegP: SU(14) UCOMISDrr %216:fr64, %219:fr64, implicit-def $eflags, debug-location !305; ep.c:210:20
              to 
  Ready @1c
  BotQ.A TopLatency SU(14) 13c
  BotQ.A BotLatency SU(14) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) MOVSDmr %stack.2.t1, 1, $noreg, 0, $noreg, %219:fr64, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %219:fr64 = ADDSDrr %219:fr64(tied-def 0), %217:fr64, debug-location !301; ep.c:209:26
Bottom Pressure:
FR32=3
FR32X=3
GR16=2
  LiveReg: %219
  UpdateRegP: SU(12) %219:fr64 = ADDSDrr %219:fr64(tied-def 0), %217:fr64, debug-location !301; ep.c:209:26
              to 
  LiveReg: %217
  UpdateRegP: SU(12) %219:fr64 = ADDSDrr %219:fr64(tied-def 0), %217:fr64, debug-location !301; ep.c:209:26
              to FR32 -1    FR32X -1
  Ready @2c
  BotQ.A BotLatency SU(12) 2c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %219:fr64 = MULSDrr %219:fr64(tied-def 0), %219:fr64, debug-location !300; ep.c:209:31
Bottom Pressure:
FR32=3
FR32X=3
GR16=2
  LiveReg: %219
  UpdateRegP: SU(9) MOVSDmr %stack.7.x2, 1, $noreg, 0, $noreg, %219:fr64, debug-location !294 :: (store 8 into %ir.x2); ep.c:208:16
              to 
  UpdateRegP: SU(11) %219:fr64 = MULSDrr %219:fr64(tied-def 0), %219:fr64, debug-location !300; ep.c:209:31
              to FR32 -1    FR32X -1
  Ready @3c
  BotQ.A BotLatency SU(11) 3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %217:fr64 = MULSDrr %217:fr64(tied-def 0), %217:fr64, debug-location !297; ep.c:209:21
Bottom Pressure:
FR32=3
FR32X=3
GR16=2
  LiveReg: %217
  UpdateRegP: SU(6) MOVSDmr %stack.6.x1, 1, $noreg, 0, $noreg, %217:fr64, debug-location !287 :: (store 8 into %ir.x1); ep.c:207:16
              to 
  UpdateRegP: SU(10) %217:fr64 = MULSDrr %217:fr64(tied-def 0), %217:fr64, debug-location !297; ep.c:209:21
              to FR32 -1    FR32X -1
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 6 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOVSDmr %stack.7.x2, 1, $noreg, 0, $noreg, %219:fr64, debug-location !294 :: (store 8 into %ir.x2); ep.c:208:16
Bottom Pressure:
FR32=3
FR32X=3
GR16=2
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %219:fr64 = SUBSDrr %219:fr64(tied-def 0), %216:fr64, debug-location !293; ep.c:208:37
Bottom Pressure:
FR32=3
FR32X=3
GR16=2
  LiveReg: %219
  UpdateRegP: SU(8) %219:fr64 = SUBSDrr %219:fr64(tied-def 0), %216:fr64, debug-location !293; ep.c:208:37
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(8) 4c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %219:fr64 = ADDSDrr %219:fr64(tied-def 0), %219:fr64, debug-location !292; ep.c:208:22
Bottom Pressure:
FR32=3
FR32X=3
GR16=2
  LiveReg: %219
  UpdateRegP: SU(7) %219:fr64 = ADDSDrr %219:fr64(tied-def 0), %219:fr64, debug-location !292; ep.c:208:22
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOVSDmr %stack.6.x1, 1, $noreg, 0, $noreg, %217:fr64, debug-location !287 :: (store 8 into %ir.x1); ep.c:207:16
Bottom Pressure:
FR32=3
FR32X=3
GR16=2
  Ready @3c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %217:fr64 = SUBSDrr %217:fr64(tied-def 0), %216:fr64, debug-location !286; ep.c:207:33
Bottom Pressure:
FR32=3
FR32X=3
GR16=2
  LiveReg: %217
  UpdateRegP: SU(5) %217:fr64 = SUBSDrr %217:fr64(tied-def 0), %216:fr64, debug-location !286; ep.c:207:33
              to FR32 -1    FR32X -1
  Ready @4c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %217:fr64 = ADDSDrr %217:fr64(tied-def 0), %217:fr64, debug-location !285; ep.c:207:22
Bottom Pressure:
FR32=3
FR32X=3
GR16=2
  LiveReg: %217
  UpdateRegP: SU(4) %217:fr64 = ADDSDrr %217:fr64(tied-def 0), %217:fr64, debug-location !285; ep.c:207:22
              to FR32 -1    FR32X -1
  Ready @5c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %219:fr64 = MOVSDrm_alt %212:gr64, 1, %201:gr64_nosp, 8, $noreg, debug-location !291 :: (load 8 from %ir.arrayidx84); ep.c:208:24
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %212
  UpdateRegP: SU(2) %217:fr64 = MOVSDrm_alt %212:gr64, 1, %201:gr64_nosp, 0, $noreg, debug-location !284 :: (load 8 from %ir.arrayidx79); ep.c:207:24
              to FR32 -1    FR32X -1
  UpdateRegP: SU(3) %219:fr64 = MOVSDrm_alt %212:gr64, 1, %201:gr64_nosp, 8, $noreg, debug-location !291 :: (load 8 from %ir.arrayidx84); ep.c:208:24
              to FR32 -1    FR32X -1
  Ready @9c
  BotQ.A BotLatency SU(3) 9c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %217:fr64 = MOVSDrm_alt %212:gr64, 1, %201:gr64_nosp, 0, $noreg, debug-location !284 :: (load 8 from %ir.arrayidx79); ep.c:207:24
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @9c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %212:gr64 = SHL64ri %212:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !290; ep.c:208:32
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %212
  UpdateRegP: SU(1) %212:gr64 = SHL64ri %212:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !290; ep.c:208:32
              to GR16 -2
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %212:gr64 = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @14c
  BotQ.A BotLatency SU(0) 14c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %212:gr64 = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
SU(1):   %212:gr64 = SHL64ri %212:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !290; ep.c:208:32
SU(2):   %217:fr64 = MOVSDrm_alt %212:gr64, 1, %201:gr64_nosp, 0, $noreg, debug-location !284 :: (load 8 from %ir.arrayidx79); ep.c:207:24
SU(3):   %219:fr64 = MOVSDrm_alt %212:gr64, 1, %201:gr64_nosp, 8, $noreg, debug-location !291 :: (load 8 from %ir.arrayidx84); ep.c:208:24
SU(4):   %217:fr64 = ADDSDrr %217:fr64(tied-def 0), %217:fr64, debug-location !285; ep.c:207:22
SU(5):   %217:fr64 = SUBSDrr %217:fr64(tied-def 0), %216:fr64, debug-location !286; ep.c:207:33
SU(6):   MOVSDmr %stack.6.x1, 1, $noreg, 0, $noreg, %217:fr64, debug-location !287 :: (store 8 into %ir.x1); ep.c:207:16
SU(7):   %219:fr64 = ADDSDrr %219:fr64(tied-def 0), %219:fr64, debug-location !292; ep.c:208:22
SU(8):   %219:fr64 = SUBSDrr %219:fr64(tied-def 0), %216:fr64, debug-location !293; ep.c:208:37
SU(9):   MOVSDmr %stack.7.x2, 1, $noreg, 0, $noreg, %219:fr64, debug-location !294 :: (store 8 into %ir.x2); ep.c:208:16
SU(10):   %217:fr64 = MULSDrr %217:fr64(tied-def 0), %217:fr64, debug-location !297; ep.c:209:21
SU(11):   %219:fr64 = MULSDrr %219:fr64(tied-def 0), %219:fr64, debug-location !300; ep.c:209:31
SU(12):   %219:fr64 = ADDSDrr %219:fr64(tied-def 0), %217:fr64, debug-location !301; ep.c:209:26
SU(13):   MOVSDmr %stack.2.t1, 1, $noreg, 0, $noreg, %219:fr64, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16
SU(14):   UCOMISDrr %216:fr64, %219:fr64, implicit-def $eflags, debug-location !305; ep.c:210:20

********** MI Scheduling **********
main:%bb.34 if.then92
  From: %4:fr64 = COPY $xmm0, debug-location !309; ep.c:211:34
    To: JCC_1 %bb.36, 2, implicit $eflags, debug-location !314; ep.c:211:20
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %4:fr64 = COPY $xmm0, debug-location !309; ep.c:211:34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=0 Reg=%4
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %4:fr64 = MULSDrr %4:fr64(tied-def 0), %264:fr64, debug-location !310; ep.c:211:32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%4
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %4:fr64 = DIVSDrm %4:fr64(tied-def 0), %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !312 :: (dereferenceable load 8 from %ir.t1); ep.c:211:42
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%4
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%4
  Single Issue       : false;
SU(3):   UCOMISDrr %4:fr64, %226:fr64, implicit-def $eflags, debug-location !314; ep.c:211:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.36, 2, implicit $eflags, debug-location !314; ep.c:211:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) UCOMISDrr %4:fr64, %226:fr64, implicit-def $eflags, debug-location !314; ep.c:211:20
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %4:fr64 = DIVSDrm %4:fr64(tied-def 0), %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !312 :: (dereferenceable load 8 from %ir.t1); ep.c:211:42
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %4:fr64 = MULSDrr %4:fr64(tied-def 0), %264:fr64, debug-location !310; ep.c:211:32
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %4:fr64 = COPY $xmm0, debug-location !309; ep.c:211:34
  Ready @6c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %4:fr64 = COPY $xmm0, debug-location !309; ep.c:211:34
SU(1):   %4:fr64 = MULSDrr %4:fr64(tied-def 0), %264:fr64, debug-location !310; ep.c:211:32
SU(2):   %4:fr64 = DIVSDrm %4:fr64(tied-def 0), %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !312 :: (dereferenceable load 8 from %ir.t1); ep.c:211:42
SU(3):   UCOMISDrr %4:fr64, %226:fr64, implicit-def $eflags, debug-location !314; ep.c:211:20

********** MI Scheduling **********
main:%bb.37 if.then92.split
  From: MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %269:vr128, debug-location !314 :: (store 8 into %ir.t2); ep.c:211:20
    To: JCC_1 %bb.39, 6, implicit $eflags, debug-location !323; ep.c:214:21
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
Live In: %269 %231 
Live Out: %231 
Live Thru: FR32=1
FR32X=1
  LiveReg: %231
  UpdateRegP: SU(6) %232:vr128 = PANDrr %232:vr128(tied-def 0), %231:vr128, debug-location !323; ep.c:214:21
              to 
  UpdateRegP: SU(7) %269:vr128 = PANDrr %269:vr128(tied-def 0), %231:vr128, debug-location !323; ep.c:214:21
              to 
Top Pressure:
FR32=2
FR32X=2
Bottom Pressure:
FR32=1
FR32X=1
Excess PSets: 
SU(0):   MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %269:vr128, debug-location !314 :: (store 8 into %ir.t2); ep.c:211:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(1):   %232:vr128 = MOVSDrm_alt %stack.6.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%232
    SU(2): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(2):   %232:vr128 = MULSDrr %232:vr128(tied-def 0), %269:vr128, debug-location !317; ep.c:212:26
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%232
    SU(1): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%232
    SU(3): Data Latency=1 Reg=%232
    SU(6): Out  Latency=0
    SU(4): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %232:vr128, debug-location !318 :: (store 8 into %ir.t3); ep.c:212:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%232
  Successors:
    SU(6): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(4):   %269:vr128 = MULSDrm %269:vr128(tied-def 0), %stack.7.x2, 1, $noreg, 0, $noreg, debug-location !321 :: (dereferenceable load 8 from %ir.x2); ep.c:213:26
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Anti Latency=0
  Successors:
    SU(7): Data Latency=4 Reg=%269
    SU(5): Data Latency=4 Reg=%269
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOVSDmr %stack.5.t4, 1, $noreg, 0, $noreg, %269:vr128, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=%269
  Successors:
    SU(7): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %232:vr128 = PANDrr %232:vr128(tied-def 0), %231:vr128, debug-location !323; ep.c:214:21
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Data Latency=1 Reg=%232
    SU(2): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%232
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %269:vr128 = PANDrr %269:vr128(tied-def 0), %231:vr128, debug-location !323; ep.c:214:21
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Data Latency=4 Reg=%269
    SU(4): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%269
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   UCOMISDrr %232:vr128, %269:vr128, implicit-def $eflags, debug-location !323; ep.c:214:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%269
    SU(6): Data Latency=1 Reg=%232
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : FR32 2    FR32X 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.39, 6, implicit $eflags, debug-location !323; ep.c:214:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) UCOMISDrr %232:vr128, %269:vr128, implicit-def $eflags, debug-location !323; ep.c:214:21
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %232
  UpdateRegP: SU(8) UCOMISDrr %232:vr128, %269:vr128, implicit-def $eflags, debug-location !323; ep.c:214:21
              to FR32 1    FR32X 1
  LiveReg: %269
  UpdateRegP: SU(8) UCOMISDrr %232:vr128, %269:vr128, implicit-def $eflags, debug-location !323; ep.c:214:21
              to 
  Ready @1c
  BotQ.A TopLatency SU(8) 9c
  BotQ.A BotLatency SU(8) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %269:vr128 = PANDrr %269:vr128(tied-def 0), %231:vr128, debug-location !323; ep.c:214:21
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %269
  UpdateRegP: SU(5) MOVSDmr %stack.5.t4, 1, $noreg, 0, $noreg, %269:vr128, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
              to 
  UpdateRegP: SU(7) %269:vr128 = PANDrr %269:vr128(tied-def 0), %231:vr128, debug-location !323; ep.c:214:21
              to FR32 -1    FR32X -1
  Ready @2c
  BotQ.A BotLatency SU(7) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %232:vr128 = PANDrr %232:vr128(tied-def 0), %231:vr128, debug-location !323; ep.c:214:21
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %232
  UpdateRegP: SU(3) MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %232:vr128, debug-location !318 :: (store 8 into %ir.t3); ep.c:212:20
              to 
  UpdateRegP: SU(6) %232:vr128 = PANDrr %232:vr128(tied-def 0), %231:vr128, debug-location !323; ep.c:214:21
              to FR32 -1    FR32X -1
  Ready @2c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOVSDmr %stack.5.t4, 1, $noreg, 0, $noreg, %269:vr128, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
Bottom Pressure:
FR32=3
FR32X=3
  Ready @2c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %269:vr128 = MULSDrm %269:vr128(tied-def 0), %stack.7.x2, 1, $noreg, 0, $noreg, debug-location !321 :: (dereferenceable load 8 from %ir.x2); ep.c:213:26
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %269
  UpdateRegP: SU(0) MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %269:vr128, debug-location !314 :: (store 8 into %ir.t2); ep.c:211:20
              to 
  UpdateRegP: SU(2) %232:vr128 = MULSDrr %232:vr128(tied-def 0), %269:vr128, debug-location !317; ep.c:212:26
              to 
  UpdateRegP: SU(4) %269:vr128 = MULSDrm %269:vr128(tied-def 0), %stack.7.x2, 1, $noreg, 0, $noreg, debug-location !321 :: (dereferenceable load 8 from %ir.x2); ep.c:213:26
              to FR32 -1    FR32X -1
  Ready @6c
  BotQ.A BotLatency SU(4) 6c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %232:vr128, debug-location !318 :: (store 8 into %ir.t3); ep.c:212:20
Bottom Pressure:
FR32=3
FR32X=3
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %232:vr128 = MULSDrr %232:vr128(tied-def 0), %269:vr128, debug-location !317; ep.c:212:26
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %232
  UpdateRegP: SU(2) %232:vr128 = MULSDrr %232:vr128(tied-def 0), %269:vr128, debug-location !317; ep.c:212:26
              to FR32 -1    FR32X -1
  Ready @6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %232:vr128 = MOVSDrm_alt %stack.6.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
Bottom Pressure:
FR32=2
FR32X=2
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %269:vr128, debug-location !314 :: (store 8 into %ir.t2); ep.c:211:20
Bottom Pressure:
FR32=2
FR32X=2
  Ready @6c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %269:vr128, debug-location !314 :: (store 8 into %ir.t2); ep.c:211:20
SU(1):   %232:vr128 = MOVSDrm_alt %stack.6.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
SU(2):   %232:vr128 = MULSDrr %232:vr128(tied-def 0), %269:vr128, debug-location !317; ep.c:212:26
SU(3):   MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %232:vr128, debug-location !318 :: (store 8 into %ir.t3); ep.c:212:20
SU(4):   %269:vr128 = MULSDrm %269:vr128(tied-def 0), %stack.7.x2, 1, $noreg, 0, $noreg, debug-location !321 :: (dereferenceable load 8 from %ir.x2); ep.c:213:26
SU(5):   MOVSDmr %stack.5.t4, 1, $noreg, 0, $noreg, %269:vr128, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
SU(6):   %232:vr128 = PANDrr %232:vr128(tied-def 0), %231:vr128, debug-location !323; ep.c:214:21
SU(7):   %269:vr128 = PANDrr %269:vr128(tied-def 0), %231:vr128, debug-location !323; ep.c:214:21
SU(8):   UCOMISDrr %232:vr128, %269:vr128, implicit-def $eflags, debug-location !323; ep.c:214:21

********** MI Scheduling **********
main:%bb.38 cond.true
  From: %270:vr128 = MOVSDrm %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.t3); ep.c:214:21
    To: JMP_1 %bb.40, debug-location !323; ep.c:214:21
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %270:vr128 = MOVSDrm %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.t3); ep.c:214:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%270
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %270:vr128 = PANDrr %270:vr128(tied-def 0), %265:vr128, debug-location !323; ep.c:214:21
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%270
    SU(0): Out  Latency=0
  Single Issue       : false;
ExitSU:   JMP_1 %bb.40, debug-location !323; ep.c:214:21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %270:vr128 = PANDrr %270:vr128(tied-def 0), %265:vr128, debug-location !323; ep.c:214:21
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %270:vr128 = MOVSDrm %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.t3); ep.c:214:21
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %270:vr128 = MOVSDrm %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.t3); ep.c:214:21
SU(1):   %270:vr128 = PANDrr %270:vr128(tied-def 0), %265:vr128, debug-location !323; ep.c:214:21

********** MI Scheduling **********
main:%bb.39 cond.false
  From: %270:vr128 = MOVSDrm %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.t4); ep.c:214:21
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %270:vr128 = MOVSDrm %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.t4); ep.c:214:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%270
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %270:vr128 = PANDrr %270:vr128(tied-def 0), %265:vr128, debug-location !323; ep.c:214:21
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%270
    SU(0): Out  Latency=0
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %270:vr128 = PANDrr %270:vr128(tied-def 0), %265:vr128, debug-location !323; ep.c:214:21
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %270:vr128 = MOVSDrm %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.t4); ep.c:214:21
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %270:vr128 = MOVSDrm %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.t4); ep.c:214:21
SU(1):   %270:vr128 = PANDrr %270:vr128(tied-def 0), %265:vr128, debug-location !323; ep.c:214:21

********** MI Scheduling **********
main:%bb.40 cond.end
  From: %243:gr32 = CVTTSD2SIrr %270:vr128, debug-location !323; ep.c:214:21
    To: End RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=4
Live In: %245 %216 %270 
Live Out: %245 %216 
Live Thru: FR32=1
FR32X=1
GR16=2
  LiveReg: %245
  UpdateRegP: SU(3) %247:fr64 = MOVSDrm_alt %245:gr64, 8, %244:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx103)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(5) MOVSDmr %245:gr64, 8, %244:gr64_nosp, 0, $noreg, %247:fr64, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %216
  UpdateRegP: SU(4) %247:fr64 = ADDSDrr %247:fr64(tied-def 0), %216:fr64, debug-location !327; ep.c:215:29
              to 
Top Pressure:
FR32=2
FR32X=2
GR16=2
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
Excess PSets: 
SU(0):   %243:gr32 = CVTTSD2SIrr %270:vr128, debug-location !323; ep.c:214:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=1 Reg=%243
    SU(1): Data Latency=1 Reg=%243
  Pressure Diff      : FR32 1    FR32X 1    GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr %stack.22.l, 1, $noreg, 0, $noreg, %243:gr32, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%243
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %244:gr64_nosp = MOVSX64rr32 %243:gr32, debug-location !325; ep.c:215:26
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Data Latency=1 Reg=%243
  Successors:
    SU(5): Data Latency=1 Reg=%244
    SU(3): Data Latency=1 Reg=%244
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %247:fr64 = MOVSDrm_alt %245:gr64, 8, %244:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx103)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%244
  Successors:
    SU(4): Data Latency=4 Reg=%247
    SU(4): Out  Latency=0
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(4):   %247:fr64 = ADDSDrr %247:fr64(tied-def 0), %216:fr64, debug-location !327; ep.c:215:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%247
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%247
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOVSDmr %245:gr64, 8, %244:gr64_nosp, 0, $noreg, %247:fr64, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%247
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%244
  Pressure Diff      : FR32 1    FR32X 1    GR16 2
  Single Issue       : false;
SU(6):   %249:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !331 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(7): Data Latency=4 Reg=%249
    SU(7): Out  Latency=0
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(7):   %249:fr64 = ADDSDrm %249:fr64(tied-def 0), %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !333 :: (dereferenceable load 8 from %ir.t3); ep.c:216:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(6): Data Latency=4 Reg=%249
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%249
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOVSDmr %stack.8.sx, 1, $noreg, 0, $noreg, %249:fr64, debug-location !334 :: (store 8 into %ir.sx); ep.c:216:20
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%249
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %251:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !335 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(10): Data Latency=4 Reg=%251
    SU(10): Out  Latency=0
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(10):   %251:fr64 = ADDSDrm %251:fr64(tied-def 0), %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !337 :: (dereferenceable load 8 from %ir.t4); ep.c:217:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(9): Data Latency=4 Reg=%251
    SU(9): Out  Latency=0
  Successors:
    SU(11): Data Latency=4 Reg=%251
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   MOVSDmr %stack.9.sy, 1, $noreg, 0, $noreg, %251:fr64, debug-location !338 :: (store 8 into %ir.sy); ep.c:217:20
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(10): Data Latency=4 Reg=%251
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 8 5 1 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOVSDmr %stack.9.sy, 1, $noreg, 0, $noreg, %251:fr64, debug-location !338 :: (store 8 into %ir.sy); ep.c:217:20
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %251
  UpdateRegP: SU(11) MOVSDmr %stack.9.sy, 1, $noreg, 0, $noreg, %251:fr64, debug-location !338 :: (store 8 into %ir.sy); ep.c:217:20
              to 
  Ready @0c
  BotQ.A TopLatency SU(11) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 5 10 
  Cand SU(1) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %251:fr64 = ADDSDrm %251:fr64(tied-def 0), %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !337 :: (dereferenceable load 8 from %ir.t4); ep.c:217:25
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %251
  UpdateRegP: SU(10) %251:fr64 = ADDSDrm %251:fr64(tied-def 0), %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !337 :: (dereferenceable load 8 from %ir.t4); ep.c:217:25
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(10) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 5 9 
  Cand SU(1) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %251:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !335 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @8c
  BotQ.A BotLatency SU(9) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 5 
  Cand SU(1) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOVSDmr %stack.8.sx, 1, $noreg, 0, $noreg, %249:fr64, debug-location !334 :: (store 8 into %ir.sx); ep.c:216:20
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %249
  UpdateRegP: SU(8) MOVSDmr %stack.8.sx, 1, $noreg, 0, $noreg, %249:fr64, debug-location !334 :: (store 8 into %ir.sx); ep.c:216:20
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 7 
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %249:fr64 = ADDSDrm %249:fr64(tied-def 0), %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !333 :: (dereferenceable load 8 from %ir.t3); ep.c:216:25
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %249
  UpdateRegP: SU(7) %249:fr64 = ADDSDrm %249:fr64(tied-def 0), %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !333 :: (dereferenceable load 8 from %ir.t3); ep.c:216:25
              to FR32 -1    FR32X -1
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 6 
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %249:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !331 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOVSDmr %245:gr64, 8, %244:gr64_nosp, 0, $noreg, %247:fr64, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %244
  UpdateRegP: SU(3) %247:fr64 = MOVSDrm_alt %245:gr64, 8, %244:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx103)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(5) MOVSDmr %245:gr64, 8, %244:gr64_nosp, 0, $noreg, %247:fr64, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
              to FR32 1    FR32X 1
  LiveReg: %247
  UpdateRegP: SU(5) MOVSDmr %245:gr64, 8, %244:gr64_nosp, 0, $noreg, %247:fr64, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(4) %247:fr64 = ADDSDrr %247:fr64(tied-def 0), %216:fr64, debug-location !327; ep.c:215:29
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %247
  UpdateRegP: SU(4) %247:fr64 = ADDSDrr %247:fr64(tied-def 0), %216:fr64, debug-location !327; ep.c:215:29
              to FR32 -1    FR32X -1
  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(3) %247:fr64 = MOVSDrm_alt %245:gr64, 8, %244:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx103)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @6c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(2) %244:gr64_nosp = MOVSX64rr32 %243:gr32, debug-location !325; ep.c:215:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %243
  UpdateRegP: SU(1) MOV32mr %stack.22.l, 1, $noreg, 0, $noreg, %243:gr32, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
              to 
  UpdateRegP: SU(2) %244:gr64_nosp = MOVSX64rr32 %243:gr32, debug-location !325; ep.c:215:26
              to GR16 -2
  Ready @7c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.22.l, 1, $noreg, 0, $noreg, %243:gr32, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %243:gr32 = CVTTSD2SIrr %270:vr128, debug-location !323; ep.c:214:21
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %270
  UpdateRegP: SU(0) %243:gr32 = CVTTSD2SIrr %270:vr128, debug-location !323; ep.c:214:21
              to GR16 -2
  Ready @8c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %243:gr32 = CVTTSD2SIrr %270:vr128, debug-location !323; ep.c:214:21
SU(1):   MOV32mr %stack.22.l, 1, $noreg, 0, $noreg, %243:gr32, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
SU(2):   %244:gr64_nosp = MOVSX64rr32 %243:gr32, debug-location !325; ep.c:215:26
SU(3):   %247:fr64 = MOVSDrm_alt %245:gr64, 8, %244:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx103)
SU(4):   %247:fr64 = ADDSDrr %247:fr64(tied-def 0), %216:fr64, debug-location !327; ep.c:215:29
SU(5):   MOVSDmr %245:gr64, 8, %244:gr64_nosp, 0, $noreg, %247:fr64, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
SU(6):   %249:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !331 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
SU(7):   %249:fr64 = ADDSDrm %249:fr64(tied-def 0), %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !333 :: (dereferenceable load 8 from %ir.t3); ep.c:216:25
SU(8):   MOVSDmr %stack.8.sx, 1, $noreg, 0, $noreg, %249:fr64, debug-location !334 :: (store 8 into %ir.sx); ep.c:216:20
SU(9):   %251:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !335 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
SU(10):   %251:fr64 = ADDSDrm %251:fr64(tied-def 0), %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !337 :: (dereferenceable load 8 from %ir.t4); ep.c:217:25
SU(11):   MOVSDmr %stack.9.sy, 1, $noreg, 0, $noreg, %251:fr64, debug-location !338 :: (store 8 into %ir.sy); ep.c:217:20

********** MI Scheduling **********
main:%bb.45 for.end118
  From: MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %177:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %177:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
SU(1):   %177:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg

********** MI Scheduling **********
main:%bb.47 for.body122
  From: %178:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
    To: JMP_1 %bb.46, debug-location !366; ep.c:225:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %178:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%178
    SU(2): Out  Latency=0
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %276:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=4 Reg=%276
    SU(2): Data Latency=4 Reg=%276
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %178:fr64 = ADDSDrm %178:fr64(tied-def 0), %177:gr64, 8, %276:gr64_nosp, 0, $noreg, debug-location !363 :: (load 8 from %ir.arrayidx124); ep.c:226:17
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%276
    SU(0): Data Latency=4 Reg=%178
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%178
  Single Issue       : false;
SU(3):   MOVSDmr %stack.13.gc, 1, $noreg, 0, $noreg, %178:fr64, debug-location !364 :: (store 8 into %ir.gc); ep.c:226:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%178
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %179:gr32 = LEA64_32r %276:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !365; ep.c:225:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%276
  Successors:
    SU(5): Data Latency=1 Reg=%179
  Single Issue       : false;
SU(5):   MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %179:gr32, debug-location !365 :: (store 4 into %ir.i); ep.c:225:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%179
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.46, debug-location !366; ep.c:225:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %179:gr32, debug-location !365 :: (store 4 into %ir.i); ep.c:225:26
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %179:gr32 = LEA64_32r %276:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !365; ep.c:225:26
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.13.gc, 1, $noreg, 0, $noreg, %178:fr64, debug-location !364 :: (store 8 into %ir.gc); ep.c:226:12
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %178:fr64 = ADDSDrm %178:fr64(tied-def 0), %177:gr64, 8, %276:gr64_nosp, 0, $noreg, debug-location !363 :: (load 8 from %ir.arrayidx124); ep.c:226:17
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %276:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %178:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   %178:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
SU(1):   %276:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
SU(2):   %178:fr64 = ADDSDrm %178:fr64(tied-def 0), %177:gr64, 8, %276:gr64_nosp, 0, $noreg, debug-location !363 :: (load 8 from %ir.arrayidx124); ep.c:226:17
SU(3):   MOVSDmr %stack.13.gc, 1, $noreg, 0, $noreg, %178:fr64, debug-location !364 :: (store 8 into %ir.gc); ep.c:226:12
SU(4):   %179:gr32 = LEA64_32r %276:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !365; ep.c:225:26
SU(5):   MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %179:gr32, debug-location !365 :: (store 4 into %ir.i); ep.c:225:26

********** MI Scheduling **********
main:%bb.48 for.end128
  From: %73:fr64 = COPY $xmm0, debug-location !370; ep.c:232:10
    To: JCC_1 %bb.53, 5, implicit $eflags, debug-location !383; ep.c:268:9
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=1
GR16=4
Live In: %72 XMM0 
Live Out: 
Live Thru: 
Top Pressure:
FR32=1
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=1
GR16=2
Bottom Pressure:

Excess PSets: 
SU(0):   %73:fr64 = COPY $xmm0, debug-location !370; ep.c:232:10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%73
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   MOVSDmr %stack.10.tm, 1, $noreg, 0, $noreg, %73:fr64, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%73
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(2):   MOV32mi %stack.24.nit, 1, $noreg, 0, $noreg, 0, debug-location !372 :: (store 4 into %ir.nit); ep.c:234:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %74:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%74
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %74:gr32, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%74
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %75:gr64 = MOV64ri 4675776847449726827
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%75
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   MOV64mr %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, %75:gr64, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%75
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %76:gr64 = MOV64ri -4550329231111044107
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%76
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   MOV64mr %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, %76:gr64, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%76
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   TEST8rr %72.sub_8bit:gr32temp, %72.sub_8bit:gr32temp, implicit-def $eflags, debug-location !383; ep.c:268:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32temp 2    GR32temp+GR32_DIBP 2    GR32temp+GR64_TC 2    GR8+GR32temp 2    GR16 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.53, 5, implicit $eflags, debug-location !383; ep.c:268:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 4 2 1 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) TEST8rr %72.sub_8bit:gr32temp, %72.sub_8bit:gr32temp, implicit-def $eflags, debug-location !383; ep.c:268:9
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
  LiveReg: %72
  UpdateRegP: SU(9) TEST8rr %72.sub_8bit:gr32temp, %72.sub_8bit:gr32temp, implicit-def $eflags, debug-location !383; ep.c:268:9
              to 
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 4 2 1 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV64mr %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, %76:gr64, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=4
  LiveReg: %76
  UpdateRegP: SU(8) MOV64mr %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, %76:gr64, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 4 2 7 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %76:gr64 = MOV64ri -4550329231111044107
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 4 2 
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV64mr %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, %75:gr64, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=4
  LiveReg: %75
  UpdateRegP: SU(6) MOV64mr %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, %75:gr64, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 4 5 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %75:gr64 = MOV64ri 4675776847449726827
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 4 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %74:gr32, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=4
  LiveReg: %74
  UpdateRegP: SU(4) MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %74:gr32, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
              to 
  Ready @1c
  BotQ.A TopLatency SU(4) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %74:gr32 = MOV32ri 1
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.24.nit, 1, $noreg, 0, $noreg, 0, debug-location !372 :: (store 4 into %ir.nit); ep.c:234:9
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.10.tm, 1, $noreg, 0, $noreg, %73:fr64, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
Bottom Pressure:
FR32=1
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=1
GR16=2
  LiveReg: %73
  UpdateRegP: SU(1) MOVSDmr %stack.10.tm, 1, $noreg, 0, $noreg, %73:fr64, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
              to 
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %73:fr64 = COPY $xmm0, debug-location !370; ep.c:232:10
Bottom Pressure:
FR32=1
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=1
GR16=2
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %73:fr64 = COPY $xmm0, debug-location !370; ep.c:232:10
SU(1):   MOVSDmr %stack.10.tm, 1, $noreg, 0, $noreg, %73:fr64, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
SU(2):   MOV32mi %stack.24.nit, 1, $noreg, 0, $noreg, 0, debug-location !372 :: (store 4 into %ir.nit); ep.c:234:9
SU(3):   %74:gr32 = MOV32ri 1
SU(4):   MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %74:gr32, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
SU(5):   %75:gr64 = MOV64ri 4675776847449726827
SU(6):   MOV64mr %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, %75:gr64, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
SU(7):   %76:gr64 = MOV64ri -4550329231111044107
SU(8):   MOV64mr %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, %76:gr64, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
SU(9):   TEST8rr %72.sub_8bit:gr32temp, %72.sub_8bit:gr32temp, implicit-def $eflags, debug-location !383; ep.c:268:9

********** MI Scheduling **********
main:%bb.48 for.end128
  From: %72:gr32temp = MOV32r0 implicit-def dead $eflags
    To: CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !369; ep.c:231:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %72:gr32temp = MOV32r0 implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $edi = MOV32r0 implicit-def dead $eflags, debug-location !369; ep.c:231:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !369; ep.c:231:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32r0 implicit-def dead $eflags, debug-location !369; ep.c:231:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %72:gr32temp = MOV32r0 implicit-def dead $eflags
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %72:gr32temp = MOV32r0 implicit-def dead $eflags
SU(1):   $edi = MOV32r0 implicit-def dead $eflags, debug-location !369; ep.c:231:5

********** MI Scheduling **********
main:%bb.49 if.then133
  From: %82:vr128 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !384 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
    To: JCC_1 %bb.51, 3, implicit $eflags, debug-location !401; ep.c:271:41
 RegionInstrs: 15
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=4
FR32X=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %82:vr128 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !384 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(2): Data Latency=4 Reg=%82
    SU(2): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %80:fr64 = MOVSDrm_alt %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, debug-location !386 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(3): Data Latency=4 Reg=%80
    SU(2): Data Latency=4 Reg=%80
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(2):   %82:vr128 = SUBSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !387; ep.c:269:27
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%80
    SU(0): Data Latency=4 Reg=%82
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%82
    SU(3): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   %82:vr128 = DIVSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !389; ep.c:269:46
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(2): Data Latency=1 Reg=%82
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%80
  Successors:
    SU(5): Data Latency=10 Reg=%82
    SU(5): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(4):   %84:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg, debug-location !390 :: (load 16 from constant-pool); ep.c:269:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(11): Data Latency=4 Reg=%84
    SU(5): Data Latency=4 Reg=%84
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(5):   %82:vr128 = PANDrr %82:vr128(tied-def 0), %84:vr128, debug-location !390; ep.c:269:18
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 2
  Predecessors:
    SU(3): Data Latency=10 Reg=%82
    SU(4): Data Latency=4 Reg=%84
    SU(3): Out  Latency=0
  Successors:
    SU(14): Data Latency=1 Reg=%82
    SU(6): Data Latency=1 Reg=%82
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   MOVLPDmr %stack.16.sx_err, 1, $noreg, 0, $noreg, %82:vr128, debug-location !391 :: (store 8 into %ir.sx_err); ep.c:269:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%82
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(7):   %90:vr128 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !392 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(9): Data Latency=4 Reg=%90
    SU(9): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(8):   %88:fr64 = MOVSDrm_alt %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, debug-location !393 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(10): Data Latency=4 Reg=%88
    SU(9): Data Latency=4 Reg=%88
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(9):   %90:vr128 = SUBSDrr %90:vr128(tied-def 0), %88:fr64, debug-location !394; ep.c:270:27
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(8): Data Latency=4 Reg=%88
    SU(7): Data Latency=4 Reg=%90
    SU(7): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%90
    SU(10): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(10):   %90:vr128 = DIVSDrr %90:vr128(tied-def 0), %88:fr64, debug-location !396; ep.c:270:46
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(9): Data Latency=1 Reg=%90
    SU(9): Out  Latency=0
    SU(8): Data Latency=4 Reg=%88
  Successors:
    SU(11): Data Latency=10 Reg=%90
    SU(11): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(11):   %90:vr128 = PANDrr %90:vr128(tied-def 0), %84:vr128, debug-location !397; ep.c:270:18
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(10): Data Latency=10 Reg=%90
    SU(10): Out  Latency=0
    SU(4): Data Latency=4 Reg=%84
  Successors:
    SU(12): Data Latency=1 Reg=%90
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(12):   MOVLPDmr %stack.17.sy_err, 1, $noreg, 0, $noreg, %90:vr128, debug-location !398 :: (store 8 into %ir.sy_err); ep.c:270:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%90
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(13):   %94:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(14): Data Latency=4 Reg=%94
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(14):   UCOMISDrr %94:fr64, %82:vr128, implicit-def $eflags, debug-location !400; ep.c:271:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%82
    SU(13): Data Latency=4 Reg=%94
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : FR32 2    FR32X 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.51, 3, implicit $eflags, debug-location !401; ep.c:271:41
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(14): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 6 14 
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) UCOMISDrr %94:fr64, %82:vr128, implicit-def $eflags, debug-location !400; ep.c:271:29
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %94
  UpdateRegP: SU(14) UCOMISDrr %94:fr64, %82:vr128, implicit-def $eflags, debug-location !400; ep.c:271:29
              to FR32 1    FR32X 1
  LiveReg: %82
  UpdateRegP: SU(6) MOVLPDmr %stack.16.sx_err, 1, $noreg, 0, $noreg, %82:vr128, debug-location !391 :: (store 8 into %ir.sx_err); ep.c:269:16
              to 
  UpdateRegP: SU(14) UCOMISDrr %94:fr64, %82:vr128, implicit-def $eflags, debug-location !400; ep.c:271:29
              to 
  Ready @1c
  BotQ.A TopLatency SU(14) 16c
  BotQ.A BotLatency SU(14) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 6 13 
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %94:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @5c
  BotQ.A BotLatency SU(13) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 6 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) MOVLPDmr %stack.17.sy_err, 1, $noreg, 0, $noreg, %90:vr128, debug-location !398 :: (store 8 into %ir.sy_err); ep.c:270:16
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %90
  UpdateRegP: SU(12) MOVLPDmr %stack.17.sy_err, 1, $noreg, 0, $noreg, %90:vr128, debug-location !398 :: (store 8 into %ir.sy_err); ep.c:270:16
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %90:vr128 = PANDrr %90:vr128(tied-def 0), %84:vr128, debug-location !397; ep.c:270:18
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %90
  UpdateRegP: SU(11) %90:vr128 = PANDrr %90:vr128(tied-def 0), %84:vr128, debug-location !397; ep.c:270:18
              to 
  LiveReg: %84
  UpdateRegP: SU(5) %82:vr128 = PANDrr %82:vr128(tied-def 0), %84:vr128, debug-location !390; ep.c:269:18
              to 
  UpdateRegP: SU(11) %90:vr128 = PANDrr %90:vr128(tied-def 0), %84:vr128, debug-location !397; ep.c:270:18
              to FR32 -1    FR32X -1
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 10 
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %90:vr128 = DIVSDrr %90:vr128(tied-def 0), %88:fr64, debug-location !396; ep.c:270:46
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %90
  UpdateRegP: SU(10) %90:vr128 = DIVSDrr %90:vr128(tied-def 0), %88:fr64, debug-location !396; ep.c:270:46
              to 
  LiveReg: %88
  UpdateRegP: SU(9) %90:vr128 = SUBSDrr %90:vr128(tied-def 0), %88:fr64, debug-location !394; ep.c:270:27
              to 
  UpdateRegP: SU(10) %90:vr128 = DIVSDrr %90:vr128(tied-def 0), %88:fr64, debug-location !396; ep.c:270:46
              to FR32 -1    FR32X -1
  Ready @11c
  BotQ.A BotLatency SU(10) 11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %90:vr128 = SUBSDrr %90:vr128(tied-def 0), %88:fr64, debug-location !394; ep.c:270:27
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %90
  UpdateRegP: SU(9) %90:vr128 = SUBSDrr %90:vr128(tied-def 0), %88:fr64, debug-location !394; ep.c:270:27
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(9) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 7 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %88:fr64 = MOVSDrm_alt %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, debug-location !393 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
Bottom Pressure:
FR32=3
FR32X=3
  Ready @16c
  BotQ.A BotLatency SU(8) 16c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %90:vr128 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !392 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
Bottom Pressure:
FR32=2
FR32X=2
  Ready @16c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOVLPDmr %stack.16.sx_err, 1, $noreg, 0, $noreg, %82:vr128, debug-location !391 :: (store 8 into %ir.sx_err); ep.c:269:16
Bottom Pressure:
FR32=2
FR32X=2
  Ready @2c
  BotQ.A TopLatency SU(6) 16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %82:vr128 = PANDrr %82:vr128(tied-def 0), %84:vr128, debug-location !390; ep.c:269:18
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %82
  UpdateRegP: SU(5) %82:vr128 = PANDrr %82:vr128(tied-def 0), %84:vr128, debug-location !390; ep.c:269:18
              to FR32 -1    FR32X -1
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %84:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg, debug-location !390 :: (load 16 from constant-pool); ep.c:269:18
Bottom Pressure:
FR32=1
FR32X=1
  Ready @7c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %82:vr128 = DIVSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !389; ep.c:269:46
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %82
  UpdateRegP: SU(3) %82:vr128 = DIVSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !389; ep.c:269:46
              to 
  LiveReg: %80
  UpdateRegP: SU(2) %82:vr128 = SUBSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !387; ep.c:269:27
              to 
  UpdateRegP: SU(3) %82:vr128 = DIVSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !389; ep.c:269:46
              to FR32 -1    FR32X -1
  Ready @13c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %82:vr128 = SUBSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !387; ep.c:269:27
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %82
  UpdateRegP: SU(2) %82:vr128 = SUBSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !387; ep.c:269:27
              to FR32 -1    FR32X -1
  Ready @14c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %80:fr64 = MOVSDrm_alt %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, debug-location !386 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
Bottom Pressure:
FR32=1
FR32X=1
  Ready @18c
  BotQ.A BotLatency SU(1) 17c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %82:vr128 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !384 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
Bottom Pressure:

  Ready @18c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %82:vr128 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !384 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
SU(1):   %80:fr64 = MOVSDrm_alt %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, debug-location !386 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
SU(2):   %82:vr128 = SUBSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !387; ep.c:269:27
SU(3):   %82:vr128 = DIVSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !389; ep.c:269:46
SU(4):   %84:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg, debug-location !390 :: (load 16 from constant-pool); ep.c:269:18
SU(5):   %82:vr128 = PANDrr %82:vr128(tied-def 0), %84:vr128, debug-location !390; ep.c:269:18
SU(6):   MOVLPDmr %stack.16.sx_err, 1, $noreg, 0, $noreg, %82:vr128, debug-location !391 :: (store 8 into %ir.sx_err); ep.c:269:16
SU(7):   %90:vr128 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !392 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
SU(8):   %88:fr64 = MOVSDrm_alt %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, debug-location !393 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
SU(9):   %90:vr128 = SUBSDrr %90:vr128(tied-def 0), %88:fr64, debug-location !394; ep.c:270:27
SU(10):   %90:vr128 = DIVSDrr %90:vr128(tied-def 0), %88:fr64, debug-location !396; ep.c:270:46
SU(11):   %90:vr128 = PANDrr %90:vr128(tied-def 0), %84:vr128, debug-location !397; ep.c:270:18
SU(12):   MOVLPDmr %stack.17.sy_err, 1, $noreg, 0, $noreg, %90:vr128, debug-location !398 :: (store 8 into %ir.sy_err); ep.c:270:16
SU(13):   %94:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
SU(14):   UCOMISDrr %94:fr64, %82:vr128, implicit-def $eflags, debug-location !400; ep.c:271:29

********** MI Scheduling **********
main:%bb.51 land.rhs
  From: %95:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %95:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%95
  Single Issue       : false;
SU(1):   UCOMISDrm %95:fr64, %stack.17.sy_err, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !403 :: (dereferenceable load 8 from %ir.sy_err); ep.c:271:52
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%95
  Successors:
    SU(2): Data Latency=4 Reg=$eflags
  Single Issue       : false;
SU(2):   undef %93.sub_8bit:gr32temp = SETCCr 3, implicit $eflags, debug-location !403; ep.c:271:52
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$eflags
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) undef %93.sub_8bit:gr32temp = SETCCr 3, implicit $eflags, debug-location !403; ep.c:271:52
  Ready @0c
  BotQ.A TopLatency SU(2) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) UCOMISDrm %95:fr64, %stack.17.sy_err, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !403 :: (dereferenceable load 8 from %ir.sy_err); ep.c:271:52
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %95:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %95:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
SU(1):   UCOMISDrm %95:fr64, %stack.17.sy_err, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !403 :: (dereferenceable load 8 from %ir.sy_err); ep.c:271:52
SU(2):   undef %93.sub_8bit:gr32temp = SETCCr 3, implicit $eflags, debug-location !403; ep.c:271:52

********** MI Scheduling **********
main:%bb.52 land.end
  From: %96:gr32 = MOVZX32rr8 %93.sub_8bit:gr32temp, debug-location !401; ep.c:271:41
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %96:gr32 = MOVZX32rr8 %93.sub_8bit:gr32temp, debug-location !401; ep.c:271:41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%96
  Single Issue       : false;
SU(1):   MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %96:gr32, debug-location !405 :: (store 4 into %ir.verified); ep.c:271:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%96
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %96:gr32, debug-location !405 :: (store 4 into %ir.verified); ep.c:271:18
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %96:gr32 = MOVZX32rr8 %93.sub_8bit:gr32temp, debug-location !401; ep.c:271:41
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %96:gr32 = MOVZX32rr8 %93.sub_8bit:gr32temp, debug-location !401; ep.c:271:41
SU(1):   MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %96:gr32, debug-location !405 :: (store 4 into %ir.verified); ep.c:271:18

********** MI Scheduling **********
main:%bb.53 if.end142
  From: MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !422 :: (store 4 into %ir.i); ep.c:282:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !422 :: (store 4 into %ir.i); ep.c:282:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %169:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %169:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !422 :: (store 4 into %ir.i); ep.c:282:12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !422 :: (store 4 into %ir.i); ep.c:282:12
SU(1):   %169:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg

********** MI Scheduling **********
main:%bb.53 if.end142
  From: $rdi = LEA64r $rip, 1, $noreg, @ep__str_10_Counts____, $noreg, debug-location !421; ep.c:281:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !421; ep.c:281:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_10_Counts____, $noreg, debug-location !421; ep.c:281:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !421; ep.c:281:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !421; ep.c:281:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !421; ep.c:281:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ep__str_10_Counts____, $noreg, debug-location !421; ep.c:281:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_10_Counts____, $noreg, debug-location !421; ep.c:281:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !421; ep.c:281:5

********** MI Scheduling **********
main:%bb.53 if.end142
  From: $rdi = LEA64r $rip, 1, $noreg, @ep__str_9_Sums____25, $noreg, debug-location !420; ep.c:280:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !420; ep.c:280:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_9_Sums____25, $noreg, debug-location !420; ep.c:280:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %116:fr64, debug-location !420; ep.c:280:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %117:fr64, debug-location !420; ep.c:280:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 2, debug-location !420; ep.c:280:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !420; ep.c:280:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 2, debug-location !420; ep.c:280:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm1 = COPY %117:fr64, debug-location !420; ep.c:280:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %116:fr64, debug-location !420; ep.c:280:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ep__str_9_Sums____25, $noreg, debug-location !420; ep.c:280:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_9_Sums____25, $noreg, debug-location !420; ep.c:280:5
SU(1):   $xmm0 = COPY %116:fr64, debug-location !420; ep.c:280:5
SU(2):   $xmm1 = COPY %117:fr64, debug-location !420; ep.c:280:5
SU(3):   $al = MOV8ri 2, debug-location !420; ep.c:280:5

********** MI Scheduling **********
main:%bb.53 if.end142
  From: %116:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !420; ep.c:280:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %116:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %117:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !419 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !420; ep.c:280:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %117:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !419 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %116:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %116:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
SU(1):   %117:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !419 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46

********** MI Scheduling **********
main:%bb.53 if.end142
  From: $rdi = LEA64r $rip, 1, $noreg, @ep__str_8_No__Gaussi, $noreg, debug-location !417; ep.c:279:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !417; ep.c:279:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_8_No__Gaussi, $noreg, debug-location !417; ep.c:279:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %113:fr64, debug-location !417; ep.c:279:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !417; ep.c:279:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !417; ep.c:279:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !417; ep.c:279:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %113:fr64, debug-location !417; ep.c:279:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ep__str_8_No__Gaussi, $noreg, debug-location !417; ep.c:279:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_8_No__Gaussi, $noreg, debug-location !417; ep.c:279:5
SU(1):   $xmm0 = COPY %113:fr64, debug-location !417; ep.c:279:5
SU(2):   $al = MOV8ri 1, debug-location !417; ep.c:279:5

********** MI Scheduling **********
main:%bb.53 if.end142
  From: $rdi = LEA64r $rip, 1, $noreg, @ep__str_7_N___2__5d_, $noreg, debug-location !415; ep.c:278:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !415; ep.c:278:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_7_N___2__5d_, $noreg, debug-location !415; ep.c:278:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 30, debug-location !415; ep.c:278:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !415; ep.c:278:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !415; ep.c:278:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !415; ep.c:278:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = MOV32ri 30, debug-location !415; ep.c:278:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ep__str_7_N___2__5d_, $noreg, debug-location !415; ep.c:278:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_7_N___2__5d_, $noreg, debug-location !415; ep.c:278:5
SU(1):   $esi = MOV32ri 30, debug-location !415; ep.c:278:5
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !415; ep.c:278:5

********** MI Scheduling **********
main:%bb.53 if.end142
  From: $rdi = LEA64r $rip, 1, $noreg, @ep__str_6_CPU_Time__, $noreg, debug-location !414; ep.c:277:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !414; ep.c:277:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_6_CPU_Time__, $noreg, debug-location !414; ep.c:277:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %106:fr64, debug-location !414; ep.c:277:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !414; ep.c:277:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !414; ep.c:277:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !414; ep.c:277:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %106:fr64, debug-location !414; ep.c:277:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ep__str_6_CPU_Time__, $noreg, debug-location !414; ep.c:277:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_6_CPU_Time__, $noreg, debug-location !414; ep.c:277:5
SU(1):   $xmm0 = COPY %106:fr64, debug-location !414; ep.c:277:5
SU(2):   $al = MOV8ri 1, debug-location !414; ep.c:277:5

********** MI Scheduling **********
main:%bb.53 if.end142
  From: $rdi = LEA64r $rip, 1, $noreg, @ep__str_5__EP_Benchm, $noreg, debug-location !412; ep.c:276:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !412; ep.c:276:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_5__EP_Benchm, $noreg, debug-location !412; ep.c:276:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !412; ep.c:276:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !412; ep.c:276:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !412; ep.c:276:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ep__str_5__EP_Benchm, $noreg, debug-location !412; ep.c:276:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_5__EP_Benchm, $noreg, debug-location !412; ep.c:276:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !412; ep.c:276:5

********** MI Scheduling **********
main:%bb.53 if.end142
  From: %101:fr64 = COPY $xmm0, debug-location !407; ep.c:274:12
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !412; ep.c:276:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %101:fr64 = COPY $xmm0, debug-location !407; ep.c:274:12
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=0 Reg=%101
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %101:fr64 = DIVSDrm %101:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !409 :: (dereferenceable load 8 from %ir.tm); ep.c:274:28
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Predecessors:
    SU(0): Data Latency=0 Reg=%101
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%101
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %101:fr64 = DIVSDrm %101:fr64(tied-def 0), $rip, 1, $noreg, %const.6, $noreg, debug-location !410 :: (load 8 from constant-pool); ep.c:274:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%101
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%101
  Single Issue       : false;
SU(3):   MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %101:fr64, debug-location !411 :: (store 8 into %ir.Mops); ep.c:274:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%101
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !412; ep.c:276:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %101:fr64, debug-location !411 :: (store 8 into %ir.Mops); ep.c:274:10
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %101:fr64 = DIVSDrm %101:fr64(tied-def 0), $rip, 1, $noreg, %const.6, $noreg, debug-location !410 :: (load 8 from constant-pool); ep.c:274:33
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %101:fr64 = DIVSDrm %101:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !409 :: (dereferenceable load 8 from %ir.tm); ep.c:274:28
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %101:fr64 = COPY $xmm0, debug-location !407; ep.c:274:12
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %101:fr64 = COPY $xmm0, debug-location !407; ep.c:274:12
SU(1):   %101:fr64 = DIVSDrm %101:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !409 :: (dereferenceable load 8 from %ir.tm); ep.c:274:28
SU(2):   %101:fr64 = DIVSDrm %101:fr64(tied-def 0), $rip, 1, $noreg, %const.6, $noreg, debug-location !410 :: (load 8 from constant-pool); ep.c:274:33
SU(3):   MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %101:fr64, debug-location !411 :: (store 8 into %ir.Mops); ep.c:274:10

********** MI Scheduling **********
main:%bb.53 if.end142
  From: %97:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
    To: CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !407; ep.c:274:12
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %97:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%97
  Single Issue       : false;
SU(1):   %98:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%98
  Single Issue       : false;
SU(2):   $xmm0 = COPY %97:fr64, debug-location !407; ep.c:274:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%97
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %98:fr64, debug-location !407; ep.c:274:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%98
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !407; ep.c:274:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $xmm1 = COPY %98:fr64, debug-location !407; ep.c:274:12
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %97:fr64, debug-location !407; ep.c:274:12
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %98:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %97:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %97:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(1):   %98:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(2):   $xmm0 = COPY %97:fr64, debug-location !407; ep.c:274:12
SU(3):   $xmm1 = COPY %98:fr64, debug-location !407; ep.c:274:12

********** MI Scheduling **********
main:%bb.55 for.body155
  From: $rdi = LEA64r $rip, 1, $noreg, @ep__str_11__3d_15_0lf, $noreg, debug-location !433; ep.c:283:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !433; ep.c:283:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_11__3d_15_0lf, $noreg, debug-location !433; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %167.sub_32bit:gr64_nosp, debug-location !433; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %170:fr64, debug-location !433; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !433; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !433; ep.c:283:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !433; ep.c:283:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %170:fr64, debug-location !433; ep.c:283:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %167.sub_32bit:gr64_nosp, debug-location !433; ep.c:283:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ep__str_11__3d_15_0lf, $noreg, debug-location !433; ep.c:283:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_11__3d_15_0lf, $noreg, debug-location !433; ep.c:283:9
SU(1):   $esi = COPY %167.sub_32bit:gr64_nosp, debug-location !433; ep.c:283:9
SU(2):   $xmm0 = COPY %170:fr64, debug-location !433; ep.c:283:9
SU(3):   $al = MOV8ri 1, debug-location !433; ep.c:283:9

********** MI Scheduling **********
main:%bb.55 for.body155
  From: %167:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !433; ep.c:283:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %167:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%167
  Single Issue       : false;
SU(1):   %170:fr64 = MOVSDrm_alt %169:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !432 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%167
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !433; ep.c:283:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %170:fr64 = MOVSDrm_alt %169:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !432 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  Ready @3c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %167:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  Ready @7c
  BotQ.A BotLatency SU(0) 7c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   %167:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
SU(1):   %170:fr64 = MOVSDrm_alt %169:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !432 :: (load 8 from %ir.arrayidx157); ep.c:283:35

********** MI Scheduling **********
main:%bb.56 for.end161
  From: %129:gr64 = LEA64r $rip, 1, $noreg, @ep__str_22_randdp_, $noreg, debug-location !443; ep.c:286:5
    To: CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !443; ep.c:286:5
 RegionInstrs: 29
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=4
GR16=12
Live In: %127 %126 %125 %128 
Live Out: %127 %126 %125 %128 
Live Thru: FR32=2
FR32X=2
GR16=4
  LiveReg: %127
  UpdateRegP: SU(28) $xmm1 = COPY %127:fr64, debug-location !443; ep.c:286:5
              to FR32 -1    FR32X -1
  LiveReg: %126
  UpdateRegP: SU(27) $xmm0 = COPY %126:fr64, debug-location !443; ep.c:286:5
              to FR32 -1    FR32X -1
  LiveReg: %125
  UpdateRegP: SU(26) $r9d = COPY %125:gr32, debug-location !443; ep.c:286:5
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  LiveReg: %128
  UpdateRegP: SU(18) MOV32mr $rsp, 1, $noreg, 8, $noreg, %128:gr32, debug-location !443 :: (store 4 into stack + 8); ep.c:286:5
              to 
Top Pressure:
FR32=2
FR32X=2
GR16=4
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=4
GR16=12
Excess PSets: 
SU(0):   %129:gr64 = LEA64r $rip, 1, $noreg, @ep__str_22_randdp_, $noreg, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%129
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV64mr $rsp, 1, $noreg, 80, $noreg, %129:gr64, debug-location !443 :: (store 8 into stack + 80); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%129
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %131:gr64 = LEA64r $rip, 1, $noreg, @ep__str_21__O3__mcmod, $noreg, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%131
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr $rsp, 1, $noreg, 72, $noreg, %131:gr64, debug-location !443 :: (store 8 into stack + 72); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%131
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %132:gr64 = LEA64r $rip, 1, $noreg, @ep__str_20__g__Wall__, $noreg, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%132
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr $rsp, 1, $noreg, 64, $noreg, %132:gr64, debug-location !443 :: (store 8 into stack + 64); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%132
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %133:gr64 = LEA64r $rip, 1, $noreg, @ep__str_19__I___commo, $noreg, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%133
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr $rsp, 1, $noreg, 56, $noreg, %133:gr64, debug-location !443 :: (store 8 into stack + 56); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%133
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %134:gr64 = LEA64r $rip, 1, $noreg, @ep__str_18__lm_, $noreg, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%134
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %134:gr64, debug-location !443 :: (store 8 into stack + 48); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%134
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %135:gr64 = LEA64r $rip, 1, $noreg, @ep__str_17___CC__, $noreg, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%135
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %135:gr64, debug-location !443 :: (store 8 into stack + 40); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%135
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %136:gr64 = LEA64r $rip, 1, $noreg, @ep__str_16_gcc_, $noreg, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%136
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %136:gr64, debug-location !443 :: (store 8 into stack + 32); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%136
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %137:gr64 = LEA64r $rip, 1, $noreg, @ep__str_15_03_Nov_201, $noreg, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%137
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %137:gr64, debug-location !443 :: (store 8 into stack + 24); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%137
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %138:gr64 = LEA64r $rip, 1, $noreg, @ep__str_14_3_3_1_, $noreg, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%138
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(17):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %138:gr64, debug-location !443 :: (store 8 into stack + 16); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%138
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %128:gr32, debug-location !443 :: (store 4 into stack + 8); ep.c:286:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %139:gr64 = LEA64r $rip, 1, $noreg, @ep__str_13_Random_num, $noreg, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%139
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(20):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %139:gr64, debug-location !443 :: (store 8 into stack); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%139
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_12_EP_, $noreg, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(22):   $esi = MOV32ri 66, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  Single Issue       : false;
SU(23):   $edx = MOV32ri 31, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Single Issue       : false;
SU(24):   $ecx = MOV32ri 0, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  Single Issue       : false;
SU(25):   $r8d = MOV32r0 implicit-def dead $eflags, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(26):   $r9d = COPY %125:gr32, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(27):   $xmm0 = COPY %126:fr64, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(28):   $xmm1 = COPY %127:fr64, debug-location !443; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !443; ep.c:286:5
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=1 Artificial
    SU(24): Ord  Latency=1 Artificial
    SU(23): Ord  Latency=1 Artificial
    SU(22): Ord  Latency=1 Artificial
    SU(21): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 28 27 26 25 24 23 22 21 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(28) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(28) $xmm1 = COPY %127:fr64, debug-location !443; ep.c:286:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=3
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=3
GR16=12
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 27 26 25 24 23 22 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(27) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(27) $xmm0 = COPY %126:fr64, debug-location !443; ep.c:286:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=12
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 26 25 24 23 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) $r9d = COPY %125:gr32, debug-location !443; ep.c:286:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
FR32X=2
GR16=11
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 25 24 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) $r8d = MOV32r0 implicit-def dead $eflags, debug-location !443; ep.c:286:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
FR32X=2
GR16=10
  Ready @1c
  BotQ.A BotLatency SU(25) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 24 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) $ecx = MOV32ri 0, debug-location !443; ep.c:286:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
FR32X=2
GR16=8
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) $edx = MOV32ri 31, debug-location !443; ep.c:286:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=2
GR16=6
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(22) $esi = MOV32ri 66, debug-location !443; ep.c:286:5
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
FR32X=2
GR16=5
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) $rdi = LEA64r $rip, 1, $noreg, @ep__str_12_EP_, $noreg, debug-location !443; ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) MOV64mr $rsp, 1, $noreg, 0, $noreg, %139:gr64, debug-location !443 :: (store 8 into stack); ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %139
  UpdateRegP: SU(20) MOV64mr $rsp, 1, $noreg, 0, $noreg, %139:gr64, debug-location !443 :: (store 8 into stack); ep.c:286:5
              to 
  Ready @1c
  BotQ.A TopLatency SU(20) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 
  Cand SU(1) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %139:gr64 = LEA64r $rip, 1, $noreg, @ep__str_13_Random_num, $noreg, debug-location !443; ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 
  Cand SU(1) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) MOV32mr $rsp, 1, $noreg, 8, $noreg, %128:gr32, debug-location !443 :: (store 4 into stack + 8); ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 17 15 13 11 9 7 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) MOV64mr $rsp, 1, $noreg, 16, $noreg, %138:gr64, debug-location !443 :: (store 8 into stack + 16); ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %138
  UpdateRegP: SU(17) MOV64mr $rsp, 1, $noreg, 16, $noreg, %138:gr64, debug-location !443 :: (store 8 into stack + 16); ep.c:286:5
              to 
  Ready @2c
  BotQ.A TopLatency SU(17) 1c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 15 13 11 9 7 16 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %138:gr64 = LEA64r $rip, 1, $noreg, @ep__str_14_3_3_1_, $noreg, debug-location !443; ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 15 13 11 9 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV64mr $rsp, 1, $noreg, 24, $noreg, %137:gr64, debug-location !443 :: (store 8 into stack + 24); ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %137
  UpdateRegP: SU(15) MOV64mr $rsp, 1, $noreg, 24, $noreg, %137:gr64, debug-location !443 :: (store 8 into stack + 24); ep.c:286:5
              to 
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 13 11 9 14 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %137:gr64 = LEA64r $rip, 1, $noreg, @ep__str_15_03_Nov_201, $noreg, debug-location !443; ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @3c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 13 11 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mr $rsp, 1, $noreg, 32, $noreg, %136:gr64, debug-location !443 :: (store 8 into stack + 32); ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %136
  UpdateRegP: SU(13) MOV64mr $rsp, 1, $noreg, 32, $noreg, %136:gr64, debug-location !443 :: (store 8 into stack + 32); ep.c:286:5
              to 
  Ready @3c
  BotQ.A TopLatency SU(13) 1c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 11 12 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %136:gr64 = LEA64r $rip, 1, $noreg, @ep__str_16_gcc_, $noreg, debug-location !443; ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @4c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 11 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr $rsp, 1, $noreg, 40, $noreg, %135:gr64, debug-location !443 :: (store 8 into stack + 40); ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %135
  UpdateRegP: SU(11) MOV64mr $rsp, 1, $noreg, 40, $noreg, %135:gr64, debug-location !443 :: (store 8 into stack + 40); ep.c:286:5
              to 
  Ready @3c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 10 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %135:gr64 = LEA64r $rip, 1, $noreg, @ep__str_17___CC__, $noreg, debug-location !443; ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @4c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mr $rsp, 1, $noreg, 48, $noreg, %134:gr64, debug-location !443 :: (store 8 into stack + 48); ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %134
  UpdateRegP: SU(9) MOV64mr $rsp, 1, $noreg, 48, $noreg, %134:gr64, debug-location !443 :: (store 8 into stack + 48); ep.c:286:5
              to 
  Ready @4c
  BotQ.A TopLatency SU(9) 1c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 8 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %134:gr64 = LEA64r $rip, 1, $noreg, @ep__str_18__lm_, $noreg, debug-location !443; ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @5c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr $rsp, 1, $noreg, 56, $noreg, %133:gr64, debug-location !443 :: (store 8 into stack + 56); ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %133
  UpdateRegP: SU(7) MOV64mr $rsp, 1, $noreg, 56, $noreg, %133:gr64, debug-location !443 :: (store 8 into stack + 56); ep.c:286:5
              to 
  Ready @4c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 6 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %133:gr64 = LEA64r $rip, 1, $noreg, @ep__str_19__I___commo, $noreg, debug-location !443; ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @5c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr $rsp, 1, $noreg, 64, $noreg, %132:gr64, debug-location !443 :: (store 8 into stack + 64); ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %132
  UpdateRegP: SU(5) MOV64mr $rsp, 1, $noreg, 64, $noreg, %132:gr64, debug-location !443 :: (store 8 into stack + 64); ep.c:286:5
              to 
  Ready @5c
  BotQ.A TopLatency SU(5) 1c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %132:gr64 = LEA64r $rip, 1, $noreg, @ep__str_20__g__Wall__, $noreg, debug-location !443; ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @6c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr $rsp, 1, $noreg, 72, $noreg, %131:gr64, debug-location !443 :: (store 8 into stack + 72); ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %131
  UpdateRegP: SU(3) MOV64mr $rsp, 1, $noreg, 72, $noreg, %131:gr64, debug-location !443 :: (store 8 into stack + 72); ep.c:286:5
              to 
  Ready @5c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %131:gr64 = LEA64r $rip, 1, $noreg, @ep__str_21__O3__mcmod, $noreg, debug-location !443; ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @6c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $rsp, 1, $noreg, 80, $noreg, %129:gr64, debug-location !443 :: (store 8 into stack + 80); ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %129
  UpdateRegP: SU(1) MOV64mr $rsp, 1, $noreg, 80, $noreg, %129:gr64, debug-location !443 :: (store 8 into stack + 80); ep.c:286:5
              to 
  Ready @6c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %129:gr64 = LEA64r $rip, 1, $noreg, @ep__str_22_randdp_, $noreg, debug-location !443; ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @7c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.56 ***
SU(0):   %129:gr64 = LEA64r $rip, 1, $noreg, @ep__str_22_randdp_, $noreg, debug-location !443; ep.c:286:5
SU(1):   MOV64mr $rsp, 1, $noreg, 80, $noreg, %129:gr64, debug-location !443 :: (store 8 into stack + 80); ep.c:286:5
SU(2):   %131:gr64 = LEA64r $rip, 1, $noreg, @ep__str_21__O3__mcmod, $noreg, debug-location !443; ep.c:286:5
SU(3):   MOV64mr $rsp, 1, $noreg, 72, $noreg, %131:gr64, debug-location !443 :: (store 8 into stack + 72); ep.c:286:5
SU(4):   %132:gr64 = LEA64r $rip, 1, $noreg, @ep__str_20__g__Wall__, $noreg, debug-location !443; ep.c:286:5
SU(5):   MOV64mr $rsp, 1, $noreg, 64, $noreg, %132:gr64, debug-location !443 :: (store 8 into stack + 64); ep.c:286:5
SU(6):   %133:gr64 = LEA64r $rip, 1, $noreg, @ep__str_19__I___commo, $noreg, debug-location !443; ep.c:286:5
SU(7):   MOV64mr $rsp, 1, $noreg, 56, $noreg, %133:gr64, debug-location !443 :: (store 8 into stack + 56); ep.c:286:5
SU(8):   %134:gr64 = LEA64r $rip, 1, $noreg, @ep__str_18__lm_, $noreg, debug-location !443; ep.c:286:5
SU(9):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %134:gr64, debug-location !443 :: (store 8 into stack + 48); ep.c:286:5
SU(10):   %135:gr64 = LEA64r $rip, 1, $noreg, @ep__str_17___CC__, $noreg, debug-location !443; ep.c:286:5
SU(11):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %135:gr64, debug-location !443 :: (store 8 into stack + 40); ep.c:286:5
SU(12):   %136:gr64 = LEA64r $rip, 1, $noreg, @ep__str_16_gcc_, $noreg, debug-location !443; ep.c:286:5
SU(13):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %136:gr64, debug-location !443 :: (store 8 into stack + 32); ep.c:286:5
SU(14):   %137:gr64 = LEA64r $rip, 1, $noreg, @ep__str_15_03_Nov_201, $noreg, debug-location !443; ep.c:286:5
SU(15):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %137:gr64, debug-location !443 :: (store 8 into stack + 24); ep.c:286:5
SU(16):   %138:gr64 = LEA64r $rip, 1, $noreg, @ep__str_14_3_3_1_, $noreg, debug-location !443; ep.c:286:5
SU(17):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %138:gr64, debug-location !443 :: (store 8 into stack + 16); ep.c:286:5
SU(18):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %128:gr32, debug-location !443 :: (store 4 into stack + 8); ep.c:286:5
SU(19):   %139:gr64 = LEA64r $rip, 1, $noreg, @ep__str_13_Random_num, $noreg, debug-location !443; ep.c:286:5
SU(20):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %139:gr64, debug-location !443 :: (store 8 into stack); ep.c:286:5
SU(21):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_12_EP_, $noreg, debug-location !443; ep.c:286:5
SU(22):   $esi = MOV32ri 66, debug-location !443; ep.c:286:5
SU(23):   $edx = MOV32ri 31, debug-location !443; ep.c:286:5
SU(24):   $ecx = MOV32ri 0, debug-location !443; ep.c:286:5
SU(25):   $r8d = MOV32r0 implicit-def dead $eflags, debug-location !443; ep.c:286:5
SU(26):   $r9d = COPY %125:gr32, debug-location !443; ep.c:286:5
SU(27):   $xmm0 = COPY %126:fr64, debug-location !443; ep.c:286:5
SU(28):   $xmm1 = COPY %127:fr64, debug-location !443; ep.c:286:5

********** MI Scheduling **********
main:%bb.56 for.end161
  From: %125:gr32 = MOV32rm %stack.24.nit, 1, $noreg, 0, $noreg, debug-location !439 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
    To: ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !443; ep.c:286:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %125:gr32 = MOV32rm %stack.24.nit, 1, $noreg, 0, $noreg, debug-location !439 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %126:fr64 = MOVSDrm_alt %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !440 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %127:fr64 = MOVSDrm_alt %stack.1.Mops, 1, $noreg, 0, $noreg, debug-location !441 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %128:gr32 = MOV32rm %stack.27.verified, 1, $noreg, 0, $noreg, debug-location !442 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !443; ep.c:286:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %128:gr32 = MOV32rm %stack.27.verified, 1, $noreg, 0, $noreg, debug-location !442 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %127:fr64 = MOVSDrm_alt %stack.1.Mops, 1, $noreg, 0, $noreg, debug-location !441 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %126:fr64 = MOVSDrm_alt %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !440 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %125:gr32 = MOV32rm %stack.24.nit, 1, $noreg, 0, $noreg, debug-location !439 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.56 ***
SU(0):   %125:gr32 = MOV32rm %stack.24.nit, 1, $noreg, 0, $noreg, debug-location !439 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
SU(1):   %126:fr64 = MOVSDrm_alt %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !440 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
SU(2):   %127:fr64 = MOVSDrm_alt %stack.1.Mops, 1, $noreg, 0, $noreg, debug-location !441 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
SU(3):   %128:gr32 = MOV32rm %stack.27.verified, 1, $noreg, 0, $noreg, debug-location !442 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47

********** MI Scheduling **********
main:%bb.57 if.then163
  From: %144:fr64 = FsFLD0SD
    To: JCC_1 %bb.59, 2, implicit $eflags, debug-location !451; ep.c:291:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %144:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%144
  Single Issue       : false;
SU(1):   UCOMISDrm %144:fr64, %stack.10.tm, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !450 :: (dereferenceable load 8 from %ir.tm); ep.c:291:16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%144
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.59, 2, implicit $eflags, debug-location !451; ep.c:291:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) UCOMISDrm %144:fr64, %stack.10.tm, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !450 :: (dereferenceable load 8 from %ir.tm); ep.c:291:16
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %144:fr64 = FsFLD0SD
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %144:fr64 = FsFLD0SD
SU(1):   UCOMISDrm %144:fr64, %stack.10.tm, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !450 :: (dereferenceable load 8 from %ir.tm); ep.c:291:16

********** MI Scheduling **********
main:%bb.58 if.then166
  From: %145:gr64 = MOV64ri 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %145:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%145
  Single Issue       : false;
SU(1):   MOV64mr %stack.10.tm, 1, $noreg, 0, $noreg, %145:gr64, debug-location !452 :: (store 8 into %ir.tm); ep.c:292:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%145
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.10.tm, 1, $noreg, 0, $noreg, %145:gr64, debug-location !452 :: (store 8 into %ir.tm); ep.c:292:16
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %145:gr64 = MOV64ri 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   %145:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr %stack.10.tm, 1, $noreg, 0, $noreg, %145:gr64, debug-location !452 :: (store 8 into %ir.tm); ep.c:292:16

********** MI Scheduling **********
main:%bb.59 if.end167
  From: $rdi = LEA64r $rip, 1, $noreg, @ep__str_25_Random_num, $noreg, debug-location !477; ep.c:298:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !477; ep.c:298:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_25_Random_num, $noreg, debug-location !477; ep.c:298:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %161:fr64, debug-location !477; ep.c:298:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %163:fr64, debug-location !477; ep.c:298:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 2, debug-location !477; ep.c:298:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !477; ep.c:298:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 2, debug-location !477; ep.c:298:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm1 = COPY %163:fr64, debug-location !477; ep.c:298:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %161:fr64, debug-location !477; ep.c:298:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ep__str_25_Random_num, $noreg, debug-location !477; ep.c:298:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_25_Random_num, $noreg, debug-location !477; ep.c:298:9
SU(1):   $xmm0 = COPY %161:fr64, debug-location !477; ep.c:298:9
SU(2):   $xmm1 = COPY %163:fr64, debug-location !477; ep.c:298:9
SU(3):   $al = MOV8ri 2, debug-location !477; ep.c:298:9

********** MI Scheduling **********
main:%bb.59 if.end167
  From: %161:fr64 = COPY $xmm0, debug-location !470; ep.c:297:14
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !477; ep.c:298:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %161:fr64 = COPY $xmm0, debug-location !470; ep.c:297:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=0 Reg=%161
    SU(1): Data Latency=0 Reg=%161
  Single Issue       : false;
SU(1):   MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %161:fr64, debug-location !471 :: (store 8 into %ir.tt); ep.c:297:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%161
  Single Issue       : false;
SU(2):   %163:fr64 = MULSDrr %163:fr64(tied-def 0), %161:fr64, debug-location !474; ep.c:298:60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%161
  Successors:
    SU(3): Data Latency=1 Reg=%163
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   %163:fr64 = DIVSDrm %163:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !476 :: (dereferenceable load 8 from %ir.tm); ep.c:298:68
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=%163
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !477; ep.c:298:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %163:fr64 = DIVSDrm %163:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !476 :: (dereferenceable load 8 from %ir.tm); ep.c:298:68
  Ready @3c
  BotQ.A TopLatency SU(3) 1c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %163:fr64 = MULSDrr %163:fr64(tied-def 0), %161:fr64, debug-location !474; ep.c:298:60
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %161:fr64, debug-location !471 :: (store 8 into %ir.tt); ep.c:297:12
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %161:fr64 = COPY $xmm0, debug-location !470; ep.c:297:14
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %161:fr64 = COPY $xmm0, debug-location !470; ep.c:297:14
SU(1):   MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %161:fr64, debug-location !471 :: (store 8 into %ir.tt); ep.c:297:12
SU(2):   %163:fr64 = MULSDrr %163:fr64(tied-def 0), %161:fr64, debug-location !474; ep.c:298:60
SU(3):   %163:fr64 = DIVSDrm %163:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !476 :: (dereferenceable load 8 from %ir.tm); ep.c:298:68

********** MI Scheduling **********
main:%bb.59 if.end167
  From: $rdi = LEA64r $rip, 1, $noreg, @ep__str_24_Gaussian_p, $noreg, debug-location !469; ep.c:296:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !469; ep.c:296:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_24_Gaussian_p, $noreg, debug-location !469; ep.c:296:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %155:fr64, debug-location !469; ep.c:296:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %157:fr64, debug-location !469; ep.c:296:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 2, debug-location !469; ep.c:296:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !469; ep.c:296:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 2, debug-location !469; ep.c:296:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm1 = COPY %157:fr64, debug-location !469; ep.c:296:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %155:fr64, debug-location !469; ep.c:296:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ep__str_24_Gaussian_p, $noreg, debug-location !469; ep.c:296:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_24_Gaussian_p, $noreg, debug-location !469; ep.c:296:9
SU(1):   $xmm0 = COPY %155:fr64, debug-location !469; ep.c:296:9
SU(2):   $xmm1 = COPY %157:fr64, debug-location !469; ep.c:296:9
SU(3):   $al = MOV8ri 2, debug-location !469; ep.c:296:9

********** MI Scheduling **********
main:%bb.59 if.end167
  From: %155:fr64 = COPY $xmm0, debug-location !462; ep.c:295:14
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !469; ep.c:296:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %155:fr64 = COPY $xmm0, debug-location !462; ep.c:295:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=0 Reg=%155
    SU(1): Data Latency=0 Reg=%155
  Single Issue       : false;
SU(1):   MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %155:fr64, debug-location !463 :: (store 8 into %ir.tt); ep.c:295:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%155
  Single Issue       : false;
SU(2):   %157:fr64 = COPY %155:fr64, debug-location !466; ep.c:296:60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%155
  Successors:
    SU(3): Data Latency=0 Reg=%157
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   %157:fr64 = MULSDrr %157:fr64(tied-def 0), %163:fr64, debug-location !466; ep.c:296:60
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(2): Data Latency=0 Reg=%157
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%157
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %157:fr64 = DIVSDrm %157:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !468 :: (dereferenceable load 8 from %ir.tm); ep.c:296:68
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(3): Data Latency=1 Reg=%157
    SU(3): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !469; ep.c:296:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %157:fr64 = DIVSDrm %157:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !468 :: (dereferenceable load 8 from %ir.tm); ep.c:296:68
  Ready @3c
  BotQ.A TopLatency SU(4) 1c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %157:fr64 = MULSDrr %157:fr64(tied-def 0), %163:fr64, debug-location !466; ep.c:296:60
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %157:fr64 = COPY %155:fr64, debug-location !466; ep.c:296:60
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %155:fr64, debug-location !463 :: (store 8 into %ir.tt); ep.c:295:12
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %155:fr64 = COPY $xmm0, debug-location !462; ep.c:295:14
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %155:fr64 = COPY $xmm0, debug-location !462; ep.c:295:14
SU(1):   MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %155:fr64, debug-location !463 :: (store 8 into %ir.tt); ep.c:295:12
SU(2):   %157:fr64 = COPY %155:fr64, debug-location !466; ep.c:296:60
SU(3):   %157:fr64 = MULSDrr %157:fr64(tied-def 0), %163:fr64, debug-location !466; ep.c:296:60
SU(4):   %157:fr64 = DIVSDrm %157:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !468 :: (dereferenceable load 8 from %ir.tm); ep.c:296:68

********** MI Scheduling **********
main:%bb.59 if.end167
  From: $rdi = LEA64r $rip, 1, $noreg, @ep__str_23__Total_tim, $noreg, debug-location !461; ep.c:294:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !461; ep.c:294:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_23__Total_tim, $noreg, debug-location !461; ep.c:294:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %147:fr64, debug-location !461; ep.c:294:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %150:fr64, debug-location !461; ep.c:294:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 2, debug-location !461; ep.c:294:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !461; ep.c:294:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 2, debug-location !461; ep.c:294:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm1 = COPY %150:fr64, debug-location !461; ep.c:294:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %147:fr64, debug-location !461; ep.c:294:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @ep__str_23__Total_tim, $noreg, debug-location !461; ep.c:294:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @ep__str_23__Total_tim, $noreg, debug-location !461; ep.c:294:9
SU(1):   $xmm0 = COPY %147:fr64, debug-location !461; ep.c:294:9
SU(2):   $xmm1 = COPY %150:fr64, debug-location !461; ep.c:294:9
SU(3):   $al = MOV8ri 2, debug-location !461; ep.c:294:9

********** MI Scheduling **********
main:%bb.59 if.end167
  From: %147:fr64 = COPY $xmm0, debug-location !454; ep.c:293:14
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !461; ep.c:294:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %147:fr64 = COPY $xmm0, debug-location !454; ep.c:293:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=0 Reg=%147
    SU(1): Data Latency=0 Reg=%147
  Single Issue       : false;
SU(1):   MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %147:fr64, debug-location !455 :: (store 8 into %ir.tt); ep.c:293:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%147
  Single Issue       : false;
SU(2):   %163:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=4 Reg=%163
  Single Issue       : false;
SU(3):   %150:fr64 = COPY %147:fr64, debug-location !458; ep.c:294:62
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%147
  Successors:
    SU(4): Data Latency=0 Reg=%150
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %150:fr64 = MULSDrr %150:fr64(tied-def 0), %163:fr64, debug-location !458; ep.c:294:62
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%150
    SU(3): Out  Latency=0
    SU(2): Data Latency=4 Reg=%163
  Successors:
    SU(5): Data Latency=1 Reg=%150
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %150:fr64 = DIVSDrm %150:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !460 :: (dereferenceable load 8 from %ir.tm); ep.c:294:70
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%150
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !461; ep.c:294:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %150:fr64 = DIVSDrm %150:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !460 :: (dereferenceable load 8 from %ir.tm); ep.c:294:70
  Ready @3c
  BotQ.A TopLatency SU(5) 5c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %150:fr64 = MULSDrr %150:fr64(tied-def 0), %163:fr64, debug-location !458; ep.c:294:62
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %150:fr64 = COPY %147:fr64, debug-location !458; ep.c:294:62
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %163:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %147:fr64, debug-location !455 :: (store 8 into %ir.tt); ep.c:293:12
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %147:fr64 = COPY $xmm0, debug-location !454; ep.c:293:14
  Ready @4c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %147:fr64 = COPY $xmm0, debug-location !454; ep.c:293:14
SU(1):   MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %147:fr64, debug-location !455 :: (store 8 into %ir.tt); ep.c:293:12
SU(2):   %163:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)
SU(3):   %150:fr64 = COPY %147:fr64, debug-location !458; ep.c:294:62
SU(4):   %150:fr64 = MULSDrr %150:fr64(tied-def 0), %163:fr64, debug-location !458; ep.c:294:62
SU(5):   %150:fr64 = DIVSDrm %150:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !460 :: (dereferenceable load 8 from %ir.tm); ep.c:294:70

********** INTERVALS **********
DIL [144r,176r:16)[464r,480r:35)[816r,880r:30)[1200r,1232r:29)[1344r,1392r:28)[1652r,1664r:10)[1776r,1808r:27)[2688r,2704r:9)[2816r,2832r:8)[2944r,2960r:7)[3056r,3072r:6)[3300r,3312r:5)[3536r,3568r:32)[4944r,4976r:34)[5200r,5232r:33)[5504r,5520r:14)[5684r,5696r:15)[5856r,5872r:13)[6048r,6064r:12)[8144r,8160r:11)[8624r,8640r:4)[8736r,8752r:3)[10016r,10048r:26)[10192r,10240r:25)[10368r,10416r:24)[10544r,10592r:23)[10752r,10816r:22)[10928r,10960r:21)[11232r,11296r:31)[11920r,12048r:20)[12352r,12368r:2)[12608r,12672r:19)[12784r,12800r:1)[13008r,13072r:18)[13184r,13200r:0)[13408r,13472r:17)  0@13184r 1@12784r 2@12352r 3@8736r 4@8624r 5@3300r 6@3056r 7@2944r 8@2816r 9@2688r 10@1652r 11@8144r 12@6048r 13@5856r 14@5504r 15@5684r 16@144r 17@13408r 18@13008r 19@12608r 20@11920r 21@10928r 22@10752r 23@10544r 24@10368r 25@10192r 26@10016r 27@1776r 28@1344r 29@1200r 30@816r 31@11232r 32@3536r 33@5200r 34@4944r 35@464r
DIH [144r,176r:16)[464r,480r:35)[816r,880r:30)[1200r,1232r:29)[1344r,1392r:28)[1652r,1664r:10)[1776r,1808r:27)[2688r,2704r:9)[2816r,2832r:8)[2944r,2960r:7)[3056r,3072r:6)[3300r,3312r:5)[3536r,3568r:32)[4944r,4976r:34)[5200r,5232r:33)[5504r,5520r:14)[5684r,5696r:15)[5856r,5872r:13)[6048r,6064r:12)[8144r,8160r:11)[8624r,8640r:4)[8736r,8752r:3)[10016r,10048r:26)[10192r,10240r:25)[10368r,10416r:24)[10544r,10592r:23)[10752r,10816r:22)[10928r,10960r:21)[11232r,11296r:31)[11920r,12048r:20)[12352r,12368r:2)[12608r,12672r:19)[12784r,12800r:1)[13008r,13072r:18)[13184r,13200r:0)[13408r,13472r:17)  0@13184r 1@12784r 2@12352r 3@8736r 4@8624r 5@3300r 6@3056r 7@2944r 8@2816r 9@2688r 10@1652r 11@8144r 12@6048r 13@5856r 14@5504r 15@5684r 16@144r 17@13408r 18@13008r 19@12608r 20@11920r 21@10928r 22@10752r 23@10544r 24@10368r 25@10192r 26@10016r 27@1776r 28@1344r 29@1200r 30@816r 31@11232r 32@3536r 33@5200r 34@4944r 35@464r
HDI [144r,176r:16)[464r,480r:35)[816r,880r:30)[1200r,1232r:29)[1344r,1392r:28)[1652r,1664r:10)[1776r,1808r:27)[2688r,2704r:9)[2816r,2832r:8)[2944r,2960r:7)[3056r,3072r:6)[3300r,3312r:5)[3536r,3568r:32)[4944r,4976r:34)[5200r,5232r:33)[5504r,5520r:14)[5684r,5696r:15)[5856r,5872r:13)[6048r,6064r:12)[8144r,8160r:11)[8624r,8640r:4)[8736r,8752r:3)[10016r,10048r:26)[10192r,10240r:25)[10368r,10416r:24)[10544r,10592r:23)[10752r,10816r:22)[10928r,10960r:21)[11232r,11296r:31)[11920r,12048r:20)[12352r,12368r:2)[12608r,12672r:19)[12784r,12800r:1)[13008r,13072r:18)[13184r,13200r:0)[13408r,13472r:17)  0@13184r 1@12784r 2@12352r 3@8736r 4@8624r 5@3300r 6@3056r 7@2944r 8@2816r 9@2688r 10@1652r 11@8144r 12@6048r 13@5856r 14@5504r 15@5684r 16@144r 17@13408r 18@13008r 19@12608r 20@11920r 21@10928r 22@10752r 23@10544r 24@10368r 25@10192r 26@10016r 27@1776r 28@1344r 29@1200r 30@816r 31@11232r 32@3536r 33@5200r 34@4944r 35@464r
EFLAGS [96r,96d:222)[192r,192d:221)[208r,208d:220)[240r,240d:219)[288r,304r:218)[448r,448d:217)[496r,496d:216)[512r,512d:215)[544r,544d:214)[576r,576d:213)[672r,672d:212)[688r,688d:211)[720r,720d:210)[752r,752d:209)[896r,896d:208)[912r,912d:207)[944r,944d:206)[992r,1008r:21)[1056r,1056d:205)[1104r,1104d:204)[1168r,1168d:203)[1216r,1216d:4)[1248r,1248d:202)[1264r,1264d:201)[1296r,1296d:200)[1312r,1312d:199)[1376r,1376d:3)[1408r,1408d:198)[1424r,1424d:197)[1456r,1456d:196)[1568r,1568d:195)[1652r,1652d:13)[1680r,1680d:194)[1696r,1696d:193)[1728r,1728d:192)[1760r,1760d:191)[1824r,1824d:190)[1840r,1840d:189)[1872r,1872d:188)[1984r,2000r:20)[2208r,2224r:187)[2320r,2320d:186)[2368r,2368d:185)[2464r,2464d:184)[2496r,2496d:183)[2512r,2512d:182)[2560r,2560d:181)[2576r,2576d:180)[2608r,2608d:179)[2656r,2656d:178)[2688r,2688d:12)[2720r,2720d:177)[2736r,2736d:176)[2768r,2768d:175)[2784r,2784d:174)[2848r,2848d:173)[2864r,2864d:172)[2896r,2896d:171)[2912r,2912d:170)[2976r,2976d:169)[2992r,2992d:168)[3024r,3024d:167)[3040r,3040d:166)[3056r,3056d:11)[3088r,3088d:165)[3104r,3104d:164)[3136r,3136d:163)[3184r,3184d:162)[3300r,3300d:10)[3328r,3328d:161)[3344r,3344d:160)[3376r,3376d:159)[3440r,3456r:19)[3520r,3520d:26)[3584r,3584d:25)[3600r,3600d:24)[3632r,3632d:23)[3680r,3680d:22)[3808r,3808d:158)[3920r,3936r:18)[4416r,4432r:157)[4512r,4512d:80)[4624r,4640r:17)[4720r,4720d:79)[4752r,4752d:78)[4784r,4784d:77)[4832r,4832d:76)[4848r,4864r:75)[4928r,4928d:74)[4992r,4992d:73)[5008r,5008d:72)[5040r,5040d:71)[5104r,5120r:70)[5184r,5184d:69)[5248r,5248d:68)[5264r,5264d:67)[5296r,5296d:66)[5376r,5376d:65)[5424r,5440r:64)[5488r,5488d:63)[5536r,5536d:62)[5552r,5552d:61)[5584r,5584d:60)[5616r,5616d:59)[5712r,5712d:58)[5728r,5728d:57)[5760r,5760d:56)[5776r,5792r:55)[5840r,5840d:54)[5888r,5888d:53)[5904r,5904d:52)[5936r,5936d:51)[5968r,5984r:50)[6032r,6032d:49)[6080r,6080d:48)[6096r,6096d:47)[6128r,6128d:46)[6192r,6208r:16)[6288r,6288d:39)[6608r,6624r:38)[6688r,6688d:37)[6736r,6736d:36)[6752r,6752d:35)[6784r,6784d:34)[6880r,6896r:33)[6992r,6992d:32)[7040r,7040d:31)[7136r,7136d:30)[7168r,7168d:29)[7440r,7456r:28)[8016r,8016d:27)[8064r,8080r:45)[8128r,8128d:44)[8176r,8176d:43)[8192r,8192d:42)[8224r,8224d:41)[8256r,8256d:40)[8352r,8368r:15)[8592r,8592d:156)[8608r,8608d:155)[8624r,8624d:9)[8656r,8656d:154)[8672r,8672d:153)[8704r,8704d:152)[8720r,8720d:151)[8736r,8736d:8)[8768r,8768d:150)[8784r,8784d:149)[8816r,8816d:148)[8992r,9008r:147)[9424r,9440r:145)[9472r,9472d:146)[9568r,9584r:144)[9696r,9696d:143)[9792r,9792d:142)[9808r,9808d:141)[9840r,9840d:140)[9952r,9952d:139)[10032r,10032d:2)[10064r,10064d:138)[10080r,10080d:137)[10112r,10112d:136)[10144r,10144d:135)[10256r,10256d:134)[10272r,10272d:133)[10304r,10304d:132)[10320r,10320d:131)[10400r,10400d:1)[10432r,10432d:130)[10448r,10448d:129)[10480r,10480d:128)[10512r,10512d:127)[10608r,10608d:126)[10624r,10624d:125)[10656r,10656d:124)[10704r,10704d:123)[10832r,10832d:122)[10848r,10848d:121)[10880r,10880d:120)[10896r,10896d:119)[10944r,10944d:0)[10976r,10976d:118)[10992r,10992d:117)[11024r,11024d:116)[11104r,11120r:14)[11216r,11216d:85)[11312r,11312d:84)[11328r,11328d:83)[11360r,11360d:82)[11376r,11376d:81)[11488r,11488d:115)[11984r,11984d:7)[12064r,12064d:114)[12080r,12080d:113)[12112r,12112d:112)[12128r,12144r:111)[12208r,12224r:110)[12320r,12320d:109)[12352r,12352d:6)[12384r,12384d:108)[12400r,12400d:107)[12432r,12432d:106)[12560r,12560d:105)[12688r,12688d:104)[12704r,12704d:103)[12736r,12736d:102)[12752r,12752d:101)[12816r,12816d:100)[12832r,12832d:99)[12864r,12864d:98)[12976r,12976d:97)[13088r,13088d:96)[13104r,13104d:95)[13136r,13136d:94)[13152r,13152d:93)[13216r,13216d:92)[13232r,13232d:91)[13264r,13264d:90)[13376r,13376d:89)[13488r,13488d:88)[13504r,13504d:87)[13536r,13536d:86)[13584r,13584d:5)  0@10944r 1@10400r 2@10032r 3@1376r 4@1216r 5@13584r 6@12352r 7@11984r 8@8736r 9@8624r 10@3300r 11@3056r 12@2688r 13@1652r 14@11104r 15@8352r 16@6192r 17@4624r 18@3920r 19@3440r 20@1984r 21@992r 22@3680r 23@3632r 24@3600r 25@3584r 26@3520r 27@8016r 28@7440r 29@7168r 30@7136r 31@7040r 32@6992r 33@6880r 34@6784r 35@6752r 36@6736r 37@6688r 38@6608r 39@6288r 40@8256r 41@8224r 42@8192r 43@8176r 44@8128r 45@8064r 46@6128r 47@6096r 48@6080r 49@6032r 50@5968r 51@5936r 52@5904r 53@5888r 54@5840r 55@5776r 56@5760r 57@5728r 58@5712r 59@5616r 60@5584r 61@5552r 62@5536r 63@5488r 64@5424r 65@5376r 66@5296r 67@5264r 68@5248r 69@5184r 70@5104r 71@5040r 72@5008r 73@4992r 74@4928r 75@4848r 76@4832r 77@4784r 78@4752r 79@4720r 80@4512r 81@11376r 82@11360r 83@11328r 84@11312r 85@11216r 86@13536r 87@13504r 88@13488r 89@13376r 90@13264r 91@13232r 92@13216r 93@13152r 94@13136r 95@13104r 96@13088r 97@12976r 98@12864r 99@12832r 100@12816r 101@12752r 102@12736r 103@12704r 104@12688r 105@12560r 106@12432r 107@12400r 108@12384r 109@12320r 110@12208r 111@12128r 112@12112r 113@12080r 114@12064r 115@11488r 116@11024r 117@10992r 118@10976r 119@10896r 120@10880r 121@10848r 122@10832r 123@10704r 124@10656r 125@10624r 126@10608r 127@10512r 128@10480r 129@10448r 130@10432r 131@10320r 132@10304r 133@10272r 134@10256r 135@10144r 136@10112r 137@10080r 138@10064r 139@9952r 140@9840r 141@9808r 142@9792r 143@9696r 144@9568r 145@9424r 146@9472r 147@8992r 148@8816r 149@8784r 150@8768r 151@8720r 152@8704r 153@8672r 154@8656r 155@8608r 156@8592r 157@4416r 158@3808r 159@3376r 160@3344r 161@3328r 162@3184r 163@3136r 164@3104r 165@3088r 166@3040r 167@3024r 168@2992r 169@2976r 170@2912r 171@2896r 172@2864r 173@2848r 174@2784r 175@2768r 176@2736r 177@2720r 178@2656r 179@2608r 180@2576r 181@2560r 182@2512r 183@2496r 184@2464r 185@2368r 186@2320r 187@2208r 188@1872r 189@1840r 190@1824r 191@1760r 192@1728r 193@1696r 194@1680r 195@1568r 196@1456r 197@1424r 198@1408r 199@1312r 200@1296r 201@1264r 202@1248r 203@1168r 204@1104r 205@1056r 206@944r 207@912r 208@896r 209@752r 210@720r 211@688r 212@672r 213@576r 214@544r 215@512r 216@496r 217@448r 218@288r 219@240r 220@208r 221@192r 222@96r
SPL [96r,96d:209)[176r,176d:208)[192r,192d:207)[208r,208d:206)[240r,240d:205)[448r,448d:204)[480r,480d:203)[496r,496d:202)[512r,512d:201)[544r,544d:200)[576r,576d:199)[656r,656d:198)[672r,672d:197)[688r,688d:196)[720r,720d:195)[752r,752d:194)[880r,880d:193)[896r,896d:192)[912r,912d:191)[944r,944d:190)[1168r,1168d:189)[1232r,1232d:188)[1248r,1248d:187)[1264r,1264d:186)[1296r,1296d:185)[1312r,1312d:184)[1392r,1392d:183)[1408r,1408d:182)[1424r,1424d:181)[1456r,1456d:180)[1568r,1568d:179)[1664r,1664d:178)[1680r,1680d:177)[1696r,1696d:176)[1728r,1728d:175)[1760r,1760d:174)[1808r,1808d:173)[1824r,1824d:172)[1840r,1840d:171)[1872r,1872d:170)[2320r,2320d:169)[2352r,2352d:168)[2368r,2368d:167)[2464r,2464d:166)[2496r,2496d:165)[2512r,2512d:164)[2544r,2544d:163)[2560r,2560d:162)[2576r,2576d:161)[2608r,2608d:160)[2656r,2656d:159)[2704r,2704d:158)[2720r,2720d:157)[2736r,2736d:156)[2768r,2768d:155)[2784r,2784d:154)[2832r,2832d:153)[2848r,2848d:152)[2864r,2864d:151)[2896r,2896d:150)[2912r,2912d:149)[2960r,2960d:148)[2976r,2976d:147)[2992r,2992d:146)[3024r,3024d:145)[3040r,3040d:144)[3072r,3072d:143)[3088r,3088d:142)[3104r,3104d:141)[3136r,3136d:140)[3184r,3184d:139)[3312r,3312d:138)[3328r,3328d:137)[3344r,3344d:136)[3376r,3376d:135)[3520r,3520d:4)[3568r,3568d:3)[3584r,3584d:2)[3600r,3600d:1)[3632r,3632d:0)[4928r,4928d:49)[4976r,4976d:48)[4992r,4992d:47)[5008r,5008d:46)[5040r,5040d:45)[5184r,5184d:44)[5232r,5232d:43)[5248r,5248d:42)[5264r,5264d:41)[5296r,5296d:40)[5488r,5488d:39)[5520r,5520d:38)[5536r,5536d:37)[5552r,5552d:36)[5584r,5584d:35)[5616r,5616d:34)[5696r,5696d:33)[5712r,5712d:32)[5728r,5728d:31)[5760r,5760d:30)[5840r,5840d:29)[5872r,5872d:28)[5888r,5888d:27)[5904r,5904d:26)[5936r,5936d:25)[6032r,6032d:24)[6064r,6064d:23)[6080r,6080d:22)[6096r,6096d:21)[6128r,6128d:20)[6688r,6688d:14)[6720r,6720d:13)[6736r,6736d:12)[6752r,6752d:11)[6784r,6784d:10)[6992r,6992d:9)[7024r,7024d:8)[7040r,7040d:7)[7136r,7136d:6)[7168r,7168d:5)[8128r,8128d:19)[8160r,8160d:18)[8176r,8176d:17)[8192r,8192d:16)[8224r,8224d:15)[8592r,8592d:134)[8640r,8640d:133)[8656r,8656d:132)[8672r,8672d:131)[8704r,8704d:130)[8720r,8720d:129)[8752r,8752d:128)[8768r,8768d:127)[8784r,8784d:126)[8816r,8816d:125)[9696r,9696d:124)[9776r,9776d:123)[9792r,9792d:122)[9808r,9808d:121)[9840r,9840d:120)[9952r,9952d:119)[10048r,10048d:118)[10064r,10064d:117)[10080r,10080d:116)[10112r,10112d:115)[10144r,10144d:114)[10240r,10240d:113)[10256r,10256d:112)[10272r,10272d:111)[10304r,10304d:110)[10320r,10320d:109)[10416r,10416d:108)[10432r,10432d:107)[10448r,10448d:106)[10480r,10480d:105)[10512r,10512d:104)[10592r,10592d:103)[10608r,10608d:102)[10624r,10624d:101)[10656r,10656d:100)[10704r,10704d:99)[10816r,10816d:98)[10832r,10832d:97)[10848r,10848d:96)[10880r,10880d:95)[10896r,10896d:94)[10960r,10960d:93)[10976r,10976d:92)[10992r,10992d:91)[11024r,11024d:90)[11216r,11216d:54)[11296r,11296d:53)[11312r,11312d:52)[11328r,11328d:51)[11360r,11360d:50)[11488r,11488d:89)[12048r,12048d:88)[12064r,12064d:87)[12080r,12080d:86)[12112r,12112d:85)[12320r,12320d:84)[12368r,12368d:83)[12384r,12384d:82)[12400r,12400d:81)[12432r,12432d:80)[12560r,12560d:79)[12672r,12672d:78)[12688r,12688d:77)[12704r,12704d:76)[12736r,12736d:75)[12752r,12752d:74)[12800r,12800d:73)[12816r,12816d:72)[12832r,12832d:71)[12864r,12864d:70)[12976r,12976d:69)[13072r,13072d:68)[13088r,13088d:67)[13104r,13104d:66)[13136r,13136d:65)[13152r,13152d:64)[13200r,13200d:63)[13216r,13216d:62)[13232r,13232d:61)[13264r,13264d:60)[13376r,13376d:59)[13472r,13472d:58)[13488r,13488d:57)[13504r,13504d:56)[13536r,13536d:55)  0@3632r 1@3600r 2@3584r 3@3568r 4@3520r 5@7168r 6@7136r 7@7040r 8@7024r 9@6992r 10@6784r 11@6752r 12@6736r 13@6720r 14@6688r 15@8224r 16@8192r 17@8176r 18@8160r 19@8128r 20@6128r 21@6096r 22@6080r 23@6064r 24@6032r 25@5936r 26@5904r 27@5888r 28@5872r 29@5840r 30@5760r 31@5728r 32@5712r 33@5696r 34@5616r 35@5584r 36@5552r 37@5536r 38@5520r 39@5488r 40@5296r 41@5264r 42@5248r 43@5232r 44@5184r 45@5040r 46@5008r 47@4992r 48@4976r 49@4928r 50@11360r 51@11328r 52@11312r 53@11296r 54@11216r 55@13536r 56@13504r 57@13488r 58@13472r 59@13376r 60@13264r 61@13232r 62@13216r 63@13200r 64@13152r 65@13136r 66@13104r 67@13088r 68@13072r 69@12976r 70@12864r 71@12832r 72@12816r 73@12800r 74@12752r 75@12736r 76@12704r 77@12688r 78@12672r 79@12560r 80@12432r 81@12400r 82@12384r 83@12368r 84@12320r 85@12112r 86@12080r 87@12064r 88@12048r 89@11488r 90@11024r 91@10992r 92@10976r 93@10960r 94@10896r 95@10880r 96@10848r 97@10832r 98@10816r 99@10704r 100@10656r 101@10624r 102@10608r 103@10592r 104@10512r 105@10480r 106@10448r 107@10432r 108@10416r 109@10320r 110@10304r 111@10272r 112@10256r 113@10240r 114@10144r 115@10112r 116@10080r 117@10064r 118@10048r 119@9952r 120@9840r 121@9808r 122@9792r 123@9776r 124@9696r 125@8816r 126@8784r 127@8768r 128@8752r 129@8720r 130@8704r 131@8672r 132@8656r 133@8640r 134@8592r 135@3376r 136@3344r 137@3328r 138@3312r 139@3184r 140@3136r 141@3104r 142@3088r 143@3072r 144@3040r 145@3024r 146@2992r 147@2976r 148@2960r 149@2912r 150@2896r 151@2864r 152@2848r 153@2832r 154@2784r 155@2768r 156@2736r 157@2720r 158@2704r 159@2656r 160@2608r 161@2576r 162@2560r 163@2544r 164@2512r 165@2496r 166@2464r 167@2368r 168@2352r 169@2320r 170@1872r 171@1840r 172@1824r 173@1808r 174@1760r 175@1728r 176@1696r 177@1680r 178@1664r 179@1568r 180@1456r 181@1424r 182@1408r 183@1392r 184@1312r 185@1296r 186@1264r 187@1248r 188@1232r 189@1168r 190@944r 191@912r 192@896r 193@880r 194@752r 195@720r 196@688r 197@672r 198@656r 199@576r 200@544r 201@512r 202@496r 203@480r 204@448r 205@240r 206@208r 207@192r 208@176r 209@96r
SPH [96r,96d:209)[176r,176d:208)[192r,192d:207)[208r,208d:206)[240r,240d:205)[448r,448d:204)[480r,480d:203)[496r,496d:202)[512r,512d:201)[544r,544d:200)[576r,576d:199)[656r,656d:198)[672r,672d:197)[688r,688d:196)[720r,720d:195)[752r,752d:194)[880r,880d:193)[896r,896d:192)[912r,912d:191)[944r,944d:190)[1168r,1168d:189)[1232r,1232d:188)[1248r,1248d:187)[1264r,1264d:186)[1296r,1296d:185)[1312r,1312d:184)[1392r,1392d:183)[1408r,1408d:182)[1424r,1424d:181)[1456r,1456d:180)[1568r,1568d:179)[1664r,1664d:178)[1680r,1680d:177)[1696r,1696d:176)[1728r,1728d:175)[1760r,1760d:174)[1808r,1808d:173)[1824r,1824d:172)[1840r,1840d:171)[1872r,1872d:170)[2320r,2320d:169)[2352r,2352d:168)[2368r,2368d:167)[2464r,2464d:166)[2496r,2496d:165)[2512r,2512d:164)[2544r,2544d:163)[2560r,2560d:162)[2576r,2576d:161)[2608r,2608d:160)[2656r,2656d:159)[2704r,2704d:158)[2720r,2720d:157)[2736r,2736d:156)[2768r,2768d:155)[2784r,2784d:154)[2832r,2832d:153)[2848r,2848d:152)[2864r,2864d:151)[2896r,2896d:150)[2912r,2912d:149)[2960r,2960d:148)[2976r,2976d:147)[2992r,2992d:146)[3024r,3024d:145)[3040r,3040d:144)[3072r,3072d:143)[3088r,3088d:142)[3104r,3104d:141)[3136r,3136d:140)[3184r,3184d:139)[3312r,3312d:138)[3328r,3328d:137)[3344r,3344d:136)[3376r,3376d:135)[3520r,3520d:4)[3568r,3568d:3)[3584r,3584d:2)[3600r,3600d:1)[3632r,3632d:0)[4928r,4928d:49)[4976r,4976d:48)[4992r,4992d:47)[5008r,5008d:46)[5040r,5040d:45)[5184r,5184d:44)[5232r,5232d:43)[5248r,5248d:42)[5264r,5264d:41)[5296r,5296d:40)[5488r,5488d:39)[5520r,5520d:38)[5536r,5536d:37)[5552r,5552d:36)[5584r,5584d:35)[5616r,5616d:34)[5696r,5696d:33)[5712r,5712d:32)[5728r,5728d:31)[5760r,5760d:30)[5840r,5840d:29)[5872r,5872d:28)[5888r,5888d:27)[5904r,5904d:26)[5936r,5936d:25)[6032r,6032d:24)[6064r,6064d:23)[6080r,6080d:22)[6096r,6096d:21)[6128r,6128d:20)[6688r,6688d:14)[6720r,6720d:13)[6736r,6736d:12)[6752r,6752d:11)[6784r,6784d:10)[6992r,6992d:9)[7024r,7024d:8)[7040r,7040d:7)[7136r,7136d:6)[7168r,7168d:5)[8128r,8128d:19)[8160r,8160d:18)[8176r,8176d:17)[8192r,8192d:16)[8224r,8224d:15)[8592r,8592d:134)[8640r,8640d:133)[8656r,8656d:132)[8672r,8672d:131)[8704r,8704d:130)[8720r,8720d:129)[8752r,8752d:128)[8768r,8768d:127)[8784r,8784d:126)[8816r,8816d:125)[9696r,9696d:124)[9776r,9776d:123)[9792r,9792d:122)[9808r,9808d:121)[9840r,9840d:120)[9952r,9952d:119)[10048r,10048d:118)[10064r,10064d:117)[10080r,10080d:116)[10112r,10112d:115)[10144r,10144d:114)[10240r,10240d:113)[10256r,10256d:112)[10272r,10272d:111)[10304r,10304d:110)[10320r,10320d:109)[10416r,10416d:108)[10432r,10432d:107)[10448r,10448d:106)[10480r,10480d:105)[10512r,10512d:104)[10592r,10592d:103)[10608r,10608d:102)[10624r,10624d:101)[10656r,10656d:100)[10704r,10704d:99)[10816r,10816d:98)[10832r,10832d:97)[10848r,10848d:96)[10880r,10880d:95)[10896r,10896d:94)[10960r,10960d:93)[10976r,10976d:92)[10992r,10992d:91)[11024r,11024d:90)[11216r,11216d:54)[11296r,11296d:53)[11312r,11312d:52)[11328r,11328d:51)[11360r,11360d:50)[11488r,11488d:89)[12048r,12048d:88)[12064r,12064d:87)[12080r,12080d:86)[12112r,12112d:85)[12320r,12320d:84)[12368r,12368d:83)[12384r,12384d:82)[12400r,12400d:81)[12432r,12432d:80)[12560r,12560d:79)[12672r,12672d:78)[12688r,12688d:77)[12704r,12704d:76)[12736r,12736d:75)[12752r,12752d:74)[12800r,12800d:73)[12816r,12816d:72)[12832r,12832d:71)[12864r,12864d:70)[12976r,12976d:69)[13072r,13072d:68)[13088r,13088d:67)[13104r,13104d:66)[13136r,13136d:65)[13152r,13152d:64)[13200r,13200d:63)[13216r,13216d:62)[13232r,13232d:61)[13264r,13264d:60)[13376r,13376d:59)[13472r,13472d:58)[13488r,13488d:57)[13504r,13504d:56)[13536r,13536d:55)  0@3632r 1@3600r 2@3584r 3@3568r 4@3520r 5@7168r 6@7136r 7@7040r 8@7024r 9@6992r 10@6784r 11@6752r 12@6736r 13@6720r 14@6688r 15@8224r 16@8192r 17@8176r 18@8160r 19@8128r 20@6128r 21@6096r 22@6080r 23@6064r 24@6032r 25@5936r 26@5904r 27@5888r 28@5872r 29@5840r 30@5760r 31@5728r 32@5712r 33@5696r 34@5616r 35@5584r 36@5552r 37@5536r 38@5520r 39@5488r 40@5296r 41@5264r 42@5248r 43@5232r 44@5184r 45@5040r 46@5008r 47@4992r 48@4976r 49@4928r 50@11360r 51@11328r 52@11312r 53@11296r 54@11216r 55@13536r 56@13504r 57@13488r 58@13472r 59@13376r 60@13264r 61@13232r 62@13216r 63@13200r 64@13152r 65@13136r 66@13104r 67@13088r 68@13072r 69@12976r 70@12864r 71@12832r 72@12816r 73@12800r 74@12752r 75@12736r 76@12704r 77@12688r 78@12672r 79@12560r 80@12432r 81@12400r 82@12384r 83@12368r 84@12320r 85@12112r 86@12080r 87@12064r 88@12048r 89@11488r 90@11024r 91@10992r 92@10976r 93@10960r 94@10896r 95@10880r 96@10848r 97@10832r 98@10816r 99@10704r 100@10656r 101@10624r 102@10608r 103@10592r 104@10512r 105@10480r 106@10448r 107@10432r 108@10416r 109@10320r 110@10304r 111@10272r 112@10256r 113@10240r 114@10144r 115@10112r 116@10080r 117@10064r 118@10048r 119@9952r 120@9840r 121@9808r 122@9792r 123@9776r 124@9696r 125@8816r 126@8784r 127@8768r 128@8752r 129@8720r 130@8704r 131@8672r 132@8656r 133@8640r 134@8592r 135@3376r 136@3344r 137@3328r 138@3312r 139@3184r 140@3136r 141@3104r 142@3088r 143@3072r 144@3040r 145@3024r 146@2992r 147@2976r 148@2960r 149@2912r 150@2896r 151@2864r 152@2848r 153@2832r 154@2784r 155@2768r 156@2736r 157@2720r 158@2704r 159@2656r 160@2608r 161@2576r 162@2560r 163@2544r 164@2512r 165@2496r 166@2464r 167@2368r 168@2352r 169@2320r 170@1872r 171@1840r 172@1824r 173@1808r 174@1760r 175@1728r 176@1696r 177@1680r 178@1664r 179@1568r 180@1456r 181@1424r 182@1408r 183@1392r 184@1312r 185@1296r 186@1264r 187@1248r 188@1232r 189@1168r 190@944r 191@912r 192@896r 193@880r 194@752r 195@720r 196@688r 197@672r 198@656r 199@576r 200@544r 201@512r 202@496r 203@480r 204@448r 205@240r 206@208r 207@192r 208@176r 209@96r
HSP [96r,96d:209)[176r,176d:208)[192r,192d:207)[208r,208d:206)[240r,240d:205)[448r,448d:204)[480r,480d:203)[496r,496d:202)[512r,512d:201)[544r,544d:200)[576r,576d:199)[656r,656d:198)[672r,672d:197)[688r,688d:196)[720r,720d:195)[752r,752d:194)[880r,880d:193)[896r,896d:192)[912r,912d:191)[944r,944d:190)[1168r,1168d:189)[1232r,1232d:188)[1248r,1248d:187)[1264r,1264d:186)[1296r,1296d:185)[1312r,1312d:184)[1392r,1392d:183)[1408r,1408d:182)[1424r,1424d:181)[1456r,1456d:180)[1568r,1568d:179)[1664r,1664d:178)[1680r,1680d:177)[1696r,1696d:176)[1728r,1728d:175)[1760r,1760d:174)[1808r,1808d:173)[1824r,1824d:172)[1840r,1840d:171)[1872r,1872d:170)[2320r,2320d:169)[2352r,2352d:168)[2368r,2368d:167)[2464r,2464d:166)[2496r,2496d:165)[2512r,2512d:164)[2544r,2544d:163)[2560r,2560d:162)[2576r,2576d:161)[2608r,2608d:160)[2656r,2656d:159)[2704r,2704d:158)[2720r,2720d:157)[2736r,2736d:156)[2768r,2768d:155)[2784r,2784d:154)[2832r,2832d:153)[2848r,2848d:152)[2864r,2864d:151)[2896r,2896d:150)[2912r,2912d:149)[2960r,2960d:148)[2976r,2976d:147)[2992r,2992d:146)[3024r,3024d:145)[3040r,3040d:144)[3072r,3072d:143)[3088r,3088d:142)[3104r,3104d:141)[3136r,3136d:140)[3184r,3184d:139)[3312r,3312d:138)[3328r,3328d:137)[3344r,3344d:136)[3376r,3376d:135)[3520r,3520d:4)[3568r,3568d:3)[3584r,3584d:2)[3600r,3600d:1)[3632r,3632d:0)[4928r,4928d:49)[4976r,4976d:48)[4992r,4992d:47)[5008r,5008d:46)[5040r,5040d:45)[5184r,5184d:44)[5232r,5232d:43)[5248r,5248d:42)[5264r,5264d:41)[5296r,5296d:40)[5488r,5488d:39)[5520r,5520d:38)[5536r,5536d:37)[5552r,5552d:36)[5584r,5584d:35)[5616r,5616d:34)[5696r,5696d:33)[5712r,5712d:32)[5728r,5728d:31)[5760r,5760d:30)[5840r,5840d:29)[5872r,5872d:28)[5888r,5888d:27)[5904r,5904d:26)[5936r,5936d:25)[6032r,6032d:24)[6064r,6064d:23)[6080r,6080d:22)[6096r,6096d:21)[6128r,6128d:20)[6688r,6688d:14)[6720r,6720d:13)[6736r,6736d:12)[6752r,6752d:11)[6784r,6784d:10)[6992r,6992d:9)[7024r,7024d:8)[7040r,7040d:7)[7136r,7136d:6)[7168r,7168d:5)[8128r,8128d:19)[8160r,8160d:18)[8176r,8176d:17)[8192r,8192d:16)[8224r,8224d:15)[8592r,8592d:134)[8640r,8640d:133)[8656r,8656d:132)[8672r,8672d:131)[8704r,8704d:130)[8720r,8720d:129)[8752r,8752d:128)[8768r,8768d:127)[8784r,8784d:126)[8816r,8816d:125)[9696r,9696d:124)[9776r,9776d:123)[9792r,9792d:122)[9808r,9808d:121)[9840r,9840d:120)[9952r,9952d:119)[10048r,10048d:118)[10064r,10064d:117)[10080r,10080d:116)[10112r,10112d:115)[10144r,10144d:114)[10240r,10240d:113)[10256r,10256d:112)[10272r,10272d:111)[10304r,10304d:110)[10320r,10320d:109)[10416r,10416d:108)[10432r,10432d:107)[10448r,10448d:106)[10480r,10480d:105)[10512r,10512d:104)[10592r,10592d:103)[10608r,10608d:102)[10624r,10624d:101)[10656r,10656d:100)[10704r,10704d:99)[10816r,10816d:98)[10832r,10832d:97)[10848r,10848d:96)[10880r,10880d:95)[10896r,10896d:94)[10960r,10960d:93)[10976r,10976d:92)[10992r,10992d:91)[11024r,11024d:90)[11216r,11216d:54)[11296r,11296d:53)[11312r,11312d:52)[11328r,11328d:51)[11360r,11360d:50)[11488r,11488d:89)[12048r,12048d:88)[12064r,12064d:87)[12080r,12080d:86)[12112r,12112d:85)[12320r,12320d:84)[12368r,12368d:83)[12384r,12384d:82)[12400r,12400d:81)[12432r,12432d:80)[12560r,12560d:79)[12672r,12672d:78)[12688r,12688d:77)[12704r,12704d:76)[12736r,12736d:75)[12752r,12752d:74)[12800r,12800d:73)[12816r,12816d:72)[12832r,12832d:71)[12864r,12864d:70)[12976r,12976d:69)[13072r,13072d:68)[13088r,13088d:67)[13104r,13104d:66)[13136r,13136d:65)[13152r,13152d:64)[13200r,13200d:63)[13216r,13216d:62)[13232r,13232d:61)[13264r,13264d:60)[13376r,13376d:59)[13472r,13472d:58)[13488r,13488d:57)[13504r,13504d:56)[13536r,13536d:55)  0@3632r 1@3600r 2@3584r 3@3568r 4@3520r 5@7168r 6@7136r 7@7040r 8@7024r 9@6992r 10@6784r 11@6752r 12@6736r 13@6720r 14@6688r 15@8224r 16@8192r 17@8176r 18@8160r 19@8128r 20@6128r 21@6096r 22@6080r 23@6064r 24@6032r 25@5936r 26@5904r 27@5888r 28@5872r 29@5840r 30@5760r 31@5728r 32@5712r 33@5696r 34@5616r 35@5584r 36@5552r 37@5536r 38@5520r 39@5488r 40@5296r 41@5264r 42@5248r 43@5232r 44@5184r 45@5040r 46@5008r 47@4992r 48@4976r 49@4928r 50@11360r 51@11328r 52@11312r 53@11296r 54@11216r 55@13536r 56@13504r 57@13488r 58@13472r 59@13376r 60@13264r 61@13232r 62@13216r 63@13200r 64@13152r 65@13136r 66@13104r 67@13088r 68@13072r 69@12976r 70@12864r 71@12832r 72@12816r 73@12800r 74@12752r 75@12736r 76@12704r 77@12688r 78@12672r 79@12560r 80@12432r 81@12400r 82@12384r 83@12368r 84@12320r 85@12112r 86@12080r 87@12064r 88@12048r 89@11488r 90@11024r 91@10992r 92@10976r 93@10960r 94@10896r 95@10880r 96@10848r 97@10832r 98@10816r 99@10704r 100@10656r 101@10624r 102@10608r 103@10592r 104@10512r 105@10480r 106@10448r 107@10432r 108@10416r 109@10320r 110@10304r 111@10272r 112@10256r 113@10240r 114@10144r 115@10112r 116@10080r 117@10064r 118@10048r 119@9952r 120@9840r 121@9808r 122@9792r 123@9776r 124@9696r 125@8816r 126@8784r 127@8768r 128@8752r 129@8720r 130@8704r 131@8672r 132@8656r 133@8640r 134@8592r 135@3376r 136@3344r 137@3328r 138@3312r 139@3184r 140@3136r 141@3104r 142@3088r 143@3072r 144@3040r 145@3024r 146@2992r 147@2976r 148@2960r 149@2912r 150@2896r 151@2864r 152@2848r 153@2832r 154@2784r 155@2768r 156@2736r 157@2720r 158@2704r 159@2656r 160@2608r 161@2576r 162@2560r 163@2544r 164@2512r 165@2496r 166@2464r 167@2368r 168@2352r 169@2320r 170@1872r 171@1840r 172@1824r 173@1808r 174@1760r 175@1728r 176@1696r 177@1680r 178@1664r 179@1568r 180@1456r 181@1424r 182@1408r 183@1392r 184@1312r 185@1296r 186@1264r 187@1248r 188@1232r 189@1168r 190@944r 191@912r 192@896r 193@880r 194@752r 195@720r 196@688r 197@672r 198@656r 199@576r 200@544r 201@512r 202@496r 203@480r 204@448r 205@240r 206@208r 207@192r 208@176r 209@96r
XMM0 [624r,656r:35)[656r,736r:34)[848r,880r:33)[1656r,1664r:32)[1792r,1808r:31)[1808r,1888r:30)[2336r,2352r:29)[2352r,2384r:28)[2528r,2544r:27)[2544r,2624r:26)[3304r,3312r:25)[3552r,3568r:1)[3568r,3648r:0)[4960r,4976r:10)[4976r,5056r:9)[5216r,5232r:8)[5232r,5312r:7)[5688r,5696r:6)[6704r,6720r:5)[6720r,6800r:4)[7008r,7024r:3)[7024r,7056r:2)[8752r,8832r:24)[9744r,9776r:23)[9776r,9856r:22)[10208r,10240r:21)[10560r,10592r:20)[10768r,10816r:19)[11264r,11296r:11)[12016r,12048r:18)[12368r,12448r:17)[12624r,12672r:16)[12800r,12880r:15)[13024r,13072r:14)[13200r,13280r:13)[13424r,13472r:12)  0@3568r 1@3552r 2@7024r 3@7008r 4@6720r 5@6704r 6@5688r 7@5232r 8@5216r 9@4976r 10@4960r 11@11264r 12@13424r 13@13200r 14@13024r 15@12800r 16@12624r 17@12368r 18@12016r 19@10768r 20@10560r 21@10208r 22@9776r 23@9744r 24@8752r 25@3304r 26@2544r 27@2528r 28@2352r 29@2336r 30@1808r 31@1792r 32@1656r 33@848r 34@656r 35@624r
%0 [2176r,2480r:0)  0@2176r weight:0.000000e+00
%4 [6800r,6832r:2)[6832r,6864r:0)[6864r,7152r:1)  0@6832r 1@6864r 2@6800r weight:0.000000e+00
%13 [32r,48r:0)  0@32r weight:0.000000e+00
%14 [64r,80r:0)  0@64r weight:0.000000e+00
%17 [256r,288r:0)  0@256r weight:0.000000e+00
%18 [400r,416r:0)  0@400r weight:0.000000e+00
%19 [432r,528r:0)  0@432r weight:0.000000e+00
%21 [592r,624r:0)  0@592r weight:0.000000e+00
%22 [608r,640r:0)  0@608r weight:0.000000e+00
%23 [736r,928r:0)  0@736r weight:0.000000e+00
%28 [960r,976r:0)  0@960r weight:0.000000e+00
%31 [1088r,1152r:0)  0@1088r weight:0.000000e+00
%32 [1104r,1152r:0)  0@1104r weight:0.000000e+00
%34 [1136r,1152r:0)  0@1136r weight:0.000000e+00
%39 [1488r,1504r:0)  0@1488r weight:0.000000e+00
%40 [1520r,1856r:0)  0@1520r weight:0.000000e+00
%41 [1536r,1712r:0)  0@1536r weight:0.000000e+00
%42 [1552r,1712r:0)  0@1552r weight:0.000000e+00
%44 [1744r,1856r:0)  0@1744r weight:0.000000e+00
%45 [1888r,1904r:0)  0@1888r weight:0.000000e+00
%48 [2192r,2208r:0)  0@2192r weight:0.000000e+00
%50 [2624r,2640r:0)  0@2624r weight:0.000000e+00
%54 [3152r,3392r:0)  0@3152r weight:0.000000e+00
%57 [3232r,3304r:0)  0@3232r weight:0.000000e+00
%60 [3728r,3744r:0)  0@3728r weight:0.000000e+00
%61 [3760r,3776r:0)  0@3760r weight:0.000000e+00
%63 [3808r,3856r:0)  0@3808r weight:0.000000e+00
%66 [4112r,4128r:0)  0@4112r weight:0.000000e+00
%67 [4144r,8288B:0)  0@4144r weight:0.000000e+00
%68 [4400r,4416r:0)  0@4400r weight:0.000000e+00
%72 [8608r,8992r:0)  0@8608r weight:0.000000e+00
%73 [8832r,8848r:0)  0@8832r weight:0.000000e+00
%74 [8880r,8896r:0)  0@8880r weight:0.000000e+00
%75 [8912r,8928r:0)  0@8912r weight:0.000000e+00
%76 [8944r,8960r:0)  0@8944r weight:0.000000e+00
%80 [9072r,9136r:0)  0@9072r weight:0.000000e+00
%82 [9056r,9104r:2)[9104r,9136r:0)[9136r,9200r:1)[9200r,9424r:3)  0@9104r 1@9136r 2@9056r 3@9200r weight:0.000000e+00
%84 [9168r,9376r:0)  0@9168r weight:0.000000e+00
%88 [9264r,9328r:0)  0@9264r weight:0.000000e+00
%90 [9248r,9296r:2)[9296r,9328r:0)[9328r,9376r:1)[9376r,9392r:3)  0@9296r 1@9328r 2@9248r 3@9376r weight:0.000000e+00
%93 [9472r,9536B:0)[9584r,9616B:1)[9616B,9648r:2)  0@9472r 1@9584r 2@9616B-phi weight:0.000000e+00
%94 [9408r,9424r:0)  0@9408r weight:0.000000e+00
%95 [9552r,9568r:0)  0@9552r weight:0.000000e+00
%96 [9648r,9664r:0)  0@9648r weight:0.000000e+00
%97 [9712r,9744r:0)  0@9712r weight:0.000000e+00
%98 [9728r,9760r:0)  0@9728r weight:0.000000e+00
%101 [9856r,9888r:2)[9888r,9920r:0)[9920r,9936r:1)  0@9888r 1@9920r 2@9856r weight:0.000000e+00
%106 [10128r,10288r:0)  0@10128r weight:0.000000e+00
%113 [10496r,10640r:0)  0@10496r weight:0.000000e+00
%116 [10672r,10864r:0)  0@10672r weight:0.000000e+00
%117 [10688r,10864r:0)  0@10688r weight:0.000000e+00
%125 [11424r,12096r:0)  0@11424r weight:0.000000e+00
%126 [11440r,12096r:0)  0@11440r weight:0.000000e+00
%127 [11456r,12096r:0)  0@11456r weight:0.000000e+00
%128 [11472r,12096r:0)  0@11472r weight:0.000000e+00
%129 [11504r,11536r:0)  0@11504r weight:0.000000e+00
%131 [11552r,11568r:0)  0@11552r weight:0.000000e+00
%132 [11584r,11600r:0)  0@11584r weight:0.000000e+00
%133 [11616r,11632r:0)  0@11616r weight:0.000000e+00
%134 [11648r,11664r:0)  0@11648r weight:0.000000e+00
%135 [11680r,11696r:0)  0@11680r weight:0.000000e+00
%136 [11712r,11728r:0)  0@11712r weight:0.000000e+00
%137 [11744r,11760r:0)  0@11744r weight:0.000000e+00
%138 [11776r,11792r:0)  0@11776r weight:0.000000e+00
%139 [11824r,11840r:0)  0@11824r weight:0.000000e+00
%144 [12192r,12208r:0)  0@12192r weight:0.000000e+00
%145 [12272r,12288r:0)  0@12272r weight:0.000000e+00
%147 [12448r,12720r:0)  0@12448r weight:0.000000e+00
%150 [12496r,12512r:2)[12512r,12544r:0)[12544r,12720r:1)  0@12512r 1@12544r 2@12496r weight:0.000000e+00
%155 [12880r,13120r:0)  0@12880r weight:0.000000e+00
%157 [12912r,12928r:2)[12928r,12960r:0)[12960r,13120r:1)  0@12928r 1@12960r 2@12912r weight:0.000000e+00
%161 [13280r,13520r:0)  0@13280r weight:0.000000e+00
%163 [12480r,13328r:2)[13328r,13360r:0)[13360r,13520r:1)  0@13328r 1@13360r 2@12480r weight:0.000000e+00
%167 [11168r,11344r:0)  0@11168r weight:0.000000e+00
%169 [11056r,11408B:0)  0@11056r weight:0.000000e+00
%170 [11200r,11344r:0)  0@11200r weight:0.000000e+00
%177 [8320r,8576B:0)  0@8320r weight:0.000000e+00
%178 [8416r,8480r:0)[8480r,8496r:1)  0@8416r 1@8480r weight:0.000000e+00
%179 [8528r,8544r:0)  0@8528r weight:0.000000e+00
%181 [4480r,4512r:0)[4512r,4528r:1)  0@4480r 1@4512r weight:0.000000e+00
%182 [4176r,8288B:0)  0@4176r weight:0.000000e+00
%183 [4560r,4576r:0)  0@4560r weight:0.000000e+00
%187 [4688r,4848r:0)  0@4688r weight:0.000000e+00
%189 [4704r,4720r:2)[4720r,4752r:0)[4752r,4832r:1)[4832r,4848r:3)  0@4720r 1@4752r 2@4704r 3@4832r weight:0.000000e+00
%190 [4768r,4784r:0)[4784r,4800r:1)  0@4768r 1@4784r weight:0.000000e+00
%193 [4912r,5024r:0)  0@4912r weight:0.000000e+00
%195 [5056r,5072r:0)  0@5056r weight:0.000000e+00
%196 [5168r,5280r:0)  0@5168r weight:0.000000e+00
%198 [5312r,5328r:0)  0@5312r weight:0.000000e+00
%199 [5344r,5360r:0)  0@5344r weight:0.000000e+00
%201 [4240r,8288B:0)  0@4240r weight:0.000000e+00
%204 [4272r,8288B:0)  0@4272r weight:0.000000e+00
%212 [6256r,6288r:0)[6288r,6320r:1)  0@6256r 1@6288r weight:0.000000e+00
%216 [4288r,8288B:0)  0@4288r weight:0.000000e+00
%217 [6304r,6352r:2)[6352r,6384r:0)[6384r,6512r:1)[6512r,6576r:3)  0@6352r 1@6384r 2@6304r 3@6512r weight:0.000000e+00
%219 [6320r,6432r:2)[6432r,6464r:0)[6464r,6544r:1)[6544r,6576r:3)[6576r,6608r:4)  0@6432r 1@6464r 2@6320r 3@6544r 4@6576r weight:0.000000e+00
%223 [6672r,6768r:0)  0@6672r weight:0.000000e+00
%226 [4320r,8288B:0)  0@4320r weight:0.000000e+00
%231 [4336r,8288B:0)  0@4336r weight:0.000000e+00
%232 [7200r,7232r:2)[7232r,7344r:0)[7344r,7440r:1)  0@7232r 1@7344r 2@7200r weight:0.000000e+00
%243 [7760r,7792r:0)  0@7760r weight:0.000000e+00
%244 [7792r,7856r:0)  0@7792r weight:0.000000e+00
%245 [4368r,8288B:0)  0@4368r weight:0.000000e+00
%247 [7808r,7840r:0)[7840r,7856r:1)  0@7808r 1@7840r weight:0.000000e+00
%249 [7872r,7904r:0)[7904r,7920r:1)  0@7872r 1@7904r weight:0.000000e+00
%251 [7936r,7968r:0)[7968r,7984r:1)  0@7936r 1@7968r weight:0.000000e+00
%254 [3888r,4096B:0)  0@3888r weight:0.000000e+00
%255 [4048r,4064r:0)  0@4048r weight:0.000000e+00
%256 [3504r,3616r:0)  0@3504r weight:0.000000e+00
%258 [3648r,3664r:0)  0@3648r weight:0.000000e+00
%261 [1936r,2160B:0)  0@1936r weight:0.000000e+00
%262 [1952r,2160B:0)  0@1952r weight:0.000000e+00
%263 [2112r,2128r:0)  0@2112r weight:0.000000e+00
%264 [4304r,8288B:0)  0@4304r weight:0.000000e+00
%265 [4352r,8288B:0)  0@4352r weight:0.000000e+00
%268 [2256r,2304B:0)[2384r,2432B:1)[2432B,2592r:2)  0@2256r 1@2384r 2@2432B-phi weight:0.000000e+00
%269 [6928r,6976B:0)[7056r,7104B:1)[7104B,7280r:2)[7280r,7408r:3)[7408r,7440r:4)  0@6928r 1@7056r 2@7104B-phi 3@7280r 4@7408r weight:0.000000e+00
%270 [7504r,7536r:3)[7536r,7616B:1)[7632r,7664r:4)[7664r,7728B:0)[7728B,7760r:2)  0@7664r 1@7536r 2@7728B-phi 3@7504r 4@7632r weight:0.000000e+00
%272 [2048r,2112r:0)  0@2048r weight:0.000000e+00
%273 [3984r,4048r:0)  0@3984r weight:0.000000e+00
%276 [8432r,8528r:0)  0@8432r weight:0.000000e+00
RegMasks: 176r 480r 656r 880r 1232r 1392r 1664r 1808r 2352r 2544r 2704r 2832r 2960r 3072r 3312r 3568r 4976r 5232r 5520r 5696r 5872r 6064r 6720r 7024r 8160r 8640r 8752r 9776r 10048r 10240r 10416r 10592r 10816r 10960r 11296r 12048r 12368r 12672r 12800r 13072r 13200r 13472r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
  fi#12: size=8, align=8, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=8, align=8, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
  fi#16: size=8, align=8, at location [SP+8]
  fi#17: size=8, align=8, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=4, align=4, at location [SP+8]
  fi#22: size=4, align=4, at location [SP+8]
  fi#23: size=4, align=4, at location [SP+8]
  fi#24: size=4, align=4, at location [SP+8]
  fi#25: size=4, align=4, at location [SP+8]
  fi#26: size=4, align=4, at location [SP+8]
  fi#27: size=4, align=4, at location [SP+8]
  fi#28: size=4, align=4, at location [SP+8]
  fi#29: size=24, align=16, at location [SP+8]
  fi#30: size=16, align=16, at location [SP+8]
  fi#31: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 2.000000e+00, align=8
  cp#1: 3.100000e+01, align=8
  cp#2: 1.000000e+00, align=8
  cp#3: 0x41D2309CE5400000, align=8
  cp#4: <double 0x7FFFFFFFFFFFFFFF, double 0x7FFFFFFFFFFFFFFF>, align=16
  cp#5: 1.000000e-08, align=8
  cp#6: 1.000000e+06, align=8
  cp#7: 1.000000e+02, align=8
  cp#8: -2.000000e+00, align=8

0B	bb.0.entry:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)

16B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
32B	  %13:vr128 = MOVAPSrm $rip, 1, $noreg, @ep___const_main_dum_, $noreg, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)`); ep.c:82:12
48B	  MOVAPSmr %stack.29.dum, 1, $noreg, 0, $noreg, %13:vr128, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
64B	  %14:gr64 = MOV64rm $rip, 1, $noreg, @ep___const_main_dum_ + 16, $noreg, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)` + 16, align 16); ep.c:82:12
80B	  MOV64mr %stack.29.dum, 1, $noreg, 16, $noreg, %14:gr64, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !106; ep.c:87:15
144B	  $rdi = LEA64r $rip, 1, $noreg, @ep__str_timer_flag, $noreg, debug-location !106; ep.c:87:15
160B	  $rsi = LEA64r $rip, 1, $noreg, @ep__str_1_r_, $noreg, debug-location !106; ep.c:87:15
176B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !106; ep.c:87:15
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !106; ep.c:87:15
208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !108; ep.c:87:13
224B	  PCN_STACKMAP 0, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, 0, %stack.31.fp, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !108 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.31.fp), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:87:13
240B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !108; ep.c:87:13
256B	  %17:gr64 = COPY killed $rax, debug-location !106; ep.c:87:15
272B	  MOV64mr %stack.31.fp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
288B	  TEST64rr %17:gr64, %17:gr64, implicit-def $eflags, debug-location !109; ep.c:87:41
304B	  JCC_1 %bb.2, 5, implicit $eflags, debug-location !110; ep.c:87:9
320B	  JMP_1 %bb.1, debug-location !110; ep.c:87:9

336B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

352B	  MOV32mi %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, debug-location !111 :: (store 4 into %ir.timers_enabled); ep.c:88:24
368B	  JMP_1 %bb.3, debug-location !113; ep.c:89:5

384B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

400B	  %18:gr32 = MOV32ri 1
416B	  MOV32mr %stack.28.timers_enabled, 1, $noreg, 0, $noreg, %18:gr32, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
432B	  %19:gr64 = MOV64rm %stack.31.fp, 1, $noreg, 0, $noreg, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !117; ep.c:92:9
464B	  $rdi = COPY %19:gr64, debug-location !117; ep.c:92:9
480B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !117; ep.c:92:9
496B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !117; ep.c:92:9
512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  PCN_STACKMAP 1, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %19:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2)
544B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

560B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !119; ep.c:102:30
592B	  %21:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
608B	  %22:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
624B	  $xmm0 = COPY %21:fr64, debug-location !119; ep.c:102:30
640B	  $xmm1 = COPY %22:fr64, debug-location !119; ep.c:102:30
656B	  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !119; ep.c:102:30
672B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !119; ep.c:102:30
688B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !120; ep.c:102:5
704B	  PCN_STACKMAP 2, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.30.size, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !120 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:102:5
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !120; ep.c:102:5
736B	  %23:fr64 = COPY $xmm0, debug-location !119; ep.c:102:30
752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !120; ep.c:102:5
816B	  $rdi = LEA64r %stack.30.size, 1, $noreg, 0, $noreg, debug-location !120; ep.c:102:5
832B	  $rsi = LEA64r $rip, 1, $noreg, @ep__str_2__15_0lf_, $noreg, debug-location !120; ep.c:102:5
848B	  $xmm0 = COPY %23:fr64, debug-location !120; ep.c:102:5
864B	  $al = MOV8ri 1, debug-location !120; ep.c:102:5
880B	  CALL64pcrel32 @sprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !120; ep.c:102:5
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !120; ep.c:102:5
912B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !121; ep.c:103:7
928B	  PCN_STACKMAP 3, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.30.size, 0, %23:fr64, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !121 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:103:7
944B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !121; ep.c:103:7
960B	  %28:gr32 = MOV32ri 14
976B	  MOV32mr %stack.26.j, 1, $noreg, 0, $noreg, %28:gr32, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
992B	  CMP8mi %stack.30.size, 1, $noreg, 14, $noreg, 46, implicit-def $eflags, debug-location !125 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:17
1008B	  JCC_1 %bb.5, 5, implicit $eflags, debug-location !126; ep.c:104:9
1024B	  JMP_1 %bb.4, debug-location !126; ep.c:104:9

1040B	bb.4.if.then6:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1056B	  DEC32m %stack.26.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !127 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); ep.c:105:10

1072B	bb.5.if.end7:
	; predecessors: %bb.3, %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1088B	  %31:gr64 = MOVSX64rm32 %stack.26.j, 1, $noreg, 0, $noreg, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
1104B	  %32:gr32temp = MOV32r0 implicit-def dead $eflags
1136B	  %34:gr64_nosp = LEA64r %stack.30.size, 1, $noreg, 0, $noreg
1152B	  MOV8mr %31:gr64, 1, %34:gr64_nosp, 1, $noreg, %32.sub_8bit:gr32temp, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
1168B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !133; ep.c:107:5
1200B	  $rdi = LEA64r $rip, 1, $noreg, @ep__str_3____NAS_Par, $noreg, debug-location !133; ep.c:107:5
1216B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !133; ep.c:107:5
1232B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !133; ep.c:107:5
1248B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !133; ep.c:107:5
1264B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !134; ep.c:108:61
1280B	  PCN_STACKMAP 4, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !134 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:108:61
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !134; ep.c:108:61
1312B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !135; ep.c:108:5
1344B	  $rdi = LEA64r $rip, 1, $noreg, @ep__str_4___Number_o, $noreg, debug-location !135; ep.c:108:5
1360B	  $rsi = LEA64r %stack.30.size, 1, $noreg, 0, $noreg, debug-location !135; ep.c:108:5
1376B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !135; ep.c:108:5
1392B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !135; ep.c:108:5
1408B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !135; ep.c:108:5
1424B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !136; ep.c:110:14
1440B	  PCN_STACKMAP 5, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.30.size, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !136 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:110:14
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !136; ep.c:110:14
1472B	  MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
1488B	  %39:gr32 = MOV32ri 16384
1504B	  MOV32mr %stack.18.np, 1, $noreg, 0, $noreg, %39:gr32, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
1520B	  %40:gr64 = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139; ep.c:127:24
1536B	  %41:fr64 = MOVSDrm_alt %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
1552B	  %42:gr64 = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !140; ep.c:127:33
1568B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; ep.c:127:5
1616B	  $rsi = LEA64r %stack.29.dum, 1, $noreg, 0, $noreg, debug-location !141; ep.c:127:5
1648B	  $rdx = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !141; ep.c:127:5
1652B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !141; ep.c:127:5
1656B	  $xmm0 = COPY %41:fr64, debug-location !141; ep.c:127:5
1664B	  CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $rsi, implicit $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !141; ep.c:127:5
1680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !141; ep.c:127:5
1696B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !142; ep.c:128:22
1712B	  PCN_STACKMAP 6, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, %42:gr64, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %41:fr64, implicit-def dead early-clobber $r11, debug-location !142 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:128:22
1728B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !142; ep.c:128:22
1744B	  %44:fr64 = MOVSDrm_alt %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !144; ep.c:128:14
1776B	  $rdi = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !144; ep.c:128:14
1792B	  $xmm0 = COPY %44:fr64, debug-location !144; ep.c:128:14
1808B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !144; ep.c:128:14
1824B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !144; ep.c:128:14
1840B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !145; ep.c:128:5
1856B	  PCN_STACKMAP 7, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, %40:gr64, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %44:fr64, implicit-def dead early-clobber $r11, debug-location !145 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:128:5
1872B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !145; ep.c:128:5
1888B	  %45:fr64 = COPY $xmm0, debug-location !144; ep.c:128:14
1904B	  MOVSDmr %stack.29.dum, 1, $noreg, 0, $noreg, %45:fr64, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
1920B	  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
1936B	  %261:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
1952B	  %262:gr64 = MOV64ri -3135276447761457362

1968B	bb.6.for.cond:
	; predecessors: %bb.5, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

1984B	  CMP32mi %stack.19.i, 1, $noreg, 0, $noreg, 131071, implicit-def $eflags, debug-location !152 :: (dereferenceable load 4 from %ir.i); ep.c:129:19
2000B	  JCC_1 %bb.8, 15, implicit $eflags, debug-location !153; ep.c:129:5
2016B	  JMP_1 %bb.7, debug-location !153; ep.c:129:5

2032B	bb.7.for.body:
	; predecessors: %bb.6
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

2048B	  %272:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
2080B	  MOV64mr %261:gr64, 8, %272:gr64_nosp, 0, $noreg, %262:gr64, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
2112B	  %263:gr32 = LEA64_32r %272:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !158; ep.c:129:30
2128B	  MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %263:gr32, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
2144B	  JMP_1 %bb.6, debug-location !159; ep.c:129:5

2160B	bb.8.for.end:
	; predecessors: %bb.6
	  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

2176B	  %0:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
2192B	  %48:gr8 = MOV8ri 1
2208B	  TEST8rr %48:gr8, %48:gr8, implicit-def $eflags, debug-location !164; ep.c:132:12
2224B	  JCC_1 %bb.10, 4, implicit $eflags, debug-location !164; ep.c:132:12

2240B	bb.9:
	; predecessors: %bb.8
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

2256B	  %268:fr64 = SQRTSDr %0:fr64
2288B	  JMP_1 %bb.11

2304B	bb.10.call.sqrt:
	; predecessors: %bb.8
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

2320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
2336B	  $xmm0 = COPY %0:fr64, debug-location !164; ep.c:132:12
2352B	  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !164; ep.c:132:12
2368B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
2384B	  %268:fr64 = COPY $xmm0, debug-location !164; ep.c:132:12

2432B	bb.11.for.end.split:
	; predecessors: %bb.10, %bb.9
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
2480B	  PCN_STACKMAP 8, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %0:fr64, implicit-def dead early-clobber $r11, debug-location !164 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:132:12
2496B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
2512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
2528B	  $xmm0 = COPY %268:fr64, debug-location !164; ep.c:132:12
2544B	  CALL64pcrel32 @log, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !164; ep.c:132:12
2560B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
2576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !165; ep.c:132:10
2592B	  PCN_STACKMAP 9, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, %268:fr64, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !165 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:132:10
2608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !165; ep.c:132:10
2624B	  %50:fr64 = COPY $xmm0, debug-location !164; ep.c:132:12
2640B	  MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %50:fr64, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
2656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; ep.c:134:5
2688B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !166; ep.c:134:5
2704B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !166; ep.c:134:5
2720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !166; ep.c:134:5
2736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !167; ep.c:135:5
2752B	  PCN_STACKMAP 10, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !167 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:135:5
2768B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !167; ep.c:135:5
2784B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !167; ep.c:135:5
2816B	  $edi = MOV32ri 1, debug-location !167; ep.c:135:5
2832B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !167; ep.c:135:5
2848B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !167; ep.c:135:5
2864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !168; ep.c:136:5
2880B	  PCN_STACKMAP 11, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !168 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:136:5
2896B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !168; ep.c:136:5
2912B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !168; ep.c:136:5
2944B	  $edi = MOV32ri 2, debug-location !168; ep.c:136:5
2960B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !168; ep.c:136:5
2976B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !168; ep.c:136:5
2992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !169; ep.c:137:5
3008B	  PCN_STACKMAP 12, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !169 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:137:5
3024B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !169; ep.c:137:5
3040B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !169; ep.c:137:5
3056B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !169; ep.c:137:5
3072B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !169; ep.c:137:5
3088B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !169; ep.c:137:5
3104B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !170; ep.c:139:5
3120B	  PCN_STACKMAP 13, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !170 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:139:5
3136B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !170; ep.c:139:5
3152B	  %54:gr64 = MOV64ri 4742906807993761792
3168B	  MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %54:gr64, debug-location !171 :: (store 8 into %ir.t1); ep.c:141:8
3184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !172; ep.c:142:5
3232B	  %57:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
3264B	  $rsi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !172; ep.c:142:5
3296B	  $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !172; ep.c:142:5
3300B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !172; ep.c:142:5
3304B	  $xmm0 = COPY %57:fr64, debug-location !172; ep.c:142:5
3312B	  CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $rsi, implicit $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !172; ep.c:142:5
3328B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !172; ep.c:142:5
3344B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !173; ep.c:148:8
3360B	  PCN_STACKMAP 14, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !173 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:148:8
3376B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !173; ep.c:148:8
3392B	  MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %54:gr64, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
3408B	  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !174 :: (store 4 into %ir.i); ep.c:150:12

3424B	bb.12.for.cond26:
	; predecessors: %bb.11, %bb.13
	  successors: %bb.13(0x7c000000), %bb.14(0x04000000); %bb.13(96.88%), %bb.14(3.12%)

3440B	  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 16, implicit-def $eflags, debug-location !179 :: (dereferenceable load 4 from %ir.i); ep.c:150:19
3456B	  JCC_1 %bb.14, 15, implicit $eflags, debug-location !180; ep.c:150:5
3472B	  JMP_1 %bb.13, debug-location !180; ep.c:150:5

3488B	bb.13.for.body29:
	; predecessors: %bb.12
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3504B	  %256:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !181 :: (dereferenceable load 8 from %ir.t1); ep.c:151:26
3520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !183; ep.c:151:14
3536B	  $rdi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !183; ep.c:151:14
3552B	  $xmm0 = COPY %256:fr64, debug-location !183; ep.c:151:14
3568B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !183; ep.c:151:14
3584B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !183; ep.c:151:14
3600B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !184; ep.c:151:12
3616B	  PCN_STACKMAP 15, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %256:fr64, implicit-def dead early-clobber $r11, debug-location !184 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:151:12
3632B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !184; ep.c:151:12
3648B	  %258:fr64 = COPY $xmm0, debug-location !183; ep.c:151:14
3664B	  MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %258:fr64, debug-location !184 :: (store 8 into %ir.t2); ep.c:151:12
3680B	  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !185 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:150:30
3696B	  JMP_1 %bb.12, debug-location !186; ep.c:150:5

3712B	bb.14.for.end33:
	; predecessors: %bb.12
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

3728B	  %60:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
3744B	  MOVSDmr %stack.11.an, 1, $noreg, 0, $noreg, %60:fr64, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
3760B	  %61:gr64 = MOV64ri 4733340128880099328
3776B	  MOV64mr %stack.12.tt, 1, $noreg, 0, $noreg, %61:gr64, debug-location !191 :: (store 8 into %ir.tt); ep.c:155:8
3792B	  MOV64mi32 %stack.13.gc, 1, $noreg, 0, $noreg, 0, debug-location !192 :: (store 8 into %ir.gc); ep.c:156:8
3808B	  undef %63.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
3840B	  MOV64mr %stack.8.sx, 1, $noreg, 0, $noreg, %63:gr64_with_sub_32bit_in_gr32temp, debug-location !193 :: (store 8 into %ir.sx); ep.c:157:8
3856B	  MOV64mr %stack.9.sy, 1, $noreg, 0, $noreg, %63:gr64_with_sub_32bit_in_gr32temp, debug-location !194 :: (store 8 into %ir.sy); ep.c:158:8
3872B	  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !195 :: (store 4 into %ir.i); ep.c:160:12
3888B	  %254:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg

3904B	bb.15.for.cond34:
	; predecessors: %bb.14, %bb.16
	  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

3920B	  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags, debug-location !200 :: (dereferenceable load 4 from %ir.i); ep.c:160:19
3936B	  JCC_1 %bb.17, 15, implicit $eflags, debug-location !201; ep.c:160:5
3952B	  JMP_1 %bb.16, debug-location !201; ep.c:160:5

3968B	bb.16.for.body37:
	; predecessors: %bb.15
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

3984B	  %273:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
4016B	  MOV64mi32 %254:gr64, 8, %273:gr64_nosp, 0, $noreg, 0, debug-location !205 :: (store 8 into %ir.arrayidx39); ep.c:161:14
4048B	  %255:gr32 = LEA64_32r %273:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !206; ep.c:160:26
4064B	  MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %255:gr32, debug-location !206 :: (store 4 into %ir.i); ep.c:160:26
4080B	  JMP_1 %bb.15, debug-location !207; ep.c:160:5

4096B	bb.17.for.end42:
	; predecessors: %bb.15
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

4112B	  %66:gr32 = MOV32ri -1
4128B	  MOV32mr %stack.25.k_offset, 1, $noreg, 0, $noreg, %66:gr32, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
4144B	  %67:gr32 = MOV32ri 1
4160B	  MOV32mr %stack.23.k, 1, $noreg, 0, $noreg, %67:gr32, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
4176B	  %182:gr64 = MOV64ri 4733340128880099328
4240B	  %201:gr64_nosp = LEA64r $rip, 1, $noreg, @x, $noreg
4272B	  %204:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
4288B	  %216:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
4304B	  %264:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.8, $noreg :: (load 8 from constant-pool)
4320B	  %226:fr64 = FsFLD0SD
4336B	  %231:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
4352B	  %265:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
4368B	  %245:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg

4384B	bb.18.for.cond43:
	; predecessors: %bb.17, %bb.44
	  successors: %bb.19(0x7c000000), %bb.45(0x04000000); %bb.19(96.88%), %bb.45(3.12%)

4400B	  %68:gr32 = MOV32rm %stack.23.k, 1, $noreg, 0, $noreg, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
4416B	  CMP32rm %68:gr32, %stack.18.np, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !217 :: (dereferenceable load 4 from %ir.np); ep.c:172:19
4432B	  JCC_1 %bb.45, 15, implicit $eflags, debug-location !218; ep.c:172:5
4448B	  JMP_1 %bb.19, debug-location !218; ep.c:172:5

4464B	bb.19.for.body46:
	; predecessors: %bb.18
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

4480B	  %181:gr32 = MOV32rm %stack.25.k_offset, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
4512B	  %181:gr32 = nsw ADD32rm %181:gr32(tied-def 0), %stack.23.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !222 :: (dereferenceable load 4 from %ir.k); ep.c:173:23
4528B	  MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %181:gr32, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
4544B	  MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %182:gr64, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
4560B	  %183:fr64 = MOVSDrm_alt %stack.11.an, 1, $noreg, 0, $noreg, debug-location !225 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
4576B	  MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %183:fr64, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12
4592B	  MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %67:gr32, debug-location !227 :: (store 4 into %ir.i); ep.c:179:16

4608B	bb.20.for.cond48:
	; predecessors: %bb.19, %bb.24
	  successors: %bb.21(0x7c000000), %bb.25(0x04000000); %bb.21(96.88%), %bb.25(3.12%)

4624B	  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 100, implicit-def $eflags, debug-location !232 :: (dereferenceable load 4 from %ir.i); ep.c:179:23
4640B	  JCC_1 %bb.25, 15, implicit $eflags, debug-location !233; ep.c:179:9
4656B	  JMP_1 %bb.21, debug-location !233; ep.c:179:9

4672B	bb.21.for.body51:
	; predecessors: %bb.20
	  successors: %bb.22(0x40000000), %bb.23(0x40000000); %bb.22(50.00%), %bb.23(50.00%)

4688B	  %187:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
4704B	  %189:gr32 = COPY %187:gr32, debug-location !236; ep.c:180:21
4720B	  %189:gr32 = SHR32ri %189:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !236; ep.c:180:21
4752B	  %189:gr32 = ADD32rr %189:gr32(tied-def 0), %187:gr32, implicit-def dead $eflags, debug-location !236; ep.c:180:21
4768B	  %190:gr32 = COPY %189:gr32, debug-location !236; ep.c:180:21
4784B	  %190:gr32 = SAR32r1 %190:gr32(tied-def 0), implicit-def dead $eflags, debug-location !236; ep.c:180:21
4800B	  MOV32mr %stack.20.ik, 1, $noreg, 0, $noreg, %190:gr32, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16
4832B	  %189:gr32 = AND32ri8 %189:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !240; ep.c:181:20
4848B	  CMP32rr %189:gr32, %187:gr32, implicit-def $eflags, debug-location !242; ep.c:181:26
4864B	  JCC_1 %bb.23, 4, implicit $eflags, debug-location !243; ep.c:181:17
4880B	  JMP_1 %bb.22, debug-location !243; ep.c:181:17

4896B	bb.22.if.then54:
	; predecessors: %bb.21
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

4912B	  %193:fr64 = MOVSDrm_alt %stack.3.t2, 1, $noreg, 0, $noreg, debug-location !244 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
4928B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !245; ep.c:182:22
4944B	  $rdi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !245; ep.c:182:22
4960B	  $xmm0 = COPY %193:fr64, debug-location !245; ep.c:182:22
4976B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !245; ep.c:182:22
4992B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !245; ep.c:182:22
5008B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !246; ep.c:182:20
5024B	  PCN_STACKMAP 16, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %193:fr64, implicit-def dead early-clobber $r11, debug-location !246 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:182:20
5040B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !246; ep.c:182:20
5056B	  %195:fr64 = COPY $xmm0, debug-location !245; ep.c:182:22
5072B	  MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %195:fr64, debug-location !246 :: (store 8 into %ir.t3); ep.c:182:20

5088B	bb.23.if.end56:
	; predecessors: %bb.21, %bb.22
	  successors: %bb.25(0x04000000), %bb.24(0x7c000000); %bb.25(3.12%), %bb.24(96.88%)

5104B	  CMP32mi8 %stack.20.ik, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !250 :: (dereferenceable load 4 from %ir.ik); ep.c:183:20
5120B	  JCC_1 %bb.25, 4, implicit $eflags, debug-location !251; ep.c:183:17
5136B	  JMP_1 %bb.24, debug-location !251; ep.c:183:17

5152B	bb.24.if.end60:
	; predecessors: %bb.23
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

5168B	  %196:fr64 = MOVSDrm_alt %stack.3.t2, 1, $noreg, 0, $noreg, debug-location !252 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
5184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !253; ep.c:185:18
5200B	  $rdi = LEA64r %stack.3.t2, 1, $noreg, 0, $noreg, debug-location !253; ep.c:185:18
5216B	  $xmm0 = COPY %196:fr64, debug-location !253; ep.c:185:18
5232B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !253; ep.c:185:18
5248B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !253; ep.c:185:18
5264B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !254; ep.c:185:16
5280B	  PCN_STACKMAP 17, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %196:fr64, implicit-def dead early-clobber $r11, debug-location !254 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:185:16
5296B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !254; ep.c:185:16
5312B	  %198:fr64 = COPY $xmm0, debug-location !253; ep.c:185:18
5328B	  MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %198:fr64, debug-location !254 :: (store 8 into %ir.t3); ep.c:185:16
5344B	  %199:gr32 = MOV32rm %stack.20.ik, 1, $noreg, 0, $noreg, debug-location !255 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
5360B	  MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %199:gr32, debug-location !256 :: (store 4 into %ir.kk); ep.c:186:16
5376B	  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !257 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:179:32
5392B	  JMP_1 %bb.20, debug-location !258; ep.c:179:9

5408B	bb.25.for.end64:
	; predecessors: %bb.20, %bb.23
	  successors: %bb.26(0x50000000), %bb.27(0x30000000); %bb.26(62.50%), %bb.27(37.50%)

5424B	  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !261 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:192:13
5440B	  JCC_1 %bb.27, 4, implicit $eflags, debug-location !263; ep.c:192:13
5456B	  JMP_1 %bb.26, debug-location !263; ep.c:192:13

5472B	bb.26.if.then65:
	; predecessors: %bb.25
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

5488B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; ep.c:193:13
5504B	  $edi = MOV32ri 2, debug-location !264; ep.c:193:13
5520B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !264; ep.c:193:13
5536B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !264; ep.c:193:13
5552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !264; ep.c:193:13
5568B	  PCN_STACKMAP 18, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !264 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:193:13
5584B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; ep.c:193:13

5600B	bb.27.if.end66:
	; predecessors: %bb.25, %bb.26
	  successors: %bb.28(0x50000000), %bb.29(0x30000000); %bb.28(62.50%), %bb.29(37.50%)

5616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !265; ep.c:194:9
5648B	  $rsi = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !265; ep.c:194:9
5680B	  $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !265; ep.c:194:9
5684B	  $edi = MOV32ri 131072, debug-location !265; ep.c:194:9
5688B	  $xmm0 = COPY %204:fr64, debug-location !265; ep.c:194:9
5696B	  CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $rsi, implicit $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !265; ep.c:194:9
5712B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !265; ep.c:194:9
5728B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !266; ep.c:195:13
5744B	  PCN_STACKMAP 19, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !266 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:195:13
5760B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !266; ep.c:195:13
5776B	  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !266 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:195:13
5792B	  JCC_1 %bb.29, 4, implicit $eflags, debug-location !268; ep.c:195:13
5808B	  JMP_1 %bb.28, debug-location !268; ep.c:195:13

5824B	bb.28.if.then68:
	; predecessors: %bb.27
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

5840B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !269; ep.c:196:13
5856B	  $edi = MOV32ri 2, debug-location !269; ep.c:196:13
5872B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !269; ep.c:196:13
5888B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !269; ep.c:196:13
5904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !269; ep.c:196:13
5920B	  PCN_STACKMAP 20, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !269 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:196:13
5936B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !269; ep.c:196:13

5952B	bb.29.if.end69:
	; predecessors: %bb.27, %bb.28
	  successors: %bb.30(0x50000000), %bb.31(0x30000000); %bb.30(62.50%), %bb.31(37.50%)

5968B	  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !270 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:203:13
5984B	  JCC_1 %bb.31, 4, implicit $eflags, debug-location !272; ep.c:203:13
6000B	  JMP_1 %bb.30, debug-location !272; ep.c:203:13

6016B	bb.30.if.then71:
	; predecessors: %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

6032B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !273; ep.c:204:13
6048B	  $edi = MOV32ri 1, debug-location !273; ep.c:204:13
6064B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !273; ep.c:204:13
6080B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !273; ep.c:204:13
6096B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !273; ep.c:204:13
6112B	  PCN_STACKMAP 21, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !273 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:204:13
6128B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !273; ep.c:204:13

6144B	bb.31.if.end72:
	; predecessors: %bb.29, %bb.30
	  successors: %bb.32(0x80000000); %bb.32(100.00%)

6160B	  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !274 :: (store 4 into %ir.i); ep.c:206:16

6176B	bb.32.for.cond73:
	; predecessors: %bb.31, %bb.41
	  successors: %bb.33(0x7c000000), %bb.42(0x04000000); %bb.33(96.88%), %bb.42(3.12%)

6192B	  CMP32mi %stack.19.i, 1, $noreg, 0, $noreg, 65535, implicit-def $eflags, debug-location !279 :: (dereferenceable load 4 from %ir.i); ep.c:206:23
6208B	  JCC_1 %bb.42, 15, implicit $eflags, debug-location !280; ep.c:206:9
6224B	  JMP_1 %bb.33, debug-location !280; ep.c:206:9

6240B	bb.33.for.body76:
	; predecessors: %bb.32
	  successors: %bb.34(0x40000000), %bb.41(0x40000000); %bb.34(50.00%), %bb.41(50.00%)

6256B	  %212:gr64 = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
6288B	  %212:gr64 = SHL64ri %212:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !290; ep.c:208:32
6304B	  %217:fr64 = MOVSDrm_alt %212:gr64, 1, %201:gr64_nosp, 0, $noreg, debug-location !284 :: (load 8 from %ir.arrayidx79); ep.c:207:24
6320B	  %219:fr64 = MOVSDrm_alt %212:gr64, 1, %201:gr64_nosp, 8, $noreg, debug-location !291 :: (load 8 from %ir.arrayidx84); ep.c:208:24
6352B	  %217:fr64 = ADDSDrr %217:fr64(tied-def 0), %217:fr64, debug-location !285; ep.c:207:22
6384B	  %217:fr64 = SUBSDrr %217:fr64(tied-def 0), %216:fr64, debug-location !286; ep.c:207:33
6400B	  MOVSDmr %stack.6.x1, 1, $noreg, 0, $noreg, %217:fr64, debug-location !287 :: (store 8 into %ir.x1); ep.c:207:16
6432B	  %219:fr64 = ADDSDrr %219:fr64(tied-def 0), %219:fr64, debug-location !292; ep.c:208:22
6464B	  %219:fr64 = SUBSDrr %219:fr64(tied-def 0), %216:fr64, debug-location !293; ep.c:208:37
6480B	  MOVSDmr %stack.7.x2, 1, $noreg, 0, $noreg, %219:fr64, debug-location !294 :: (store 8 into %ir.x2); ep.c:208:16
6512B	  %217:fr64 = MULSDrr %217:fr64(tied-def 0), %217:fr64, debug-location !297; ep.c:209:21
6544B	  %219:fr64 = MULSDrr %219:fr64(tied-def 0), %219:fr64, debug-location !300; ep.c:209:31
6576B	  %219:fr64 = ADDSDrr %219:fr64(tied-def 0), %217:fr64, debug-location !301; ep.c:209:26
6592B	  MOVSDmr %stack.2.t1, 1, $noreg, 0, $noreg, %219:fr64, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16
6608B	  UCOMISDrr %216:fr64, %219:fr64, implicit-def $eflags, debug-location !305; ep.c:210:20
6624B	  JCC_1 %bb.41, 2, implicit $eflags, debug-location !306; ep.c:210:17
6640B	  JMP_1 %bb.34, debug-location !306; ep.c:210:17

6656B	bb.34.if.then92:
	; predecessors: %bb.33
	  successors: %bb.35(0x40000000), %bb.36(0x40000000); %bb.35(50.00%), %bb.36(50.00%)

6672B	  %223:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !307 :: (dereferenceable load 8 from %ir.t1); ep.c:211:38
6688B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !309; ep.c:211:34
6704B	  $xmm0 = COPY %223:fr64, debug-location !309; ep.c:211:34
6720B	  CALL64pcrel32 @log, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !309; ep.c:211:34
6736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !309; ep.c:211:34
6752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !310; ep.c:211:32
6768B	  PCN_STACKMAP 22, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %223:fr64, implicit-def dead early-clobber $r11, debug-location !310 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:211:32
6784B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !310; ep.c:211:32
6800B	  %4:fr64 = COPY $xmm0, debug-location !309; ep.c:211:34
6832B	  %4:fr64 = MULSDrr %4:fr64(tied-def 0), %264:fr64, debug-location !310; ep.c:211:32
6864B	  %4:fr64 = DIVSDrm %4:fr64(tied-def 0), %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !312 :: (dereferenceable load 8 from %ir.t1); ep.c:211:42
6880B	  UCOMISDrr %4:fr64, %226:fr64, implicit-def $eflags, debug-location !314; ep.c:211:20
6896B	  JCC_1 %bb.36, 2, implicit $eflags, debug-location !314; ep.c:211:20

6912B	bb.35:
	; predecessors: %bb.34
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

6928B	  %269:vr128 = SQRTSDr %4:fr64
6960B	  JMP_1 %bb.37

6976B	bb.36.call.sqrt1:
	; predecessors: %bb.34
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

6992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !314; ep.c:211:20
7008B	  $xmm0 = COPY %4:fr64, debug-location !314; ep.c:211:20
7024B	  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !314; ep.c:211:20
7040B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !314; ep.c:211:20
7056B	  %269:vr128 = COPY $xmm0, debug-location !314; ep.c:211:20

7104B	bb.37.if.then92.split:
	; predecessors: %bb.36, %bb.35
	  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

7136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !314; ep.c:211:20
7152B	  PCN_STACKMAP 23, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, %4:fr64, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !314 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:211:20
7168B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !314; ep.c:211:20
7184B	  MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %269:vr128, debug-location !314 :: (store 8 into %ir.t2); ep.c:211:20
7200B	  %232:vr128 = MOVSDrm_alt %stack.6.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
7232B	  %232:vr128 = MULSDrr %232:vr128(tied-def 0), %269:vr128, debug-location !317; ep.c:212:26
7248B	  MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %232:vr128, debug-location !318 :: (store 8 into %ir.t3); ep.c:212:20
7280B	  %269:vr128 = MULSDrm %269:vr128(tied-def 0), %stack.7.x2, 1, $noreg, 0, $noreg, debug-location !321 :: (dereferenceable load 8 from %ir.x2); ep.c:213:26
7296B	  MOVSDmr %stack.5.t4, 1, $noreg, 0, $noreg, %269:vr128, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
7344B	  %232:vr128 = PANDrr %232:vr128(tied-def 0), %231:vr128, debug-location !323; ep.c:214:21
7408B	  %269:vr128 = PANDrr %269:vr128(tied-def 0), %231:vr128, debug-location !323; ep.c:214:21
7440B	  UCOMISDrr %232:vr128, %269:vr128, implicit-def $eflags, debug-location !323; ep.c:214:21
7456B	  JCC_1 %bb.39, 6, implicit $eflags, debug-location !323; ep.c:214:21
7472B	  JMP_1 %bb.38, debug-location !323; ep.c:214:21

7488B	bb.38.cond.true:
	; predecessors: %bb.37
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

7504B	  %270:vr128 = MOVSDrm %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.t3); ep.c:214:21
7536B	  %270:vr128 = PANDrr %270:vr128(tied-def 0), %265:vr128, debug-location !323; ep.c:214:21
7600B	  JMP_1 %bb.40, debug-location !323; ep.c:214:21

7616B	bb.39.cond.false:
	; predecessors: %bb.37
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

7632B	  %270:vr128 = MOVSDrm %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.t4); ep.c:214:21
7664B	  %270:vr128 = PANDrr %270:vr128(tied-def 0), %265:vr128, debug-location !323; ep.c:214:21

7728B	bb.40.cond.end:
	; predecessors: %bb.39, %bb.38
	  successors: %bb.41(0x80000000); %bb.41(100.00%)

7760B	  %243:gr32 = CVTTSD2SIrr %270:vr128, debug-location !323; ep.c:214:21
7776B	  MOV32mr %stack.22.l, 1, $noreg, 0, $noreg, %243:gr32, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
7792B	  %244:gr64_nosp = MOVSX64rr32 %243:gr32, debug-location !325; ep.c:215:26
7808B	  %247:fr64 = MOVSDrm_alt %245:gr64, 8, %244:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx103)
7840B	  %247:fr64 = ADDSDrr %247:fr64(tied-def 0), %216:fr64, debug-location !327; ep.c:215:29
7856B	  MOVSDmr %245:gr64, 8, %244:gr64_nosp, 0, $noreg, %247:fr64, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
7872B	  %249:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !331 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
7904B	  %249:fr64 = ADDSDrm %249:fr64(tied-def 0), %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !333 :: (dereferenceable load 8 from %ir.t3); ep.c:216:25
7920B	  MOVSDmr %stack.8.sx, 1, $noreg, 0, $noreg, %249:fr64, debug-location !334 :: (store 8 into %ir.sx); ep.c:216:20
7936B	  %251:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !335 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
7968B	  %251:fr64 = ADDSDrm %251:fr64(tied-def 0), %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !337 :: (dereferenceable load 8 from %ir.t4); ep.c:217:25
7984B	  MOVSDmr %stack.9.sy, 1, $noreg, 0, $noreg, %251:fr64, debug-location !338 :: (store 8 into %ir.sy); ep.c:217:20

8000B	bb.41.if.end109:
	; predecessors: %bb.33, %bb.40
	  successors: %bb.32(0x80000000); %bb.32(100.00%)

8016B	  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !340 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:206:30
8032B	  JMP_1 %bb.32, debug-location !341; ep.c:206:9

8048B	bb.42.for.end112:
	; predecessors: %bb.32
	  successors: %bb.43(0x50000000), %bb.44(0x30000000); %bb.43(62.50%), %bb.44(37.50%)

8064B	  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !344 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:221:13
8080B	  JCC_1 %bb.44, 4, implicit $eflags, debug-location !346; ep.c:221:13
8096B	  JMP_1 %bb.43, debug-location !346; ep.c:221:13

8112B	bb.43.if.then114:
	; predecessors: %bb.42
	  successors: %bb.44(0x80000000); %bb.44(100.00%)

8128B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !347; ep.c:222:13
8144B	  $edi = MOV32ri 1, debug-location !347; ep.c:222:13
8160B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !347; ep.c:222:13
8176B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !347; ep.c:222:13
8192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !347; ep.c:222:13
8208B	  PCN_STACKMAP 24, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $r11, debug-location !347 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:222:13
8224B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !347; ep.c:222:13

8240B	bb.44.if.end115:
	; predecessors: %bb.42, %bb.43
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

8256B	  INC32m %stack.23.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !348 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); ep.c:172:27
8272B	  JMP_1 %bb.18, debug-location !349; ep.c:172:5

8288B	bb.45.for.end118:
	; predecessors: %bb.18
	  successors: %bb.46(0x80000000); %bb.46(100.00%)

8304B	  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
8320B	  %177:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg

8336B	bb.46.for.cond119:
	; predecessors: %bb.45, %bb.47
	  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)

8352B	  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags, debug-location !357 :: (dereferenceable load 4 from %ir.i); ep.c:225:19
8368B	  JCC_1 %bb.48, 15, implicit $eflags, debug-location !358; ep.c:225:5
8384B	  JMP_1 %bb.47, debug-location !358; ep.c:225:5

8400B	bb.47.for.body122:
	; predecessors: %bb.46
	  successors: %bb.46(0x80000000); %bb.46(100.00%)

8416B	  %178:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
8432B	  %276:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
8480B	  %178:fr64 = ADDSDrm %178:fr64(tied-def 0), %177:gr64, 8, %276:gr64_nosp, 0, $noreg, debug-location !363 :: (load 8 from %ir.arrayidx124); ep.c:226:17
8496B	  MOVSDmr %stack.13.gc, 1, $noreg, 0, $noreg, %178:fr64, debug-location !364 :: (store 8 into %ir.gc); ep.c:226:12
8528B	  %179:gr32 = LEA64_32r %276:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !365; ep.c:225:26
8544B	  MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %179:gr32, debug-location !365 :: (store 4 into %ir.i); ep.c:225:26
8560B	  JMP_1 %bb.46, debug-location !366; ep.c:225:5

8576B	bb.48.for.end128:
	; predecessors: %bb.46
	  successors: %bb.49(0x50000000), %bb.53(0x30000000); %bb.49(62.50%), %bb.53(37.50%)

8592B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !369; ep.c:231:5
8608B	  %72:gr32temp = MOV32r0 implicit-def dead $eflags
8624B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !369; ep.c:231:5
8640B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !369; ep.c:231:5
8656B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !369; ep.c:231:5
8672B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !370; ep.c:232:10
8688B	  PCN_STACKMAP 25, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $r11, debug-location !370 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:232:10
8704B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !370; ep.c:232:10
8720B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !370; ep.c:232:10
8736B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !370; ep.c:232:10
8752B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !370; ep.c:232:10
8768B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !370; ep.c:232:10
8784B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !371; ep.c:232:8
8800B	  PCN_STACKMAP 26, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $r11, debug-location !371 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:232:8
8816B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !371; ep.c:232:8
8832B	  %73:fr64 = COPY $xmm0, debug-location !370; ep.c:232:10
8848B	  MOVSDmr %stack.10.tm, 1, $noreg, 0, $noreg, %73:fr64, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
8864B	  MOV32mi %stack.24.nit, 1, $noreg, 0, $noreg, 0, debug-location !372 :: (store 4 into %ir.nit); ep.c:234:9
8880B	  %74:gr32 = MOV32ri 1
8896B	  MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %74:gr32, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
8912B	  %75:gr64 = MOV64ri 4675776847449726827
8928B	  MOV64mr %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, %75:gr64, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
8944B	  %76:gr64 = MOV64ri -4550329231111044107
8960B	  MOV64mr %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, %76:gr64, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
8992B	  TEST8rr %72.sub_8bit:gr32temp, %72.sub_8bit:gr32temp, implicit-def $eflags, debug-location !383; ep.c:268:9
9008B	  JCC_1 %bb.53, 5, implicit $eflags, debug-location !383; ep.c:268:9
9024B	  JMP_1 %bb.49, debug-location !383; ep.c:268:9

9040B	bb.49.if.then133:
	; predecessors: %bb.48
	  successors: %bb.51(0x40000000), %bb.50(0x40000000); %bb.51(50.00%), %bb.50(50.00%)

9056B	  %82:vr128 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !384 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
9072B	  %80:fr64 = MOVSDrm_alt %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, debug-location !386 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
9104B	  %82:vr128 = SUBSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !387; ep.c:269:27
9136B	  %82:vr128 = DIVSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !389; ep.c:269:46
9168B	  %84:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg, debug-location !390 :: (load 16 from constant-pool); ep.c:269:18
9200B	  %82:vr128 = PANDrr %82:vr128(tied-def 0), %84:vr128, debug-location !390; ep.c:269:18
9232B	  MOVLPDmr %stack.16.sx_err, 1, $noreg, 0, $noreg, %82:vr128, debug-location !391 :: (store 8 into %ir.sx_err); ep.c:269:16
9248B	  %90:vr128 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !392 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
9264B	  %88:fr64 = MOVSDrm_alt %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, debug-location !393 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
9296B	  %90:vr128 = SUBSDrr %90:vr128(tied-def 0), %88:fr64, debug-location !394; ep.c:270:27
9328B	  %90:vr128 = DIVSDrr %90:vr128(tied-def 0), %88:fr64, debug-location !396; ep.c:270:46
9376B	  %90:vr128 = PANDrr %90:vr128(tied-def 0), %84:vr128, debug-location !397; ep.c:270:18
9392B	  MOVLPDmr %stack.17.sy_err, 1, $noreg, 0, $noreg, %90:vr128, debug-location !398 :: (store 8 into %ir.sy_err); ep.c:270:16
9408B	  %94:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
9424B	  UCOMISDrr %94:fr64, %82:vr128, implicit-def $eflags, debug-location !400; ep.c:271:29
9440B	  JCC_1 %bb.51, 3, implicit $eflags, debug-location !401; ep.c:271:41

9456B	bb.50:
	; predecessors: %bb.49
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

9472B	  %93:gr32temp = MOV32r0 implicit-def dead $eflags
9520B	  JMP_1 %bb.52

9536B	bb.51.land.rhs:
	; predecessors: %bb.49
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

9552B	  %95:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
9568B	  UCOMISDrm %95:fr64, %stack.17.sy_err, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !403 :: (dereferenceable load 8 from %ir.sy_err); ep.c:271:52
9584B	  undef %93.sub_8bit:gr32temp = SETCCr 3, implicit $eflags, debug-location !403; ep.c:271:52

9616B	bb.52.land.end:
	; predecessors: %bb.51, %bb.50
	  successors: %bb.53(0x80000000); %bb.53(100.00%)

9648B	  %96:gr32 = MOVZX32rr8 %93.sub_8bit:gr32temp, debug-location !401; ep.c:271:41
9664B	  MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %96:gr32, debug-location !405 :: (store 4 into %ir.verified); ep.c:271:18

9680B	bb.53.if.end142:
	; predecessors: %bb.48, %bb.52
	  successors: %bb.54(0x80000000); %bb.54(100.00%)

9696B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !407; ep.c:274:12
9712B	  %97:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
9728B	  %98:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
9744B	  $xmm0 = COPY %97:fr64, debug-location !407; ep.c:274:12
9760B	  $xmm1 = COPY %98:fr64, debug-location !407; ep.c:274:12
9776B	  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !407; ep.c:274:12
9792B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !407; ep.c:274:12
9808B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !408; ep.c:274:30
9824B	  PCN_STACKMAP 27, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $r11, debug-location !408 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:274:30
9840B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !408; ep.c:274:30
9856B	  %101:fr64 = COPY $xmm0, debug-location !407; ep.c:274:12
9888B	  %101:fr64 = DIVSDrm %101:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !409 :: (dereferenceable load 8 from %ir.tm); ep.c:274:28
9920B	  %101:fr64 = DIVSDrm %101:fr64(tied-def 0), $rip, 1, $noreg, %const.6, $noreg, debug-location !410 :: (load 8 from constant-pool); ep.c:274:33
9936B	  MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %101:fr64, debug-location !411 :: (store 8 into %ir.Mops); ep.c:274:10
9952B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !412; ep.c:276:5
10016B	  $rdi = LEA64r $rip, 1, $noreg, @ep__str_5__EP_Benchm, $noreg, debug-location !412; ep.c:276:5
10032B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !412; ep.c:276:5
10048B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !412; ep.c:276:5
10064B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !412; ep.c:276:5
10080B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !413; ep.c:277:35
10096B	  PCN_STACKMAP 28, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $r11, debug-location !413 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:277:35
10112B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !413; ep.c:277:35
10128B	  %106:fr64 = MOVSDrm_alt %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !413 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
10144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !414; ep.c:277:5
10192B	  $rdi = LEA64r $rip, 1, $noreg, @ep__str_6_CPU_Time__, $noreg, debug-location !414; ep.c:277:5
10208B	  $xmm0 = COPY %106:fr64, debug-location !414; ep.c:277:5
10224B	  $al = MOV8ri 1, debug-location !414; ep.c:277:5
10240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !414; ep.c:277:5
10256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !414; ep.c:277:5
10272B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !415; ep.c:278:5
10288B	  PCN_STACKMAP 29, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %106:fr64, implicit-def dead early-clobber $r11, debug-location !415 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:278:5
10304B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !415; ep.c:278:5
10320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !415; ep.c:278:5
10368B	  $rdi = LEA64r $rip, 1, $noreg, @ep__str_7_N___2__5d_, $noreg, debug-location !415; ep.c:278:5
10384B	  $esi = MOV32ri 30, debug-location !415; ep.c:278:5
10400B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !415; ep.c:278:5
10416B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !415; ep.c:278:5
10432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !415; ep.c:278:5
10448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !416; ep.c:279:46
10464B	  PCN_STACKMAP 30, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $r11, debug-location !416 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:279:46
10480B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !416; ep.c:279:46
10496B	  %113:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !416 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
10512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !417; ep.c:279:5
10544B	  $rdi = LEA64r $rip, 1, $noreg, @ep__str_8_No__Gaussi, $noreg, debug-location !417; ep.c:279:5
10560B	  $xmm0 = COPY %113:fr64, debug-location !417; ep.c:279:5
10576B	  $al = MOV8ri 1, debug-location !417; ep.c:279:5
10592B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !417; ep.c:279:5
10608B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !417; ep.c:279:5
10624B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !418; ep.c:280:42
10640B	  PCN_STACKMAP 31, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %113:fr64, implicit-def dead early-clobber $r11, debug-location !418 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:280:42
10656B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !418; ep.c:280:42
10672B	  %116:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
10688B	  %117:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !419 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
10704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !420; ep.c:280:5
10752B	  $rdi = LEA64r $rip, 1, $noreg, @ep__str_9_Sums____25, $noreg, debug-location !420; ep.c:280:5
10768B	  $xmm0 = COPY %116:fr64, debug-location !420; ep.c:280:5
10784B	  $xmm1 = COPY %117:fr64, debug-location !420; ep.c:280:5
10800B	  $al = MOV8ri 2, debug-location !420; ep.c:280:5
10816B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !420; ep.c:280:5
10832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !420; ep.c:280:5
10848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !421; ep.c:281:5
10864B	  PCN_STACKMAP 32, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %116:fr64, %117:fr64, implicit-def dead early-clobber $r11, debug-location !421 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:281:5
10880B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !421; ep.c:281:5
10896B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !421; ep.c:281:5
10928B	  $rdi = LEA64r $rip, 1, $noreg, @ep__str_10_Counts____, $noreg, debug-location !421; ep.c:281:5
10944B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !421; ep.c:281:5
10960B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !421; ep.c:281:5
10976B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !421; ep.c:281:5
10992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !422; ep.c:282:12
11008B	  PCN_STACKMAP 33, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $r11, debug-location !422 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:282:12
11024B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !422; ep.c:282:12
11040B	  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !422 :: (store 4 into %ir.i); ep.c:282:12
11056B	  %169:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg

11088B	bb.54.for.cond152:
	; predecessors: %bb.53, %bb.55
	  successors: %bb.55(0x7c000000), %bb.56(0x04000000); %bb.55(96.88%), %bb.56(3.12%)

11104B	  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags, debug-location !427 :: (dereferenceable load 4 from %ir.i); ep.c:282:19
11120B	  JCC_1 %bb.56, 15, implicit $eflags, debug-location !428; ep.c:282:5
11136B	  JMP_1 %bb.55, debug-location !428; ep.c:282:5

11152B	bb.55.for.body155:
	; predecessors: %bb.54
	  successors: %bb.54(0x80000000); %bb.54(100.00%)

11168B	  %167:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
11200B	  %170:fr64 = MOVSDrm_alt %169:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !432 :: (load 8 from %ir.arrayidx157); ep.c:283:35
11216B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !433; ep.c:283:9
11232B	  $rdi = LEA64r $rip, 1, $noreg, @ep__str_11__3d_15_0lf, $noreg, debug-location !433; ep.c:283:9
11248B	  $esi = COPY %167.sub_32bit:gr64_nosp, debug-location !433; ep.c:283:9
11264B	  $xmm0 = COPY %170:fr64, debug-location !433; ep.c:283:9
11280B	  $al = MOV8ri 1, debug-location !433; ep.c:283:9
11296B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !433; ep.c:283:9
11312B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !433; ep.c:283:9
11328B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !434; ep.c:284:5
11344B	  PCN_STACKMAP 34, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %167.sub_32bit:gr64_nosp, %170:fr64, implicit-def dead early-clobber $r11, debug-location !434 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:284:5
11360B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !434; ep.c:284:5
11376B	  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !435 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:282:26
11392B	  JMP_1 %bb.54, debug-location !436; ep.c:282:5

11408B	bb.56.for.end161:
	; predecessors: %bb.54
	  successors: %bb.57(0x50000000), %bb.60(0x30000000); %bb.57(62.50%), %bb.60(37.50%)

11424B	  %125:gr32 = MOV32rm %stack.24.nit, 1, $noreg, 0, $noreg, debug-location !439 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
11440B	  %126:fr64 = MOVSDrm_alt %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !440 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
11456B	  %127:fr64 = MOVSDrm_alt %stack.1.Mops, 1, $noreg, 0, $noreg, debug-location !441 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
11472B	  %128:gr32 = MOV32rm %stack.27.verified, 1, $noreg, 0, $noreg, debug-location !442 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
11488B	  ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !443; ep.c:286:5
11504B	  %129:gr64 = LEA64r $rip, 1, $noreg, @ep__str_22_randdp_, $noreg, debug-location !443; ep.c:286:5
11536B	  MOV64mr $rsp, 1, $noreg, 80, $noreg, %129:gr64, debug-location !443 :: (store 8 into stack + 80); ep.c:286:5
11552B	  %131:gr64 = LEA64r $rip, 1, $noreg, @ep__str_21__O3__mcmod, $noreg, debug-location !443; ep.c:286:5
11568B	  MOV64mr $rsp, 1, $noreg, 72, $noreg, %131:gr64, debug-location !443 :: (store 8 into stack + 72); ep.c:286:5
11584B	  %132:gr64 = LEA64r $rip, 1, $noreg, @ep__str_20__g__Wall__, $noreg, debug-location !443; ep.c:286:5
11600B	  MOV64mr $rsp, 1, $noreg, 64, $noreg, %132:gr64, debug-location !443 :: (store 8 into stack + 64); ep.c:286:5
11616B	  %133:gr64 = LEA64r $rip, 1, $noreg, @ep__str_19__I___commo, $noreg, debug-location !443; ep.c:286:5
11632B	  MOV64mr $rsp, 1, $noreg, 56, $noreg, %133:gr64, debug-location !443 :: (store 8 into stack + 56); ep.c:286:5
11648B	  %134:gr64 = LEA64r $rip, 1, $noreg, @ep__str_18__lm_, $noreg, debug-location !443; ep.c:286:5
11664B	  MOV64mr $rsp, 1, $noreg, 48, $noreg, %134:gr64, debug-location !443 :: (store 8 into stack + 48); ep.c:286:5
11680B	  %135:gr64 = LEA64r $rip, 1, $noreg, @ep__str_17___CC__, $noreg, debug-location !443; ep.c:286:5
11696B	  MOV64mr $rsp, 1, $noreg, 40, $noreg, %135:gr64, debug-location !443 :: (store 8 into stack + 40); ep.c:286:5
11712B	  %136:gr64 = LEA64r $rip, 1, $noreg, @ep__str_16_gcc_, $noreg, debug-location !443; ep.c:286:5
11728B	  MOV64mr $rsp, 1, $noreg, 32, $noreg, %136:gr64, debug-location !443 :: (store 8 into stack + 32); ep.c:286:5
11744B	  %137:gr64 = LEA64r $rip, 1, $noreg, @ep__str_15_03_Nov_201, $noreg, debug-location !443; ep.c:286:5
11760B	  MOV64mr $rsp, 1, $noreg, 24, $noreg, %137:gr64, debug-location !443 :: (store 8 into stack + 24); ep.c:286:5
11776B	  %138:gr64 = LEA64r $rip, 1, $noreg, @ep__str_14_3_3_1_, $noreg, debug-location !443; ep.c:286:5
11792B	  MOV64mr $rsp, 1, $noreg, 16, $noreg, %138:gr64, debug-location !443 :: (store 8 into stack + 16); ep.c:286:5
11808B	  MOV32mr $rsp, 1, $noreg, 8, $noreg, %128:gr32, debug-location !443 :: (store 4 into stack + 8); ep.c:286:5
11824B	  %139:gr64 = LEA64r $rip, 1, $noreg, @ep__str_13_Random_num, $noreg, debug-location !443; ep.c:286:5
11840B	  MOV64mr $rsp, 1, $noreg, 0, $noreg, %139:gr64, debug-location !443 :: (store 8 into stack); ep.c:286:5
11920B	  $rdi = LEA64r $rip, 1, $noreg, @ep__str_12_EP_, $noreg, debug-location !443; ep.c:286:5
11936B	  $esi = MOV32ri 66, debug-location !443; ep.c:286:5
11952B	  $edx = MOV32ri 31, debug-location !443; ep.c:286:5
11968B	  $ecx = MOV32ri 0, debug-location !443; ep.c:286:5
11984B	  $r8d = MOV32r0 implicit-def dead $eflags, debug-location !443; ep.c:286:5
12000B	  $r9d = COPY %125:gr32, debug-location !443; ep.c:286:5
12016B	  $xmm0 = COPY %126:fr64, debug-location !443; ep.c:286:5
12032B	  $xmm1 = COPY %127:fr64, debug-location !443; ep.c:286:5
12048B	  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !443; ep.c:286:5
12064B	  ADJCALLSTACKUP64 88, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !443; ep.c:286:5
12080B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !444; ep.c:290:9
12096B	  PCN_STACKMAP 35, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, %125:gr32, %126:fr64, %127:fr64, %128:gr32, implicit-def dead early-clobber $r11, debug-location !444 :: (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:290:9
12112B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !444; ep.c:290:9
12128B	  CMP32mi %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !444 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:290:9
12144B	  JCC_1 %bb.60, 4, implicit $eflags, debug-location !446; ep.c:290:9
12160B	  JMP_1 %bb.57, debug-location !446; ep.c:290:9

12176B	bb.57.if.then163:
	; predecessors: %bb.56
	  successors: %bb.58(0x40000000), %bb.59(0x40000000); %bb.58(50.00%), %bb.59(50.00%)

12192B	  %144:fr64 = FsFLD0SD
12208B	  UCOMISDrm %144:fr64, %stack.10.tm, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !450 :: (dereferenceable load 8 from %ir.tm); ep.c:291:16
12224B	  JCC_1 %bb.59, 2, implicit $eflags, debug-location !451; ep.c:291:13
12240B	  JMP_1 %bb.58, debug-location !451; ep.c:291:13

12256B	bb.58.if.then166:
	; predecessors: %bb.57
	  successors: %bb.59(0x80000000); %bb.59(100.00%)

12272B	  %145:gr64 = MOV64ri 4607182418800017408
12288B	  MOV64mr %stack.10.tm, 1, $noreg, 0, $noreg, %145:gr64, debug-location !452 :: (store 8 into %ir.tm); ep.c:292:16

12304B	bb.59.if.end167:
	; predecessors: %bb.57, %bb.58
	  successors: %bb.60(0x80000000); %bb.60(100.00%)

12320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !454; ep.c:293:14
12352B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !454; ep.c:293:14
12368B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !454; ep.c:293:14
12384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !454; ep.c:293:14
12400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !455; ep.c:293:12
12416B	  PCN_STACKMAP 36, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, implicit-def dead early-clobber $r11, debug-location !455 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:293:12
12432B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !455; ep.c:293:12
12448B	  %147:fr64 = COPY $xmm0, debug-location !454; ep.c:293:14
12464B	  MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %147:fr64, debug-location !455 :: (store 8 into %ir.tt); ep.c:293:12
12480B	  %163:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)
12496B	  %150:fr64 = COPY %147:fr64, debug-location !458; ep.c:294:62
12512B	  %150:fr64 = MULSDrr %150:fr64(tied-def 0), %163:fr64, debug-location !458; ep.c:294:62
12544B	  %150:fr64 = DIVSDrm %150:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !460 :: (dereferenceable load 8 from %ir.tm); ep.c:294:70
12560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !461; ep.c:294:9
12608B	  $rdi = LEA64r $rip, 1, $noreg, @ep__str_23__Total_tim, $noreg, debug-location !461; ep.c:294:9
12624B	  $xmm0 = COPY %147:fr64, debug-location !461; ep.c:294:9
12640B	  $xmm1 = COPY %150:fr64, debug-location !461; ep.c:294:9
12656B	  $al = MOV8ri 2, debug-location !461; ep.c:294:9
12672B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !461; ep.c:294:9
12688B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !461; ep.c:294:9
12704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !462; ep.c:295:14
12720B	  PCN_STACKMAP 37, 0, %150:fr64, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, %147:fr64, implicit-def dead early-clobber $r11, debug-location !462 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:295:14
12736B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !462; ep.c:295:14
12752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !462; ep.c:295:14
12784B	  $edi = MOV32ri 1, debug-location !462; ep.c:295:14
12800B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !462; ep.c:295:14
12816B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !462; ep.c:295:14
12832B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !463; ep.c:295:12
12848B	  PCN_STACKMAP 38, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, implicit-def dead early-clobber $r11, debug-location !463 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:295:12
12864B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !463; ep.c:295:12
12880B	  %155:fr64 = COPY $xmm0, debug-location !462; ep.c:295:14
12896B	  MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %155:fr64, debug-location !463 :: (store 8 into %ir.tt); ep.c:295:12
12912B	  %157:fr64 = COPY %155:fr64, debug-location !466; ep.c:296:60
12928B	  %157:fr64 = MULSDrr %157:fr64(tied-def 0), %163:fr64, debug-location !466; ep.c:296:60
12960B	  %157:fr64 = DIVSDrm %157:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !468 :: (dereferenceable load 8 from %ir.tm); ep.c:296:68
12976B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !469; ep.c:296:9
13008B	  $rdi = LEA64r $rip, 1, $noreg, @ep__str_24_Gaussian_p, $noreg, debug-location !469; ep.c:296:9
13024B	  $xmm0 = COPY %155:fr64, debug-location !469; ep.c:296:9
13040B	  $xmm1 = COPY %157:fr64, debug-location !469; ep.c:296:9
13056B	  $al = MOV8ri 2, debug-location !469; ep.c:296:9
13072B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !469; ep.c:296:9
13088B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !469; ep.c:296:9
13104B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !470; ep.c:297:14
13120B	  PCN_STACKMAP 39, 0, %157:fr64, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, %155:fr64, implicit-def dead early-clobber $r11, debug-location !470 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:297:14
13136B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !470; ep.c:297:14
13152B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !470; ep.c:297:14
13184B	  $edi = MOV32ri 2, debug-location !470; ep.c:297:14
13200B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !470; ep.c:297:14
13216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !470; ep.c:297:14
13232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !471; ep.c:297:12
13248B	  PCN_STACKMAP 40, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, implicit-def dead early-clobber $r11, debug-location !471 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:297:12
13264B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !471; ep.c:297:12
13280B	  %161:fr64 = COPY $xmm0, debug-location !470; ep.c:297:14
13296B	  MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %161:fr64, debug-location !471 :: (store 8 into %ir.tt); ep.c:297:12
13328B	  %163:fr64 = MULSDrr %163:fr64(tied-def 0), %161:fr64, debug-location !474; ep.c:298:60
13360B	  %163:fr64 = DIVSDrm %163:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !476 :: (dereferenceable load 8 from %ir.tm); ep.c:298:68
13376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !477; ep.c:298:9
13408B	  $rdi = LEA64r $rip, 1, $noreg, @ep__str_25_Random_num, $noreg, debug-location !477; ep.c:298:9
13424B	  $xmm0 = COPY %161:fr64, debug-location !477; ep.c:298:9
13440B	  $xmm1 = COPY %163:fr64, debug-location !477; ep.c:298:9
13456B	  $al = MOV8ri 2, debug-location !477; ep.c:298:9
13472B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !477; ep.c:298:9
13488B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !477; ep.c:298:9
13504B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !478; ep.c:299:5
13520B	  PCN_STACKMAP 41, 0, %163:fr64, %161:fr64, implicit-def dead early-clobber $r11, debug-location !478; ep.c:299:5
13536B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !478; ep.c:299:5

13552B	bb.60.if.end180:
	; predecessors: %bb.56, %bb.59

13584B	  $eax = MOV32r0 implicit-def dead $eflags, debug-location !479; ep.c:301:5
13600B	  RET 0, killed $eax, debug-location !479; ep.c:301:5

# End machine code for function main.

warning: ep.c:127:5: (x86_64-unknown-linux-gnu) Stack transformation: unhandled register RBX across call to vranlc
