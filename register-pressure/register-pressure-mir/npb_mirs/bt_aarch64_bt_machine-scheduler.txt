Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=96, align=16, at location [SP]
  fi#12: size=4, align=4, at location [SP]
  fi#13: size=1, align=4, at location [SP]
  fi#14: size=96, align=16, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: 3.000000e+00, align=8
  cp#1: 0x3EB0C6F7A0B5ED8D, align=8
  cp#2: 3.478800e+03, align=8
  cp#3: -1.765570e+04, align=8
  cp#4: 2.802370e+04, align=8
  cp#5: 1.000000e+02, align=8
Function Live Ins: $w0 in %0, $x1 in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1
  %280:gpr64sp = ADDXri %stack.11.trecs, 0, 0
  %1:gpr64 = COPY $x1
  %0:gpr32 = COPY $w0
  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  STRXui %1:gpr64, %280:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_timer_flag
  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 0, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %5:gpr64 = COPY killed $x8
  STRXui %5:gpr64, %stack.15.fp, 0 :: (store 8 into %ir.fp)
  CBZX %5:gpr64, %bb.2
  B %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %9:gpr32 = MOVi32imm 1
  STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  %10:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_2_total_
  STRXui %10:gpr64, %stack.14.t_names, 1 :: (store 8 into %ir.arrayidx)
  %11:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_3_rhsx_
  STRXui %11:gpr64, %stack.14.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
  %12:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_4_rhsy_
  STRXui %12:gpr64, %stack.14.t_names, 3 :: (store 8 into %ir.arrayidx2)
  %13:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_5_rhsz_
  STRXui %13:gpr64, %stack.14.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
  %14:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_6_rhs_
  STRXui %14:gpr64, %stack.14.t_names, 5 :: (store 8 into %ir.arrayidx4)
  %15:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_7_xsolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_7_xsolve_
  STRXui %15:gpr64, %stack.14.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
  %16:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_8_ysolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_8_ysolve_
  STRXui %16:gpr64, %stack.14.t_names, 7 :: (store 8 into %ir.arrayidx6)
  %17:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_9_zsolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_9_zsolve_
  STRXui %17:gpr64, %stack.14.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
  %18:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_10_redist1_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_10_redist1_
  STRXui %18:gpr64, %stack.14.t_names, 9 :: (store 8 into %ir.arrayidx8)
  %19:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_11_redist2_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_11_redist2_
  STRXui %19:gpr64, %stack.14.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
  %20:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_12_add_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_12_add_
  STRXui %20:gpr64, %stack.14.t_names, 11 :: (store 8 into %ir.arrayidx10)
  %21:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %21:gpr64
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 1, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %21:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.9(0x30000000); %bb.4(62.50%), %bb.9(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_13____NAS_Par, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_13____NAS_Par
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 2, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_14_inputbt_da, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_14_inputbt_da
  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 3, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %27:gpr64 = COPY killed $x8
  STRXui %27:gpr64, %stack.15.fp, 0 :: (store 8 into %ir.fp)
  CBZX %27:gpr64, %bb.9
  B %bb.4

bb.4.if.then15:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_15__Reading_f, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_15__Reading_f
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 4, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %38:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %38:gpr64
  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_16__d_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_16__d_
  $x2 = ADDXri %stack.4.niter, 0, 0
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 5, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %38:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %41:gpr32 = COPY killed $w8
  STRWui %41:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)

bb.5.while.cond:
; predecessors: %bb.4, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %42:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %42:gpr64
  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 6, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %42:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %43:gpr32sp = COPY killed $w8
  dead $wzr = SUBSWri %43:gpr32sp, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.5, implicit killed $nzcv
  B %bb.6

bb.6.while.end:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %45:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %45:gpr64
  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_17__lf_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_17__lf_
  $x2 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 7, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %45:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %48:gpr32 = COPY killed $w8
  STRWui %48:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)

bb.7.while.cond21:
; predecessors: %bb.6, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  %49:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %49:gpr64
  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 8, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %49:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %50:gpr32sp = COPY killed $w8
  dead $wzr = SUBSWri %50:gpr32sp, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.7, implicit killed $nzcv
  B %bb.8

bb.8.while.end25:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %52:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %53:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  %54:gpr64sp = nuw ADDXri %53:gpr64common, 4, 0
  %55:gpr64sp = nuw ADDXri %53:gpr64common, 8, 0
  $x0 = COPY %52:gpr64
  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_18__d_d_d__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_18__d_d_d__
  $x2 = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  $x3 = COPY %54:gpr64sp
  $x4 = COPY %55:gpr64sp
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 9, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %52:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %57:gpr32 = COPY killed $w8
  STRWui %57:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)
  %58:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %58:gpr64
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 10, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %58:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.10

bb.9.if.else28:
; predecessors: %bb.3
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_19__No_input_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_19__No_input_
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 11, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %30:gpr32 = MOVi32imm 200
  STRWui %30:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
  %31:gpr64temp = ADRP target-flags(aarch64-page) @dt
  %32:gpr64 = MOVi64imm 4554169646866313825
  STRXui %32:gpr64, %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  %33:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  %34:gpr64 = MOVi64imm 438086664294
  STRXui %34:gpr64, %33:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  %35:gpr32 = MOVi32imm 102
  STRWui %35:gpr32, %33:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

bb.10.if.end30:
; predecessors: %bb.9, %bb.8
  successors: %bb.13(0x10000000), %bb.11(0x70000000); %bb.13(12.50%), %bb.11(87.50%)

  %62:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  %63:gpr32 = LDRWui %62:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %64:gpr32 = LDRWui %62:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %65:gpr32 = LDRWui %62:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_20__Size___4d, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_20__Size___4d
  $w1 = COPY %63:gpr32
  $w2 = COPY %64:gpr32
  $w3 = COPY %65:gpr32
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 12, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %63:gpr32, %64:gpr32, %65:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %68:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  %69:gpr64temp = ADRP target-flags(aarch64-page) @dt
  %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_21__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_21__Iteration
  $w1 = COPY %68:gpr32
  $d0 = COPY %70:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 13, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %68:gpr32, %70:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_22___, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_22___
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 14, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %75:gpr32common = LDRWui %62:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  dead $wzr = SUBSWri %75:gpr32common, 102, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit killed $nzcv
  B %bb.11

bb.11.if.end30:
; predecessors: %bb.10
  successors: %bb.13(0x12492492), %bb.12(0x6db6db6e); %bb.13(14.29%), %bb.12(85.71%)

  %60:gpr32common = LDRWui %62:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  dead $wzr = SUBSWri %60:gpr32common, 102, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit killed $nzcv
  B %bb.12

bb.12.if.end30:
; predecessors: %bb.11
  successors: %bb.13(0x2aaaaaab), %bb.14(0x55555555); %bb.13(33.33%), %bb.14(66.67%)

  %61:gpr32common = LDRWui %62:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  dead $wzr = SUBSWri %61:gpr32common, 103, 0, implicit-def $nzcv
  Bcc 11, %bb.14, implicit killed $nzcv
  B %bb.13

bb.13.if.then38:
; predecessors: %bb.10, %bb.11, %bb.12
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  %270:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  %271:gpr32 = LDRWui %270:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %272:gpr32 = LDRWui %270:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %273:gpr32 = LDRWui %270:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_23___d___d___, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_23___d___d___
  $w1 = COPY %271:gpr32
  $w2 = COPY %272:gpr32
  $w3 = COPY %273:gpr32
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 15, 0, 0, %stack.0.retval, 0, %271:gpr32, %272:gpr32, %273:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.0.retval, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_24__Problem_s, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_24__Problem_s
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 16, 0, 0, %stack.0.retval, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.0.retval, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  B %bb.45

bb.14.if.end41:
; predecessors: %bb.12
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @set_constants, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 17, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %81:gpr32 = MOVi32imm 1
  STRWui %81:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

bb.15.for.cond:
; predecessors: %bb.14, %bb.16
  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

  %82:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %82:gpr32common, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.17, implicit killed $nzcv
  B %bb.16

bb.16.for.body:
; predecessors: %bb.15
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %267:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %267:gpr32
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 18, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %267:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %268:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %269:gpr32common = nsw ADDWri %268:gpr32common, 1, 0
  STRWui %269:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  B %bb.15

bb.17.for.end:
; predecessors: %bb.15
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @initialize, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 19, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @exact_rhs, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 20, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @adi, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 21, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @initialize, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 22, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %84:gpr32 = MOVi32imm 1
  STRWui %84:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

bb.18.for.cond43:
; predecessors: %bb.17, %bb.19
  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

  %85:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %85:gpr32common, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.20, implicit killed $nzcv
  B %bb.19

bb.19.for.body45:
; predecessors: %bb.18
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %264:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %264:gpr32
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 23, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %264:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %265:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %266:gpr32common = nsw ADDWri %265:gpr32common, 1, 0
  STRWui %266:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  B %bb.18

bb.20.for.end48:
; predecessors: %bb.18
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %87:gpr32 = MOVi32imm 1
  $w0 = MOVi32imm 1
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 24, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRWui %87:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
  undef %248.sub_32:gpr64 = MOVi32imm 1717986919
  %255:gpr32 = MOVi32imm 20

bb.21.for.cond49:
; predecessors: %bb.20, %bb.25
  successors: %bb.22(0x7c000000), %bb.26(0x04000000); %bb.22(96.88%), %bb.26(3.12%)

  %88:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  %89:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  dead $wzr = SUBSWrr %88:gpr32, %89:gpr32, implicit-def $nzcv
  Bcc 12, %bb.26, implicit killed $nzcv
  B %bb.22

bb.22.for.body51:
; predecessors: %bb.21
  successors: %bb.24(0x20000000), %bb.23(0x60000000); %bb.24(25.00%), %bb.23(75.00%)

  %246:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  %249:gpr64 = MADDXrrr %246:gpr64common, %248:gpr64, $xzr
  %250:gpr64 = UBFMXri %249:gpr64, 63, 63
  %252:gpr64 = SBFMXri %249:gpr64, 35, 63
  %254:gpr32 = ADDWrr %252.sub_32:gpr64, %250.sub_32:gpr64
  %257:gpr32 = MSUBWrrr %254:gpr32, %255:gpr32, %246.sub_32:gpr64common
  CBZW %257:gpr32, %bb.24
  B %bb.23

bb.23.for.body51:
; predecessors: %bb.22
  successors: %bb.24(0x2aaaaaab), %bb.25(0x55555555); %bb.24(33.33%), %bb.25(66.67%)

  dead $wzr = SUBSWri %246.sub_32:gpr64common, 1, 0, implicit-def $nzcv
  Bcc 1, %bb.25, implicit killed $nzcv
  B %bb.24

bb.24.if.then55:
; predecessors: %bb.22, %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %259:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_25__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_25__Time_step
  $w1 = COPY %259:gpr32
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 25, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %259:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.25.if.end57:
; predecessors: %bb.23, %bb.24
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @adi, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 26, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %262:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0
  STRWui %263:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)
  B %bb.21

bb.26.for.end60:
; predecessors: %bb.21
  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 1
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 27, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 1
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 28, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %92:fpr64 = COPY killed $d0
  STRDui %92:fpr64, %280:gpr64sp, 14 :: (store 8 into %ir.tmax)
  %93:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %93:gpr32
  $x1 = ADDXri %stack.13.Class, 0, 0
  $x2 = ADDXri %stack.12.verified, 0, 0
  BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit killed $x2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 29, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %93:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %96:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  %97:gpr32 = LDRWui %96:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %98:fpr64 = SCVTFUWDri %97:gpr32
  %99:gpr32 = LDRWui %96:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %100:fpr64 = SCVTFUWDri %99:gpr32
  %101:fpr64 = FMULDrr %98:fpr64, %100:fpr64
  %102:gpr32 = LDRWui %96:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  %103:fpr64 = SCVTFUWDri %102:gpr32
  %104:fpr64 = FMULDrr %101:fpr64, %103:fpr64
  STRDui %104:fpr64, %280:gpr64sp, 15 :: (store 8 into %ir.n3)
  %105:gpr32 = nsw ADDWrr %97:gpr32, %99:gpr32
  %106:gpr32 = nsw ADDWrr %105:gpr32, %102:gpr32
  %107:fpr64 = SCVTFUWDri %106:gpr32
  %108:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  %109:fpr64 = LDRDui %108:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %110:fpr64 = FDIVDrr %107:fpr64, %109:fpr64
  STRDui %110:fpr64, %280:gpr64sp, 17 :: (store 8 into %ir.navg)
  %111:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri %111:fpr64, implicit-def $nzcv
  Bcc 0, %bb.28, implicit killed $nzcv
  B %bb.27

bb.27.if.then70:
; predecessors: %bb.26
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  undef %114.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  %116:fpr128 = SSHLLv2i32_shift %114:fpr64, 0
  %118:fpr64 = SCVTFv1i64 %116.dsub:fpr128
  %119:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  %120:fpr64 = LDRDui %119:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  %121:fpr64 = FMULDrr %118:fpr64, %120:fpr64
  %122:fpr64 = LDRDui %280:gpr64sp, 15 :: (dereferenceable load 8 from %ir.n3)
  %123:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  %124:fpr64 = LDRDui %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  %125:fpr64 = FMULDrr %122:fpr64, %124:fpr64
  %126:fpr64 = LDRDui %280:gpr64sp, 17 :: (dereferenceable load 8 from %ir.navg)
  %127:fpr64 = FMULDrr %126:fpr64, %126:fpr64
  %128:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  %129:fpr64 = LDRDui %128:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  %130:fpr64 = FMULDrr %127:fpr64, %129:fpr64
  %131:fpr64 = FADDDrr %125:fpr64, %130:fpr64
  %132:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  %133:fpr64 = LDRDui %132:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  %134:fpr64 = FMULDrr %126:fpr64, %133:fpr64
  %135:fpr64 = FADDDrr %131:fpr64, %134:fpr64
  %136:fpr64 = FMULDrr %121:fpr64, %135:fpr64
  %137:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  %138:fpr64 = FDIVDrr %136:fpr64, %137:fpr64
  STRDui %138:fpr64, %280:gpr64sp, 16 :: (store 8 into %ir.mflops)
  B %bb.29

bb.28.if.else80:
; predecessors: %bb.26
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  STRXui $xzr, %280:gpr64sp, 16 :: (store 8 into %ir.mflops)

bb.29.if.end81:
; predecessors: %bb.28, %bb.27
  successors: %bb.30(0x50000000), %bb.44(0x30000000); %bb.30(62.50%), %bb.44(37.50%)

  %139:gpr32 = LDRSBWui %stack.13.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  %140:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  %141:gpr32 = LDRWui %140:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %142:gpr32 = LDRWui %140:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %143:gpr32 = LDRWui %140:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  %144:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  %145:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  %146:fpr64 = LDRDui %280:gpr64sp, 16 :: (dereferenceable load 8 from %ir.mflops)
  %147:gpr32 = LDRWui %stack.12.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
  %148:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_36__none__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_36__none__
  STRXui %148:gpr64, $sp, 10 :: (store 8 into stack + 80)
  %150:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_35__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_35__O3__mcmod
  STRXui %150:gpr64, $sp, 9 :: (store 8 into stack + 72)
  %151:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_34__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_34__g__Wall__
  STRXui %151:gpr64, $sp, 8 :: (store 8 into stack + 64)
  %152:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_33__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_33__I___commo
  STRXui %152:gpr64, $sp, 7 :: (store 8 into stack + 56)
  %153:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_32__lm_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_32__lm_
  STRXui %153:gpr64, $sp, 6 :: (store 8 into stack + 48)
  %154:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_31___CC__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_31___CC__
  STRXui %154:gpr64, $sp, 5 :: (store 8 into stack + 40)
  %155:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_30_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_30_gcc_
  STRXui %155:gpr64, $sp, 4 :: (store 8 into stack + 32)
  %156:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_29_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_29_03_Nov_201
  STRXui %156:gpr64, $sp, 3 :: (store 8 into stack + 24)
  %157:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_28_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_28_3_3_1_
  STRXui %157:gpr64, $sp, 2 :: (store 8 into stack + 16)
  STRWui %147:gpr32, $sp, 2 :: (store 4 into stack + 8)
  %158:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_27___________, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_27___________
  STRXui %158:gpr64, $sp, 0 :: (store 8 into stack)
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_26_BT_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_26_BT_
  $w1 = COPY %139:gpr32
  $w2 = COPY %141:gpr32
  $w3 = COPY %142:gpr32
  $w4 = COPY %143:gpr32
  $w5 = COPY %144:gpr32
  $d0 = COPY %145:fpr64
  $d1 = COPY %146:fpr64
  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp
  ADJCALLSTACKUP 88, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 30, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %139:gpr32, %141:gpr32, %142:gpr32, %143:gpr32, %144:gpr32, %145:fpr64, %146:fpr64, %147:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %160:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %161:gpr32 = LDRWui %160:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %161:gpr32, %bb.44
  B %bb.30

bb.30.if.then82:
; predecessors: %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %162:gpr32 = MOVi32imm 1
  STRWui %162:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  %242:gpr64sp = ADDXri %stack.11.trecs, 0, 0

bb.31.for.cond83:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

  %163:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %163:gpr32common, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.33, implicit killed $nzcv
  B %bb.32

bb.32.for.body86:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %239:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %239:gpr32
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 31, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %239:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %240:fpr64 = COPY killed $d0
  %241:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  STRDroX %240:fpr64, %242:gpr64sp, %241:gpr64, 0, 1 :: (store 8 into %ir.arrayidx88)
  %243:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %244:gpr32common = nsw ADDWri %243:gpr32common, 1, 0
  STRWui %244:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  B %bb.31

bb.33.for.end91:
; predecessors: %bb.31
  successors: %bb.34(0x50000000), %bb.35(0x30000000); %bb.34(62.50%), %bb.35(37.50%)

  %165:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri %165:fpr64, implicit-def $nzcv
  Bcc 1, %bb.35, implicit killed $nzcv
  B %bb.34

bb.34.if.then94:
; predecessors: %bb.33
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  %166:gpr64 = MOVi64imm 4607182418800017408
  STRXui %166:gpr64, %280:gpr64sp, 14 :: (store 8 into %ir.tmax)

bb.35.if.end95:
; predecessors: %bb.33, %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_37___SECTION_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_37___SECTION_
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 32, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %169:gpr32 = MOVi32imm 1
  STRWui %169:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  %175:gpr64sp = ADDXri %stack.14.t_names, 0, 0
  %177:gpr64sp = ADDXri %stack.11.trecs, 0, 0
  %179:gpr64temp = ADRP target-flags(aarch64-page) %const.5
  %180:fpr64 = LDRDui %179:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)

bb.36.for.cond97:
; predecessors: %bb.35, %bb.43
  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

  %170:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %170:gpr32common, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.44, implicit killed $nzcv
  B %bb.37

bb.37.for.body100:
; predecessors: %bb.36
  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

  %173:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %174:gpr64 = UBFMXri %173:gpr64, 61, 60
  %176:gpr64 = LDRXroX %175:gpr64sp, %174:gpr64, 0, 0 :: (load 8 from %ir.arrayidx102)
  %178:fpr64 = LDRDroX %177:gpr64sp, %174:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
  %181:fpr64 = FMULDrr %178:fpr64, %180:fpr64
  %182:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  %183:fpr64 = FDIVDrr %181:fpr64, %182:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_38_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_38_____8s__9_
  $x1 = COPY %176:gpr64
  $d0 = COPY %178:fpr64
  $d1 = COPY %183:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 33, 0, %183:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %176:gpr64, %178:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %186:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %186:gpr32common, 5, 0, implicit-def $nzcv
  Bcc 1, %bb.39, implicit killed $nzcv
  B %bb.38

bb.38.if.then112:
; predecessors: %bb.37
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %216:fpr64 = LDRDui %280:gpr64sp, 2 :: (dereferenceable load 8 from %ir.arrayidx113, align 16)
  %217:fpr64 = LDRDui %280:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx114)
  %218:fpr64 = FADDDrr %216:fpr64, %217:fpr64
  %219:fpr64 = LDRDui %280:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
  %220:fpr64 = FADDDrr %218:fpr64, %219:fpr64
  STRDui %220:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
  %223:fpr64 = FMULDrr %220:fpr64, %180:fpr64
  %224:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  %225:fpr64 = FDIVDrr %223:fpr64, %224:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_40_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_40_sub_rhs_
  $d0 = COPY %220:fpr64
  $d1 = COPY %225:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 34, 0, %225:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %220:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %229:fpr64 = LDRDui %280:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx121)
  %230:fpr64 = LDRDui %280:gpr64sp, 13 :: (dereferenceable load 8 from %ir.t)
  %231:fpr64 = FSUBDrr %229:fpr64, %230:fpr64
  STRDui %231:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
  %232:fpr64 = FMULDrr %231:fpr64, %180:fpr64
  %233:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  %234:fpr64 = FDIVDrr %232:fpr64, %233:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_41_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_41_rest_rhs_
  $d0 = COPY %231:fpr64
  $d1 = COPY %234:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 35, 0, %234:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %231:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.43

bb.39.if.else126:
; predecessors: %bb.37
  successors: %bb.40(0x40000000), %bb.41(0x40000000); %bb.40(50.00%), %bb.41(50.00%)

  %188:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %188:gpr32common, 8, 0, implicit-def $nzcv
  Bcc 1, %bb.41, implicit killed $nzcv
  B %bb.40

bb.40.if.then129:
; predecessors: %bb.39
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %203:fpr64 = LDRDui %280:gpr64sp, 8 :: (dereferenceable load 8 from %ir.arrayidx130, align 16)
  %204:fpr64 = LDRDui %280:gpr64sp, 9 :: (dereferenceable load 8 from %ir.arrayidx131)
  %205:fpr64 = FSUBDrr %203:fpr64, %204:fpr64
  %206:fpr64 = LDRDui %280:gpr64sp, 10 :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
  %207:fpr64 = FSUBDrr %205:fpr64, %206:fpr64
  STRDui %207:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
  %210:fpr64 = FMULDrr %207:fpr64, %180:fpr64
  %211:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  %212:fpr64 = FDIVDrr %210:fpr64, %211:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_42_sub_zsol_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_42_sub_zsol_
  $d0 = COPY %207:fpr64
  $d1 = COPY %212:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 36, 0, %212:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %207:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.43

bb.41.if.else138:
; predecessors: %bb.39
  successors: %bb.42(0x40000000), %bb.43(0x40000000); %bb.42(50.00%), %bb.43(50.00%)

  %190:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %190:gpr32common, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.43, implicit killed $nzcv
  B %bb.42

bb.42.if.then141:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %192:fpr64 = LDRDui %280:gpr64sp, 9 :: (dereferenceable load 8 from %ir.arrayidx142)
  %193:fpr64 = LDRDui %280:gpr64sp, 10 :: (dereferenceable load 8 from %ir.arrayidx143, align 16)
  %194:fpr64 = FADDDrr %192:fpr64, %193:fpr64
  STRDui %194:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
  %197:fpr64 = FMULDrr %194:fpr64, %180:fpr64
  %198:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  %199:fpr64 = FDIVDrr %197:fpr64, %198:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_43_redist_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_43_redist_
  $d0 = COPY %194:fpr64
  $d1 = COPY %199:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 37, 0, %199:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %194:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.43.for.inc151:
; predecessors: %bb.41, %bb.42, %bb.40, %bb.38
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  %237:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %238:gpr32common = nsw ADDWri %237:gpr32common, 1, 0
  STRWui %238:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  B %bb.36

bb.44.if.end154:
; predecessors: %bb.29, %bb.36
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)

bb.45.return:
; predecessors: %bb.44, %bb.13

  %279:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
  $w8 = COPY %279:gpr32
  RET_ReallyLR implicit killed $w8

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %5:gpr64 = COPY killed $x8
    To: CBZX %5:gpr64, %bb.2
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:gpr64 = COPY killed $x8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%5
    SU(1): Data Latency=0 Reg=%5
  Single Issue       : false;
SU(1):   STRXui %5:gpr64, %stack.15.fp, 0 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Single Issue       : false;
ExitSU:   CBZX %5:gpr64, %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %5:gpr64, %stack.15.fp, 0 :: (store 8 into %ir.fp)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %5:gpr64 = COPY killed $x8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gpr64 = COPY killed $x8
SU(1):   STRXui %5:gpr64, %stack.15.fp, 0 :: (store 8 into %ir.fp)

********** MI Scheduling **********
main:%bb.0 entry
  From: $x0 = MOVaddr target-flags(aarch64-page) @bt__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_timer_flag
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_timer_flag
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @bt__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @bt__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_timer_flag
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_timer_flag
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_

********** MI Scheduling **********
main:%bb.0 entry
  From: %280:gpr64sp = ADDXri %stack.11.trecs, 0, 0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %280:gpr64sp = ADDXri %stack.11.trecs, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%280
  Single Issue       : false;
SU(1):   %1:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(2):   %0:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(3):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(5):   STRXui %1:gpr64, %280:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%1
    SU(0): Data Latency=1 Reg=%280
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %1:gpr64 = COPY $x1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 2 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %0:gpr32 = COPY $w0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRXui %1:gpr64, %280:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
  Ready @0c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %280:gpr64sp = ADDXri %stack.11.trecs, 0, 0
  Ready @3c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   %1:gpr64 = COPY $x1
SU(2):   %0:gpr32 = COPY $w0
SU(0):   %280:gpr64sp = ADDXri %stack.11.trecs, 0, 0
SU(3):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
SU(4):   STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
SU(5):   STRXui %1:gpr64, %280:gpr64sp, 20 :: (store 8 into %ir.argv.addr)

********** MI Scheduling **********
main:%bb.1 if.then
  From: %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 26
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=2
Live In: 
Live Out: %21 
Live Thru: 
  LiveReg: %21
Top Pressure:

Bottom Pressure:
GPR32=1
Excess PSets: 
Cluster ld/st SU(24) - SU(22)
Cluster ld/st SU(20) - SU(18)
Cluster ld/st SU(16) - SU(14)
Cluster ld/st SU(12) - SU(10)
Cluster ld/st SU(8) - SU(6)
SU(0):   %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%8
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(1):   %9:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%9
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%9
    SU(0): Data Latency=1 Reg=%8
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(3):   %10:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_2_total_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%10
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   STRXui %10:gpr64, %stack.14.t_names, 1 :: (store 8 into %ir.arrayidx)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%10
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   %11:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_3_rhsx_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%11
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   STRXui %11:gpr64, %stack.14.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%11
    SU(8): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_4_rhsy_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%12
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   STRXui %12:gpr64, %stack.14.t_names, 3 :: (store 8 into %ir.arrayidx2)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%12
  Successors:
    SU(6): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_5_rhsz_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=%13
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(10):   STRXui %13:gpr64, %stack.14.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%13
    SU(12): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_6_rhs_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(12): Data Latency=1 Reg=%14
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   STRXui %14:gpr64, %stack.14.t_names, 5 :: (store 8 into %ir.arrayidx4)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%14
  Successors:
    SU(10): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(13):   %15:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_7_xsolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_7_xsolve_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(14): Data Latency=1 Reg=%15
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   STRXui %15:gpr64, %stack.14.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(13): Data Latency=1 Reg=%15
    SU(16): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_8_ysolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_8_ysolve_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(16): Data Latency=1 Reg=%16
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(16):   STRXui %16:gpr64, %stack.14.t_names, 7 :: (store 8 into %ir.arrayidx6)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(15): Data Latency=1 Reg=%16
  Successors:
    SU(14): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(17):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_9_zsolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_9_zsolve_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(18): Data Latency=1 Reg=%17
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(18):   STRXui %17:gpr64, %stack.14.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(17): Data Latency=1 Reg=%17
    SU(20): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(19):   %18:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_10_redist1_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_10_redist1_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%18
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   STRXui %18:gpr64, %stack.14.t_names, 9 :: (store 8 into %ir.arrayidx8)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%18
  Successors:
    SU(18): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_11_redist2_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_11_redist2_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(22): Data Latency=1 Reg=%19
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(22):   STRXui %19:gpr64, %stack.14.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=%19
    SU(24): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(23):   %20:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_12_add_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_12_add_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(24): Data Latency=1 Reg=%20
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(24):   STRXui %20:gpr64, %stack.14.t_names, 11 :: (store 8 into %ir.arrayidx10)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(23): Data Latency=1 Reg=%20
  Successors:
    SU(22): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(25):   %21:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(25): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 
Queue BotQ.A: 24 22 20 18 16 14 12 10 8 6 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 
Picking from Bot:
  Cand SU(24) ORDER                              
  Cand SU(22) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(22) STRXui %19:gpr64, %stack.14.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
Bottom Pressure:
GPR32=2
  LiveReg: %19
  UpdateRegP: SU(22) STRXui %19:gpr64, %stack.14.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
              to 
  Ready @0c
  BotQ.A TopLatency SU(22) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 
Queue BotQ.A: 24 2 20 18 16 14 12 10 8 6 4 21 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 
BotQ.A RemLatency SU(24) 1c
Picking from Bot:
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(24) STRXui %20:gpr64, %stack.14.t_names, 11 :: (store 8 into %ir.arrayidx10)
Bottom Pressure:
GPR32=3
  LiveReg: %20
  UpdateRegP: SU(24) STRXui %20:gpr64, %stack.14.t_names, 11 :: (store 8 into %ir.arrayidx10)
              to 
  Ready @1c
  BotQ.A TopLatency SU(24) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 
Queue BotQ.A: 21 2 20 18 16 14 12 10 8 6 4 23 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(23) %20:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_12_add_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_12_add_
Bottom Pressure:
GPR32=2
  Ready @2c
  BotQ.A BotLatency SU(23) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 2 20 18 16 14 12 10 8 6 4 25 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 25 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 3c > CritPath 3
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(18) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(18) STRXui %17:gpr64, %stack.14.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
Bottom Pressure:
GPR32=3
  LiveReg: %17
  UpdateRegP: SU(18) STRXui %17:gpr64, %stack.14.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
              to 
  Ready @3c
  BotQ.A TopLatency SU(18) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 2 20 25 16 14 12 10 8 6 4 17 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 25 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(20) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(20) STRXui %18:gpr64, %stack.14.t_names, 9 :: (store 8 into %ir.arrayidx8)
Bottom Pressure:
GPR32=4
  LiveReg: %18
  UpdateRegP: SU(20) STRXui %18:gpr64, %stack.14.t_names, 9 :: (store 8 into %ir.arrayidx8)
              to 
  Ready @4c
  BotQ.A TopLatency SU(20) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 2 17 25 16 14 12 10 8 6 4 19 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 25 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(25) %21:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
Bottom Pressure:
GPR32=3
  Ready @5c
  BotQ.A BotLatency SU(25) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 2 17 19 16 14 12 10 8 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 
  BotQ.A RemainingLatency 0 + 6c > CritPath 3
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(14) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(14) STRXui %15:gpr64, %stack.14.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
Bottom Pressure:
GPR32=4
  LiveReg: %15
  UpdateRegP: SU(14) STRXui %15:gpr64, %stack.14.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
              to 
  Ready @6c
  BotQ.A TopLatency SU(14) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 2 17 19 16 4 12 10 8 6 13 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 
  BotQ.A RemainingLatency 0 + 7c > CritPath 3
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(16) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(16) STRXui %16:gpr64, %stack.14.t_names, 7 :: (store 8 into %ir.arrayidx6)
Bottom Pressure:
GPR32=5
  LiveReg: %16
  UpdateRegP: SU(16) STRXui %16:gpr64, %stack.14.t_names, 7 :: (store 8 into %ir.arrayidx6)
              to 
  Ready @7c
  BotQ.A TopLatency SU(16) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 2 17 19 13 4 12 10 8 6 15 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 
  BotQ.A RemainingLatency 0 + 8c > CritPath 3
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(21) %19:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_11_redist2_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_11_redist2_
Bottom Pressure:
GPR32=4
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 17 19 13 4 12 10 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 
  BotQ.A RemainingLatency 0 + 9c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(10) STRXui %13:gpr64, %stack.14.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
Bottom Pressure:
GPR32=5
  LiveReg: %13
  UpdateRegP: SU(10) STRXui %13:gpr64, %stack.14.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
              to 
  Ready @9c
  BotQ.A TopLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 17 19 13 4 12 6 8 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 
  BotQ.A RemainingLatency 0 + 10c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(12) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(12) STRXui %14:gpr64, %stack.14.t_names, 5 :: (store 8 into %ir.arrayidx4)
Bottom Pressure:
GPR32=6
  LiveReg: %14
  UpdateRegP: SU(12) STRXui %14:gpr64, %stack.14.t_names, 5 :: (store 8 into %ir.arrayidx4)
              to 
  Ready @10c
  BotQ.A TopLatency SU(12) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 17 19 13 4 9 6 8 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 
  BotQ.A RemainingLatency 0 + 11c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(19) %18:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_10_redist1_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_10_redist1_
Bottom Pressure:
GPR32=5
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 17 11 13 4 9 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 
  BotQ.A RemainingLatency 0 + 12c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(6) STRXui %11:gpr64, %stack.14.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
Bottom Pressure:
GPR32=6
  LiveReg: %11
  UpdateRegP: SU(6) STRXui %11:gpr64, %stack.14.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
              to 
  Ready @12c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 17 11 13 4 9 8 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 
  BotQ.A RemainingLatency 0 + 13c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(8) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(8) STRXui %12:gpr64, %stack.14.t_names, 3 :: (store 8 into %ir.arrayidx2)
Bottom Pressure:
GPR32=7
  LiveReg: %12
  UpdateRegP: SU(8) STRXui %12:gpr64, %stack.14.t_names, 3 :: (store 8 into %ir.arrayidx2)
              to 
  Ready @13c
  BotQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 17 11 13 4 9 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 
  BotQ.A RemainingLatency 0 + 14c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(17) %17:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_9_zsolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_9_zsolve_
Bottom Pressure:
GPR32=6
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 7 11 13 4 9 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 
  BotQ.A RemainingLatency 0 + 15c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRXui %10:gpr64, %stack.14.t_names, 1 :: (store 8 into %ir.arrayidx)
Bottom Pressure:
GPR32=7
  LiveReg: %10
  UpdateRegP: SU(4) STRXui %10:gpr64, %stack.14.t_names, 1 :: (store 8 into %ir.arrayidx)
              to 
  Ready @15c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 7 11 13 5 9 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 
  BotQ.A RemainingLatency 0 + 16c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %16:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_8_ysolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_8_ysolve_
Bottom Pressure:
GPR32=6
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 7 11 13 5 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 
  BotQ.A RemainingLatency 0 + 17c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %15:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_7_xsolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_7_xsolve_
Bottom Pressure:
GPR32=5
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 7 11 9 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 
  BotQ.A RemainingLatency 0 + 18c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(2) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
Bottom Pressure:
GPR64temp=1
GPR32=7
  LiveReg: %9
  UpdateRegP: SU(2) STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
              to GPR64temp 1    GPR32 1
  LiveReg: %8
  UpdateRegP: SU(2) STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
              to 
  Ready @18c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 7 11 9 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 
  BotQ.A RemainingLatency 0 + 19c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %14:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_6_rhs_
Bottom Pressure:
GPR64temp=1
GPR32=6
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 7 0 9 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 
  BotQ.A RemainingLatency 0 + 20c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %13:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_5_rhsz_
Bottom Pressure:
GPR64temp=1
GPR32=5
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 7 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 
  BotQ.A RemainingLatency 0 + 21c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %12:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_4_rhsy_
Bottom Pressure:
GPR64temp=1
GPR32=4
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  BotQ.A RemainingLatency 0 + 22c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %11:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_3_rhsx_
Bottom Pressure:
GPR64temp=1
GPR32=3
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 23c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %10:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_2_total_
Bottom Pressure:
GPR64temp=1
GPR32=2
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 24c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %9:gpr32 = MOVi32imm 1
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
Bottom Pressure:

  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   %9:gpr32 = MOVi32imm 1
SU(3):   %10:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_2_total_
SU(5):   %11:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_3_rhsx_
SU(7):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_4_rhsy_
SU(9):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_5_rhsz_
SU(11):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_6_rhs_
SU(2):   STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
SU(13):   %15:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_7_xsolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_7_xsolve_
SU(15):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_8_ysolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_8_ysolve_
SU(4):   STRXui %10:gpr64, %stack.14.t_names, 1 :: (store 8 into %ir.arrayidx)
SU(17):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_9_zsolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_9_zsolve_
SU(8):   STRXui %12:gpr64, %stack.14.t_names, 3 :: (store 8 into %ir.arrayidx2)
SU(6):   STRXui %11:gpr64, %stack.14.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
SU(19):   %18:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_10_redist1_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_10_redist1_
SU(12):   STRXui %14:gpr64, %stack.14.t_names, 5 :: (store 8 into %ir.arrayidx4)
SU(10):   STRXui %13:gpr64, %stack.14.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
SU(21):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_11_redist2_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_11_redist2_
SU(16):   STRXui %16:gpr64, %stack.14.t_names, 7 :: (store 8 into %ir.arrayidx6)
SU(14):   STRXui %15:gpr64, %stack.14.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
SU(25):   %21:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
SU(20):   STRXui %18:gpr64, %stack.14.t_names, 9 :: (store 8 into %ir.arrayidx8)
SU(18):   STRXui %17:gpr64, %stack.14.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
SU(23):   %20:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_12_add_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_12_add_
SU(24):   STRXui %20:gpr64, %stack.14.t_names, 11 :: (store 8 into %ir.arrayidx10)
SU(22):   STRXui %19:gpr64, %stack.14.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)

********** MI Scheduling **********
main:%bb.2 if.else
  From: %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%6
  Single Issue       : false;
SU(1):   STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%6
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %27:gpr64 = COPY killed $x8
    To: CBZX %27:gpr64, %bb.9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %27:gpr64 = COPY killed $x8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%27
    SU(1): Data Latency=0 Reg=%27
  Single Issue       : false;
SU(1):   STRXui %27:gpr64, %stack.15.fp, 0 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%27
  Single Issue       : false;
ExitSU:   CBZX %27:gpr64, %bb.9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%27
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %27:gpr64, %stack.15.fp, 0 :: (store 8 into %ir.fp)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %27:gpr64 = COPY killed $x8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %27:gpr64 = COPY killed $x8
SU(1):   STRXui %27:gpr64, %stack.15.fp, 0 :: (store 8 into %ir.fp)

********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = MOVaddr target-flags(aarch64-page) @bt__str_14_inputbt_da, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_14_inputbt_da
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_14_inputbt_da, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_14_inputbt_da
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @bt__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @bt__str_14_inputbt_da, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_14_inputbt_da
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_14_inputbt_da, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_14_inputbt_da
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_

********** MI Scheduling **********
main:%bb.4 if.then15
  From: %41:gpr32 = COPY killed $w8
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %41:gpr32 = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%41
  Single Issue       : false;
SU(1):   STRWui %41:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%41
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %41:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %41:gpr32 = COPY killed $w8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %41:gpr32 = COPY killed $w8
SU(1):   STRWui %41:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.4 if.then15
  From: $x0 = COPY %38:gpr64
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %38:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_16__d_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_16__d_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $x2 = ADDXri %stack.4.niter, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %38:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $x2 = ADDXri %stack.4.niter, 0, 0
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @bt__str_16__d_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_16__d_
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_16__d_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_16__d_
SU(2):   $x2 = ADDXri %stack.4.niter, 0, 0
SU(0):   $x0 = COPY %38:gpr64

********** MI Scheduling **********
main:%bb.5 while.cond
  From: %43:gpr32sp = COPY killed $w8
    To: Bcc 1, %bb.5, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %43:gpr32sp = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%43
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %43:gpr32sp, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%43
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.5, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %43:gpr32sp, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %43:gpr32sp = COPY killed $w8
  Ready @2c
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %43:gpr32sp = COPY killed $w8
SU(1):   dead $wzr = SUBSWri %43:gpr32sp, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.6 while.end
  From: %48:gpr32 = COPY killed $w8
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %48:gpr32 = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%48
  Single Issue       : false;
SU(1):   STRWui %48:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%48
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %48:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %48:gpr32 = COPY killed $w8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %48:gpr32 = COPY killed $w8
SU(1):   STRWui %48:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.6 while.end
  From: $x0 = COPY %45:gpr64
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %45:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_17__lf_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_17__lf_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $x2 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %45:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $x2 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @bt__str_17__lf_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_17__lf_
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_17__lf_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_17__lf_
SU(2):   $x2 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
SU(0):   $x0 = COPY %45:gpr64

********** MI Scheduling **********
main:%bb.7 while.cond21
  From: %50:gpr32sp = COPY killed $w8
    To: Bcc 1, %bb.7, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %50:gpr32sp = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%50
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %50:gpr32sp, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%50
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.7, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %50:gpr32sp, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %50:gpr32sp = COPY killed $w8
  Ready @2c
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %50:gpr32sp = COPY killed $w8
SU(1):   dead $wzr = SUBSWri %50:gpr32sp, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.8 while.end25
  From: %57:gpr32 = COPY killed $w8
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %57:gpr32 = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%57
  Single Issue       : false;
SU(1):   STRWui %57:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%57
  Single Issue       : false;
SU(2):   %58:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %57:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %57:gpr32 = COPY killed $w8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %58:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(2):   %58:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
SU(0):   %57:gpr32 = COPY $w8
SU(1):   STRWui %57:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.8 while.end25
  From: %53:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit-def $sp, implicit-def $w8
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=6
Live In: %52 
Live Out: W8 %52 
Live Thru: GPR32=1
  LiveReg: %52
  UpdateRegP: SU(3) $x0 = COPY %52:gpr64
              to GPR32 -1
Top Pressure:
GPR32=1
Bottom Pressure:
GPR32=6
Excess PSets: 
SU(0):   %53:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%53
    SU(1): Data Latency=1 Reg=%53
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %54:gpr64sp = nuw ADDXri %53:gpr64common, 4, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Data Latency=1 Reg=%53
  Successors:
    SU(6): Data Latency=1 Reg=%54
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %55:gpr64sp = nuw ADDXri %53:gpr64common, 8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Data Latency=1 Reg=%53
  Successors:
    SU(7): Data Latency=1 Reg=%55
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   $x0 = COPY %52:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_18__d_d_d__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_18__d_d_d__
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   $x2 = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   $x3 = COPY %54:gpr64sp
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%54
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   $x4 = COPY %55:gpr64sp
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%55
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit-def $sp, implicit-def $w8
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=0 Artificial
    SU(6): Ord  Latency=0 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 2
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 4 
Queue BotQ.A: 7 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 5 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) $x4 = COPY %55:gpr64sp
Bottom Pressure:
GPR32=6
  LiveReg: %55
  UpdateRegP: SU(7) $x4 = COPY %55:gpr64sp
              to GPR32 -1
  Ready @0c
  BotQ.A TopLatency SU(7) 2c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 4 2 
Queue BotQ.A: 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 5 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(6) $x3 = COPY %54:gpr64sp
Bottom Pressure:
GPR32=6
  LiveReg: %54
  UpdateRegP: SU(6) $x3 = COPY %54:gpr64sp
              to GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 4 2 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) $x0 = COPY %52:gpr64
Bottom Pressure:
GPR32=5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 1 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 5 4 
BotQ.A RemLatency SU(1) 1c
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) $x2 = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
Bottom Pressure:
GPR32=4
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 4 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 2c > CritPath 2
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %55:gpr64sp = nuw ADDXri %53:gpr64common, 8, 0
Bottom Pressure:
GPR32=4
  LiveReg: %53
  UpdateRegP: SU(1) %54:gpr64sp = nuw ADDXri %53:gpr64common, 4, 0
              to GPR32 -1
  UpdateRegP: SU(2) %55:gpr64sp = nuw ADDXri %53:gpr64common, 8, 0
              to GPR32 -1
  Ready @2c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  BotQ.A RemainingLatency 0 + 3c > CritPath 2
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %54:gpr64sp = nuw ADDXri %53:gpr64common, 4, 0
Bottom Pressure:
GPR32=3
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  BotQ.A RemainingLatency 0 + 4c > CritPath 2
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) $x1 = MOVaddr target-flags(aarch64-page) @bt__str_18__d_d_d__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_18__d_d_d__
Bottom Pressure:
GPR32=2
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %53:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
Bottom Pressure:
GPR32=1
  Ready @5c
  BotQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %53:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(4):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_18__d_d_d__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_18__d_d_d__
SU(1):   %54:gpr64sp = nuw ADDXri %53:gpr64common, 4, 0
SU(2):   %55:gpr64sp = nuw ADDXri %53:gpr64common, 8, 0
SU(5):   $x2 = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(3):   $x0 = COPY %52:gpr64
SU(6):   $x3 = COPY %54:gpr64sp
SU(7):   $x4 = COPY %55:gpr64sp

********** MI Scheduling **********
main:%bb.9 if.else28
  From: %30:gpr32 = MOVi32imm 200
    To: End RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %30:gpr32 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%30
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRWui %30:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%30
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %31:gpr64temp = ADRP target-flags(aarch64-page) @dt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%31
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(3):   %32:gpr64 = MOVi64imm 4554169646866313825
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%32
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   STRXui %32:gpr64, %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%32
    SU(2): Data Latency=1 Reg=%31
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(5):   %33:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%33
    SU(7): Data Latency=1 Reg=%33
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %34:gpr64 = MOVi64imm 438086664294
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%34
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %34:gpr64, %33:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%34
    SU(5): Data Latency=1 Reg=%33
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(8):   %35:gpr32 = MOVi32imm 102
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%35
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRWui %35:gpr32, %33:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%35
    SU(5): Data Latency=1 Reg=%33
  Pressure Diff      : GPR32 2
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) STRWui %35:gpr32, %33:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:
GPR32=2
  LiveReg: %35
  UpdateRegP: SU(9) STRWui %35:gpr32, %33:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
              to GPR32 1
  LiveReg: %33
  UpdateRegP: SU(7) STRXui %34:gpr64, %33:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
              to GPR32 1
  UpdateRegP: SU(9) STRWui %35:gpr32, %33:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 4 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(8) %35:gpr32 = MOVi32imm 102
Bottom Pressure:
GPR32=1
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) STRXui %34:gpr64, %33:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
Bottom Pressure:
GPR32=2
  LiveReg: %34
  UpdateRegP: SU(7) STRXui %34:gpr64, %33:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
              to 
  Ready @2c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(6) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %34:gpr64 = MOVi64imm 438086664294
Bottom Pressure:
GPR32=1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(1) STRWui %30:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
Bottom Pressure:
GPR32=2
  LiveReg: %30
  UpdateRegP: SU(1) STRWui %30:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
              to 
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(5) %33:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
Bottom Pressure:
GPR32=1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(0) %30:gpr32 = MOVi32imm 200
Bottom Pressure:

  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRXui %32:gpr64, %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
Bottom Pressure:
GPR64temp=1
GPR32=2
  LiveReg: %32
  UpdateRegP: SU(4) STRXui %32:gpr64, %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
              to GPR64temp 1    GPR32 1
  LiveReg: %31
  UpdateRegP: SU(4) STRXui %32:gpr64, %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
              to 
  Ready @7c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %32:gpr64 = MOVi64imm 4554169646866313825
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %31:gpr64temp = ADRP target-flags(aarch64-page) @dt
Bottom Pressure:

  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(2):   %31:gpr64temp = ADRP target-flags(aarch64-page) @dt
SU(3):   %32:gpr64 = MOVi64imm 4554169646866313825
SU(4):   STRXui %32:gpr64, %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
SU(0):   %30:gpr32 = MOVi32imm 200
SU(5):   %33:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(1):   STRWui %30:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
SU(6):   %34:gpr64 = MOVi64imm 438086664294
SU(7):   STRXui %34:gpr64, %33:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
SU(8):   %35:gpr32 = MOVi32imm 102
SU(9):   STRWui %35:gpr32, %33:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.10 if.end30
  From: %75:gpr32common = LDRWui %62:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
    To: Bcc 12, %bb.13, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %75:gpr32common = LDRWui %62:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%75
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %75:gpr32common, 102, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%75
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.13, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %75:gpr32common, 102, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %75:gpr32common = LDRWui %62:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %75:gpr32common = LDRWui %62:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(1):   dead $wzr = SUBSWri %75:gpr32common, 102, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.10 if.end30
  From: $x0 = MOVaddr target-flags(aarch64-page) @bt__str_21__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_21__Iteration
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_21__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_21__Iteration
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %68:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %70:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %70:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %68:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @bt__str_21__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_21__Iteration
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_21__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_21__Iteration
SU(1):   $w1 = COPY %68:gpr32
SU(2):   $d0 = COPY %70:fpr64

********** MI Scheduling **********
main:%bb.10 if.end30
  From: %68:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %68:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %69:gpr64temp = ADRP target-flags(aarch64-page) @dt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=1 Reg=%69
  Single Issue       : false;
SU(2):   %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%69
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  Ready @3c
  BotQ.A TopLatency SU(2) 1c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %69:gpr64temp = ADRP target-flags(aarch64-page) @dt
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %68:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %68:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(1):   %69:gpr64temp = ADRP target-flags(aarch64-page) @dt
SU(2):   %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)

********** MI Scheduling **********
main:%bb.10 if.end30
  From: $x0 = MOVaddr target-flags(aarch64-page) @bt__str_20__Size___4d, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_20__Size___4d
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_20__Size___4d, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_20__Size___4d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %63:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %64:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w3 = COPY %65:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w3 = COPY %65:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %64:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %63:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @bt__str_20__Size___4d, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_20__Size___4d
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_20__Size___4d, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_20__Size___4d
SU(1):   $w1 = COPY %63:gpr32
SU(2):   $w2 = COPY %64:gpr32
SU(3):   $w3 = COPY %65:gpr32

********** MI Scheduling **********
main:%bb.10 if.end30
  From: %62:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(1) - SU(2)
  Copy Succ SU(4294967295)
SU(0):   %62:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=1 Reg=%62
    SU(2): Data Latency=1 Reg=%62
    SU(1): Data Latency=1 Reg=%62
  Single Issue       : false;
SU(1):   %63:gpr32 = LDRWui %62:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%62
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(2): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(2):   %64:gpr32 = LDRWui %62:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%62
    SU(1): Ord  Latency=0 Cluster
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %65:gpr32 = LDRWui %62:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%62
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %62:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
BotQ.A RemLatency SU(3) 1c
TopQ.A RemLatency SU(3) 3c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot WEAK      
Scheduling SU(3) %65:gpr32 = LDRWui %62:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  BotQ.A TopLatency SU(3) 1c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 1 2 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 4c > CritPath 4
TopQ.A RemLatency SU(1) 3c
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot WEAK      
Scheduling SU(2) %64:gpr32 = LDRWui %62:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @4c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %63:gpr32 = LDRWui %62:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %62:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(1):   %63:gpr32 = LDRWui %62:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(2):   %64:gpr32 = LDRWui %62:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(3):   %65:gpr32 = LDRWui %62:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.11 if.end30
  From: %60:gpr32common = LDRWui %62:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
    To: Bcc 12, %bb.13, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %60:gpr32common = LDRWui %62:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%60
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %60:gpr32common, 102, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%60
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.13, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %60:gpr32common, 102, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %60:gpr32common = LDRWui %62:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %60:gpr32common = LDRWui %62:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(1):   dead $wzr = SUBSWri %60:gpr32common, 102, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.12 if.end30
  From: %61:gpr32common = LDRWui %62:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
    To: Bcc 11, %bb.14, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %61:gpr32common = LDRWui %62:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%61
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %61:gpr32common, 103, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%61
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 11, %bb.14, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %61:gpr32common, 103, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %61:gpr32common = LDRWui %62:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %61:gpr32common = LDRWui %62:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(1):   dead $wzr = SUBSWri %61:gpr32common, 103, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.13 if.then38
  From: $x0 = MOVaddr target-flags(aarch64-page) @bt__str_23___d___d___, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_23___d___d___
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_23___d___d___, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_23___d___d___
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %271:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %272:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w3 = COPY %273:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w3 = COPY %273:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %272:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %271:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @bt__str_23___d___d___, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_23___d___d___
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_23___d___d___, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_23___d___d___
SU(1):   $w1 = COPY %271:gpr32
SU(2):   $w2 = COPY %272:gpr32
SU(3):   $w3 = COPY %273:gpr32

********** MI Scheduling **********
main:%bb.13 if.then38
  From: %270:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(1) - SU(2)
  Copy Succ SU(4294967295)
SU(0):   %270:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=1 Reg=%270
    SU(2): Data Latency=1 Reg=%270
    SU(1): Data Latency=1 Reg=%270
  Single Issue       : false;
SU(1):   %271:gpr32 = LDRWui %270:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%270
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(2): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(2):   %272:gpr32 = LDRWui %270:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%270
    SU(1): Ord  Latency=0 Cluster
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %273:gpr32 = LDRWui %270:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%270
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %270:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
BotQ.A RemLatency SU(3) 1c
TopQ.A RemLatency SU(3) 3c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot WEAK      
Scheduling SU(3) %273:gpr32 = LDRWui %270:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  BotQ.A TopLatency SU(3) 1c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 1 2 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 4c > CritPath 4
TopQ.A RemLatency SU(1) 3c
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot WEAK      
Scheduling SU(2) %272:gpr32 = LDRWui %270:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @4c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %271:gpr32 = LDRWui %270:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %270:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(1):   %271:gpr32 = LDRWui %270:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(2):   %272:gpr32 = LDRWui %270:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(3):   %273:gpr32 = LDRWui %270:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.14 if.end41
  From: %81:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %81:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%81
  Single Issue       : false;
SU(1):   STRWui %81:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%81
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %81:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %81:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %81:gpr32 = MOVi32imm 1
SU(1):   STRWui %81:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.15 for.cond
  From: %82:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.17, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %82:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%82
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %82:gpr32common, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%82
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.17, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %82:gpr32common, 11, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %82:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %82:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %82:gpr32common, 11, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.16 for.body
  From: %268:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.15
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %268:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%268
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %269:gpr32common = nsw ADDWri %268:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%268
  Successors:
    SU(2): Data Latency=1 Reg=%269
  Single Issue       : false;
SU(2):   STRWui %269:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%269
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %269:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %269:gpr32common = nsw ADDWri %268:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %268:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %268:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %269:gpr32common = nsw ADDWri %268:gpr32common, 1, 0
SU(2):   STRWui %269:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.17 for.end
  From: %84:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %84:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%84
  Single Issue       : false;
SU(1):   STRWui %84:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%84
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %84:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %84:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %84:gpr32 = MOVi32imm 1
SU(1):   STRWui %84:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.18 for.cond43
  From: %85:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.20, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %85:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%85
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %85:gpr32common, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%85
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.20, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %85:gpr32common, 11, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %85:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %85:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %85:gpr32common, 11, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.19 for.body45
  From: %265:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.18
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %265:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%265
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %266:gpr32common = nsw ADDWri %265:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%265
  Successors:
    SU(2): Data Latency=1 Reg=%266
  Single Issue       : false;
SU(2):   STRWui %266:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%266
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.18
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %266:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %266:gpr32common = nsw ADDWri %265:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %265:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %265:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %266:gpr32common = nsw ADDWri %265:gpr32common, 1, 0
SU(2):   STRWui %266:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.20 for.end48
  From: STRWui %87:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui %87:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   undef %248.sub_32:gpr64 = MOVi32imm 1717986919
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %255:gpr32 = MOVi32imm 20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %255:gpr32 = MOVi32imm 20
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) undef %248.sub_32:gpr64 = MOVi32imm 1717986919
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui %87:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   STRWui %87:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
SU(1):   undef %248.sub_32:gpr64 = MOVi32imm 1717986919
SU(2):   %255:gpr32 = MOVi32imm 20

********** MI Scheduling **********
main:%bb.20 for.end48
  From: %87:gpr32 = MOVi32imm 1
    To: BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %87:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $w0 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %87:gpr32 = MOVi32imm 1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w0 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(1):   $w0 = MOVi32imm 1
SU(0):   %87:gpr32 = MOVi32imm 1

********** MI Scheduling **********
main:%bb.21 for.cond49
  From: %88:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 12, %bb.26, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %88:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%88
  Single Issue       : false;
SU(1):   %89:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%89
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %88:gpr32, %89:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%89
    SU(0): Data Latency=4 Reg=%88
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.26, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %88:gpr32, %89:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %89:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %88:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %88:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %89:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(2):   dead $wzr = SUBSWrr %88:gpr32, %89:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.22 for.body51
  From: %246:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: CBZW %257:gpr32, %bb.24
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %246:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Data Latency=4 Reg=%246
    SU(1): Data Latency=4 Reg=%246
  Single Issue       : false;
SU(1):   %249:gpr64 = MADDXrrr %246:gpr64common, %248:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%246
  Successors:
    SU(3): Data Latency=1 Reg=%249
    SU(2): Data Latency=1 Reg=%249
  Single Issue       : false;
SU(2):   %250:gpr64 = UBFMXri %249:gpr64, 63, 63
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%249
  Successors:
    SU(4): Data Latency=1 Reg=%250
  Single Issue       : false;
SU(3):   %252:gpr64 = SBFMXri %249:gpr64, 35, 63
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%249
  Successors:
    SU(4): Data Latency=1 Reg=%252
  Single Issue       : false;
SU(4):   %254:gpr32 = ADDWrr %252.sub_32:gpr64, %250.sub_32:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%252
    SU(2): Data Latency=1 Reg=%250
  Successors:
    SU(5): Data Latency=1 Reg=%254
  Single Issue       : false;
SU(5):   %257:gpr32 = MSUBWrrr %254:gpr32, %255:gpr32, %246.sub_32:gpr64common
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%254
    SU(0): Data Latency=4 Reg=%246
  Successors:
    ExitSU: Data Latency=1 Reg=%257
  Single Issue       : false;
ExitSU:   CBZW %257:gpr32, %bb.24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%257
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %257:gpr32 = MSUBWrrr %254:gpr32, %255:gpr32, %246.sub_32:gpr64common
  Ready @1c
  BotQ.A TopLatency SU(5) 7c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %254:gpr32 = ADDWrr %252.sub_32:gpr64, %250.sub_32:gpr64
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %246:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %249:gpr64 = MADDXrrr %246:gpr64common, %248:gpr64, $xzr
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
BotQ.A RemLatency SU(3) 5c
TopQ.A RemLatency SU(3) 3c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %252:gpr64 = SBFMXri %249:gpr64, 35, 63
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %250:gpr64 = UBFMXri %249:gpr64, 63, 63
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %246:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %249:gpr64 = MADDXrrr %246:gpr64common, %248:gpr64, $xzr
SU(2):   %250:gpr64 = UBFMXri %249:gpr64, 63, 63
SU(3):   %252:gpr64 = SBFMXri %249:gpr64, 35, 63
SU(4):   %254:gpr32 = ADDWrr %252.sub_32:gpr64, %250.sub_32:gpr64
SU(5):   %257:gpr32 = MSUBWrrr %254:gpr32, %255:gpr32, %246.sub_32:gpr64common

********** MI Scheduling **********
main:%bb.24 if.then55
  From: $x0 = MOVaddr target-flags(aarch64-page) @bt__str_25__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_25__Time_step
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_25__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_25__Time_step
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %259:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %259:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @bt__str_25__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_25__Time_step
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_25__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_25__Time_step
SU(1):   $w1 = COPY %259:gpr32

********** MI Scheduling **********
main:%bb.25 if.end57
  From: %262:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: B %bb.21
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %262:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%262
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%262
  Successors:
    SU(2): Data Latency=1 Reg=%263
  Single Issue       : false;
SU(2):   STRWui %263:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%263
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %263:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %262:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %262:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0
SU(2):   STRWui %263:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)

********** MI Scheduling **********
main:%bb.26 for.end60
  From: %96:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
    To: Bcc 0, %bb.28, implicit killed $nzcv
 RegionInstrs: 19
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: %280 
Live Out: %280 
Live Thru: GPR32=1
  LiveReg: %280
  UpdateRegP: SU(9) STRDui %104:fpr64, %280:gpr64sp, 15 :: (store 8 into %ir.n3)
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  UpdateRegP: SU(16) STRDui %110:fpr64, %280:gpr64sp, 17 :: (store 8 into %ir.navg)
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  UpdateRegP: SU(17) %111:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
GPR32=1
Bottom Pressure:
GPR32=1
Excess PSets: 
Cluster ld/st SU(1) - SU(3)
  Copy Succ SU(10)
  Copy Succ SU(2)
SU(0):   %96:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
    SU(6): Data Latency=1 Reg=%96
    SU(3): Data Latency=1 Reg=%96
    SU(1): Data Latency=1 Reg=%96
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %97:gpr32 = LDRWui %96:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 1
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 8
  Predecessors:
    SU(0): Data Latency=1 Reg=%96
  Successors:
    SU(10): Data Latency=4 Reg=%97
    SU(2): Data Latency=4 Reg=%97
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %98:fpr64 = SCVTFUWDri %97:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%97
    SU(3): Ord  Latency=0 Artificial
  Successors:
    SU(5): Data Latency=1 Reg=%98
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(3):   %99:gpr32 = LDRWui %96:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 8
  Predecessors:
    SU(0): Data Latency=1 Reg=%96
    SU(1): Ord  Latency=0 Cluster
  Successors:
    SU(10): Data Latency=4 Reg=%99
    SU(4): Data Latency=4 Reg=%99
    SU(2): Ord  Latency=0 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %100:fpr64 = SCVTFUWDri %99:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%99
  Successors:
    SU(5): Data Latency=1 Reg=%100
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(5):   %101:fpr64 = FMULDrr %98:fpr64, %100:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%100
    SU(2): Data Latency=1 Reg=%98
  Successors:
    SU(8): Data Latency=1 Reg=%101
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %102:gpr32 = LDRWui %96:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(0): Data Latency=1 Reg=%96
  Successors:
    SU(11): Data Latency=4 Reg=%102
    SU(7): Data Latency=4 Reg=%102
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %103:fpr64 = SCVTFUWDri %102:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(6): Data Latency=4 Reg=%102
  Successors:
    SU(8): Data Latency=1 Reg=%103
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %104:fpr64 = FMULDrr %101:fpr64, %103:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%101
    SU(7): Data Latency=1 Reg=%103
  Successors:
    SU(9): Data Latency=1 Reg=%104
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(9):   STRDui %104:fpr64, %280:gpr64sp, 15 :: (store 8 into %ir.n3)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%104
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(10):   %105:gpr32 = nsw ADDWrr %97:gpr32, %99:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Data Latency=4 Reg=%99
    SU(1): Data Latency=4 Reg=%97
  Successors:
    SU(11): Data Latency=1 Reg=%105
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   %106:gpr32 = nsw ADDWrr %105:gpr32, %102:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(10): Data Latency=1 Reg=%105
    SU(6): Data Latency=4 Reg=%102
  Successors:
    SU(12): Data Latency=1 Reg=%106
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %107:fpr64 = SCVTFUWDri %106:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 2
  Predecessors:
    SU(11): Data Latency=1 Reg=%106
  Successors:
    SU(15): Data Latency=1 Reg=%107
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(13):   %108:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(14): Data Latency=1 Reg=%108
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(14):   %109:fpr64 = LDRDui %108:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(13): Data Latency=1 Reg=%108
  Successors:
    SU(15): Data Latency=4 Reg=%109
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(15):   %110:fpr64 = FDIVDrr %107:fpr64, %109:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(12): Data Latency=1 Reg=%107
    SU(14): Data Latency=4 Reg=%109
  Successors:
    SU(16): Data Latency=1 Reg=%110
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(16):   STRDui %110:fpr64, %280:gpr64sp, 17 :: (store 8 into %ir.navg)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(15): Data Latency=1 Reg=%110
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(17):   %111:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(18): Data Latency=4 Reg=%111
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(18):   FCMPDri %111:fpr64, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(17): Data Latency=4 Reg=%111
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.28, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(18): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 18 
Queue BotQ.A: 16 9 
Queue TopQ.P: 
Queue TopQ.A: 0 13 17 
Picking from Bot:
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) STRDui %110:fpr64, %280:gpr64sp, 17 :: (store 8 into %ir.navg)
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %110
  UpdateRegP: SU(16) STRDui %110:fpr64, %280:gpr64sp, 17 :: (store 8 into %ir.navg)
              to 
  Ready @0c
  BotQ.A TopLatency SU(16) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 15 18 
Queue TopQ.P: 
Queue TopQ.A: 0 13 17 
BotQ.A RemLatency SU(9) 8c
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(18) FCMPDri %111:fpr64, implicit-def $nzcv
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %111
  UpdateRegP: SU(18) FCMPDri %111:fpr64, implicit-def $nzcv
              to 
  Ready @1c
  BotQ.A BotLatency SU(18) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 
Queue BotQ.A: 9 15 
Queue TopQ.P: 
Queue TopQ.A: 0 13 17 
BotQ.A RemLatency SU(9) 8c
  BotQ.A RemainingLatency 8 + 2c > CritPath 9
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(15) %110:fpr64 = FDIVDrr %107:fpr64, %109:fpr64
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %107
  UpdateRegP: SU(15) %110:fpr64 = FDIVDrr %107:fpr64, %109:fpr64
              to 
  LiveReg: %109
  UpdateRegP: SU(15) %110:fpr64 = FDIVDrr %107:fpr64, %109:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A TopLatency SU(15) 8c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 14 
Queue BotQ.A: 9 12 
Queue TopQ.P: 
Queue TopQ.A: 0 13 17 
BotQ.A RemLatency SU(9) 8c
BotQ.A RemLatency SU(14) 1c
  BotQ.A RemainingLatency 8 + 3c > CritPath 9
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(12) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(12) %107:fpr64 = SCVTFUWDri %106:gpr32
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %106
  UpdateRegP: SU(12) %107:fpr64 = SCVTFUWDri %106:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(12) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 14 
Queue BotQ.A: 9 11 
Queue TopQ.P: 
Queue TopQ.A: 0 13 17 
BotQ.A RemLatency SU(9) 8c
BotQ.A RemLatency SU(14) 1c
  BotQ.A RemainingLatency 8 + 4c > CritPath 9
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) STRDui %104:fpr64, %280:gpr64sp, 15 :: (store 8 into %ir.n3)
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %104
  UpdateRegP: SU(9) STRDui %104:fpr64, %280:gpr64sp, 15 :: (store 8 into %ir.n3)
              to 
  Ready @4c
  BotQ.A TopLatency SU(9) 8c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 11 8 17 
Queue TopQ.P: 
Queue TopQ.A: 0 13 17 
BotQ.A RemLatency SU(8) 7c
BotQ.A RemLatency SU(14) 1c
  BotQ.A RemainingLatency 7 + 5c > CritPath 9
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(11) %106:gpr32 = nsw ADDWrr %105:gpr32, %102:gpr32
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %105
  UpdateRegP: SU(11) %106:gpr32 = nsw ADDWrr %105:gpr32, %102:gpr32
              to 
  LiveReg: %102
  UpdateRegP: SU(7) %103:fpr64 = SCVTFUWDri %102:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(11) %106:gpr32 = nsw ADDWrr %105:gpr32, %102:gpr32
              to GPR32 -1
  Ready @5c
  BotQ.A BotLatency SU(11) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 8 10 14 
Queue TopQ.P: 
Queue TopQ.A: 0 13 17 
BotQ.A RemLatency SU(8) 7c
  BotQ.A RemainingLatency 7 + 6c > CritPath 9
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(10) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %105:gpr32 = nsw ADDWrr %97:gpr32, %99:gpr32
Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %97
  UpdateRegP: SU(2) %98:fpr64 = SCVTFUWDri %97:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(10) %105:gpr32 = nsw ADDWrr %97:gpr32, %99:gpr32
              to 
  LiveReg: %99
  UpdateRegP: SU(4) %100:fpr64 = SCVTFUWDri %99:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(10) %105:gpr32 = nsw ADDWrr %97:gpr32, %99:gpr32
              to GPR32 -1
  Ready @6c
  BotQ.A BotLatency SU(10) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 8 14 
Queue TopQ.P: 
Queue TopQ.A: 0 13 17 
BotQ.A RemLatency SU(8) 7c
  BotQ.A RemainingLatency 7 + 7c > CritPath 9
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(17) %111:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @7c
  BotQ.A BotLatency SU(17) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 8 
Queue TopQ.P: 
Queue TopQ.A: 0 13 
BotQ.A RemLatency SU(8) 7c
  BotQ.A RemainingLatency 7 + 8c > CritPath 9
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(8) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(8) %104:fpr64 = FMULDrr %101:fpr64, %103:fpr64
Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %101
  UpdateRegP: SU(8) %104:fpr64 = FMULDrr %101:fpr64, %103:fpr64
              to 
  LiveReg: %103
  UpdateRegP: SU(8) %104:fpr64 = FMULDrr %101:fpr64, %103:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @8c
  BotQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 13 
BotQ.A RemLatency SU(5) 6c
  BotQ.A RemainingLatency 6 + 9c > CritPath 9
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(7) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) %103:fpr64 = SCVTFUWDri %102:gpr32
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 14 5 
Queue TopQ.P: 
Queue TopQ.A: 0 13 
  BotQ.A RemainingLatency 0 + 10c > CritPath 9
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(5) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(5) %101:fpr64 = FMULDrr %98:fpr64, %100:fpr64
Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %98
  UpdateRegP: SU(5) %101:fpr64 = FMULDrr %98:fpr64, %100:fpr64
              to 
  LiveReg: %100
  UpdateRegP: SU(5) %101:fpr64 = FMULDrr %98:fpr64, %100:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @10c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 14 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 13 
  BotQ.A RemainingLatency 0 + 11c > CritPath 9
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(4) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(4) %100:fpr64 = SCVTFUWDri %99:gpr32
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 14 2 
Queue TopQ.P: 
Queue TopQ.A: 0 13 
  BotQ.A RemainingLatency 0 + 12c > CritPath 9
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(2) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(2) %98:fpr64 = SCVTFUWDri %97:gpr32
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @12c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 
Queue BotQ.A: 14 6 
Queue TopQ.P: 
Queue TopQ.A: 0 13 
  BotQ.A RemainingLatency 0 + 13c > CritPath 9
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(6) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %102:gpr32 = LDRWui %96:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %96
  UpdateRegP: SU(1) %97:gpr32 = LDRWui %96:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
              to GPR32 -1
  UpdateRegP: SU(3) %99:gpr32 = LDRWui %96:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
              to GPR32 -1
  UpdateRegP: SU(6) %102:gpr32 = LDRWui %96:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(6) 7c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 
Queue BotQ.A: 14 
Pick Bot ONLY1     
Scheduling SU(14) %109:fpr64 = LDRDui %108:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
GPR32=5
  LiveReg: %108
  UpdateRegP: SU(14) %109:fpr64 = LDRDui %108:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 13 3 
Queue TopQ.P: 
Queue TopQ.A: 0 13 
  BotQ.A RemainingLatency 0 + 15c > CritPath 9
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(3) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %99:gpr32 = LDRWui %96:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
Bottom Pressure:
GPR64temp=1
GPR32=4
  Ready @15c
  BotQ.A BotLatency SU(3) 8c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 1 
Queue TopQ.P: 
Queue TopQ.A: 0 13 
  BotQ.A RemainingLatency 0 + 16c > CritPath 9
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(1) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(1) %97:gpr32 = LDRWui %96:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
Bottom Pressure:
GPR64temp=1
GPR32=3
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 0 
Queue TopQ.P: 
Queue TopQ.A: 0 13 
  BotQ.A RemainingLatency 0 + 17c > CritPath 9
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %108:gpr64temp = ADRP target-flags(aarch64-page) %const.0
Bottom Pressure:
GPR32=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %96:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
Bottom Pressure:
GPR32=1
  Ready @18c
  BotQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %96:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(13):   %108:gpr64temp = ADRP target-flags(aarch64-page) %const.0
SU(1):   %97:gpr32 = LDRWui %96:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(3):   %99:gpr32 = LDRWui %96:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(14):   %109:fpr64 = LDRDui %108:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(6):   %102:gpr32 = LDRWui %96:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(2):   %98:fpr64 = SCVTFUWDri %97:gpr32
SU(4):   %100:fpr64 = SCVTFUWDri %99:gpr32
SU(5):   %101:fpr64 = FMULDrr %98:fpr64, %100:fpr64
SU(7):   %103:fpr64 = SCVTFUWDri %102:gpr32
SU(8):   %104:fpr64 = FMULDrr %101:fpr64, %103:fpr64
SU(17):   %111:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(10):   %105:gpr32 = nsw ADDWrr %97:gpr32, %99:gpr32
SU(11):   %106:gpr32 = nsw ADDWrr %105:gpr32, %102:gpr32
SU(9):   STRDui %104:fpr64, %280:gpr64sp, 15 :: (store 8 into %ir.n3)
SU(12):   %107:fpr64 = SCVTFUWDri %106:gpr32
SU(15):   %110:fpr64 = FDIVDrr %107:fpr64, %109:fpr64
SU(18):   FCMPDri %111:fpr64, implicit-def $nzcv
SU(16):   STRDui %110:fpr64, %280:gpr64sp, 17 :: (store 8 into %ir.navg)

********** MI Scheduling **********
main:%bb.26 for.end60
  From: $w0 = COPY %93:gpr32
    To: BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit killed $x2, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $w0 = COPY %93:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.13.Class, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $x2 = ADDXri %stack.12.verified, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit killed $x2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $w0 = COPY %93:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $x2 = ADDXri %stack.12.verified, 0, 0
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = ADDXri %stack.13.Class, 0, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(1):   $x1 = ADDXri %stack.13.Class, 0, 0
SU(2):   $x2 = ADDXri %stack.12.verified, 0, 0
SU(0):   $w0 = COPY %93:gpr32

********** MI Scheduling **********
main:%bb.26 for.end60
  From: %92:fpr64 = COPY killed $d0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %92:fpr64 = COPY killed $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%92
  Single Issue       : false;
SU(1):   STRDui %92:fpr64, %280:gpr64sp, 14 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%92
  Single Issue       : false;
SU(2):   %93:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %92:fpr64, %280:gpr64sp, 14 :: (store 8 into %ir.tmax)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %92:fpr64 = COPY killed $d0
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %93:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(2):   %93:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(0):   %92:fpr64 = COPY $d0
SU(1):   STRDui %92:fpr64, %280:gpr64sp, 14 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.27 if.then70
  From: undef %114.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
    To: B %bb.29
 RegionInstrs: 24
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=5
GPR32=2
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
Live In: %280 
Live Out: %280 
Live Thru: GPR32=1
  LiveReg: %280
  UpdateRegP: SU(6) %122:fpr64 = LDRDui %280:gpr64sp, 15 :: (dereferenceable load 8 from %ir.n3)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(10) %126:fpr64 = LDRDui %280:gpr64sp, 17 :: (dereferenceable load 8 from %ir.navg)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(21) %137:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(23) STRDui %138:fpr64, %280:gpr64sp, 16 :: (store 8 into %ir.mflops)
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
Top Pressure:
GPR32=1
Bottom Pressure:
GPR32=1
Excess PSets: 
Cluster ld/st SU(21) - SU(6)
  Copy Succ SU(22)
SU(0):   undef %114.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%114
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %116:fpr128 = SSHLLv2i32_shift %114:fpr64, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%114
  Successors:
    SU(2): Data Latency=1 Reg=%116
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %118:fpr64 = SCVTFv1i64 %116.dsub:fpr128
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%116
  Successors:
    SU(5): Data Latency=1 Reg=%118
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %119:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=1 Reg=%119
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(4):   %120:fpr64 = LDRDui %119:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(3): Data Latency=1 Reg=%119
  Successors:
    SU(5): Data Latency=4 Reg=%120
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(5):   %121:fpr64 = FMULDrr %118:fpr64, %120:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=%118
    SU(4): Data Latency=4 Reg=%120
  Successors:
    SU(20): Data Latency=1 Reg=%121
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %122:fpr64 = LDRDui %280:gpr64sp, 15 :: (dereferenceable load 8 from %ir.n3)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Predecessors:
    SU(21): Ord  Latency=0 Cluster
  Successors:
    SU(9): Data Latency=4 Reg=%122
    SU(22): Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %123:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(8): Data Latency=1 Reg=%123
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(8):   %124:fpr64 = LDRDui %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 9
  Predecessors:
    SU(7): Data Latency=1 Reg=%123
  Successors:
    SU(9): Data Latency=4 Reg=%124
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(9):   %125:fpr64 = FMULDrr %122:fpr64, %124:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(8): Data Latency=4 Reg=%124
    SU(6): Data Latency=4 Reg=%122
  Successors:
    SU(15): Data Latency=1 Reg=%125
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(10):   %126:fpr64 = LDRDui %280:gpr64sp, 17 :: (dereferenceable load 8 from %ir.navg)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(18): Data Latency=4 Reg=%126
    SU(11): Data Latency=4 Reg=%126
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(11):   %127:fpr64 = FMULDrr %126:fpr64, %126:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(10): Data Latency=4 Reg=%126
  Successors:
    SU(14): Data Latency=1 Reg=%127
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %128:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(13): Data Latency=1 Reg=%128
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(13):   %129:fpr64 = LDRDui %128:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 9
  Predecessors:
    SU(12): Data Latency=1 Reg=%128
  Successors:
    SU(14): Data Latency=4 Reg=%129
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(14):   %130:fpr64 = FMULDrr %127:fpr64, %129:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(11): Data Latency=1 Reg=%127
    SU(13): Data Latency=4 Reg=%129
  Successors:
    SU(15): Data Latency=1 Reg=%130
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(15):   %131:fpr64 = FADDDrr %125:fpr64, %130:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(14): Data Latency=1 Reg=%130
    SU(9): Data Latency=1 Reg=%125
  Successors:
    SU(19): Data Latency=1 Reg=%131
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(16):   %132:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
    SU(17): Data Latency=1 Reg=%132
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(17):   %133:fpr64 = LDRDui %132:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 8
  Predecessors:
    SU(16): Data Latency=1 Reg=%132
  Successors:
    SU(18): Data Latency=4 Reg=%133
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(18):   %134:fpr64 = FMULDrr %126:fpr64, %133:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(17): Data Latency=4 Reg=%133
    SU(10): Data Latency=4 Reg=%126
  Successors:
    SU(19): Data Latency=1 Reg=%134
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(19):   %135:fpr64 = FADDDrr %131:fpr64, %134:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 3
  Predecessors:
    SU(15): Data Latency=1 Reg=%131
    SU(18): Data Latency=1 Reg=%134
  Successors:
    SU(20): Data Latency=1 Reg=%135
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(20):   %136:fpr64 = FMULDrr %121:fpr64, %135:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(19): Data Latency=1 Reg=%135
    SU(5): Data Latency=1 Reg=%121
  Successors:
    SU(22): Data Latency=1 Reg=%136
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(21):   %137:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(22): Data Latency=4 Reg=%137
    SU(6): Ord  Latency=0 Cluster
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(22):   %138:fpr64 = FDIVDrr %136:fpr64, %137:fpr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(20): Data Latency=1 Reg=%136
    SU(21): Data Latency=4 Reg=%137
    SU(6): Ord  Latency=0 Artificial
  Successors:
    SU(23): Data Latency=1 Reg=%138
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(23):   STRDui %138:fpr64, %280:gpr64sp, 16 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(22): Data Latency=1 Reg=%138
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   B %bb.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 
Pick Bot ONLY1     
Scheduling SU(23) STRDui %138:fpr64, %280:gpr64sp, 16 :: (store 8 into %ir.mflops)
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %138
  UpdateRegP: SU(23) STRDui %138:fpr64, %280:gpr64sp, 16 :: (store 8 into %ir.mflops)
              to 
  Ready @0c
  BotQ.A TopLatency SU(23) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 
Pick Bot ONLY1     
Scheduling SU(22) %138:fpr64 = FDIVDrr %136:fpr64, %137:fpr64
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %136
  UpdateRegP: SU(22) %138:fpr64 = FDIVDrr %136:fpr64, %137:fpr64
              to 
  LiveReg: %137
  UpdateRegP: SU(22) %138:fpr64 = FDIVDrr %136:fpr64, %137:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @1c
  BotQ.A BotLatency SU(22) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 
Pick Bot ONLY1     
Scheduling SU(20) %136:fpr64 = FMULDrr %121:fpr64, %135:fpr64
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %121
  UpdateRegP: SU(20) %136:fpr64 = FMULDrr %121:fpr64, %135:fpr64
              to 
  LiveReg: %135
  UpdateRegP: SU(20) %136:fpr64 = FMULDrr %121:fpr64, %135:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(20) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 19 5 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 12 16 21 
BotQ.A RemLatency SU(19) 7c
Picking from Bot:
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %135:fpr64 = FADDDrr %131:fpr64, %134:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %131
  UpdateRegP: SU(19) %135:fpr64 = FADDDrr %131:fpr64, %134:fpr64
              to 
  LiveReg: %134
  UpdateRegP: SU(19) %135:fpr64 = FADDDrr %131:fpr64, %134:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(19) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 5 15 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 12 16 21 
BotQ.A RemLatency SU(5) 6c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(18) %134:fpr64 = FMULDrr %126:fpr64, %133:fpr64
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %126
  UpdateRegP: SU(11) %127:fpr64 = FMULDrr %126:fpr64, %126:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(18) %134:fpr64 = FMULDrr %126:fpr64, %133:fpr64
              to 
  LiveReg: %133
  UpdateRegP: SU(18) %134:fpr64 = FMULDrr %126:fpr64, %133:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @4c
  BotQ.A BotLatency SU(18) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 
Queue BotQ.A: 5 15 21 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 12 16 21 
BotQ.A RemLatency SU(5) 6c
BotQ.A RemLatency SU(17) 1c
  BotQ.A RemainingLatency 6 + 5c > CritPath 10
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(15) %131:fpr64 = FADDDrr %125:fpr64, %130:fpr64
Bottom Pressure:
FPR8=6
GPR32=1
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %125
  UpdateRegP: SU(15) %131:fpr64 = FADDDrr %125:fpr64, %130:fpr64
              to 
  LiveReg: %130
  UpdateRegP: SU(15) %131:fpr64 = FADDDrr %125:fpr64, %130:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A TopLatency SU(15) 6c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 
Queue BotQ.A: 5 21 14 9 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 12 16 21 
BotQ.A RemLatency SU(5) 6c
BotQ.A RemLatency SU(17) 1c
  BotQ.A RemainingLatency 6 + 6c > CritPath 10
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(5) %121:fpr64 = FMULDrr %118:fpr64, %120:fpr64
Bottom Pressure:
FPR8=7
GPR32=1
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  LiveReg: %118
  UpdateRegP: SU(5) %121:fpr64 = FMULDrr %118:fpr64, %120:fpr64
              to 
  LiveReg: %120
  UpdateRegP: SU(5) %121:fpr64 = FMULDrr %118:fpr64, %120:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 4 
Queue BotQ.A: 9 21 14 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 12 16 21 
BotQ.A RemLatency SU(9) 5c
BotQ.A RemLatency SU(17) 1c
  BotQ.A RemainingLatency 5 + 7c > CritPath 10
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(2) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(2) %118:fpr64 = SCVTFv1i64 %116.dsub:fpr128
Bottom Pressure:
FPR8=7
GPR32=1
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  LiveReg: %116
  UpdateRegP: SU(2) %118:fpr64 = SCVTFv1i64 %116.dsub:fpr128
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 9 21 14 1 17 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 12 16 21 
BotQ.A RemLatency SU(9) 5c
BotQ.A RemLatency SU(4) 1c
  BotQ.A RemainingLatency 5 + 8c > CritPath 10
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(1) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(1) %116:fpr128 = SSHLLv2i32_shift %114:fpr64, 0
Bottom Pressure:
FPR8=7
GPR32=1
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  LiveReg: %114
  UpdateRegP: SU(1) %116:fpr128 = SSHLLv2i32_shift %114:fpr64, 0
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @8c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 0 
Queue BotQ.A: 9 21 14 17 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 12 16 21 
BotQ.A RemLatency SU(9) 5c
BotQ.A RemLatency SU(4) 1c
  BotQ.A RemainingLatency 5 + 9c > CritPath 10
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(17) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(17) %133:fpr64 = LDRDui %132:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=6
GPR32=2
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %132
  UpdateRegP: SU(17) %133:fpr64 = LDRDui %132:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @9c
  BotQ.A BotLatency SU(17) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 9 21 14 16 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 12 16 21 
BotQ.A RemLatency SU(9) 5c
  BotQ.A RemainingLatency 5 + 10c > CritPath 10
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(14) %130:fpr64 = FMULDrr %127:fpr64, %129:fpr64
Bottom Pressure:
GPR64temp=1
FPR8=7
GPR32=2
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  LiveReg: %127
  UpdateRegP: SU(14) %130:fpr64 = FMULDrr %127:fpr64, %129:fpr64
              to 
  LiveReg: %129
  UpdateRegP: SU(14) %130:fpr64 = FMULDrr %127:fpr64, %129:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @10c
  BotQ.A TopLatency SU(14) 5c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 13 
Queue BotQ.A: 9 21 4 16 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 12 16 21 
  BotQ.A RemainingLatency 0 + 11c > CritPath 10
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(11) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) %127:fpr64 = FMULDrr %126:fpr64, %126:fpr64
Bottom Pressure:
GPR64temp=1
FPR8=6
GPR32=2
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 13 
Queue BotQ.A: 9 21 4 16 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 12 16 21 
  BotQ.A RemainingLatency 0 + 12c > CritPath 10
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(9) %125:fpr64 = FMULDrr %122:fpr64, %124:fpr64
Bottom Pressure:
GPR64temp=1
FPR8=7
GPR32=2
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  LiveReg: %122
  UpdateRegP: SU(9) %125:fpr64 = FMULDrr %122:fpr64, %124:fpr64
              to 
  LiveReg: %124
  UpdateRegP: SU(9) %125:fpr64 = FMULDrr %122:fpr64, %124:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @12c
  BotQ.A TopLatency SU(9) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 13 8 6 
Queue BotQ.A: 0 21 4 16 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 12 16 21 
  BotQ.A RemainingLatency 0 + 13c > CritPath 10
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %132:gpr64temp = ADRP target-flags(aarch64-page) %const.4
Bottom Pressure:
FPR8=7
GPR32=1
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  Ready @13c
  BotQ.A BotLatency SU(16) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 6 8 
Queue BotQ.A: 0 21 4 13 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 12 21 
  BotQ.A RemainingLatency 0 + 14c > CritPath 10
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %129:fpr64 = LDRDui %128:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=6
GPR32=2
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %128
  UpdateRegP: SU(13) %129:fpr64 = LDRDui %128:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 6 
Queue BotQ.A: 0 21 4 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 12 21 
  BotQ.A RemainingLatency 0 + 15c > CritPath 10
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %128:gpr64temp = ADRP target-flags(aarch64-page) %const.3
Bottom Pressure:
FPR8=6
GPR32=1
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  Ready @15c
  BotQ.A BotLatency SU(12) 10c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 21 4 10 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 21 
  BotQ.A RemainingLatency 0 + 16c > CritPath 10
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %124:fpr64 = LDRDui %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=5
GPR32=2
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %123
  UpdateRegP: SU(8) %124:fpr64 = LDRDui %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 21 4 10 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 10 21 
  BotQ.A RemainingLatency 0 + 17c > CritPath 10
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %126:fpr64 = LDRDui %280:gpr64sp, 17 :: (dereferenceable load 8 from %ir.navg)
Bottom Pressure:
GPR64temp=1
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 21 4 7 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 7 21 
  BotQ.A RemainingLatency 0 + 18c > CritPath 10
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %123:gpr64temp = ADRP target-flags(aarch64-page) %const.2
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 21 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 21 
  BotQ.A RemainingLatency 0 + 19c > CritPath 10
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %120:fpr64 = LDRDui %119:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %119
  UpdateRegP: SU(4) %120:fpr64 = LDRDui %119:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @19c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 21 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 21 
  BotQ.A RemainingLatency 0 + 20c > CritPath 10
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %122:fpr64 = LDRDui %280:gpr64sp, 15 :: (dereferenceable load 8 from %ir.n3)
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 21 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 21 
  BotQ.A RemainingLatency 0 + 21c > CritPath 10
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(21) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(21) %137:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 22c > CritPath 10
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %119:gpr64temp = ADRP target-flags(aarch64-page) %const.1
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) undef %114.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
Bottom Pressure:
GPR32=1
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   undef %114.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(3):   %119:gpr64temp = ADRP target-flags(aarch64-page) %const.1
SU(21):   %137:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(6):   %122:fpr64 = LDRDui %280:gpr64sp, 15 :: (dereferenceable load 8 from %ir.n3)
SU(4):   %120:fpr64 = LDRDui %119:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(7):   %123:gpr64temp = ADRP target-flags(aarch64-page) %const.2
SU(10):   %126:fpr64 = LDRDui %280:gpr64sp, 17 :: (dereferenceable load 8 from %ir.navg)
SU(8):   %124:fpr64 = LDRDui %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(12):   %128:gpr64temp = ADRP target-flags(aarch64-page) %const.3
SU(13):   %129:fpr64 = LDRDui %128:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(16):   %132:gpr64temp = ADRP target-flags(aarch64-page) %const.4
SU(9):   %125:fpr64 = FMULDrr %122:fpr64, %124:fpr64
SU(11):   %127:fpr64 = FMULDrr %126:fpr64, %126:fpr64
SU(14):   %130:fpr64 = FMULDrr %127:fpr64, %129:fpr64
SU(17):   %133:fpr64 = LDRDui %132:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(1):   %116:fpr128 = SSHLLv2i32_shift %114:fpr64, 0
SU(2):   %118:fpr64 = SCVTFv1i64 %116.dsub:fpr128
SU(5):   %121:fpr64 = FMULDrr %118:fpr64, %120:fpr64
SU(15):   %131:fpr64 = FADDDrr %125:fpr64, %130:fpr64
SU(18):   %134:fpr64 = FMULDrr %126:fpr64, %133:fpr64
SU(19):   %135:fpr64 = FADDDrr %131:fpr64, %134:fpr64
SU(20):   %136:fpr64 = FMULDrr %121:fpr64, %135:fpr64
SU(22):   %138:fpr64 = FDIVDrr %136:fpr64, %137:fpr64
SU(23):   STRDui %138:fpr64, %280:gpr64sp, 16 :: (store 8 into %ir.mflops)

********** MI Scheduling **********
main:%bb.29 if.end81
  From: %160:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: CBZW %161:gpr32, %bb.44
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %160:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%160
  Single Issue       : false;
SU(1):   %161:gpr32 = LDRWui %160:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%160
  Successors:
    ExitSU: Data Latency=4 Reg=%161
  Single Issue       : false;
ExitSU:   CBZW %161:gpr32, %bb.44
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%161
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %161:gpr32 = LDRWui %160:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %160:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %160:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   %161:gpr32 = LDRWui %160:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.29 if.end81
  From: %148:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_36__none__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_36__none__
    To: BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp
 RegionInstrs: 29
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=12
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %146 %145 %144 %143 %142 %141 %139 %147 
Live Out: %146 %145 %144 %143 %142 %141 %139 %147 
Live Thru: FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %146
  UpdateRegP: SU(28) $d1 = COPY %146:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %145
  UpdateRegP: SU(27) $d0 = COPY %145:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %144
  UpdateRegP: SU(26) $w5 = COPY %144:gpr32
              to GPR32 -1
  LiveReg: %143
  UpdateRegP: SU(25) $w4 = COPY %143:gpr32
              to GPR32 -1
  LiveReg: %142
  UpdateRegP: SU(24) $w3 = COPY %142:gpr32
              to GPR32 -1
  LiveReg: %141
  UpdateRegP: SU(23) $w2 = COPY %141:gpr32
              to GPR32 -1
  LiveReg: %139
  UpdateRegP: SU(22) $w1 = COPY %139:gpr32
              to GPR32 -1
  LiveReg: %147
  UpdateRegP: SU(18) STRWui %147:gpr32, $sp, 2 :: (store 4 into stack + 8)
              to 
Top Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Bottom Pressure:
FPR8=4
GPR32=12
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Excess PSets: 
Cluster ld/st SU(17) - SU(15)
Cluster ld/st SU(13) - SU(11)
Cluster ld/st SU(9) - SU(7)
Cluster ld/st SU(5) - SU(3)
SU(0):   %148:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_36__none__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_36__none__
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%148
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %148:gpr64, $sp, 10 :: (store 8 into stack + 80)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%148
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %150:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_35__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_35__O3__mcmod
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%150
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %150:gpr64, $sp, 9 :: (store 8 into stack + 72)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%150
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %151:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_34__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_34__g__Wall__
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%151
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %151:gpr64, $sp, 8 :: (store 8 into stack + 64)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%151
  Successors:
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %152:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_33__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_33__I___commo
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%152
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %152:gpr64, $sp, 7 :: (store 8 into stack + 56)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%152
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %153:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_32__lm_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_32__lm_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%153
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %153:gpr64, $sp, 6 :: (store 8 into stack + 48)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%153
  Successors:
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %154:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_31___CC__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_31___CC__
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%154
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %154:gpr64, $sp, 5 :: (store 8 into stack + 40)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%154
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %155:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_30_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_30_gcc_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%155
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %155:gpr64, $sp, 4 :: (store 8 into stack + 32)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%155
  Successors:
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %156:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_29_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_29_03_Nov_201
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%156
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %156:gpr64, $sp, 3 :: (store 8 into stack + 24)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%156
    SU(17): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %157:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_28_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_28_3_3_1_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%157
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRXui %157:gpr64, $sp, 2 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%157
  Successors:
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   STRWui %147:gpr32, $sp, 2 :: (store 4 into stack + 8)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %158:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_27___________, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_27___________
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%158
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   STRXui %158:gpr64, $sp, 0 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%158
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_26_BT_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_26_BT_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(22):   $w1 = COPY %139:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(23):   $w2 = COPY %141:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(24):   $w3 = COPY %142:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(25):   $w4 = COPY %143:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(26):   $w5 = COPY %144:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(27):   $d0 = COPY %145:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(28):   $d1 = COPY %146:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
ExitSU:   BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=0 Artificial
    SU(22): Ord  Latency=0 Artificial
    SU(21): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 28 27 26 25 24 23 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 28 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(28) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(28) $d1 = COPY %146:fpr64
Bottom Pressure:
FPR8=3
GPR32=12
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 27 26 25 24 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(22) PHYS-REG                           
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(27) $d0 = COPY %145:fpr64
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 23 26 25 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(26) $w5 = COPY %144:gpr32
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 23 24 25 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(25) $w4 = COPY %143:gpr32
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 23 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(24) $w3 = COPY %142:gpr32
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(23) $w2 = COPY %141:gpr32
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(22) $w1 = COPY %139:gpr32
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(20) STRXui %158:gpr64, $sp, 0 :: (store 8 into stack)
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %158
  UpdateRegP: SU(20) STRXui %158:gpr64, $sp, 0 :: (store 8 into stack)
              to 
  Ready @0c
  BotQ.A TopLatency SU(20) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(15) STRXui %156:gpr64, $sp, 3 :: (store 8 into stack + 24)
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %156
  UpdateRegP: SU(15) STRXui %156:gpr64, $sp, 3 :: (store 8 into stack + 24)
              to 
  Ready @1c
  BotQ.A TopLatency SU(15) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 21 13 11 9 7 5 3 19 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(17) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(17) STRXui %157:gpr64, $sp, 2 :: (store 8 into stack + 16)
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %157
  UpdateRegP: SU(17) STRXui %157:gpr64, $sp, 2 :: (store 8 into stack + 16)
              to 
  Ready @2c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 13 11 9 7 5 3 19 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(11) STRXui %154:gpr64, $sp, 5 :: (store 8 into stack + 40)
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %154
  UpdateRegP: SU(11) STRXui %154:gpr64, $sp, 5 :: (store 8 into stack + 40)
              to 
  Ready @3c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 13 16 9 7 5 3 19 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(13) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(13) STRXui %155:gpr64, $sp, 4 :: (store 8 into stack + 32)
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %155
  UpdateRegP: SU(13) STRXui %155:gpr64, $sp, 4 :: (store 8 into stack + 32)
              to 
  Ready @4c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 10 16 9 7 5 3 19 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(21) $x0 = MOVaddr target-flags(aarch64-page) @bt__str_26_BT_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_26_BT_
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @5c
  BotQ.A BotLatency SU(21) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 9 7 5 3 19 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(7) STRXui %152:gpr64, $sp, 7 :: (store 8 into stack + 56)
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %152
  UpdateRegP: SU(7) STRXui %152:gpr64, $sp, 7 :: (store 8 into stack + 56)
              to 
  Ready @6c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 9 19 5 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(9) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(9) STRXui %153:gpr64, $sp, 6 :: (store 8 into stack + 48)
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 13 <= 15(+ 6 livethru)
  LiveReg: %153
  UpdateRegP: SU(9) STRXui %153:gpr64, $sp, 6 :: (store 8 into stack + 48)
              to 
  Ready @7c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 19 5 3 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(19) %158:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_27___________, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_27___________
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 13 <= 15(+ 6 livethru)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXui %150:gpr64, $sp, 9 :: (store 8 into stack + 72)
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 13 <= 15(+ 6 livethru)
  LiveReg: %150
  UpdateRegP: SU(3) STRXui %150:gpr64, $sp, 9 :: (store 8 into stack + 72)
              to 
  Ready @9c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(5) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(5) STRXui %151:gpr64, $sp, 8 :: (store 8 into stack + 64)
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %151
  UpdateRegP: SU(5) STRXui %151:gpr64, $sp, 8 :: (store 8 into stack + 64)
              to 
  Ready @10c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(18) STRWui %147:gpr32, $sp, 2 :: (store 4 into stack + 8)
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 14 12 10 16 6 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %157:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_28_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_28_3_3_1_
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 14 12 10 2 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %148:gpr64, $sp, 10 :: (store 8 into stack + 80)
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %148
  UpdateRegP: SU(1) STRXui %148:gpr64, $sp, 10 :: (store 8 into stack + 80)
              to 
  Ready @13c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 14 12 10 2 6 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %156:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_29_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_29_03_Nov_201
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 12 10 2 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %155:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_30_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_30_gcc_
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 6 10 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %154:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_31___CC__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_31___CC__
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 17c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %153:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_32__lm_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_32__lm_
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 0 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 18c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %152:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_33__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_33__I___commo
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 19c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %151:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_34__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_34__g__Wall__
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 20c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %150:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_35__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_35__O3__mcmod
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %148:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_36__none__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_36__none__
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %148:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_36__none__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_36__none__
SU(2):   %150:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_35__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_35__O3__mcmod
SU(4):   %151:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_34__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_34__g__Wall__
SU(6):   %152:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_33__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_33__I___commo
SU(8):   %153:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_32__lm_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_32__lm_
SU(10):   %154:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_31___CC__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_31___CC__
SU(12):   %155:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_30_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_30_gcc_
SU(14):   %156:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_29_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_29_03_Nov_201
SU(1):   STRXui %148:gpr64, $sp, 10 :: (store 8 into stack + 80)
SU(16):   %157:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_28_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_28_3_3_1_
SU(18):   STRWui %147:gpr32, $sp, 2 :: (store 4 into stack + 8)
SU(5):   STRXui %151:gpr64, $sp, 8 :: (store 8 into stack + 64)
SU(3):   STRXui %150:gpr64, $sp, 9 :: (store 8 into stack + 72)
SU(19):   %158:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_27___________, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_27___________
SU(9):   STRXui %153:gpr64, $sp, 6 :: (store 8 into stack + 48)
SU(7):   STRXui %152:gpr64, $sp, 7 :: (store 8 into stack + 56)
SU(21):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_26_BT_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_26_BT_
SU(13):   STRXui %155:gpr64, $sp, 4 :: (store 8 into stack + 32)
SU(11):   STRXui %154:gpr64, $sp, 5 :: (store 8 into stack + 40)
SU(17):   STRXui %157:gpr64, $sp, 2 :: (store 8 into stack + 16)
SU(15):   STRXui %156:gpr64, $sp, 3 :: (store 8 into stack + 24)
SU(20):   STRXui %158:gpr64, $sp, 0 :: (store 8 into stack)
SU(22):   $w1 = COPY %139:gpr32
SU(23):   $w2 = COPY %141:gpr32
SU(24):   $w3 = COPY %142:gpr32
SU(25):   $w4 = COPY %143:gpr32
SU(26):   $w5 = COPY %144:gpr32
SU(27):   $d0 = COPY %145:fpr64
SU(28):   $d1 = COPY %146:fpr64

********** MI Scheduling **********
main:%bb.29 if.end81
  From: %139:gpr32 = LDRSBWui %stack.13.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
    To: ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: %280 
Live Out: %147 %146 %280 %145 %144 %143 %142 %141 %139 
Live Thru: GPR32=1
  LiveReg: %147
  LiveReg: %146
  LiveReg: %280
  UpdateRegP: SU(6) %145:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(7) %146:fpr64 = LDRDui %280:gpr64sp, 16 :: (dereferenceable load 8 from %ir.mflops)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %145
  LiveReg: %144
  LiveReg: %143
  LiveReg: %142
  LiveReg: %141
  LiveReg: %139
Top Pressure:
GPR32=1
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Excess PSets: 
Cluster ld/st SU(2) - SU(3)
  Copy Succ SU(4294967295)
SU(0):   %139:gpr32 = LDRSBWui %stack.13.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %140:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=1 Reg=%140
    SU(3): Data Latency=1 Reg=%140
    SU(2): Data Latency=1 Reg=%140
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %141:gpr32 = LDRWui %140:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%140
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %142:gpr32 = LDRWui %140:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%140
    SU(2): Ord  Latency=0 Cluster
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %143:gpr32 = LDRWui %140:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%140
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %144:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %145:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %146:fpr64 = LDRDui %280:gpr64sp, 16 :: (dereferenceable load 8 from %ir.mflops)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %147:gpr32 = LDRWui %stack.12.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 0 2 3 4 5 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 7 8 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(8) %147:gpr32 = LDRWui %stack.12.verified, 0 :: (dereferenceable load 4 from %ir.verified)
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @3c
  BotQ.A BotLatency SU(8) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 2 3 4 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 7 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 4c > CritPath 4
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(3) BOT-PATH                  1 cycles 
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %143:gpr32 = LDRWui %140:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %140
  UpdateRegP: SU(2) %141:gpr32 = LDRWui %140:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
              to GPR32 -1
  UpdateRegP: SU(3) %142:gpr32 = LDRWui %140:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
              to GPR32 -1
  UpdateRegP: SU(4) %143:gpr32 = LDRWui %140:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
              to GPR32 -1
  Ready @4c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 2 3 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 7 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(3) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %142:gpr32 = LDRWui %140:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @5c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 2 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 7 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(2) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(2) %141:gpr32 = LDRWui %140:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 6 5 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 7 
  BotQ.A RemainingLatency 0 + 7c > CritPath 4
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %146:fpr64 = LDRDui %280:gpr64sp, 16 :: (dereferenceable load 8 from %ir.mflops)
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 
  BotQ.A RemainingLatency 0 + 8c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %145:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
GPR32=4
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
  BotQ.A RemainingLatency 0 + 9c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %144:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
Bottom Pressure:
GPR32=3
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 10c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %140:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
Bottom Pressure:
GPR32=2
  Ready @10c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %139:gpr32 = LDRSBWui %stack.13.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
Bottom Pressure:
GPR32=1
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %139:gpr32 = LDRSBWui %stack.13.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
SU(1):   %140:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(5):   %144:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(6):   %145:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(7):   %146:fpr64 = LDRDui %280:gpr64sp, 16 :: (dereferenceable load 8 from %ir.mflops)
SU(2):   %141:gpr32 = LDRWui %140:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(3):   %142:gpr32 = LDRWui %140:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(4):   %143:gpr32 = LDRWui %140:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(8):   %147:gpr32 = LDRWui %stack.12.verified, 0 :: (dereferenceable load 4 from %ir.verified)

********** MI Scheduling **********
main:%bb.30 if.then82
  From: %162:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %162:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%162
  Single Issue       : false;
SU(1):   STRWui %162:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%162
  Single Issue       : false;
SU(2):   %242:gpr64sp = ADDXri %stack.11.trecs, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %242:gpr64sp = ADDXri %stack.11.trecs, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %162:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %162:gpr32 = MOVi32imm 1
  Ready @2c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %162:gpr32 = MOVi32imm 1
SU(1):   STRWui %162:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
SU(2):   %242:gpr64sp = ADDXri %stack.11.trecs, 0, 0

********** MI Scheduling **********
main:%bb.31 for.cond83
  From: %163:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.33, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %163:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%163
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %163:gpr32common, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%163
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.33, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %163:gpr32common, 11, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %163:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %163:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %163:gpr32common, 11, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.32 for.body86
  From: %240:fpr64 = COPY $d0
    To: B %bb.31
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(1) - SU(3)
  Copy Succ SU(2)
  Copy Succ SU(5)
SU(0):   %240:fpr64 = COPY $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%240
  Single Issue       : false;
SU(1):   %241:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%241
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(2):   STRDroX %240:fpr64, %242:gpr64sp, %241:gpr64, 0, 1 :: (store 8 into %ir.arrayidx88)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%241
    SU(0): Data Latency=0 Reg=%240
    SU(3): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   %243:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(1): Ord  Latency=0 Cluster
  Successors:
    SU(4): Data Latency=4 Reg=%243
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   %244:gpr32common = nsw ADDWri %243:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%243
  Successors:
    SU(5): Data Latency=1 Reg=%244
  Single Issue       : false;
SU(5):   STRWui %244:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%244
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.31
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %240:fpr64 = COPY $d0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot ORDER     
Scheduling SU(5) STRWui %244:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %244:gpr32common = nsw ADDWri %243:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDroX %240:fpr64, %242:gpr64sp, %241:gpr64, 0, 1 :: (store 8 into %ir.arrayidx88)
  Ready @2c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %243:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %241:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %240:fpr64 = COPY $d0
SU(1):   %241:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(3):   %243:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(2):   STRDroX %240:fpr64, %242:gpr64sp, %241:gpr64, 0, 1 :: (store 8 into %ir.arrayidx88)
SU(4):   %244:gpr32common = nsw ADDWri %243:gpr32common, 1, 0
SU(5):   STRWui %244:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.33 for.end91
  From: %165:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
    To: Bcc 1, %bb.35, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %165:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%165
  Single Issue       : false;
SU(1):   FCMPDri %165:fpr64, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%165
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.35, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) FCMPDri %165:fpr64, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %165:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %165:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   FCMPDri %165:fpr64, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.34 if.then94
  From: %166:gpr64 = MOVi64imm 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %166:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%166
  Single Issue       : false;
SU(1):   STRXui %166:gpr64, %280:gpr64sp, 14 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%166
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %166:gpr64, %280:gpr64sp, 14 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %166:gpr64 = MOVi64imm 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %166:gpr64 = MOVi64imm 4607182418800017408
SU(1):   STRXui %166:gpr64, %280:gpr64sp, 14 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.35 if.end95
  From: %169:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %169:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%169
  Single Issue       : false;
SU(1):   STRWui %169:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%169
  Single Issue       : false;
SU(2):   %175:gpr64sp = ADDXri %stack.14.t_names, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %177:gpr64sp = ADDXri %stack.11.trecs, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %179:gpr64temp = ADRP target-flags(aarch64-page) %const.5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=1 Reg=%179
  Single Issue       : false;
SU(5):   %180:fpr64 = LDRDui %179:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%179
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %177:gpr64sp = ADDXri %stack.11.trecs, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
BotQ.A RemLatency SU(1) 1c
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %175:gpr64sp = ADDXri %stack.14.t_names, 0, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %169:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @2c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 
Queue TopQ.P: 
Queue TopQ.A: 0 4 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %180:fpr64 = LDRDui %179:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A TopLatency SU(5) 1c
  BotQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 4 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %179:gpr64temp = ADRP target-flags(aarch64-page) %const.5
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %169:gpr32 = MOVi32imm 1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %169:gpr32 = MOVi32imm 1
SU(4):   %179:gpr64temp = ADRP target-flags(aarch64-page) %const.5
SU(5):   %180:fpr64 = LDRDui %179:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
SU(1):   STRWui %169:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
SU(2):   %175:gpr64sp = ADDXri %stack.14.t_names, 0, 0
SU(3):   %177:gpr64sp = ADDXri %stack.11.trecs, 0, 0

********** MI Scheduling **********
main:%bb.36 for.cond97
  From: %170:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.44, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %170:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%170
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %170:gpr32common, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%170
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.44, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %170:gpr32common, 11, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %170:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %170:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %170:gpr32common, 11, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.37 for.body100
  From: %186:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.39, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %186:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%186
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %186:gpr32common, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%186
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.39, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %186:gpr32common, 5, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %186:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %186:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %186:gpr32common, 5, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.37 for.body100
  From: $x0 = MOVaddr target-flags(aarch64-page) @bt__str_38_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_38_____8s__9_
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_38_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_38_____8s__9_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %176:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %178:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %183:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %183:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %178:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = COPY %176:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @bt__str_38_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_38_____8s__9_
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_38_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_38_____8s__9_
SU(1):   $x1 = COPY %176:gpr64
SU(2):   $d0 = COPY %178:fpr64
SU(3):   $d1 = COPY %183:fpr64

********** MI Scheduling **********
main:%bb.37 for.body100
  From: %173:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %173:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=4 Reg=%173
  Single Issue       : false;
SU(1):   %174:gpr64 = UBFMXri %173:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%173
  Successors:
    SU(3): Data Latency=1 Reg=%174
    SU(2): Data Latency=1 Reg=%174
  Single Issue       : false;
SU(2):   %176:gpr64 = LDRXroX %175:gpr64sp, %174:gpr64, 0, 0 :: (load 8 from %ir.arrayidx102)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%174
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %178:fpr64 = LDRDroX %177:gpr64sp, %174:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%174
  Successors:
    SU(4): Data Latency=4 Reg=%178
  Single Issue       : false;
SU(4):   %181:fpr64 = FMULDrr %178:fpr64, %180:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%178
  Successors:
    SU(6): Data Latency=1 Reg=%181
  Single Issue       : false;
SU(5):   %182:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Data Latency=4 Reg=%182
  Single Issue       : false;
SU(6):   %183:fpr64 = FDIVDrr %181:fpr64, %182:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%181
    SU(5): Data Latency=4 Reg=%182
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %183:fpr64 = FDIVDrr %181:fpr64, %182:fpr64
  Ready @0c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 5 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %181:fpr64 = FMULDrr %178:fpr64, %180:fpr64
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 3 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %176:gpr64 = LDRXroX %175:gpr64sp, %174:gpr64, 0, 0 :: (load 8 from %ir.arrayidx102)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %182:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %178:fpr64 = LDRDroX %177:gpr64sp, %174:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %174:gpr64 = UBFMXri %173:gpr64, 61, 60
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %173:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @10c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %173:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %174:gpr64 = UBFMXri %173:gpr64, 61, 60
SU(3):   %178:fpr64 = LDRDroX %177:gpr64sp, %174:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
SU(5):   %182:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %176:gpr64 = LDRXroX %175:gpr64sp, %174:gpr64, 0, 0 :: (load 8 from %ir.arrayidx102)
SU(4):   %181:fpr64 = FMULDrr %178:fpr64, %180:fpr64
SU(6):   %183:fpr64 = FDIVDrr %181:fpr64, %182:fpr64

********** MI Scheduling **********
main:%bb.38 if.then112
  From: $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_41_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_41_rest_rhs_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %231:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %234:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %234:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %231:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @bt__str_41_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_41_rest_rhs_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_41_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_41_rest_rhs_
SU(2):   $d0 = COPY %231:fpr64
SU(3):   $d1 = COPY %234:fpr64

********** MI Scheduling **********
main:%bb.38 if.then112
  From: %229:fpr64 = LDRDui %280:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx121)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(1) - SU(5)
  Copy Succ SU(2)
  Copy Succ SU(3)
SU(0):   %229:fpr64 = LDRDui %280:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx121)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%229
  Single Issue       : false;
SU(1):   %230:fpr64 = LDRDui %280:gpr64sp, 13 :: (dereferenceable load 8 from %ir.t)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%230
    SU(3): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(2):   %231:fpr64 = FSUBDrr %229:fpr64, %230:fpr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%230
    SU(0): Data Latency=4 Reg=%229
    SU(5): Ord  Latency=0 Artificial
  Successors:
    SU(4): Data Latency=1 Reg=%231
    SU(3): Data Latency=1 Reg=%231
  Single Issue       : false;
SU(3):   STRDui %231:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%231
    SU(1): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   %232:fpr64 = FMULDrr %231:fpr64, %180:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%231
  Successors:
    SU(6): Data Latency=1 Reg=%232
  Single Issue       : false;
SU(5):   %233:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(1): Ord  Latency=0 Cluster
  Successors:
    SU(6): Data Latency=4 Reg=%233
    SU(2): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(6):   %234:fpr64 = FDIVDrr %232:fpr64, %233:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%232
    SU(5): Data Latency=4 Reg=%233
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %234:fpr64 = FDIVDrr %232:fpr64, %233:fpr64
  Ready @0c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %232:fpr64 = FMULDrr %231:fpr64, %180:fpr64
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %231:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
  Ready @2c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %231:fpr64 = FSUBDrr %229:fpr64, %230:fpr64
  Ready @3c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %233:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(1) %230:fpr64 = LDRDui %280:gpr64sp, 13 :: (dereferenceable load 8 from %ir.t)
  Ready @7c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %229:fpr64 = LDRDui %280:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx121)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %229:fpr64 = LDRDui %280:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx121)
SU(1):   %230:fpr64 = LDRDui %280:gpr64sp, 13 :: (dereferenceable load 8 from %ir.t)
SU(5):   %233:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %231:fpr64 = FSUBDrr %229:fpr64, %230:fpr64
SU(3):   STRDui %231:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
SU(4):   %232:fpr64 = FMULDrr %231:fpr64, %180:fpr64
SU(6):   %234:fpr64 = FDIVDrr %232:fpr64, %233:fpr64

********** MI Scheduling **********
main:%bb.38 if.then112
  From: $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_40_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_40_sub_rhs_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %220:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %225:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %225:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %220:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @bt__str_40_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_40_sub_rhs_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_40_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_40_sub_rhs_
SU(2):   $d0 = COPY %220:fpr64
SU(3):   $d1 = COPY %225:fpr64

********** MI Scheduling **********
main:%bb.38 if.then112
  From: %216:fpr64 = LDRDui %280:gpr64sp, 2 :: (dereferenceable load 8 from %ir.arrayidx113, align 16)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %280 %180 
Live Out: %225 %280 %220 %180 
Live Thru: FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %225
  LiveReg: %280
  UpdateRegP: SU(0) %216:fpr64 = LDRDui %280:gpr64sp, 2 :: (dereferenceable load 8 from %ir.arrayidx113, align 16)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(1) %217:fpr64 = LDRDui %280:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx114)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(3) %219:fpr64 = LDRDui %280:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) STRDui %220:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  UpdateRegP: SU(7) %224:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %220
  UpdateRegP: SU(5) STRDui %220:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
              to 
  UpdateRegP: SU(6) %223:fpr64 = FMULDrr %220:fpr64, %180:fpr64
              to 
  LiveReg: %180
  UpdateRegP: SU(6) %223:fpr64 = FMULDrr %220:fpr64, %180:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Excess PSets: 
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(2)
SU(0):   %216:fpr64 = LDRDui %280:gpr64sp, 2 :: (dereferenceable load 8 from %ir.arrayidx113, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%216
    SU(1): Ord  Latency=0 Cluster
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %217:fpr64 = LDRDui %280:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx114)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%217
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(2):   %218:fpr64 = FADDDrr %216:fpr64, %217:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%217
    SU(0): Data Latency=4 Reg=%216
  Successors:
    SU(4): Data Latency=1 Reg=%218
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(3):   %219:fpr64 = LDRDui %280:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=4 Reg=%219
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %220:fpr64 = FADDDrr %218:fpr64, %219:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%218
    SU(3): Data Latency=4 Reg=%219
  Successors:
    SU(6): Data Latency=1 Reg=%220
    SU(5): Data Latency=1 Reg=%220
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   STRDui %220:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%220
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %223:fpr64 = FMULDrr %220:fpr64, %180:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%220
  Successors:
    SU(8): Data Latency=1 Reg=%223
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %224:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Data Latency=4 Reg=%224
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %225:fpr64 = FDIVDrr %223:fpr64, %224:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%223
    SU(7): Data Latency=4 Reg=%224
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %225:fpr64 = FDIVDrr %223:fpr64, %224:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %223
  UpdateRegP: SU(8) %225:fpr64 = FDIVDrr %223:fpr64, %224:fpr64
              to 
  LiveReg: %224
  UpdateRegP: SU(8) %225:fpr64 = FDIVDrr %223:fpr64, %224:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @0c
  BotQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
BotQ.A RemLatency SU(5) 6c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %223:fpr64 = FMULDrr %220:fpr64, %180:fpr64
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRDui %220:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @2c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %220:fpr64 = FADDDrr %218:fpr64, %219:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %218
  UpdateRegP: SU(4) %220:fpr64 = FADDDrr %218:fpr64, %219:fpr64
              to 
  LiveReg: %219
  UpdateRegP: SU(4) %220:fpr64 = FADDDrr %218:fpr64, %219:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 4c > CritPath 7
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) %224:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %218:fpr64 = FADDDrr %216:fpr64, %217:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %216
  UpdateRegP: SU(2) %218:fpr64 = FADDDrr %216:fpr64, %217:fpr64
              to 
  LiveReg: %217
  UpdateRegP: SU(2) %218:fpr64 = FADDDrr %216:fpr64, %217:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %219:fpr64 = LDRDui %280:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 9c > CritPath 7
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %217:fpr64 = LDRDui %280:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx114)
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @9c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %216:fpr64 = LDRDui %280:gpr64sp, 2 :: (dereferenceable load 8 from %ir.arrayidx113, align 16)
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %216:fpr64 = LDRDui %280:gpr64sp, 2 :: (dereferenceable load 8 from %ir.arrayidx113, align 16)
SU(1):   %217:fpr64 = LDRDui %280:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx114)
SU(3):   %219:fpr64 = LDRDui %280:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
SU(2):   %218:fpr64 = FADDDrr %216:fpr64, %217:fpr64
SU(7):   %224:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(4):   %220:fpr64 = FADDDrr %218:fpr64, %219:fpr64
SU(5):   STRDui %220:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
SU(6):   %223:fpr64 = FMULDrr %220:fpr64, %180:fpr64
SU(8):   %225:fpr64 = FDIVDrr %223:fpr64, %224:fpr64

********** MI Scheduling **********
main:%bb.39 if.else126
  From: %188:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.41, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %188:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%188
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %188:gpr32common, 8, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%188
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.41, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %188:gpr32common, 8, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %188:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %188:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %188:gpr32common, 8, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.40 if.then129
  From: $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_42_sub_zsol_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_42_sub_zsol_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %207:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %212:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %212:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %207:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @bt__str_42_sub_zsol_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_42_sub_zsol_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_42_sub_zsol_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_42_sub_zsol_
SU(2):   $d0 = COPY %207:fpr64
SU(3):   $d1 = COPY %212:fpr64

********** MI Scheduling **********
main:%bb.40 if.then129
  From: %203:fpr64 = LDRDui %280:gpr64sp, 8 :: (dereferenceable load 8 from %ir.arrayidx130, align 16)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %280 %180 
Live Out: %212 %280 %207 %180 
Live Thru: FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %212
  LiveReg: %280
  UpdateRegP: SU(0) %203:fpr64 = LDRDui %280:gpr64sp, 8 :: (dereferenceable load 8 from %ir.arrayidx130, align 16)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(1) %204:fpr64 = LDRDui %280:gpr64sp, 9 :: (dereferenceable load 8 from %ir.arrayidx131)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(3) %206:fpr64 = LDRDui %280:gpr64sp, 10 :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) STRDui %207:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  UpdateRegP: SU(7) %211:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %207
  UpdateRegP: SU(5) STRDui %207:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
              to 
  UpdateRegP: SU(6) %210:fpr64 = FMULDrr %207:fpr64, %180:fpr64
              to 
  LiveReg: %180
  UpdateRegP: SU(6) %210:fpr64 = FMULDrr %207:fpr64, %180:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Excess PSets: 
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(2)
SU(0):   %203:fpr64 = LDRDui %280:gpr64sp, 8 :: (dereferenceable load 8 from %ir.arrayidx130, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%203
    SU(1): Ord  Latency=0 Cluster
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %204:fpr64 = LDRDui %280:gpr64sp, 9 :: (dereferenceable load 8 from %ir.arrayidx131)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%204
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(2):   %205:fpr64 = FSUBDrr %203:fpr64, %204:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%204
    SU(0): Data Latency=4 Reg=%203
  Successors:
    SU(4): Data Latency=1 Reg=%205
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(3):   %206:fpr64 = LDRDui %280:gpr64sp, 10 :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=4 Reg=%206
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %207:fpr64 = FSUBDrr %205:fpr64, %206:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%205
    SU(3): Data Latency=4 Reg=%206
  Successors:
    SU(6): Data Latency=1 Reg=%207
    SU(5): Data Latency=1 Reg=%207
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   STRDui %207:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%207
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %210:fpr64 = FMULDrr %207:fpr64, %180:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%207
  Successors:
    SU(8): Data Latency=1 Reg=%210
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %211:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Data Latency=4 Reg=%211
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %212:fpr64 = FDIVDrr %210:fpr64, %211:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%210
    SU(7): Data Latency=4 Reg=%211
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %212:fpr64 = FDIVDrr %210:fpr64, %211:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %210
  UpdateRegP: SU(8) %212:fpr64 = FDIVDrr %210:fpr64, %211:fpr64
              to 
  LiveReg: %211
  UpdateRegP: SU(8) %212:fpr64 = FDIVDrr %210:fpr64, %211:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @0c
  BotQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
BotQ.A RemLatency SU(5) 6c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %210:fpr64 = FMULDrr %207:fpr64, %180:fpr64
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRDui %207:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @2c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %207:fpr64 = FSUBDrr %205:fpr64, %206:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %205
  UpdateRegP: SU(4) %207:fpr64 = FSUBDrr %205:fpr64, %206:fpr64
              to 
  LiveReg: %206
  UpdateRegP: SU(4) %207:fpr64 = FSUBDrr %205:fpr64, %206:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 4c > CritPath 7
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) %211:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %205:fpr64 = FSUBDrr %203:fpr64, %204:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %203
  UpdateRegP: SU(2) %205:fpr64 = FSUBDrr %203:fpr64, %204:fpr64
              to 
  LiveReg: %204
  UpdateRegP: SU(2) %205:fpr64 = FSUBDrr %203:fpr64, %204:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %206:fpr64 = LDRDui %280:gpr64sp, 10 :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 9c > CritPath 7
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %204:fpr64 = LDRDui %280:gpr64sp, 9 :: (dereferenceable load 8 from %ir.arrayidx131)
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @9c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %203:fpr64 = LDRDui %280:gpr64sp, 8 :: (dereferenceable load 8 from %ir.arrayidx130, align 16)
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %203:fpr64 = LDRDui %280:gpr64sp, 8 :: (dereferenceable load 8 from %ir.arrayidx130, align 16)
SU(1):   %204:fpr64 = LDRDui %280:gpr64sp, 9 :: (dereferenceable load 8 from %ir.arrayidx131)
SU(3):   %206:fpr64 = LDRDui %280:gpr64sp, 10 :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
SU(2):   %205:fpr64 = FSUBDrr %203:fpr64, %204:fpr64
SU(7):   %211:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(4):   %207:fpr64 = FSUBDrr %205:fpr64, %206:fpr64
SU(5):   STRDui %207:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
SU(6):   %210:fpr64 = FMULDrr %207:fpr64, %180:fpr64
SU(8):   %212:fpr64 = FDIVDrr %210:fpr64, %211:fpr64

********** MI Scheduling **********
main:%bb.41 if.else138
  From: %190:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.43, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %190:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%190
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %190:gpr32common, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%190
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.43, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %190:gpr32common, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %190:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %190:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %190:gpr32common, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.42 if.then141
  From: $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_43_redist_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_43_redist_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %194:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %199:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %199:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %194:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @bt__str_43_redist_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_43_redist_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @bt__str_43_redist_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_43_redist_
SU(2):   $d0 = COPY %194:fpr64
SU(3):   $d1 = COPY %199:fpr64

********** MI Scheduling **********
main:%bb.42 if.then141
  From: %192:fpr64 = LDRDui %280:gpr64sp, 9 :: (dereferenceable load 8 from %ir.arrayidx142)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(2)
SU(0):   %192:fpr64 = LDRDui %280:gpr64sp, 9 :: (dereferenceable load 8 from %ir.arrayidx142)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%192
    SU(1): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(1):   %193:fpr64 = LDRDui %280:gpr64sp, 10 :: (dereferenceable load 8 from %ir.arrayidx143, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%193
  Single Issue       : false;
SU(2):   %194:fpr64 = FADDDrr %192:fpr64, %193:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%193
    SU(0): Data Latency=4 Reg=%192
  Successors:
    SU(4): Data Latency=1 Reg=%194
    SU(3): Data Latency=1 Reg=%194
  Single Issue       : false;
SU(3):   STRDui %194:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%194
  Single Issue       : false;
SU(4):   %197:fpr64 = FMULDrr %194:fpr64, %180:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%194
  Successors:
    SU(6): Data Latency=1 Reg=%197
  Single Issue       : false;
SU(5):   %198:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Data Latency=4 Reg=%198
  Single Issue       : false;
SU(6):   %199:fpr64 = FDIVDrr %197:fpr64, %198:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%197
    SU(5): Data Latency=4 Reg=%198
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %199:fpr64 = FDIVDrr %197:fpr64, %198:fpr64
  Ready @0c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %197:fpr64 = FMULDrr %194:fpr64, %180:fpr64
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %194:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
  Ready @2c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %194:fpr64 = FADDDrr %192:fpr64, %193:fpr64
  Ready @3c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %198:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %193:fpr64 = LDRDui %280:gpr64sp, 10 :: (dereferenceable load 8 from %ir.arrayidx143, align 16)
  Ready @7c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %192:fpr64 = LDRDui %280:gpr64sp, 9 :: (dereferenceable load 8 from %ir.arrayidx142)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   %192:fpr64 = LDRDui %280:gpr64sp, 9 :: (dereferenceable load 8 from %ir.arrayidx142)
SU(1):   %193:fpr64 = LDRDui %280:gpr64sp, 10 :: (dereferenceable load 8 from %ir.arrayidx143, align 16)
SU(5):   %198:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %194:fpr64 = FADDDrr %192:fpr64, %193:fpr64
SU(3):   STRDui %194:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
SU(4):   %197:fpr64 = FMULDrr %194:fpr64, %180:fpr64
SU(6):   %199:fpr64 = FDIVDrr %197:fpr64, %198:fpr64

********** MI Scheduling **********
main:%bb.43 for.inc151
  From: %237:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.36
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %237:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%237
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %238:gpr32common = nsw ADDWri %237:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%237
  Successors:
    SU(2): Data Latency=1 Reg=%238
  Single Issue       : false;
SU(2):   STRWui %238:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%238
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.36
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %238:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %238:gpr32common = nsw ADDWri %237:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %237:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   %237:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %238:gpr32common = nsw ADDWri %237:gpr32common, 1, 0
SU(2):   STRWui %238:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.45 return
  From: %279:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
    To: RET_ReallyLR implicit $w8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %279:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%279
  Single Issue       : false;
SU(1):   $w8 = COPY %279:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%279
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   RET_ReallyLR implicit $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w8 = COPY %279:gpr32
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %279:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %279:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
SU(1):   $w8 = COPY %279:gpr32

********** INTERVALS **********
WSP [128r,128d:189)[208r,208d:188)[224r,224d:187)[240r,240d:186)[272r,272d:185)[816r,816d:184)[832r,832d:183)[840r,840d:182)[848r,848d:181)[880r,880d:180)[992r,992d:179)[1040r,1040d:178)[1056r,1056d:177)[1072r,1072d:176)[1104r,1104d:175)[1120r,1120d:174)[1200r,1200d:173)[1216r,1216d:172)[1232r,1232d:171)[1264r,1264d:170)[1360r,1360d:164)[1408r,1408d:163)[1424r,1424d:162)[1440r,1440d:161)[1472r,1472d:160)[1504r,1504d:159)[1600r,1600d:158)[1616r,1616d:157)[1632r,1632d:156)[1664r,1664d:155)[1744r,1744d:154)[1776r,1776d:153)[1792r,1792d:152)[1808r,1808d:151)[1840r,1840d:150)[1952r,1952d:149)[2048r,2048d:148)[2064r,2064d:147)[2080r,2080d:146)[2112r,2112d:145)[2192r,2192d:144)[2224r,2224d:143)[2240r,2240d:142)[2256r,2256d:141)[2288r,2288d:140)[2400r,2400d:139)[2560r,2560d:138)[2576r,2576d:137)[2592r,2592d:136)[2624r,2624d:135)[2688r,2688d:134)[2720r,2720d:133)[2736r,2736d:132)[2752r,2752d:131)[2784r,2784d:130)[2832r,2832d:169)[2880r,2880d:168)[2896r,2896d:167)[2912r,2912d:166)[2944r,2944d:165)[3200r,3200d:129)[3296r,3296d:128)[3312r,3312d:127)[3328r,3328d:126)[3360r,3360d:125)[3424r,3424d:124)[3504r,3504d:123)[3520r,3520d:122)[3536r,3536d:121)[3568r,3568d:120)[3584r,3584d:119)[3632r,3632d:118)[3648r,3648d:117)[3664r,3664d:116)[3696r,3696d:115)[4048r,4048d:9)[4144r,4144d:8)[4160r,4160d:7)[4176r,4176d:6)[4208r,4208d:5)[4224r,4224d:4)[4272r,4272d:3)[4288r,4288d:2)[4304r,4304d:1)[4336r,4336d:0)[4416r,4416d:114)[4432r,4432d:113)[4448r,4448d:112)[4464r,4464d:111)[4496r,4496d:110)[4656r,4656d:14)[4688r,4688d:13)[4704r,4704d:12)[4720r,4720d:11)[4752r,4752d:10)[4848r,4848d:109)[4864r,4864d:108)[4880r,4880d:107)[4896r,4896d:106)[4928r,4928d:105)[4944r,4944d:104)[4960r,4960d:103)[4976r,4976d:102)[4992r,4992d:101)[5024r,5024d:100)[5040r,5040d:99)[5056r,5056d:98)[5072r,5072d:97)[5088r,5088d:96)[5120r,5120d:95)[5136r,5136d:94)[5152r,5152d:93)[5168r,5168d:92)[5184r,5184d:91)[5216r,5216d:90)[5376r,5376d:19)[5408r,5408d:18)[5424r,5424d:17)[5440r,5440d:16)[5472r,5472d:15)[5568r,5568d:89)[5616r,5616d:88)[5632r,5632d:87)[5648r,5648d:86)[5680r,5680d:85)[6160r,6160d:29)[6208r,6208d:28)[6224r,6224d:27)[6240r,6240d:26)[6272r,6272d:25)[6304r,6304d:24)[6320r,6320d:23)[6336r,6336d:22)[6352r,6352d:21)[6384r,6384d:20)[6480r,6480d:84)[6528r,6528d:83)[6544r,6544d:82)[6560r,6560d:81)[6592r,6592d:80)[6608r,6608d:79)[6640r,6640d:78)[6656r,6656d:77)[6672r,6672d:76)[6704r,6704d:75)[6768r,6768d:74)[6864r,6864d:73)[6880r,6880d:72)[6896r,6896d:71)[6928r,6928d:70)[7968r,7968d:69)[8448r,8448d:68)[8464r,8464d:67)[8480r,8480d:66)[8512r,8512d:65)[8768r,8768d:34)[8800r,8800d:33)[8816r,8816d:32)[8832r,8832d:31)[8864r,8864d:30)[9136r,9136d:64)[9184r,9184d:63)[9200r,9200d:62)[9216r,9216d:61)[9248r,9248d:60)[9664r,9664d:59)[9744r,9744d:58)[9760r,9760d:57)[9776r,9776d:56)[9808r,9808d:55)[10056r,10056d:44)[10128r,10128d:43)[10144r,10144d:42)[10160r,10160d:41)[10192r,10192d:40)[10328r,10328d:39)[10400r,10400d:38)[10416r,10416d:37)[10432r,10432d:36)[10464r,10464d:35)[10744r,10744d:49)[10816r,10816d:48)[10832r,10832d:47)[10848r,10848d:46)[10880r,10880d:45)[11128r,11128d:54)[11200r,11200d:53)[11216r,11216d:52)[11232r,11232d:51)[11264r,11264d:50)  0@4336r 1@4304r 2@4288r 3@4272r 4@4224r 5@4208r 6@4176r 7@4160r 8@4144r 9@4048r 10@4752r 11@4720r 12@4704r 13@4688r 14@4656r 15@5472r 16@5440r 17@5424r 18@5408r 19@5376r 20@6384r 21@6352r 22@6336r 23@6320r 24@6304r 25@6272r 26@6240r 27@6224r 28@6208r 29@6160r 30@8864r 31@8832r 32@8816r 33@8800r 34@8768r 35@10464r 36@10432r 37@10416r 38@10400r 39@10328r 40@10192r 41@10160r 42@10144r 43@10128r 44@10056r 45@10880r 46@10848r 47@10832r 48@10816r 49@10744r 50@11264r 51@11232r 52@11216r 53@11200r 54@11128r 55@9808r 56@9776r 57@9760r 58@9744r 59@9664r 60@9248r 61@9216r 62@9200r 63@9184r 64@9136r 65@8512r 66@8480r 67@8464r 68@8448r 69@7968r 70@6928r 71@6896r 72@6880r 73@6864r 74@6768r 75@6704r 76@6672r 77@6656r 78@6640r 79@6608r 80@6592r 81@6560r 82@6544r 83@6528r 84@6480r 85@5680r 86@5648r 87@5632r 88@5616r 89@5568r 90@5216r 91@5184r 92@5168r 93@5152r 94@5136r 95@5120r 96@5088r 97@5072r 98@5056r 99@5040r 100@5024r 101@4992r 102@4976r 103@4960r 104@4944r 105@4928r 106@4896r 107@4880r 108@4864r 109@4848r 110@4496r 111@4464r 112@4448r 113@4432r 114@4416r 115@3696r 116@3664r 117@3648r 118@3632r 119@3584r 120@3568r 121@3536r 122@3520r 123@3504r 124@3424r 125@3360r 126@3328r 127@3312r 128@3296r 129@3200r 130@2784r 131@2752r 132@2736r 133@2720r 134@2688r 135@2624r 136@2592r 137@2576r 138@2560r 139@2400r 140@2288r 141@2256r 142@2240r 143@2224r 144@2192r 145@2112r 146@2080r 147@2064r 148@2048r 149@1952r 150@1840r 151@1808r 152@1792r 153@1776r 154@1744r 155@1664r 156@1632r 157@1616r 158@1600r 159@1504r 160@1472r 161@1440r 162@1424r 163@1408r 164@1360r 165@2944r 166@2912r 167@2896r 168@2880r 169@2832r 170@1264r 171@1232r 172@1216r 173@1200r 174@1120r 175@1104r 176@1072r 177@1056r 178@1040r 179@992r 180@880r 181@848r 182@840r 183@832r 184@816r 185@272r 186@240r 187@224r 188@208r 189@128r
B0 [3488r,3504r:8)[6640r,6756r:7)[8416r,8448r:6)[8800r,8880r:0)[9712r,9744r:5)[10096r,10128r:2)[10368r,10400r:1)[10784r,10816r:3)[11168r,11200r:4)  0@8800r 1@10368r 2@10096r 3@10784r 4@11168r 5@9712r 6@8416r 7@6640r 8@3488r
W0 [0B,12r:0)[176r,208r:32)[824r,832r:31)[1024r,1040r:30)[1168r,1200r:29)[1392r,1408r:27)[1592r,1600r:26)[1760r,1776r:25)[2040r,2048r:24)[2208r,2224r:23)[2520r,2560r:22)[2704r,2720r:21)[2864r,2880r:28)[3232r,3296r:20)[3456r,3504r:19)[3616r,3632r:18)[4080r,4144r:9)[4256r,4272r:8)[4672r,4688r:1)[5392r,5408r:2)[5600r,5616r:7)[6176r,6208r:10)[6512r,6528r:6)[6624r,6640r:5)[6856r,6864r:4)[8320r,8448r:17)[8784r,8800r:3)[9168r,9184r:16)[9680r,9744r:15)[10064r,10128r:12)[10336r,10400r:11)[10752r,10816r:13)[11136r,11200r:14)  0@0B-phi 1@4672r 2@5392r 3@8784r 4@6856r 5@6624r 6@6512r 7@5600r 8@4256r 9@4080r 10@6176r 11@10336r 12@10064r 13@10752r 14@11136r 15@9680r 16@9168r 17@8320r 18@3616r 19@3456r 20@3232r 21@2704r 22@2520r 23@2208r 24@2040r 25@1760r 26@1592r 27@1392r 28@2864r 29@1168r 30@1024r 31@824r 32@176r
W1 [0B,8r:0)[192r,208r:16)[1184r,1200r:15)[1568r,1600r:14)[2016r,2048r:13)[2496r,2560r:12)[3248r,3296r:5)[3472r,3504r:4)[4096r,4144r:1)[6192r,6208r:2)[6832r,6864r:11)[8368r,8448r:3)[9696r,9744r:10)[10080r,10128r:7)[10352r,10400r:6)[10768r,10816r:8)[11152r,11200r:9)  0@0B-phi 1@4096r 2@6192r 3@8368r 4@3472r 5@3248r 6@10352r 7@10080r 8@10768r 9@11152r 10@9696r 11@6832r 12@2496r 13@2016r 14@1568r 15@1184r 16@192r
W8 [208r,288r:24)[832r,832d:22)[1040r,1040d:21)[1200r,1280r:23)[1408r,1408d:19)[1600r,1680r:18)[1776r,1856r:17)[2048r,2128r:16)[2224r,2304r:15)[2560r,2676r:14)[2720r,2720d:13)[2880r,2880d:20)[3296r,3296d:12)[3504r,3504d:11)[3632r,3632d:10)[4144r,4144d:2)[4272r,4272d:1)[6208r,6208d:3)[9184r,9184d:9)[9744r,9744d:8)[10128r,10128d:5)[10400r,10400d:4)[10816r,10816d:6)[11200r,11200d:7)[11440r,11456r:0)  0@11440r 1@4272r 2@4144r 3@6208r 4@10400r 5@10128r 6@10816r 7@11200r 8@9744r 9@9184r 10@3632r 11@3504r 12@3296r 13@2720r 14@2560r 15@2224r 16@2048r 17@1776r 18@1600r 19@1408r 20@2880r 21@1040r 22@832r 23@1200r 24@208r
%0 [12r,96r:0)  0@12r weight:0.000000e+00
%1 [8r,112r:0)  0@8r weight:0.000000e+00
%5 [288r,320r:0)  0@288r weight:0.000000e+00
%6 [928r,960r:0)  0@928r weight:0.000000e+00
%8 [368r,552r:0)  0@368r weight:0.000000e+00
%9 [384r,552r:0)  0@384r weight:0.000000e+00
%10 [416r,616r:0)  0@416r weight:0.000000e+00
%11 [448r,648r:0)  0@448r weight:0.000000e+00
%12 [480r,644r:0)  0@480r weight:0.000000e+00
%13 [512r,680r:0)  0@512r weight:0.000000e+00
%14 [544r,676r:0)  0@544r weight:0.000000e+00
%15 [576r,712r:0)  0@576r weight:0.000000e+00
%16 [608r,708r:0)  0@608r weight:0.000000e+00
%17 [640r,784r:0)  0@640r weight:0.000000e+00
%18 [672r,776r:0)  0@672r weight:0.000000e+00
%19 [704r,808r:0)  0@704r weight:0.000000e+00
%20 [792r,800r:0)  0@792r weight:0.000000e+00
%21 [768r,864r:0)  0@768r weight:0.000000e+00
%27 [1280r,1312r:0)  0@1280r weight:0.000000e+00
%30 [3032r,3048r:0)  0@3032r weight:0.000000e+00
%31 [2992r,3024r:0)  0@2992r weight:0.000000e+00
%32 [3008r,3024r:0)  0@3008r weight:0.000000e+00
%33 [3040r,3104r:0)  0@3040r weight:0.000000e+00
%34 [3056r,3072r:0)  0@3056r weight:0.000000e+00
%35 [3088r,3104r:0)  0@3088r weight:0.000000e+00
%38 [1488r,1648r:0)  0@1488r weight:0.000000e+00
%41 [1680r,1696r:0)  0@1680r weight:0.000000e+00
%42 [1728r,1824r:0)  0@1728r weight:0.000000e+00
%43 [1856r,1872r:0)  0@1856r weight:0.000000e+00
%45 [1936r,2096r:0)  0@1936r weight:0.000000e+00
%48 [2128r,2144r:0)  0@2128r weight:0.000000e+00
%49 [2176r,2272r:0)  0@2176r weight:0.000000e+00
%50 [2304r,2320r:0)  0@2304r weight:0.000000e+00
%52 [2384r,2608r:0)  0@2384r weight:0.000000e+00
%53 [2416r,2504r:0)  0@2416r weight:0.000000e+00
%54 [2500r,2528r:0)  0@2500r weight:0.000000e+00
%55 [2504r,2544r:0)  0@2504r weight:0.000000e+00
%57 [2676r,2680r:0)  0@2676r weight:0.000000e+00
%58 [2672r,2768r:0)  0@2672r weight:0.000000e+00
%60 [3792r,3824r:0)  0@3792r weight:0.000000e+00
%61 [3888r,3920r:0)  0@3888r weight:0.000000e+00
%62 [3136r,3888r:0)  0@3136r weight:0.000000e+00
%63 [3152r,3344r:0)  0@3152r weight:0.000000e+00
%64 [3168r,3344r:0)  0@3168r weight:0.000000e+00
%65 [3184r,3344r:0)  0@3184r weight:0.000000e+00
%68 [3376r,3552r:0)  0@3376r weight:0.000000e+00
%69 [3392r,3408r:0)  0@3392r weight:0.000000e+00
%70 [3408r,3552r:0)  0@3408r weight:0.000000e+00
%75 [3712r,3728r:0)  0@3712r weight:0.000000e+00
%81 [4512r,4528r:0)  0@4512r weight:0.000000e+00
%82 [4560r,4576r:0)  0@4560r weight:0.000000e+00
%84 [5232r,5248r:0)  0@5232r weight:0.000000e+00
%85 [5280r,5296r:0)  0@5280r weight:0.000000e+00
%87 [5608r,5696r:0)  0@5608r weight:0.000000e+00
%88 [5792r,5824r:0)  0@5792r weight:0.000000e+00
%89 [5808r,5824r:0)  0@5808r weight:0.000000e+00
%92 [6756r,6760r:0)  0@6756r weight:0.000000e+00
%93 [6752r,6912r:0)  0@6752r weight:0.000000e+00
%96 [6944r,7172r:0)  0@6944r weight:0.000000e+00
%97 [7156r,7240r:0)  0@7156r weight:0.000000e+00
%98 [7176r,7192r:0)  0@7176r weight:0.000000e+00
%99 [7160r,7240r:0)  0@7160r weight:0.000000e+00
%100 [7184r,7192r:0)  0@7184r weight:0.000000e+00
%101 [7192r,7208r:0)  0@7192r weight:0.000000e+00
%102 [7172r,7248r:0)  0@7172r weight:0.000000e+00
%103 [7200r,7208r:0)  0@7200r weight:0.000000e+00
%104 [7208r,7256r:0)  0@7208r weight:0.000000e+00
%105 [7240r,7248r:0)  0@7240r weight:0.000000e+00
%106 [7248r,7264r:0)  0@7248r weight:0.000000e+00
%107 [7264r,7272r:0)  0@7264r weight:0.000000e+00
%108 [7152r,7168r:0)  0@7152r weight:0.000000e+00
%109 [7168r,7272r:0)  0@7168r weight:0.000000e+00
%110 [7272r,7288r:0)  0@7272r weight:0.000000e+00
%111 [7232r,7280r:0)  0@7232r weight:0.000000e+00
%114 [7320r,7768r:0)  0@7320r weight:0.000000e+00
%116 [7768r,7776r:0)  0@7768r weight:0.000000e+00
%118 [7776r,7784r:0)  0@7776r weight:0.000000e+00
%119 [7376r,7680r:0)  0@7376r weight:0.000000e+00
%120 [7680r,7784r:0)  0@7680r weight:0.000000e+00
%121 [7784r,7816r:0)  0@7784r weight:0.000000e+00
%122 [7672r,7736r:0)  0@7672r weight:0.000000e+00
%123 [7688r,7704r:0)  0@7688r weight:0.000000e+00
%124 [7704r,7736r:0)  0@7704r weight:0.000000e+00
%125 [7736r,7792r:0)  0@7736r weight:0.000000e+00
%126 [7696r,7800r:0)  0@7696r weight:0.000000e+00
%127 [7744r,7752r:0)  0@7744r weight:0.000000e+00
%128 [7712r,7720r:0)  0@7712r weight:0.000000e+00
%129 [7720r,7752r:0)  0@7720r weight:0.000000e+00
%130 [7752r,7792r:0)  0@7752r weight:0.000000e+00
%131 [7792r,7808r:0)  0@7792r weight:0.000000e+00
%132 [7728r,7760r:0)  0@7728r weight:0.000000e+00
%133 [7760r,7800r:0)  0@7760r weight:0.000000e+00
%134 [7800r,7808r:0)  0@7800r weight:0.000000e+00
%135 [7808r,7816r:0)  0@7808r weight:0.000000e+00
%136 [7816r,7824r:0)  0@7816r weight:0.000000e+00
%137 [7664r,7824r:0)  0@7664r weight:0.000000e+00
%138 [7824r,7832r:0)  0@7824r weight:0.000000e+00
%139 [7880r,8496r:0)  0@7880r weight:0.000000e+00
%140 [7888r,7952r:0)  0@7888r weight:0.000000e+00
%141 [7940r,8496r:0)  0@7940r weight:0.000000e+00
%142 [7944r,8496r:0)  0@7944r weight:0.000000e+00
%143 [7952r,8496r:0)  0@7952r weight:0.000000e+00
%144 [7920r,8496r:0)  0@7920r weight:0.000000e+00
%145 [7928r,8496r:0)  0@7928r weight:0.000000e+00
%146 [7936r,8496r:0)  0@7936r weight:0.000000e+00
%147 [7960r,8496r:0)  0@7960r weight:0.000000e+00
%148 [7976r,8200r:0)  0@7976r weight:0.000000e+00
%150 [8000r,8264r:0)  0@8000r weight:0.000000e+00
%151 [8032r,8260r:0)  0@8032r weight:0.000000e+00
%152 [8064r,8280r:0)  0@8064r weight:0.000000e+00
%153 [8096r,8276r:0)  0@8096r weight:0.000000e+00
%154 [8128r,8336r:0)  0@8128r weight:0.000000e+00
%155 [8160r,8328r:0)  0@8160r weight:0.000000e+00
%156 [8192r,8352r:0)  0@8192r weight:0.000000e+00
%157 [8224r,8344r:0)  0@8224r weight:0.000000e+00
%158 [8272r,8360r:0)  0@8272r weight:0.000000e+00
%160 [8528r,8544r:0)  0@8528r weight:0.000000e+00
%161 [8544r,8560r:0)  0@8544r weight:0.000000e+00
%162 [8608r,8624r:0)  0@8608r weight:0.000000e+00
%163 [8672r,8688r:0)  0@8672r weight:0.000000e+00
%165 [9008r,9024r:0)  0@9008r weight:0.000000e+00
%166 [9088r,9104r:0)  0@9088r weight:0.000000e+00
%169 [9264r,9352r:0)  0@9264r weight:0.000000e+00
%170 [9472r,9488r:0)  0@9472r weight:0.000000e+00
%173 [9552r,9568r:0)  0@9552r weight:0.000000e+00
%174 [9568r,9636r:0)  0@9568r weight:0.000000e+00
%175 [9360r,11360B:0)  0@9360r weight:0.000000e+00
%176 [9636r,9792r:0)  0@9636r weight:0.000000e+00
%177 [9368r,11360B:0)  0@9368r weight:0.000000e+00
%178 [9600r,9792r:0)  0@9600r weight:0.000000e+00
%179 [9328r,9344r:0)  0@9328r weight:0.000000e+00
%180 [9344r,11360B:0)  0@9344r weight:0.000000e+00
%181 [9640r,9648r:0)  0@9640r weight:0.000000e+00
%182 [9632r,9648r:0)  0@9632r weight:0.000000e+00
%183 [9648r,9792r:0)  0@9648r weight:0.000000e+00
%186 [9824r,9840r:0)  0@9824r weight:0.000000e+00
%188 [10512r,10528r:0)  0@10512r weight:0.000000e+00
%190 [10928r,10944r:0)  0@10928r weight:0.000000e+00
%192 [11008r,11096r:0)  0@11008r weight:0.000000e+00
%193 [11024r,11096r:0)  0@11024r weight:0.000000e+00
%194 [11096r,11248r:0)  0@11096r weight:0.000000e+00
%197 [11112r,11120r:0)  0@11112r weight:0.000000e+00
%198 [11088r,11120r:0)  0@11088r weight:0.000000e+00
%199 [11120r,11248r:0)  0@11120r weight:0.000000e+00
%203 [10592r,10648r:0)  0@10592r weight:0.000000e+00
%204 [10608r,10648r:0)  0@10608r weight:0.000000e+00
%205 [10648r,10712r:0)  0@10648r weight:0.000000e+00
%206 [10640r,10712r:0)  0@10640r weight:0.000000e+00
%207 [10712r,10864r:0)  0@10712r weight:0.000000e+00
%210 [10728r,10736r:0)  0@10728r weight:0.000000e+00
%211 [10704r,10736r:0)  0@10704r weight:0.000000e+00
%212 [10736r,10864r:0)  0@10736r weight:0.000000e+00
%216 [9904r,9960r:0)  0@9904r weight:0.000000e+00
%217 [9920r,9960r:0)  0@9920r weight:0.000000e+00
%218 [9960r,10024r:0)  0@9960r weight:0.000000e+00
%219 [9952r,10024r:0)  0@9952r weight:0.000000e+00
%220 [10024r,10176r:0)  0@10024r weight:0.000000e+00
%223 [10040r,10048r:0)  0@10040r weight:0.000000e+00
%224 [10016r,10048r:0)  0@10016r weight:0.000000e+00
%225 [10048r,10176r:0)  0@10048r weight:0.000000e+00
%229 [10208r,10296r:0)  0@10208r weight:0.000000e+00
%230 [10224r,10296r:0)  0@10224r weight:0.000000e+00
%231 [10296r,10448r:0)  0@10296r weight:0.000000e+00
%232 [10312r,10320r:0)  0@10312r weight:0.000000e+00
%233 [10288r,10320r:0)  0@10288r weight:0.000000e+00
%234 [10320r,10448r:0)  0@10320r weight:0.000000e+00
%237 [11296r,11312r:0)  0@11296r weight:0.000000e+00
%238 [11312r,11328r:0)  0@11312r weight:0.000000e+00
%239 [8752r,8848r:0)  0@8752r weight:0.000000e+00
%240 [8880r,8936r:0)  0@8880r weight:0.000000e+00
%241 [8896r,8936r:0)  0@8896r weight:0.000000e+00
%242 [8640r,8992B:0)  0@8640r weight:0.000000e+00
%243 [8928r,8944r:0)  0@8928r weight:0.000000e+00
%244 [8944r,8960r:0)  0@8944r weight:0.000000e+00
%246 [5888r,6080r:0)  0@5888r weight:0.000000e+00
%248 [5712r,6464B:0)  0@5712r weight:0.000000e+00
%249 [5920r,5968r:0)  0@5920r weight:0.000000e+00
%250 [5936r,6000r:0)  0@5936r weight:0.000000e+00
%252 [5968r,6000r:0)  0@5968r weight:0.000000e+00
%254 [6000r,6016r:0)  0@6000r weight:0.000000e+00
%255 [5744r,6464B:0)  0@5744r weight:0.000000e+00
%257 [6016r,6032r:0)  0@6016r weight:0.000000e+00
%259 [6144r,6256r:0)  0@6144r weight:0.000000e+00
%262 [6400r,6416r:0)  0@6400r weight:0.000000e+00
%263 [6416r,6432r:0)  0@6416r weight:0.000000e+00
%264 [5360r,5456r:0)  0@5360r weight:0.000000e+00
%265 [5488r,5504r:0)  0@5488r weight:0.000000e+00
%266 [5504r,5520r:0)  0@5504r weight:0.000000e+00
%267 [4640r,4736r:0)  0@4640r weight:0.000000e+00
%268 [4768r,4784r:0)  0@4768r weight:0.000000e+00
%269 [4784r,4800r:0)  0@4784r weight:0.000000e+00
%270 [3984r,4032r:0)  0@3984r weight:0.000000e+00
%271 [4000r,4192r:0)  0@4000r weight:0.000000e+00
%272 [4016r,4192r:0)  0@4016r weight:0.000000e+00
%273 [4032r,4192r:0)  0@4032r weight:0.000000e+00
%279 [11424r,11440r:0)  0@11424r weight:0.000000e+00
%280 [16r,3968B:0)[4400B,11360B:0)  0@16r weight:0.000000e+00
RegMasks: 208r 832r 1040r 1200r 1408r 1600r 1776r 2048r 2224r 2560r 2720r 2880r 3296r 3504r 3632r 4144r 4272r 4432r 4688r 4864r 4960r 5056r 5152r 5408r 5616r 6208r 6320r 6528r 6640r 6864r 8448r 8800r 9184r 9744r 10128r 10400r 10816r 11200r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=96, align=16, at location [SP]
  fi#12: size=4, align=4, at location [SP]
  fi#13: size=1, align=4, at location [SP]
  fi#14: size=96, align=16, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: 3.000000e+00, align=8
  cp#1: 0x3EB0C6F7A0B5ED8D, align=8
  cp#2: 3.478800e+03, align=8
  cp#3: -1.765570e+04, align=8
  cp#4: 2.802370e+04, align=8
  cp#5: 1.000000e+02, align=8
Function Live Ins: $w0 in %0, $x1 in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $w0, $x1
8B	  %1:gpr64 = COPY $x1
12B	  %0:gpr32 = COPY $w0
16B	  %280:gpr64sp = ADDXri %stack.11.trecs, 0, 0
80B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
96B	  STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
112B	  STRXui %1:gpr64, %280:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
128B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
176B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_timer_flag
192B	  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_
208B	  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
224B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
240B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
256B	  PCN_STACKMAP 0, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
272B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
288B	  %5:gpr64 = COPY $x8
304B	  STRXui %5:gpr64, %stack.15.fp, 0 :: (store 8 into %ir.fp)
320B	  CBZX %5:gpr64, %bb.2
336B	  B %bb.1

352B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

368B	  %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
384B	  %9:gpr32 = MOVi32imm 1
416B	  %10:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_2_total_
448B	  %11:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_3_rhsx_
480B	  %12:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_4_rhsy_
512B	  %13:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_5_rhsz_
544B	  %14:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_6_rhs_
552B	  STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
576B	  %15:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_7_xsolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_7_xsolve_
608B	  %16:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_8_ysolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_8_ysolve_
616B	  STRXui %10:gpr64, %stack.14.t_names, 1 :: (store 8 into %ir.arrayidx)
640B	  %17:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_9_zsolve_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_9_zsolve_
644B	  STRXui %12:gpr64, %stack.14.t_names, 3 :: (store 8 into %ir.arrayidx2)
648B	  STRXui %11:gpr64, %stack.14.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
672B	  %18:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_10_redist1_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_10_redist1_
676B	  STRXui %14:gpr64, %stack.14.t_names, 5 :: (store 8 into %ir.arrayidx4)
680B	  STRXui %13:gpr64, %stack.14.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
704B	  %19:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_11_redist2_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_11_redist2_
708B	  STRXui %16:gpr64, %stack.14.t_names, 7 :: (store 8 into %ir.arrayidx6)
712B	  STRXui %15:gpr64, %stack.14.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
768B	  %21:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
776B	  STRXui %18:gpr64, %stack.14.t_names, 9 :: (store 8 into %ir.arrayidx8)
784B	  STRXui %17:gpr64, %stack.14.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
792B	  %20:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_12_add_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_12_add_
800B	  STRXui %20:gpr64, %stack.14.t_names, 11 :: (store 8 into %ir.arrayidx10)
808B	  STRXui %19:gpr64, %stack.14.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
816B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
824B	  $x0 = COPY %21:gpr64
832B	  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
840B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
848B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
864B	  PCN_STACKMAP 1, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %21:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
880B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
896B	  B %bb.3

912B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

928B	  %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
960B	  STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

976B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x50000000), %bb.9(0x30000000); %bb.4(62.50%), %bb.9(37.50%)

992B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1024B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_13____NAS_Par, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_13____NAS_Par
1040B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
1056B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1072B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1088B	  PCN_STACKMAP 2, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
1104B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1120B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1168B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_14_inputbt_da, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_14_inputbt_da
1184B	  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_
1200B	  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
1216B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1232B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1248B	  PCN_STACKMAP 3, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
1264B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1280B	  %27:gpr64 = COPY $x8
1296B	  STRXui %27:gpr64, %stack.15.fp, 0 :: (store 8 into %ir.fp)
1312B	  CBZX %27:gpr64, %bb.9
1328B	  B %bb.4

1344B	bb.4.if.then15:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1360B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1392B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_15__Reading_f, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_15__Reading_f
1408B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
1424B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1440B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1456B	  PCN_STACKMAP 4, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
1472B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1488B	  %38:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1504B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1568B	  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_16__d_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_16__d_
1584B	  $x2 = ADDXri %stack.4.niter, 0, 0
1592B	  $x0 = COPY %38:gpr64
1600B	  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
1616B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1632B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1648B	  PCN_STACKMAP 5, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %38:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
1664B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1680B	  %41:gpr32 = COPY $w8
1696B	  STRWui %41:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)

1712B	bb.5.while.cond:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

1728B	  %42:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1744B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1760B	  $x0 = COPY %42:gpr64
1776B	  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
1792B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1808B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1824B	  PCN_STACKMAP 6, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %42:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
1840B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1856B	  %43:gpr32sp = COPY $w8
1872B	  dead $wzr = SUBSWri %43:gpr32sp, 10, 0, implicit-def $nzcv
1888B	  Bcc 1, %bb.5, implicit killed $nzcv
1904B	  B %bb.6

1920B	bb.6.while.end:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1936B	  %45:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1952B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2016B	  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_17__lf_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_17__lf_
2032B	  $x2 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
2040B	  $x0 = COPY %45:gpr64
2048B	  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
2064B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2080B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2096B	  PCN_STACKMAP 7, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %45:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
2112B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2128B	  %48:gpr32 = COPY $w8
2144B	  STRWui %48:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)

2160B	bb.7.while.cond21:
	; predecessors: %bb.6, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

2176B	  %49:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2192B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2208B	  $x0 = COPY %49:gpr64
2224B	  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
2240B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2256B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2272B	  PCN_STACKMAP 8, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %49:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
2288B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2304B	  %50:gpr32sp = COPY $w8
2320B	  dead $wzr = SUBSWri %50:gpr32sp, 10, 0, implicit-def $nzcv
2336B	  Bcc 1, %bb.7, implicit killed $nzcv
2352B	  B %bb.8

2368B	bb.8.while.end25:
	; predecessors: %bb.7
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2384B	  %52:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2400B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2416B	  %53:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
2496B	  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_18__d_d_d__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_18__d_d_d__
2500B	  %54:gpr64sp = nuw ADDXri %53:gpr64common, 4, 0
2504B	  %55:gpr64sp = nuw ADDXri %53:gpr64common, 8, 0
2512B	  $x2 = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
2520B	  $x0 = COPY %52:gpr64
2528B	  $x3 = COPY %54:gpr64sp
2544B	  $x4 = COPY %55:gpr64sp
2560B	  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit-def $sp, implicit-def $w8
2576B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2592B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2608B	  PCN_STACKMAP 9, 0, 0, %stack.13.Class, 0, 0, %stack.15.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.16.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %52:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
2624B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2672B	  %58:gpr64 = LDRXui %stack.15.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2676B	  %57:gpr32 = COPY $w8
2680B	  STRWui %57:gpr32, %stack.16.result, 0 :: (store 4 into %ir.result)
2688B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2704B	  $x0 = COPY %58:gpr64
2720B	  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
2736B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2752B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2768B	  PCN_STACKMAP 10, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %58:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
2784B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2800B	  B %bb.10

2816B	bb.9.if.else28:
	; predecessors: %bb.3
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2832B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2864B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_19__No_input_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_19__No_input_
2880B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
2896B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2912B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2928B	  PCN_STACKMAP 11, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
2944B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2992B	  %31:gpr64temp = ADRP target-flags(aarch64-page) @dt
3008B	  %32:gpr64 = MOVi64imm 4554169646866313825
3024B	  STRXui %32:gpr64, %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
3032B	  %30:gpr32 = MOVi32imm 200
3040B	  %33:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
3048B	  STRWui %30:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
3056B	  %34:gpr64 = MOVi64imm 438086664294
3072B	  STRXui %34:gpr64, %33:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
3088B	  %35:gpr32 = MOVi32imm 102
3104B	  STRWui %35:gpr32, %33:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

3120B	bb.10.if.end30:
	; predecessors: %bb.9, %bb.8
	  successors: %bb.13(0x10000000), %bb.11(0x70000000); %bb.13(12.50%), %bb.11(87.50%)

3136B	  %62:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
3152B	  %63:gpr32 = LDRWui %62:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
3168B	  %64:gpr32 = LDRWui %62:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
3184B	  %65:gpr32 = LDRWui %62:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
3200B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3232B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_20__Size___4d, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_20__Size___4d
3248B	  $w1 = COPY %63:gpr32
3264B	  $w2 = COPY %64:gpr32
3280B	  $w3 = COPY %65:gpr32
3296B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
3312B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
3328B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
3344B	  PCN_STACKMAP 12, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %63:gpr32, %64:gpr32, %65:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
3360B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3376B	  %68:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
3392B	  %69:gpr64temp = ADRP target-flags(aarch64-page) @dt
3408B	  %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
3424B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3456B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_21__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_21__Iteration
3472B	  $w1 = COPY %68:gpr32
3488B	  $d0 = COPY %70:fpr64
3504B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8
3520B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
3536B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
3552B	  PCN_STACKMAP 13, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %68:gpr32, %70:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
3568B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3584B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3616B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_22___, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_22___
3632B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
3648B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
3664B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
3680B	  PCN_STACKMAP 14, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
3696B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3712B	  %75:gpr32common = LDRWui %62:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
3728B	  dead $wzr = SUBSWri %75:gpr32common, 102, 0, implicit-def $nzcv
3744B	  Bcc 12, %bb.13, implicit killed $nzcv
3760B	  B %bb.11

3776B	bb.11.if.end30:
	; predecessors: %bb.10
	  successors: %bb.13(0x12492492), %bb.12(0x6db6db6e); %bb.13(14.29%), %bb.12(85.71%)

3792B	  %60:gpr32common = LDRWui %62:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
3824B	  dead $wzr = SUBSWri %60:gpr32common, 102, 0, implicit-def $nzcv
3840B	  Bcc 12, %bb.13, implicit killed $nzcv
3856B	  B %bb.12

3872B	bb.12.if.end30:
	; predecessors: %bb.11
	  successors: %bb.13(0x2aaaaaab), %bb.14(0x55555555); %bb.13(33.33%), %bb.14(66.67%)

3888B	  %61:gpr32common = LDRWui %62:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
3920B	  dead $wzr = SUBSWri %61:gpr32common, 103, 0, implicit-def $nzcv
3936B	  Bcc 11, %bb.14, implicit killed $nzcv
3952B	  B %bb.13

3968B	bb.13.if.then38:
	; predecessors: %bb.10, %bb.11, %bb.12
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

3984B	  %270:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
4000B	  %271:gpr32 = LDRWui %270:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
4016B	  %272:gpr32 = LDRWui %270:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
4032B	  %273:gpr32 = LDRWui %270:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
4048B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4080B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_23___d___d___, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_23___d___d___
4096B	  $w1 = COPY %271:gpr32
4112B	  $w2 = COPY %272:gpr32
4128B	  $w3 = COPY %273:gpr32
4144B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
4160B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4176B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4192B	  PCN_STACKMAP 15, 0, 0, %stack.0.retval, 0, %271:gpr32, %272:gpr32, %273:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.0.retval, align 4)
4208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4224B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4256B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_24__Problem_s, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_24__Problem_s
4272B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
4288B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4304B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4320B	  PCN_STACKMAP 16, 0, 0, %stack.0.retval, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.0.retval, align 4)
4336B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4368B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
4384B	  B %bb.45

4400B	bb.14.if.end41:
	; predecessors: %bb.12
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

4416B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4432B	  BL @set_constants, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4448B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4464B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4480B	  PCN_STACKMAP 17, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
4496B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4512B	  %81:gpr32 = MOVi32imm 1
4528B	  STRWui %81:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

4544B	bb.15.for.cond:
	; predecessors: %bb.14, %bb.16
	  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

4560B	  %82:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
4576B	  dead $wzr = SUBSWri %82:gpr32common, 11, 0, implicit-def $nzcv
4592B	  Bcc 12, %bb.17, implicit killed $nzcv
4608B	  B %bb.16

4624B	bb.16.for.body:
	; predecessors: %bb.15
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

4640B	  %267:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
4656B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4672B	  $w0 = COPY %267:gpr32
4688B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
4704B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4720B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4736B	  PCN_STACKMAP 18, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %267:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
4752B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4768B	  %268:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
4784B	  %269:gpr32common = nsw ADDWri %268:gpr32common, 1, 0
4800B	  STRWui %269:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
4816B	  B %bb.15

4832B	bb.17.for.end:
	; predecessors: %bb.15
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

4848B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4864B	  BL @initialize, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4880B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4896B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4912B	  PCN_STACKMAP 19, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
4928B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4944B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4960B	  BL @exact_rhs, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4976B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4992B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5008B	  PCN_STACKMAP 20, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
5024B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5040B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5056B	  BL @adi, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
5072B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5088B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5104B	  PCN_STACKMAP 21, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
5120B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5136B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5152B	  BL @initialize, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
5168B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5184B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5200B	  PCN_STACKMAP 22, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
5216B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5232B	  %84:gpr32 = MOVi32imm 1
5248B	  STRWui %84:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

5264B	bb.18.for.cond43:
	; predecessors: %bb.17, %bb.19
	  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

5280B	  %85:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
5296B	  dead $wzr = SUBSWri %85:gpr32common, 11, 0, implicit-def $nzcv
5312B	  Bcc 12, %bb.20, implicit killed $nzcv
5328B	  B %bb.19

5344B	bb.19.for.body45:
	; predecessors: %bb.18
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

5360B	  %264:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
5376B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5392B	  $w0 = COPY %264:gpr32
5408B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
5424B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5440B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5456B	  PCN_STACKMAP 23, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %264:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
5472B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5488B	  %265:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
5504B	  %266:gpr32common = nsw ADDWri %265:gpr32common, 1, 0
5520B	  STRWui %266:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
5536B	  B %bb.18

5552B	bb.20.for.end48:
	; predecessors: %bb.18
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

5568B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5600B	  $w0 = MOVi32imm 1
5608B	  %87:gpr32 = MOVi32imm 1
5616B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
5632B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5648B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5664B	  PCN_STACKMAP 24, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
5680B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5696B	  STRWui %87:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
5712B	  undef %248.sub_32:gpr64 = MOVi32imm 1717986919
5744B	  %255:gpr32 = MOVi32imm 20

5776B	bb.21.for.cond49:
	; predecessors: %bb.20, %bb.25
	  successors: %bb.22(0x7c000000), %bb.26(0x04000000); %bb.22(96.88%), %bb.26(3.12%)

5792B	  %88:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
5808B	  %89:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
5824B	  dead $wzr = SUBSWrr %88:gpr32, %89:gpr32, implicit-def $nzcv
5840B	  Bcc 12, %bb.26, implicit killed $nzcv
5856B	  B %bb.22

5872B	bb.22.for.body51:
	; predecessors: %bb.21
	  successors: %bb.24(0x20000000), %bb.23(0x60000000); %bb.24(25.00%), %bb.23(75.00%)

5888B	  %246:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
5920B	  %249:gpr64 = MADDXrrr %246:gpr64common, %248:gpr64, $xzr
5936B	  %250:gpr64 = UBFMXri %249:gpr64, 63, 63
5968B	  %252:gpr64 = SBFMXri %249:gpr64, 35, 63
6000B	  %254:gpr32 = ADDWrr %252.sub_32:gpr64, %250.sub_32:gpr64
6016B	  %257:gpr32 = MSUBWrrr %254:gpr32, %255:gpr32, %246.sub_32:gpr64common
6032B	  CBZW %257:gpr32, %bb.24
6048B	  B %bb.23

6064B	bb.23.for.body51:
	; predecessors: %bb.22
	  successors: %bb.24(0x2aaaaaab), %bb.25(0x55555555); %bb.24(33.33%), %bb.25(66.67%)

6080B	  dead $wzr = SUBSWri %246.sub_32:gpr64common, 1, 0, implicit-def $nzcv
6096B	  Bcc 1, %bb.25, implicit killed $nzcv
6112B	  B %bb.24

6128B	bb.24.if.then55:
	; predecessors: %bb.22, %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

6144B	  %259:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
6160B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6176B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_25__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_25__Time_step
6192B	  $w1 = COPY %259:gpr32
6208B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
6224B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6240B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6256B	  PCN_STACKMAP 25, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %259:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
6272B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

6288B	bb.25.if.end57:
	; predecessors: %bb.23, %bb.24
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

6304B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6320B	  BL @adi, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
6336B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6352B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6368B	  PCN_STACKMAP 26, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
6384B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6400B	  %262:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
6416B	  %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0
6432B	  STRWui %263:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)
6448B	  B %bb.21

6464B	bb.26.for.end60:
	; predecessors: %bb.21
	  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

6480B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6512B	  $w0 = MOVi32imm 1
6528B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
6544B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6560B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6576B	  PCN_STACKMAP 27, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
6592B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6608B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6624B	  $w0 = MOVi32imm 1
6640B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
6656B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6672B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6688B	  PCN_STACKMAP 28, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
6704B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6752B	  %93:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
6756B	  %92:fpr64 = COPY $d0
6760B	  STRDui %92:fpr64, %280:gpr64sp, 14 :: (store 8 into %ir.tmax)
6768B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6832B	  $x1 = ADDXri %stack.13.Class, 0, 0
6848B	  $x2 = ADDXri %stack.12.verified, 0, 0
6856B	  $w0 = COPY %93:gpr32
6864B	  BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit killed $x2, implicit-def $sp
6880B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6896B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6912B	  PCN_STACKMAP 29, 0, 0, %stack.13.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.8.n3, 0, 0, %stack.6.navg, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, 0, %stack.12.verified, 0, %93:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
6928B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6944B	  %96:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
7152B	  %108:gpr64temp = ADRP target-flags(aarch64-page) %const.0
7156B	  %97:gpr32 = LDRWui %96:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
7160B	  %99:gpr32 = LDRWui %96:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
7168B	  %109:fpr64 = LDRDui %108:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
7172B	  %102:gpr32 = LDRWui %96:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
7176B	  %98:fpr64 = SCVTFUWDri %97:gpr32
7184B	  %100:fpr64 = SCVTFUWDri %99:gpr32
7192B	  %101:fpr64 = FMULDrr %98:fpr64, %100:fpr64
7200B	  %103:fpr64 = SCVTFUWDri %102:gpr32
7208B	  %104:fpr64 = FMULDrr %101:fpr64, %103:fpr64
7232B	  %111:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
7240B	  %105:gpr32 = nsw ADDWrr %97:gpr32, %99:gpr32
7248B	  %106:gpr32 = nsw ADDWrr %105:gpr32, %102:gpr32
7256B	  STRDui %104:fpr64, %280:gpr64sp, 15 :: (store 8 into %ir.n3)
7264B	  %107:fpr64 = SCVTFUWDri %106:gpr32
7272B	  %110:fpr64 = FDIVDrr %107:fpr64, %109:fpr64
7280B	  FCMPDri %111:fpr64, implicit-def $nzcv
7288B	  STRDui %110:fpr64, %280:gpr64sp, 17 :: (store 8 into %ir.navg)
7296B	  Bcc 0, %bb.28, implicit killed $nzcv
7304B	  B %bb.27

7312B	bb.27.if.then70:
	; predecessors: %bb.26
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

7320B	  undef %114.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
7376B	  %119:gpr64temp = ADRP target-flags(aarch64-page) %const.1
7664B	  %137:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
7672B	  %122:fpr64 = LDRDui %280:gpr64sp, 15 :: (dereferenceable load 8 from %ir.n3)
7680B	  %120:fpr64 = LDRDui %119:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
7688B	  %123:gpr64temp = ADRP target-flags(aarch64-page) %const.2
7696B	  %126:fpr64 = LDRDui %280:gpr64sp, 17 :: (dereferenceable load 8 from %ir.navg)
7704B	  %124:fpr64 = LDRDui %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
7712B	  %128:gpr64temp = ADRP target-flags(aarch64-page) %const.3
7720B	  %129:fpr64 = LDRDui %128:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
7728B	  %132:gpr64temp = ADRP target-flags(aarch64-page) %const.4
7736B	  %125:fpr64 = FMULDrr %122:fpr64, %124:fpr64
7744B	  %127:fpr64 = FMULDrr %126:fpr64, %126:fpr64
7752B	  %130:fpr64 = FMULDrr %127:fpr64, %129:fpr64
7760B	  %133:fpr64 = LDRDui %132:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
7768B	  %116:fpr128 = SSHLLv2i32_shift %114:fpr64, 0
7776B	  %118:fpr64 = SCVTFv1i64 %116.dsub:fpr128
7784B	  %121:fpr64 = FMULDrr %118:fpr64, %120:fpr64
7792B	  %131:fpr64 = FADDDrr %125:fpr64, %130:fpr64
7800B	  %134:fpr64 = FMULDrr %126:fpr64, %133:fpr64
7808B	  %135:fpr64 = FADDDrr %131:fpr64, %134:fpr64
7816B	  %136:fpr64 = FMULDrr %121:fpr64, %135:fpr64
7824B	  %138:fpr64 = FDIVDrr %136:fpr64, %137:fpr64
7832B	  STRDui %138:fpr64, %280:gpr64sp, 16 :: (store 8 into %ir.mflops)
7840B	  B %bb.29

7848B	bb.28.if.else80:
	; predecessors: %bb.26
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

7864B	  STRXui $xzr, %280:gpr64sp, 16 :: (store 8 into %ir.mflops)

7872B	bb.29.if.end81:
	; predecessors: %bb.28, %bb.27
	  successors: %bb.30(0x50000000), %bb.44(0x30000000); %bb.30(62.50%), %bb.44(37.50%)

7880B	  %139:gpr32 = LDRSBWui %stack.13.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
7888B	  %140:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
7920B	  %144:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
7928B	  %145:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
7936B	  %146:fpr64 = LDRDui %280:gpr64sp, 16 :: (dereferenceable load 8 from %ir.mflops)
7940B	  %141:gpr32 = LDRWui %140:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
7944B	  %142:gpr32 = LDRWui %140:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
7952B	  %143:gpr32 = LDRWui %140:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
7960B	  %147:gpr32 = LDRWui %stack.12.verified, 0 :: (dereferenceable load 4 from %ir.verified)
7968B	  ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
7976B	  %148:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_36__none__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_36__none__
8000B	  %150:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_35__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_35__O3__mcmod
8032B	  %151:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_34__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_34__g__Wall__
8064B	  %152:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_33__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_33__I___commo
8096B	  %153:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_32__lm_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_32__lm_
8128B	  %154:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_31___CC__, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_31___CC__
8160B	  %155:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_30_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_30_gcc_
8192B	  %156:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_29_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_29_03_Nov_201
8200B	  STRXui %148:gpr64, $sp, 10 :: (store 8 into stack + 80)
8224B	  %157:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_28_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_28_3_3_1_
8256B	  STRWui %147:gpr32, $sp, 2 :: (store 4 into stack + 8)
8260B	  STRXui %151:gpr64, $sp, 8 :: (store 8 into stack + 64)
8264B	  STRXui %150:gpr64, $sp, 9 :: (store 8 into stack + 72)
8272B	  %158:gpr64 = MOVaddr target-flags(aarch64-page) @bt__str_27___________, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_27___________
8276B	  STRXui %153:gpr64, $sp, 6 :: (store 8 into stack + 48)
8280B	  STRXui %152:gpr64, $sp, 7 :: (store 8 into stack + 56)
8320B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_26_BT_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_26_BT_
8328B	  STRXui %155:gpr64, $sp, 4 :: (store 8 into stack + 32)
8336B	  STRXui %154:gpr64, $sp, 5 :: (store 8 into stack + 40)
8344B	  STRXui %157:gpr64, $sp, 2 :: (store 8 into stack + 16)
8352B	  STRXui %156:gpr64, $sp, 3 :: (store 8 into stack + 24)
8360B	  STRXui %158:gpr64, $sp, 0 :: (store 8 into stack)
8368B	  $w1 = COPY %139:gpr32
8376B	  $w2 = COPY %141:gpr32
8384B	  $w3 = COPY %142:gpr32
8392B	  $w4 = COPY %143:gpr32
8400B	  $w5 = COPY %144:gpr32
8416B	  $d0 = COPY %145:fpr64
8432B	  $d1 = COPY %146:fpr64
8448B	  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp
8464B	  ADJCALLSTACKUP 88, 0, implicit-def $sp, implicit $sp
8480B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
8496B	  PCN_STACKMAP 30, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %139:gpr32, %141:gpr32, %142:gpr32, %143:gpr32, %144:gpr32, %145:fpr64, %146:fpr64, %147:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
8512B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
8528B	  %160:gpr64temp = ADRP target-flags(aarch64-page) @timeron
8544B	  %161:gpr32 = LDRWui %160:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
8560B	  CBZW %161:gpr32, %bb.44
8576B	  B %bb.30

8592B	bb.30.if.then82:
	; predecessors: %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

8608B	  %162:gpr32 = MOVi32imm 1
8624B	  STRWui %162:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
8640B	  %242:gpr64sp = ADDXri %stack.11.trecs, 0, 0

8656B	bb.31.for.cond83:
	; predecessors: %bb.30, %bb.32
	  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

8672B	  %163:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
8688B	  dead $wzr = SUBSWri %163:gpr32common, 11, 0, implicit-def $nzcv
8704B	  Bcc 12, %bb.33, implicit killed $nzcv
8720B	  B %bb.32

8736B	bb.32.for.body86:
	; predecessors: %bb.31
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

8752B	  %239:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
8768B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
8784B	  $w0 = COPY %239:gpr32
8800B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
8816B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
8832B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
8848B	  PCN_STACKMAP 31, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %239:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
8864B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
8880B	  %240:fpr64 = COPY $d0
8896B	  %241:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
8928B	  %243:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
8936B	  STRDroX %240:fpr64, %242:gpr64sp, %241:gpr64, 0, 1 :: (store 8 into %ir.arrayidx88)
8944B	  %244:gpr32common = nsw ADDWri %243:gpr32common, 1, 0
8960B	  STRWui %244:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
8976B	  B %bb.31

8992B	bb.33.for.end91:
	; predecessors: %bb.31
	  successors: %bb.34(0x50000000), %bb.35(0x30000000); %bb.34(62.50%), %bb.35(37.50%)

9008B	  %165:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
9024B	  FCMPDri %165:fpr64, implicit-def $nzcv
9040B	  Bcc 1, %bb.35, implicit killed $nzcv
9056B	  B %bb.34

9072B	bb.34.if.then94:
	; predecessors: %bb.33
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

9088B	  %166:gpr64 = MOVi64imm 4607182418800017408
9104B	  STRXui %166:gpr64, %280:gpr64sp, 14 :: (store 8 into %ir.tmax)

9120B	bb.35.if.end95:
	; predecessors: %bb.33, %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

9136B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9168B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_37___SECTION_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_37___SECTION_
9184B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
9200B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
9216B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
9232B	  PCN_STACKMAP 32, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
9248B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
9264B	  %169:gpr32 = MOVi32imm 1
9328B	  %179:gpr64temp = ADRP target-flags(aarch64-page) %const.5
9344B	  %180:fpr64 = LDRDui %179:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
9352B	  STRWui %169:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
9360B	  %175:gpr64sp = ADDXri %stack.14.t_names, 0, 0
9368B	  %177:gpr64sp = ADDXri %stack.11.trecs, 0, 0

9456B	bb.36.for.cond97:
	; predecessors: %bb.35, %bb.43
	  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

9472B	  %170:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
9488B	  dead $wzr = SUBSWri %170:gpr32common, 11, 0, implicit-def $nzcv
9504B	  Bcc 12, %bb.44, implicit killed $nzcv
9520B	  B %bb.37

9536B	bb.37.for.body100:
	; predecessors: %bb.36
	  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

9552B	  %173:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
9568B	  %174:gpr64 = UBFMXri %173:gpr64, 61, 60
9600B	  %178:fpr64 = LDRDroX %177:gpr64sp, %174:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
9632B	  %182:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
9636B	  %176:gpr64 = LDRXroX %175:gpr64sp, %174:gpr64, 0, 0 :: (load 8 from %ir.arrayidx102)
9640B	  %181:fpr64 = FMULDrr %178:fpr64, %180:fpr64
9648B	  %183:fpr64 = FDIVDrr %181:fpr64, %182:fpr64
9664B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9680B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_38_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_38_____8s__9_
9696B	  $x1 = COPY %176:gpr64
9712B	  $d0 = COPY %178:fpr64
9728B	  $d1 = COPY %183:fpr64
9744B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
9760B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
9776B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
9792B	  PCN_STACKMAP 33, 0, %183:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %176:gpr64, %178:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
9808B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
9824B	  %186:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
9840B	  dead $wzr = SUBSWri %186:gpr32common, 5, 0, implicit-def $nzcv
9856B	  Bcc 1, %bb.39, implicit killed $nzcv
9872B	  B %bb.38

9888B	bb.38.if.then112:
	; predecessors: %bb.37
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

9904B	  %216:fpr64 = LDRDui %280:gpr64sp, 2 :: (dereferenceable load 8 from %ir.arrayidx113, align 16)
9920B	  %217:fpr64 = LDRDui %280:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx114)
9952B	  %219:fpr64 = LDRDui %280:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
9960B	  %218:fpr64 = FADDDrr %216:fpr64, %217:fpr64
10016B	  %224:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
10024B	  %220:fpr64 = FADDDrr %218:fpr64, %219:fpr64
10032B	  STRDui %220:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
10040B	  %223:fpr64 = FMULDrr %220:fpr64, %180:fpr64
10048B	  %225:fpr64 = FDIVDrr %223:fpr64, %224:fpr64
10056B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10064B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
10080B	  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_40_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_40_sub_rhs_
10096B	  $d0 = COPY %220:fpr64
10112B	  $d1 = COPY %225:fpr64
10128B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
10144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
10160B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
10176B	  PCN_STACKMAP 34, 0, %225:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %220:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
10192B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10208B	  %229:fpr64 = LDRDui %280:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx121)
10224B	  %230:fpr64 = LDRDui %280:gpr64sp, 13 :: (dereferenceable load 8 from %ir.t)
10288B	  %233:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
10296B	  %231:fpr64 = FSUBDrr %229:fpr64, %230:fpr64
10304B	  STRDui %231:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
10312B	  %232:fpr64 = FMULDrr %231:fpr64, %180:fpr64
10320B	  %234:fpr64 = FDIVDrr %232:fpr64, %233:fpr64
10328B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10336B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
10352B	  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_41_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_41_rest_rhs_
10368B	  $d0 = COPY %231:fpr64
10384B	  $d1 = COPY %234:fpr64
10400B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
10416B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
10432B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
10448B	  PCN_STACKMAP 35, 0, %234:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %231:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
10464B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10480B	  B %bb.43

10496B	bb.39.if.else126:
	; predecessors: %bb.37
	  successors: %bb.40(0x40000000), %bb.41(0x40000000); %bb.40(50.00%), %bb.41(50.00%)

10512B	  %188:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
10528B	  dead $wzr = SUBSWri %188:gpr32common, 8, 0, implicit-def $nzcv
10544B	  Bcc 1, %bb.41, implicit killed $nzcv
10560B	  B %bb.40

10576B	bb.40.if.then129:
	; predecessors: %bb.39
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

10592B	  %203:fpr64 = LDRDui %280:gpr64sp, 8 :: (dereferenceable load 8 from %ir.arrayidx130, align 16)
10608B	  %204:fpr64 = LDRDui %280:gpr64sp, 9 :: (dereferenceable load 8 from %ir.arrayidx131)
10640B	  %206:fpr64 = LDRDui %280:gpr64sp, 10 :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
10648B	  %205:fpr64 = FSUBDrr %203:fpr64, %204:fpr64
10704B	  %211:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
10712B	  %207:fpr64 = FSUBDrr %205:fpr64, %206:fpr64
10720B	  STRDui %207:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
10728B	  %210:fpr64 = FMULDrr %207:fpr64, %180:fpr64
10736B	  %212:fpr64 = FDIVDrr %210:fpr64, %211:fpr64
10744B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10752B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
10768B	  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_42_sub_zsol_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_42_sub_zsol_
10784B	  $d0 = COPY %207:fpr64
10800B	  $d1 = COPY %212:fpr64
10816B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
10832B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
10848B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
10864B	  PCN_STACKMAP 36, 0, %212:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %207:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
10880B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10896B	  B %bb.43

10912B	bb.41.if.else138:
	; predecessors: %bb.39
	  successors: %bb.42(0x40000000), %bb.43(0x40000000); %bb.42(50.00%), %bb.43(50.00%)

10928B	  %190:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
10944B	  dead $wzr = SUBSWri %190:gpr32common, 10, 0, implicit-def $nzcv
10960B	  Bcc 1, %bb.43, implicit killed $nzcv
10976B	  B %bb.42

10992B	bb.42.if.then141:
	; predecessors: %bb.41
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

11008B	  %192:fpr64 = LDRDui %280:gpr64sp, 9 :: (dereferenceable load 8 from %ir.arrayidx142)
11024B	  %193:fpr64 = LDRDui %280:gpr64sp, 10 :: (dereferenceable load 8 from %ir.arrayidx143, align 16)
11088B	  %198:fpr64 = LDRDui %280:gpr64sp, 14 :: (dereferenceable load 8 from %ir.tmax)
11096B	  %194:fpr64 = FADDDrr %192:fpr64, %193:fpr64
11104B	  STRDui %194:fpr64, %280:gpr64sp, 13 :: (store 8 into %ir.t)
11112B	  %197:fpr64 = FMULDrr %194:fpr64, %180:fpr64
11120B	  %199:fpr64 = FDIVDrr %197:fpr64, %198:fpr64
11128B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
11136B	  $x0 = MOVaddr target-flags(aarch64-page) @bt__str_39__________8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8
11152B	  $x1 = MOVaddr target-flags(aarch64-page) @bt__str_43_redist_, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_43_redist_
11168B	  $d0 = COPY %194:fpr64
11184B	  $d1 = COPY %199:fpr64
11200B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
11216B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
11232B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
11248B	  PCN_STACKMAP 37, 0, %199:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.10.t, 0, 0, %stack.14.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.11.trecs, 0, %194:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
11264B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

11280B	bb.43.for.inc151:
	; predecessors: %bb.41, %bb.42, %bb.40, %bb.38
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

11296B	  %237:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
11312B	  %238:gpr32common = nsw ADDWri %237:gpr32common, 1, 0
11328B	  STRWui %238:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
11344B	  B %bb.36

11360B	bb.44.if.end154:
	; predecessors: %bb.29, %bb.36
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

11392B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)

11408B	bb.45.return:
	; predecessors: %bb.44, %bb.13

11424B	  %279:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
11440B	  $w8 = COPY %279:gpr32
11456B	  RET_ReallyLR implicit $w8

# End machine code for function main.

warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled register X19 across call to adi
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 17 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 17 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 17 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 17 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 17 across call to printf
Before post-MI-sched:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-56]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=4, align=4, at location [SP-68]
  fi#4: size=4, align=4, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-76]
  fi#6: size=8, align=8, at location [SP-88]
  fi#7: size=8, align=8, at location [SP-96]
  fi#8: size=8, align=8, at location [SP-104]
  fi#9: size=8, align=8, at location [SP-112]
  fi#10: size=8, align=8, at location [SP-120]
  fi#11: size=96, align=16, at location [SP-224]
  fi#12: size=4, align=4, at location [SP-228]
  fi#13: size=1, align=4, at location [SP-232]
  fi#14: size=96, align=16, at location [SP-336]
  fi#15: size=8, align=8, at location [SP-344]
  fi#16: size=4, align=4, at location [SP-348]
  fi#17: size=8, align=8, at location [SP-360]
  fi#18: size=8, align=8, at location [SP-368]
  fi#19: size=8, align=8, at location [SP-376]
  fi#20: size=4, align=4, at location [SP-380]
  fi#21: size=8, align=8, at location [SP-392]
  fi#22: size=8, align=8, at location [SP-400]
  fi#23: dead
  fi#24: dead
  fi#25: dead
  fi#26: dead
  fi#27: dead
  fi#28: dead
  fi#29: dead
  fi#30: dead
  fi#31: dead
  fi#32: dead
  fi#33: dead
  fi#34: dead
  fi#35: dead
  fi#36: dead
  fi#37: size=8, align=8, at location [SP-40]
  fi#38: size=8, align=8, at location [SP-8]
  fi#39: size=8, align=8, at location [SP-16]
  fi#40: size=8, align=8, at location [SP-24]
  fi#41: size=8, align=8, at location [SP-32]
Constant Pool:
  cp#0: 3.000000e+00, align=8
  cp#1: 0x3EB0C6F7A0B5ED8D, align=8
  cp#2: 3.478800e+03, align=8
  cp#3: -1.765570e+04, align=8
  cp#4: 2.802370e+04, align=8
  cp#5: 1.000000e+02, align=8
Function Live Ins: $w0, $x1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 496, 0
  frame-setup STPXi killed $x20, killed $x19, $sp, 58 :: (store 8 into %stack.41), (store 8 into %stack.40)
  frame-setup STPXi killed $fp, killed $lr, $sp, 60 :: (store 8 into %stack.39), (store 8 into %stack.38)
  $fp = frame-setup ADDXri $sp, 480, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  $x8 = SUBXri $fp, 208, 0
  STPWi renamable $w0, $wzr, $fp, -10 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  STRXui killed renamable $x1, killed renamable $x8, 20 :: (store 8 into %ir.argv.addr)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_timer_flag
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_timer_flag, 0
  $x1 = ADRP target-flags(aarch64-page) @bt__str_1_r_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_, 0
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  PCN_STACKMAP 0, 0, 0, $fp, -216, 0, $fp, -328, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -332, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  STRXui renamable $x8, $sp, 19 :: (store 8 into %ir.fp)
  CBZX killed renamable $x8, %bb.2

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  $w16 = MOVZWi 1, 0
  $x17 = ADRP target-flags(aarch64-page) @bt__str_2_total_
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_2_total_, 0
  $x18 = ADRP target-flags(aarch64-page) @bt__str_3_rhsx_
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_3_rhsx_, 0
  $x0 = ADRP target-flags(aarch64-page) @bt__str_4_rhsy_
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_4_rhsy_, 0
  $x1 = ADRP target-flags(aarch64-page) @bt__str_5_rhsz_
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_5_rhsz_, 0
  $x2 = ADRP target-flags(aarch64-page) @bt__str_6_rhs_
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_6_rhs_, 0
  STRWui killed renamable $w16, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  $x8 = ADRP target-flags(aarch64-page) @bt__str_7_xsolve_
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_7_xsolve_, 0
  $x16 = ADRP target-flags(aarch64-page) @bt__str_8_ysolve_
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_8_ysolve_, 0
  STPXi renamable $x17, renamable $x18, $sp, 21 :: (store 8 into %ir.arrayidx), (store 8 into %ir.arrayidx1, align 16)
  $x17 = ADRP target-flags(aarch64-page) @bt__str_9_zsolve_
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_9_zsolve_, 0
  STPXi renamable $x0, renamable $x1, $sp, 23 :: (store 8 into %ir.arrayidx2), (store 8 into %ir.arrayidx3, align 16)
  $x18 = ADRP target-flags(aarch64-page) @bt__str_10_redist1_
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_10_redist1_, 0
  STPXi renamable $x2, renamable $x8, $sp, 25 :: (store 8 into %ir.arrayidx4), (store 8 into %ir.arrayidx5, align 16)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_11_redist2_
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_11_redist2_, 0
  STPXi renamable $x16, renamable $x17, $sp, 27 :: (store 8 into %ir.arrayidx6), (store 8 into %ir.arrayidx7, align 16)
  renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  STPXi renamable $x18, renamable $x0, $sp, 29 :: (store 8 into %ir.arrayidx8), (store 8 into %ir.arrayidx9, align 16)
  $x8 = ADRP target-flags(aarch64-page) @bt__str_12_add_
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_12_add_, 0
  STRXui killed renamable $x8, $sp, 31 :: (store 8 into %ir.arrayidx10)
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 1, 0, 0, $fp, -216, 0, $fp, -328, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -332, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  STRWui $wzr, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.9(0x30000000); %bb.4(62.50%), %bb.9(37.50%)

  $x0 = ADRP target-flags(aarch64-page) @bt__str_13____NAS_Par
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_13____NAS_Par, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 2, 0, 0, $fp, -216, 0, $fp, -328, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -332, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_14_inputbt_da
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_14_inputbt_da, 0
  $x1 = ADRP target-flags(aarch64-page) @bt__str_1_r_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_, 0
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  PCN_STACKMAP 3, 0, 0, $fp, -216, 0, $fp, -328, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -332, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  STRXui renamable $x8, $sp, 19 :: (store 8 into %ir.fp)
  CBZX killed renamable $x8, %bb.9

bb.4.if.then15:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x0 = ADRP target-flags(aarch64-page) @bt__str_15__Reading_f
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_15__Reading_f, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 4, 0, 0, $fp, -216, 0, $fp, -328, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -332, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  $x1 = ADRP target-flags(aarch64-page) @bt__str_16__d_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_16__d_, 0
  $x2 = SUBXri $fp, 56, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 5, 0, 0, $fp, -216, 0, $fp, -328, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -332, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  STRWui killed renamable $w8, $sp, 37 :: (store 4 into %ir.result)

bb.5.while.cond:
; predecessors: %bb.4, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 6, 0, 0, $fp, -216, 0, $fp, -328, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -332, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.5, implicit $nzcv

bb.6.while.end:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  $x1 = ADRP target-flags(aarch64-page) @bt__str_17__lf_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_17__lf_, 0
  $x2 = ADRP target-flags(aarch64-page) @dt
  $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @dt, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 7, 0, 0, $fp, -216, 0, $fp, -328, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -332, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  STRWui killed renamable $w8, $sp, 37 :: (store 4 into %ir.result)

bb.7.while.cond21:
; predecessors: %bb.6, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 8, 0, 0, $fp, -216, 0, $fp, -328, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -332, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.7, implicit $nzcv

bb.8.while.end25:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  $x8 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  $x1 = ADRP target-flags(aarch64-page) @bt__str_18__d_d_d__
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_18__d_d_d__, 0
  renamable $x3 = nuw ADDXri renamable $x8, 4, 0
  renamable $x4 = nuw ADDXri killed renamable $x8, 8, 0
  $x2 = ADRP target-flags(aarch64-page) @grid_points
  $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 9, 0, 0, $fp, -216, 0, $fp, -328, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -332, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.15.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.16.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  STRWui killed renamable $w8, $sp, 37 :: (store 4 into %ir.result)
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 10, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  B %bb.10

bb.9.if.else28:
; predecessors: %bb.3
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  $x0 = ADRP target-flags(aarch64-page) @bt__str_19__No_input_
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_19__No_input_, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 11, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @dt
  $x16 = MOVZXi 12897, 0
  $x16 = MOVKXi $x16(tied-def 0), 12373, 16
  $x16 = MOVKXi $x16(tied-def 0), 43306, 32
  $x16 = MOVKXi $x16(tied-def 0), 16179, 48
  STRXui killed renamable $x16, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  $w8 = MOVZWi 200, 0
  $x16 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  STURWi killed renamable $w8, $fp, -56 :: (store 4 into %ir.niter)
  $x8 = MOVZXi 102, 0
  $x8 = MOVKXi $x8(tied-def 0), 102, 32
  STRXui killed renamable $x8, renamable $x16, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  $w8 = MOVZWi 102, 0
  STRWui killed renamable $w8, killed renamable $x16, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

bb.10.if.end30:
; predecessors: %bb.9, %bb.8
  successors: %bb.13(0x10000000), %bb.11(0x70000000); %bb.13(12.50%), %bb.11(87.50%)

  $x8 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.17)
  renamable $w19 = LDRWui killed renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_20__Size___4d
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_20__Size___4d, 0
  $w2 = ORRWrs $wzr, $w20, 0
  $w3 = ORRWrs $wzr, $w19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 12, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, 1, 4, $fp, -344, killed renamable $w20, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4), (load 4 from %stack.17)
  renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  renamable $x8 = ADRP target-flags(aarch64-page) @dt
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  STRDui renamable $d0, $sp, 17 :: (store 8 into %stack.17)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_21__Iteration
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_21__Iteration, 0
  $w1 = ORRWrs $wzr, $w19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 13, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, killed renamable $w19, 1, 8, $fp, -344, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4), (load 8 from %stack.17)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_22___
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_22___, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 14, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  $x16 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  renamable $w8 = LDRWui renamable $x16, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  dead $wzr = SUBSWri killed renamable $w8, 102, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit $nzcv

bb.11.if.end30:
; predecessors: %bb.10
  successors: %bb.13(0x12492492), %bb.12(0x6db6db6e); %bb.13(14.29%), %bb.12(85.71%)
  liveins: $x16
  renamable $w8 = LDRWui renamable $x16, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  dead $wzr = SUBSWri killed renamable $w8, 102, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit $nzcv

bb.12.if.end30:
; predecessors: %bb.11
  successors: %bb.13(0x2aaaaaab), %bb.15(0x55555555); %bb.13(33.33%), %bb.15(66.67%)
  liveins: $x16
  renamable $w8 = LDRWui killed renamable $x16, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  dead $wzr = SUBSWri killed renamable $w8, 103, 0, implicit-def $nzcv
  Bcc 11, %bb.15, implicit $nzcv

bb.13.if.then38:
; predecessors: %bb.10, %bb.11, %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  $x8 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.17)
  renamable $w19 = LDRWui killed renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_23___d___d___
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_23___d___d___, 0
  $w2 = ORRWrs $wzr, $w20, 0
  $w3 = ORRWrs $wzr, $w19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 15, 0, 0, $fp, -36, 1, 4, $fp, -344, killed renamable $w20, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.0.retval, align 4), (load 4 from %stack.17)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_24__Problem_s
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_24__Problem_s, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 16, 0, 0, $fp, -36, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.0.retval, align 4)

bb.14.if.end154:
; predecessors: %bb.30, %bb.37, %bb.13

  STURWi $wzr, $fp, -36 :: (store 4 into %ir.retval)
  $w8 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 60 :: (load 8 from %stack.39), (load 8 from %stack.38)
  $x20, $x19 = frame-destroy LDPXi $sp, 58 :: (load 8 from %stack.41), (load 8 from %stack.40)
  $sp = frame-destroy ADDXri $sp, 496, 0
  RET undef $lr, implicit $w8

bb.15.if.end41:
; predecessors: %bb.12
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  BL @set_constants, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 17, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  $w8 = MOVZWi 1, 0

bb.16.for.cond:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)
  liveins: $w8
  STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  $w8 = ORRWrs $wzr, killed renamable $w8, 0
  dead $wzr = SUBSWri killed renamable $w8, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.18, implicit $nzcv

bb.17.for.body:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  $w0 = ORRWrs $wzr, $w19, 0
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 18, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  B %bb.16

bb.18.for.end:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  BL @initialize, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 19, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  BL @exact_rhs, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 20, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  BL @adi, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 21, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  BL @initialize, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 22, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  $w8 = MOVZWi 1, 0

bb.19.for.cond43:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)
  liveins: $w8
  STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  $w8 = ORRWrs $wzr, killed renamable $w8, 0
  dead $wzr = SUBSWri killed renamable $w8, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.21, implicit $nzcv

bb.20.for.body45:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  $w0 = ORRWrs $wzr, $w19, 0
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 23, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  B %bb.19

bb.21.for.end48:
; predecessors: %bb.19
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  $w0 = MOVZWi 1, 0
  $w19 = MOVZWi 1, 0
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 24, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  STURWi killed renamable $w19, $fp, -60 :: (store 4 into %ir.step)
  $w19 = MOVZWi 26215, 0
  $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19
  $w20 = MOVZWi 20, 0

bb.22.for.cond49:
; predecessors: %bb.21, %bb.26
  successors: %bb.23(0x7c000000), %bb.27(0x04000000); %bb.23(96.88%), %bb.27(3.12%)
  liveins: $w20, $x19
  renamable $w8, renamable $w16 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 12, %bb.27, implicit $nzcv

bb.23.for.body51:
; predecessors: %bb.22
  successors: %bb.25(0x20000000), %bb.24(0x60000000); %bb.25(25.00%), %bb.24(75.00%)
  liveins: $w20, $x19
  renamable $x8 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  renamable $x16 = MADDXrrr renamable $x8, renamable $x19, $xzr
  renamable $x17 = UBFMXri renamable $x16, 63, 63
  renamable $x16 = SBFMXri killed renamable $x16, 35, 63
  $w16 = ADDWrs renamable $w16, renamable $w17, 0, implicit killed $x17, implicit killed $x16
  renamable $w16 = MSUBWrrr killed renamable $w16, renamable $w20, renamable $w8
  CBZW killed renamable $w16, %bb.25

bb.24.for.body51:
; predecessors: %bb.23
  successors: %bb.25(0x2aaaaaab), %bb.26(0x55555555); %bb.25(33.33%), %bb.26(66.67%)
  liveins: $w20, $x8, $x19
  dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, implicit killed $x8
  Bcc 1, %bb.26, implicit $nzcv

bb.25.if.then55:
; predecessors: %bb.23, %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)
  liveins: $w20
  renamable $w19 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_25__Time_step
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_25__Time_step, 0
  $w1 = ORRWrs $wzr, $w19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 25, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  $w19 = MOVZWi 26215, 0
  $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19

bb.26.if.end57:
; predecessors: %bb.24, %bb.25
  successors: %bb.22(0x80000000); %bb.22(100.00%)
  liveins: $w20, $x19
  BL @adi, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 26, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -60 :: (store 4 into %ir.step)
  B %bb.22

bb.27.for.end60:
; predecessors: %bb.22
  successors: %bb.28(0x50000000), %bb.29(0x30000000); %bb.28(62.50%), %bb.29(37.50%)

  $w0 = MOVZWi 1, 0
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 27, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  $w0 = MOVZWi 1, 0
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  PCN_STACKMAP 28, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  $x20 = SUBXri $fp, 208, 0
  STRDui killed renamable $d0, renamable $x20, 14 :: (store 8 into %ir.tmax)
  $x1 = SUBXri $fp, 216, 0
  $x2 = SUBXri $fp, 212, 0
  $w0 = ORRWrs $wzr, $w19, 0
  BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit-def $sp
  PCN_STACKMAP 29, 0, 0, $fp, -216, 0, $fp, -52, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -56, 0, $fp, -36, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 0, $fp, -212, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.13.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.8.n3), (load 8 from %stack.6.navg), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.12.verified, align 4)
  $x8 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  renamable $x16 = ADRP target-flags(aarch64-page) %const.0
  renamable $w17, renamable $w18 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  renamable $d0 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  renamable $w8 = LDRWui killed renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  renamable $d1 = SCVTFUWDri renamable $w17
  renamable $d2 = SCVTFUWDri renamable $w18
  renamable $d1 = FMULDrr killed renamable $d1, killed renamable $d2
  renamable $d2 = SCVTFUWDri renamable $w8
  renamable $d1 = FMULDrr killed renamable $d1, killed renamable $d2
  renamable $d2 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
  $w16 = ADDWrs killed renamable $w17, killed renamable $w18, 0
  $w8 = ADDWrs killed renamable $w16, killed renamable $w8, 0
  STRDui killed renamable $d1, renamable $x20, 15 :: (store 8 into %ir.n3)
  renamable $d1 = SCVTFUWDri killed renamable $w8
  renamable $d0 = FDIVDrr killed renamable $d1, killed renamable $d0
  FCMPDri killed renamable $d2, implicit-def $nzcv
  STRDui killed renamable $d0, renamable $x20, 17 :: (store 8 into %ir.navg)
  Bcc 0, %bb.29, implicit $nzcv

bb.28.if.then70:
; predecessors: %bb.27
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $x20
  renamable $s0 = LDURSi $fp, -56, implicit-def $d0 :: (dereferenceable load 4 from %ir.niter)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  renamable $d1, renamable $d2 = LDPDi renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax), (dereferenceable load 8 from %ir.n3)
  renamable $d3 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  renamable $d4 = LDRDui renamable $x20, 17 :: (dereferenceable load 8 from %ir.navg)
  renamable $d5 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  renamable $d6 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  renamable $d2 = FMULDrr killed renamable $d2, killed renamable $d5
  renamable $d5 = FMULDrr renamable $d4, renamable $d4
  renamable $d5 = FMULDrr killed renamable $d5, killed renamable $d6
  renamable $d6 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  renamable $q0 = SSHLLv2i32_shift killed renamable $d0, 0
  renamable $d0 = SCVTFv1i64 renamable $d0, implicit killed $q0
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d3
  renamable $d2 = FADDDrr killed renamable $d2, killed renamable $d5
  renamable $d3 = FMULDrr killed renamable $d4, killed renamable $d6
  renamable $d2 = FADDDrr killed renamable $d2, killed renamable $d3
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d2
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1
  STRDui killed renamable $d0, renamable $x20, 16 :: (store 8 into %ir.mflops)
  B %bb.30

bb.29.if.else80:
; predecessors: %bb.27
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $x20
  STRXui $xzr, renamable $x20, 16 :: (store 8 into %ir.mflops)

bb.30.if.end81:
; predecessors: %bb.29, %bb.28
  successors: %bb.31(0x50000000), %bb.14(0x30000000); %bb.31(62.50%), %bb.14(37.50%)
  liveins: $x20
  renamable $w1 = LDURSBWi $fp, -216 :: (dereferenceable load 1 from %ir.Class, align 4)
  STRWui renamable $w1, $sp, 32 :: (store 4 into %stack.18)
  $x8 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  renamable $w5 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  renamable $d0 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d1 = LDRDui killed renamable $x20, 16 :: (dereferenceable load 8 from %ir.mflops)
  STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.21), (store 8 into %stack.22)
  renamable $w2, renamable $w3 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  STPWi renamable $w3, renamable $w2, $sp, 29 :: (store 4 into %stack.19), (store 4 into %stack.20)
  renamable $w4 = LDRWui killed renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  renamable $w20 = LDURWi $fp, -212 :: (dereferenceable load 4 from %ir.verified)
  STRWui renamable $w20, $sp, 34 :: (store 4 into %stack.17)
  $x8 = ADRP target-flags(aarch64-page) @bt__str_36__none__
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_36__none__, 0
  $x16 = ADRP target-flags(aarch64-page) @bt__str_35__O3__mcmod
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_35__O3__mcmod, 0
  $x17 = ADRP target-flags(aarch64-page) @bt__str_34__g__Wall__
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_34__g__Wall__, 0
  $x18 = ADRP target-flags(aarch64-page) @bt__str_33__I___commo
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_33__I___commo, 0
  $x0 = ADRP target-flags(aarch64-page) @bt__str_32__lm_
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_32__lm_, 0
  $x19 = ADRP target-flags(aarch64-page) @bt__str_31___CC__
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_31___CC__, 0
  $x6 = ADRP target-flags(aarch64-page) @bt__str_30_gcc_
  renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_30_gcc_, 0
  $x7 = ADRP target-flags(aarch64-page) @bt__str_29_03_Nov_201
  renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_29_03_Nov_201, 0
  STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
  $x8 = ADRP target-flags(aarch64-page) @bt__str_28_3_3_1_
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_28_3_3_1_, 0
  STRWui killed renamable $w20, $sp, 2 :: (store 4 into stack + 8)
  STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  $x16 = ADRP target-flags(aarch64-page) @bt__str_27___________
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_27___________, 0
  STPXi renamable $x19, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_26_BT_
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_26_BT_, 0
  STPXi renamable $x7, renamable $x6, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  STRXui killed renamable $x8, $sp, 2 :: (store 8 into stack + 16)
  STRXui killed renamable $x16, $sp, 0 :: (store 8 into stack)
  $w20 = ORRWrs $wzr, $w4, 0
  $w19 = ORRWrs $wzr, $w5, 0
  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp
  PCN_STACKMAP 30, 0, 0, $fp, -52, 0, $fp, -36, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 1, 4, $fp, -352, 1, 4, $fp, -360, 1, 4, $fp, -364, killed renamable $w20, killed renamable $w19, 1, 8, $fp, -376, 1, 8, $fp, -384, 1, 4, $fp, -344, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 4 from %stack.17), (load 4 from %stack.18), (load 4 from %stack.19), (load 4 from %stack.20), (load 8 from %stack.21), (load 8 from %stack.22)
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.14

bb.31.if.then82:
; predecessors: %bb.30
  successors: %bb.32(0x80000000); %bb.32(100.00%)

  $w8 = MOVZWi 1, 0
  STURWi killed renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  $x20 = SUBXri $fp, 208, 0

bb.32.for.cond83:
; predecessors: %bb.31, %bb.33
  successors: %bb.33(0x7c000000), %bb.34(0x04000000); %bb.33(96.88%), %bb.34(3.12%)
  liveins: $x20
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.34, implicit $nzcv

bb.33.for.body86:
; predecessors: %bb.32
  successors: %bb.32(0x80000000); %bb.32(100.00%)
  liveins: $x20
  renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  $w0 = ORRWrs $wzr, $w19, 0
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  PCN_STACKMAP 31, 0, 0, $fp, -52, 0, $fp, -36, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  renamable $w16 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  STRDroX killed renamable $d0, renamable $x20, killed renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx88)
  renamable $w8 = nsw ADDWri killed renamable $w16, 1, 0
  STURWi killed renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  B %bb.32

bb.34.for.end91:
; predecessors: %bb.32
  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

  $x16 = SUBXri $fp, 208, 0
  renamable $d0 = LDRDui renamable $x16, 14 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri killed renamable $d0, implicit-def $nzcv
  Bcc 1, %bb.36, implicit $nzcv

bb.35.if.then94:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $x16
  $x8 = MOVZXi 16368, 48
  STRXui killed renamable $x8, killed renamable $x16, 14 :: (store 8 into %ir.tmax)

bb.36.if.end95:
; predecessors: %bb.34, %bb.35
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  $x0 = ADRP target-flags(aarch64-page) @bt__str_37___SECTION_
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_37___SECTION_, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 32, 0, 0, $fp, -52, 0, $fp, -36, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16)
  $w8 = MOVZWi 1, 0
  renamable $x16 = ADRP target-flags(aarch64-page) %const.5
  renamable $d1 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  STURWi killed renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  STRDui renamable $d1, $sp, 17 :: (store 8 into %stack.17)

bb.37.for.cond97:
; predecessors: %bb.36, %bb.44
  successors: %bb.38(0x7c000000), %bb.14(0x04000000); %bb.38(96.88%), %bb.14(3.12%)
  liveins: $d1
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.14, implicit $nzcv

bb.38.for.body100:
; predecessors: %bb.37
  successors: %bb.39(0x40000000), %bb.40(0x40000000); %bb.39(50.00%), %bb.40(50.00%)
  liveins: $d1
  renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  renamable $x8 = UBFMXri killed renamable $x8, 61, 60
  $x16 = SUBXri $fp, 208, 0
  renamable $d0 = LDRDroX killed renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx106)
  $x20 = SUBXri $fp, 208, 0
  renamable $d2 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
  $x16 = ADDXri $sp, 160, 0
  renamable $x19 = LDRXroX killed renamable $x16, killed renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx102)
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d1
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2
  STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_38_____8s__9_
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_38_____8s__9_, 0
  $x1 = ORRXrs $xzr, $x19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 33, 0, 1, 8, $fp, -360, 0, $fp, -52, 0, $fp, -36, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, killed renamable $x19, 1, 8, $fp, -352, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.18), (load 8 from %stack.19)
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 5, 0, implicit-def $nzcv
  Bcc 1, %bb.40, implicit $nzcv

bb.39.if.then112:
; predecessors: %bb.38
  successors: %bb.44(0x80000000); %bb.44(100.00%)
  liveins: $x20
  renamable $d0, renamable $d1 = LDPDi renamable $x20, 2 :: (dereferenceable load 8 from %ir.arrayidx113, align 16), (dereferenceable load 8 from %ir.arrayidx114)
  renamable $d2 = LDRDui renamable $x20, 4 :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d2 = FADDDrr killed renamable $d0, killed renamable $d2
  STRDui renamable $d2, renamable $x20, 13 :: (store 8 into %ir.t)
  renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  renamable $d0 = FMULDrr renamable $d2, killed renamable $d0
  renamable $d1 = FDIVDrr killed renamable $d0, killed renamable $d1
  STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
  $x1 = ADRP target-flags(aarch64-page) @bt__str_40_sub_rhs_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_40_sub_rhs_, 0
  $q0 = ORRv16i8 $q2, killed $q2
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 34, 0, 1, 8, $fp, -360, 0, $fp, -52, 0, $fp, -36, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 1, 8, $fp, -352, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.18), (load 8 from %stack.19)
  renamable $d0 = LDRDui renamable $x20, 5 :: (dereferenceable load 8 from %ir.arrayidx121)
  renamable $d1, renamable $d2 = LDPDi renamable $x20, 13 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  renamable $d3 = FSUBDrr killed renamable $d0, killed renamable $d1
  STRDui renamable $d3, killed renamable $x20, 13 :: (store 8 into %ir.t)
  renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  renamable $d0 = FMULDrr renamable $d3, killed renamable $d0
  renamable $d1 = FDIVDrr killed renamable $d0, killed renamable $d2
  STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
  $x1 = ADRP target-flags(aarch64-page) @bt__str_41_rest_rhs_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_41_rest_rhs_, 0
  $q0 = ORRv16i8 $q3, killed $q3
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 35, 0, 1, 8, $fp, -360, 0, $fp, -52, 0, $fp, -36, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 1, 8, $fp, -352, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.18), (load 8 from %stack.19)
  B %bb.44

bb.40.if.else126:
; predecessors: %bb.38
  successors: %bb.41(0x40000000), %bb.42(0x40000000); %bb.41(50.00%), %bb.42(50.00%)

  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 8, 0, implicit-def $nzcv
  Bcc 1, %bb.42, implicit $nzcv

bb.41.if.then129:
; predecessors: %bb.40
  successors: %bb.44(0x80000000); %bb.44(100.00%)

  $x8 = SUBXri $fp, 208, 0
  renamable $d0, renamable $d1 = LDPDi renamable $x8, 8 :: (dereferenceable load 8 from %ir.arrayidx130, align 16), (dereferenceable load 8 from %ir.arrayidx131)
  renamable $d2 = LDRDui renamable $x8, 10 :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = LDRDui renamable $x8, 14 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d2 = FSUBDrr killed renamable $d0, killed renamable $d2
  STRDui renamable $d2, killed renamable $x8, 13 :: (store 8 into %ir.t)
  renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  renamable $d0 = FMULDrr renamable $d2, killed renamable $d0
  renamable $d1 = FDIVDrr killed renamable $d0, killed renamable $d1
  STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
  $x1 = ADRP target-flags(aarch64-page) @bt__str_42_sub_zsol_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_42_sub_zsol_, 0
  $q0 = ORRv16i8 $q2, killed $q2
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 36, 0, 1, 8, $fp, -360, 0, $fp, -52, 0, $fp, -36, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 1, 8, $fp, -352, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.18), (load 8 from %stack.19)
  B %bb.44

bb.42.if.else138:
; predecessors: %bb.40
  successors: %bb.43(0x40000000), %bb.44(0x40000000); %bb.43(50.00%), %bb.44(50.00%)

  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.44, implicit $nzcv

bb.43.if.then141:
; predecessors: %bb.42
  successors: %bb.44(0x80000000); %bb.44(100.00%)

  $x8 = SUBXri $fp, 208, 0
  renamable $d0, renamable $d1 = LDPDi renamable $x8, 9 :: (dereferenceable load 8 from %ir.arrayidx142), (dereferenceable load 8 from %ir.arrayidx143, align 16)
  renamable $d2 = LDRDui renamable $x8, 14 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d3 = FADDDrr killed renamable $d0, killed renamable $d1
  STRDui renamable $d3, killed renamable $x8, 13 :: (store 8 into %ir.t)
  renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  renamable $d0 = FMULDrr renamable $d3, killed renamable $d0
  renamable $d1 = FDIVDrr killed renamable $d0, killed renamable $d2
  STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
  $x1 = ADRP target-flags(aarch64-page) @bt__str_43_redist_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_43_redist_, 0
  $q0 = ORRv16i8 $q3, killed $q3
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 37, 0, 1, 8, $fp, -360, 0, $fp, -52, 0, $fp, -36, 0, $fp, -104, 0, $fp, -320, 0, $fp, -96, 0, $fp, -208, 1, 8, $fp, -352, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.10.t), (load 8 from %stack.14.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.11.trecs, align 16), (load 8 from %stack.18), (load 8 from %stack.19)

bb.44.for.inc151:
; predecessors: %bb.42, %bb.43, %bb.41, %bb.39
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  renamable $d1 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  B %bb.37

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: $x8 = SUBXri $fp, 208, 0
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   $x8 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(1):   STPWi renamable $w0, $wzr, $fp, -10 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Anti Latency=0
SU(2):   STRXui renamable $x1, renamable $x8, 20 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Anti Latency=0
SU(3):   $x0 = ADRP target-flags(aarch64-page) @bt__str_timer_flag
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(1): Anti Latency=0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_timer_flag, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x1 = ADRP target-flags(aarch64-page) @bt__str_1_r_
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(2): Anti Latency=0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x1
SU(6):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = SUBXri $fp, 208, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STPWi renamable $w0, $wzr, $fp, -10 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STRXui renamable $x1, renamable $x8, 20 :: (store 8 into %ir.argv.addr)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @bt__str_timer_flag
  Ready @3c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x1 = ADRP target-flags(aarch64-page) @bt__str_1_r_
  Ready @4c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 3
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_timer_flag, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_, 0
  Ready @6c
  TopQ.A TopLatency SU(6) 2c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $x8 = SUBXri $fp, 208, 0
SU(1):   STPWi renamable $w0, $wzr, $fp, -10 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
SU(2):   STRXui renamable $x1, renamable $x8, 20 :: (store 8 into %ir.argv.addr)
SU(3):   $x0 = ADRP target-flags(aarch64-page) @bt__str_timer_flag
SU(5):   $x1 = ADRP target-flags(aarch64-page) @bt__str_1_r_
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_timer_flag, 0
SU(6):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_, 0

********** MI Scheduling **********
main:%bb.0 entry
  From: frame-setup STPXi killed $x20, killed $x19, $sp, 58 :: (store 8 into %stack.41), (store 8 into %stack.40)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x20, $x19, $sp, 58 :: (store 8 into %stack.41), (store 8 into %stack.40)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 60 :: (store 8 into %stack.39), (store 8 into %stack.38)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 480, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x20, $x19, $sp, 58 :: (store 8 into %stack.41), (store 8 into %stack.40)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 60 :: (store 8 into %stack.39), (store 8 into %stack.38)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 480, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x20, $x19, $sp, 58 :: (store 8 into %stack.41), (store 8 into %stack.40)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 60 :: (store 8 into %stack.39), (store 8 into %stack.38)
SU(2):   $fp = frame-setup ADDXri $sp, 480, 0

Fixup kills for %bb.0
********** MI Scheduling **********
main:%bb.1 if.then
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 33
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x8
SU(1):   $w16 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(15): Out  Latency=1
    SU(12): Data Latency=1 Reg=$w16
SU(2):   $x17 = ADRP target-flags(aarch64-page) @bt__str_2_total_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x17
SU(3):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_2_total_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x17
  Successors:
    SU(18): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x17
SU(4):   $x18 = ADRP target-flags(aarch64-page) @bt__str_3_rhsx_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x18
SU(5):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_3_rhsx_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x18
  Successors:
    SU(21): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x18
SU(6):   $x0 = ADRP target-flags(aarch64-page) @bt__str_4_rhsy_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
SU(7):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_4_rhsy_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
  Successors:
    SU(24): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x0
SU(8):   $x1 = ADRP target-flags(aarch64-page) @bt__str_5_rhsz_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x1
SU(9):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_5_rhsz_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x1
  Successors:
    SU(20): Data Latency=1 Reg=$x1
SU(10):   $x2 = ADRP target-flags(aarch64-page) @bt__str_6_rhs_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x2
SU(11):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_6_rhs_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x2
  Successors:
    SU(23): Data Latency=1 Reg=$x2
SU(12):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$w16
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(15): Anti Latency=0
    SU(13): Anti Latency=0
SU(13):   $x8 = ADRP target-flags(aarch64-page) @bt__str_7_xsolve_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(12): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x8
SU(14):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_7_xsolve_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x8
  Successors:
    SU(29): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x8
SU(15):   $x16 = ADRP target-flags(aarch64-page) @bt__str_8_ysolve_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(12): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x16
SU(16):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_8_ysolve_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x16
  Successors:
    SU(26): Data Latency=1 Reg=$x16
SU(17):   STPXi renamable $x17, renamable $x18, $sp, 21 :: (store 8 into %ir.arrayidx), (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=$x18
    SU(3): Data Latency=1 Reg=$x17
  Successors:
    SU(18): Anti Latency=0
    SU(21): Anti Latency=0
SU(18):   $x17 = ADRP target-flags(aarch64-page) @bt__str_9_zsolve_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(17): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x17
SU(19):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_9_zsolve_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x17
  Successors:
    SU(26): Data Latency=1 Reg=$x17
SU(20):   STPXi renamable $x0, renamable $x1, $sp, 23 :: (store 8 into %ir.arrayidx2), (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(9): Data Latency=1 Reg=$x1
    SU(7): Data Latency=1 Reg=$x0
  Successors:
    SU(24): Anti Latency=0
SU(21):   $x18 = ADRP target-flags(aarch64-page) @bt__str_10_redist1_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(17): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x18
SU(22):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_10_redist1_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x18
  Successors:
    SU(28): Data Latency=1 Reg=$x18
SU(23):   STPXi renamable $x2, renamable $x8, $sp, 25 :: (store 8 into %ir.arrayidx4), (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(14): Data Latency=1 Reg=$x8
    SU(11): Data Latency=1 Reg=$x2
  Successors:
    SU(29): Anti Latency=0
SU(24):   $x0 = ADRP target-flags(aarch64-page) @bt__str_11_redist2_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(20): Anti Latency=0
    SU(7): Out  Latency=1
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x0
SU(25):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_11_redist2_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x0
  Successors:
    SU(32): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x0
SU(26):   STPXi renamable $x16, renamable $x17, $sp, 27 :: (store 8 into %ir.arrayidx6), (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=$x17
    SU(16): Data Latency=1 Reg=$x16
SU(27):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(32): Data Latency=4 Reg=$x19
SU(28):   STPXi renamable $x18, renamable $x0, $sp, 29 :: (store 8 into %ir.arrayidx8), (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(25): Data Latency=1 Reg=$x0
    SU(22): Data Latency=1 Reg=$x18
  Successors:
    SU(32): Anti Latency=0
SU(29):   $x8 = ADRP target-flags(aarch64-page) @bt__str_12_add_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(23): Anti Latency=0
    SU(14): Out  Latency=1
  Successors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x8
SU(30):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_12_add_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x8
  Successors:
    SU(31): Data Latency=1 Reg=$x8
SU(31):   STRXui renamable $x8, $sp, 31 :: (store 8 into %ir.arrayidx10)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(30): Data Latency=1 Reg=$x8
SU(32):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(28): Anti Latency=0
    SU(27): Data Latency=4 Reg=$x19
    SU(25): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(32): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 6 8 10 27 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 1 2 4 6 8 10 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(27) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) $w16 = MOVZWi 1, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 10 2 4 6 8 12 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(27) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x17 = ADRP target-flags(aarch64-page) @bt__str_2_total_
  Ready @2c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 10 12 4 6 8 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(27) ORDER                              
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x18 = ADRP target-flags(aarch64-page) @bt__str_3_rhsx_
  Ready @3c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 10 12 3 6 8 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(27) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x0 = ADRP target-flags(aarch64-page) @bt__str_4_rhsy_
  Ready @4c
  TopQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 10 12 3 5 8 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(27) ORDER                              
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x1 = ADRP target-flags(aarch64-page) @bt__str_5_rhsz_
  Ready @5c
  TopQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 10 12 3 5 7 9 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(27) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(27) renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  Ready @6c
  TopQ.A BotLatency SU(27) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 12 3 5 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_2_total_, 0
  Ready @7c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 12 7 5 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_3_rhsx_, 0
  Ready @8c
  TopQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 12 7 17 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_4_rhsy_, 0
  Ready @9c
  TopQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 12 17 
  TopQ.A RemainingLatency 0 + 10c > CritPath 5
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_5_rhsz_, 0
  Ready @10c
  TopQ.A BotLatency SU(9) 4c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 10 12 20 
  TopQ.A RemainingLatency 0 + 11c > CritPath 5
  Cand SU(17) ORDER                              
  Cand SU(10) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x2 = ADRP target-flags(aarch64-page) @bt__str_6_rhs_
  Ready @11c
  TopQ.A BotLatency SU(10) 4c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 20 12 11 
  TopQ.A RemainingLatency 0 + 12c > CritPath 5
  Cand SU(17) ORDER                              
  Cand SU(12) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @12c
  TopQ.A BotLatency SU(12) 4c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 20 11 15 13 
  TopQ.A RemainingLatency 0 + 13c > CritPath 5
  Cand SU(17) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(13) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x8 = ADRP target-flags(aarch64-page) @bt__str_7_xsolve_
  Ready @13c
  TopQ.A BotLatency SU(13) 4c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 20 11 15 14 
  TopQ.A RemainingLatency 0 + 14c > CritPath 5
  Cand SU(17) ORDER                              
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_6_rhs_, 0
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 20 14 15 
  TopQ.A RemainingLatency 0 + 15c > CritPath 5
  Cand SU(17) ORDER                              
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_7_xsolve_, 0
  Ready @15c
  TopQ.A TopLatency SU(14) 2c
  TopQ.A BotLatency SU(14) 3c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 20 15 23 
  TopQ.A RemainingLatency 0 + 16c > CritPath 5
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) STPXi renamable $x17, renamable $x18, $sp, 21 :: (store 8 into %ir.arrayidx), (store 8 into %ir.arrayidx1, align 16)
  Ready @16c
  TopQ.A BotLatency SU(17) 3c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 20 15 18 21 
  TopQ.A RemainingLatency 0 + 17c > CritPath 5
  Cand SU(23) ORDER                              
  Cand SU(20) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) STPXi renamable $x0, renamable $x1, $sp, 23 :: (store 8 into %ir.arrayidx2), (store 8 into %ir.arrayidx3, align 16)
  Ready @17c
  TopQ.A BotLatency SU(20) 3c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 21 15 18 24 
  TopQ.A RemainingLatency 0 + 18c > CritPath 5
  Cand SU(23) ORDER                              
  Cand SU(21) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) $x18 = ADRP target-flags(aarch64-page) @bt__str_10_redist1_
  Ready @18c
  TopQ.A BotLatency SU(21) 3c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 24 15 18 22 
  TopQ.A RemainingLatency 0 + 19c > CritPath 5
  Cand SU(23) ORDER                              
  Cand SU(24) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) $x0 = ADRP target-flags(aarch64-page) @bt__str_11_redist2_
  Ready @19c
  TopQ.A BotLatency SU(24) 3c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 22 15 18 25 
  TopQ.A RemainingLatency 0 + 20c > CritPath 5
  Cand SU(23) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(15) ORDER                              
Pick Top ORDER     
Scheduling SU(15) $x16 = ADRP target-flags(aarch64-page) @bt__str_8_ysolve_
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 22 25 18 16 
  TopQ.A RemainingLatency 0 + 21c > CritPath 5
  Cand SU(23) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) $x17 = ADRP target-flags(aarch64-page) @bt__str_9_zsolve_
  Ready @21c
  TopQ.A BotLatency SU(18) 2c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 22 25 16 19 
  TopQ.A RemainingLatency 0 + 22c > CritPath 5
  Cand SU(23) ORDER                              
  Cand SU(22) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(22) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_10_redist1_, 0
  Ready @22c
  TopQ.A TopLatency SU(22) 3c
  TopQ.A BotLatency SU(22) 2c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 19 25 16 
  TopQ.A RemainingLatency 0 + 23c > CritPath 5
  Cand SU(23) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(23) STPXi renamable $x2, renamable $x8, $sp, 25 :: (store 8 into %ir.arrayidx4), (store 8 into %ir.arrayidx5, align 16)
  Ready @23c
  TopQ.A BotLatency SU(23) 2c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 19 25 29 
  TopQ.A RemainingLatency 0 + 24c > CritPath 5
  Cand SU(16) ORDER                              
  Cand SU(25) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_11_redist2_, 0
  Ready @24c
  TopQ.A BotLatency SU(25) 2c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 19 29 28 
  TopQ.A RemainingLatency 0 + 25c > CritPath 5
  Cand SU(16) ORDER                              
  Cand SU(29) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(29) $x8 = ADRP target-flags(aarch64-page) @bt__str_12_add_
  Ready @25c
  TopQ.A BotLatency SU(29) 2c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 19 28 30 
  TopQ.A RemainingLatency 0 + 26c > CritPath 5
  Cand SU(16) ORDER                              
Pick Top ORDER     
Scheduling SU(16) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_8_ysolve_, 0
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 19 28 
  TopQ.A RemainingLatency 0 + 27c > CritPath 5
  Cand SU(30) ORDER                              
  Cand SU(19) ORDER                              
Pick Top ORDER     
Scheduling SU(19) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_9_zsolve_, 0
  Ready @27c
  TopQ.A BotLatency SU(19) 1c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 28 26 
  TopQ.A RemainingLatency 0 + 28c > CritPath 5
  Cand SU(30) ORDER                              
  Cand SU(28) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(28) STPXi renamable $x18, renamable $x0, $sp, 29 :: (store 8 into %ir.arrayidx8), (store 8 into %ir.arrayidx9, align 16)
  Ready @28c
  TopQ.A TopLatency SU(28) 4c
  TopQ.A BotLatency SU(28) 1c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 26 32 
  TopQ.A RemainingLatency 0 + 29c > CritPath 5
  Cand SU(30) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(30) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_12_add_, 0
  Ready @29c
  TopQ.A BotLatency SU(30) 1c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 26 31 
  TopQ.A RemainingLatency 0 + 30c > CritPath 5
  Cand SU(32) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(32) $x0 = ORRXrs $xzr, $x19, 0
  Ready @30c
  TopQ.A BotLatency SU(32) 1c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 26 
  TopQ.A RemainingLatency 0 + 31c > CritPath 5
  Cand SU(31) ORDER                              
  Cand SU(26) ORDER                              
Pick Top ORDER     
Scheduling SU(26) STPXi renamable $x16, renamable $x17, $sp, 27 :: (store 8 into %ir.arrayidx6), (store 8 into %ir.arrayidx7, align 16)
  Ready @31c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 
Pick Top ONLY1     
Scheduling SU(31) STRXui renamable $x8, $sp, 31 :: (store 8 into %ir.arrayidx10)
  Ready @32c
  TopQ.A TopLatency SU(31) 5c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   $w16 = MOVZWi 1, 0
SU(2):   $x17 = ADRP target-flags(aarch64-page) @bt__str_2_total_
SU(4):   $x18 = ADRP target-flags(aarch64-page) @bt__str_3_rhsx_
SU(6):   $x0 = ADRP target-flags(aarch64-page) @bt__str_4_rhsy_
SU(8):   $x1 = ADRP target-flags(aarch64-page) @bt__str_5_rhsz_
SU(27):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
SU(3):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_2_total_, 0
SU(5):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_3_rhsx_, 0
SU(7):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_4_rhsy_, 0
SU(9):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_5_rhsz_, 0
SU(10):   $x2 = ADRP target-flags(aarch64-page) @bt__str_6_rhs_
SU(12):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
SU(13):   $x8 = ADRP target-flags(aarch64-page) @bt__str_7_xsolve_
SU(11):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_6_rhs_, 0
SU(14):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_7_xsolve_, 0
SU(17):   STPXi renamable $x17, renamable $x18, $sp, 21 :: (store 8 into %ir.arrayidx), (store 8 into %ir.arrayidx1, align 16)
SU(20):   STPXi renamable $x0, renamable $x1, $sp, 23 :: (store 8 into %ir.arrayidx2), (store 8 into %ir.arrayidx3, align 16)
SU(21):   $x18 = ADRP target-flags(aarch64-page) @bt__str_10_redist1_
SU(24):   $x0 = ADRP target-flags(aarch64-page) @bt__str_11_redist2_
SU(15):   $x16 = ADRP target-flags(aarch64-page) @bt__str_8_ysolve_
SU(18):   $x17 = ADRP target-flags(aarch64-page) @bt__str_9_zsolve_
SU(22):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_10_redist1_, 0
SU(23):   STPXi renamable $x2, renamable $x8, $sp, 25 :: (store 8 into %ir.arrayidx4), (store 8 into %ir.arrayidx5, align 16)
SU(25):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_11_redist2_, 0
SU(29):   $x8 = ADRP target-flags(aarch64-page) @bt__str_12_add_
SU(16):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_8_ysolve_, 0
SU(19):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_9_zsolve_, 0
SU(28):   STPXi renamable $x18, renamable $x0, $sp, 29 :: (store 8 into %ir.arrayidx8), (store 8 into %ir.arrayidx9, align 16)
SU(30):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_12_add_, 0
SU(32):   $x0 = ORRXrs $xzr, $x19, 0
SU(26):   STPXi renamable $x16, renamable $x17, $sp, 27 :: (store 8 into %ir.arrayidx6), (store 8 into %ir.arrayidx7, align 16)
SU(31):   STRXui renamable $x8, $sp, 31 :: (store 8 into %ir.arrayidx10)

Fixup kills for %bb.1
********** MI Scheduling **********
main:%bb.2 if.else
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

Fixup kills for %bb.2
********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @bt__str_14_inputbt_da
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @bt__str_14_inputbt_da
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_14_inputbt_da, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @bt__str_1_r_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @bt__str_14_inputbt_da
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @bt__str_1_r_
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_14_inputbt_da, 0
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_, 0
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @bt__str_14_inputbt_da
SU(2):   $x1 = ADRP target-flags(aarch64-page) @bt__str_1_r_
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_14_inputbt_da, 0
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_1_r_, 0

********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @bt__str_13____NAS_Par
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @bt__str_13____NAS_Par
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_13____NAS_Par, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @bt__str_13____NAS_Par
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_13____NAS_Par, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @bt__str_13____NAS_Par
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_13____NAS_Par, 0

Fixup kills for %bb.3
********** MI Scheduling **********
main:%bb.4 if.then15
  From: renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$x19
SU(1):   $x1 = ADRP target-flags(aarch64-page) @bt__str_16__d_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_16__d_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = SUBXri $fp, 56, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x1 = ADRP target-flags(aarch64-page) @bt__str_16__d_
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_16__d_, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x2 = SUBXri $fp, 56, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x0 = ORRXrs $xzr, $x19, 0
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x1 = ADRP target-flags(aarch64-page) @bt__str_16__d_
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_16__d_, 0
SU(3):   $x2 = SUBXri $fp, 56, 0
SU(4):   $x0 = ORRXrs $xzr, $x19, 0

********** MI Scheduling **********
main:%bb.4 if.then15
  From: $x0 = ADRP target-flags(aarch64-page) @bt__str_15__Reading_f
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @bt__str_15__Reading_f
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_15__Reading_f, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @bt__str_15__Reading_f
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_15__Reading_f, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @bt__str_15__Reading_f
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_15__Reading_f, 0

Fixup kills for %bb.4
********** MI Scheduling **********
main:%bb.5 while.cond
  From: renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$x19
SU(1):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ORRXrs $xzr, $x19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.5
********** MI Scheduling **********
main:%bb.6 while.end
  From: renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$x19
SU(1):   $x1 = ADRP target-flags(aarch64-page) @bt__str_17__lf_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_17__lf_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = ADRP target-flags(aarch64-page) @dt
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x2
SU(4):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @dt, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x1 = ADRP target-flags(aarch64-page) @bt__str_17__lf_
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x2 = ADRP target-flags(aarch64-page) @dt
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_17__lf_, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @dt, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ORRXrs $xzr, $x19, 0
  Ready @5c
  TopQ.A TopLatency SU(5) 4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x1 = ADRP target-flags(aarch64-page) @bt__str_17__lf_
SU(3):   $x2 = ADRP target-flags(aarch64-page) @dt
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_17__lf_, 0
SU(4):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @dt, 0
SU(5):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.6
********** MI Scheduling **********
main:%bb.7 while.cond21
  From: renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$x19
SU(1):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ORRXrs $xzr, $x19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.7
********** MI Scheduling **********
main:%bb.8 while.end25
  From: renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$x19
SU(1):   STRWui renamable $w8, $sp, 37 :: (store 4 into %ir.result)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui renamable $w8, $sp, 37 :: (store 4 into %ir.result)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ORRXrs $xzr, $x19, 0
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
SU(1):   STRWui renamable $w8, $sp, 37 :: (store 4 into %ir.result)
SU(2):   $x0 = ORRXrs $xzr, $x19, 0

********** MI Scheduling **********
main:%bb.8 while.end25
  From: renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit-def $sp, implicit-def $w8
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=$x19
SU(1):   $x8 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Data Latency=1 Reg=$x8
    SU(5): Data Latency=1 Reg=$x8
SU(3):   $x1 = ADRP target-flags(aarch64-page) @bt__str_18__d_d_d__
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x1
SU(4):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_18__d_d_d__, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   renamable $x3 = nuw ADDXri renamable $x8, 4, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   renamable $x4 = nuw ADDXri renamable $x8, 8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x2 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x2
SU(8):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit-def $sp, implicit-def $w8
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 9 
Queue TopQ.A: 7 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = ADRP target-flags(aarch64-page) @grid_points
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 9 
Queue TopQ.A: 7 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 9 
Queue TopQ.A: 7 3 6 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x1 = ADRP target-flags(aarch64-page) @bt__str_18__d_d_d__
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 5 6 4 9 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x2 = ADRP target-flags(aarch64-page) @grid_points
  Ready @4c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 5 6 4 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_18__d_d_d__, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 5 6 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x3 = nuw ADDXri renamable $x8, 4, 0
  Ready @6c
  TopQ.A TopLatency SU(5) 2c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $x4 = nuw ADDXri renamable $x8, 8, 0
  Ready @7c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @8c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) $x0 = ORRXrs $xzr, $x19, 0
  Ready @9c
  TopQ.A TopLatency SU(9) 4c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x8 = ADRP target-flags(aarch64-page) @grid_points
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(3):   $x1 = ADRP target-flags(aarch64-page) @bt__str_18__d_d_d__
SU(7):   $x2 = ADRP target-flags(aarch64-page) @grid_points
SU(4):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_18__d_d_d__, 0
SU(5):   renamable $x3 = nuw ADDXri renamable $x8, 4, 0
SU(6):   renamable $x4 = nuw ADDXri renamable $x8, 8, 0
SU(8):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(9):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.8
********** MI Scheduling **********
main:%bb.9 if.else28
  From: renamable $x8 = ADRP target-flags(aarch64-page) @dt
    To: End RegionInstrs: 15
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @dt
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Out  Latency=1
    SU(10): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
SU(1):   $x16 = MOVZXi 12897, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   $x16 = MOVKXi $x16(tied-def 0), 12373, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   $x16 = MOVKXi $x16(tied-def 0), 43306, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 6
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
SU(4):   $x16 = MOVKXi $x16(tied-def 0), 16179, 48
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 5
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
  Successors:
    SU(7): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x16
SU(5):   STRXui renamable $x16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=$x16
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Anti Latency=0
    SU(6): Anti Latency=0
    SU(10): Anti Latency=0
SU(6):   $w8 = MOVZWi 200, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(5): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=1 Reg=$w8
SU(7):   $x16 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x16
SU(8):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x16
  Successors:
    SU(14): Data Latency=1 Reg=$x16
    SU(12): Data Latency=1 Reg=$x16
SU(9):   STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.niter)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(6): Data Latency=1 Reg=$w8
  Successors:
    SU(10): Anti Latency=0
SU(10):   $x8 = MOVZXi 102, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(9): Anti Latency=0
    SU(6): Out  Latency=1
    SU(5): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x8
SU(11):   $x8 = MOVKXi $x8(tied-def 0), 102, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x8
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x8
SU(12):   STRXui renamable $x8, renamable $x16, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(11): Data Latency=1 Reg=$x8
    SU(8): Data Latency=1 Reg=$x16
  Successors:
    SU(13): Anti Latency=0
SU(13):   $w8 = MOVZWi 102, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
  Successors:
    SU(14): Data Latency=1 Reg=$w8
SU(14):   STRWui renamable $w8, renamable $x16, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(13): Data Latency=1 Reg=$w8
    SU(8): Data Latency=1 Reg=$x16
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x16 = MOVZXi 12897, 0
  Ready @0c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x16 = MOVKXi $x16(tied-def 0), 12373, 16
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x16 = MOVKXi $x16(tied-def 0), 43306, 32
  Ready @2c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @dt
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x16 = MOVKXi $x16(tied-def 0), 16179, 48
  Ready @4c
  TopQ.A TopLatency SU(4) 3c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRXui renamable $x16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  Ready @5c
  TopQ.A TopLatency SU(5) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(7) ORDER                              
  Cand SU(6) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $w8 = MOVZWi 200, 0
  Ready @6c
  TopQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 9 
  TopQ.A RemainingLatency 0 + 7c > CritPath 8
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) $x16 = ADRP target-flags(aarch64-page) @grid_points
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.niter)
  Ready @8c
  TopQ.A TopLatency SU(9) 5c
  TopQ.A BotLatency SU(9) 3c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 8
  Cand SU(8) ORDER                              
  Cand SU(10) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x8 = MOVZXi 102, 0
  Ready @9c
  TopQ.A BotLatency SU(10) 3c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 8
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) $x8 = MOVKXi $x8(tied-def 0), 102, 32
  Ready @11c
  TopQ.A TopLatency SU(11) 6c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRXui renamable $x8, renamable $x16, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  Ready @12c
  TopQ.A TopLatency SU(12) 7c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) $w8 = MOVZWi 102, 0
  Ready @13c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) STRWui renamable $w8, renamable $x16, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @14c
  TopQ.A TopLatency SU(14) 8c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(1):   $x16 = MOVZXi 12897, 0
SU(2):   $x16 = MOVKXi $x16(tied-def 0), 12373, 16
SU(3):   $x16 = MOVKXi $x16(tied-def 0), 43306, 32
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @dt
SU(4):   $x16 = MOVKXi $x16(tied-def 0), 16179, 48
SU(5):   STRXui renamable $x16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
SU(6):   $w8 = MOVZWi 200, 0
SU(7):   $x16 = ADRP target-flags(aarch64-page) @grid_points
SU(9):   STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.niter)
SU(10):   $x8 = MOVZXi 102, 0
SU(8):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(11):   $x8 = MOVKXi $x8(tied-def 0), 102, 32
SU(12):   STRXui renamable $x8, renamable $x16, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
SU(13):   $w8 = MOVZWi 102, 0
SU(14):   STRWui renamable $w8, renamable $x16, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.9 if.else28
  From: $x0 = ADRP target-flags(aarch64-page) @bt__str_19__No_input_
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @bt__str_19__No_input_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_19__No_input_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @bt__str_19__No_input_
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_19__No_input_, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @bt__str_19__No_input_
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_19__No_input_, 0

Fixup kills for %bb.9
********** MI Scheduling **********
main:%bb.10 if.end30
  From: $x16 = ADRP target-flags(aarch64-page) @grid_points
    To: Bcc 12, %bb.13, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x16 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
SU(1):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w8 = LDRWui renamable $x16, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(3):   dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.13, implicit $nzcv
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x16 = ADRP target-flags(aarch64-page) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWui renamable $x16, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $x16 = ADRP target-flags(aarch64-page) @grid_points
SU(1):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(2):   renamable $w8 = LDRWui renamable $x16, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(3):   dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.10 if.end30
  From: $x0 = ADRP target-flags(aarch64-page) @bt__str_22___
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @bt__str_22___
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_22___, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @bt__str_22___
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_22___, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @bt__str_22___
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_22___, 0

********** MI Scheduling **********
main:%bb.10 if.end30
  From: renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=$w19
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @dt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$d0
SU(3):   STRDui renamable $d0, $sp, 17 :: (store 8 into %stack.17)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
SU(4):   $x0 = ADRP target-flags(aarch64-page) @bt__str_21__Iteration
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
SU(5):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_21__Iteration, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $w1 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @dt
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 3 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x0 = ADRP target-flags(aarch64-page) @bt__str_21__Iteration
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_21__Iteration, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $w1 = ORRWrs $wzr, $w19, 0
  Ready @5c
  TopQ.A TopLatency SU(6) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDui renamable $d0, $sp, 17 :: (store 8 into %stack.17)
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @dt
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
SU(4):   $x0 = ADRP target-flags(aarch64-page) @bt__str_21__Iteration
SU(5):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_21__Iteration, 0
SU(6):   $w1 = ORRWrs $wzr, $w19, 0
SU(3):   STRDui renamable $d0, $sp, 17 :: (store 8 into %stack.17)

********** MI Scheduling **********
main:%bb.10 if.end30
  From: $x8 = ADRP target-flags(aarch64-page) @grid_points
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$w1
    SU(7): Data Latency=4 Reg=$w20
SU(3):   STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.17)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$w1
SU(4):   renamable $w19 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Data Latency=4 Reg=$w19
SU(5):   $x0 = ADRP target-flags(aarch64-page) @bt__str_20__Size___4d
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_20__Size___4d, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $w2 = ORRWrs $wzr, $w20, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $w3 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADRP target-flags(aarch64-page) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 7 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w19 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 7 8 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ADRP target-flags(aarch64-page) @bt__str_20__Size___4d
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 7 8 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_20__Size___4d, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 3 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 7
  Cand SU(3) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $w2 = ORRWrs $wzr, $w20, 0
  Ready @6c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 7
  Cand SU(3) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $w3 = ORRWrs $wzr, $w19, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.17)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(2):   renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(4):   renamable $w19 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(5):   $x0 = ADRP target-flags(aarch64-page) @bt__str_20__Size___4d
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_20__Size___4d, 0
SU(7):   $w2 = ORRWrs $wzr, $w20, 0
SU(8):   $w3 = ORRWrs $wzr, $w19, 0
SU(3):   STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.17)

Fixup kills for %bb.10
********** MI Scheduling **********
main:%bb.11 if.end30
  From: renamable $w8 = LDRWui renamable $x16, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
    To: Bcc 12, %bb.13, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x16, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.13, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui renamable $x16, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $w8 = LDRWui renamable $x16, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(1):   dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv

Fixup kills for %bb.11
********** MI Scheduling **********
main:%bb.12 if.end30
  From: renamable $w8 = LDRWui killed renamable $x16, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
    To: Bcc 11, %bb.15, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x16, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 103, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 11, %bb.15, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui renamable $x16, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 103, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $w8 = LDRWui renamable $x16, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(1):   dead $wzr = SUBSWri renamable $w8, 103, 0, implicit-def $nzcv

Fixup kills for %bb.12
********** MI Scheduling **********
main:%bb.13 if.then38
  From: $x0 = ADRP target-flags(aarch64-page) @bt__str_24__Problem_s
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @bt__str_24__Problem_s
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_24__Problem_s, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @bt__str_24__Problem_s
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_24__Problem_s, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @bt__str_24__Problem_s
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_24__Problem_s, 0

********** MI Scheduling **********
main:%bb.13 if.then38
  From: $x8 = ADRP target-flags(aarch64-page) @grid_points
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$w1
    SU(7): Data Latency=4 Reg=$w20
SU(3):   STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.17)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$w1
SU(4):   renamable $w19 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Data Latency=4 Reg=$w19
SU(5):   $x0 = ADRP target-flags(aarch64-page) @bt__str_23___d___d___
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_23___d___d___, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $w2 = ORRWrs $wzr, $w20, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $w3 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADRP target-flags(aarch64-page) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 7 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w19 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 7 8 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ADRP target-flags(aarch64-page) @bt__str_23___d___d___
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 7 8 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_23___d___d___, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 3 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 7
  Cand SU(3) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $w2 = ORRWrs $wzr, $w20, 0
  Ready @6c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 7
  Cand SU(3) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $w3 = ORRWrs $wzr, $w19, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.17)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(2):   renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(4):   renamable $w19 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(5):   $x0 = ADRP target-flags(aarch64-page) @bt__str_23___d___d___
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_23___d___d___, 0
SU(7):   $w2 = ORRWrs $wzr, $w20, 0
SU(8):   $w3 = ORRWrs $wzr, $w19, 0
SU(3):   STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.17)

Fixup kills for %bb.13
********** MI Scheduling **********
main:%bb.14 if.end154
  From: STURWi $wzr, $fp, -36 :: (store 4 into %ir.retval)
    To: $sp = frame-destroy ADDXri $sp, 496, 0
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -36 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, $wzr, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $fp, $lr = frame-destroy LDPXi $sp, 60 :: (load 8 from %stack.39), (load 8 from %stack.38)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(3):   $x20, $x19 = frame-destroy LDPXi $sp, 58 :: (load 8 from %stack.41), (load 8 from %stack.40)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 496, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) STURWi $wzr, $fp, -36 :: (store 4 into %ir.retval)
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $fp, $lr = frame-destroy LDPXi $sp, 60 :: (load 8 from %stack.39), (load 8 from %stack.38)
  Ready @1c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x20, $x19 = frame-destroy LDPXi $sp, 58 :: (load 8 from %stack.41), (load 8 from %stack.40)
  Ready @2c
  TopQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, $wzr, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   STURWi $wzr, $fp, -36 :: (store 4 into %ir.retval)
SU(2):   $fp, $lr = frame-destroy LDPXi $sp, 60 :: (load 8 from %stack.39), (load 8 from %stack.38)
SU(3):   $x20, $x19 = frame-destroy LDPXi $sp, 58 :: (load 8 from %stack.41), (load 8 from %stack.40)
SU(1):   $w8 = ORRWrs $wzr, $wzr, 0

Fixup kills for %bb.14
Fixup kills for %bb.15
********** MI Scheduling **********
main:%bb.16 for.cond
  From: STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
    To: Bcc 12, %bb.18, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.18, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
SU(2):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv

Fixup kills for %bb.16
********** MI Scheduling **********
main:%bb.17 for.body
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.16
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0

********** MI Scheduling **********
main:%bb.17 for.body
  From: renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w19
SU(1):   $w0 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w0 = ORRWrs $wzr, $w19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   $w0 = ORRWrs $wzr, $w19, 0

Fixup kills for %bb.17
Fixup kills for %bb.18
********** MI Scheduling **********
main:%bb.19 for.cond43
  From: STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
    To: Bcc 12, %bb.21, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.21, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
SU(2):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv

Fixup kills for %bb.19
********** MI Scheduling **********
main:%bb.20 for.body45
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.19
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0

********** MI Scheduling **********
main:%bb.20 for.body45
  From: renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w19
SU(1):   $w0 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w0 = ORRWrs $wzr, $w19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   $w0 = ORRWrs $wzr, $w19, 0

Fixup kills for %bb.20
********** MI Scheduling **********
main:%bb.21 for.end48
  From: STURWi killed renamable $w19, $fp, -60 :: (store 4 into %ir.step)
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w19, $fp, -60 :: (store 4 into %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
    SU(2): Anti Latency=0
SU(1):   $w19 = MOVZWi 26215, 0
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$w19
SU(2):   $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$w19
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w20 = MOVZWi 20, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) STURWi renamable $w19, $fp, -60 :: (store 4 into %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w19 = MOVZWi 26215, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w20 = MOVZWi 20, 0
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   STURWi renamable $w19, $fp, -60 :: (store 4 into %ir.step)
SU(1):   $w19 = MOVZWi 26215, 0
SU(2):   $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19
SU(3):   $w20 = MOVZWi 20, 0

********** MI Scheduling **********
main:%bb.21 for.end48
  From: $w0 = MOVZWi 1, 0
    To: BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w0 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $w19 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w0 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w19 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   $w0 = MOVZWi 1, 0
SU(1):   $w19 = MOVZWi 1, 0

Fixup kills for %bb.21
********** MI Scheduling **********
main:%bb.22 for.cond49
  From: renamable $w8, renamable $w16 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
    To: Bcc 12, %bb.27, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8, renamable $w16 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
    SU(1): Data Latency=4 Reg=$w16
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.27, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8, renamable $w16 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $w8, renamable $w16 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.22
********** MI Scheduling **********
main:%bb.23 for.body51
  From: renamable $x8 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
    To: CBZW killed renamable $w16, %bb.25
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Data Latency=4 Reg=$w8
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = MADDXrrr renamable $x8, renamable $x19, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $x17 = UBFMXri renamable $x16, 63, 63
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(4): Data Latency=1 Reg=$w17
    SU(4): Data Latency=0 Reg=$x17
    SU(3): Anti Latency=0
SU(3):   renamable $x16 = SBFMXri renamable $x16, 35, 63
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w16
    SU(4): Data Latency=0 Reg=$x16
SU(4):   $w16 = ADDWrs renamable $w16, renamable $w17, 0, implicit $x17, implicit $x16
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w16
    SU(3): Data Latency=0 Reg=$x16
    SU(2): Data Latency=1 Reg=$w17
    SU(2): Data Latency=0 Reg=$x17
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$w16
SU(5):   renamable $w16 = MSUBWrrr renamable $w16, renamable $w20, renamable $w8
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   CBZW killed renamable $w16, %bb.25
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = MADDXrrr renamable $x8, renamable $x19, $xzr
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x17 = UBFMXri renamable $x16, 63, 63
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x16 = SBFMXri renamable $x16, 35, 63
  Ready @6c
  TopQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w16 = ADDWrs renamable $w16, renamable $w17, 0, implicit $x17, implicit $x16
  Ready @7c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w16 = MSUBWrrr renamable $w16, renamable $w20, renamable $w8
  Ready @8c
  TopQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $x8 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
SU(1):   renamable $x16 = MADDXrrr renamable $x8, renamable $x19, $xzr
SU(2):   renamable $x17 = UBFMXri renamable $x16, 63, 63
SU(3):   renamable $x16 = SBFMXri renamable $x16, 35, 63
SU(4):   $w16 = ADDWrs renamable $w16, renamable $w17, 0, implicit $x17, implicit $x16
SU(5):   renamable $w16 = MSUBWrrr renamable $w16, renamable $w20, renamable $w8

Fixup kills for %bb.23
Fixup kills for %bb.24
********** MI Scheduling **********
main:%bb.25 if.then55
  From: $w19 = MOVZWi 26215, 0
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w19 = MOVZWi 26215, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$w19
SU(1):   $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w19 = MOVZWi 26215, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   $w19 = MOVZWi 26215, 0
SU(1):   $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19

********** MI Scheduling **********
main:%bb.25 if.then55
  From: renamable $w19 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w19
SU(1):   $x0 = ADRP target-flags(aarch64-page) @bt__str_25__Time_step
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_25__Time_step, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w1 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w19 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @bt__str_25__Time_step
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_25__Time_step, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w1 = ORRWrs $wzr, $w19, 0
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $w19 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
SU(1):   $x0 = ADRP target-flags(aarch64-page) @bt__str_25__Time_step
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_25__Time_step, 0
SU(3):   $w1 = ORRWrs $wzr, $w19, 0

Fixup kills for %bb.25
********** MI Scheduling **********
main:%bb.26 if.end57
  From: renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
    To: B %bb.22
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -60 :: (store 4 into %ir.step)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.22
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -60 :: (store 4 into %ir.step)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -60 :: (store 4 into %ir.step)

Fixup kills for %bb.26
********** MI Scheduling **********
main:%bb.27 for.end60
  From: $x8 = ADRP target-flags(aarch64-page) @grid_points
    To: Bcc 0, %bb.29, implicit $nzcv
 RegionInstrs: 19
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 12
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(12): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
SU(3):   renamable $w17, renamable $w18 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 11
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(12): Data Latency=4 Reg=$w17
    SU(6): Data Latency=4 Reg=$w17
    SU(12): Data Latency=4 Reg=$w18
    SU(7): Data Latency=4 Reg=$w18
    SU(5): Anti Latency=0
SU(4):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=4 Reg=$d0
    SU(12): Anti Latency=0
SU(5):   renamable $w8 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 10
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=4 Reg=$w8
    SU(9): Data Latency=4 Reg=$w8
SU(6):   renamable $d1 = SCVTFUWDri renamable $w17
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(3): Data Latency=4 Reg=$w17
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
SU(7):   renamable $d2 = SCVTFUWDri renamable $w18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(3): Data Latency=4 Reg=$w18
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d2
SU(8):   renamable $d1 = FMULDrr renamable $d1, renamable $d2
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(7): Data Latency=1 Reg=$d2
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d1
    SU(9): Anti Latency=0
SU(9):   renamable $d2 = SCVTFUWDri renamable $w8
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w8
  Successors:
    SU(11): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d2
    SU(13): Anti Latency=0
SU(10):   renamable $d1 = FMULDrr renamable $d1, renamable $d2
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(9): Data Latency=1 Reg=$d2
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
  Successors:
    SU(15): Out  Latency=1
    SU(14): Data Latency=1 Reg=$d1
    SU(11): Anti Latency=0
SU(11):   renamable $d2 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(10): Anti Latency=0
    SU(9): Out  Latency=1
  Successors:
    SU(17): Data Latency=4 Reg=$d2
SU(12):   $w16 = ADDWrs renamable $w17, renamable $w18, 0
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(3): Data Latency=4 Reg=$w18
    SU(3): Data Latency=4 Reg=$w17
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(13): Data Latency=1 Reg=$w16
SU(13):   $w8 = ADDWrs renamable $w16, renamable $w8, 0
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 3
  Predecessors:
    SU(12): Data Latency=1 Reg=$w16
    SU(9): Anti Latency=0
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w8
  Successors:
    SU(15): Data Latency=1 Reg=$w8
SU(14):   STRDui renamable $d1, renamable $x20, 15 :: (store 8 into %ir.n3)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(10): Data Latency=1 Reg=$d1
  Successors:
    SU(15): Anti Latency=0
SU(15):   renamable $d1 = SCVTFUWDri renamable $w8
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(14): Anti Latency=0
    SU(13): Data Latency=1 Reg=$w8
    SU(10): Out  Latency=1
  Successors:
    SU(16): Data Latency=1 Reg=$d1
SU(16):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(15): Data Latency=1 Reg=$d1
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
  Successors:
    SU(18): Data Latency=1 Reg=$d0
SU(17):   FCMPDri renamable $d2, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(11): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(18):   STRDui renamable $d0, renamable $x20, 17 :: (store 8 into %ir.navg)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=$d0
ExitSU:   Bcc 0, %bb.29, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(17): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 13
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 13
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADRP target-flags(aarch64-page) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 13
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 13
  Cand SU(2) ORDER                              
  Cand SU(3) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w17, renamable $w18 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @2c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 7 
Queue TopQ.A: 2 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 13
  Cand SU(2) ORDER                              
  Cand SU(5) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $w8 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 7 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x16 = ADRP target-flags(aarch64-page) %const.0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 7 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 6 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 13
  Cand SU(12) ORDER                              
  Cand SU(6) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d1 = SCVTFUWDri renamable $w17
  Ready @6c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 13
  Cand SU(12) ORDER                              
  Cand SU(7) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d2 = SCVTFUWDri renamable $w18
  Ready @7c
  TopQ.A BotLatency SU(7) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 13
  Cand SU(12) ORDER                              
  Cand SU(8) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = FMULDrr renamable $d1, renamable $d2
  Ready @8c
  TopQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 9 
  TopQ.A RemainingLatency 0 + 9c > CritPath 13
  Cand SU(12) ORDER                              
  Cand SU(9) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $d2 = SCVTFUWDri renamable $w8
  Ready @9c
  TopQ.A BotLatency SU(9) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 
  TopQ.A RemainingLatency 0 + 10c > CritPath 13
  Cand SU(12) ORDER                              
  Cand SU(10) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $d1 = FMULDrr renamable $d1, renamable $d2
  Ready @10c
  TopQ.A TopLatency SU(10) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 14 11 
  TopQ.A RemainingLatency 0 + 11c > CritPath 13
  Cand SU(12) ORDER                              
  Cand SU(11) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $d2 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
  Ready @11c
  TopQ.A BotLatency SU(11) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 12 14 
  TopQ.A RemainingLatency 0 + 12c > CritPath 13
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $w16 = ADDWrs renamable $w17, renamable $w18, 0
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 14 13 
  TopQ.A RemainingLatency 0 + 13c > CritPath 13
  Cand SU(14) ORDER                              
  Cand SU(13) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $w8 = ADDWrs renamable $w16, renamable $w8, 0
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) STRDui renamable $d1, renamable $x20, 15 :: (store 8 into %ir.n3)
  Ready @14c
  TopQ.A TopLatency SU(14) 9c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 17 
  TopQ.A RemainingLatency 0 + 15c > CritPath 13
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) renamable $d1 = SCVTFUWDri renamable $w8
  Ready @15c
  TopQ.A BotLatency SU(15) 2c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 16 
  TopQ.A RemainingLatency 0 + 16c > CritPath 13
  Cand SU(17) ORDER                              
  Cand SU(16) ORDER                              
Pick Top ORDER     
Scheduling SU(16) renamable $d0 = FDIVDrr renamable $d1, renamable $d0
  Ready @16c
  TopQ.A TopLatency SU(16) 10c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 18 
  TopQ.A RemainingLatency 0 + 17c > CritPath 13
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) FCMPDri renamable $d2, implicit-def $nzcv
  Ready @17c
  TopQ.A TopLatency SU(17) 12c
  TopQ.A BotLatency SU(17) 1c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) STRDui renamable $d0, renamable $x20, 17 :: (store 8 into %ir.navg)
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(3):   renamable $w17, renamable $w18 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(5):   renamable $w8 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) %const.0
SU(4):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(6):   renamable $d1 = SCVTFUWDri renamable $w17
SU(7):   renamable $d2 = SCVTFUWDri renamable $w18
SU(8):   renamable $d1 = FMULDrr renamable $d1, renamable $d2
SU(9):   renamable $d2 = SCVTFUWDri renamable $w8
SU(10):   renamable $d1 = FMULDrr renamable $d1, renamable $d2
SU(11):   renamable $d2 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(12):   $w16 = ADDWrs renamable $w17, renamable $w18, 0
SU(13):   $w8 = ADDWrs renamable $w16, renamable $w8, 0
SU(14):   STRDui renamable $d1, renamable $x20, 15 :: (store 8 into %ir.n3)
SU(15):   renamable $d1 = SCVTFUWDri renamable $w8
SU(16):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0
SU(17):   FCMPDri renamable $d2, implicit-def $nzcv
SU(18):   STRDui renamable $d0, renamable $x20, 17 :: (store 8 into %ir.navg)

********** MI Scheduling **********
main:%bb.27 for.end60
  From: renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
    To: BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit-def $sp
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w19
SU(1):   $x20 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=$x20
SU(2):   STRDui renamable $d0, renamable $x20, 14 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$x20
SU(3):   $x1 = SUBXri $fp, 216, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x2 = SUBXri $fp, 212, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $w0 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x20 = SUBXri $fp, 208, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x1 = SUBXri $fp, 216, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x2 = SUBXri $fp, 212, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $w0 = ORRWrs $wzr, $w19, 0
  Ready @4c
  TopQ.A TopLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, renamable $x20, 14 :: (store 8 into %ir.tmax)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
SU(1):   $x20 = SUBXri $fp, 208, 0
SU(3):   $x1 = SUBXri $fp, 216, 0
SU(4):   $x2 = SUBXri $fp, 212, 0
SU(5):   $w0 = ORRWrs $wzr, $w19, 0
SU(2):   STRDui renamable $d0, renamable $x20, 14 :: (store 8 into %ir.tmax)

Fixup kills for %bb.27
********** MI Scheduling **********
main:%bb.28 if.then70
  From: renamable $s0 = LDURSi $fp, -56, implicit-def $d0 :: (dereferenceable load 4 from %ir.niter)
    To: B %bb.30
 RegionInstrs: 23
ScheduleDAGMI::schedule starting
SU(0):   renamable $s0 = LDURSi $fp, -56, implicit-def $d0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=4 Reg=$d0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(2):   renamable $d1, renamable $d2 = LDPDi renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax), (dereferenceable load 8 from %ir.n3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(21): Data Latency=4 Reg=$d1
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$d2
SU(3):   renamable $d3 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 14
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(18): Out  Latency=1
    SU(16): Data Latency=4 Reg=$d3
    SU(4): Anti Latency=0
SU(4):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 14
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x8
SU(5):   renamable $d4 = LDRDui renamable $x20, 17 :: (dereferenceable load 8 from %ir.navg)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(18): Data Latency=4 Reg=$d4
    SU(11): Data Latency=4 Reg=$d4
SU(6):   renamable $d5 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 13
  Predecessors:
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    SU(11): Out  Latency=1
    SU(10): Data Latency=4 Reg=$d5
    SU(7): Anti Latency=0
SU(7):   renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 13
  Predecessors:
    SU(6): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x8
SU(8):   renamable $d6 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 3
  Height             : 12
  Predecessors:
    SU(7): Data Latency=1 Reg=$x8
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=4 Reg=$d6
    SU(9): Anti Latency=0
SU(9):   renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 9
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
  Successors:
    SU(13): Data Latency=1 Reg=$x8
SU(10):   renamable $d2 = FMULDrr renamable $d2, renamable $d5
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(6): Data Latency=4 Reg=$d5
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d2
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$d2
    SU(11): Anti Latency=0
SU(11):   renamable $d5 = FMULDrr renamable $d4, renamable $d4
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(10): Anti Latency=0
    SU(6): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d4
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$d5
SU(12):   renamable $d5 = FMULDrr renamable $d5, renamable $d6
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$d5
    SU(8): Data Latency=4 Reg=$d6
  Successors:
    SU(17): Data Latency=1 Reg=$d5
    SU(13): Anti Latency=0
SU(13):   renamable $d6 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(12): Anti Latency=0
    SU(9): Data Latency=1 Reg=$x8
    SU(8): Out  Latency=1
  Successors:
    SU(18): Data Latency=4 Reg=$d6
SU(14):   renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$d0
    SU(15): Data Latency=0 Reg=$q0
SU(15):   renamable $d0 = SCVTFv1i64 renamable $d0, implicit $q0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$d0
    SU(14): Data Latency=0 Reg=$q0
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$d0
SU(16):   renamable $d0 = FMULDrr renamable $d0, renamable $d3
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$d0
    SU(3): Data Latency=4 Reg=$d3
  Successors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$d0
    SU(18): Anti Latency=0
SU(17):   renamable $d2 = FADDDrr renamable $d2, renamable $d5
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(12): Data Latency=1 Reg=$d5
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d2
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$d2
SU(18):   renamable $d3 = FMULDrr renamable $d4, renamable $d6
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(13): Data Latency=4 Reg=$d6
    SU(16): Anti Latency=0
    SU(5): Data Latency=4 Reg=$d4
    SU(3): Out  Latency=1
  Successors:
    SU(19): Data Latency=1 Reg=$d3
SU(19):   renamable $d2 = FADDDrr renamable $d2, renamable $d3
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(18): Data Latency=1 Reg=$d3
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$d2
  Successors:
    SU(20): Data Latency=1 Reg=$d2
SU(20):   renamable $d0 = FMULDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(19): Data Latency=1 Reg=$d2
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$d0
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$d0
SU(21):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$d0
    SU(2): Data Latency=4 Reg=$d1
  Successors:
    SU(22): Data Latency=1 Reg=$d0
SU(22):   STRDui renamable $d0, renamable $x20, 16 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=$d0
ExitSU:   B %bb.30
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  Ready @0c
  TopQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 2 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 15
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  13 cycles 
  Cand SU(2) ORDER                              
  Cand SU(3) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d3 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 2 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 15
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  13 cycles 
  Cand SU(2) ORDER                              
  Cand SU(4) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  Ready @2c
  TopQ.A BotLatency SU(4) 14c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 2 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 15
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  13 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $d1, renamable $d2 = LDPDi renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax), (dereferenceable load 8 from %ir.n3)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 15
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d4 = LDRDui renamable $x20, 17 :: (dereferenceable load 8 from %ir.navg)
  Ready @4c
  TopQ.A BotLatency SU(5) 13c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 15
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d5 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  Ready @5c
  TopQ.A TopLatency SU(6) 2c
  TopQ.A BotLatency SU(6) 13c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 0 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 15
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  Ready @6c
  TopQ.A BotLatency SU(7) 13c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 0 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 15
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d6 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  Ready @7c
  TopQ.A TopLatency SU(8) 3c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 0 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $s0 = LDURSi $fp, -56, implicit-def $d0 :: (dereferenceable load 4 from %ir.niter)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 14 
Queue TopQ.A: 9 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 15
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 14 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $d2 = FMULDrr renamable $d2, renamable $d5
  Ready @10c
  TopQ.A TopLatency SU(10) 6c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 14 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $d5 = FMULDrr renamable $d4, renamable $d4
  Ready @11c
  TopQ.A BotLatency SU(11) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 14 
  TopQ.A RemainingLatency 0 + 12c > CritPath 15
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) renamable $d5 = FMULDrr renamable $d5, renamable $d6
  Ready @12c
  TopQ.A TopLatency SU(12) 7c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 17 13 
  TopQ.A RemainingLatency 0 + 13c > CritPath 15
  Cand SU(14) ORDER                              
  Cand SU(13) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) renamable $d6 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  Ready @13c
  TopQ.A BotLatency SU(13) 8c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 17 
  TopQ.A RemainingLatency 0 + 14c > CritPath 15
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 15 
  TopQ.A RemainingLatency 0 + 15c > CritPath 15
  Cand SU(17) ORDER                              
  Cand SU(15) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $d0 = SCVTFv1i64 renamable $d0, implicit $q0
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 16 
  TopQ.A RemainingLatency 0 + 16c > CritPath 15
  Cand SU(17) ORDER                              
  Cand SU(16) ORDER                              
Pick Top ORDER     
Scheduling SU(16) renamable $d0 = FMULDrr renamable $d0, renamable $d3
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 18 
  TopQ.A RemainingLatency 0 + 17c > CritPath 15
  Cand SU(17) ORDER                              
Pick Top ORDER     
Scheduling SU(17) renamable $d2 = FADDDrr renamable $d2, renamable $d5
  Ready @17c
  TopQ.A TopLatency SU(17) 8c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $d3 = FMULDrr renamable $d4, renamable $d6
  Ready @18c
  TopQ.A TopLatency SU(18) 11c
  TopQ.A BotLatency SU(18) 4c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) renamable $d2 = FADDDrr renamable $d2, renamable $d3
  Ready @19c
  TopQ.A TopLatency SU(19) 12c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) renamable $d0 = FMULDrr renamable $d0, renamable $d2
  Ready @20c
  TopQ.A TopLatency SU(20) 13c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 21 
Pick Top ONLY1     
Scheduling SU(21) renamable $d0 = FDIVDrr renamable $d0, renamable $d1
  Ready @21c
  TopQ.A TopLatency SU(21) 14c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 22 
Pick Top ONLY1     
Scheduling SU(22) STRDui renamable $d0, renamable $x20, 16 :: (store 8 into %ir.mflops)
  Ready @22c
  TopQ.A TopLatency SU(22) 15c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) %const.1
SU(3):   renamable $d3 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(4):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
SU(2):   renamable $d1, renamable $d2 = LDPDi renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax), (dereferenceable load 8 from %ir.n3)
SU(5):   renamable $d4 = LDRDui renamable $x20, 17 :: (dereferenceable load 8 from %ir.navg)
SU(6):   renamable $d5 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(7):   renamable $x8 = ADRP target-flags(aarch64-page) %const.3
SU(8):   renamable $d6 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(0):   renamable $s0 = LDURSi $fp, -56, implicit-def $d0 :: (dereferenceable load 4 from %ir.niter)
SU(9):   renamable $x8 = ADRP target-flags(aarch64-page) %const.4
SU(10):   renamable $d2 = FMULDrr renamable $d2, renamable $d5
SU(11):   renamable $d5 = FMULDrr renamable $d4, renamable $d4
SU(12):   renamable $d5 = FMULDrr renamable $d5, renamable $d6
SU(13):   renamable $d6 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(14):   renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
SU(15):   renamable $d0 = SCVTFv1i64 renamable $d0, implicit $q0
SU(16):   renamable $d0 = FMULDrr renamable $d0, renamable $d3
SU(17):   renamable $d2 = FADDDrr renamable $d2, renamable $d5
SU(18):   renamable $d3 = FMULDrr renamable $d4, renamable $d6
SU(19):   renamable $d2 = FADDDrr renamable $d2, renamable $d3
SU(20):   renamable $d0 = FMULDrr renamable $d0, renamable $d2
SU(21):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1
SU(22):   STRDui renamable $d0, renamable $x20, 16 :: (store 8 into %ir.mflops)

Fixup kills for %bb.28
Fixup kills for %bb.29
********** MI Scheduling **********
main:%bb.30 if.end81
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.14
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.30 if.end81
  From: renamable $w1 = LDURSBWi $fp, -216 :: (dereferenceable load 1 from %ir.Class, align 4)
    To: BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp
 RegionInstrs: 44
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDURSBWi $fp, -216 :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$w1
SU(1):   STRWui renamable $w1, $sp, 32 :: (store 4 into %stack.18)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$w1
SU(2):   $x8 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(13): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x8
    SU(8): Data Latency=1 Reg=$x8
SU(4):   renamable $w5 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(43): Data Latency=4 Reg=$w5
SU(5):   renamable $d0 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(7): Data Latency=4 Reg=$d0
    SU(11): Anti Latency=0
SU(6):   renamable $d1 = LDRDui renamable $x20, 16 :: (dereferenceable load 8 from %ir.mflops)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(7): Data Latency=4 Reg=$d1
    SU(11): Anti Latency=0
SU(7):   STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.21), (store 8 into %stack.22)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=$d1
    SU(5): Data Latency=4 Reg=$d0
SU(8):   renamable $w2, renamable $w3 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(9): Data Latency=4 Reg=$w2
    SU(9): Data Latency=4 Reg=$w3
    SU(13): Anti Latency=0
SU(9):   STPWi renamable $w3, renamable $w2, $sp, 29 :: (store 4 into %stack.19), (store 4 into %stack.20)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(8): Data Latency=4 Reg=$w2
    SU(8): Data Latency=4 Reg=$w3
SU(10):   renamable $w4 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(42): Data Latency=4 Reg=$w4
    SU(13): Anti Latency=0
SU(11):   renamable $w20 = LDURWi $fp, -212 :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
  Successors:
    SU(42): Out  Latency=1
    SU(32): Data Latency=4 Reg=$w20
    SU(12): Data Latency=4 Reg=$w20
SU(12):   STRWui renamable $w20, $sp, 34 :: (store 4 into %stack.17)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(11): Data Latency=4 Reg=$w20
  Successors:
    SU(42): Anti Latency=0
SU(13):   $x8 = ADRP target-flags(aarch64-page) @bt__str_36__none__
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(10): Anti Latency=0
    SU(8): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x8
SU(14):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_36__none__, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x8
  Successors:
    SU(30): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x8
SU(15):   $x16 = ADRP target-flags(aarch64-page) @bt__str_35__O3__mcmod
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x16
SU(16):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_35__O3__mcmod, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x16
  Successors:
    SU(34): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x16
SU(17):   $x17 = ADRP target-flags(aarch64-page) @bt__str_34__g__Wall__
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x17
SU(18):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_34__g__Wall__, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x17
  Successors:
    SU(33): Data Latency=1 Reg=$x17
SU(19):   $x18 = ADRP target-flags(aarch64-page) @bt__str_33__I___commo
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x18
SU(20):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_33__I___commo, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x18
  Successors:
    SU(33): Data Latency=1 Reg=$x18
SU(21):   $x0 = ADRP target-flags(aarch64-page) @bt__str_32__lm_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x0
SU(22):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_32__lm_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x0
  Successors:
    SU(37): Out  Latency=1
    SU(36): Data Latency=1 Reg=$x0
SU(23):   $x19 = ADRP target-flags(aarch64-page) @bt__str_31___CC__
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x19
SU(24):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_31___CC__, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x19
  Successors:
    SU(43): Out  Latency=1
    SU(36): Data Latency=1 Reg=$x19
SU(25):   $x6 = ADRP target-flags(aarch64-page) @bt__str_30_gcc_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x6
SU(26):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_30_gcc_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x6
  Successors:
    SU(39): Data Latency=1 Reg=$x6
SU(27):   $x7 = ADRP target-flags(aarch64-page) @bt__str_29_03_Nov_201
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x7
SU(28):   renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_29_03_Nov_201, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x7
  Successors:
    SU(39): Data Latency=1 Reg=$x7
SU(29):   STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(14): Data Latency=1 Reg=$x8
    SU(16): Data Latency=1 Reg=$x16
  Successors:
    SU(34): Anti Latency=0
    SU(30): Anti Latency=0
SU(30):   $x8 = ADRP target-flags(aarch64-page) @bt__str_28_3_3_1_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(29): Anti Latency=0
    SU(14): Out  Latency=1
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x8
SU(31):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_28_3_3_1_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x8
  Successors:
    SU(40): Data Latency=1 Reg=$x8
SU(32):   STRWui renamable $w20, $sp, 2 :: (store 4 into stack + 8)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(11): Data Latency=4 Reg=$w20
  Successors:
    SU(42): Anti Latency=0
SU(33):   STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(20): Data Latency=1 Reg=$x18
    SU(18): Data Latency=1 Reg=$x17
SU(34):   $x16 = ADRP target-flags(aarch64-page) @bt__str_27___________
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(29): Anti Latency=0
    SU(16): Out  Latency=1
  Successors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x16
SU(35):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_27___________, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(34): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x16
  Successors:
    SU(41): Data Latency=1 Reg=$x16
SU(36):   STPXi renamable $x19, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(24): Data Latency=1 Reg=$x19
    SU(22): Data Latency=1 Reg=$x0
  Successors:
    SU(43): Anti Latency=0
    SU(37): Anti Latency=0
SU(37):   $x0 = ADRP target-flags(aarch64-page) @bt__str_26_BT_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(36): Anti Latency=0
    SU(22): Out  Latency=1
  Successors:
    SU(38): Out  Latency=1
    SU(38): Data Latency=1 Reg=$x0
SU(38):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_26_BT_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(37): Out  Latency=1
    SU(37): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(39):   STPXi renamable $x7, renamable $x6, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(28): Data Latency=1 Reg=$x7
    SU(26): Data Latency=1 Reg=$x6
SU(40):   STRXui renamable $x8, $sp, 2 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(31): Data Latency=1 Reg=$x8
SU(41):   STRXui renamable $x16, $sp, 0 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(35): Data Latency=1 Reg=$x16
SU(42):   $w20 = ORRWrs $wzr, $w4, 0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(32): Anti Latency=0
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w4
SU(43):   $w19 = ORRWrs $wzr, $w5, 0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(36): Anti Latency=0
    SU(24): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w5
ExitSU:   BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(38): Ord  Latency=1 Artificial
    SU(10): Ord  Latency=4 Artificial
    SU(8): Ord  Latency=4 Artificial
    SU(6): Ord  Latency=4 Artificial
    SU(5): Ord  Latency=4 Artificial
    SU(4): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 5 6 15 17 19 21 23 25 27 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x8 = ADRP target-flags(aarch64-page) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 27 4 5 6 15 17 19 21 23 25 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @1c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 27 4 5 6 15 17 19 21 23 25 10 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDURSBWi $fp, -216 :: (dereferenceable load 1 from %ir.Class, align 4)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 27 4 5 6 15 17 19 21 23 25 10 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w5 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  Ready @3c
  TopQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 27 10 5 6 15 17 19 21 23 25 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  TopQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 27 10 25 6 15 17 19 21 23 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d1 = LDRDui renamable $x20, 16 :: (dereferenceable load 8 from %ir.mflops)
  Ready @5c
  TopQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 8 27 10 25 23 15 17 19 21 11 1 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $w2, renamable $w3 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @6c
  TopQ.A TopLatency SU(8) 2c
  TopQ.A BotLatency SU(8) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 9 
Queue TopQ.A: 1 27 10 25 23 15 17 19 21 11 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(10) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $w4 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @7c
  TopQ.A BotLatency SU(10) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 9 
Queue TopQ.A: 1 27 11 25 23 15 17 19 21 13 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(11) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $w20 = LDURWi $fp, -212 :: (dereferenceable load 4 from %ir.verified)
  Ready @8c
  TopQ.A BotLatency SU(11) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 9 32 
Queue TopQ.A: 1 27 13 25 23 15 17 19 21 7 
  TopQ.A RemainingLatency 0 + 9c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(13) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x8 = ADRP target-flags(aarch64-page) @bt__str_36__none__
  Ready @9c
  TopQ.A BotLatency SU(13) 4c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 32 
Queue TopQ.A: 1 27 7 25 23 15 17 19 21 14 9 
  TopQ.A RemainingLatency 0 + 10c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) $x16 = ADRP target-flags(aarch64-page) @bt__str_35__O3__mcmod
  Ready @10c
  TopQ.A BotLatency SU(15) 4c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 32 
Queue TopQ.A: 1 27 7 25 23 9 17 19 21 14 16 
  TopQ.A RemainingLatency 0 + 11c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
  Cand SU(21) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(21) $x0 = ADRP target-flags(aarch64-page) @bt__str_32__lm_
  Ready @11c
  TopQ.A BotLatency SU(21) 4c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 23 9 17 19 16 14 22 12 32 
  TopQ.A RemainingLatency 0 + 12c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) $x19 = ADRP target-flags(aarch64-page) @bt__str_31___CC__
  Ready @12c
  TopQ.A BotLatency SU(23) 4c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 32 9 17 19 16 14 22 12 24 
  TopQ.A RemainingLatency 0 + 13c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(16) TOP-PATH                  3 cycles 
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_36__none__, 0
  Ready @13c
  TopQ.A TopLatency SU(14) 3c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 32 9 17 19 16 24 22 12 
  TopQ.A RemainingLatency 0 + 14c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(16) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_35__O3__mcmod, 0
  Ready @14c
  TopQ.A BotLatency SU(16) 3c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 32 9 17 19 12 24 22 29 
  TopQ.A RemainingLatency 0 + 15c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(24) TOP-PATH                  3 cycles 
  Cand SU(22) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(22) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_32__lm_, 0
  Ready @15c
  TopQ.A BotLatency SU(22) 3c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 32 9 17 19 12 24 29 
  TopQ.A RemainingLatency 0 + 16c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(24) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_31___CC__, 0
  Ready @16c
  TopQ.A BotLatency SU(24) 3c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 32 9 17 19 12 29 36 
  TopQ.A RemainingLatency 0 + 17c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) $x17 = ADRP target-flags(aarch64-page) @bt__str_34__g__Wall__
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 32 9 36 19 12 29 18 
  TopQ.A RemainingLatency 0 + 18c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(19) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(19) $x18 = ADRP target-flags(aarch64-page) @bt__str_33__I___commo
  Ready @18c
  TopQ.A BotLatency SU(19) 2c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 32 9 36 18 12 29 20 
  TopQ.A RemainingLatency 0 + 19c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(25) $x6 = ADRP target-flags(aarch64-page) @bt__str_30_gcc_
  Ready @19c
  TopQ.A BotLatency SU(25) 2c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 20 32 9 36 18 12 29 26 
  TopQ.A RemainingLatency 0 + 20c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(27) $x7 = ADRP target-flags(aarch64-page) @bt__str_29_03_Nov_201
  Ready @20c
  TopQ.A BotLatency SU(27) 2c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 20 32 9 36 18 12 29 28 
  TopQ.A RemainingLatency 0 + 21c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(20) ORDER                              
  Cand SU(36) TOP-PATH                  2 cycles 
  Cand SU(29) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(29) STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
  Ready @21c
  TopQ.A TopLatency SU(29) 4c
  TopQ.A BotLatency SU(29) 2c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 20 32 9 36 18 12 28 34 30 
  TopQ.A RemainingLatency 0 + 22c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(20) ORDER                              
  Cand SU(36) TOP-PATH                  2 cycles 
  Cand SU(34) ORDER                              
  Cand SU(30) ORDER                              
Pick Top ORDER     
Scheduling SU(30) $x8 = ADRP target-flags(aarch64-page) @bt__str_28_3_3_1_
  Ready @22c
  TopQ.A BotLatency SU(30) 2c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 20 32 9 36 18 12 28 34 31 
  TopQ.A RemainingLatency 0 + 23c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(20) ORDER                              
  Cand SU(36) TOP-PATH                  2 cycles 
  Cand SU(34) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(34) $x16 = ADRP target-flags(aarch64-page) @bt__str_27___________
  Ready @23c
  TopQ.A BotLatency SU(34) 2c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 20 32 9 36 18 12 28 31 35 
  TopQ.A RemainingLatency 0 + 24c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(20) ORDER                              
  Cand SU(36) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(36) STPXi renamable $x19, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  Ready @24c
  TopQ.A BotLatency SU(36) 2c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 20 32 9 35 18 12 28 31 43 37 
  TopQ.A RemainingLatency 0 + 25c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(20) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(37) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(37) $x0 = ADRP target-flags(aarch64-page) @bt__str_26_BT_
  Ready @25c
  TopQ.A BotLatency SU(37) 2c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 20 32 9 35 18 12 28 31 43 38 
  TopQ.A RemainingLatency 0 + 26c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(20) ORDER                              
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_34__g__Wall__, 0
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 20 32 9 35 38 12 28 31 43 
  TopQ.A RemainingLatency 0 + 27c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(20) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(20) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_33__I___commo, 0
  Ready @27c
  TopQ.A BotLatency SU(20) 1c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 43 32 9 35 38 12 28 31 33 
  TopQ.A RemainingLatency 0 + 28c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(26) renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_30_gcc_, 0
  Ready @28c
  TopQ.A BotLatency SU(26) 1c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 33 7 43 32 9 35 38 12 28 31 
  TopQ.A RemainingLatency 0 + 29c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(35) TOP-PATH                  1 cycles 
  Cand SU(28) ORDER                              
Pick Top ORDER     
Scheduling SU(28) renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_29_03_Nov_201, 0
  Ready @29c
  TopQ.A BotLatency SU(28) 1c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 33 7 43 32 9 35 38 12 31 39 
  TopQ.A RemainingLatency 0 + 30c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(35) TOP-PATH                  1 cycles 
  Cand SU(31) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(31) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_28_3_3_1_, 0
  Ready @30c
  TopQ.A TopLatency SU(31) 5c
  TopQ.A BotLatency SU(31) 1c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 33 7 43 32 9 35 38 12 39 40 
  TopQ.A RemainingLatency 0 + 31c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(35) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(35) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_27___________, 0
  Ready @31c
  TopQ.A BotLatency SU(35) 1c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 33 7 43 32 9 40 38 12 39 41 
  TopQ.A RemainingLatency 0 + 32c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(38) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(38) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_26_BT_, 0
  Ready @32c
  TopQ.A BotLatency SU(38) 1c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 33 7 43 32 9 40 41 12 39 
  TopQ.A RemainingLatency 0 + 33c > CritPath 6
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STRWui renamable $w1, $sp, 32 :: (store 4 into %stack.18)
  Ready @33c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 33 7 43 32 9 40 41 12 
  TopQ.A RemainingLatency 0 + 34c > CritPath 6
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.21), (store 8 into %stack.22)
  Ready @34c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 33 12 43 32 9 40 41 
  TopQ.A RemainingLatency 0 + 35c > CritPath 6
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) STPWi renamable $w3, renamable $w2, $sp, 29 :: (store 4 into %stack.19), (store 4 into %stack.20)
  Ready @35c
  TopQ.A TopLatency SU(9) 6c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 33 12 43 32 41 40 
  TopQ.A RemainingLatency 0 + 36c > CritPath 6
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) STRWui renamable $w20, $sp, 34 :: (store 4 into %stack.17)
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 33 40 43 32 41 
  TopQ.A RemainingLatency 0 + 37c > CritPath 6
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
Pick Top ORDER     
Scheduling SU(32) STRWui renamable $w20, $sp, 2 :: (store 4 into stack + 8)
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 33 40 43 41 42 
  TopQ.A RemainingLatency 0 + 38c > CritPath 6
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
Pick Top ORDER     
Scheduling SU(33) STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  Ready @38c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 42 40 43 41 
  TopQ.A RemainingLatency 0 + 39c > CritPath 6
  Cand SU(39) ORDER                              
Pick Top ORDER     
Scheduling SU(39) STPXi renamable $x7, renamable $x6, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  Ready @39c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 42 40 43 
  TopQ.A RemainingLatency 0 + 40c > CritPath 6
  Cand SU(41) ORDER                              
  Cand SU(40) ORDER                              
Pick Top ORDER     
Scheduling SU(40) STRXui renamable $x8, $sp, 2 :: (store 8 into stack + 16)
  Ready @40c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 42 43 
  TopQ.A RemainingLatency 0 + 41c > CritPath 6
  Cand SU(41) ORDER                              
Pick Top ORDER     
Scheduling SU(41) STRXui renamable $x16, $sp, 0 :: (store 8 into stack)
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 43 42 
  TopQ.A RemainingLatency 0 + 42c > CritPath 6
  Cand SU(43) ORDER                              
  Cand SU(42) ORDER                              
Pick Top ORDER     
Scheduling SU(42) $w20 = ORRWrs $wzr, $w4, 0
  Ready @42c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 43 
Pick Top ONLY1     
Scheduling SU(43) $w19 = ORRWrs $wzr, $w5, 0
  Ready @43c
  *** Max MOps 1 at cycle 43
Cycle: 44 TopQ.A
TopQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(2):   $x8 = ADRP target-flags(aarch64-page) @grid_points
SU(3):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(0):   renamable $w1 = LDURSBWi $fp, -216 :: (dereferenceable load 1 from %ir.Class, align 4)
SU(4):   renamable $w5 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
SU(5):   renamable $d0 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(6):   renamable $d1 = LDRDui renamable $x20, 16 :: (dereferenceable load 8 from %ir.mflops)
SU(8):   renamable $w2, renamable $w3 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(10):   renamable $w4 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(11):   renamable $w20 = LDURWi $fp, -212 :: (dereferenceable load 4 from %ir.verified)
SU(13):   $x8 = ADRP target-flags(aarch64-page) @bt__str_36__none__
SU(15):   $x16 = ADRP target-flags(aarch64-page) @bt__str_35__O3__mcmod
SU(21):   $x0 = ADRP target-flags(aarch64-page) @bt__str_32__lm_
SU(23):   $x19 = ADRP target-flags(aarch64-page) @bt__str_31___CC__
SU(14):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_36__none__, 0
SU(16):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_35__O3__mcmod, 0
SU(22):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_32__lm_, 0
SU(24):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_31___CC__, 0
SU(17):   $x17 = ADRP target-flags(aarch64-page) @bt__str_34__g__Wall__
SU(19):   $x18 = ADRP target-flags(aarch64-page) @bt__str_33__I___commo
SU(25):   $x6 = ADRP target-flags(aarch64-page) @bt__str_30_gcc_
SU(27):   $x7 = ADRP target-flags(aarch64-page) @bt__str_29_03_Nov_201
SU(29):   STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
SU(30):   $x8 = ADRP target-flags(aarch64-page) @bt__str_28_3_3_1_
SU(34):   $x16 = ADRP target-flags(aarch64-page) @bt__str_27___________
SU(36):   STPXi renamable $x19, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
SU(37):   $x0 = ADRP target-flags(aarch64-page) @bt__str_26_BT_
SU(18):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_34__g__Wall__, 0
SU(20):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_33__I___commo, 0
SU(26):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_30_gcc_, 0
SU(28):   renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_29_03_Nov_201, 0
SU(31):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_28_3_3_1_, 0
SU(35):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_27___________, 0
SU(38):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_26_BT_, 0
SU(1):   STRWui renamable $w1, $sp, 32 :: (store 4 into %stack.18)
SU(7):   STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.21), (store 8 into %stack.22)
SU(9):   STPWi renamable $w3, renamable $w2, $sp, 29 :: (store 4 into %stack.19), (store 4 into %stack.20)
SU(12):   STRWui renamable $w20, $sp, 34 :: (store 4 into %stack.17)
SU(32):   STRWui renamable $w20, $sp, 2 :: (store 4 into stack + 8)
SU(33):   STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
SU(39):   STPXi renamable $x7, renamable $x6, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
SU(40):   STRXui renamable $x8, $sp, 2 :: (store 8 into stack + 16)
SU(41):   STRXui renamable $x16, $sp, 0 :: (store 8 into stack)
SU(42):   $w20 = ORRWrs $wzr, $w4, 0
SU(43):   $w19 = ORRWrs $wzr, $w5, 0

Fixup kills for %bb.30
********** MI Scheduling **********
main:%bb.31 if.then82
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$w8
SU(1):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(2):   $x20 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x20 = SUBXri $fp, 208, 0
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   $w8 = MOVZWi 1, 0
SU(2):   $x20 = SUBXri $fp, 208, 0
SU(1):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)

Fixup kills for %bb.31
********** MI Scheduling **********
main:%bb.32 for.cond83
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.34, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.34, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv

Fixup kills for %bb.32
********** MI Scheduling **********
main:%bb.33 for.body86
  From: renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.32
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $w16 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w16
    SU(4): Ord  Latency=0 Memory
SU(2):   STRDroX renamable $d0, renamable $x20, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx88)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Anti Latency=0
SU(3):   renamable $w8 = nsw ADDWri renamable $w16, 1, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Out  Latency=1
  Successors:
    SU(4): Data Latency=1 Reg=$w8
SU(4):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDroX renamable $d0, renamable $x20, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx88)
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = nsw ADDWri renamable $w16, 1, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w16 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(2):   STRDroX renamable $d0, renamable $x20, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx88)
SU(3):   renamable $w8 = nsw ADDWri renamable $w16, 1, 0
SU(4):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.33 for.body86
  From: renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w19
SU(1):   $w0 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w0 = ORRWrs $wzr, $w19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   $w0 = ORRWrs $wzr, $w19, 0

Fixup kills for %bb.33
********** MI Scheduling **********
main:%bb.34 for.end91
  From: $x16 = SUBXri $fp, 208, 0
    To: Bcc 1, %bb.36, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x16 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(1): Data Latency=1 Reg=$x16
SU(1):   renamable $d0 = LDRDui renamable $x16, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x16
  Successors:
    SU(2): Data Latency=4 Reg=$d0
SU(2):   FCMPDri renamable $d0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.36, implicit $nzcv
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x16 = SUBXri $fp, 208, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = LDRDui renamable $x16, 14 :: (dereferenceable load 8 from %ir.tmax)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) FCMPDri renamable $d0, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   $x16 = SUBXri $fp, 208, 0
SU(1):   renamable $d0 = LDRDui renamable $x16, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   FCMPDri renamable $d0, implicit-def $nzcv

Fixup kills for %bb.34
********** MI Scheduling **********
main:%bb.35 if.then94
  From: $x8 = MOVZXi 16368, 48
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui renamable $x8, renamable $x16, 14 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x8 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXui renamable $x8, renamable $x16, 14 :: (store 8 into %ir.tmax)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   $x8 = MOVZXi 16368, 48
SU(1):   STRXui renamable $x8, renamable $x16, 14 :: (store 8 into %ir.tmax)

Fixup kills for %bb.35
********** MI Scheduling **********
main:%bb.36 if.end95
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(4): Data Latency=4 Reg=$d1
SU(3):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(4):   STRDui renamable $d1, $sp, 17 :: (store 8 into %stack.17)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$d1
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) %const.5
  Ready @0c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d1, $sp, 17 :: (store 8 into %stack.17)
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.5
SU(2):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
SU(0):   $w8 = MOVZWi 1, 0
SU(3):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
SU(4):   STRDui renamable $d1, $sp, 17 :: (store 8 into %stack.17)

********** MI Scheduling **********
main:%bb.36 if.end95
  From: $x0 = ADRP target-flags(aarch64-page) @bt__str_37___SECTION_
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @bt__str_37___SECTION_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_37___SECTION_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @bt__str_37___SECTION_
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_37___SECTION_, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @bt__str_37___SECTION_
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_37___SECTION_, 0

Fixup kills for %bb.36
********** MI Scheduling **********
main:%bb.37 for.cond97
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.14, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.14, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv

Fixup kills for %bb.37
********** MI Scheduling **********
main:%bb.38 for.body100
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.40, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.40, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.38 for.body100
  From: renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x8 = UBFMXri renamable $x8, 61, 60
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(7): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
SU(2):   $x16 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(6): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   renamable $d0 = LDRDroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx106)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(10): Data Latency=4 Reg=$d0
    SU(8): Data Latency=4 Reg=$d0
    SU(6): Anti Latency=0
SU(4):   $x20 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Data Latency=1 Reg=$x20
SU(5):   renamable $d2 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=$x20
  Successors:
    SU(9): Data Latency=4 Reg=$d2
SU(6):   $x16 = ADDXri $sp, 160, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Data Latency=1 Reg=$x16
SU(7):   renamable $x19 = LDRXroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx102)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(6): Data Latency=1 Reg=$x16
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(13): Data Latency=4 Reg=$x19
SU(8):   renamable $d1 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=$d0
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d1
SU(9):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
    SU(5): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(10): Data Latency=1 Reg=$d1
SU(10):   STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d1
    SU(3): Data Latency=4 Reg=$d0
SU(11):   $x0 = ADRP target-flags(aarch64-page) @bt__str_38_____8s__9_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x0
SU(12):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_38_____8s__9_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(13):   $x1 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=1 Artificial
    SU(12): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 11 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 11 2 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(2) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x16 = SUBXri $fp, 208, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 11 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x20 = SUBXri $fp, 208, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 11 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(5) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d2 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 1 
  TopQ.A RemainingLatency 0 + 4c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = UBFMXri renamable $x8, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = LDRDroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx106)
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 11 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(6) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x16 = ADDXri $sp, 160, 0
  Ready @6c
  TopQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 11 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(7) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x19 = LDRXroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx102)
  Ready @7c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 13 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) $x0 = ADRP target-flags(aarch64-page) @bt__str_38_____8s__9_
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 
Queue TopQ.A: 12 8 
  TopQ.A RemainingLatency 0 + 9c > CritPath 11
  Cand SU(12) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = FMULDrr renamable $d0, renamable $d1
  Ready @9c
  TopQ.A TopLatency SU(8) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 
Queue TopQ.A: 12 9 
  TopQ.A RemainingLatency 0 + 10c > CritPath 11
  Cand SU(12) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  Ready @10c
  TopQ.A TopLatency SU(9) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 13 
  TopQ.A RemainingLatency 0 + 11c > CritPath 11
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_38_____8s__9_, 0
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 10 
  TopQ.A RemainingLatency 0 + 12c > CritPath 11
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) $x1 = ORRXrs $xzr, $x19, 0
  Ready @12c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  Ready @13c
  TopQ.A TopLatency SU(10) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(2):   $x16 = SUBXri $fp, 208, 0
SU(4):   $x20 = SUBXri $fp, 208, 0
SU(5):   renamable $d2 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   renamable $x8 = UBFMXri renamable $x8, 61, 60
SU(3):   renamable $d0 = LDRDroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx106)
SU(6):   $x16 = ADDXri $sp, 160, 0
SU(7):   renamable $x19 = LDRXroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx102)
SU(11):   $x0 = ADRP target-flags(aarch64-page) @bt__str_38_____8s__9_
SU(8):   renamable $d1 = FMULDrr renamable $d0, renamable $d1
SU(9):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
SU(12):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_38_____8s__9_, 0
SU(13):   $x1 = ORRXrs $xzr, $x19, 0
SU(10):   STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)

Fixup kills for %bb.38
********** MI Scheduling **********
main:%bb.39 if.then112
  From: renamable $d0 = LDRDui renamable $x20, 5 :: (dereferenceable load 8 from %ir.arrayidx121)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui renamable $x20, 5 :: (dereferenceable load 8 from %ir.arrayidx121)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(12): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
SU(1):   renamable $d1, renamable $d2 = LDPDi renamable $x20, 13 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
    SU(6): Data Latency=4 Reg=$d2
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $d3 = FSUBDrr renamable $d0, renamable $d1
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(7): Data Latency=1 Reg=$d3
    SU(5): Data Latency=1 Reg=$d3
    SU(3): Data Latency=1 Reg=$d3
    SU(12): Data Latency=1 Reg=$q3
    SU(4): Anti Latency=0
    SU(12): Anti Latency=0
    SU(6): Anti Latency=0
SU(3):   STRDui renamable $d3, renamable $x20, 13 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$d3
    SU(1): Ord  Latency=0 Memory
SU(4):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(12): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
SU(5):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
    SU(2): Data Latency=1 Reg=$d3
  Successors:
    SU(12): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d0
    SU(12): Anti Latency=0
SU(6):   renamable $d1 = FDIVDrr renamable $d0, renamable $d2
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(7): Data Latency=1 Reg=$d1
    SU(12): Anti Latency=0
SU(7):   STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$d1
    SU(2): Data Latency=1 Reg=$d3
SU(8):   $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x1 = ADRP target-flags(aarch64-page) @bt__str_41_rest_rhs_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x1
SU(11):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_41_rest_rhs_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   $q0 = ORRv16i8 $q3, $q3
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Out  Latency=1
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
    SU(2): Data Latency=1 Reg=$q3
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(12): Ord  Latency=1 Artificial
    SU(11): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 10 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui renamable $x20, 5 :: (dereferenceable load 8 from %ir.arrayidx121)
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 1 8 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(10) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1, renamable $d2 = LDPDi renamable $x20, 13 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 10 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 10 9 
  TopQ.A RemainingLatency 0 + 3c > CritPath 10
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x1 = ADRP target-flags(aarch64-page) @bt__str_41_rest_rhs_
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 9 11 
  TopQ.A RemainingLatency 0 + 4c > CritPath 10
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
  Ready @4c
  TopQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 10
  Cand SU(11) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d3 = FSUBDrr renamable $d0, renamable $d1
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 3 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 10
  Cand SU(11) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  Ready @6c
  TopQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 11 3 
  TopQ.A RemainingLatency 0 + 7c > CritPath 10
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_41_rest_rhs_, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDui renamable $d3, renamable $x20, 13 :: (store 8 into %ir.t)
  Ready @8c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FMULDrr renamable $d3, renamable $d0
  Ready @10c
  TopQ.A TopLatency SU(5) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d1 = FDIVDrr renamable $d0, renamable $d2
  Ready @11c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 10
  Cand SU(7) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) $q0 = ORRv16i8 $q3, $q3
  Ready @12c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  Ready @13c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $d0 = LDRDui renamable $x20, 5 :: (dereferenceable load 8 from %ir.arrayidx121)
SU(1):   renamable $d1, renamable $d2 = LDPDi renamable $x20, 13 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
SU(8):   $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
SU(10):   $x1 = ADRP target-flags(aarch64-page) @bt__str_41_rest_rhs_
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
SU(2):   renamable $d3 = FSUBDrr renamable $d0, renamable $d1
SU(4):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
SU(11):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_41_rest_rhs_, 0
SU(3):   STRDui renamable $d3, renamable $x20, 13 :: (store 8 into %ir.t)
SU(5):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
SU(6):   renamable $d1 = FDIVDrr renamable $d0, renamable $d2
SU(12):   $q0 = ORRv16i8 $q3, $q3
SU(7):   STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)

********** MI Scheduling **********
main:%bb.39 if.then112
  From: renamable $d0, renamable $d1 = LDPDi renamable $x20, 2 :: (dereferenceable load 8 from %ir.arrayidx113, align 16), (dereferenceable load 8 from %ir.arrayidx114)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 15
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x20, 2 :: (dereferenceable load 8 from %ir.arrayidx113, align 16), (dereferenceable load 8 from %ir.arrayidx114)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(2): Out  Latency=1
    SU(14): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
SU(1):   renamable $d2 = LDRDui renamable $x20, 4 :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d2
    SU(14): Data Latency=4 Reg=$q2
SU(2):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(6): Out  Latency=1
    SU(14): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d0
    SU(14): Anti Latency=0
    SU(3): Anti Latency=0
SU(3):   renamable $d1 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d1
SU(4):   renamable $d2 = FADDDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=$d0
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    SU(9): Data Latency=1 Reg=$d2
    SU(7): Data Latency=1 Reg=$d2
    SU(5): Data Latency=1 Reg=$d2
    SU(14): Data Latency=1 Reg=$q2
    SU(6): Anti Latency=0
    SU(14): Anti Latency=0
SU(5):   STRDui renamable $d2, renamable $x20, 13 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d2
SU(6):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(14): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
SU(7):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
    SU(4): Data Latency=1 Reg=$d2
  Successors:
    SU(14): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
    SU(14): Anti Latency=0
SU(8):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=$d0
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(9): Data Latency=1 Reg=$d1
    SU(14): Anti Latency=0
SU(9):   STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$d1
    SU(4): Data Latency=1 Reg=$d2
SU(10):   $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
SU(11):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   $x1 = ADRP target-flags(aarch64-page) @bt__str_40_sub_rhs_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x1
SU(13):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_40_sub_rhs_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(14):   $q0 = ORRv16i8 $q2, $q2
  # preds left       : 10
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
    SU(4): Data Latency=1 Reg=$q2
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$q2
    SU(0): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(14): Ord  Latency=1 Artificial
    SU(13): Ord  Latency=1 Artificial
    SU(11): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 12 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0, renamable $d1 = LDPDi renamable $x20, 2 :: (dereferenceable load 8 from %ir.arrayidx113, align 16), (dereferenceable load 8 from %ir.arrayidx114)
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 12 1 10 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(12) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDRDui renamable $x20, 4 :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 12 10 
  TopQ.A RemainingLatency 0 + 2c > CritPath 11
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 12 11 
  TopQ.A RemainingLatency 0 + 3c > CritPath 11
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x1 = ADRP target-flags(aarch64-page) @bt__str_40_sub_rhs_
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 2 
  TopQ.A RemainingLatency 0 + 4c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(2) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = FADDDrr renamable $d0, renamable $d1
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 4 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d2 = FADDDrr renamable $d0, renamable $d2
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 3 5 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
  Cand SU(6) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  Ready @6c
  TopQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 11 13 3 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 11 13 5 
  TopQ.A RemainingLatency 0 + 8c > CritPath 11
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 13 
  TopQ.A RemainingLatency 0 + 9c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(13) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_40_sub_rhs_, 0
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 7 
  TopQ.A RemainingLatency 0 + 10c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d0 = FMULDrr renamable $d2, renamable $d0
  Ready @10c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = FDIVDrr renamable $d0, renamable $d1
  Ready @11c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 9 14 
  TopQ.A RemainingLatency 0 + 12c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $q0 = ORRv16i8 $q2, $q2
  Ready @12c
  TopQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 9 
  TopQ.A RemainingLatency 0 + 13c > CritPath 11
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STRDui renamable $d2, renamable $x20, 13 :: (store 8 into %ir.t)
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  Ready @14c
  TopQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x20, 2 :: (dereferenceable load 8 from %ir.arrayidx113, align 16), (dereferenceable load 8 from %ir.arrayidx114)
SU(1):   renamable $d2 = LDRDui renamable $x20, 4 :: (dereferenceable load 8 from %ir.arrayidx116, align 16)
SU(10):   $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
SU(12):   $x1 = ADRP target-flags(aarch64-page) @bt__str_40_sub_rhs_
SU(2):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
SU(4):   renamable $d2 = FADDDrr renamable $d0, renamable $d2
SU(6):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
SU(3):   renamable $d1 = LDRDui renamable $x20, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(11):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
SU(13):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_40_sub_rhs_, 0
SU(7):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
SU(8):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1
SU(14):   $q0 = ORRv16i8 $q2, $q2
SU(5):   STRDui renamable $d2, renamable $x20, 13 :: (store 8 into %ir.t)
SU(9):   STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)

Fixup kills for %bb.39
********** MI Scheduling **********
main:%bb.40 if.else126
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.42, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 8, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.42, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 8, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 8, 0, implicit-def $nzcv

Fixup kills for %bb.40
********** MI Scheduling **********
main:%bb.41 if.then129
  From: $x8 = SUBXri $fp, 208, 0
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 16
ScheduleDAGMI::schedule starting
SU(0):   $x8 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 12
  Successors:
    SU(6): Data Latency=1 Reg=$x8
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d0, renamable $d1 = LDPDi renamable $x8, 8 :: (dereferenceable load 8 from %ir.arrayidx130, align 16), (dereferenceable load 8 from %ir.arrayidx131)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 11
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(15): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
    SU(4): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(2):   renamable $d2 = LDRDui renamable $x8, 10 :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 10
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d2
    SU(15): Data Latency=4 Reg=$q2
SU(3):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
    SU(1): Data Latency=4 Reg=$d1
  Successors:
    SU(7): Out  Latency=1
    SU(15): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(15): Anti Latency=0
    SU(4): Anti Latency=0
SU(4):   renamable $d1 = LDRDui renamable $x8, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$d1
SU(5):   renamable $d2 = FSUBDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 6
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d2
  Successors:
    SU(10): Data Latency=1 Reg=$d2
    SU(8): Data Latency=1 Reg=$d2
    SU(6): Data Latency=1 Reg=$d2
    SU(15): Data Latency=1 Reg=$q2
    SU(7): Anti Latency=0
    SU(15): Anti Latency=0
SU(6):   STRDui renamable $d2, renamable $x8, 13 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d2
    SU(0): Data Latency=1 Reg=$x8
SU(7):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 6
  Predecessors:
    SU(5): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(15): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d0
SU(8):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
    SU(5): Data Latency=1 Reg=$d2
  Successors:
    SU(15): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
    SU(15): Anti Latency=0
SU(9):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=$d0
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(10): Data Latency=1 Reg=$d1
    SU(15): Anti Latency=0
SU(10):   STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d1
    SU(5): Data Latency=1 Reg=$d2
SU(11):   $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x0
SU(12):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(13):   $x1 = ADRP target-flags(aarch64-page) @bt__str_42_sub_zsol_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x1
SU(14):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_42_sub_zsol_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(15):   $q0 = ORRv16i8 $q2, $q2
  # preds left       : 10
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(9): Anti Latency=0
    SU(8): Out  Latency=1
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
    SU(5): Data Latency=1 Reg=$q2
    SU(5): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Anti Latency=0
    SU(2): Data Latency=4 Reg=$q2
    SU(1): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(15): Ord  Latency=1 Artificial
    SU(14): Ord  Latency=1 Artificial
    SU(12): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 12
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 11 13 
  TopQ.A RemainingLatency 0 + 0c > CritPath 12
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = SUBXri $fp, 208, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 11 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 12
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(2) TOP-PATH                  10 cycles 
  Cand SU(1) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0, renamable $d1 = LDPDi renamable $x8, 8 :: (dereferenceable load 8 from %ir.arrayidx130, align 16), (dereferenceable load 8 from %ir.arrayidx131)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 13 11 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 12
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(2) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d2 = LDRDui renamable $x8, 10 :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 13 11 
  TopQ.A RemainingLatency 0 + 3c > CritPath 12
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 13 12 
  TopQ.A RemainingLatency 0 + 4c > CritPath 12
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) $x1 = ADRP target-flags(aarch64-page) @bt__str_42_sub_zsol_
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 14 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 12
  Cand SU(12) ORDER                              
  Cand SU(3) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 14 5 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 12
  Cand SU(12) ORDER                              
  Cand SU(5) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d2 = FSUBDrr renamable $d0, renamable $d2
  Ready @6c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 14 4 6 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 12
  Cand SU(12) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
  Cand SU(7) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  Ready @7c
  TopQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 12 14 4 6 
  TopQ.A RemainingLatency 0 + 8c > CritPath 12
  Cand SU(12) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = LDRDui renamable $x8, 14 :: (dereferenceable load 8 from %ir.tmax)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 12 14 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 12
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 6 14 
  TopQ.A RemainingLatency 0 + 10c > CritPath 12
  Cand SU(6) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_42_sub_zsol_, 0
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 12
  Cand SU(6) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d0 = FMULDrr renamable $d2, renamable $d0
  Ready @11c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 9 
  TopQ.A RemainingLatency 0 + 12c > CritPath 12
  Cand SU(6) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $d1 = FDIVDrr renamable $d0, renamable $d1
  Ready @12c
  TopQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 10 15 
  TopQ.A RemainingLatency 0 + 13c > CritPath 12
  Cand SU(6) ORDER                              
  Cand SU(15) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) $q0 = ORRv16i8 $q2, $q2
  Ready @13c
  TopQ.A BotLatency SU(15) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 10 
  TopQ.A RemainingLatency 0 + 14c > CritPath 12
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STRDui renamable $d2, renamable $x8, 13 :: (store 8 into %ir.t)
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  Ready @15c
  TopQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   $x8 = SUBXri $fp, 208, 0
SU(1):   renamable $d0, renamable $d1 = LDPDi renamable $x8, 8 :: (dereferenceable load 8 from %ir.arrayidx130, align 16), (dereferenceable load 8 from %ir.arrayidx131)
SU(2):   renamable $d2 = LDRDui renamable $x8, 10 :: (dereferenceable load 8 from %ir.arrayidx133, align 16)
SU(11):   $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
SU(13):   $x1 = ADRP target-flags(aarch64-page) @bt__str_42_sub_zsol_
SU(3):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
SU(5):   renamable $d2 = FSUBDrr renamable $d0, renamable $d2
SU(7):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
SU(4):   renamable $d1 = LDRDui renamable $x8, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(12):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
SU(14):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_42_sub_zsol_, 0
SU(8):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
SU(9):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1
SU(15):   $q0 = ORRv16i8 $q2, $q2
SU(6):   STRDui renamable $d2, renamable $x8, 13 :: (store 8 into %ir.t)
SU(10):   STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)

Fixup kills for %bb.41
********** MI Scheduling **********
main:%bb.42 if.else138
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.44, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.44, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv

Fixup kills for %bb.42
********** MI Scheduling **********
main:%bb.43 if.then141
  From: $x8 = SUBXri $fp, 208, 0
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   $x8 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d0, renamable $d1 = LDPDi renamable $x8, 9 :: (dereferenceable load 8 from %ir.arrayidx142), (dereferenceable load 8 from %ir.arrayidx143, align 16)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 10
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(13): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
    SU(7): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(2):   renamable $d2 = LDRDui renamable $x8, 14 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Data Latency=4 Reg=$d2
SU(3):   renamable $d3 = FADDDrr renamable $d0, renamable $d1
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$d0
    SU(1): Data Latency=4 Reg=$d1
  Successors:
    SU(8): Data Latency=1 Reg=$d3
    SU(6): Data Latency=1 Reg=$d3
    SU(4): Data Latency=1 Reg=$d3
    SU(13): Data Latency=1 Reg=$q3
    SU(5): Anti Latency=0
    SU(13): Anti Latency=0
    SU(7): Anti Latency=0
SU(4):   STRDui renamable $d3, renamable $x8, 13 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d3
    SU(0): Data Latency=1 Reg=$x8
SU(5):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(13): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
SU(6):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
    SU(3): Data Latency=1 Reg=$d3
  Successors:
    SU(13): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(13): Anti Latency=0
SU(7):   renamable $d1 = FDIVDrr renamable $d0, renamable $d2
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=$d0
    SU(3): Anti Latency=0
    SU(2): Data Latency=4 Reg=$d2
    SU(1): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(8): Data Latency=1 Reg=$d1
    SU(13): Anti Latency=0
SU(8):   STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$d1
    SU(3): Data Latency=1 Reg=$d3
SU(9):   $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x0
SU(10):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(11):   $x1 = ADRP target-flags(aarch64-page) @bt__str_43_redist_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x1
SU(12):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_43_redist_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(13):   $q0 = ORRv16i8 $q3, $q3
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
    SU(6): Anti Latency=0
    SU(5): Out  Latency=1
    SU(3): Data Latency=1 Reg=$q3
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=1 Artificial
    SU(12): Ord  Latency=1 Artificial
    SU(10): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 11 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = SUBXri $fp, 208, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 9 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0, renamable $d1 = LDPDi renamable $x8, 9 :: (dereferenceable load 8 from %ir.arrayidx142), (dereferenceable load 8 from %ir.arrayidx143, align 16)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 11 9 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d2 = LDRDui renamable $x8, 14 :: (dereferenceable load 8 from %ir.tmax)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 11 9 
  TopQ.A RemainingLatency 0 + 3c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 11 10 
  TopQ.A RemainingLatency 0 + 4c > CritPath 11
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x1 = ADRP target-flags(aarch64-page) @bt__str_43_redist_
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 12 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(10) ORDER                              
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d3 = FADDDrr renamable $d0, renamable $d1
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 12 4 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(10) ORDER                              
  Cand SU(5) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  Ready @6c
  TopQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 10 12 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 11
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 12 
  TopQ.A RemainingLatency 0 + 8c > CritPath 11
  Cand SU(4) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_43_redist_, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d3, renamable $x8, 13 :: (store 8 into %ir.t)
  Ready @9c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d0 = FMULDrr renamable $d3, renamable $d0
  Ready @10c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d1 = FDIVDrr renamable $d0, renamable $d2
  Ready @11c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 11
  Cand SU(8) ORDER                              
  Cand SU(13) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $q0 = ORRv16i8 $q3, $q3
  Ready @12c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)
  Ready @13c
  TopQ.A TopLatency SU(8) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   $x8 = SUBXri $fp, 208, 0
SU(1):   renamable $d0, renamable $d1 = LDPDi renamable $x8, 9 :: (dereferenceable load 8 from %ir.arrayidx142), (dereferenceable load 8 from %ir.arrayidx143, align 16)
SU(2):   renamable $d2 = LDRDui renamable $x8, 14 :: (dereferenceable load 8 from %ir.tmax)
SU(9):   $x0 = ADRP target-flags(aarch64-page) @bt__str_39__________8
SU(11):   $x1 = ADRP target-flags(aarch64-page) @bt__str_43_redist_
SU(3):   renamable $d3 = FADDDrr renamable $d0, renamable $d1
SU(5):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.17)
SU(10):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_39__________8, 0
SU(12):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @bt__str_43_redist_, 0
SU(4):   STRDui renamable $d3, renamable $x8, 13 :: (store 8 into %ir.t)
SU(6):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
SU(7):   renamable $d1 = FDIVDrr renamable $d0, renamable $d2
SU(13):   $q0 = ORRv16i8 $q3, $q3
SU(8):   STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.18), (store 8 into %stack.19)

Fixup kills for %bb.43
********** MI Scheduling **********
main:%bb.44 for.inc151
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.37
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
SU(3):   renamable $d1 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   B %bb.37
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = LDRDui $sp, 17 :: (load 8 from %stack.17)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(3):   renamable $d1 = LDRDui $sp, 17 :: (load 8 from %stack.17)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)

Fixup kills for %bb.44
