Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=1, align=4, at location [SP]
  fi#13: size=4, align=4, at location [SP]
  fi#14: size=4, align=4, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=88, align=16, at location [SP]
  fi#17: size=88, align=16, at location [SP]
  fi#18: size=8, align=8, at location [SP]
  fi#19: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: 5.000000e-01, align=8
  cp#1: 7.000000e+00, align=8
  cp#2: 4.000000e-02, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
Function Live Ins: $w0 in %0, $x1 in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1
  %394:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  %1:gpr64 = COPY $x1
  %0:gpr32 = COPY $w0
  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  STRXui %1:gpr64, %394:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
  STRXui $xzr, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  STRWui $wzr, %stack.13.ifmortar, 0 :: (store 4 into %ir.ifmortar)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_timer_flag
  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 0, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %6:gpr64 = COPY killed $x8
  STRXui %6:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
  CBZX %6:gpr64, %bb.2
  B %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %9:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %10:gpr32 = MOVi32imm 1
  STRWui %10:gpr32, %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  %11:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_2_total_
  STRXui %11:gpr64, %stack.17.t_names, 1 :: (store 8 into %ir.arrayidx)
  %12:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_3_init_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_3_init_
  STRXui %12:gpr64, %stack.17.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
  %13:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_4_convect_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_4_convect_
  STRXui %13:gpr64, %stack.17.t_names, 3 :: (store 8 into %ir.arrayidx2)
  %14:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_5_transfb_c_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_5_transfb_c_
  STRXui %14:gpr64, %stack.17.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
  %15:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_6_diffusion_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_6_diffusion_
  STRXui %15:gpr64, %stack.17.t_names, 5 :: (store 8 into %ir.arrayidx4)
  %16:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_7_transf_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_7_transf_
  STRXui %16:gpr64, %stack.17.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
  %17:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_8_transfb_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_8_transfb_
  STRXui %17:gpr64, %stack.17.t_names, 7 :: (store 8 into %ir.arrayidx6)
  %18:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_9_adaptation, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_9_adaptation
  STRXui %18:gpr64, %stack.17.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
  %19:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_10_transf_b_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_10_transf_b_
  STRXui %19:gpr64, %stack.17.t_names, 9 :: (store 8 into %ir.arrayidx8)
  %20:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_11_add2_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_11_add2_
  STRXui %20:gpr64, %stack.17.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
  %21:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %21:gpr64
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 1, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %21:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %7:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  STRWui $wzr, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.11(0x30000000); %bb.4(62.50%), %bb.11(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_12____NAS_Par, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_12____NAS_Par
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 2, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_13_inputua_da, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_13_inputua_da
  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 3, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %27:gpr64 = COPY killed $x8
  STRXui %27:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
  CBZX %27:gpr64, %bb.11
  B %bb.4

bb.4.if.then14:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_14__Reading_f, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_14__Reading_f
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 4, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %41:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %41:gpr64
  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
  $x2 = MOVaddr target-flags(aarch64-page) @fre, target-flags(aarch64-pageoff, aarch64-nc) @fre
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 5, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %41:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %44:gpr32 = COPY killed $w8
  STRWui %44:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

bb.5.while.cond:
; predecessors: %bb.4, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %45:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %45:gpr64
  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 6, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %45:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %46:gpr32sp = COPY killed $w8
  dead $wzr = SUBSWri %46:gpr32sp, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.5, implicit killed $nzcv
  B %bb.6

bb.6.while.end:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %48:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %48:gpr64
  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
  $x2 = MOVaddr target-flags(aarch64-page) @niter, target-flags(aarch64-pageoff, aarch64-nc) @niter
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 7, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %48:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %51:gpr32 = COPY killed $w8
  STRWui %51:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

bb.7.while.cond20:
; predecessors: %bb.6, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  %52:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %52:gpr64
  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 8, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %52:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %53:gpr32sp = COPY killed $w8
  dead $wzr = SUBSWri %53:gpr32sp, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.7, implicit killed $nzcv
  B %bb.8

bb.8.while.end24:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %55:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %55:gpr64
  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
  $x2 = MOVaddr target-flags(aarch64-page) @nmxh, target-flags(aarch64-pageoff, aarch64-nc) @nmxh
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 9, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %55:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %58:gpr32 = COPY killed $w8
  STRWui %58:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

bb.9.while.cond26:
; predecessors: %bb.8, %bb.9
  successors: %bb.9(0x7c000000), %bb.10(0x04000000); %bb.9(96.88%), %bb.10(3.12%)

  %59:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %59:gpr64
  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 10, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %59:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %60:gpr32sp = COPY killed $w8
  dead $wzr = SUBSWri %60:gpr32sp, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.9, implicit killed $nzcv
  B %bb.10

bb.10.while.end30:
; predecessors: %bb.9
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %62:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %62:gpr64
  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_16__lf_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_16__lf_
  $x2 = MOVaddr target-flags(aarch64-page) @alpha, target-flags(aarch64-pageoff, aarch64-nc) @alpha
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 11, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %62:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %65:gpr32 = COPY killed $w8
  STRWui %65:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  %66:gpr32 = MOVi32imm 85
  STRBBui %66:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)
  %67:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %67:gpr64
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 12, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %67:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.12

bb.11.if.else33:
; predecessors: %bb.3
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_17__No_input_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_17__No_input_
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 13, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %30:gpr64temp = ADRP target-flags(aarch64-page) @fre
  %31:gpr32 = MOVi32imm 5
  STRWui %31:gpr32, %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
  %32:gpr64temp = ADRP target-flags(aarch64-page) @niter
  %33:gpr32 = MOVi32imm 200
  STRWui %33:gpr32, %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
  %34:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
  %35:gpr32 = MOVi32imm 10
  STRWui %35:gpr32, %34:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
  %36:gpr64temp = ADRP target-flags(aarch64-page) @alpha
  %37:gpr64 = MOVi64imm 4590140797810047451
  STRXui %37:gpr64, %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
  %38:gpr32 = MOVi32imm 66
  STRBBui %38:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)

bb.12.if.end35:
; predecessors: %bb.11, %bb.10
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %69:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %71:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  $d0 = COPY %70:fpr64
  $d1 = COPY %72:fpr64
  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 14, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %73:fpr64 = COPY killed $d0
  %74:gpr64temp = ADRP target-flags(aarch64-page) @dlmin
  STRDui %73:fpr64, %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
  %75:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  %76:fpr64 = LDRDui %75:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  %77:fpr64 = FMULDrr %73:fpr64, %76:fpr64
  %78:gpr64temp = ADRP target-flags(aarch64-page) @dtime
  STRDui %77:fpr64, %78:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_18__Levels_of, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_18__Levels_of
  $w1 = MOVi32imm 7
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 15, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %82:gpr64temp = ADRP target-flags(aarch64-page) @fre
  %83:gpr32 = LDRWui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_19__Adaptatio, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_19__Adaptatio
  $w1 = COPY %83:gpr32
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 16, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %83:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %86:gpr64temp = ADRP target-flags(aarch64-page) @niter
  %87:gpr32 = LDRWui %86:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  %88:fpr64 = LDRDui %78:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_20__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_20__Time_step
  $w1 = COPY %87:gpr32
  $d0 = COPY %88:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 17, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %87:gpr32, %88:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %91:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
  %92:gpr32 = LDRWui %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_21__CG_iterat, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_21__CG_iterat
  $w1 = COPY %92:gpr32
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 18, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %92:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %95:gpr64temp = ADRP target-flags(aarch64-page) @alpha
  %96:fpr64 = LDRDui %95:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_22__Heat_sour, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_22__Heat_sour
  $d0 = COPY %96:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 19, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %96:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @top_constants, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 20, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %99:gpr32 = MOVi32imm 1
  STRWui %99:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)

bb.13.for.cond:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

  %100:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %100:gpr32common, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.15, implicit killed $nzcv
  B %bb.14

bb.14.for.body:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %391:gpr32 = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %391:gpr32
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 21, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %391:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %392:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  %393:gpr32common = nsw ADDWri %392:gpr32common, 1, 0
  STRWui %393:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  B %bb.13

bb.15.for.end:
; predecessors: %bb.13
  successors: %bb.16(0x50000000), %bb.17(0x30000000); %bb.16(62.50%), %bb.17(37.50%)

  %102:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %103:gpr32 = LDRWui %102:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %103:gpr32, %bb.17
  B %bb.16

bb.16.if.then43:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 2
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 22, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.17.if.end44:
; predecessors: %bb.15, %bb.16
  successors: %bb.18(0x50000000), %bb.19(0x30000000); %bb.18(62.50%), %bb.19(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @create_initial_grid, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 23, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %105:gpr64temp = ADRP target-flags(aarch64-page) @ntot
  %106:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  $w1 = COPY %106:gpr32
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 24, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %106:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %109:gpr64temp = ADRP target-flags(aarch64-page) @nelt
  %110:gpr32 = LDRWui %109:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  %111:gpr32 = ADDWrs %110:gpr32, %110:gpr32, 1
  %112:gpr32 = UBFMWri %111:gpr32, 29, 28
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sje, target-flags(aarch64-pageoff, aarch64-nc) @sje
  $w1 = COPY %112:gpr32
  $w2 = MOVi32imm -1
  BL @nr_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 25, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, %112:gpr32, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @coef, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 26, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @geom1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 27, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setdef, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 28, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setpcmo_pre, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 29, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %115:gpr64temp = ADRP target-flags(aarch64-page) @time
  STRXui $xzr, %115:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @mortar, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 30, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @prepwork, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 31, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = ADDXri %stack.13.ifmortar, 0, 0
  $w1 = COPY $wzr
  BL @adaptation, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 32, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %119:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %120:gpr32 = LDRWui %119:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %120:gpr32, %bb.19
  B %bb.18

bb.18.if.then47:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 2
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 33, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.19.if.end48:
; predecessors: %bb.17, %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %122:gpr32 = MOVi32imm 1
  $w0 = MOVi32imm 1
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 34, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %123:gpr64temp = ADRP target-flags(aarch64-page) @time
  STRXui $xzr, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  STRWui $wzr, %stack.3.step, 0 :: (store 4 into %ir.step)
  %127:gpr64temp = ADRP target-flags(aarch64-page) @niter
  %229:gpr64temp = ADRP target-flags(aarch64-page) @ntot
  %231:gpr64 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  %240:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %247:gpr64temp = ADRP target-flags(aarch64-page) @nelt
  undef %376.sub_32:gpr64 = MOVi32imm 1000
  %378:gpr64 = MOVaddr target-flags(aarch64-page) @ta2, target-flags(aarch64-pageoff, aarch64-nc) @ta2
  %382:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
  %352:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  undef %356.sub_32:gpr64 = MOVi32imm 200
  undef %317.sub_32:gpr64 = MOVi32imm 24
  %319:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
  %265:gpr64temp = ADRP target-flags(aarch64-page) @nmor
  %282:gpr64temp = ADRP target-flags(aarch64-page) @dtime
  %287:gpr64temp = ADRP target-flags(aarch64-page) @fre

bb.20.for.cond49:
; predecessors: %bb.19, %bb.64
  successors: %bb.21(0x7c000000), %bb.65(0x04000000); %bb.21(96.88%), %bb.65(3.12%)

  %126:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  %128:gpr32 = LDRWui %127:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  dead $wzr = SUBSWrr %126:gpr32, %128:gpr32, implicit-def $nzcv
  Bcc 12, %bb.65, implicit killed $nzcv
  B %bb.21

bb.21.for.body51:
; predecessors: %bb.20
  successors: %bb.22(0x40000000), %bb.28(0x40000000); %bb.22(50.00%), %bb.28(50.00%)

  %227:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  dead $wzr = SUBSWri %227:gpr32common, 1, 0, implicit-def $nzcv
  Bcc 1, %bb.28, implicit killed $nzcv
  B %bb.22

bb.22.if.then53:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  %230:gpr32 = LDRWui %229:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  $w1 = COPY %230:gpr32
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 35, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %230:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRXui $xzr, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  STRXui $xzr, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  STRWui %122:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)

bb.23.for.cond54:
; predecessors: %bb.22, %bb.26
  successors: %bb.24(0x7c000000), %bb.27(0x04000000); %bb.24(96.88%), %bb.27(3.12%)

  %236:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %236:gpr32common, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.27, implicit killed $nzcv
  B %bb.24

bb.24.for.body56:
; predecessors: %bb.23
  successors: %bb.25(0x40000000), %bb.26(0x40000000); %bb.25(50.00%), %bb.26(50.00%)

  %386:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %386:gpr32common, 2, 0, implicit-def $nzcv
  Bcc 0, %bb.26, implicit killed $nzcv
  B %bb.25

bb.25.if.then58:
; predecessors: %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)

  %388:gpr32 = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %388:gpr32
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 36, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %388:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.26.for.inc60:
; predecessors: %bb.24, %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  %389:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  %390:gpr32common = nsw ADDWri %389:gpr32common, 1, 0
  STRWui %390:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  B %bb.23

bb.27.for.end62:
; predecessors: %bb.23
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 1
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 37, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.28.if.end63:
; predecessors: %bb.21, %bb.27
  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)

  %239:gpr32 = LDRWui %stack.13.ifmortar, 0 :: (dereferenceable load 4 from %ir.ifmortar)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %239:gpr32
  BL @convect, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 38, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %239:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %241:gpr32 = LDRWui %240:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %241:gpr32, %bb.30
  B %bb.29

bb.29.if.then65:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 9
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 39, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.30.if.end66:
; predecessors: %bb.28, %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @tmort, target-flags(aarch64-pageoff, aarch64-nc) @tmort
  $x1 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 40, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRWui $wzr, %stack.4.ie, 0 :: (store 4 into %ir.ie)

bb.31.for.cond67:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

  %246:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %248:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %246:gpr32, %248:gpr32, implicit-def $nzcv
  Bcc 10, %bb.33, implicit killed $nzcv
  B %bb.32

bb.32.for.body69:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %374:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %377:gpr64 = MADDXrrr %374:gpr64, %376:gpr64, $xzr
  %379:gpr64 = ADDXrr %378:gpr64, %377:gpr64
  %381:gpr64 = ADDXrr %231:gpr64, %377:gpr64
  %383:gpr32 = LDRWroX %382:gpr64common, %374:gpr64, 0, 1 :: (load 4 from %ir.arrayidx75)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %379:gpr64
  $x1 = COPY %381:gpr64
  $w2 = COPY %383:gpr32
  BL @laplacian, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 41, 0, 0, %stack.12.Class, 0, %379:gpr64, %381:gpr64, %379:gpr64, %381:gpr64, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %383:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %384:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %385:gpr32common = nsw ADDWri %384:gpr32common, 1, 0
  STRWui %385:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  B %bb.31

bb.33.for.end78:
; predecessors: %bb.31
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  STRWui $wzr, %stack.4.ie, 0 :: (store 4 into %ir.ie)

bb.34.for.cond79:
; predecessors: %bb.33, %bb.44
  successors: %bb.35(0x7c000000), %bb.45(0x04000000); %bb.35(96.88%), %bb.45(3.12%)

  %251:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %253:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %251:gpr32, %253:gpr32, implicit-def $nzcv
  Bcc 10, %bb.45, implicit killed $nzcv
  B %bb.35

bb.35.for.body81:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  STRWui $wzr, %stack.8.k, 0 :: (store 4 into %ir.k)

bb.36.for.cond82:
; predecessors: %bb.35, %bb.43
  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

  %334:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %334:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.44, implicit killed $nzcv
  B %bb.37

bb.37.for.body84:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  STRWui $wzr, %stack.7.j, 0 :: (store 4 into %ir.j)

bb.38.for.cond85:
; predecessors: %bb.37, %bb.42
  successors: %bb.39(0x7c000000), %bb.43(0x04000000); %bb.39(96.88%), %bb.43(3.12%)

  %339:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %339:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.43, implicit killed $nzcv
  B %bb.39

bb.39.for.body87:
; predecessors: %bb.38
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  STRWui $wzr, %stack.6.i, 0 :: (store 4 into %ir.i)

bb.40.for.cond88:
; predecessors: %bb.39, %bb.41
  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)

  %344:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %344:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.42, implicit killed $nzcv
  B %bb.41

bb.41.for.body90:
; predecessors: %bb.40
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  %348:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %351:gpr64 = MADDXrrr %348:gpr64, %376:gpr64, $xzr
  %353:gpr64 = ADDXrr %352:gpr64, %351:gpr64
  %354:gpr64 = LDRSWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  %357:gpr64 = MADDXrrr %354:gpr64, %356:gpr64, $xzr
  %358:gpr64 = ADDXrr %353:gpr64, %357:gpr64
  %359:gpr64 = LDRSWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  %360:gpr64 = ADDXrs %359:gpr64, %359:gpr64, 2
  %361:gpr64 = UBFMXri %360:gpr64, 61, 60
  %362:gpr64common = ADDXrr %358:gpr64, %361:gpr64
  %363:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  %364:gpr64 = UBFMXri %363:gpr64, 61, 60
  %365:fpr64 = LDRDroX %362:gpr64common, %364:gpr64, 0, 0 :: (load 8 from %ir.arrayidx98)
  %367:gpr64 = ADDXrr %378:gpr64, %351:gpr64
  %368:gpr64 = ADDXrr %367:gpr64, %357:gpr64
  %369:gpr64common = ADDXrr %368:gpr64, %361:gpr64
  %370:fpr64 = LDRDroX %369:gpr64common, %364:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
  %371:fpr64 = FSUBDrr %365:fpr64, %370:fpr64
  STRDroX %371:fpr64, %362:gpr64common, %364:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
  %372:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  %373:gpr32common = nsw ADDWri %372:gpr32common, 1, 0
  STRWui %373:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  B %bb.40

bb.42.for.inc118:
; predecessors: %bb.40
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  %346:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  %347:gpr32common = nsw ADDWri %346:gpr32common, 1, 0
  STRWui %347:gpr32common, %stack.7.j, 0 :: (store 4 into %ir.j)
  B %bb.38

bb.43.for.inc121:
; predecessors: %bb.38
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  %341:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  %342:gpr32common = nsw ADDWri %341:gpr32common, 1, 0
  STRWui %342:gpr32common, %stack.8.k, 0 :: (store 4 into %ir.k)
  B %bb.36

bb.44.for.inc124:
; predecessors: %bb.36
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  %336:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %337:gpr32common = nsw ADDWri %336:gpr32common, 1, 0
  STRWui %337:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  B %bb.34

bb.45.for.end126:
; predecessors: %bb.34
  successors: %bb.46(0x50000000), %bb.47(0x30000000); %bb.46(62.50%), %bb.47(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  $x1 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  BL @transfb, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 42, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %258:gpr32 = LDRWui %240:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %258:gpr32, %bb.47
  B %bb.46

bb.46.if.then128:
; predecessors: %bb.45
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 9
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 43, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.47.if.end129:
; predecessors: %bb.45, %bb.46
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  STRWui $wzr, %stack.4.ie, 0 :: (store 4 into %ir.ie)

bb.48.for.cond130:
; predecessors: %bb.47, %bb.54
  successors: %bb.49(0x7c000000), %bb.55(0x04000000); %bb.49(96.88%), %bb.55(3.12%)

  %261:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %263:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %261:gpr32, %263:gpr32, implicit-def $nzcv
  Bcc 10, %bb.55, implicit killed $nzcv
  B %bb.49

bb.49.for.body132:
; predecessors: %bb.48
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  STRWui $wzr, %stack.5.iside, 0 :: (store 4 into %ir.iside)

bb.50.for.cond133:
; predecessors: %bb.49, %bb.53
  successors: %bb.51(0x7c000000), %bb.54(0x04000000); %bb.51(96.88%), %bb.54(3.12%)

  %311:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  dead $wzr = SUBSWri %311:gpr32common, 5, 0, implicit-def $nzcv
  Bcc 12, %bb.54, implicit killed $nzcv
  B %bb.51

bb.51.for.body135:
; predecessors: %bb.50
  successors: %bb.52(0x30000000), %bb.53(0x50000000); %bb.52(37.50%), %bb.53(62.50%)

  %315:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %320:gpr64common = MADDXrrr %315:gpr64, %317:gpr64, %319:gpr64
  %321:gpr64 = LDRSWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  %322:gpr32 = LDRWroX %320:gpr64common, %321:gpr64, 0, 1 :: (load 4 from %ir.arrayidx139)
  CBNZW %322:gpr32, %bb.53
  B %bb.52

bb.52.if.then141:
; predecessors: %bb.51
  successors: %bb.53(0x80000000); %bb.53(100.00%)

  %323:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %328:gpr64 = MADDXrrr %323:gpr64, %376:gpr64, %352:gpr64
  %329:gpr32 = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %328:gpr64
  $w1 = COPY %329:gpr32
  $d0 = FMOVD0
  BL @facev, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 44, 0, 0, %stack.12.Class, 0, %328:gpr64, %328:gpr64, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %329:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.53.for.inc146:
; predecessors: %bb.51, %bb.52
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  %331:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  %332:gpr32common = nsw ADDWri %331:gpr32common, 1, 0
  STRWui %332:gpr32common, %stack.5.iside, 0 :: (store 4 into %ir.iside)
  B %bb.50

bb.54.for.inc149:
; predecessors: %bb.50
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  %313:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %314:gpr32common = nsw ADDWri %313:gpr32common, 1, 0
  STRWui %314:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  B %bb.48

bb.55.for.end151:
; predecessors: %bb.48
  successors: %bb.56(0x50000000), %bb.57(0x30000000); %bb.56(62.50%), %bb.57(37.50%)

  %266:gpr32 = LDRWui %265:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  $x1 = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
  $w2 = COPY %266:gpr32
  BL @col2, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 45, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %266:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %269:gpr32 = LDRWui %stack.13.ifmortar, 0 :: (dereferenceable load 4 from %ir.ifmortar)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %269:gpr32
  BL @diffusion, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 46, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %269:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %271:gpr32 = LDRWui %240:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %271:gpr32, %bb.57
  B %bb.56

bb.56.if.then153:
; predecessors: %bb.55
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 10
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 47, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.57.if.end154:
; predecessors: %bb.55, %bb.56
  successors: %bb.58(0x50000000), %bb.59(0x30000000); %bb.58(62.50%), %bb.59(37.50%)

  %274:gpr32 = LDRWui %229:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  $x1 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  $w2 = COPY %274:gpr32
  BL @add2, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 48, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %274:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %278:gpr32 = LDRWui %240:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %278:gpr32, %bb.59
  B %bb.58

bb.58.if.then156:
; predecessors: %bb.57
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 10
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 49, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.59.if.end157:
; predecessors: %bb.57, %bb.58
  successors: %bb.60(0x50000000), %bb.63(0x30000000); %bb.60(62.50%), %bb.63(37.50%)

  %281:fpr64 = LDRDui %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
  %283:fpr64 = LDRDui %282:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  %284:fpr64 = FADDDrr %281:fpr64, %283:fpr64
  STRDui %284:fpr64, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  %285:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  CBZW %285:gpr32, %bb.63
  B %bb.60

bb.60.land.lhs.true:
; predecessors: %bb.59
  successors: %bb.61(0x40000000), %bb.63(0x40000000); %bb.61(50.00%), %bb.63(50.00%)

  %286:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  %288:gpr32 = LDRWui %287:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  %289:gpr32 = SDIVWr %286:gpr32, %288:gpr32
  %290:gpr32 = nsw MADDWrrr %289:gpr32, %288:gpr32, $wzr
  dead $wzr = SUBSWrr %290:gpr32, %286:gpr32, implicit-def $nzcv
  Bcc 1, %bb.63, implicit killed $nzcv
  B %bb.61

bb.61.if.then161:
; predecessors: %bb.60
  successors: %bb.62(0x40000000), %bb.64(0x40000000); %bb.62(50.00%), %bb.64(50.00%)

  %293:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  %295:gpr32 = LDRWui %127:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  dead $wzr = SUBSWrr %293:gpr32, %295:gpr32, implicit-def $nzcv
  Bcc 0, %bb.64, implicit killed $nzcv
  B %bb.62

bb.62.if.then163:
; predecessors: %bb.61
  successors: %bb.64(0x80000000); %bb.64(100.00%)

  %297:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = ADDXri %stack.13.ifmortar, 0, 0
  $w1 = COPY %297:gpr32
  BL @adaptation, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 50, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %297:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.64

bb.63.if.else165:
; predecessors: %bb.59, %bb.60
  successors: %bb.64(0x80000000); %bb.64(100.00%)

  STRWui $wzr, %stack.13.ifmortar, 0 :: (store 4 into %ir.ifmortar)

bb.64.if.end166:
; predecessors: %bb.63, %bb.61, %bb.62
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %299:fpr64 = LDRDui %394:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  undef %302.ssub:fpr64 = LDRSui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  %304:fpr128 = SSHLLv2i32_shift %302:fpr64, 0
  %306:fpr64 = SCVTFv1i64 %304.dsub:fpr128
  %307:fpr64 = FADDDrr %299:fpr64, %306:fpr64
  STRDui %307:fpr64, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  %308:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  %309:gpr32common = nsw ADDWri %308:gpr32common, 1, 0
  STRWui %309:gpr32common, %stack.3.step, 0 :: (store 4 into %ir.step)
  B %bb.20

bb.65.for.end170:
; predecessors: %bb.20
  successors: %bb.66(0x50000000), %bb.78(0x30000000); %bb.66(62.50%), %bb.78(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 1
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 51, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 1
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 52, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %131:fpr64 = COPY killed $d0
  STRDui %131:fpr64, %394:gpr64sp, 15 :: (store 8 into %ir.tmax)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = ADDXri %stack.12.Class, 0, 0
  $x1 = ADDXri %stack.14.verified, 0, 0
  BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 53, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %134:fpr64 = LDRDui %394:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  %135:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
  %136:gpr32 = LDRWui %135:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  %137:gpr32 = MOVi32imm 125
  %138:gpr32common = MADDWrrr %136:gpr32, %137:gpr32, $wzr
  %139:gpr32common = ADDWri %138:gpr32common, 125, 0
  %140:fpr64 = SCVTFUWDri %139:gpr32common
  %141:fpr64 = FMULDrr %134:fpr64, %140:fpr64
  %142:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  %143:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  %144:fpr64 = LDRDui %143:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  %145:fpr64 = FMULDrr %142:fpr64, %144:fpr64
  %146:fpr64 = FDIVDrr %141:fpr64, %145:fpr64
  STRDui %146:fpr64, %394:gpr64sp, 16 :: (store 8 into %ir.mflops)
  %147:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  %148:gpr64temp = ADRP target-flags(aarch64-page) @niter
  %149:gpr32 = LDRWui %148:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  %150:gpr32 = LDRWui %stack.14.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
  %151:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_33__none__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_33__none__
  STRXui %151:gpr64, $sp, 10 :: (store 8 into stack + 80)
  %153:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_32__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_32__O3__mcmod
  STRXui %153:gpr64, $sp, 9 :: (store 8 into stack + 72)
  %154:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_31__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_31__g__Wall__
  STRXui %154:gpr64, $sp, 8 :: (store 8 into stack + 64)
  %155:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_30__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_30__I___commo
  STRXui %155:gpr64, $sp, 7 :: (store 8 into stack + 56)
  %156:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_29__lm_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_29__lm_
  STRXui %156:gpr64, $sp, 6 :: (store 8 into stack + 48)
  %157:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_28___CC__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_28___CC__
  STRXui %157:gpr64, $sp, 5 :: (store 8 into stack + 40)
  %158:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_27_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_27_gcc_
  STRXui %158:gpr64, $sp, 4 :: (store 8 into stack + 32)
  %159:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_26_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_26_03_Nov_201
  STRXui %159:gpr64, $sp, 3 :: (store 8 into stack + 24)
  %160:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_25_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_25_3_3_1_
  STRXui %160:gpr64, $sp, 2 :: (store 8 into stack + 16)
  STRWui %150:gpr32, $sp, 2 :: (store 4 into stack + 8)
  %161:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_24_____coll__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_24_____coll__
  STRXui %161:gpr64, $sp, 0 :: (store 8 into stack)
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_23_UA_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_23_UA_
  $w1 = COPY %147:gpr32
  $w2 = MOVi32imm 7
  $w3 = COPY $wzr
  $w4 = COPY $wzr
  $w5 = COPY %149:gpr32
  $d0 = COPY %142:fpr64
  $d1 = COPY %146:fpr64
  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp
  ADJCALLSTACKUP 88, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 54, 0, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %147:gpr32, %149:gpr32, %142:fpr64, %146:fpr64, %150:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %165:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %166:gpr32 = LDRWui %165:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %166:gpr32, %bb.78
  B %bb.66

bb.66.if.then179:
; predecessors: %bb.65
  successors: %bb.67(0x80000000); %bb.67(100.00%)

  %167:gpr32 = MOVi32imm 1
  STRWui %167:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  %224:gpr64sp = ADDXri %stack.16.trecs, 0, 0

bb.67.for.cond180:
; predecessors: %bb.66, %bb.68
  successors: %bb.68(0x7c000000), %bb.69(0x04000000); %bb.68(96.88%), %bb.69(3.12%)

  %168:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %168:gpr32common, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.69, implicit killed $nzcv
  B %bb.68

bb.68.for.body183:
; predecessors: %bb.67
  successors: %bb.67(0x80000000); %bb.67(100.00%)

  %221:gpr32 = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %221:gpr32
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 55, 0, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %221:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %222:fpr64 = COPY killed $d0
  %223:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  STRDroX %222:fpr64, %224:gpr64sp, %223:gpr64, 0, 1 :: (store 8 into %ir.arrayidx186)
  %225:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  %226:gpr32common = nsw ADDWri %225:gpr32common, 1, 0
  STRWui %226:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  B %bb.67

bb.69.for.end189:
; predecessors: %bb.67
  successors: %bb.70(0x50000000), %bb.71(0x30000000); %bb.70(62.50%), %bb.71(37.50%)

  %170:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri %170:fpr64, implicit-def $nzcv
  Bcc 1, %bb.71, implicit killed $nzcv
  B %bb.70

bb.70.if.then192:
; predecessors: %bb.69
  successors: %bb.71(0x80000000); %bb.71(100.00%)

  %171:gpr64 = MOVi64imm 4607182418800017408
  STRXui %171:gpr64, %394:gpr64sp, 15 :: (store 8 into %ir.tmax)

bb.71.if.end193:
; predecessors: %bb.69, %bb.70
  successors: %bb.72(0x80000000); %bb.72(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_34___SECTION_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_34___SECTION_
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 56, 0, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %174:gpr32 = MOVi32imm 1
  STRWui %174:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  %180:gpr64sp = ADDXri %stack.17.t_names, 0, 0
  %182:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  %184:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  %185:fpr64 = LDRDui %184:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)

bb.72.for.cond195:
; predecessors: %bb.71, %bb.77
  successors: %bb.73(0x7c000000), %bb.78(0x04000000); %bb.73(96.88%), %bb.78(3.12%)

  %175:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %175:gpr32common, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.78, implicit killed $nzcv
  B %bb.73

bb.73.for.body198:
; predecessors: %bb.72
  successors: %bb.74(0x40000000), %bb.75(0x40000000); %bb.74(50.00%), %bb.75(50.00%)

  %178:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  %179:gpr64 = UBFMXri %178:gpr64, 61, 60
  %181:gpr64 = LDRXroX %180:gpr64sp, %179:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
  %183:fpr64 = LDRDroX %182:gpr64sp, %179:gpr64, 0, 0 :: (load 8 from %ir.arrayidx204)
  %186:fpr64 = FMULDrr %183:fpr64, %185:fpr64
  %187:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  %188:fpr64 = FDIVDrr %186:fpr64, %187:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_35_____10s__9, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_35_____10s__9
  $x1 = COPY %181:gpr64
  $d0 = COPY %183:fpr64
  $d1 = COPY %188:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 57, 0, %188:fpr64, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %181:gpr64, %183:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %191:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %191:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 1, %bb.75, implicit killed $nzcv
  B %bb.74

bb.74.if.then210:
; predecessors: %bb.73
  successors: %bb.77(0x80000000); %bb.77(100.00%)

  %208:fpr64 = LDRDui %394:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx211)
  %209:fpr64 = LDRDui %394:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
  %210:fpr64 = FSUBDrr %208:fpr64, %209:fpr64
  STRDui %210:fpr64, %394:gpr64sp, 11 :: (store 8 into %ir.t2)
  %213:fpr64 = FMULDrr %210:fpr64, %185:fpr64
  %214:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  %215:fpr64 = FDIVDrr %213:fpr64, %214:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_36__________1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1
  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_37_sub_convec, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_37_sub_convec
  $d0 = COPY %210:fpr64
  $d1 = COPY %215:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 58, 0, %215:fpr64, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %210:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.77

bb.75.if.else217:
; predecessors: %bb.73
  successors: %bb.76(0x40000000), %bb.77(0x40000000); %bb.76(50.00%), %bb.77(50.00%)

  %193:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %193:gpr32common, 7, 0, implicit-def $nzcv
  Bcc 1, %bb.77, implicit killed $nzcv
  B %bb.76

bb.76.if.then220:
; predecessors: %bb.75
  successors: %bb.77(0x80000000); %bb.77(100.00%)

  %195:fpr64 = LDRDui %394:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx221)
  %196:fpr64 = LDRDui %394:gpr64sp, 6 :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
  %197:fpr64 = FSUBDrr %195:fpr64, %196:fpr64
  %198:fpr64 = LDRDui %394:gpr64sp, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
  %199:fpr64 = FSUBDrr %197:fpr64, %198:fpr64
  STRDui %199:fpr64, %394:gpr64sp, 11 :: (store 8 into %ir.t2)
  %202:fpr64 = FMULDrr %199:fpr64, %185:fpr64
  %203:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  %204:fpr64 = FDIVDrr %202:fpr64, %203:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_36__________1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1
  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_38_sub_diffus, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_38_sub_diffus
  $d0 = COPY %199:fpr64
  $d1 = COPY %204:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 59, 0, %204:fpr64, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %199:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.77.for.inc231:
; predecessors: %bb.75, %bb.76, %bb.74
  successors: %bb.72(0x80000000); %bb.72(100.00%)

  %219:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  %220:gpr32common = nsw ADDWri %219:gpr32common, 1, 0
  STRWui %220:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  B %bb.72

bb.78.if.end234:
; predecessors: %bb.65, %bb.72

  $w8 = COPY $wzr
  RET_ReallyLR implicit killed $w8

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %6:gpr64 = COPY killed $x8
    To: CBZX %6:gpr64, %bb.2
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %6:gpr64 = COPY killed $x8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%6
    SU(1): Data Latency=0 Reg=%6
  Single Issue       : false;
SU(1):   STRXui %6:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%6
  Single Issue       : false;
ExitSU:   CBZX %6:gpr64, %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%6
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %6:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %6:gpr64 = COPY killed $x8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %6:gpr64 = COPY killed $x8
SU(1):   STRXui %6:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)

********** MI Scheduling **********
main:%bb.0 entry
  From: $x0 = MOVaddr target-flags(aarch64-page) @ua__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_timer_flag
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_timer_flag
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @ua__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ua__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_timer_flag
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_timer_flag
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_

********** MI Scheduling **********
main:%bb.0 entry
  From: %394:gpr64sp = ADDXri %stack.16.trecs, 0, 0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=3
Live In: W0 W1 
Live Out: %394 
Live Thru: 
  LiveReg: %394
  UpdateRegP: SU(5) STRXui %1:gpr64, %394:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
              to GPR32 1
  UpdateRegP: SU(6) STRXui $xzr, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
              to 
Top Pressure:
GPR32=2
Bottom Pressure:
GPR32=1
Excess PSets: 
SU(0):   %394:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%394
    SU(5): Data Latency=1 Reg=%394
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %1:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Data Latency=0 Reg=%1
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %0:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%0
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   STRXui %1:gpr64, %394:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%1
    SU(0): Data Latency=1 Reg=%394
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   STRXui $xzr, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%394
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   STRWui $wzr, %stack.13.ifmortar, 0 :: (store 4 into %ir.ifmortar)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 7 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %1:gpr64 = COPY $x1
Top Pressure:
GPR32=2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 7 2 3 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %0:gpr32 = COPY $w0
Top Pressure:
GPR32=2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 7 3 4 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui $wzr, %stack.13.ifmortar, 0 :: (store 4 into %ir.ifmortar)
Bottom Pressure:
GPR32=1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 4 3 
BotQ.A RemLatency SU(6) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(6) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) STRXui $xzr, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
Bottom Pressure:
GPR32=1
  Ready @1c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 4 3 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRXui %1:gpr64, %394:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
Bottom Pressure:
GPR32=2
  LiveReg: %1
  UpdateRegP: SU(5) STRXui %1:gpr64, %394:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
              to 
  Ready @2c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 4 3 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
Bottom Pressure:
GPR32=3
  LiveReg: %0
  UpdateRegP: SU(4) STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
              to 
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
Bottom Pressure:
GPR32=3
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %394:gpr64sp = ADDXri %stack.16.trecs, 0, 0
Bottom Pressure:
GPR32=2
  Ready @5c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   %1:gpr64 = COPY $x1
SU(2):   %0:gpr32 = COPY $w0
SU(0):   %394:gpr64sp = ADDXri %stack.16.trecs, 0, 0
SU(3):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
SU(4):   STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
SU(5):   STRXui %1:gpr64, %394:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
SU(6):   STRXui $xzr, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
SU(7):   STRWui $wzr, %stack.13.ifmortar, 0 :: (store 4 into %ir.ifmortar)

********** MI Scheduling **********
main:%bb.1 if.then
  From: %9:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 24
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=2
Live In: 
Live Out: %21 
Live Thru: 
  LiveReg: %21
Top Pressure:

Bottom Pressure:
GPR32=1
Excess PSets: 
Cluster ld/st SU(22) - SU(20)
Cluster ld/st SU(18) - SU(16)
Cluster ld/st SU(14) - SU(12)
Cluster ld/st SU(10) - SU(8)
Cluster ld/st SU(6) - SU(4)
SU(0):   %9:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%9
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(1):   %10:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%10
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   STRWui %10:gpr32, %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%10
    SU(0): Data Latency=1 Reg=%9
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(3):   %11:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_2_total_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%11
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   STRXui %11:gpr64, %stack.17.t_names, 1 :: (store 8 into %ir.arrayidx)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%11
    SU(6): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_3_init_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_3_init_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%12
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   STRXui %12:gpr64, %stack.17.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%12
  Successors:
    SU(4): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_4_convect_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_4_convect_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%13
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   STRXui %13:gpr64, %stack.17.t_names, 3 :: (store 8 into %ir.arrayidx2)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%13
    SU(10): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_5_transfb_c_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_5_transfb_c_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=%14
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(10):   STRXui %14:gpr64, %stack.17.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%14
  Successors:
    SU(8): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   %15:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_6_diffusion_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_6_diffusion_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(12): Data Latency=1 Reg=%15
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   STRXui %15:gpr64, %stack.17.t_names, 5 :: (store 8 into %ir.arrayidx4)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%15
    SU(14): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(13):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_7_transf_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_7_transf_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(14): Data Latency=1 Reg=%16
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   STRXui %16:gpr64, %stack.17.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(13): Data Latency=1 Reg=%16
  Successors:
    SU(12): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_8_transfb_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_8_transfb_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(16): Data Latency=1 Reg=%17
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(16):   STRXui %17:gpr64, %stack.17.t_names, 7 :: (store 8 into %ir.arrayidx6)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(15): Data Latency=1 Reg=%17
    SU(18): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(17):   %18:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_9_adaptation, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_9_adaptation
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(18): Data Latency=1 Reg=%18
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(18):   STRXui %18:gpr64, %stack.17.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(17): Data Latency=1 Reg=%18
  Successors:
    SU(16): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(19):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_10_transf_b_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_10_transf_b_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%19
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   STRXui %19:gpr64, %stack.17.t_names, 9 :: (store 8 into %ir.arrayidx8)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%19
    SU(22): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   %20:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_11_add2_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_11_add2_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(22): Data Latency=1 Reg=%20
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(22):   STRXui %20:gpr64, %stack.17.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=%20
  Successors:
    SU(20): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(23):   %21:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(23): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 
Queue BotQ.A: 22 20 18 16 14 12 10 8 6 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 
Picking from Bot:
  Cand SU(22) ORDER                              
  Cand SU(20) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(20) STRXui %19:gpr64, %stack.17.t_names, 9 :: (store 8 into %ir.arrayidx8)
Bottom Pressure:
GPR32=2
  LiveReg: %19
  UpdateRegP: SU(20) STRXui %19:gpr64, %stack.17.t_names, 9 :: (store 8 into %ir.arrayidx8)
              to 
  Ready @0c
  BotQ.A TopLatency SU(20) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 
Queue BotQ.A: 22 2 18 16 14 12 10 8 6 4 19 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 
BotQ.A RemLatency SU(22) 1c
Picking from Bot:
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(22) STRXui %20:gpr64, %stack.17.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
Bottom Pressure:
GPR32=3
  LiveReg: %20
  UpdateRegP: SU(22) STRXui %20:gpr64, %stack.17.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
              to 
  Ready @1c
  BotQ.A TopLatency SU(22) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 
Queue BotQ.A: 19 2 18 16 14 12 10 8 6 4 21 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(19) ORDER                              
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(21) %20:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_11_add2_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_11_add2_
Bottom Pressure:
GPR32=2
  Ready @2c
  BotQ.A BotLatency SU(21) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 2 18 16 14 12 10 8 6 4 23 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 23 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 3c > CritPath 3
Picking from Bot:
  Cand SU(19) ORDER                              
  Cand SU(16) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(16) STRXui %17:gpr64, %stack.17.t_names, 7 :: (store 8 into %ir.arrayidx6)
Bottom Pressure:
GPR32=3
  LiveReg: %17
  UpdateRegP: SU(16) STRXui %17:gpr64, %stack.17.t_names, 7 :: (store 8 into %ir.arrayidx6)
              to 
  Ready @3c
  BotQ.A TopLatency SU(16) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 2 18 23 14 12 10 8 6 4 15 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 23 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(19) ORDER                              
  Cand SU(18) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(18) STRXui %18:gpr64, %stack.17.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
Bottom Pressure:
GPR32=4
  LiveReg: %18
  UpdateRegP: SU(18) STRXui %18:gpr64, %stack.17.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
              to 
  Ready @4c
  BotQ.A TopLatency SU(18) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 2 15 23 14 12 10 8 6 4 17 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 23 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(19) ORDER                              
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(23) %21:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
Bottom Pressure:
GPR32=3
  Ready @5c
  BotQ.A BotLatency SU(23) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 2 15 17 14 12 10 8 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 
  BotQ.A RemainingLatency 0 + 6c > CritPath 3
Picking from Bot:
  Cand SU(19) ORDER                              
  Cand SU(12) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(12) STRXui %15:gpr64, %stack.17.t_names, 5 :: (store 8 into %ir.arrayidx4)
Bottom Pressure:
GPR32=4
  LiveReg: %15
  UpdateRegP: SU(12) STRXui %15:gpr64, %stack.17.t_names, 5 :: (store 8 into %ir.arrayidx4)
              to 
  Ready @6c
  BotQ.A TopLatency SU(12) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 2 15 17 14 4 10 8 6 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 
  BotQ.A RemainingLatency 0 + 7c > CritPath 3
Picking from Bot:
  Cand SU(19) ORDER                              
  Cand SU(14) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(14) STRXui %16:gpr64, %stack.17.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
Bottom Pressure:
GPR32=5
  LiveReg: %16
  UpdateRegP: SU(14) STRXui %16:gpr64, %stack.17.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
              to 
  Ready @7c
  BotQ.A TopLatency SU(14) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 2 15 17 11 4 10 8 6 13 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 
  BotQ.A RemainingLatency 0 + 8c > CritPath 3
Picking from Bot:
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(19) %19:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_10_transf_b_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_10_transf_b_
Bottom Pressure:
GPR32=4
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 2 15 17 11 4 10 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 
  BotQ.A RemainingLatency 0 + 9c > CritPath 3
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(8) STRXui %13:gpr64, %stack.17.t_names, 3 :: (store 8 into %ir.arrayidx2)
Bottom Pressure:
GPR32=5
  LiveReg: %13
  UpdateRegP: SU(8) STRXui %13:gpr64, %stack.17.t_names, 3 :: (store 8 into %ir.arrayidx2)
              to 
  Ready @9c
  BotQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 2 15 17 11 4 10 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 
  BotQ.A RemainingLatency 0 + 10c > CritPath 3
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(10) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(10) STRXui %14:gpr64, %stack.17.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
Bottom Pressure:
GPR32=6
  LiveReg: %14
  UpdateRegP: SU(10) STRXui %14:gpr64, %stack.17.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
              to 
  Ready @10c
  BotQ.A TopLatency SU(10) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 2 15 17 11 4 7 6 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 
  BotQ.A RemainingLatency 0 + 11c > CritPath 3
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(17) %18:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_9_adaptation, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_9_adaptation
Bottom Pressure:
GPR32=5
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 2 15 9 11 4 7 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 
  BotQ.A RemainingLatency 0 + 12c > CritPath 3
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(4) STRXui %11:gpr64, %stack.17.t_names, 1 :: (store 8 into %ir.arrayidx)
Bottom Pressure:
GPR32=6
  LiveReg: %11
  UpdateRegP: SU(4) STRXui %11:gpr64, %stack.17.t_names, 1 :: (store 8 into %ir.arrayidx)
              to 
  Ready @12c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 2 15 9 11 6 7 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 
  BotQ.A RemainingLatency 0 + 13c > CritPath 3
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(6) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(6) STRXui %12:gpr64, %stack.17.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
Bottom Pressure:
GPR32=7
  LiveReg: %12
  UpdateRegP: SU(6) STRXui %12:gpr64, %stack.17.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
              to 
  Ready @13c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 2 15 9 11 3 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 
  BotQ.A RemainingLatency 0 + 14c > CritPath 3
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(15) %17:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_8_transfb_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_8_transfb_
Bottom Pressure:
GPR32=6
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 2 5 9 11 3 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 
  BotQ.A RemainingLatency 0 + 15c > CritPath 3
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(13) %16:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_7_transf_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_7_transf_
Bottom Pressure:
GPR32=5
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 5 9 11 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 
  BotQ.A RemainingLatency 0 + 16c > CritPath 3
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(2) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRWui %10:gpr32, %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
Bottom Pressure:
GPR64temp=1
GPR32=7
  LiveReg: %10
  UpdateRegP: SU(2) STRWui %10:gpr32, %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
              to GPR64temp 1    GPR32 1
  LiveReg: %9
  UpdateRegP: SU(2) STRWui %10:gpr32, %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
              to 
  Ready @16c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 5 9 11 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 
  BotQ.A RemainingLatency 0 + 17c > CritPath 3
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %15:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_6_diffusion_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_6_diffusion_
Bottom Pressure:
GPR64temp=1
GPR32=6
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 5 9 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 
  BotQ.A RemainingLatency 0 + 18c > CritPath 3
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %14:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_5_transfb_c_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_5_transfb_c_
Bottom Pressure:
GPR64temp=1
GPR32=5
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 5 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 
  BotQ.A RemainingLatency 0 + 19c > CritPath 3
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %13:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_4_convect_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_4_convect_
Bottom Pressure:
GPR64temp=1
GPR32=4
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 5 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  BotQ.A RemainingLatency 0 + 20c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %12:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_3_init_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_3_init_
Bottom Pressure:
GPR64temp=1
GPR32=3
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 21c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %11:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_2_total_
Bottom Pressure:
GPR64temp=1
GPR32=2
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 22c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %10:gpr32 = MOVi32imm 1
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %9:gpr64temp = ADRP target-flags(aarch64-page) @timeron
Bottom Pressure:

  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %9:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   %10:gpr32 = MOVi32imm 1
SU(3):   %11:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_2_total_
SU(5):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_3_init_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_3_init_
SU(7):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_4_convect_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_4_convect_
SU(9):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_5_transfb_c_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_5_transfb_c_
SU(11):   %15:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_6_diffusion_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_6_diffusion_
SU(2):   STRWui %10:gpr32, %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
SU(13):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_7_transf_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_7_transf_
SU(15):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_8_transfb_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_8_transfb_
SU(6):   STRXui %12:gpr64, %stack.17.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
SU(4):   STRXui %11:gpr64, %stack.17.t_names, 1 :: (store 8 into %ir.arrayidx)
SU(17):   %18:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_9_adaptation, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_9_adaptation
SU(10):   STRXui %14:gpr64, %stack.17.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
SU(8):   STRXui %13:gpr64, %stack.17.t_names, 3 :: (store 8 into %ir.arrayidx2)
SU(19):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_10_transf_b_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_10_transf_b_
SU(14):   STRXui %16:gpr64, %stack.17.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
SU(12):   STRXui %15:gpr64, %stack.17.t_names, 5 :: (store 8 into %ir.arrayidx4)
SU(23):   %21:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
SU(18):   STRXui %18:gpr64, %stack.17.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
SU(16):   STRXui %17:gpr64, %stack.17.t_names, 7 :: (store 8 into %ir.arrayidx6)
SU(21):   %20:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_11_add2_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_11_add2_
SU(22):   STRXui %20:gpr64, %stack.17.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
SU(20):   STRXui %19:gpr64, %stack.17.t_names, 9 :: (store 8 into %ir.arrayidx8)

********** MI Scheduling **********
main:%bb.2 if.else
  From: %7:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %7:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%7
  Single Issue       : false;
SU(1):   STRWui $wzr, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%7
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui $wzr, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %7:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %7:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   STRWui $wzr, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %27:gpr64 = COPY killed $x8
    To: CBZX %27:gpr64, %bb.11
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %27:gpr64 = COPY killed $x8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%27
    SU(1): Data Latency=0 Reg=%27
  Single Issue       : false;
SU(1):   STRXui %27:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%27
  Single Issue       : false;
ExitSU:   CBZX %27:gpr64, %bb.11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%27
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %27:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %27:gpr64 = COPY killed $x8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %27:gpr64 = COPY killed $x8
SU(1):   STRXui %27:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)

********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = MOVaddr target-flags(aarch64-page) @ua__str_13_inputua_da, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_13_inputua_da
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_13_inputua_da, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_13_inputua_da
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @ua__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ua__str_13_inputua_da, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_13_inputua_da
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_13_inputua_da, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_13_inputua_da
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_

********** MI Scheduling **********
main:%bb.4 if.then14
  From: %44:gpr32 = COPY killed $w8
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %44:gpr32 = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%44
  Single Issue       : false;
SU(1):   STRWui %44:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%44
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %44:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %44:gpr32 = COPY killed $w8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %44:gpr32 = COPY killed $w8
SU(1):   STRWui %44:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.4 if.then14
  From: $x0 = COPY %41:gpr64
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %41:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $x2 = MOVaddr target-flags(aarch64-page) @fre, target-flags(aarch64-pageoff, aarch64-nc) @fre
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %41:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $x2 = MOVaddr target-flags(aarch64-page) @fre, target-flags(aarch64-pageoff, aarch64-nc) @fre
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
SU(2):   $x2 = MOVaddr target-flags(aarch64-page) @fre, target-flags(aarch64-pageoff, aarch64-nc) @fre
SU(0):   $x0 = COPY %41:gpr64

********** MI Scheduling **********
main:%bb.5 while.cond
  From: %46:gpr32sp = COPY killed $w8
    To: Bcc 1, %bb.5, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %46:gpr32sp = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%46
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %46:gpr32sp, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%46
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.5, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %46:gpr32sp, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %46:gpr32sp = COPY killed $w8
  Ready @2c
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %46:gpr32sp = COPY killed $w8
SU(1):   dead $wzr = SUBSWri %46:gpr32sp, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.6 while.end
  From: %51:gpr32 = COPY killed $w8
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %51:gpr32 = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%51
  Single Issue       : false;
SU(1):   STRWui %51:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%51
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %51:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %51:gpr32 = COPY killed $w8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %51:gpr32 = COPY killed $w8
SU(1):   STRWui %51:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.6 while.end
  From: $x0 = COPY %48:gpr64
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %48:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $x2 = MOVaddr target-flags(aarch64-page) @niter, target-flags(aarch64-pageoff, aarch64-nc) @niter
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %48:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $x2 = MOVaddr target-flags(aarch64-page) @niter, target-flags(aarch64-pageoff, aarch64-nc) @niter
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
SU(2):   $x2 = MOVaddr target-flags(aarch64-page) @niter, target-flags(aarch64-pageoff, aarch64-nc) @niter
SU(0):   $x0 = COPY %48:gpr64

********** MI Scheduling **********
main:%bb.7 while.cond20
  From: %53:gpr32sp = COPY killed $w8
    To: Bcc 1, %bb.7, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %53:gpr32sp = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%53
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %53:gpr32sp, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%53
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.7, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %53:gpr32sp, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %53:gpr32sp = COPY killed $w8
  Ready @2c
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %53:gpr32sp = COPY killed $w8
SU(1):   dead $wzr = SUBSWri %53:gpr32sp, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.8 while.end24
  From: %58:gpr32 = COPY killed $w8
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %58:gpr32 = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%58
  Single Issue       : false;
SU(1):   STRWui %58:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%58
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %58:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %58:gpr32 = COPY killed $w8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %58:gpr32 = COPY killed $w8
SU(1):   STRWui %58:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.8 while.end24
  From: $x0 = COPY %55:gpr64
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %55:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $x2 = MOVaddr target-flags(aarch64-page) @nmxh, target-flags(aarch64-pageoff, aarch64-nc) @nmxh
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %55:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $x2 = MOVaddr target-flags(aarch64-page) @nmxh, target-flags(aarch64-pageoff, aarch64-nc) @nmxh
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
SU(2):   $x2 = MOVaddr target-flags(aarch64-page) @nmxh, target-flags(aarch64-pageoff, aarch64-nc) @nmxh
SU(0):   $x0 = COPY %55:gpr64

********** MI Scheduling **********
main:%bb.9 while.cond26
  From: %60:gpr32sp = COPY killed $w8
    To: Bcc 1, %bb.9, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %60:gpr32sp = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%60
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %60:gpr32sp, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%60
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.9, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %60:gpr32sp, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %60:gpr32sp = COPY killed $w8
  Ready @2c
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %60:gpr32sp = COPY killed $w8
SU(1):   dead $wzr = SUBSWri %60:gpr32sp, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.10 while.end30
  From: %65:gpr32 = COPY killed $w8
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %65:gpr32 = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%65
  Single Issue       : false;
SU(1):   STRWui %65:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%65
  Single Issue       : false;
SU(2):   %66:gpr32 = MOVi32imm 85
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%66
  Single Issue       : false;
SU(3):   STRBBui %66:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%66
  Single Issue       : false;
SU(4):   %67:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %65:gpr32 = COPY killed $w8
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRBBui %66:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %66:gpr32 = MOVi32imm 85
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %65:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %67:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %65:gpr32 = COPY killed $w8
SU(4):   %67:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
SU(1):   STRWui %65:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
SU(2):   %66:gpr32 = MOVi32imm 85
SU(3):   STRBBui %66:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)

********** MI Scheduling **********
main:%bb.10 while.end30
  From: $x0 = COPY %62:gpr64
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %62:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_16__lf_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_16__lf_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $x2 = MOVaddr target-flags(aarch64-page) @alpha, target-flags(aarch64-pageoff, aarch64-nc) @alpha
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %62:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $x2 = MOVaddr target-flags(aarch64-page) @alpha, target-flags(aarch64-pageoff, aarch64-nc) @alpha
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @ua__str_16__lf_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_16__lf_
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_16__lf_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_16__lf_
SU(2):   $x2 = MOVaddr target-flags(aarch64-page) @alpha, target-flags(aarch64-pageoff, aarch64-nc) @alpha
SU(0):   $x0 = COPY %62:gpr64

********** MI Scheduling **********
main:%bb.11 if.else33
  From: %30:gpr64temp = ADRP target-flags(aarch64-page) @fre
    To: End RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %30:gpr64temp = ADRP target-flags(aarch64-page) @fre
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%30
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(1):   %31:gpr32 = MOVi32imm 5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%31
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   STRWui %31:gpr32, %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%31
    SU(0): Data Latency=1 Reg=%30
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(3):   %32:gpr64temp = ADRP target-flags(aarch64-page) @niter
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%32
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(4):   %33:gpr32 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%33
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRWui %33:gpr32, %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%33
    SU(3): Data Latency=1 Reg=%32
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(6):   %34:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%34
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(7):   %35:gpr32 = MOVi32imm 10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%35
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   STRWui %35:gpr32, %34:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%35
    SU(6): Data Latency=1 Reg=%34
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(9):   %36:gpr64temp = ADRP target-flags(aarch64-page) @alpha
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%36
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(10):   %37:gpr64 = MOVi64imm 4590140797810047451
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%37
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %37:gpr64, %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%37
    SU(9): Data Latency=1 Reg=%36
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(12):   %38:gpr32 = MOVi32imm 66
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%38
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRBBui %38:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%38
  Pressure Diff      : GPR32 1
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 6 7 9 10 12 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) STRBBui %38:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)
Bottom Pressure:
GPR32=1
  LiveReg: %38
  UpdateRegP: SU(13) STRBBui %38:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 11 8 5 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 6 7 9 10 12 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(12) %38:gpr32 = MOVi32imm 66
Bottom Pressure:

  Ready @1c
  BotQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 11 8 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 6 7 9 10 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) STRXui %37:gpr64, %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
Bottom Pressure:
GPR64temp=1
GPR32=2
  LiveReg: %37
  UpdateRegP: SU(11) STRXui %37:gpr64, %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
              to GPR64temp 1    GPR32 1
  LiveReg: %36
  UpdateRegP: SU(11) STRXui %37:gpr64, %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
              to 
  Ready @2c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 8 10 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 6 7 9 10 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(10) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(10) %37:gpr64 = MOVi64imm 4590140797810047451
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 8 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 6 7 9 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(9) %36:gpr64temp = ADRP target-flags(aarch64-page) @alpha
Bottom Pressure:

  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 6 7 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) STRWui %35:gpr32, %34:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
Bottom Pressure:
GPR64temp=1
GPR32=2
  LiveReg: %35
  UpdateRegP: SU(8) STRWui %35:gpr32, %34:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
              to GPR64temp 1    GPR32 1
  LiveReg: %34
  UpdateRegP: SU(8) STRWui %35:gpr32, %34:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
              to 
  Ready @5c
  BotQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 7 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 6 7 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) %35:gpr32 = MOVi32imm 10
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 6 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %34:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
Bottom Pressure:

  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) STRWui %33:gpr32, %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
Bottom Pressure:
GPR64temp=1
GPR32=2
  LiveReg: %33
  UpdateRegP: SU(5) STRWui %33:gpr32, %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
              to GPR64temp 1    GPR32 1
  LiveReg: %32
  UpdateRegP: SU(5) STRWui %33:gpr32, %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
              to 
  Ready @8c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(4) %33:gpr32 = MOVi32imm 200
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(3) %32:gpr64temp = ADRP target-flags(aarch64-page) @niter
Bottom Pressure:

  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %31:gpr32, %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
Bottom Pressure:
GPR64temp=1
GPR32=2
  LiveReg: %31
  UpdateRegP: SU(2) STRWui %31:gpr32, %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
              to GPR64temp 1    GPR32 1
  LiveReg: %30
  UpdateRegP: SU(2) STRWui %31:gpr32, %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
              to 
  Ready @11c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %31:gpr32 = MOVi32imm 5
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %30:gpr64temp = ADRP target-flags(aarch64-page) @fre
Bottom Pressure:

  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %30:gpr64temp = ADRP target-flags(aarch64-page) @fre
SU(1):   %31:gpr32 = MOVi32imm 5
SU(2):   STRWui %31:gpr32, %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
SU(3):   %32:gpr64temp = ADRP target-flags(aarch64-page) @niter
SU(4):   %33:gpr32 = MOVi32imm 200
SU(5):   STRWui %33:gpr32, %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
SU(6):   %34:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
SU(7):   %35:gpr32 = MOVi32imm 10
SU(8):   STRWui %35:gpr32, %34:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
SU(9):   %36:gpr64temp = ADRP target-flags(aarch64-page) @alpha
SU(10):   %37:gpr64 = MOVi64imm 4590140797810047451
SU(11):   STRXui %37:gpr64, %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
SU(12):   %38:gpr32 = MOVi32imm 66
SU(13):   STRBBui %38:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %99:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %99:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%99
  Single Issue       : false;
SU(1):   STRWui %99:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%99
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %99:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %99:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %99:gpr32 = MOVi32imm 1
SU(1):   STRWui %99:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: $x0 = MOVaddr target-flags(aarch64-page) @ua__str_22__Heat_sour, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_22__Heat_sour
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_22__Heat_sour, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_22__Heat_sour
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %96:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %96:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ua__str_22__Heat_sour, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_22__Heat_sour
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_22__Heat_sour, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_22__Heat_sour
SU(1):   $d0 = COPY %96:fpr64

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %95:gpr64temp = ADRP target-flags(aarch64-page) @alpha
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %95:gpr64temp = ADRP target-flags(aarch64-page) @alpha
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=1 Reg=%95
  Single Issue       : false;
SU(1):   %96:fpr64 = LDRDui %95:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%95
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %96:fpr64 = LDRDui %95:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %95:gpr64temp = ADRP target-flags(aarch64-page) @alpha
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %95:gpr64temp = ADRP target-flags(aarch64-page) @alpha
SU(1):   %96:fpr64 = LDRDui %95:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: $x0 = MOVaddr target-flags(aarch64-page) @ua__str_21__CG_iterat, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_21__CG_iterat
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_21__CG_iterat, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_21__CG_iterat
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %92:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %92:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ua__str_21__CG_iterat, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_21__CG_iterat
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_21__CG_iterat, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_21__CG_iterat
SU(1):   $w1 = COPY %92:gpr32

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %91:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %91:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=1 Reg=%91
  Single Issue       : false;
SU(1):   %92:gpr32 = LDRWui %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%91
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %92:gpr32 = LDRWui %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %91:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %91:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
SU(1):   %92:gpr32 = LDRWui %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: $x0 = MOVaddr target-flags(aarch64-page) @ua__str_20__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_20__Time_step
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_20__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_20__Time_step
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %87:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %88:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %88:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %87:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ua__str_20__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_20__Time_step
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_20__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_20__Time_step
SU(1):   $w1 = COPY %87:gpr32
SU(2):   $d0 = COPY %88:fpr64

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %86:gpr64temp = ADRP target-flags(aarch64-page) @niter
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %86:gpr64temp = ADRP target-flags(aarch64-page) @niter
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=1 Reg=%86
  Single Issue       : false;
SU(1):   %87:gpr32 = LDRWui %86:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%86
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %88:fpr64 = LDRDui %78:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %88:fpr64 = LDRDui %78:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %87:gpr32 = LDRWui %86:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %86:gpr64temp = ADRP target-flags(aarch64-page) @niter
  Ready @5c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %86:gpr64temp = ADRP target-flags(aarch64-page) @niter
SU(1):   %87:gpr32 = LDRWui %86:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(2):   %88:fpr64 = LDRDui %78:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: $x0 = MOVaddr target-flags(aarch64-page) @ua__str_19__Adaptatio, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_19__Adaptatio
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_19__Adaptatio, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_19__Adaptatio
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %83:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %83:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ua__str_19__Adaptatio, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_19__Adaptatio
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_19__Adaptatio, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_19__Adaptatio
SU(1):   $w1 = COPY %83:gpr32

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %82:gpr64temp = ADRP target-flags(aarch64-page) @fre
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %82:gpr64temp = ADRP target-flags(aarch64-page) @fre
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=1 Reg=%82
  Single Issue       : false;
SU(1):   %83:gpr32 = LDRWui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%82
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %83:gpr32 = LDRWui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %82:gpr64temp = ADRP target-flags(aarch64-page) @fre
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %82:gpr64temp = ADRP target-flags(aarch64-page) @fre
SU(1):   %83:gpr32 = LDRWui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: $x0 = MOVaddr target-flags(aarch64-page) @ua__str_18__Levels_of, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_18__Levels_of
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_18__Levels_of, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_18__Levels_of
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = MOVi32imm 7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = MOVi32imm 7
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ua__str_18__Levels_of, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_18__Levels_of
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_18__Levels_of, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_18__Levels_of
SU(1):   $w1 = MOVi32imm 7

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %73:fpr64 = COPY killed $d0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: B0 
Live Out: %78 
Live Thru: 
  LiveReg: %78
  UpdateRegP: SU(7) STRDui %77:fpr64, %78:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
Top Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
GPR64temp=1
GPR32=1
Excess PSets: 
SU(0):   %73:fpr64 = COPY killed $d0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%73
    SU(2): Data Latency=0 Reg=%73
  Pressure Diff      : ZPR_3b 1
  Single Issue       : false;
SU(1):   %74:gpr64temp = ADRP target-flags(aarch64-page) @dlmin
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%74
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(2):   STRDui %73:fpr64, %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%74
    SU(0): Data Latency=0 Reg=%73
  Pressure Diff      : GPR64temp 1    FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(3):   %75:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=1 Reg=%75
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(4):   %76:fpr64 = LDRDui %75:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%75
  Successors:
    SU(5): Data Latency=4 Reg=%76
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(5):   %77:fpr64 = FMULDrr %73:fpr64, %76:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%76
    SU(0): Data Latency=0 Reg=%73
  Successors:
    SU(7): Data Latency=1 Reg=%77
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %78:gpr64temp = ADRP target-flags(aarch64-page) @dtime
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%78
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(7):   STRDui %77:fpr64, %78:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%77
    SU(6): Data Latency=1 Reg=%78
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %73:fpr64 = COPY killed $d0
Top Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 
Queue TopQ.P: 
Queue TopQ.A: 6 1 3 
Picking from Bot:
  Cand SU(7) REG-MAX                            
Picking from Top:
  Cand SU(6) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(7) STRDui %77:fpr64, %78:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %77
  UpdateRegP: SU(7) STRDui %77:fpr64, %78:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 6 
Queue TopQ.P: 
Queue TopQ.A: 6 1 3 
BotQ.A RemLatency SU(5) 5c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) REG-MAX                            
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %78:gpr64temp = ADRP target-flags(aarch64-page) @dtime
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
BotQ.A RemLatency SU(5) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 6
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %77:fpr64 = FMULDrr %73:fpr64, %76:fpr64
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %73
  UpdateRegP: SU(2) STRDui %73:fpr64, %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
              to GPR64temp 1    GPR32 1
  UpdateRegP: SU(5) %77:fpr64 = FMULDrr %73:fpr64, %76:fpr64
              to 
  LiveReg: %76
  UpdateRegP: SU(5) %77:fpr64 = FMULDrr %73:fpr64, %76:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDui %73:fpr64, %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %74
  UpdateRegP: SU(2) STRDui %73:fpr64, %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
              to 
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %74:gpr64temp = ADRP target-flags(aarch64-page) @dlmin
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %76:fpr64 = LDRDui %75:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %75
  UpdateRegP: SU(4) %76:fpr64 = LDRDui %75:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %75:gpr64temp = ADRP target-flags(aarch64-page) %const.2
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %73:fpr64 = COPY killed $d0
SU(3):   %75:gpr64temp = ADRP target-flags(aarch64-page) %const.2
SU(4):   %76:fpr64 = LDRDui %75:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(1):   %74:gpr64temp = ADRP target-flags(aarch64-page) @dlmin
SU(2):   STRDui %73:fpr64, %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
SU(5):   %77:fpr64 = FMULDrr %73:fpr64, %76:fpr64
SU(6):   %78:gpr64temp = ADRP target-flags(aarch64-page) @dtime
SU(7):   STRDui %77:fpr64, %78:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %69:gpr64temp = ADRP target-flags(aarch64-page) %const.0
    To: BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %69:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%69
  Single Issue       : false;
SU(1):   %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%69
  Successors:
    SU(4): Data Latency=4 Reg=%70
  Single Issue       : false;
SU(2):   %71:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=%71
  Single Issue       : false;
SU(3):   %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%71
  Successors:
    SU(5): Data Latency=4 Reg=%72
  Single Issue       : false;
SU(4):   $d0 = COPY %70:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%70
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $d1 = COPY %72:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%72
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $d1 = COPY %72:fpr64
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) $d0 = COPY %70:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(3) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 5c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 6c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %71:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  Ready @6c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %69:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %69:gpr64temp = ADRP target-flags(aarch64-page) %const.0
SU(2):   %71:gpr64temp = ADRP target-flags(aarch64-page) %const.1
SU(1):   %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(3):   %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(4):   $d0 = COPY %70:fpr64
SU(5):   $d1 = COPY %72:fpr64

********** MI Scheduling **********
main:%bb.13 for.cond
  From: %100:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.15, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %100:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%100
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %100:gpr32common, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%100
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.15, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %100:gpr32common, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %100:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %100:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %100:gpr32common, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.14 for.body
  From: %392:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %392:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%392
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %393:gpr32common = nsw ADDWri %392:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%392
  Successors:
    SU(2): Data Latency=1 Reg=%393
  Single Issue       : false;
SU(2):   STRWui %393:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%393
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %393:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %393:gpr32common = nsw ADDWri %392:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %392:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %392:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %393:gpr32common = nsw ADDWri %392:gpr32common, 1, 0
SU(2):   STRWui %393:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.15 for.end
  From: %102:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: CBZW %103:gpr32, %bb.17
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %102:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%102
  Single Issue       : false;
SU(1):   %103:gpr32 = LDRWui %102:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%102
  Successors:
    ExitSU: Data Latency=4 Reg=%103
  Single Issue       : false;
ExitSU:   CBZW %103:gpr32, %bb.17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%103
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %103:gpr32 = LDRWui %102:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %102:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %102:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   %103:gpr32 = LDRWui %102:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.17 if.end44
  From: %119:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: CBZW %120:gpr32, %bb.19
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %119:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%119
  Single Issue       : false;
SU(1):   %120:gpr32 = LDRWui %119:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%119
  Successors:
    ExitSU: Data Latency=4 Reg=%120
  Single Issue       : false;
ExitSU:   CBZW %120:gpr32, %bb.19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%120
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %120:gpr32 = LDRWui %119:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %119:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %119:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   %120:gpr32 = LDRWui %119:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.17 if.end44
  From: $x0 = ADDXri %stack.13.ifmortar, 0, 0
    To: BL @adaptation, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.13.ifmortar, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY $wzr
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adaptation, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY $wzr
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.13.ifmortar, 0, 0
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   $x0 = ADDXri %stack.13.ifmortar, 0, 0
SU(1):   $w1 = COPY $wzr

********** MI Scheduling **********
main:%bb.17 if.end44
  From: %115:gpr64temp = ADRP target-flags(aarch64-page) @time
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %115:gpr64temp = ADRP target-flags(aarch64-page) @time
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%115
  Single Issue       : false;
SU(1):   STRXui $xzr, %115:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%115
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui $xzr, %115:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %115:gpr64temp = ADRP target-flags(aarch64-page) @time
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %115:gpr64temp = ADRP target-flags(aarch64-page) @time
SU(1):   STRXui $xzr, %115:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)

********** MI Scheduling **********
main:%bb.17 if.end44
  From: $x0 = MOVaddr target-flags(aarch64-page) @sje, target-flags(aarch64-pageoff, aarch64-nc) @sje
    To: BL @nr_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sje, target-flags(aarch64-pageoff, aarch64-nc) @sje
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %112:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w2 = MOVi32imm -1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @nr_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %112:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = MOVi32imm -1
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @sje, target-flags(aarch64-pageoff, aarch64-nc) @sje
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sje, target-flags(aarch64-pageoff, aarch64-nc) @sje
SU(2):   $w2 = MOVi32imm -1
SU(1):   $w1 = COPY %112:gpr32

********** MI Scheduling **********
main:%bb.17 if.end44
  From: %109:gpr64temp = ADRP target-flags(aarch64-page) @nelt
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %109:gpr64temp = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=1 Reg=%109
  Single Issue       : false;
SU(1):   %110:gpr32 = LDRWui %109:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=%109
  Successors:
    SU(2): Data Latency=4 Reg=%110
  Single Issue       : false;
SU(2):   %111:gpr32 = ADDWrs %110:gpr32, %110:gpr32, 1
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%110
  Successors:
    SU(3): Data Latency=1 Reg=%111
  Single Issue       : false;
SU(3):   %112:gpr32 = UBFMWri %111:gpr32, 29, 28
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%111
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %112:gpr32 = UBFMWri %111:gpr32, 29, 28
  Ready @0c
  BotQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %111:gpr32 = ADDWrs %110:gpr32, %110:gpr32, 1
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %110:gpr32 = LDRWui %109:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %109:gpr64temp = ADRP target-flags(aarch64-page) @nelt
  Ready @6c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %109:gpr64temp = ADRP target-flags(aarch64-page) @nelt
SU(1):   %110:gpr32 = LDRWui %109:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   %111:gpr32 = ADDWrs %110:gpr32, %110:gpr32, 1
SU(3):   %112:gpr32 = UBFMWri %111:gpr32, 29, 28

********** MI Scheduling **********
main:%bb.17 if.end44
  From: $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
    To: BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %106:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %106:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $d0 = FMOVD0
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
SU(2):   $d0 = FMOVD0
SU(1):   $w1 = COPY %106:gpr32

********** MI Scheduling **********
main:%bb.17 if.end44
  From: %105:gpr64temp = ADRP target-flags(aarch64-page) @ntot
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %105:gpr64temp = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=1 Reg=%105
  Single Issue       : false;
SU(1):   %106:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%105
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %106:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %105:gpr64temp = ADRP target-flags(aarch64-page) @ntot
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %105:gpr64temp = ADRP target-flags(aarch64-page) @ntot
SU(1):   %106:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)

********** MI Scheduling **********
main:%bb.19 if.end48
  From: %123:gpr64temp = ADRP target-flags(aarch64-page) @time
    To: End RegionInstrs: 18
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=8
GPR32=16
Live In: 
Live Out: %287 %282 %265 %319 %317 %356 %352 %382 %378 %376 %247 %240 %231 %229 %127 %123 
Live Thru: 
  LiveReg: %287
  LiveReg: %282
  LiveReg: %265
  LiveReg: %319
  LiveReg: %317
  LiveReg: %356
  LiveReg: %352
  LiveReg: %382
  LiveReg: %378
  LiveReg: %376
  LiveReg: %247
  LiveReg: %240
  LiveReg: %231
  LiveReg: %229
  LiveReg: %127
  LiveReg: %123
  UpdateRegP: SU(1) STRXui $xzr, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
              to 
Top Pressure:

Bottom Pressure:
GPR64temp=8
GPR32=16
GPR64temp Limit 6 Actual 8
GPR32 Limit 15 Actual 16
Excess PSets: GPR64temp GPR32 
SU(0):   %123:gpr64temp = ADRP target-flags(aarch64-page) @time
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%123
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(1):   STRXui $xzr, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%123
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.3.step, 0 :: (store 4 into %ir.step)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %127:gpr64temp = ADRP target-flags(aarch64-page) @niter
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(4):   %229:gpr64temp = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(5):   %231:gpr64 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %240:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(7):   %247:gpr64temp = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(8):   undef %376.sub_32:gpr64 = MOVi32imm 1000
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   %378:gpr64 = MOVaddr target-flags(aarch64-page) @ta2, target-flags(aarch64-pageoff, aarch64-nc) @ta2
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(10):   %382:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %352:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   undef %356.sub_32:gpr64 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   undef %317.sub_32:gpr64 = MOVi32imm 24
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   %319:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   %265:gpr64temp = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(16):   %282:gpr64temp = ADRP target-flags(aarch64-page) @dtime
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(17):   %287:gpr64temp = ADRP target-flags(aarch64-page) @fre
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
Picking from Bot:
  Try  SU(17) GPR64temp:-1
  Cand SU(17) ORDER                              
  Try  SU(16) GPR64temp:-1
  Try  SU(15) GPR64temp:-1
  Try  SU(14) GPR32:-1
  Try  SU(13) GPR32:-1
  Try  SU(12) GPR32:-1
  Try  SU(11) GPR32:-1
  Try  SU(10) GPR32:-1
  Try  SU(9) GPR32:-1
  Try  SU(8) GPR32:-1
  Try  SU(7) GPR64temp:-1
  Try  SU(6) GPR64temp:-1
  Try  SU(5) GPR32:-1
  Try  SU(4) GPR64temp:-1
  Try  SU(3) GPR64temp:-1
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(2) REG-CRIT                           
Pick Bot REG-EXCESS
Scheduling SU(17) %287:gpr64temp = ADRP target-flags(aarch64-page) @fre
Bottom Pressure:
GPR64temp=7
GPR32=15
  GPR64temp: 8 > 6(+ 0 livethru)
  GPR32: 16 > 15(+ 0 livethru)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Try  SU(16) GPR64temp:-1
  Cand SU(16) REG-EXCESS GPR64temp:-1                    
  Try  SU(15) GPR64temp:-1
  Try  SU(7) GPR64temp:-1
  Try  SU(6) GPR64temp:-1
  Try  SU(4) GPR64temp:-1
  Try  SU(3) GPR64temp:-1
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot REG-EXCESS
Scheduling SU(16) %282:gpr64temp = ADRP target-flags(aarch64-page) @dtime
Bottom Pressure:
GPR64temp=6
GPR32=14
  GPR64temp: 8 > 6(+ 0 livethru)
  GPR32: 16 > 15(+ 0 livethru)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 15 14 13 12 11 10 9 8 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui $xzr, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
Bottom Pressure:
GPR64temp=6
GPR32=14
  Ready @2c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 15 14 13 12 11 10 9 8 7 6 5 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(15) %265:gpr64temp = ADRP target-flags(aarch64-page) @nmor
Bottom Pressure:
GPR64temp=5
GPR32=13
  GPR64temp: 8 > 6(+ 0 livethru)
  GPR32: 16 > 15(+ 0 livethru)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 14 13 12 11 10 9 8 7 6 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %319:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
Bottom Pressure:
GPR64temp=5
GPR32=12
  GPR32: 16 > 15(+ 0 livethru)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 4 13 12 11 10 9 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) undef %317.sub_32:gpr64 = MOVi32imm 24
Bottom Pressure:
GPR64temp=5
GPR32=11
  GPR32: 16 > 15(+ 0 livethru)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 4 5 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) undef %356.sub_32:gpr64 = MOVi32imm 200
Bottom Pressure:
GPR64temp=5
GPR32=10
  GPR32: 16 > 15(+ 0 livethru)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 4 5 6 11 10 9 8 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %352:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
Bottom Pressure:
GPR64temp=5
GPR32=9
  GPR32: 16 > 15(+ 0 livethru)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 4 5 6 7 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %382:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
Bottom Pressure:
GPR64temp=5
GPR32=8
  GPR32: 16 > 15(+ 0 livethru)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 4 5 6 7 8 9 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %378:gpr64 = MOVaddr target-flags(aarch64-page) @ta2, target-flags(aarch64-pageoff, aarch64-nc) @ta2
Bottom Pressure:
GPR64temp=5
GPR32=7
  GPR32: 16 > 15(+ 0 livethru)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 4 5 6 7 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) undef %376.sub_32:gpr64 = MOVi32imm 1000
Bottom Pressure:
GPR64temp=5
GPR32=6
  GPR32: 16 > 15(+ 0 livethru)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 4 5 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %247:gpr64temp = ADRP target-flags(aarch64-page) @nelt
Bottom Pressure:
GPR64temp=4
GPR32=5
  GPR64temp: 8 > 6(+ 0 livethru)
  GPR32: 16 > 15(+ 0 livethru)
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 4 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %240:gpr64temp = ADRP target-flags(aarch64-page) @timeron
Bottom Pressure:
GPR64temp=3
GPR32=4
  GPR64temp: 8 > 6(+ 0 livethru)
  GPR32: 16 > 15(+ 0 livethru)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %231:gpr64 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
Bottom Pressure:
GPR64temp=3
GPR32=3
  GPR32: 16 > 15(+ 0 livethru)
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %229:gpr64temp = ADRP target-flags(aarch64-page) @ntot
Bottom Pressure:
GPR64temp=2
GPR32=2
  GPR64temp: 8 > 6(+ 0 livethru)
  GPR32: 16 > 15(+ 0 livethru)
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %127:gpr64temp = ADRP target-flags(aarch64-page) @niter
Bottom Pressure:
GPR64temp=1
GPR32=1
  GPR64temp: 8 > 6(+ 0 livethru)
  GPR32: 16 > 15(+ 0 livethru)
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.3.step, 0 :: (store 4 into %ir.step)
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %123:gpr64temp = ADRP target-flags(aarch64-page) @time
Bottom Pressure:

  GPR64temp: 8 > 6(+ 0 livethru)
  GPR32: 16 > 15(+ 0 livethru)
  Ready @17c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %123:gpr64temp = ADRP target-flags(aarch64-page) @time
SU(2):   STRWui $wzr, %stack.3.step, 0 :: (store 4 into %ir.step)
SU(3):   %127:gpr64temp = ADRP target-flags(aarch64-page) @niter
SU(4):   %229:gpr64temp = ADRP target-flags(aarch64-page) @ntot
SU(5):   %231:gpr64 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
SU(6):   %240:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(7):   %247:gpr64temp = ADRP target-flags(aarch64-page) @nelt
SU(8):   undef %376.sub_32:gpr64 = MOVi32imm 1000
SU(9):   %378:gpr64 = MOVaddr target-flags(aarch64-page) @ta2, target-flags(aarch64-pageoff, aarch64-nc) @ta2
SU(10):   %382:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
SU(11):   %352:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
SU(12):   undef %356.sub_32:gpr64 = MOVi32imm 200
SU(13):   undef %317.sub_32:gpr64 = MOVi32imm 24
SU(14):   %319:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
SU(15):   %265:gpr64temp = ADRP target-flags(aarch64-page) @nmor
SU(1):   STRXui $xzr, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
SU(16):   %282:gpr64temp = ADRP target-flags(aarch64-page) @dtime
SU(17):   %287:gpr64temp = ADRP target-flags(aarch64-page) @fre

********** MI Scheduling **********
main:%bb.19 if.end48
  From: %122:gpr32 = MOVi32imm 1
    To: BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %122:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $w0 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %122:gpr32 = MOVi32imm 1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w0 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(1):   $w0 = MOVi32imm 1
SU(0):   %122:gpr32 = MOVi32imm 1

********** MI Scheduling **********
main:%bb.20 for.cond49
  From: %126:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 12, %bb.65, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %126:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%126
  Single Issue       : false;
SU(1):   %128:gpr32 = LDRWui %127:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%128
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %126:gpr32, %128:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%128
    SU(0): Data Latency=4 Reg=%126
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.65, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %126:gpr32, %128:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %128:gpr32 = LDRWui %127:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %126:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %126:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %128:gpr32 = LDRWui %127:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(2):   dead $wzr = SUBSWrr %126:gpr32, %128:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.21 for.body51
  From: %227:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 1, %bb.28, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %227:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%227
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %227:gpr32common, 1, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%227
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.28, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %227:gpr32common, 1, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %227:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %227:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   dead $wzr = SUBSWri %227:gpr32common, 1, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.22 if.then53
  From: STRXui $xzr, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRXui $xzr, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   STRWui %122:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) STRWui %122:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) STRXui $xzr, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   STRXui $xzr, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
SU(1):   STRXui $xzr, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
SU(2):   STRWui %122:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.22 if.then53
  From: $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
    To: BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %230:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %230:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $d0 = FMOVD0
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
SU(2):   $d0 = FMOVD0
SU(1):   $w1 = COPY %230:gpr32

********** MI Scheduling **********
main:%bb.23 for.cond54
  From: %236:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.27, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %236:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%236
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %236:gpr32common, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%236
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.27, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %236:gpr32common, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %236:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %236:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %236:gpr32common, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.24 for.body56
  From: %386:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 0, %bb.26, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %386:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%386
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %386:gpr32common, 2, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%386
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.26, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %386:gpr32common, 2, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %386:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %386:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %386:gpr32common, 2, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.26 for.inc60
  From: %389:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.23
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %389:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%389
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %390:gpr32common = nsw ADDWri %389:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%389
  Successors:
    SU(2): Data Latency=1 Reg=%390
  Single Issue       : false;
SU(2):   STRWui %390:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%390
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.23
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %390:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %390:gpr32common = nsw ADDWri %389:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %389:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %389:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %390:gpr32common = nsw ADDWri %389:gpr32common, 1, 0
SU(2):   STRWui %390:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.30 if.end66
  From: $x0 = MOVaddr target-flags(aarch64-page) @tmort, target-flags(aarch64-pageoff, aarch64-nc) @tmort
    To: BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @tmort, target-flags(aarch64-pageoff, aarch64-nc) @tmort
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @tmort, target-flags(aarch64-pageoff, aarch64-nc) @tmort
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @tmort, target-flags(aarch64-pageoff, aarch64-nc) @tmort
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1

********** MI Scheduling **********
main:%bb.31 for.cond67
  From: %246:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.33, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %246:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%246
  Single Issue       : false;
SU(1):   %248:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%248
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %246:gpr32, %248:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%248
    SU(0): Data Latency=4 Reg=%246
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.33, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %246:gpr32, %248:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %248:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %246:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %246:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %248:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %246:gpr32, %248:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.32 for.body69
  From: %384:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.31
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %384:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%384
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %385:gpr32common = nsw ADDWri %384:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%384
  Successors:
    SU(2): Data Latency=1 Reg=%385
  Single Issue       : false;
SU(2):   STRWui %385:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%385
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.31
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %385:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %385:gpr32common = nsw ADDWri %384:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %384:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %384:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %385:gpr32common = nsw ADDWri %384:gpr32common, 1, 0
SU(2):   STRWui %385:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
main:%bb.32 for.body69
  From: $x0 = COPY %379:gpr64
    To: BL @laplacian, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %379:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %381:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %383:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @laplacian, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %383:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %381:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %379:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   $x0 = COPY %379:gpr64
SU(1):   $x1 = COPY %381:gpr64
SU(2):   $w2 = COPY %383:gpr32

********** MI Scheduling **********
main:%bb.32 for.body69
  From: %374:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %374:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%374
    SU(1): Data Latency=4 Reg=%374
  Single Issue       : false;
SU(1):   %377:gpr64 = MADDXrrr %374:gpr64, %376:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%374
  Successors:
    SU(3): Data Latency=1 Reg=%377
    SU(2): Data Latency=1 Reg=%377
  Single Issue       : false;
SU(2):   %379:gpr64 = ADDXrr %378:gpr64, %377:gpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%377
  Single Issue       : false;
SU(3):   %381:gpr64 = ADDXrr %231:gpr64, %377:gpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%377
  Single Issue       : false;
SU(4):   %383:gpr32 = LDRWroX %382:gpr64common, %374:gpr64, 0, 1 :: (load 4 from %ir.arrayidx75)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%374
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %374:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 2 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 1 
TopQ.A RemLatency SU(4) 3c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %381:gpr64 = ADDXrr %231:gpr64, %377:gpr64
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %379:gpr64 = ADDXrr %378:gpr64, %377:gpr64
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %377:gpr64 = MADDXrrr %374:gpr64, %376:gpr64, $xzr
  Ready @2c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %383:gpr32 = LDRWroX %382:gpr64common, %374:gpr64, 0, 1 :: (load 4 from %ir.arrayidx75)
  Ready @3c
  BotQ.A TopLatency SU(4) 4c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %374:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(4):   %383:gpr32 = LDRWroX %382:gpr64common, %374:gpr64, 0, 1 :: (load 4 from %ir.arrayidx75)
SU(1):   %377:gpr64 = MADDXrrr %374:gpr64, %376:gpr64, $xzr
SU(2):   %379:gpr64 = ADDXrr %378:gpr64, %377:gpr64
SU(3):   %381:gpr64 = ADDXrr %231:gpr64, %377:gpr64

********** MI Scheduling **********
main:%bb.34 for.cond79
  From: %251:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.45, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %251:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%251
  Single Issue       : false;
SU(1):   %253:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%253
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %251:gpr32, %253:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%253
    SU(0): Data Latency=4 Reg=%251
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.45, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %251:gpr32, %253:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %253:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %251:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %251:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %253:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %251:gpr32, %253:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.36 for.cond82
  From: %334:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.44, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %334:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%334
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %334:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%334
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.44, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %334:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %334:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %334:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %334:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.38 for.cond85
  From: %339:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.43, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %339:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%339
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %339:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%339
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.43, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %339:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %339:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %339:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %339:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.40 for.cond88
  From: %344:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.42, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %344:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%344
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %344:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%344
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.42, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %344:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %344:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %344:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %344:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.41 for.body90
  From: %348:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.40
 RegionInstrs: 22
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: %378 %356 %352 %376 
Live Out: %378 %356 %352 %376 
Live Thru: GPR32=4
  LiveReg: %378
  UpdateRegP: SU(13) %367:gpr64 = ADDXrr %378:gpr64, %351:gpr64
              to 
  LiveReg: %356
  UpdateRegP: SU(4) %357:gpr64 = MADDXrrr %354:gpr64, %356:gpr64, $xzr
              to 
  LiveReg: %352
  UpdateRegP: SU(2) %353:gpr64 = ADDXrr %352:gpr64, %351:gpr64
              to 
  LiveReg: %376
  UpdateRegP: SU(1) %351:gpr64 = MADDXrrr %348:gpr64, %376:gpr64, $xzr
              to 
Top Pressure:
GPR32=4
Bottom Pressure:
GPR32=4
Excess PSets: 
Cluster ld/st SU(10) - SU(19)
  Copy Succ SU(11)
  Copy Succ SU(21)
SU(0):   %348:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%348
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %351:gpr64 = MADDXrrr %348:gpr64, %376:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%348
  Successors:
    SU(13): Data Latency=1 Reg=%351
    SU(2): Data Latency=1 Reg=%351
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %353:gpr64 = ADDXrr %352:gpr64, %351:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(1): Data Latency=1 Reg=%351
  Successors:
    SU(5): Data Latency=1 Reg=%353
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %354:gpr64 = LDRSWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(4): Data Latency=4 Reg=%354
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %357:gpr64 = MADDXrrr %354:gpr64, %356:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(3): Data Latency=4 Reg=%354
  Successors:
    SU(14): Data Latency=1 Reg=%357
    SU(5): Data Latency=1 Reg=%357
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %358:gpr64 = ADDXrr %353:gpr64, %357:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(2): Data Latency=1 Reg=%353
    SU(4): Data Latency=1 Reg=%357
  Successors:
    SU(9): Data Latency=1 Reg=%358
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %359:gpr64 = LDRSWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(7): Data Latency=4 Reg=%359
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %360:gpr64 = ADDXrs %359:gpr64, %359:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(6): Data Latency=4 Reg=%359
  Successors:
    SU(8): Data Latency=1 Reg=%360
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %361:gpr64 = UBFMXri %360:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(7): Data Latency=1 Reg=%360
  Successors:
    SU(15): Data Latency=1 Reg=%361
    SU(9): Data Latency=1 Reg=%361
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %362:gpr64common = ADDXrr %358:gpr64, %361:gpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%358
    SU(8): Data Latency=1 Reg=%361
  Successors:
    SU(18): Data Latency=1 Reg=%362
    SU(12): Data Latency=1 Reg=%362
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %363:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(11): Data Latency=4 Reg=%363
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %364:gpr64 = UBFMXri %363:gpr64, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(10): Data Latency=4 Reg=%363
    SU(19): Ord  Latency=0 Artificial
  Successors:
    SU(18): Data Latency=1 Reg=%364
    SU(16): Data Latency=1 Reg=%364
    SU(12): Data Latency=1 Reg=%364
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %365:fpr64 = LDRDroX %362:gpr64common, %364:gpr64, 0, 0 :: (load 8 from %ir.arrayidx98)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(9): Data Latency=1 Reg=%362
    SU(11): Data Latency=1 Reg=%364
  Successors:
    SU(17): Data Latency=4 Reg=%365
    SU(18): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(13):   %367:gpr64 = ADDXrr %378:gpr64, %351:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(1): Data Latency=1 Reg=%351
  Successors:
    SU(14): Data Latency=1 Reg=%367
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %368:gpr64 = ADDXrr %367:gpr64, %357:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(13): Data Latency=1 Reg=%367
    SU(4): Data Latency=1 Reg=%357
  Successors:
    SU(15): Data Latency=1 Reg=%368
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   %369:gpr64common = ADDXrr %368:gpr64, %361:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(14): Data Latency=1 Reg=%368
    SU(8): Data Latency=1 Reg=%361
  Successors:
    SU(16): Data Latency=1 Reg=%369
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %370:fpr64 = LDRDroX %369:gpr64common, %364:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(15): Data Latency=1 Reg=%369
    SU(11): Data Latency=1 Reg=%364
  Successors:
    SU(17): Data Latency=4 Reg=%370
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(17):   %371:fpr64 = FSUBDrr %365:fpr64, %370:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(16): Data Latency=4 Reg=%370
    SU(12): Data Latency=4 Reg=%365
  Successors:
    SU(18): Data Latency=1 Reg=%371
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(18):   STRDroX %371:fpr64, %362:gpr64common, %364:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(17): Data Latency=1 Reg=%371
    SU(12): Ord  Latency=0 Memory
    SU(11): Data Latency=1 Reg=%364
    SU(9): Data Latency=1 Reg=%362
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(19):   %372:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(10): Ord  Latency=0 Cluster
  Successors:
    SU(20): Data Latency=4 Reg=%372
    SU(21): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   %373:gpr32common = nsw ADDWri %372:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(19): Data Latency=4 Reg=%372
  Successors:
    SU(21): Data Latency=1 Reg=%373
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   STRWui %373:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(20): Data Latency=1 Reg=%373
    SU(19): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.40
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) STRWui %373:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
GPR32=5
  LiveReg: %373
  UpdateRegP: SU(21) STRWui %373:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(21) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(18) 13c
  BotQ.A RemainingLatency 13 + 1c > CritPath 13
Picking from Bot:
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) STRDroX %371:fpr64, %362:gpr64common, %364:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %371
  UpdateRegP: SU(18) STRDroX %371:fpr64, %362:gpr64common, %364:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
              to GPR32 2
  LiveReg: %362
  UpdateRegP: SU(12) %365:fpr64 = LDRDroX %362:gpr64common, %364:gpr64, 0, 0 :: (load 8 from %ir.arrayidx98)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(18) STRDroX %371:fpr64, %362:gpr64common, %364:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
              to GPR32 1
  LiveReg: %364
  UpdateRegP: SU(12) %365:fpr64 = LDRDroX %362:gpr64common, %364:gpr64, 0, 0 :: (load 8 from %ir.arrayidx98)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(16) %370:fpr64 = LDRDroX %369:gpr64common, %364:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(18) STRDroX %371:fpr64, %362:gpr64common, %364:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
              to 
  Ready @1c
  BotQ.A TopLatency SU(18) 13c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 17 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(17) 12c
  BotQ.A RemainingLatency 12 + 2c > CritPath 13
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(17) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(17) %371:fpr64 = FSUBDrr %365:fpr64, %370:fpr64
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %365
  UpdateRegP: SU(17) %371:fpr64 = FSUBDrr %365:fpr64, %370:fpr64
              to 
  LiveReg: %370
  UpdateRegP: SU(17) %371:fpr64 = FSUBDrr %365:fpr64, %370:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(17) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 12 
Queue BotQ.A: 20 
Pick Bot ONLY1     
Scheduling SU(20) %373:gpr32common = nsw ADDWri %372:gpr32common, 1, 0
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %372
  UpdateRegP: SU(20) %373:gpr32common = nsw ADDWri %372:gpr32common, 1, 0
              to GPR32 -1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 16 12 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(16) 8c
  BotQ.A RemainingLatency 8 + 6c > CritPath 13
Picking from Bot:
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %370:fpr64 = LDRDroX %369:gpr64common, %364:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
Bottom Pressure:
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %369
  UpdateRegP: SU(16) %370:fpr64 = LDRDroX %369:gpr64common, %364:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  BotQ.A BotLatency SU(16) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 15 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(12) 8c
  BotQ.A RemainingLatency 8 + 7c > CritPath 13
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %365:fpr64 = LDRDroX %362:gpr64common, %364:gpr64, 0, 0 :: (load 8 from %ir.arrayidx98)
Bottom Pressure:
GPR32=8
  Ready @7c
  BotQ.A TopLatency SU(12) 8c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(15) 7c
  BotQ.A RemainingLatency 7 + 8c > CritPath 13
Picking from Bot:
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(15) %369:gpr64common = ADDXrr %368:gpr64, %361:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %368
  UpdateRegP: SU(15) %369:gpr64common = ADDXrr %368:gpr64, %361:gpr64
              to 
  LiveReg: %361
  UpdateRegP: SU(9) %362:gpr64common = ADDXrr %358:gpr64, %361:gpr64
              to 
  UpdateRegP: SU(15) %369:gpr64common = ADDXrr %368:gpr64, %361:gpr64
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(15) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 9 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(9) 7c
  BotQ.A RemainingLatency 7 + 9c > CritPath 13
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(9) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(9) %362:gpr64common = ADDXrr %358:gpr64, %361:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %358
  UpdateRegP: SU(9) %362:gpr64common = ADDXrr %358:gpr64, %361:gpr64
              to GPR32 -1
  Ready @9c
  BotQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 14 5 8 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(14) 6c
  BotQ.A RemainingLatency 6 + 10c > CritPath 13
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(8) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %361:gpr64 = UBFMXri %360:gpr64, 61, 60
Bottom Pressure:
GPR32=9
  LiveReg: %360
  UpdateRegP: SU(8) %361:gpr64 = UBFMXri %360:gpr64, 61, 60
              to GPR32 -1
  Ready @10c
  BotQ.A BotLatency SU(8) 7c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 14 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(14) 6c
  BotQ.A RemainingLatency 6 + 11c > CritPath 13
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(11) %364:gpr64 = UBFMXri %363:gpr64, 61, 60
Bottom Pressure:
GPR32=9
  LiveReg: %363
  UpdateRegP: SU(11) %364:gpr64 = UBFMXri %363:gpr64, 61, 60
              to GPR32 -1
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 7 14 5 19 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(14) 6c
  BotQ.A RemainingLatency 6 + 12c > CritPath 13
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) %360:gpr64 = ADDXrs %359:gpr64, %359:gpr64, 2
Bottom Pressure:
GPR32=9
  LiveReg: %359
  UpdateRegP: SU(7) %360:gpr64 = ADDXrs %359:gpr64, %359:gpr64, 2
              to GPR32 -1
  Ready @12c
  BotQ.A BotLatency SU(7) 8c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 6 
Queue BotQ.A: 19 14 5 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(14) 6c
  BotQ.A RemainingLatency 6 + 13c > CritPath 13
Picking from Bot:
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(19) %372:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=8
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 6 
Queue BotQ.A: 5 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 
  BotQ.A RemainingLatency 0 + 14c > CritPath 13
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %368:gpr64 = ADDXrr %367:gpr64, %357:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %367
  UpdateRegP: SU(14) %368:gpr64 = ADDXrr %367:gpr64, %357:gpr64
              to 
  LiveReg: %357
  UpdateRegP: SU(5) %358:gpr64 = ADDXrr %353:gpr64, %357:gpr64
              to 
  UpdateRegP: SU(14) %368:gpr64 = ADDXrr %367:gpr64, %357:gpr64
              to GPR32 -1
  Ready @14c
  BotQ.A TopLatency SU(14) 6c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 13
  Executed: 15c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 5 13 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 
  BotQ.A RemainingLatency 0 + 15c > CritPath 13
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(10) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(10) %363:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=8
  Ready @15c
  BotQ.A BotLatency SU(10) 10c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 14
  Executed: 16c
  Critical: 14c, 14 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 13 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
  BotQ.A RemainingLatency 0 + 16c > CritPath 13
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %358:gpr64 = ADDXrr %353:gpr64, %357:gpr64
Bottom Pressure:
GPR32=8
  LiveReg: %353
  UpdateRegP: SU(5) %358:gpr64 = ADDXrr %353:gpr64, %357:gpr64
              to GPR32 -1
  Ready @16c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 15
  Executed: 17c
  Critical: 15c, 15 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 13 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
  BotQ.A RemainingLatency 0 + 17c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(13) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) %367:gpr64 = ADDXrr %378:gpr64, %351:gpr64
Bottom Pressure:
GPR32=8
  LiveReg: %351
  UpdateRegP: SU(2) %353:gpr64 = ADDXrr %352:gpr64, %351:gpr64
              to GPR32 -1
  UpdateRegP: SU(13) %367:gpr64 = ADDXrr %378:gpr64, %351:gpr64
              to GPR32 -1
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 16
  Executed: 18c
  Critical: 16c, 16 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
  BotQ.A RemainingLatency 0 + 18c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  4 cycles 
  Cand SU(2) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %353:gpr64 = ADDXrr %352:gpr64, %351:gpr64
Bottom Pressure:
GPR32=7
  Ready @18c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 17
  Executed: 19c
  Critical: 17c, 17 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
  BotQ.A RemainingLatency 0 + 19c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %357:gpr64 = MADDXrrr %354:gpr64, %356:gpr64, $xzr
Bottom Pressure:
GPR32=7
  LiveReg: %354
  UpdateRegP: SU(4) %357:gpr64 = MADDXrrr %354:gpr64, %356:gpr64, $xzr
              to GPR32 -1
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 18
  Executed: 20c
  Critical: 18c, 18 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 6 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
  BotQ.A RemainingLatency 0 + 20c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %351:gpr64 = MADDXrrr %348:gpr64, %376:gpr64, $xzr
Bottom Pressure:
GPR32=7
  LiveReg: %348
  UpdateRegP: SU(1) %351:gpr64 = MADDXrrr %348:gpr64, %376:gpr64, $xzr
              to GPR32 -1
  Ready @20c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 19
  Executed: 21c
  Critical: 19c, 19 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 0 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %359:gpr64 = LDRSWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=6
  Ready @21c
  BotQ.A BotLatency SU(6) 12c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 20
  Executed: 22c
  Critical: 20c, 20 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 23 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %354:gpr64 = LDRSWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=5
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 21
  Executed: 24c
  Critical: 21c, 21 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %348:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
Bottom Pressure:
GPR32=4
  Ready @24c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 22
  Executed: 25c
  Critical: 22c, 22 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %348:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(3):   %354:gpr64 = LDRSWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(6):   %359:gpr64 = LDRSWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %351:gpr64 = MADDXrrr %348:gpr64, %376:gpr64, $xzr
SU(4):   %357:gpr64 = MADDXrrr %354:gpr64, %356:gpr64, $xzr
SU(2):   %353:gpr64 = ADDXrr %352:gpr64, %351:gpr64
SU(13):   %367:gpr64 = ADDXrr %378:gpr64, %351:gpr64
SU(5):   %358:gpr64 = ADDXrr %353:gpr64, %357:gpr64
SU(10):   %363:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(14):   %368:gpr64 = ADDXrr %367:gpr64, %357:gpr64
SU(19):   %372:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(7):   %360:gpr64 = ADDXrs %359:gpr64, %359:gpr64, 2
SU(11):   %364:gpr64 = UBFMXri %363:gpr64, 61, 60
SU(8):   %361:gpr64 = UBFMXri %360:gpr64, 61, 60
SU(9):   %362:gpr64common = ADDXrr %358:gpr64, %361:gpr64
SU(15):   %369:gpr64common = ADDXrr %368:gpr64, %361:gpr64
SU(12):   %365:fpr64 = LDRDroX %362:gpr64common, %364:gpr64, 0, 0 :: (load 8 from %ir.arrayidx98)
SU(16):   %370:fpr64 = LDRDroX %369:gpr64common, %364:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
SU(20):   %373:gpr32common = nsw ADDWri %372:gpr32common, 1, 0
SU(17):   %371:fpr64 = FSUBDrr %365:fpr64, %370:fpr64
SU(18):   STRDroX %371:fpr64, %362:gpr64common, %364:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
SU(21):   STRWui %373:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.42 for.inc118
  From: %346:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.38
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %346:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%346
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %347:gpr32common = nsw ADDWri %346:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%346
  Successors:
    SU(2): Data Latency=1 Reg=%347
  Single Issue       : false;
SU(2):   STRWui %347:gpr32common, %stack.7.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%347
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.38
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %347:gpr32common, %stack.7.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %347:gpr32common = nsw ADDWri %346:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %346:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   %346:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %347:gpr32common = nsw ADDWri %346:gpr32common, 1, 0
SU(2):   STRWui %347:gpr32common, %stack.7.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
main:%bb.43 for.inc121
  From: %341:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.36
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %341:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%341
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %342:gpr32common = nsw ADDWri %341:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%341
  Successors:
    SU(2): Data Latency=1 Reg=%342
  Single Issue       : false;
SU(2):   STRWui %342:gpr32common, %stack.8.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%342
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.36
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %342:gpr32common, %stack.8.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %342:gpr32common = nsw ADDWri %341:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %341:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   %341:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %342:gpr32common = nsw ADDWri %341:gpr32common, 1, 0
SU(2):   STRWui %342:gpr32common, %stack.8.k, 0 :: (store 4 into %ir.k)

********** MI Scheduling **********
main:%bb.44 for.inc124
  From: %336:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.34
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %336:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%336
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %337:gpr32common = nsw ADDWri %336:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%336
  Successors:
    SU(2): Data Latency=1 Reg=%337
  Single Issue       : false;
SU(2):   STRWui %337:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%337
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.34
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %337:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %337:gpr32common = nsw ADDWri %336:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %336:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %336:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %337:gpr32common = nsw ADDWri %336:gpr32common, 1, 0
SU(2):   STRWui %337:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
main:%bb.45 for.end126
  From: $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
    To: BL @transfb, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @transfb, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs

********** MI Scheduling **********
main:%bb.48 for.cond130
  From: %261:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.55, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %261:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%261
  Single Issue       : false;
SU(1):   %263:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%263
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %261:gpr32, %263:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%263
    SU(0): Data Latency=4 Reg=%261
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.55, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %261:gpr32, %263:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %263:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %261:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %261:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %263:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %261:gpr32, %263:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.50 for.cond133
  From: %311:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
    To: Bcc 12, %bb.54, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %311:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%311
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %311:gpr32common, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%311
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.54, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %311:gpr32common, 5, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %311:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %311:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(1):   dead $wzr = SUBSWri %311:gpr32common, 5, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.51 for.body135
  From: %315:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: CBNZW %322:gpr32, %bb.53
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %315:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%315
  Single Issue       : false;
SU(1):   %320:gpr64common = MADDXrrr %315:gpr64, %317:gpr64, %319:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%315
  Successors:
    SU(3): Data Latency=1 Reg=%320
  Single Issue       : false;
SU(2):   %321:gpr64 = LDRSWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%321
  Single Issue       : false;
SU(3):   %322:gpr32 = LDRWroX %320:gpr64common, %321:gpr64, 0, 1 :: (load 4 from %ir.arrayidx139)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%320
    SU(2): Data Latency=4 Reg=%321
  Successors:
    ExitSU: Data Latency=4 Reg=%322
  Single Issue       : false;
ExitSU:   CBNZW %322:gpr32, %bb.53
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%322
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %322:gpr32 = LDRWroX %320:gpr64common, %321:gpr64, 0, 1 :: (load 4 from %ir.arrayidx139)
  Ready @4c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %320:gpr64common = MADDXrrr %315:gpr64, %317:gpr64, %319:gpr64
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %321:gpr64 = LDRSWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 3
  Executed: 9c
  Critical: 3c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %315:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %315:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(2):   %321:gpr64 = LDRSWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(1):   %320:gpr64common = MADDXrrr %315:gpr64, %317:gpr64, %319:gpr64
SU(3):   %322:gpr32 = LDRWroX %320:gpr64common, %321:gpr64, 0, 1 :: (load 4 from %ir.arrayidx139)

********** MI Scheduling **********
main:%bb.52 if.then141
  From: $x0 = COPY %328:gpr64
    To: BL @facev, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %328:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %329:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @facev, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = COPY %329:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %328:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = FMOVD0
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(2):   $d0 = FMOVD0
SU(0):   $x0 = COPY %328:gpr64
SU(1):   $w1 = COPY %329:gpr32

********** MI Scheduling **********
main:%bb.52 if.then141
  From: %323:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %323:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%323
  Single Issue       : false;
SU(1):   %328:gpr64 = MADDXrrr %323:gpr64, %376:gpr64, %352:gpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%323
  Single Issue       : false;
SU(2):   %329:gpr32 = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %328:gpr64 = MADDXrrr %323:gpr64, %376:gpr64, %352:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %329:gpr32 = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %323:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %323:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(2):   %329:gpr32 = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(1):   %328:gpr64 = MADDXrrr %323:gpr64, %376:gpr64, %352:gpr64

********** MI Scheduling **********
main:%bb.53 for.inc146
  From: %331:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
    To: B %bb.50
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %331:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%331
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %332:gpr32common = nsw ADDWri %331:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%331
  Successors:
    SU(2): Data Latency=1 Reg=%332
  Single Issue       : false;
SU(2):   STRWui %332:gpr32common, %stack.5.iside, 0 :: (store 4 into %ir.iside)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%332
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.50
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %332:gpr32common, %stack.5.iside, 0 :: (store 4 into %ir.iside)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %332:gpr32common = nsw ADDWri %331:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %331:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %331:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(1):   %332:gpr32common = nsw ADDWri %331:gpr32common, 1, 0
SU(2):   STRWui %332:gpr32common, %stack.5.iside, 0 :: (store 4 into %ir.iside)

********** MI Scheduling **********
main:%bb.54 for.inc149
  From: %313:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.48
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %313:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%313
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %314:gpr32common = nsw ADDWri %313:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%313
  Successors:
    SU(2): Data Latency=1 Reg=%314
  Single Issue       : false;
SU(2):   STRWui %314:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%314
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.48
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %314:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %314:gpr32common = nsw ADDWri %313:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %313:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   %313:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %314:gpr32common = nsw ADDWri %313:gpr32common, 1, 0
SU(2):   STRWui %314:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
main:%bb.55 for.end151
  From: $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
    To: BL @col2, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %266:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @col2, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $w2 = COPY %266:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
SU(2):   $w2 = COPY %266:gpr32

********** MI Scheduling **********
main:%bb.57 if.end154
  From: $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
    To: BL @add2, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %274:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @add2, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $w2 = COPY %274:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
SU(2):   $w2 = COPY %274:gpr32

********** MI Scheduling **********
main:%bb.59 if.end157
  From: %281:fpr64 = LDRDui %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
    To: CBZW %285:gpr32, %bb.63
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %281:fpr64 = LDRDui %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%281
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %283:fpr64 = LDRDui %282:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%283
  Single Issue       : false;
SU(2):   %284:fpr64 = FADDDrr %281:fpr64, %283:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%283
    SU(0): Data Latency=4 Reg=%281
  Successors:
    SU(3): Data Latency=1 Reg=%284
  Single Issue       : false;
SU(3):   STRDui %284:fpr64, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%284
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %285:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Data Latency=4 Reg=%285
  Single Issue       : false;
ExitSU:   CBZW %285:gpr32, %bb.63
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%285
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %284:fpr64, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %284:fpr64 = FADDDrr %281:fpr64, %283:fpr64
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %285:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %283:fpr64 = LDRDui %282:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %281:fpr64 = LDRDui %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %281:fpr64 = LDRDui %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
SU(1):   %283:fpr64 = LDRDui %282:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
SU(4):   %285:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(2):   %284:fpr64 = FADDDrr %281:fpr64, %283:fpr64
SU(3):   STRDui %284:fpr64, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)

********** MI Scheduling **********
main:%bb.60 land.lhs.true
  From: %286:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 1, %bb.63, implicit killed $nzcv
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %286:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%286
    SU(2): Data Latency=4 Reg=%286
  Single Issue       : false;
SU(1):   %288:gpr32 = LDRWui %287:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%288
    SU(2): Data Latency=4 Reg=%288
  Single Issue       : false;
SU(2):   %289:gpr32 = SDIVWr %286:gpr32, %288:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%288
    SU(0): Data Latency=4 Reg=%286
  Successors:
    SU(3): Data Latency=1 Reg=%289
  Single Issue       : false;
SU(3):   %290:gpr32 = nsw MADDWrrr %289:gpr32, %288:gpr32, $wzr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%289
    SU(1): Data Latency=4 Reg=%288
  Successors:
    SU(4): Data Latency=1 Reg=%290
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %290:gpr32, %286:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%290
    SU(0): Data Latency=4 Reg=%286
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.63, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %290:gpr32, %286:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(4) 6c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %290:gpr32 = nsw MADDWrrr %289:gpr32, %288:gpr32, $wzr
  Ready @2c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %289:gpr32 = SDIVWr %286:gpr32, %288:gpr32
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %288:gpr32 = LDRWui %287:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %286:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 5
  Executed: 9c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   %286:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %288:gpr32 = LDRWui %287:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
SU(2):   %289:gpr32 = SDIVWr %286:gpr32, %288:gpr32
SU(3):   %290:gpr32 = nsw MADDWrrr %289:gpr32, %288:gpr32, $wzr
SU(4):   dead $wzr = SUBSWrr %290:gpr32, %286:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.61 if.then161
  From: %293:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 0, %bb.64, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %293:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%293
  Single Issue       : false;
SU(1):   %295:gpr32 = LDRWui %127:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%295
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %293:gpr32, %295:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%295
    SU(0): Data Latency=4 Reg=%293
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.64, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %293:gpr32, %295:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %295:gpr32 = LDRWui %127:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %293:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.61 ***
SU(0):   %293:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %295:gpr32 = LDRWui %127:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(2):   dead $wzr = SUBSWrr %293:gpr32, %295:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.62 if.then163
  From: $x0 = ADDXri %stack.13.ifmortar, 0, 0
    To: BL @adaptation, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.13.ifmortar, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %297:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adaptation, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %297:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.13.ifmortar, 0, 0
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   $x0 = ADDXri %stack.13.ifmortar, 0, 0
SU(1):   $w1 = COPY %297:gpr32

********** MI Scheduling **********
main:%bb.64 if.end166
  From: %299:fpr64 = LDRDui %394:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
    To: B %bb.20
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: %394 %247 
Live Out: %394 %247 
Live Thru: GPR64temp=1
GPR32=2
  LiveReg: %394
  UpdateRegP: SU(0) %299:fpr64 = LDRDui %394:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) STRDui %307:fpr64, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  LiveReg: %247
  UpdateRegP: SU(1) undef %302.ssub:fpr64 = LDRSui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
GPR64temp=1
GPR32=2
Bottom Pressure:
GPR64temp=1
GPR32=2
Excess PSets: 
SU(0):   %299:fpr64 = LDRDui %394:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%299
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   undef %302.ssub:fpr64 = LDRSui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%302
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(2):   %304:fpr128 = SSHLLv2i32_shift %302:fpr64, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%302
  Successors:
    SU(3): Data Latency=1 Reg=%304
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %306:fpr64 = SCVTFv1i64 %304.dsub:fpr128
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%304
  Successors:
    SU(4): Data Latency=1 Reg=%306
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %307:fpr64 = FADDDrr %299:fpr64, %306:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%306
    SU(0): Data Latency=4 Reg=%299
  Successors:
    SU(5): Data Latency=1 Reg=%307
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   STRDui %307:fpr64, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%307
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %308:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=%308
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %309:gpr32common = nsw ADDWri %308:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%308
  Successors:
    SU(8): Data Latency=1 Reg=%309
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   STRWui %309:gpr32common, %stack.3.step, 0 :: (store 4 into %ir.step)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%309
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) STRWui %309:gpr32common, %stack.3.step, 0 :: (store 4 into %ir.step)
Bottom Pressure:
GPR64temp=1
GPR32=3
  LiveReg: %309
  UpdateRegP: SU(8) STRWui %309:gpr32common, %stack.3.step, 0 :: (store 4 into %ir.step)
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
BotQ.A RemLatency SU(5) 7c
  BotQ.A RemainingLatency 7 + 1c > CritPath 7
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %307:fpr64, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %307
  UpdateRegP: SU(5) STRDui %307:fpr64, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
BotQ.A RemLatency SU(4) 6c
  BotQ.A RemainingLatency 6 + 2c > CritPath 7
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(4) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %307:fpr64 = FADDDrr %299:fpr64, %306:fpr64
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %299
  UpdateRegP: SU(4) %307:fpr64 = FADDDrr %299:fpr64, %306:fpr64
              to 
  LiveReg: %306
  UpdateRegP: SU(4) %307:fpr64 = FADDDrr %299:fpr64, %306:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 7 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 3c > CritPath 7
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %306:fpr64 = SCVTFv1i64 %304.dsub:fpr128
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %304
  UpdateRegP: SU(3) %306:fpr64 = SCVTFv1i64 %304.dsub:fpr128
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 7 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
BotQ.A RemLatency SU(7) 4c
  BotQ.A RemainingLatency 4 + 4c > CritPath 7
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %309:gpr32common = nsw ADDWri %308:gpr32common, 1, 0
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %308
  UpdateRegP: SU(7) %309:gpr32common = nsw ADDWri %308:gpr32common, 1, 0
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 6 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %304:fpr128 = SSHLLv2i32_shift %302:fpr64, 0
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %302
  UpdateRegP: SU(2) %304:fpr128 = SSHLLv2i32_shift %302:fpr64, 0
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 6 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %299:fpr64 = LDRDui %394:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @6c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %308:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) undef %302.ssub:fpr64 = LDRSui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
Bottom Pressure:
GPR64temp=1
GPR32=2
  Ready @9c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(1):   undef %302.ssub:fpr64 = LDRSui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(6):   %308:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(0):   %299:fpr64 = LDRDui %394:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
SU(2):   %304:fpr128 = SSHLLv2i32_shift %302:fpr64, 0
SU(7):   %309:gpr32common = nsw ADDWri %308:gpr32common, 1, 0
SU(3):   %306:fpr64 = SCVTFv1i64 %304.dsub:fpr128
SU(4):   %307:fpr64 = FADDDrr %299:fpr64, %306:fpr64
SU(5):   STRDui %307:fpr64, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
SU(8):   STRWui %309:gpr32common, %stack.3.step, 0 :: (store 4 into %ir.step)

********** MI Scheduling **********
main:%bb.65 for.end170
  From: %165:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: CBZW %166:gpr32, %bb.78
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %165:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%165
  Single Issue       : false;
SU(1):   %166:gpr32 = LDRWui %165:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%165
  Successors:
    ExitSU: Data Latency=4 Reg=%166
  Single Issue       : false;
ExitSU:   CBZW %166:gpr32, %bb.78
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%166
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %166:gpr32 = LDRWui %165:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %165:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   %165:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   %166:gpr32 = LDRWui %165:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.65 for.end170
  From: %151:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_33__none__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_33__none__
    To: BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp
 RegionInstrs: 29
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=9
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %146 %142 %149 %147 %150 
Live Out: %146 %142 %149 %147 %150 
Live Thru: FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %146
  UpdateRegP: SU(28) $d1 = COPY %146:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %142
  UpdateRegP: SU(27) $d0 = COPY %142:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %149
  UpdateRegP: SU(26) $w5 = COPY %149:gpr32
              to GPR32 -1
  LiveReg: %147
  UpdateRegP: SU(22) $w1 = COPY %147:gpr32
              to GPR32 -1
  LiveReg: %150
  UpdateRegP: SU(18) STRWui %150:gpr32, $sp, 2 :: (store 4 into stack + 8)
              to 
Top Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Bottom Pressure:
FPR8=4
GPR32=9
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Excess PSets: 
Cluster ld/st SU(17) - SU(15)
Cluster ld/st SU(13) - SU(11)
Cluster ld/st SU(9) - SU(7)
Cluster ld/st SU(5) - SU(3)
SU(0):   %151:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_33__none__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_33__none__
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%151
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %151:gpr64, $sp, 10 :: (store 8 into stack + 80)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%151
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %153:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_32__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_32__O3__mcmod
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%153
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %153:gpr64, $sp, 9 :: (store 8 into stack + 72)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%153
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %154:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_31__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_31__g__Wall__
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%154
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %154:gpr64, $sp, 8 :: (store 8 into stack + 64)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%154
  Successors:
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %155:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_30__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_30__I___commo
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%155
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %155:gpr64, $sp, 7 :: (store 8 into stack + 56)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%155
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %156:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_29__lm_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_29__lm_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%156
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %156:gpr64, $sp, 6 :: (store 8 into stack + 48)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%156
  Successors:
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %157:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_28___CC__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_28___CC__
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%157
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %157:gpr64, $sp, 5 :: (store 8 into stack + 40)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%157
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %158:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_27_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_27_gcc_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%158
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %158:gpr64, $sp, 4 :: (store 8 into stack + 32)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%158
  Successors:
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %159:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_26_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_26_03_Nov_201
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%159
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %159:gpr64, $sp, 3 :: (store 8 into stack + 24)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%159
    SU(17): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %160:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_25_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_25_3_3_1_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%160
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRXui %160:gpr64, $sp, 2 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%160
  Successors:
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   STRWui %150:gpr32, $sp, 2 :: (store 4 into stack + 8)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %161:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_24_____coll__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_24_____coll__
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%161
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   STRXui %161:gpr64, $sp, 0 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%161
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_23_UA_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_23_UA_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(22):   $w1 = COPY %147:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(23):   $w2 = MOVi32imm 7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(24):   $w3 = COPY $wzr
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(25):   $w4 = COPY $wzr
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(26):   $w5 = COPY %149:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(27):   $d0 = COPY %142:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(28):   $d1 = COPY %146:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
ExitSU:   BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=1 Artificial
    SU(22): Ord  Latency=0 Artificial
    SU(21): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 28 27 26 25 24 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 28 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(28) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(24) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(28) $d1 = COPY %146:fpr64
Bottom Pressure:
FPR8=3
GPR32=9
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 27 26 25 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(22) PHYS-REG                           
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(24) NOCAND                             
Pick Bot ORDER     
Scheduling SU(27) $d0 = COPY %142:fpr64
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 24 26 25 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(22) PHYS-REG                           
  Cand SU(24) ORDER                              
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(24) NOCAND                             
Pick Bot ORDER     
Scheduling SU(26) $w5 = COPY %149:gpr32
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 24 25 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(24) ORDER                              
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(24) NOCAND                             
Pick Bot ORDER     
Scheduling SU(25) $w4 = COPY $wzr
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(24) NOCAND                             
Pick Bot ORDER     
Scheduling SU(24) $w3 = COPY $wzr
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(22) $w1 = COPY %147:gpr32
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 23 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(20) STRXui %161:gpr64, $sp, 0 :: (store 8 into stack)
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %161
  UpdateRegP: SU(20) STRXui %161:gpr64, $sp, 0 :: (store 8 into stack)
              to 
  Ready @0c
  BotQ.A TopLatency SU(20) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 23 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 23 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(23) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(23) $w2 = MOVi32imm 7
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @1c
  BotQ.A BotLatency SU(23) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(15) STRXui %159:gpr64, $sp, 3 :: (store 8 into stack + 24)
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %159
  UpdateRegP: SU(15) STRXui %159:gpr64, $sp, 3 :: (store 8 into stack + 24)
              to 
  Ready @2c
  BotQ.A TopLatency SU(15) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 21 13 11 9 7 5 3 19 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(17) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(17) STRXui %160:gpr64, $sp, 2 :: (store 8 into stack + 16)
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %160
  UpdateRegP: SU(17) STRXui %160:gpr64, $sp, 2 :: (store 8 into stack + 16)
              to 
  Ready @3c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 13 11 9 7 5 3 19 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(11) STRXui %157:gpr64, $sp, 5 :: (store 8 into stack + 40)
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %157
  UpdateRegP: SU(11) STRXui %157:gpr64, $sp, 5 :: (store 8 into stack + 40)
              to 
  Ready @4c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 13 16 9 7 5 3 19 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(13) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(13) STRXui %158:gpr64, $sp, 4 :: (store 8 into stack + 32)
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %158
  UpdateRegP: SU(13) STRXui %158:gpr64, $sp, 4 :: (store 8 into stack + 32)
              to 
  Ready @5c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 10 16 9 7 5 3 19 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(21) $x0 = MOVaddr target-flags(aarch64-page) @ua__str_23_UA_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_23_UA_
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 9 7 5 3 19 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(7) STRXui %155:gpr64, $sp, 7 :: (store 8 into stack + 56)
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %155
  UpdateRegP: SU(7) STRXui %155:gpr64, $sp, 7 :: (store 8 into stack + 56)
              to 
  Ready @7c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 9 19 5 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(9) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(9) STRXui %156:gpr64, $sp, 6 :: (store 8 into stack + 48)
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %156
  UpdateRegP: SU(9) STRXui %156:gpr64, $sp, 6 :: (store 8 into stack + 48)
              to 
  Ready @8c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 19 5 3 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(19) %161:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_24_____coll__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_24_____coll__
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXui %153:gpr64, $sp, 9 :: (store 8 into stack + 72)
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %153
  UpdateRegP: SU(3) STRXui %153:gpr64, $sp, 9 :: (store 8 into stack + 72)
              to 
  Ready @10c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(5) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(5) STRXui %154:gpr64, $sp, 8 :: (store 8 into stack + 64)
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %154
  UpdateRegP: SU(5) STRXui %154:gpr64, $sp, 8 :: (store 8 into stack + 64)
              to 
  Ready @11c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(18) STRWui %150:gpr32, $sp, 2 :: (store 4 into stack + 8)
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 14 12 10 16 6 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %160:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_25_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_25_3_3_1_
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 14 12 10 2 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %151:gpr64, $sp, 10 :: (store 8 into stack + 80)
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %151
  UpdateRegP: SU(1) STRXui %151:gpr64, $sp, 10 :: (store 8 into stack + 80)
              to 
  Ready @14c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 14 12 10 2 6 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %159:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_26_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_26_03_Nov_201
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 12 10 2 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %158:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_27_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_27_gcc_
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 6 10 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 17c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %157:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_28___CC__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_28___CC__
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 18c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %156:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_29__lm_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_29__lm_
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 0 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 19c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %155:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_30__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_30__I___commo
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 20c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %154:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_31__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_31__g__Wall__
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 21c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %153:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_32__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_32__O3__mcmod
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %151:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_33__none__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_33__none__
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   %151:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_33__none__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_33__none__
SU(2):   %153:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_32__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_32__O3__mcmod
SU(4):   %154:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_31__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_31__g__Wall__
SU(6):   %155:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_30__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_30__I___commo
SU(8):   %156:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_29__lm_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_29__lm_
SU(10):   %157:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_28___CC__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_28___CC__
SU(12):   %158:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_27_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_27_gcc_
SU(14):   %159:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_26_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_26_03_Nov_201
SU(1):   STRXui %151:gpr64, $sp, 10 :: (store 8 into stack + 80)
SU(16):   %160:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_25_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_25_3_3_1_
SU(18):   STRWui %150:gpr32, $sp, 2 :: (store 4 into stack + 8)
SU(5):   STRXui %154:gpr64, $sp, 8 :: (store 8 into stack + 64)
SU(3):   STRXui %153:gpr64, $sp, 9 :: (store 8 into stack + 72)
SU(19):   %161:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_24_____coll__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_24_____coll__
SU(9):   STRXui %156:gpr64, $sp, 6 :: (store 8 into stack + 48)
SU(7):   STRXui %155:gpr64, $sp, 7 :: (store 8 into stack + 56)
SU(21):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_23_UA_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_23_UA_
SU(13):   STRXui %158:gpr64, $sp, 4 :: (store 8 into stack + 32)
SU(11):   STRXui %157:gpr64, $sp, 5 :: (store 8 into stack + 40)
SU(17):   STRXui %160:gpr64, $sp, 2 :: (store 8 into stack + 16)
SU(15):   STRXui %159:gpr64, $sp, 3 :: (store 8 into stack + 24)
SU(23):   $w2 = MOVi32imm 7
SU(20):   STRXui %161:gpr64, $sp, 0 :: (store 8 into stack)
SU(22):   $w1 = COPY %147:gpr32
SU(24):   $w3 = COPY $wzr
SU(25):   $w4 = COPY $wzr
SU(26):   $w5 = COPY %149:gpr32
SU(27):   $d0 = COPY %142:fpr64
SU(28):   $d1 = COPY %146:fpr64

********** MI Scheduling **********
main:%bb.65 for.end170
  From: %134:fpr64 = LDRDui %394:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
    To: ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 18
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: %394 
Live Out: %150 %149 %147 %146 %394 %142 
Live Thru: GPR32=1
  LiveReg: %150
  LiveReg: %149
  LiveReg: %147
  LiveReg: %146
  UpdateRegP: SU(13) STRDui %146:fpr64, %394:gpr64sp, 16 :: (store 8 into %ir.mflops)
              to GPR32 1
  LiveReg: %394
  UpdateRegP: SU(0) %134:fpr64 = LDRDui %394:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(8) %142:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(13) STRDui %146:fpr64, %394:gpr64sp, 16 :: (store 8 into %ir.mflops)
              to 
  LiveReg: %142
  UpdateRegP: SU(11) %145:fpr64 = FMULDrr %142:fpr64, %144:fpr64
              to 
Top Pressure:
GPR32=1
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Excess PSets: 
Cluster ld/st SU(0) - SU(8)
  Copy Succ SU(7)
SU(0):   %134:fpr64 = LDRDui %394:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(7): Data Latency=4 Reg=%134
    SU(8): Ord  Latency=0 Cluster
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %135:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=1 Reg=%135
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(2):   %136:gpr32 = LDRWui %135:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=%135
  Successors:
    SU(4): Data Latency=4 Reg=%136
  Pressure Diff      : GPR64temp 1
  Single Issue       : false;
SU(3):   %137:gpr32 = MOVi32imm 125
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=1 Reg=%137
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %138:gpr32common = MADDWrrr %136:gpr32, %137:gpr32, $wzr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%136
    SU(3): Data Latency=1 Reg=%137
  Successors:
    SU(5): Data Latency=1 Reg=%138
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   %139:gpr32common = ADDWri %138:gpr32common, 125, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=%138
  Successors:
    SU(6): Data Latency=1 Reg=%139
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %140:fpr64 = SCVTFUWDri %139:gpr32common
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%139
  Successors:
    SU(7): Data Latency=1 Reg=%140
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %141:fpr64 = FMULDrr %134:fpr64, %140:fpr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(6): Data Latency=1 Reg=%140
    SU(0): Data Latency=4 Reg=%134
    SU(8): Ord  Latency=0 Artificial
  Successors:
    SU(12): Data Latency=1 Reg=%141
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(8):   %142:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(11): Data Latency=4 Reg=%142
    SU(7): Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(9):   %143:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(10): Data Latency=1 Reg=%143
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(10):   %144:fpr64 = LDRDui %143:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(9): Data Latency=1 Reg=%143
  Successors:
    SU(11): Data Latency=4 Reg=%144
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(11):   %145:fpr64 = FMULDrr %142:fpr64, %144:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(10): Data Latency=4 Reg=%144
    SU(8): Data Latency=4 Reg=%142
  Successors:
    SU(12): Data Latency=1 Reg=%145
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %146:fpr64 = FDIVDrr %141:fpr64, %145:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%141
    SU(11): Data Latency=1 Reg=%145
  Successors:
    SU(13): Data Latency=1 Reg=%146
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(13):   STRDui %146:fpr64, %394:gpr64sp, 16 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%146
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %147:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   %148:gpr64temp = ADRP target-flags(aarch64-page) @niter
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(16): Data Latency=1 Reg=%148
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(16):   %149:gpr32 = LDRWui %148:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(15): Data Latency=1 Reg=%148
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1
  Single Issue       : false;
SU(17):   %150:gpr32 = LDRWui %stack.14.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(17): Ord  Latency=3 Artificial
    SU(16): Ord  Latency=3 Artificial
    SU(14): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 16 14 
Queue BotQ.A: 13 
Pick Bot ONLY1     
Scheduling SU(13) STRDui %146:fpr64, %394:gpr64sp, 16 :: (store 8 into %ir.mflops)
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
  BotQ.A TopLatency SU(13) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 16 14 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) %146:fpr64 = FDIVDrr %141:fpr64, %145:fpr64
Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %141
  UpdateRegP: SU(12) %146:fpr64 = FDIVDrr %141:fpr64, %145:fpr64
              to 
  LiveReg: %145
  UpdateRegP: SU(12) %146:fpr64 = FDIVDrr %141:fpr64, %145:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @1c
  BotQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 16 14 
Queue BotQ.A: 7 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 8 9 14 15 17 
BotQ.A RemLatency SU(7) 8c
BotQ.A RemLatency SU(16) 1c
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(11) REG-MAX                            
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(11) %145:fpr64 = FMULDrr %142:fpr64, %144:fpr64
Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %144
  UpdateRegP: SU(11) %145:fpr64 = FMULDrr %142:fpr64, %144:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 7 17 16 14 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 8 9 14 15 17 
BotQ.A RemLatency SU(7) 8c
BotQ.A RemLatency SU(10) 1c
  BotQ.A RemainingLatency 8 + 3c > CritPath 10
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(17) REG-MAX                            
  Cand SU(16) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(16) %149:gpr32 = LDRWui %148:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
Bottom Pressure:
GPR64temp=1
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %148
  UpdateRegP: SU(16) %149:gpr32 = LDRWui %148:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
              to GPR32 -1
  Ready @3c
  BotQ.A BotLatency SU(16) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 7 17 14 15 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 8 9 14 15 17 
BotQ.A RemLatency SU(7) 8c
BotQ.A RemLatency SU(10) 1c
  BotQ.A RemainingLatency 8 + 4c > CritPath 10
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(17) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(17) %150:gpr32 = LDRWui %stack.14.verified, 0 :: (dereferenceable load 4 from %ir.verified)
Bottom Pressure:
GPR64temp=1
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 7 15 14 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 8 9 14 15 
BotQ.A RemLatency SU(7) 8c
BotQ.A RemLatency SU(10) 1c
  BotQ.A RemainingLatency 8 + 5c > CritPath 10
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(15) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %148:gpr64temp = ADRP target-flags(aarch64-page) @niter
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @5c
  BotQ.A BotLatency SU(15) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 14 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 8 9 14 
BotQ.A RemLatency SU(7) 8c
  BotQ.A RemainingLatency 8 + 6c > CritPath 10
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(14) REG-MAX                            
  Cand SU(10) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %144:fpr64 = LDRDui %143:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %143
  UpdateRegP: SU(10) %144:fpr64 = LDRDui %143:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  BotQ.A BotLatency SU(10) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 14 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 8 9 14 
BotQ.A RemLatency SU(7) 8c
  BotQ.A RemainingLatency 8 + 7c > CritPath 10
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %141:fpr64 = FMULDrr %134:fpr64, %140:fpr64
Bottom Pressure:
GPR64temp=1
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %134
  UpdateRegP: SU(7) %141:fpr64 = FMULDrr %134:fpr64, %140:fpr64
              to 
  LiveReg: %140
  UpdateRegP: SU(7) %141:fpr64 = FMULDrr %134:fpr64, %140:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A TopLatency SU(7) 8c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 9 14 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 8 9 14 
BotQ.A RemLatency SU(6) 7c
  BotQ.A RemainingLatency 7 + 8c > CritPath 10
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(6) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %140:fpr64 = SCVTFUWDri %139:gpr32common
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %139
  UpdateRegP: SU(6) %140:fpr64 = SCVTFUWDri %139:gpr32common
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 9 14 8 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 8 9 14 
BotQ.A RemLatency SU(5) 6c
  BotQ.A RemainingLatency 6 + 9c > CritPath 10
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(5) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %139:gpr32common = ADDWri %138:gpr32common, 125, 0
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %138
  UpdateRegP: SU(5) %139:gpr32common = ADDWri %138:gpr32common, 125, 0
              to GPR32 -1
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 9 14 8 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 8 9 14 
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 5 + 10c > CritPath 10
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(14) %147:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 4 8 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 8 9 
  BotQ.A RemainingLatency 0 + 11c > CritPath 10
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(4) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(4) %138:gpr32common = MADDWrrr %136:gpr32, %137:gpr32, $wzr
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %136
  UpdateRegP: SU(4) %138:gpr32common = MADDWrrr %136:gpr32, %137:gpr32, $wzr
              to 
  LiveReg: %137
  UpdateRegP: SU(4) %138:gpr32common = MADDWrrr %136:gpr32, %137:gpr32, $wzr
              to GPR32 -1
  Ready @11c
  BotQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 9 0 8 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 8 9 
  BotQ.A RemainingLatency 0 + 12c > CritPath 10
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(9) %143:gpr64temp = ADRP target-flags(aarch64-page) %const.3
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @12c
  BotQ.A BotLatency SU(9) 7c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 3 0 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 8 
  BotQ.A RemainingLatency 0 + 13c > CritPath 10
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %142:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 14c > CritPath 10
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(0) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(0) %134:fpr64 = LDRDui %394:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
Bottom Pressure:
GPR32=3
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  BotQ.A RemainingLatency 0 + 15c > CritPath 10
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(2) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(2) %136:gpr32 = LDRWui %135:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
Bottom Pressure:
GPR64temp=1
GPR32=3
  LiveReg: %135
  UpdateRegP: SU(2) %136:gpr32 = LDRWui %135:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
              to GPR32 -1
  Ready @15c
  BotQ.A BotLatency SU(2) 9c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  BotQ.A RemainingLatency 0 + 16c > CritPath 10
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %137:gpr32 = MOVi32imm 125
Bottom Pressure:
GPR64temp=1
GPR32=2
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %135:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
Bottom Pressure:
GPR32=1
  Ready @17c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(1):   %135:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
SU(3):   %137:gpr32 = MOVi32imm 125
SU(2):   %136:gpr32 = LDRWui %135:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
SU(0):   %134:fpr64 = LDRDui %394:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
SU(8):   %142:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(9):   %143:gpr64temp = ADRP target-flags(aarch64-page) %const.3
SU(4):   %138:gpr32common = MADDWrrr %136:gpr32, %137:gpr32, $wzr
SU(14):   %147:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
SU(5):   %139:gpr32common = ADDWri %138:gpr32common, 125, 0
SU(6):   %140:fpr64 = SCVTFUWDri %139:gpr32common
SU(7):   %141:fpr64 = FMULDrr %134:fpr64, %140:fpr64
SU(10):   %144:fpr64 = LDRDui %143:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(15):   %148:gpr64temp = ADRP target-flags(aarch64-page) @niter
SU(17):   %150:gpr32 = LDRWui %stack.14.verified, 0 :: (dereferenceable load 4 from %ir.verified)
SU(16):   %149:gpr32 = LDRWui %148:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(11):   %145:fpr64 = FMULDrr %142:fpr64, %144:fpr64
SU(12):   %146:fpr64 = FDIVDrr %141:fpr64, %145:fpr64
SU(13):   STRDui %146:fpr64, %394:gpr64sp, 16 :: (store 8 into %ir.mflops)

********** MI Scheduling **********
main:%bb.65 for.end170
  From: $x0 = ADDXri %stack.12.Class, 0, 0
    To: BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.12.Class, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.14.verified, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = ADDXri %stack.14.verified, 0, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.12.Class, 0, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   $x0 = ADDXri %stack.12.Class, 0, 0
SU(1):   $x1 = ADDXri %stack.14.verified, 0, 0

********** MI Scheduling **********
main:%bb.65 for.end170
  From: %131:fpr64 = COPY killed $d0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %131:fpr64 = COPY killed $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%131
  Single Issue       : false;
SU(1):   STRDui %131:fpr64, %394:gpr64sp, 15 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%131
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %131:fpr64, %394:gpr64sp, 15 :: (store 8 into %ir.tmax)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %131:fpr64 = COPY killed $d0
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   %131:fpr64 = COPY killed $d0
SU(1):   STRDui %131:fpr64, %394:gpr64sp, 15 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.66 if.then179
  From: %167:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %167:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%167
  Single Issue       : false;
SU(1):   STRWui %167:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%167
  Single Issue       : false;
SU(2):   %224:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %224:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %167:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %167:gpr32 = MOVi32imm 1
  Ready @2c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   %167:gpr32 = MOVi32imm 1
SU(1):   STRWui %167:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
SU(2):   %224:gpr64sp = ADDXri %stack.16.trecs, 0, 0

********** MI Scheduling **********
main:%bb.67 for.cond180
  From: %168:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.69, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %168:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%168
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %168:gpr32common, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%168
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.69, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %168:gpr32common, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %168:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.67 ***
SU(0):   %168:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %168:gpr32common, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.68 for.body183
  From: %222:fpr64 = COPY killed $d0
    To: B %bb.67
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(1) - SU(3)
  Copy Succ SU(2)
  Copy Succ SU(5)
SU(0):   %222:fpr64 = COPY killed $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%222
  Single Issue       : false;
SU(1):   %223:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%223
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(2):   STRDroX %222:fpr64, %224:gpr64sp, %223:gpr64, 0, 1 :: (store 8 into %ir.arrayidx186)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%223
    SU(0): Data Latency=0 Reg=%222
    SU(3): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   %225:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(1): Ord  Latency=0 Cluster
  Successors:
    SU(4): Data Latency=4 Reg=%225
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   %226:gpr32common = nsw ADDWri %225:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%225
  Successors:
    SU(5): Data Latency=1 Reg=%226
  Single Issue       : false;
SU(5):   STRWui %226:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%226
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.67
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %222:fpr64 = COPY killed $d0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot ORDER     
Scheduling SU(5) STRWui %226:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %226:gpr32common = nsw ADDWri %225:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDroX %222:fpr64, %224:gpr64sp, %223:gpr64, 0, 1 :: (store 8 into %ir.arrayidx186)
  Ready @2c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %225:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %223:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.68 ***
SU(0):   %222:fpr64 = COPY killed $d0
SU(1):   %223:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(3):   %225:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(2):   STRDroX %222:fpr64, %224:gpr64sp, %223:gpr64, 0, 1 :: (store 8 into %ir.arrayidx186)
SU(4):   %226:gpr32common = nsw ADDWri %225:gpr32common, 1, 0
SU(5):   STRWui %226:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.69 for.end189
  From: %170:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
    To: Bcc 1, %bb.71, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %170:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%170
  Single Issue       : false;
SU(1):   FCMPDri %170:fpr64, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%170
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.71, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) FCMPDri %170:fpr64, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %170:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.69 ***
SU(0):   %170:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   FCMPDri %170:fpr64, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.70 if.then192
  From: %171:gpr64 = MOVi64imm 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %171:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%171
  Single Issue       : false;
SU(1):   STRXui %171:gpr64, %394:gpr64sp, 15 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%171
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %171:gpr64, %394:gpr64sp, 15 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %171:gpr64 = MOVi64imm 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.70 ***
SU(0):   %171:gpr64 = MOVi64imm 4607182418800017408
SU(1):   STRXui %171:gpr64, %394:gpr64sp, 15 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.71 if.end193
  From: %174:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %174:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%174
  Single Issue       : false;
SU(1):   STRWui %174:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%174
  Single Issue       : false;
SU(2):   %180:gpr64sp = ADDXri %stack.17.t_names, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %182:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %184:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=1 Reg=%184
  Single Issue       : false;
SU(5):   %185:fpr64 = LDRDui %184:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%184
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %182:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
BotQ.A RemLatency SU(1) 1c
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %180:gpr64sp = ADDXri %stack.17.t_names, 0, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %174:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @2c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 
Queue TopQ.P: 
Queue TopQ.A: 0 4 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %185:fpr64 = LDRDui %184:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A TopLatency SU(5) 1c
  BotQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 4 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %184:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %174:gpr32 = MOVi32imm 1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.71 ***
SU(0):   %174:gpr32 = MOVi32imm 1
SU(4):   %184:gpr64temp = ADRP target-flags(aarch64-page) %const.4
SU(5):   %185:fpr64 = LDRDui %184:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(1):   STRWui %174:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
SU(2):   %180:gpr64sp = ADDXri %stack.17.t_names, 0, 0
SU(3):   %182:gpr64sp = ADDXri %stack.16.trecs, 0, 0

********** MI Scheduling **********
main:%bb.72 for.cond195
  From: %175:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.78, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %175:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%175
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %175:gpr32common, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%175
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.78, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %175:gpr32common, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %175:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %175:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %175:gpr32common, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.73 for.body198
  From: %191:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.75, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %191:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%191
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %191:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%191
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.75, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %191:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %191:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   %191:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %191:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.73 for.body198
  From: $x0 = MOVaddr target-flags(aarch64-page) @ua__str_35_____10s__9, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_35_____10s__9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_35_____10s__9, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_35_____10s__9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %181:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %183:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %188:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %188:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %183:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = COPY %181:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ua__str_35_____10s__9, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_35_____10s__9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_35_____10s__9, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_35_____10s__9
SU(1):   $x1 = COPY %181:gpr64
SU(2):   $d0 = COPY %183:fpr64
SU(3):   $d1 = COPY %188:fpr64

********** MI Scheduling **********
main:%bb.73 for.body198
  From: %178:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %178:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=4 Reg=%178
  Single Issue       : false;
SU(1):   %179:gpr64 = UBFMXri %178:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%178
  Successors:
    SU(3): Data Latency=1 Reg=%179
    SU(2): Data Latency=1 Reg=%179
  Single Issue       : false;
SU(2):   %181:gpr64 = LDRXroX %180:gpr64sp, %179:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%179
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %183:fpr64 = LDRDroX %182:gpr64sp, %179:gpr64, 0, 0 :: (load 8 from %ir.arrayidx204)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%179
  Successors:
    SU(4): Data Latency=4 Reg=%183
  Single Issue       : false;
SU(4):   %186:fpr64 = FMULDrr %183:fpr64, %185:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%183
  Successors:
    SU(6): Data Latency=1 Reg=%186
  Single Issue       : false;
SU(5):   %187:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Data Latency=4 Reg=%187
  Single Issue       : false;
SU(6):   %188:fpr64 = FDIVDrr %186:fpr64, %187:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%186
    SU(5): Data Latency=4 Reg=%187
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %188:fpr64 = FDIVDrr %186:fpr64, %187:fpr64
  Ready @0c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 5 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %186:fpr64 = FMULDrr %183:fpr64, %185:fpr64
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 3 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %181:gpr64 = LDRXroX %180:gpr64sp, %179:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %187:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %183:fpr64 = LDRDroX %182:gpr64sp, %179:gpr64, 0, 0 :: (load 8 from %ir.arrayidx204)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %179:gpr64 = UBFMXri %178:gpr64, 61, 60
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %178:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @10c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   %178:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %179:gpr64 = UBFMXri %178:gpr64, 61, 60
SU(3):   %183:fpr64 = LDRDroX %182:gpr64sp, %179:gpr64, 0, 0 :: (load 8 from %ir.arrayidx204)
SU(5):   %187:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %181:gpr64 = LDRXroX %180:gpr64sp, %179:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
SU(4):   %186:fpr64 = FMULDrr %183:fpr64, %185:fpr64
SU(6):   %188:fpr64 = FDIVDrr %186:fpr64, %187:fpr64

********** MI Scheduling **********
main:%bb.74 if.then210
  From: $x0 = MOVaddr target-flags(aarch64-page) @ua__str_36__________1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_36__________1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_37_sub_convec, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_37_sub_convec
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %210:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %215:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %215:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %210:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @ua__str_37_sub_convec, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_37_sub_convec
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ua__str_36__________1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.74 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_36__________1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_37_sub_convec, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_37_sub_convec
SU(2):   $d0 = COPY %210:fpr64
SU(3):   $d1 = COPY %215:fpr64

********** MI Scheduling **********
main:%bb.74 if.then210
  From: %208:fpr64 = LDRDui %394:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx211)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(2)
SU(0):   %208:fpr64 = LDRDui %394:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx211)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%208
    SU(1): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(1):   %209:fpr64 = LDRDui %394:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%209
  Single Issue       : false;
SU(2):   %210:fpr64 = FSUBDrr %208:fpr64, %209:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%209
    SU(0): Data Latency=4 Reg=%208
  Successors:
    SU(4): Data Latency=1 Reg=%210
    SU(3): Data Latency=1 Reg=%210
  Single Issue       : false;
SU(3):   STRDui %210:fpr64, %394:gpr64sp, 11 :: (store 8 into %ir.t2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%210
  Single Issue       : false;
SU(4):   %213:fpr64 = FMULDrr %210:fpr64, %185:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%210
  Successors:
    SU(6): Data Latency=1 Reg=%213
  Single Issue       : false;
SU(5):   %214:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Data Latency=4 Reg=%214
  Single Issue       : false;
SU(6):   %215:fpr64 = FDIVDrr %213:fpr64, %214:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%213
    SU(5): Data Latency=4 Reg=%214
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %215:fpr64 = FDIVDrr %213:fpr64, %214:fpr64
  Ready @0c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %213:fpr64 = FMULDrr %210:fpr64, %185:fpr64
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %210:fpr64, %394:gpr64sp, 11 :: (store 8 into %ir.t2)
  Ready @2c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %210:fpr64 = FSUBDrr %208:fpr64, %209:fpr64
  Ready @3c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %214:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %209:fpr64 = LDRDui %394:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
  Ready @7c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %208:fpr64 = LDRDui %394:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx211)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.74 ***
SU(0):   %208:fpr64 = LDRDui %394:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx211)
SU(1):   %209:fpr64 = LDRDui %394:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
SU(5):   %214:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %210:fpr64 = FSUBDrr %208:fpr64, %209:fpr64
SU(3):   STRDui %210:fpr64, %394:gpr64sp, 11 :: (store 8 into %ir.t2)
SU(4):   %213:fpr64 = FMULDrr %210:fpr64, %185:fpr64
SU(6):   %215:fpr64 = FDIVDrr %213:fpr64, %214:fpr64

********** MI Scheduling **********
main:%bb.75 if.else217
  From: %193:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.77, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %193:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%193
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %193:gpr32common, 7, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%193
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.77, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %193:gpr32common, 7, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %193:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.75 ***
SU(0):   %193:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %193:gpr32common, 7, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.76 if.then220
  From: $x0 = MOVaddr target-flags(aarch64-page) @ua__str_36__________1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_36__________1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_38_sub_diffus, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_38_sub_diffus
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %199:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %204:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %204:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %199:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @ua__str_38_sub_diffus, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_38_sub_diffus
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ua__str_36__________1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.76 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ua__str_36__________1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ua__str_38_sub_diffus, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_38_sub_diffus
SU(2):   $d0 = COPY %199:fpr64
SU(3):   $d1 = COPY %204:fpr64

********** MI Scheduling **********
main:%bb.76 if.then220
  From: %195:fpr64 = LDRDui %394:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx221)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %394 %185 
Live Out: %204 %394 %199 %185 
Live Thru: FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %204
  LiveReg: %394
  UpdateRegP: SU(0) %195:fpr64 = LDRDui %394:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx221)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(1) %196:fpr64 = LDRDui %394:gpr64sp, 6 :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(3) %198:fpr64 = LDRDui %394:gpr64sp, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) STRDui %199:fpr64, %394:gpr64sp, 11 :: (store 8 into %ir.t2)
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  UpdateRegP: SU(7) %203:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %199
  UpdateRegP: SU(5) STRDui %199:fpr64, %394:gpr64sp, 11 :: (store 8 into %ir.t2)
              to 
  UpdateRegP: SU(6) %202:fpr64 = FMULDrr %199:fpr64, %185:fpr64
              to 
  LiveReg: %185
  UpdateRegP: SU(6) %202:fpr64 = FMULDrr %199:fpr64, %185:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Excess PSets: 
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(2)
SU(0):   %195:fpr64 = LDRDui %394:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx221)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%195
    SU(1): Ord  Latency=0 Cluster
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %196:fpr64 = LDRDui %394:gpr64sp, 6 :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%196
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(2):   %197:fpr64 = FSUBDrr %195:fpr64, %196:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%196
    SU(0): Data Latency=4 Reg=%195
  Successors:
    SU(4): Data Latency=1 Reg=%197
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(3):   %198:fpr64 = LDRDui %394:gpr64sp, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=4 Reg=%198
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %199:fpr64 = FSUBDrr %197:fpr64, %198:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%197
    SU(3): Data Latency=4 Reg=%198
  Successors:
    SU(6): Data Latency=1 Reg=%199
    SU(5): Data Latency=1 Reg=%199
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   STRDui %199:fpr64, %394:gpr64sp, 11 :: (store 8 into %ir.t2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%199
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %202:fpr64 = FMULDrr %199:fpr64, %185:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%199
  Successors:
    SU(8): Data Latency=1 Reg=%202
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %203:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Data Latency=4 Reg=%203
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %204:fpr64 = FDIVDrr %202:fpr64, %203:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%202
    SU(7): Data Latency=4 Reg=%203
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %204:fpr64 = FDIVDrr %202:fpr64, %203:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %202
  UpdateRegP: SU(8) %204:fpr64 = FDIVDrr %202:fpr64, %203:fpr64
              to 
  LiveReg: %203
  UpdateRegP: SU(8) %204:fpr64 = FDIVDrr %202:fpr64, %203:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @0c
  BotQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
BotQ.A RemLatency SU(5) 6c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %202:fpr64 = FMULDrr %199:fpr64, %185:fpr64
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRDui %199:fpr64, %394:gpr64sp, 11 :: (store 8 into %ir.t2)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @2c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %199:fpr64 = FSUBDrr %197:fpr64, %198:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %197
  UpdateRegP: SU(4) %199:fpr64 = FSUBDrr %197:fpr64, %198:fpr64
              to 
  LiveReg: %198
  UpdateRegP: SU(4) %199:fpr64 = FSUBDrr %197:fpr64, %198:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 4c > CritPath 7
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) %203:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %197:fpr64 = FSUBDrr %195:fpr64, %196:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %195
  UpdateRegP: SU(2) %197:fpr64 = FSUBDrr %195:fpr64, %196:fpr64
              to 
  LiveReg: %196
  UpdateRegP: SU(2) %197:fpr64 = FSUBDrr %195:fpr64, %196:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %198:fpr64 = LDRDui %394:gpr64sp, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 9c > CritPath 7
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %196:fpr64 = LDRDui %394:gpr64sp, 6 :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @9c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %195:fpr64 = LDRDui %394:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx221)
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.76 ***
SU(0):   %195:fpr64 = LDRDui %394:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx221)
SU(1):   %196:fpr64 = LDRDui %394:gpr64sp, 6 :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
SU(3):   %198:fpr64 = LDRDui %394:gpr64sp, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
SU(2):   %197:fpr64 = FSUBDrr %195:fpr64, %196:fpr64
SU(7):   %203:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(4):   %199:fpr64 = FSUBDrr %197:fpr64, %198:fpr64
SU(5):   STRDui %199:fpr64, %394:gpr64sp, 11 :: (store 8 into %ir.t2)
SU(6):   %202:fpr64 = FMULDrr %199:fpr64, %185:fpr64
SU(8):   %204:fpr64 = FDIVDrr %202:fpr64, %203:fpr64

********** MI Scheduling **********
main:%bb.77 for.inc231
  From: %219:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.72
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %219:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%219
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %220:gpr32common = nsw ADDWri %219:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%219
  Successors:
    SU(2): Data Latency=1 Reg=%220
  Single Issue       : false;
SU(2):   STRWui %220:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%220
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.72
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %220:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %220:gpr32common = nsw ADDWri %219:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %219:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.77 ***
SU(0):   %219:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %220:gpr32common = nsw ADDWri %219:gpr32common, 1, 0
SU(2):   STRWui %220:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)

********** INTERVALS **********
WSP [176r,176d:299)[256r,256d:298)[272r,272d:297)[288r,288d:296)[320r,320d:295)[832r,832d:294)[848r,848d:293)[856r,856d:292)[864r,864d:291)[896r,896d:290)[1008r,1008d:289)[1056r,1056d:288)[1072r,1072d:287)[1088r,1088d:286)[1120r,1120d:285)[1136r,1136d:284)[1216r,1216d:283)[1232r,1232d:282)[1248r,1248d:281)[1280r,1280d:280)[1376r,1376d:274)[1424r,1424d:273)[1440r,1440d:272)[1456r,1456d:271)[1488r,1488d:270)[1520r,1520d:269)[1616r,1616d:268)[1632r,1632d:267)[1648r,1648d:266)[1680r,1680d:265)[1760r,1760d:264)[1792r,1792d:263)[1808r,1808d:262)[1824r,1824d:261)[1856r,1856d:260)[1968r,1968d:259)[2064r,2064d:258)[2080r,2080d:257)[2096r,2096d:256)[2128r,2128d:255)[2208r,2208d:254)[2240r,2240d:253)[2256r,2256d:252)[2272r,2272d:251)[2304r,2304d:250)[2416r,2416d:249)[2512r,2512d:248)[2528r,2528d:247)[2544r,2544d:246)[2576r,2576d:245)[2656r,2656d:244)[2688r,2688d:243)[2704r,2704d:242)[2720r,2720d:241)[2752r,2752d:240)[2864r,2864d:239)[2960r,2960d:238)[2976r,2976d:237)[2992r,2992d:236)[3024r,3024d:235)[3136r,3136d:234)[3152r,3152d:233)[3168r,3168d:232)[3184r,3184d:231)[3216r,3216d:230)[3264r,3264d:279)[3312r,3312d:278)[3328r,3328d:277)[3344r,3344d:276)[3376r,3376d:275)[3632r,3632d:229)[3744r,3744d:228)[3760r,3760d:227)[3776r,3776d:226)[3808r,3808d:225)[3952r,3952d:224)[4032r,4032d:223)[4048r,4048d:222)[4064r,4064d:221)[4096r,4096d:220)[4144r,4144d:219)[4208r,4208d:218)[4224r,4224d:217)[4240r,4240d:216)[4272r,4272d:215)[4336r,4336d:214)[4416r,4416d:213)[4432r,4432d:212)[4448r,4448d:211)[4480r,4480d:210)[4528r,4528d:209)[4592r,4592d:208)[4608r,4608d:207)[4624r,4624d:206)[4656r,4656d:205)[4704r,4704d:204)[4768r,4768d:203)[4784r,4784d:202)[4800r,4800d:201)[4832r,4832d:200)[4848r,4848d:199)[4864r,4864d:198)[4880r,4880d:197)[4896r,4896d:196)[4928r,4928d:195)[5088r,5088d:4)[5120r,5120d:3)[5136r,5136d:2)[5152r,5152d:1)[5184r,5184d:0)[5360r,5360d:194)[5408r,5408d:193)[5424r,5424d:192)[5440r,5440d:191)[5472r,5472d:190)[5504r,5504d:189)[5520r,5520d:188)[5536r,5536d:187)[5552r,5552d:186)[5584r,5584d:185)[5632r,5632d:184)[5728r,5728d:183)[5744r,5744d:182)[5760r,5760d:181)[5792r,5792d:180)[5872r,5872d:179)[5968r,5968d:178)[5984r,5984d:177)[6000r,6000d:176)[6032r,6032d:175)[6048r,6048d:174)[6064r,6064d:173)[6080r,6080d:172)[6096r,6096d:171)[6128r,6128d:170)[6144r,6144d:169)[6160r,6160d:168)[6176r,6176d:167)[6192r,6192d:166)[6224r,6224d:165)[6240r,6240d:164)[6256r,6256d:163)[6272r,6272d:162)[6288r,6288d:161)[6320r,6320d:160)[6336r,6336d:159)[6352r,6352d:158)[6368r,6368d:157)[6384r,6384d:156)[6416r,6416d:155)[6480r,6480d:154)[6496r,6496d:153)[6512r,6512d:152)[6528r,6528d:151)[6560r,6560d:150)[6576r,6576d:149)[6592r,6592d:148)[6608r,6608d:147)[6624r,6624d:146)[6656r,6656d:145)[6672r,6672d:144)[6752r,6752d:143)[6768r,6768d:142)[6784r,6784d:141)[6816r,6816d:140)[6912r,6912d:139)[6960r,6960d:138)[6976r,6976d:137)[6992r,6992d:136)[7024r,7024d:135)[7056r,7056d:134)[7104r,7104d:133)[7120r,7120d:132)[7136r,7136d:131)[7168r,7168d:130)[7888r,7888d:84)[7952r,7952d:83)[7968r,7968d:82)[7984r,7984d:81)[8016r,8016d:80)[8288r,8288d:9)[8320r,8320d:8)[8336r,8336d:7)[8352r,8352d:6)[8384r,8384d:5)[8496r,8496d:79)[8528r,8528d:78)[8544r,8544d:77)[8560r,8560d:76)[8592r,8592d:75)[8640r,8640d:74)[8672r,8672d:73)[8688r,8688d:72)[8704r,8704d:71)[8736r,8736d:70)[8816r,8816d:69)[8848r,8848d:68)[8864r,8864d:67)[8880r,8880d:66)[8912r,8912d:65)[8944r,8944d:64)[8992r,8992d:63)[9008r,9008d:62)[9024r,9024d:61)[9056r,9056d:60)[9312r,9312d:14)[9360r,9360d:13)[9376r,9376d:12)[9392r,9392d:11)[9424r,9424d:10)[10688r,10688d:59)[10736r,10736d:58)[10752r,10752d:57)[10768r,10768d:56)[10800r,10800d:55)[10880r,10880d:54)[10912r,10912d:53)[10928r,10928d:52)[10944r,10944d:51)[10976r,10976d:50)[11456r,11456d:19)[11520r,11520d:18)[11536r,11536d:17)[11552r,11552d:16)[11584r,11584d:15)[11792r,11792d:49)[11856r,11856d:48)[11872r,11872d:47)[11888r,11888d:46)[11920r,11920d:45)[11952r,11952d:44)[11984r,11984d:43)[12000r,12000d:42)[12016r,12016d:41)[12048r,12048d:40)[12128r,12128d:39)[12160r,12160d:38)[12176r,12176d:37)[12192r,12192d:36)[12224r,12224d:35)[12272r,12272d:34)[12336r,12336d:33)[12352r,12352d:32)[12368r,12368d:31)[12400r,12400d:30)[12480r,12480d:29)[12512r,12512d:28)[12528r,12528d:27)[12544r,12544d:26)[12576r,12576d:25)[12976r,12976d:24)[13024r,13024d:23)[13040r,13040d:22)[13056r,13056d:21)[13088r,13088d:20)[13392r,13392d:129)[13440r,13440d:128)[13456r,13456d:127)[13472r,13472d:126)[13504r,13504d:125)[13520r,13520d:124)[13552r,13552d:123)[13568r,13568d:122)[13584r,13584d:121)[13616r,13616d:120)[13664r,13664d:119)[13744r,13744d:118)[13760r,13760d:117)[13776r,13776d:116)[13808r,13808d:115)[14128r,14128d:114)[14656r,14656d:113)[14672r,14672d:112)[14688r,14688d:111)[14720r,14720d:110)[14976r,14976d:89)[15008r,15008d:88)[15024r,15024d:87)[15040r,15040d:86)[15072r,15072d:85)[15344r,15344d:109)[15392r,15392d:108)[15408r,15408d:107)[15424r,15424d:106)[15456r,15456d:105)[15840r,15840d:104)[15920r,15920d:103)[15936r,15936d:102)[15952r,15952d:101)[15984r,15984d:100)[16200r,16200d:94)[16272r,16272d:93)[16288r,16288d:92)[16304r,16304d:91)[16336r,16336d:90)[16616r,16616d:99)[16688r,16688d:98)[16704r,16704d:97)[16720r,16720d:96)[16752r,16752d:95)  0@5184r 1@5152r 2@5136r 3@5120r 4@5088r 5@8384r 6@8352r 7@8336r 8@8320r 9@8288r 10@9424r 11@9392r 12@9376r 13@9360r 14@9312r 15@11584r 16@11552r 17@11536r 18@11520r 19@11456r 20@13088r 21@13056r 22@13040r 23@13024r 24@12976r 25@12576r 26@12544r 27@12528r 28@12512r 29@12480r 30@12400r 31@12368r 32@12352r 33@12336r 34@12272r 35@12224r 36@12192r 37@12176r 38@12160r 39@12128r 40@12048r 41@12016r 42@12000r 43@11984r 44@11952r 45@11920r 46@11888r 47@11872r 48@11856r 49@11792r 50@10976r 51@10944r 52@10928r 53@10912r 54@10880r 55@10800r 56@10768r 57@10752r 58@10736r 59@10688r 60@9056r 61@9024r 62@9008r 63@8992r 64@8944r 65@8912r 66@8880r 67@8864r 68@8848r 69@8816r 70@8736r 71@8704r 72@8688r 73@8672r 74@8640r 75@8592r 76@8560r 77@8544r 78@8528r 79@8496r 80@8016r 81@7984r 82@7968r 83@7952r 84@7888r 85@15072r 86@15040r 87@15024r 88@15008r 89@14976r 90@16336r 91@16304r 92@16288r 93@16272r 94@16200r 95@16752r 96@16720r 97@16704r 98@16688r 99@16616r 100@15984r 101@15952r 102@15936r 103@15920r 104@15840r 105@15456r 106@15424r 107@15408r 108@15392r 109@15344r 110@14720r 111@14688r 112@14672r 113@14656r 114@14128r 115@13808r 116@13776r 117@13760r 118@13744r 119@13664r 120@13616r 121@13584r 122@13568r 123@13552r 124@13520r 125@13504r 126@13472r 127@13456r 128@13440r 129@13392r 130@7168r 131@7136r 132@7120r 133@7104r 134@7056r 135@7024r 136@6992r 137@6976r 138@6960r 139@6912r 140@6816r 141@6784r 142@6768r 143@6752r 144@6672r 145@6656r 146@6624r 147@6608r 148@6592r 149@6576r 150@6560r 151@6528r 152@6512r 153@6496r 154@6480r 155@6416r 156@6384r 157@6368r 158@6352r 159@6336r 160@6320r 161@6288r 162@6272r 163@6256r 164@6240r 165@6224r 166@6192r 167@6176r 168@6160r 169@6144r 170@6128r 171@6096r 172@6080r 173@6064r 174@6048r 175@6032r 176@6000r 177@5984r 178@5968r 179@5872r 180@5792r 181@5760r 182@5744r 183@5728r 184@5632r 185@5584r 186@5552r 187@5536r 188@5520r 189@5504r 190@5472r 191@5440r 192@5424r 193@5408r 194@5360r 195@4928r 196@4896r 197@4880r 198@4864r 199@4848r 200@4832r 201@4800r 202@4784r 203@4768r 204@4704r 205@4656r 206@4624r 207@4608r 208@4592r 209@4528r 210@4480r 211@4448r 212@4432r 213@4416r 214@4336r 215@4272r 216@4240r 217@4224r 218@4208r 219@4144r 220@4096r 221@4064r 222@4048r 223@4032r 224@3952r 225@3808r 226@3776r 227@3760r 228@3744r 229@3632r 230@3216r 231@3184r 232@3168r 233@3152r 234@3136r 235@3024r 236@2992r 237@2976r 238@2960r 239@2864r 240@2752r 241@2720r 242@2704r 243@2688r 244@2656r 245@2576r 246@2544r 247@2528r 248@2512r 249@2416r 250@2304r 251@2272r 252@2256r 253@2240r 254@2208r 255@2128r 256@2096r 257@2080r 258@2064r 259@1968r 260@1856r 261@1824r 262@1808r 263@1792r 264@1760r 265@1680r 266@1648r 267@1632r 268@1616r 269@1520r 270@1488r 271@1456r 272@1440r 273@1424r 274@1376r 275@3376r 276@3344r 277@3328r 278@3312r 279@3264r 280@1280r 281@1248r 282@1232r 283@1216r 284@1136r 285@1120r 286@1088r 287@1072r 288@1056r 289@1008r 290@896r 291@864r 292@856r 293@848r 294@832r 295@320r 296@288r 297@272r 298@256r 299@176r
W0 [0B,12r:0)[224r,256r:51)[840r,848r:50)[1040r,1056r:49)[1184r,1216r:48)[1408r,1424r:46)[1608r,1616r:45)[1776r,1792r:44)[2056r,2064r:43)[2224r,2240r:42)[2504r,2512r:41)[2672r,2688r:40)[2952r,2960r:39)[3144r,3152r:38)[3296r,3312r:47)[4000r,4032r:37)[4176r,4208r:36)[4368r,4416r:35)[4560r,4592r:34)[4736r,4768r:33)[5104r,5120r:1)[5392r,5408r:15)[5680r,5728r:32)[5920r,5968r:31)[6720r,6752r:30)[6944r,6960r:14)[7088r,7104r:13)[7904r,7952r:23)[8304r,8320r:2)[8512r,8528r:9)[8656r,8672r:8)[8832r,8848r:7)[8960r,8992r:22)[9320r,9360r:16)[10704r,10736r:21)[10896r,10912r:6)[11508r,11520r:17)[11808r,11856r:20)[11968r,11984r:5)[12144r,12160r:4)[12288r,12336r:19)[12496r,12512r:3)[12992r,13024r:18)[13424r,13440r:12)[13536r,13552r:11)[13712r,13744r:29)[14528r,14656r:28)[14992r,15008r:10)[15376r,15392r:27)[15856r,15920r:26)[16208r,16272r:24)[16624r,16688r:25)  0@0B-phi 1@5104r 2@8304r 3@12496r 4@12144r 5@11968r 6@10896r 7@8832r 8@8656r 9@8512r 10@14992r 11@13536r 12@13424r 13@7088r 14@6944r 15@5392r 16@9320r 17@11508r 18@12992r 19@12288r 20@11808r 21@10704r 22@8960r 23@7904r 24@16208r 25@16624r 26@15856r 27@15376r 28@14528r 29@13712r 30@6720r 31@5920r 32@5680r 33@4736r 34@4560r 35@4368r 36@4176r 37@4000r 38@3144r 39@2952r 40@2672r 41@2504r 42@2224r 43@2056r 44@1776r 45@1608r 46@1408r 47@3296r 48@1184r 49@1040r 50@840r 51@224r
W1 [0B,8r:0)[240r,256r:26)[1200r,1216r:25)[1584r,1616r:24)[2032r,2064r:23)[2480r,2512r:22)[2928r,2960r:21)[4016r,4032r:11)[4192r,4208r:10)[4384r,4416r:9)[4576r,4592r:8)[5720r,5728r:7)[5960r,5968r:6)[6736r,6752r:5)[7944r,7952r:3)[8976r,8992r:16)[9328r,9360r:12)[10720r,10736r:15)[11512r,11520r:1)[11824r,11856r:14)[12304r,12336r:13)[13008r,13024r:2)[13728r,13744r:20)[14584r,14656r:4)[15872r,15920r:19)[16224r,16272r:17)[16640r,16688r:18)  0@0B-phi 1@11512r 2@13008r 3@7944r 4@14584r 5@6736r 6@5960r 7@5720r 8@4576r 9@4384r 10@4192r 11@4016r 12@9328r 13@12304r 14@11824r 15@10720r 16@8976r 17@16224r 18@16640r 19@15872r 20@13728r 21@2928r 22@2480r 23@2032r 24@1584r 25@1200r 26@240r
%0 [12r,96r:0)  0@12r weight:0.000000e+00
%1 [8r,112r:0)  0@8r weight:0.000000e+00
%6 [336r,368r:0)  0@336r weight:0.000000e+00
%7 [944r,976r:0)  0@944r weight:0.000000e+00
%9 [416r,600r:0)  0@416r weight:0.000000e+00
%10 [432r,600r:0)  0@432r weight:0.000000e+00
%11 [464r,664r:0)  0@464r weight:0.000000e+00
%12 [496r,660r:0)  0@496r weight:0.000000e+00
%13 [528r,696r:0)  0@528r weight:0.000000e+00
%14 [560r,692r:0)  0@560r weight:0.000000e+00
%15 [592r,728r:0)  0@592r weight:0.000000e+00
%16 [624r,724r:0)  0@624r weight:0.000000e+00
%17 [656r,800r:0)  0@656r weight:0.000000e+00
%18 [688r,792r:0)  0@688r weight:0.000000e+00
%19 [720r,824r:0)  0@720r weight:0.000000e+00
%20 [808r,816r:0)  0@808r weight:0.000000e+00
%21 [784r,880r:0)  0@784r weight:0.000000e+00
%27 [1296r,1328r:0)  0@1296r weight:0.000000e+00
%30 [3392r,3424r:0)  0@3392r weight:0.000000e+00
%31 [3408r,3424r:0)  0@3408r weight:0.000000e+00
%32 [3440r,3472r:0)  0@3440r weight:0.000000e+00
%33 [3456r,3472r:0)  0@3456r weight:0.000000e+00
%34 [3488r,3520r:0)  0@3488r weight:0.000000e+00
%35 [3504r,3520r:0)  0@3504r weight:0.000000e+00
%36 [3536r,3568r:0)  0@3536r weight:0.000000e+00
%37 [3552r,3568r:0)  0@3552r weight:0.000000e+00
%38 [3584r,3600r:0)  0@3584r weight:0.000000e+00
%41 [1504r,1664r:0)  0@1504r weight:0.000000e+00
%44 [1696r,1712r:0)  0@1696r weight:0.000000e+00
%45 [1744r,1840r:0)  0@1744r weight:0.000000e+00
%46 [1872r,1888r:0)  0@1872r weight:0.000000e+00
%48 [1952r,2112r:0)  0@1952r weight:0.000000e+00
%51 [2144r,2160r:0)  0@2144r weight:0.000000e+00
%52 [2192r,2288r:0)  0@2192r weight:0.000000e+00
%53 [2320r,2336r:0)  0@2320r weight:0.000000e+00
%55 [2400r,2560r:0)  0@2400r weight:0.000000e+00
%58 [2592r,2608r:0)  0@2592r weight:0.000000e+00
%59 [2640r,2736r:0)  0@2640r weight:0.000000e+00
%60 [2768r,2784r:0)  0@2768r weight:0.000000e+00
%62 [2848r,3008r:0)  0@2848r weight:0.000000e+00
%65 [3040r,3112r:0)  0@3040r weight:0.000000e+00
%66 [3120r,3128r:0)  0@3120r weight:0.000000e+00
%67 [3104r,3200r:0)  0@3104r weight:0.000000e+00
%69 [3648r,3688r:0)  0@3648r weight:0.000000e+00
%70 [3688r,3712r:0)  0@3688r weight:0.000000e+00
%71 [3680r,3696r:0)  0@3680r weight:0.000000e+00
%72 [3696r,3728r:0)  0@3696r weight:0.000000e+00
%73 [3824r,3904r:0)  0@3824r weight:0.000000e+00
%74 [3892r,3896r:0)  0@3892r weight:0.000000e+00
%75 [3872r,3888r:0)  0@3872r weight:0.000000e+00
%76 [3888r,3904r:0)  0@3888r weight:0.000000e+00
%77 [3904r,3936r:0)  0@3904r weight:0.000000e+00
%78 [3920r,4320r:0)  0@3920r weight:0.000000e+00
%82 [4112r,4128r:0)  0@4112r weight:0.000000e+00
%83 [4128r,4256r:0)  0@4128r weight:0.000000e+00
%86 [4288r,4304r:0)  0@4288r weight:0.000000e+00
%87 [4304r,4464r:0)  0@4304r weight:0.000000e+00
%88 [4320r,4464r:0)  0@4320r weight:0.000000e+00
%91 [4496r,4512r:0)  0@4496r weight:0.000000e+00
%92 [4512r,4640r:0)  0@4512r weight:0.000000e+00
%95 [4672r,4688r:0)  0@4672r weight:0.000000e+00
%96 [4688r,4816r:0)  0@4688r weight:0.000000e+00
%99 [4944r,4960r:0)  0@4944r weight:0.000000e+00
%100 [4992r,5008r:0)  0@4992r weight:0.000000e+00
%102 [5280r,5296r:0)  0@5280r weight:0.000000e+00
%103 [5296r,5312r:0)  0@5296r weight:0.000000e+00
%105 [5600r,5616r:0)  0@5600r weight:0.000000e+00
%106 [5616r,5776r:0)  0@5616r weight:0.000000e+00
%109 [5808r,5824r:0)  0@5808r weight:0.000000e+00
%110 [5824r,5840r:0)  0@5824r weight:0.000000e+00
%111 [5840r,5856r:0)  0@5840r weight:0.000000e+00
%112 [5856r,6016r:0)  0@5856r weight:0.000000e+00
%115 [6432r,6464r:0)  0@6432r weight:0.000000e+00
%119 [6832r,6848r:0)  0@6832r weight:0.000000e+00
%120 [6848r,6864r:0)  0@6848r weight:0.000000e+00
%122 [7096r,13376B:0)  0@7096r weight:0.000000e+00
%123 [7184r,13376B:0)  0@7184r weight:0.000000e+00
%126 [7696r,7728r:0)  0@7696r weight:0.000000e+00
%127 [7264r,13376B:0)  0@7264r weight:0.000000e+00
%128 [7712r,7728r:0)  0@7712r weight:0.000000e+00
%131 [13632r,13648r:0)  0@13632r weight:0.000000e+00
%134 [13880r,14064r:0)  0@13880r weight:0.000000e+00
%135 [13840r,13876r:0)  0@13840r weight:0.000000e+00
%136 [13876r,13976r:0)  0@13876r weight:0.000000e+00
%137 [13872r,13976r:0)  0@13872r weight:0.000000e+00
%138 [13976r,14052r:0)  0@13976r weight:0.000000e+00
%139 [14052r,14056r:0)  0@14052r weight:0.000000e+00
%140 [14056r,14064r:0)  0@14056r weight:0.000000e+00
%141 [14064r,14112r:0)  0@14064r weight:0.000000e+00
%142 [13952r,14704r:0)  0@13952r weight:0.000000e+00
%143 [13968r,14072r:0)  0@13968r weight:0.000000e+00
%144 [14072r,14104r:0)  0@14072r weight:0.000000e+00
%145 [14104r,14112r:0)  0@14104r weight:0.000000e+00
%146 [14112r,14704r:0)  0@14112r weight:0.000000e+00
%147 [14048r,14704r:0)  0@14048r weight:0.000000e+00
%148 [14080r,14100r:0)  0@14080r weight:0.000000e+00
%149 [14100r,14704r:0)  0@14100r weight:0.000000e+00
%150 [14096r,14704r:0)  0@14096r weight:0.000000e+00
%151 [14136r,14376r:0)  0@14136r weight:0.000000e+00
%153 [14176r,14440r:0)  0@14176r weight:0.000000e+00
%154 [14208r,14436r:0)  0@14208r weight:0.000000e+00
%155 [14240r,14456r:0)  0@14240r weight:0.000000e+00
%156 [14272r,14452r:0)  0@14272r weight:0.000000e+00
%157 [14304r,14536r:0)  0@14304r weight:0.000000e+00
%158 [14336r,14532r:0)  0@14336r weight:0.000000e+00
%159 [14368r,14552r:0)  0@14368r weight:0.000000e+00
%160 [14400r,14544r:0)  0@14400r weight:0.000000e+00
%161 [14448r,14576r:0)  0@14448r weight:0.000000e+00
%165 [14736r,14752r:0)  0@14736r weight:0.000000e+00
%166 [14752r,14768r:0)  0@14752r weight:0.000000e+00
%167 [14816r,14832r:0)  0@14816r weight:0.000000e+00
%168 [14880r,14896r:0)  0@14880r weight:0.000000e+00
%170 [15216r,15232r:0)  0@15216r weight:0.000000e+00
%171 [15296r,15312r:0)  0@15296r weight:0.000000e+00
%174 [15472r,15560r:0)  0@15472r weight:0.000000e+00
%175 [15648r,15664r:0)  0@15648r weight:0.000000e+00
%178 [15728r,15744r:0)  0@15728r weight:0.000000e+00
%179 [15744r,15812r:0)  0@15744r weight:0.000000e+00
%180 [15568r,16848B:0)  0@15568r weight:0.000000e+00
%181 [15812r,15968r:0)  0@15812r weight:0.000000e+00
%182 [15576r,16848B:0)  0@15576r weight:0.000000e+00
%183 [15776r,15968r:0)  0@15776r weight:0.000000e+00
%184 [15536r,15552r:0)  0@15536r weight:0.000000e+00
%185 [15552r,16848B:0)  0@15552r weight:0.000000e+00
%186 [15816r,15824r:0)  0@15816r weight:0.000000e+00
%187 [15808r,15824r:0)  0@15808r weight:0.000000e+00
%188 [15824r,15968r:0)  0@15824r weight:0.000000e+00
%191 [16000r,16016r:0)  0@16000r weight:0.000000e+00
%193 [16384r,16400r:0)  0@16384r weight:0.000000e+00
%195 [16464r,16520r:0)  0@16464r weight:0.000000e+00
%196 [16480r,16520r:0)  0@16480r weight:0.000000e+00
%197 [16520r,16584r:0)  0@16520r weight:0.000000e+00
%198 [16512r,16584r:0)  0@16512r weight:0.000000e+00
%199 [16584r,16736r:0)  0@16584r weight:0.000000e+00
%202 [16600r,16608r:0)  0@16600r weight:0.000000e+00
%203 [16576r,16608r:0)  0@16576r weight:0.000000e+00
%204 [16608r,16736r:0)  0@16608r weight:0.000000e+00
%208 [16080r,16168r:0)  0@16080r weight:0.000000e+00
%209 [16096r,16168r:0)  0@16096r weight:0.000000e+00
%210 [16168r,16320r:0)  0@16168r weight:0.000000e+00
%213 [16184r,16192r:0)  0@16184r weight:0.000000e+00
%214 [16160r,16192r:0)  0@16160r weight:0.000000e+00
%215 [16192r,16320r:0)  0@16192r weight:0.000000e+00
%219 [16784r,16800r:0)  0@16784r weight:0.000000e+00
%220 [16800r,16816r:0)  0@16800r weight:0.000000e+00
%221 [14960r,15056r:0)  0@14960r weight:0.000000e+00
%222 [15088r,15144r:0)  0@15088r weight:0.000000e+00
%223 [15104r,15144r:0)  0@15104r weight:0.000000e+00
%224 [14848r,15200B:0)  0@14848r weight:0.000000e+00
%225 [15136r,15152r:0)  0@15136r weight:0.000000e+00
%226 [15152r,15168r:0)  0@15152r weight:0.000000e+00
%227 [7792r,7808r:0)  0@7792r weight:0.000000e+00
%229 [7280r,13376B:0)  0@7280r weight:0.000000e+00
%230 [7872r,8000r:0)  0@7872r weight:0.000000e+00
%231 [7296r,13376B:0)  0@7296r weight:0.000000e+00
%236 [8112r,8128r:0)  0@8112r weight:0.000000e+00
%239 [8624r,8720r:0)  0@8624r weight:0.000000e+00
%240 [7328r,13376B:0)  0@7328r weight:0.000000e+00
%241 [8752r,8768r:0)  0@8752r weight:0.000000e+00
%246 [9120r,9152r:0)  0@9120r weight:0.000000e+00
%247 [7376r,13376B:0)  0@7376r weight:0.000000e+00
%248 [9136r,9152r:0)  0@9136r weight:0.000000e+00
%251 [9568r,9600r:0)  0@9568r weight:0.000000e+00
%253 [9584r,9600r:0)  0@9584r weight:0.000000e+00
%258 [10816r,10832r:0)  0@10816r weight:0.000000e+00
%261 [11056r,11088r:0)  0@11056r weight:0.000000e+00
%263 [11072r,11088r:0)  0@11072r weight:0.000000e+00
%265 [7568r,13376B:0)  0@7568r weight:0.000000e+00
%266 [11776r,11904r:0)  0@11776r weight:0.000000e+00
%269 [11936r,12032r:0)  0@11936r weight:0.000000e+00
%271 [12064r,12080r:0)  0@12064r weight:0.000000e+00
%274 [12256r,12384r:0)  0@12256r weight:0.000000e+00
%278 [12416r,12432r:0)  0@12416r weight:0.000000e+00
%281 [12608r,12676r:0)  0@12608r weight:0.000000e+00
%282 [7632r,13376B:0)  0@7632r weight:0.000000e+00
%283 [12624r,12676r:0)  0@12624r weight:0.000000e+00
%284 [12676r,12680r:0)  0@12676r weight:0.000000e+00
%285 [12672r,12688r:0)  0@12672r weight:0.000000e+00
%286 [12736r,12800r:0)  0@12736r weight:0.000000e+00
%287 [7648r,13376B:0)  0@7648r weight:0.000000e+00
%288 [12752r,12784r:0)  0@12752r weight:0.000000e+00
%289 [12768r,12784r:0)  0@12768r weight:0.000000e+00
%290 [12784r,12800r:0)  0@12784r weight:0.000000e+00
%293 [12864r,12896r:0)  0@12864r weight:0.000000e+00
%295 [12880r,12896r:0)  0@12880r weight:0.000000e+00
%297 [12960r,13072r:0)  0@12960r weight:0.000000e+00
%299 [13316r,13344r:0)  0@13316r weight:0.000000e+00
%302 [13200r,13320r:0)  0@13200r weight:0.000000e+00
%304 [13320r,13336r:0)  0@13320r weight:0.000000e+00
%306 [13336r,13344r:0)  0@13336r weight:0.000000e+00
%307 [13344r,13352r:0)  0@13344r weight:0.000000e+00
%308 [13312r,13328r:0)  0@13312r weight:0.000000e+00
%309 [13328r,13360r:0)  0@13328r weight:0.000000e+00
%311 [11200r,11216r:0)  0@11200r weight:0.000000e+00
%313 [11696r,11712r:0)  0@11696r weight:0.000000e+00
%314 [11712r,11728r:0)  0@11712r weight:0.000000e+00
%315 [11280r,11320r:0)  0@11280r weight:0.000000e+00
%317 [7520r,13376B:0)  0@7520r weight:0.000000e+00
%319 [7552r,13376B:0)  0@7552r weight:0.000000e+00
%320 [11320r,11328r:0)  0@11320r weight:0.000000e+00
%321 [11312r,11328r:0)  0@11312r weight:0.000000e+00
%322 [11328r,11344r:0)  0@11328r weight:0.000000e+00
%323 [11392r,11448r:0)  0@11392r weight:0.000000e+00
%328 [11448r,11568r:0)  0@11448r weight:0.000000e+00
%329 [11440r,11568r:0)  0@11440r weight:0.000000e+00
%331 [11616r,11632r:0)  0@11616r weight:0.000000e+00
%332 [11632r,11648r:0)  0@11632r weight:0.000000e+00
%334 [9712r,9728r:0)  0@9712r weight:0.000000e+00
%336 [10608r,10624r:0)  0@10608r weight:0.000000e+00
%337 [10624r,10640r:0)  0@10624r weight:0.000000e+00
%339 [9840r,9856r:0)  0@9840r weight:0.000000e+00
%341 [10528r,10544r:0)  0@10528r weight:0.000000e+00
%342 [10544r,10560r:0)  0@10544r weight:0.000000e+00
%344 [9968r,9984r:0)  0@9968r weight:0.000000e+00
%346 [10480r,10488r:0)  0@10480r weight:0.000000e+00
%347 [10488r,10496r:0)  0@10488r weight:0.000000e+00
%348 [10048r,10168r:0)  0@10048r weight:0.000000e+00
%351 [10168r,10272r:0)  0@10168r weight:0.000000e+00
%352 [7456r,13376B:0)  0@7456r weight:0.000000e+00
%353 [10184r,10276r:0)  0@10184r weight:0.000000e+00
%354 [10112r,10176r:0)  0@10112r weight:0.000000e+00
%356 [7472r,13376B:0)  0@7472r weight:0.000000e+00
%357 [10176r,10288r:0)  0@10176r weight:0.000000e+00
%358 [10276r,10400r:0)  0@10276r weight:0.000000e+00
%359 [10160r,10376r:0)  0@10160r weight:0.000000e+00
%360 [10376r,10392r:0)  0@10376r weight:0.000000e+00
%361 [10392r,10408r:0)  0@10392r weight:0.000000e+00
%362 [10400r,10448r:0)  0@10400r weight:0.000000e+00
%363 [10280r,10384r:0)  0@10280r weight:0.000000e+00
%364 [10384r,10448r:0)  0@10384r weight:0.000000e+00
%365 [10416r,10440r:0)  0@10416r weight:0.000000e+00
%367 [10272r,10288r:0)  0@10272r weight:0.000000e+00
%368 [10288r,10408r:0)  0@10288r weight:0.000000e+00
%369 [10408r,10424r:0)  0@10408r weight:0.000000e+00
%370 [10424r,10440r:0)  0@10424r weight:0.000000e+00
%371 [10440r,10448r:0)  0@10440r weight:0.000000e+00
%372 [10368r,10432r:0)  0@10368r weight:0.000000e+00
%373 [10432r,10456r:0)  0@10432r weight:0.000000e+00
%374 [9216r,9288r:0)  0@9216r weight:0.000000e+00
%376 [7392r,13376B:0)  0@7392r weight:0.000000e+00
%377 [9288r,9304r:0)  0@9288r weight:0.000000e+00
%378 [7424r,13376B:0)  0@7424r weight:0.000000e+00
%379 [9296r,9408r:0)  0@9296r weight:0.000000e+00
%381 [9304r,9408r:0)  0@9304r weight:0.000000e+00
%382 [7440r,13376B:0)  0@7440r weight:0.000000e+00
%383 [9280r,9408r:0)  0@9280r weight:0.000000e+00
%384 [9440r,9456r:0)  0@9440r weight:0.000000e+00
%385 [9456r,9472r:0)  0@9456r weight:0.000000e+00
%386 [8192r,8208r:0)  0@8192r weight:0.000000e+00
%388 [8272r,8368r:0)  0@8272r weight:0.000000e+00
%389 [8416r,8432r:0)  0@8416r weight:0.000000e+00
%390 [8432r,8448r:0)  0@8432r weight:0.000000e+00
%391 [5072r,5168r:0)  0@5072r weight:0.000000e+00
%392 [5200r,5216r:0)  0@5200r weight:0.000000e+00
%393 [5216r,5232r:0)  0@5216r weight:0.000000e+00
%394 [16r,16848B:0)  0@16r weight:0.000000e+00
RegMasks: 256r 848r 1056r 1216r 1424r 1616r 1792r 2064r 2240r 2512r 2688r 2960r 3152r 3312r 3744r 4032r 4208r 4416r 4592r 4768r 4864r 5120r 5408r 5520r 5728r 5968r 6064r 6160r 6256r 6352r 6496r 6592r 6752r 6960r 7104r 7952r 8320r 8528r 8672r 8848r 8992r 9360r 10736r 10912r 11520r 11856r 11984r 12160r 12336r 12512r 13024r 13440r 13552r 13744r 14656r 15008r 15392r 15920r 16272r 16688r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=1, align=4, at location [SP]
  fi#13: size=4, align=4, at location [SP]
  fi#14: size=4, align=4, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=88, align=16, at location [SP]
  fi#17: size=88, align=16, at location [SP]
  fi#18: size=8, align=8, at location [SP]
  fi#19: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: 5.000000e-01, align=8
  cp#1: 7.000000e+00, align=8
  cp#2: 4.000000e-02, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
Function Live Ins: $w0 in %0, $x1 in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $w0, $x1
8B	  %1:gpr64 = COPY $x1
12B	  %0:gpr32 = COPY $w0
16B	  %394:gpr64sp = ADDXri %stack.16.trecs, 0, 0
80B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
96B	  STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
112B	  STRXui %1:gpr64, %394:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
144B	  STRXui $xzr, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
160B	  STRWui $wzr, %stack.13.ifmortar, 0 :: (store 4 into %ir.ifmortar)
176B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
224B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_timer_flag
240B	  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_
256B	  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
272B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
288B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
304B	  PCN_STACKMAP 0, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
320B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
336B	  %6:gpr64 = COPY killed $x8
352B	  STRXui %6:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
368B	  CBZX %6:gpr64, %bb.2
384B	  B %bb.1

400B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

416B	  %9:gpr64temp = ADRP target-flags(aarch64-page) @timeron
432B	  %10:gpr32 = MOVi32imm 1
464B	  %11:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_2_total_
496B	  %12:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_3_init_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_3_init_
528B	  %13:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_4_convect_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_4_convect_
560B	  %14:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_5_transfb_c_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_5_transfb_c_
592B	  %15:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_6_diffusion_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_6_diffusion_
600B	  STRWui %10:gpr32, %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
624B	  %16:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_7_transf_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_7_transf_
656B	  %17:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_8_transfb_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_8_transfb_
660B	  STRXui %12:gpr64, %stack.17.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
664B	  STRXui %11:gpr64, %stack.17.t_names, 1 :: (store 8 into %ir.arrayidx)
688B	  %18:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_9_adaptation, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_9_adaptation
692B	  STRXui %14:gpr64, %stack.17.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
696B	  STRXui %13:gpr64, %stack.17.t_names, 3 :: (store 8 into %ir.arrayidx2)
720B	  %19:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_10_transf_b_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_10_transf_b_
724B	  STRXui %16:gpr64, %stack.17.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
728B	  STRXui %15:gpr64, %stack.17.t_names, 5 :: (store 8 into %ir.arrayidx4)
784B	  %21:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
792B	  STRXui %18:gpr64, %stack.17.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
800B	  STRXui %17:gpr64, %stack.17.t_names, 7 :: (store 8 into %ir.arrayidx6)
808B	  %20:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_11_add2_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_11_add2_
816B	  STRXui %20:gpr64, %stack.17.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
824B	  STRXui %19:gpr64, %stack.17.t_names, 9 :: (store 8 into %ir.arrayidx8)
832B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
840B	  $x0 = COPY %21:gpr64
848B	  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
856B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
864B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
880B	  PCN_STACKMAP 1, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %21:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
896B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
912B	  B %bb.3

928B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

944B	  %7:gpr64temp = ADRP target-flags(aarch64-page) @timeron
976B	  STRWui $wzr, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

992B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x50000000), %bb.11(0x30000000); %bb.4(62.50%), %bb.11(37.50%)

1008B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1040B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_12____NAS_Par, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_12____NAS_Par
1056B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
1072B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1088B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1104B	  PCN_STACKMAP 2, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
1120B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1136B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1184B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_13_inputua_da, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_13_inputua_da
1200B	  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_
1216B	  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
1232B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1248B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1264B	  PCN_STACKMAP 3, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
1280B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1296B	  %27:gpr64 = COPY killed $x8
1312B	  STRXui %27:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
1328B	  CBZX %27:gpr64, %bb.11
1344B	  B %bb.4

1360B	bb.4.if.then14:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1376B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1408B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_14__Reading_f, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_14__Reading_f
1424B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
1440B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1456B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1472B	  PCN_STACKMAP 4, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
1488B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1504B	  %41:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1520B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1584B	  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
1600B	  $x2 = MOVaddr target-flags(aarch64-page) @fre, target-flags(aarch64-pageoff, aarch64-nc) @fre
1608B	  $x0 = COPY %41:gpr64
1616B	  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
1632B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1648B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1664B	  PCN_STACKMAP 5, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %41:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
1680B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1696B	  %44:gpr32 = COPY killed $w8
1712B	  STRWui %44:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

1728B	bb.5.while.cond:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

1744B	  %45:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1760B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1776B	  $x0 = COPY %45:gpr64
1792B	  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
1808B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1824B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1840B	  PCN_STACKMAP 6, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %45:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
1856B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1872B	  %46:gpr32sp = COPY killed $w8
1888B	  dead $wzr = SUBSWri %46:gpr32sp, 10, 0, implicit-def $nzcv
1904B	  Bcc 1, %bb.5, implicit killed $nzcv
1920B	  B %bb.6

1936B	bb.6.while.end:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1952B	  %48:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1968B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2032B	  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
2048B	  $x2 = MOVaddr target-flags(aarch64-page) @niter, target-flags(aarch64-pageoff, aarch64-nc) @niter
2056B	  $x0 = COPY %48:gpr64
2064B	  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
2080B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2096B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2112B	  PCN_STACKMAP 7, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %48:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
2128B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2144B	  %51:gpr32 = COPY killed $w8
2160B	  STRWui %51:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

2176B	bb.7.while.cond20:
	; predecessors: %bb.6, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

2192B	  %52:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2208B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2224B	  $x0 = COPY %52:gpr64
2240B	  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
2256B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2272B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2288B	  PCN_STACKMAP 8, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %52:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
2304B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2320B	  %53:gpr32sp = COPY killed $w8
2336B	  dead $wzr = SUBSWri %53:gpr32sp, 10, 0, implicit-def $nzcv
2352B	  Bcc 1, %bb.7, implicit killed $nzcv
2368B	  B %bb.8

2384B	bb.8.while.end24:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2400B	  %55:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2416B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2480B	  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_15__d_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_
2496B	  $x2 = MOVaddr target-flags(aarch64-page) @nmxh, target-flags(aarch64-pageoff, aarch64-nc) @nmxh
2504B	  $x0 = COPY %55:gpr64
2512B	  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
2528B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2544B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2560B	  PCN_STACKMAP 9, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %55:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
2576B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2592B	  %58:gpr32 = COPY killed $w8
2608B	  STRWui %58:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

2624B	bb.9.while.cond26:
	; predecessors: %bb.8, %bb.9
	  successors: %bb.9(0x7c000000), %bb.10(0x04000000); %bb.9(96.88%), %bb.10(3.12%)

2640B	  %59:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2656B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2672B	  $x0 = COPY %59:gpr64
2688B	  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
2704B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2720B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2736B	  PCN_STACKMAP 10, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %59:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
2752B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2768B	  %60:gpr32sp = COPY killed $w8
2784B	  dead $wzr = SUBSWri %60:gpr32sp, 10, 0, implicit-def $nzcv
2800B	  Bcc 1, %bb.9, implicit killed $nzcv
2816B	  B %bb.10

2832B	bb.10.while.end30:
	; predecessors: %bb.9
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2848B	  %62:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2864B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2928B	  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_16__lf_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_16__lf_
2944B	  $x2 = MOVaddr target-flags(aarch64-page) @alpha, target-flags(aarch64-pageoff, aarch64-nc) @alpha
2952B	  $x0 = COPY %62:gpr64
2960B	  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
2976B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2992B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
3008B	  PCN_STACKMAP 11, 0, 0, %stack.12.Class, 0, 0, %stack.18.fp, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.19.result, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %62:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
3024B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3040B	  %65:gpr32 = COPY killed $w8
3104B	  %67:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
3112B	  STRWui %65:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
3120B	  %66:gpr32 = MOVi32imm 85
3128B	  STRBBui %66:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)
3136B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3144B	  $x0 = COPY %67:gpr64
3152B	  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
3168B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
3184B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
3200B	  PCN_STACKMAP 12, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %67:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
3216B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3232B	  B %bb.12

3248B	bb.11.if.else33:
	; predecessors: %bb.3
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3264B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3296B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_17__No_input_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_17__No_input_
3312B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
3328B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
3344B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
3360B	  PCN_STACKMAP 13, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
3376B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3392B	  %30:gpr64temp = ADRP target-flags(aarch64-page) @fre
3408B	  %31:gpr32 = MOVi32imm 5
3424B	  STRWui %31:gpr32, %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
3440B	  %32:gpr64temp = ADRP target-flags(aarch64-page) @niter
3456B	  %33:gpr32 = MOVi32imm 200
3472B	  STRWui %33:gpr32, %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
3488B	  %34:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
3504B	  %35:gpr32 = MOVi32imm 10
3520B	  STRWui %35:gpr32, %34:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
3536B	  %36:gpr64temp = ADRP target-flags(aarch64-page) @alpha
3552B	  %37:gpr64 = MOVi64imm 4590140797810047451
3568B	  STRXui %37:gpr64, %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
3584B	  %38:gpr32 = MOVi32imm 66
3600B	  STRBBui %38:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)

3616B	bb.12.if.end35:
	; predecessors: %bb.11, %bb.10
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3632B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3648B	  %69:gpr64temp = ADRP target-flags(aarch64-page) %const.0
3680B	  %71:gpr64temp = ADRP target-flags(aarch64-page) %const.1
3688B	  %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
3696B	  %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
3712B	  $d0 = COPY %70:fpr64
3728B	  $d1 = COPY %72:fpr64
3744B	  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
3760B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
3776B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
3792B	  PCN_STACKMAP 14, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
3808B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3824B	  %73:fpr64 = COPY killed $d0
3872B	  %75:gpr64temp = ADRP target-flags(aarch64-page) %const.2
3888B	  %76:fpr64 = LDRDui %75:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
3892B	  %74:gpr64temp = ADRP target-flags(aarch64-page) @dlmin
3896B	  STRDui %73:fpr64, %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
3904B	  %77:fpr64 = FMULDrr %73:fpr64, %76:fpr64
3920B	  %78:gpr64temp = ADRP target-flags(aarch64-page) @dtime
3936B	  STRDui %77:fpr64, %78:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
3952B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4000B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_18__Levels_of, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_18__Levels_of
4016B	  $w1 = MOVi32imm 7
4032B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
4048B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4064B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4080B	  PCN_STACKMAP 15, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
4096B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4112B	  %82:gpr64temp = ADRP target-flags(aarch64-page) @fre
4128B	  %83:gpr32 = LDRWui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
4144B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4176B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_19__Adaptatio, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_19__Adaptatio
4192B	  $w1 = COPY %83:gpr32
4208B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
4224B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4240B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4256B	  PCN_STACKMAP 16, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %83:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
4272B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4288B	  %86:gpr64temp = ADRP target-flags(aarch64-page) @niter
4304B	  %87:gpr32 = LDRWui %86:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
4320B	  %88:fpr64 = LDRDui %78:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
4336B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4368B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_20__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_20__Time_step
4384B	  $w1 = COPY %87:gpr32
4400B	  $d0 = COPY %88:fpr64
4416B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8
4432B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4448B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4464B	  PCN_STACKMAP 17, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %87:gpr32, %88:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
4480B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4496B	  %91:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
4512B	  %92:gpr32 = LDRWui %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
4528B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4560B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_21__CG_iterat, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_21__CG_iterat
4576B	  $w1 = COPY %92:gpr32
4592B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
4608B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4624B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4640B	  PCN_STACKMAP 18, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %92:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
4656B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4672B	  %95:gpr64temp = ADRP target-flags(aarch64-page) @alpha
4688B	  %96:fpr64 = LDRDui %95:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
4704B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4736B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_22__Heat_sour, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_22__Heat_sour
4752B	  $d0 = COPY %96:fpr64
4768B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w8
4784B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4800B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4816B	  PCN_STACKMAP 19, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %96:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
4832B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4848B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4864B	  BL @top_constants, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4880B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4896B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4912B	  PCN_STACKMAP 20, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
4928B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4944B	  %99:gpr32 = MOVi32imm 1
4960B	  STRWui %99:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)

4976B	bb.13.for.cond:
	; predecessors: %bb.12, %bb.14
	  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

4992B	  %100:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
5008B	  dead $wzr = SUBSWri %100:gpr32common, 10, 0, implicit-def $nzcv
5024B	  Bcc 12, %bb.15, implicit killed $nzcv
5040B	  B %bb.14

5056B	bb.14.for.body:
	; predecessors: %bb.13
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

5072B	  %391:gpr32 = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
5088B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5104B	  $w0 = COPY %391:gpr32
5120B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
5136B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5152B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5168B	  PCN_STACKMAP 21, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %391:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
5184B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5200B	  %392:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
5216B	  %393:gpr32common = nsw ADDWri %392:gpr32common, 1, 0
5232B	  STRWui %393:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
5248B	  B %bb.13

5264B	bb.15.for.end:
	; predecessors: %bb.13
	  successors: %bb.16(0x50000000), %bb.17(0x30000000); %bb.16(62.50%), %bb.17(37.50%)

5280B	  %102:gpr64temp = ADRP target-flags(aarch64-page) @timeron
5296B	  %103:gpr32 = LDRWui %102:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
5312B	  CBZW %103:gpr32, %bb.17
5328B	  B %bb.16

5344B	bb.16.if.then43:
	; predecessors: %bb.15
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

5360B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5392B	  $w0 = MOVi32imm 2
5408B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
5424B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5440B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5456B	  PCN_STACKMAP 22, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
5472B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

5488B	bb.17.if.end44:
	; predecessors: %bb.15, %bb.16
	  successors: %bb.18(0x50000000), %bb.19(0x30000000); %bb.18(62.50%), %bb.19(37.50%)

5504B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5520B	  BL @create_initial_grid, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
5536B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5552B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5568B	  PCN_STACKMAP 23, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
5584B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5600B	  %105:gpr64temp = ADRP target-flags(aarch64-page) @ntot
5616B	  %106:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
5632B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5680B	  $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
5712B	  $d0 = FMOVD0
5720B	  $w1 = COPY %106:gpr32
5728B	  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
5744B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5760B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5776B	  PCN_STACKMAP 24, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %106:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
5792B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5808B	  %109:gpr64temp = ADRP target-flags(aarch64-page) @nelt
5824B	  %110:gpr32 = LDRWui %109:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
5840B	  %111:gpr32 = ADDWrs %110:gpr32, %110:gpr32, 1
5856B	  %112:gpr32 = UBFMWri %111:gpr32, 29, 28
5872B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5920B	  $x0 = MOVaddr target-flags(aarch64-page) @sje, target-flags(aarch64-pageoff, aarch64-nc) @sje
5952B	  $w2 = MOVi32imm -1
5960B	  $w1 = COPY %112:gpr32
5968B	  BL @nr_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit-def $sp
5984B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6000B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6016B	  PCN_STACKMAP 25, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, %112:gpr32, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6032B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6048B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6064B	  BL @coef, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
6080B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6096B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6112B	  PCN_STACKMAP 26, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6128B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6144B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6160B	  BL @geom1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
6176B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6192B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6208B	  PCN_STACKMAP 27, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6224B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6240B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6256B	  BL @setdef, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
6272B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6288B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6304B	  PCN_STACKMAP 28, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6320B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6336B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6352B	  BL @setpcmo_pre, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
6368B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6384B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6400B	  PCN_STACKMAP 29, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6416B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6432B	  %115:gpr64temp = ADRP target-flags(aarch64-page) @time
6464B	  STRXui $xzr, %115:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
6480B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6496B	  BL @mortar, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
6512B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6544B	  PCN_STACKMAP 30, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6560B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6592B	  BL @prepwork, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
6608B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6624B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6640B	  PCN_STACKMAP 31, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6656B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6672B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6720B	  $x0 = ADDXri %stack.13.ifmortar, 0, 0
6736B	  $w1 = COPY $wzr
6752B	  BL @adaptation, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
6768B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6784B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6800B	  PCN_STACKMAP 32, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
6816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6832B	  %119:gpr64temp = ADRP target-flags(aarch64-page) @timeron
6848B	  %120:gpr32 = LDRWui %119:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
6864B	  CBZW %120:gpr32, %bb.19
6880B	  B %bb.18

6896B	bb.18.if.then47:
	; predecessors: %bb.17
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

6912B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6944B	  $w0 = MOVi32imm 2
6960B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
6976B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6992B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
7008B	  PCN_STACKMAP 33, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
7024B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

7040B	bb.19.if.end48:
	; predecessors: %bb.17, %bb.18
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

7056B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
7088B	  $w0 = MOVi32imm 1
7096B	  %122:gpr32 = MOVi32imm 1
7104B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
7120B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
7136B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
7152B	  PCN_STACKMAP 34, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
7168B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
7184B	  %123:gpr64temp = ADRP target-flags(aarch64-page) @time
7248B	  STRWui $wzr, %stack.3.step, 0 :: (store 4 into %ir.step)
7264B	  %127:gpr64temp = ADRP target-flags(aarch64-page) @niter
7280B	  %229:gpr64temp = ADRP target-flags(aarch64-page) @ntot
7296B	  %231:gpr64 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
7328B	  %240:gpr64temp = ADRP target-flags(aarch64-page) @timeron
7376B	  %247:gpr64temp = ADRP target-flags(aarch64-page) @nelt
7392B	  undef %376.sub_32:gpr64 = MOVi32imm 1000
7424B	  %378:gpr64 = MOVaddr target-flags(aarch64-page) @ta2, target-flags(aarch64-pageoff, aarch64-nc) @ta2
7440B	  %382:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
7456B	  %352:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
7472B	  undef %356.sub_32:gpr64 = MOVi32imm 200
7520B	  undef %317.sub_32:gpr64 = MOVi32imm 24
7552B	  %319:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
7568B	  %265:gpr64temp = ADRP target-flags(aarch64-page) @nmor
7576B	  STRXui $xzr, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
7632B	  %282:gpr64temp = ADRP target-flags(aarch64-page) @dtime
7648B	  %287:gpr64temp = ADRP target-flags(aarch64-page) @fre

7680B	bb.20.for.cond49:
	; predecessors: %bb.19, %bb.64
	  successors: %bb.21(0x7c000000), %bb.65(0x04000000); %bb.21(96.88%), %bb.65(3.12%)

7696B	  %126:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
7712B	  %128:gpr32 = LDRWui %127:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
7728B	  dead $wzr = SUBSWrr %126:gpr32, %128:gpr32, implicit-def $nzcv
7744B	  Bcc 12, %bb.65, implicit killed $nzcv
7760B	  B %bb.21

7776B	bb.21.for.body51:
	; predecessors: %bb.20
	  successors: %bb.22(0x40000000), %bb.28(0x40000000); %bb.22(50.00%), %bb.28(50.00%)

7792B	  %227:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
7808B	  dead $wzr = SUBSWri %227:gpr32common, 1, 0, implicit-def $nzcv
7824B	  Bcc 1, %bb.28, implicit killed $nzcv
7840B	  B %bb.22

7856B	bb.22.if.then53:
	; predecessors: %bb.21
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

7872B	  %230:gpr32 = LDRWui %229:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
7888B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
7904B	  $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
7936B	  $d0 = FMOVD0
7944B	  $w1 = COPY %230:gpr32
7952B	  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
7968B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
7984B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
8000B	  PCN_STACKMAP 35, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %230:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
8016B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
8048B	  STRXui $xzr, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
8064B	  STRXui $xzr, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
8080B	  STRWui %122:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)

8096B	bb.23.for.cond54:
	; predecessors: %bb.22, %bb.26
	  successors: %bb.24(0x7c000000), %bb.27(0x04000000); %bb.24(96.88%), %bb.27(3.12%)

8112B	  %236:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
8128B	  dead $wzr = SUBSWri %236:gpr32common, 10, 0, implicit-def $nzcv
8144B	  Bcc 12, %bb.27, implicit killed $nzcv
8160B	  B %bb.24

8176B	bb.24.for.body56:
	; predecessors: %bb.23
	  successors: %bb.25(0x40000000), %bb.26(0x40000000); %bb.25(50.00%), %bb.26(50.00%)

8192B	  %386:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
8208B	  dead $wzr = SUBSWri %386:gpr32common, 2, 0, implicit-def $nzcv
8224B	  Bcc 0, %bb.26, implicit killed $nzcv
8240B	  B %bb.25

8256B	bb.25.if.then58:
	; predecessors: %bb.24
	  successors: %bb.26(0x80000000); %bb.26(100.00%)

8272B	  %388:gpr32 = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
8288B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
8304B	  $w0 = COPY %388:gpr32
8320B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
8336B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
8352B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
8368B	  PCN_STACKMAP 36, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %388:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
8384B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

8400B	bb.26.for.inc60:
	; predecessors: %bb.24, %bb.25
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

8416B	  %389:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
8432B	  %390:gpr32common = nsw ADDWri %389:gpr32common, 1, 0
8448B	  STRWui %390:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
8464B	  B %bb.23

8480B	bb.27.for.end62:
	; predecessors: %bb.23
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

8496B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
8512B	  $w0 = MOVi32imm 1
8528B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
8544B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
8560B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
8576B	  PCN_STACKMAP 37, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
8592B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

8608B	bb.28.if.end63:
	; predecessors: %bb.21, %bb.27
	  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)

8624B	  %239:gpr32 = LDRWui %stack.13.ifmortar, 0 :: (dereferenceable load 4 from %ir.ifmortar)
8640B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
8656B	  $w0 = COPY %239:gpr32
8672B	  BL @convect, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
8688B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
8704B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
8720B	  PCN_STACKMAP 38, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %239:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
8736B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
8752B	  %241:gpr32 = LDRWui %240:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
8768B	  CBZW %241:gpr32, %bb.30
8784B	  B %bb.29

8800B	bb.29.if.then65:
	; predecessors: %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

8816B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
8832B	  $w0 = MOVi32imm 9
8848B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
8864B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
8880B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
8896B	  PCN_STACKMAP 39, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
8912B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

8928B	bb.30.if.end66:
	; predecessors: %bb.28, %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

8944B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
8960B	  $x0 = MOVaddr target-flags(aarch64-page) @tmort, target-flags(aarch64-pageoff, aarch64-nc) @tmort
8976B	  $x1 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
8992B	  BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
9008B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
9024B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
9040B	  PCN_STACKMAP 40, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
9056B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
9088B	  STRWui $wzr, %stack.4.ie, 0 :: (store 4 into %ir.ie)

9104B	bb.31.for.cond67:
	; predecessors: %bb.30, %bb.32
	  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

9120B	  %246:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
9136B	  %248:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
9152B	  dead $wzr = SUBSWrr %246:gpr32, %248:gpr32, implicit-def $nzcv
9168B	  Bcc 10, %bb.33, implicit killed $nzcv
9184B	  B %bb.32

9200B	bb.32.for.body69:
	; predecessors: %bb.31
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

9216B	  %374:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
9280B	  %383:gpr32 = LDRWroX %382:gpr64common, %374:gpr64, 0, 1 :: (load 4 from %ir.arrayidx75)
9288B	  %377:gpr64 = MADDXrrr %374:gpr64, %376:gpr64, $xzr
9296B	  %379:gpr64 = ADDXrr %378:gpr64, %377:gpr64
9304B	  %381:gpr64 = ADDXrr %231:gpr64, %377:gpr64
9312B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9320B	  $x0 = COPY %379:gpr64
9328B	  $x1 = COPY %381:gpr64
9344B	  $w2 = COPY %383:gpr32
9360B	  BL @laplacian, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
9376B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
9392B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
9408B	  PCN_STACKMAP 41, 0, 0, %stack.12.Class, 0, %379:gpr64, %381:gpr64, %379:gpr64, %381:gpr64, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %383:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
9424B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
9440B	  %384:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
9456B	  %385:gpr32common = nsw ADDWri %384:gpr32common, 1, 0
9472B	  STRWui %385:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
9488B	  B %bb.31

9504B	bb.33.for.end78:
	; predecessors: %bb.31
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

9536B	  STRWui $wzr, %stack.4.ie, 0 :: (store 4 into %ir.ie)

9552B	bb.34.for.cond79:
	; predecessors: %bb.33, %bb.44
	  successors: %bb.35(0x7c000000), %bb.45(0x04000000); %bb.35(96.88%), %bb.45(3.12%)

9568B	  %251:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
9584B	  %253:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
9600B	  dead $wzr = SUBSWrr %251:gpr32, %253:gpr32, implicit-def $nzcv
9616B	  Bcc 10, %bb.45, implicit killed $nzcv
9632B	  B %bb.35

9648B	bb.35.for.body81:
	; predecessors: %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

9680B	  STRWui $wzr, %stack.8.k, 0 :: (store 4 into %ir.k)

9696B	bb.36.for.cond82:
	; predecessors: %bb.35, %bb.43
	  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

9712B	  %334:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
9728B	  dead $wzr = SUBSWri %334:gpr32common, 4, 0, implicit-def $nzcv
9744B	  Bcc 12, %bb.44, implicit killed $nzcv
9760B	  B %bb.37

9776B	bb.37.for.body84:
	; predecessors: %bb.36
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

9808B	  STRWui $wzr, %stack.7.j, 0 :: (store 4 into %ir.j)

9824B	bb.38.for.cond85:
	; predecessors: %bb.37, %bb.42
	  successors: %bb.39(0x7c000000), %bb.43(0x04000000); %bb.39(96.88%), %bb.43(3.12%)

9840B	  %339:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
9856B	  dead $wzr = SUBSWri %339:gpr32common, 4, 0, implicit-def $nzcv
9872B	  Bcc 12, %bb.43, implicit killed $nzcv
9888B	  B %bb.39

9904B	bb.39.for.body87:
	; predecessors: %bb.38
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

9936B	  STRWui $wzr, %stack.6.i, 0 :: (store 4 into %ir.i)

9952B	bb.40.for.cond88:
	; predecessors: %bb.39, %bb.41
	  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)

9968B	  %344:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
9984B	  dead $wzr = SUBSWri %344:gpr32common, 4, 0, implicit-def $nzcv
10000B	  Bcc 12, %bb.42, implicit killed $nzcv
10016B	  B %bb.41

10032B	bb.41.for.body90:
	; predecessors: %bb.40
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

10048B	  %348:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
10112B	  %354:gpr64 = LDRSWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
10160B	  %359:gpr64 = LDRSWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
10168B	  %351:gpr64 = MADDXrrr %348:gpr64, %376:gpr64, $xzr
10176B	  %357:gpr64 = MADDXrrr %354:gpr64, %356:gpr64, $xzr
10184B	  %353:gpr64 = ADDXrr %352:gpr64, %351:gpr64
10272B	  %367:gpr64 = ADDXrr %378:gpr64, %351:gpr64
10276B	  %358:gpr64 = ADDXrr %353:gpr64, %357:gpr64
10280B	  %363:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
10288B	  %368:gpr64 = ADDXrr %367:gpr64, %357:gpr64
10368B	  %372:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
10376B	  %360:gpr64 = ADDXrs %359:gpr64, %359:gpr64, 2
10384B	  %364:gpr64 = UBFMXri %363:gpr64, 61, 60
10392B	  %361:gpr64 = UBFMXri %360:gpr64, 61, 60
10400B	  %362:gpr64common = ADDXrr %358:gpr64, %361:gpr64
10408B	  %369:gpr64common = ADDXrr %368:gpr64, %361:gpr64
10416B	  %365:fpr64 = LDRDroX %362:gpr64common, %364:gpr64, 0, 0 :: (load 8 from %ir.arrayidx98)
10424B	  %370:fpr64 = LDRDroX %369:gpr64common, %364:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
10432B	  %373:gpr32common = nsw ADDWri %372:gpr32common, 1, 0
10440B	  %371:fpr64 = FSUBDrr %365:fpr64, %370:fpr64
10448B	  STRDroX %371:fpr64, %362:gpr64common, %364:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
10456B	  STRWui %373:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
10464B	  B %bb.40

10472B	bb.42.for.inc118:
	; predecessors: %bb.40
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

10480B	  %346:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
10488B	  %347:gpr32common = nsw ADDWri %346:gpr32common, 1, 0
10496B	  STRWui %347:gpr32common, %stack.7.j, 0 :: (store 4 into %ir.j)
10504B	  B %bb.38

10512B	bb.43.for.inc121:
	; predecessors: %bb.38
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

10528B	  %341:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
10544B	  %342:gpr32common = nsw ADDWri %341:gpr32common, 1, 0
10560B	  STRWui %342:gpr32common, %stack.8.k, 0 :: (store 4 into %ir.k)
10576B	  B %bb.36

10592B	bb.44.for.inc124:
	; predecessors: %bb.36
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

10608B	  %336:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
10624B	  %337:gpr32common = nsw ADDWri %336:gpr32common, 1, 0
10640B	  STRWui %337:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
10656B	  B %bb.34

10672B	bb.45.for.end126:
	; predecessors: %bb.34
	  successors: %bb.46(0x50000000), %bb.47(0x30000000); %bb.46(62.50%), %bb.47(37.50%)

10688B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10704B	  $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
10720B	  $x1 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
10736B	  BL @transfb, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
10752B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
10768B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
10784B	  PCN_STACKMAP 42, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
10800B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10816B	  %258:gpr32 = LDRWui %240:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
10832B	  CBZW %258:gpr32, %bb.47
10848B	  B %bb.46

10864B	bb.46.if.then128:
	; predecessors: %bb.45
	  successors: %bb.47(0x80000000); %bb.47(100.00%)

10880B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10896B	  $w0 = MOVi32imm 9
10912B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
10928B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
10944B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
10960B	  PCN_STACKMAP 43, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
10976B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

10992B	bb.47.if.end129:
	; predecessors: %bb.45, %bb.46
	  successors: %bb.48(0x80000000); %bb.48(100.00%)

11024B	  STRWui $wzr, %stack.4.ie, 0 :: (store 4 into %ir.ie)

11040B	bb.48.for.cond130:
	; predecessors: %bb.47, %bb.54
	  successors: %bb.49(0x7c000000), %bb.55(0x04000000); %bb.49(96.88%), %bb.55(3.12%)

11056B	  %261:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
11072B	  %263:gpr32 = LDRWui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
11088B	  dead $wzr = SUBSWrr %261:gpr32, %263:gpr32, implicit-def $nzcv
11104B	  Bcc 10, %bb.55, implicit killed $nzcv
11120B	  B %bb.49

11136B	bb.49.for.body132:
	; predecessors: %bb.48
	  successors: %bb.50(0x80000000); %bb.50(100.00%)

11168B	  STRWui $wzr, %stack.5.iside, 0 :: (store 4 into %ir.iside)

11184B	bb.50.for.cond133:
	; predecessors: %bb.49, %bb.53
	  successors: %bb.51(0x7c000000), %bb.54(0x04000000); %bb.51(96.88%), %bb.54(3.12%)

11200B	  %311:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
11216B	  dead $wzr = SUBSWri %311:gpr32common, 5, 0, implicit-def $nzcv
11232B	  Bcc 12, %bb.54, implicit killed $nzcv
11248B	  B %bb.51

11264B	bb.51.for.body135:
	; predecessors: %bb.50
	  successors: %bb.52(0x30000000), %bb.53(0x50000000); %bb.52(37.50%), %bb.53(62.50%)

11280B	  %315:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
11312B	  %321:gpr64 = LDRSWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
11320B	  %320:gpr64common = MADDXrrr %315:gpr64, %317:gpr64, %319:gpr64
11328B	  %322:gpr32 = LDRWroX %320:gpr64common, %321:gpr64, 0, 1 :: (load 4 from %ir.arrayidx139)
11344B	  CBNZW %322:gpr32, %bb.53
11360B	  B %bb.52

11376B	bb.52.if.then141:
	; predecessors: %bb.51
	  successors: %bb.53(0x80000000); %bb.53(100.00%)

11392B	  %323:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
11440B	  %329:gpr32 = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
11448B	  %328:gpr64 = MADDXrrr %323:gpr64, %376:gpr64, %352:gpr64
11456B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
11504B	  $d0 = FMOVD0
11508B	  $x0 = COPY %328:gpr64
11512B	  $w1 = COPY %329:gpr32
11520B	  BL @facev, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
11536B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
11552B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
11568B	  PCN_STACKMAP 44, 0, 0, %stack.12.Class, 0, %328:gpr64, %328:gpr64, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %329:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
11584B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

11600B	bb.53.for.inc146:
	; predecessors: %bb.51, %bb.52
	  successors: %bb.50(0x80000000); %bb.50(100.00%)

11616B	  %331:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
11632B	  %332:gpr32common = nsw ADDWri %331:gpr32common, 1, 0
11648B	  STRWui %332:gpr32common, %stack.5.iside, 0 :: (store 4 into %ir.iside)
11664B	  B %bb.50

11680B	bb.54.for.inc149:
	; predecessors: %bb.50
	  successors: %bb.48(0x80000000); %bb.48(100.00%)

11696B	  %313:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
11712B	  %314:gpr32common = nsw ADDWri %313:gpr32common, 1, 0
11728B	  STRWui %314:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
11744B	  B %bb.48

11760B	bb.55.for.end151:
	; predecessors: %bb.48
	  successors: %bb.56(0x50000000), %bb.57(0x30000000); %bb.56(62.50%), %bb.57(37.50%)

11776B	  %266:gpr32 = LDRWui %265:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
11792B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
11808B	  $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
11824B	  $x1 = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
11840B	  $w2 = COPY %266:gpr32
11856B	  BL @col2, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
11872B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
11888B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
11904B	  PCN_STACKMAP 45, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %266:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
11920B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
11936B	  %269:gpr32 = LDRWui %stack.13.ifmortar, 0 :: (dereferenceable load 4 from %ir.ifmortar)
11952B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
11968B	  $w0 = COPY %269:gpr32
11984B	  BL @diffusion, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
12000B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
12016B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
12032B	  PCN_STACKMAP 46, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %269:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
12048B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
12064B	  %271:gpr32 = LDRWui %240:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
12080B	  CBZW %271:gpr32, %bb.57
12096B	  B %bb.56

12112B	bb.56.if.then153:
	; predecessors: %bb.55
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

12128B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
12144B	  $w0 = MOVi32imm 10
12160B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
12176B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
12192B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
12208B	  PCN_STACKMAP 47, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
12224B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

12240B	bb.57.if.end154:
	; predecessors: %bb.55, %bb.56
	  successors: %bb.58(0x50000000), %bb.59(0x30000000); %bb.58(62.50%), %bb.59(37.50%)

12256B	  %274:gpr32 = LDRWui %229:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
12272B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
12288B	  $x0 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
12304B	  $x1 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
12320B	  $w2 = COPY %274:gpr32
12336B	  BL @add2, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
12352B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
12368B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
12384B	  PCN_STACKMAP 48, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %274:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
12400B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
12416B	  %278:gpr32 = LDRWui %240:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
12432B	  CBZW %278:gpr32, %bb.59
12448B	  B %bb.58

12464B	bb.58.if.then156:
	; predecessors: %bb.57
	  successors: %bb.59(0x80000000); %bb.59(100.00%)

12480B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
12496B	  $w0 = MOVi32imm 10
12512B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
12528B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
12544B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
12560B	  PCN_STACKMAP 49, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
12576B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

12592B	bb.59.if.end157:
	; predecessors: %bb.57, %bb.58
	  successors: %bb.60(0x50000000), %bb.63(0x30000000); %bb.60(62.50%), %bb.63(37.50%)

12608B	  %281:fpr64 = LDRDui %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
12624B	  %283:fpr64 = LDRDui %282:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
12672B	  %285:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
12676B	  %284:fpr64 = FADDDrr %281:fpr64, %283:fpr64
12680B	  STRDui %284:fpr64, %123:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
12688B	  CBZW %285:gpr32, %bb.63
12704B	  B %bb.60

12720B	bb.60.land.lhs.true:
	; predecessors: %bb.59
	  successors: %bb.61(0x40000000), %bb.63(0x40000000); %bb.61(50.00%), %bb.63(50.00%)

12736B	  %286:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
12752B	  %288:gpr32 = LDRWui %287:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
12768B	  %289:gpr32 = SDIVWr %286:gpr32, %288:gpr32
12784B	  %290:gpr32 = nsw MADDWrrr %289:gpr32, %288:gpr32, $wzr
12800B	  dead $wzr = SUBSWrr %290:gpr32, %286:gpr32, implicit-def $nzcv
12816B	  Bcc 1, %bb.63, implicit killed $nzcv
12832B	  B %bb.61

12848B	bb.61.if.then161:
	; predecessors: %bb.60
	  successors: %bb.62(0x40000000), %bb.64(0x40000000); %bb.62(50.00%), %bb.64(50.00%)

12864B	  %293:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
12880B	  %295:gpr32 = LDRWui %127:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
12896B	  dead $wzr = SUBSWrr %293:gpr32, %295:gpr32, implicit-def $nzcv
12912B	  Bcc 0, %bb.64, implicit killed $nzcv
12928B	  B %bb.62

12944B	bb.62.if.then163:
	; predecessors: %bb.61
	  successors: %bb.64(0x80000000); %bb.64(100.00%)

12960B	  %297:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
12976B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
12992B	  $x0 = ADDXri %stack.13.ifmortar, 0, 0
13008B	  $w1 = COPY %297:gpr32
13024B	  BL @adaptation, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
13040B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
13056B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
13072B	  PCN_STACKMAP 50, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.4.ie, 0, 0, %stack.13.ifmortar, 0, 0, %stack.5.iside, 0, 0, %stack.7.j, 0, 0, %stack.8.k, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.3.step, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, %297:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
13088B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
13104B	  B %bb.64

13120B	bb.63.if.else165:
	; predecessors: %bb.59, %bb.60
	  successors: %bb.64(0x80000000); %bb.64(100.00%)

13152B	  STRWui $wzr, %stack.13.ifmortar, 0 :: (store 4 into %ir.ifmortar)

13168B	bb.64.if.end166:
	; predecessors: %bb.63, %bb.61, %bb.62
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

13200B	  undef %302.ssub:fpr64 = LDRSui %247:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
13312B	  %308:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
13316B	  %299:fpr64 = LDRDui %394:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
13320B	  %304:fpr128 = SSHLLv2i32_shift %302:fpr64, 0
13328B	  %309:gpr32common = nsw ADDWri %308:gpr32common, 1, 0
13336B	  %306:fpr64 = SCVTFv1i64 %304.dsub:fpr128
13344B	  %307:fpr64 = FADDDrr %299:fpr64, %306:fpr64
13352B	  STRDui %307:fpr64, %394:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
13360B	  STRWui %309:gpr32common, %stack.3.step, 0 :: (store 4 into %ir.step)
13368B	  B %bb.20

13376B	bb.65.for.end170:
	; predecessors: %bb.20
	  successors: %bb.66(0x50000000), %bb.78(0x30000000); %bb.66(62.50%), %bb.78(37.50%)

13392B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
13424B	  $w0 = MOVi32imm 1
13440B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
13456B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
13472B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
13488B	  PCN_STACKMAP 51, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
13504B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
13520B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
13536B	  $w0 = MOVi32imm 1
13552B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
13568B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
13584B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
13600B	  PCN_STACKMAP 52, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
13616B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
13632B	  %131:fpr64 = COPY killed $d0
13648B	  STRDui %131:fpr64, %394:gpr64sp, 15 :: (store 8 into %ir.tmax)
13664B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
13712B	  $x0 = ADDXri %stack.12.Class, 0, 0
13728B	  $x1 = ADDXri %stack.14.verified, 0, 0
13744B	  BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
13760B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
13776B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
13792B	  PCN_STACKMAP 53, 0, 0, %stack.12.Class, 0, 0, %stack.6.i, 0, 0, %stack.9.mflops, 0, 0, %stack.11.nelt_tot, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, 0, %stack.14.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
13808B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
13840B	  %135:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
13872B	  %137:gpr32 = MOVi32imm 125
13876B	  %136:gpr32 = LDRWui %135:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
13880B	  %134:fpr64 = LDRDui %394:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
13952B	  %142:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
13968B	  %143:gpr64temp = ADRP target-flags(aarch64-page) %const.3
13976B	  %138:gpr32common = MADDWrrr %136:gpr32, %137:gpr32, $wzr
14048B	  %147:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
14052B	  %139:gpr32common = ADDWri %138:gpr32common, 125, 0
14056B	  %140:fpr64 = SCVTFUWDri %139:gpr32common
14064B	  %141:fpr64 = FMULDrr %134:fpr64, %140:fpr64
14072B	  %144:fpr64 = LDRDui %143:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
14080B	  %148:gpr64temp = ADRP target-flags(aarch64-page) @niter
14096B	  %150:gpr32 = LDRWui %stack.14.verified, 0 :: (dereferenceable load 4 from %ir.verified)
14100B	  %149:gpr32 = LDRWui %148:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
14104B	  %145:fpr64 = FMULDrr %142:fpr64, %144:fpr64
14112B	  %146:fpr64 = FDIVDrr %141:fpr64, %145:fpr64
14120B	  STRDui %146:fpr64, %394:gpr64sp, 16 :: (store 8 into %ir.mflops)
14128B	  ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
14136B	  %151:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_33__none__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_33__none__
14176B	  %153:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_32__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_32__O3__mcmod
14208B	  %154:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_31__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_31__g__Wall__
14240B	  %155:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_30__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_30__I___commo
14272B	  %156:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_29__lm_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_29__lm_
14304B	  %157:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_28___CC__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_28___CC__
14336B	  %158:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_27_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_27_gcc_
14368B	  %159:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_26_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_26_03_Nov_201
14376B	  STRXui %151:gpr64, $sp, 10 :: (store 8 into stack + 80)
14400B	  %160:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_25_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_25_3_3_1_
14432B	  STRWui %150:gpr32, $sp, 2 :: (store 4 into stack + 8)
14436B	  STRXui %154:gpr64, $sp, 8 :: (store 8 into stack + 64)
14440B	  STRXui %153:gpr64, $sp, 9 :: (store 8 into stack + 72)
14448B	  %161:gpr64 = MOVaddr target-flags(aarch64-page) @ua__str_24_____coll__, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_24_____coll__
14452B	  STRXui %156:gpr64, $sp, 6 :: (store 8 into stack + 48)
14456B	  STRXui %155:gpr64, $sp, 7 :: (store 8 into stack + 56)
14528B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_23_UA_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_23_UA_
14532B	  STRXui %158:gpr64, $sp, 4 :: (store 8 into stack + 32)
14536B	  STRXui %157:gpr64, $sp, 5 :: (store 8 into stack + 40)
14544B	  STRXui %160:gpr64, $sp, 2 :: (store 8 into stack + 16)
14552B	  STRXui %159:gpr64, $sp, 3 :: (store 8 into stack + 24)
14568B	  $w2 = MOVi32imm 7
14576B	  STRXui %161:gpr64, $sp, 0 :: (store 8 into stack)
14584B	  $w1 = COPY %147:gpr32
14592B	  $w3 = COPY $wzr
14600B	  $w4 = COPY $wzr
14608B	  $w5 = COPY %149:gpr32
14624B	  $d0 = COPY %142:fpr64
14640B	  $d1 = COPY %146:fpr64
14656B	  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp
14672B	  ADJCALLSTACKUP 88, 0, implicit-def $sp, implicit $sp
14688B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
14704B	  PCN_STACKMAP 54, 0, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %147:gpr32, %149:gpr32, %142:fpr64, %146:fpr64, %150:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
14720B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
14736B	  %165:gpr64temp = ADRP target-flags(aarch64-page) @timeron
14752B	  %166:gpr32 = LDRWui %165:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
14768B	  CBZW %166:gpr32, %bb.78
14784B	  B %bb.66

14800B	bb.66.if.then179:
	; predecessors: %bb.65
	  successors: %bb.67(0x80000000); %bb.67(100.00%)

14816B	  %167:gpr32 = MOVi32imm 1
14832B	  STRWui %167:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
14848B	  %224:gpr64sp = ADDXri %stack.16.trecs, 0, 0

14864B	bb.67.for.cond180:
	; predecessors: %bb.66, %bb.68
	  successors: %bb.68(0x7c000000), %bb.69(0x04000000); %bb.68(96.88%), %bb.69(3.12%)

14880B	  %168:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
14896B	  dead $wzr = SUBSWri %168:gpr32common, 10, 0, implicit-def $nzcv
14912B	  Bcc 12, %bb.69, implicit killed $nzcv
14928B	  B %bb.68

14944B	bb.68.for.body183:
	; predecessors: %bb.67
	  successors: %bb.67(0x80000000); %bb.67(100.00%)

14960B	  %221:gpr32 = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
14976B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
14992B	  $w0 = COPY %221:gpr32
15008B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
15024B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
15040B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
15056B	  PCN_STACKMAP 55, 0, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %221:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
15072B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
15088B	  %222:fpr64 = COPY killed $d0
15104B	  %223:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
15136B	  %225:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
15144B	  STRDroX %222:fpr64, %224:gpr64sp, %223:gpr64, 0, 1 :: (store 8 into %ir.arrayidx186)
15152B	  %226:gpr32common = nsw ADDWri %225:gpr32common, 1, 0
15168B	  STRWui %226:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
15184B	  B %bb.67

15200B	bb.69.for.end189:
	; predecessors: %bb.67
	  successors: %bb.70(0x50000000), %bb.71(0x30000000); %bb.70(62.50%), %bb.71(37.50%)

15216B	  %170:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
15232B	  FCMPDri %170:fpr64, implicit-def $nzcv
15248B	  Bcc 1, %bb.71, implicit killed $nzcv
15264B	  B %bb.70

15280B	bb.70.if.then192:
	; predecessors: %bb.69
	  successors: %bb.71(0x80000000); %bb.71(100.00%)

15296B	  %171:gpr64 = MOVi64imm 4607182418800017408
15312B	  STRXui %171:gpr64, %394:gpr64sp, 15 :: (store 8 into %ir.tmax)

15328B	bb.71.if.end193:
	; predecessors: %bb.69, %bb.70
	  successors: %bb.72(0x80000000); %bb.72(100.00%)

15344B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
15376B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_34___SECTION_, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_34___SECTION_
15392B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
15408B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
15424B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
15440B	  PCN_STACKMAP 56, 0, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
15456B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
15472B	  %174:gpr32 = MOVi32imm 1
15536B	  %184:gpr64temp = ADRP target-flags(aarch64-page) %const.4
15552B	  %185:fpr64 = LDRDui %184:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
15560B	  STRWui %174:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
15568B	  %180:gpr64sp = ADDXri %stack.17.t_names, 0, 0
15576B	  %182:gpr64sp = ADDXri %stack.16.trecs, 0, 0

15632B	bb.72.for.cond195:
	; predecessors: %bb.71, %bb.77
	  successors: %bb.73(0x7c000000), %bb.78(0x04000000); %bb.73(96.88%), %bb.78(3.12%)

15648B	  %175:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
15664B	  dead $wzr = SUBSWri %175:gpr32common, 10, 0, implicit-def $nzcv
15680B	  Bcc 12, %bb.78, implicit killed $nzcv
15696B	  B %bb.73

15712B	bb.73.for.body198:
	; predecessors: %bb.72
	  successors: %bb.74(0x40000000), %bb.75(0x40000000); %bb.74(50.00%), %bb.75(50.00%)

15728B	  %178:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
15744B	  %179:gpr64 = UBFMXri %178:gpr64, 61, 60
15776B	  %183:fpr64 = LDRDroX %182:gpr64sp, %179:gpr64, 0, 0 :: (load 8 from %ir.arrayidx204)
15808B	  %187:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
15812B	  %181:gpr64 = LDRXroX %180:gpr64sp, %179:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
15816B	  %186:fpr64 = FMULDrr %183:fpr64, %185:fpr64
15824B	  %188:fpr64 = FDIVDrr %186:fpr64, %187:fpr64
15840B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
15856B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_35_____10s__9, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_35_____10s__9
15872B	  $x1 = COPY %181:gpr64
15888B	  $d0 = COPY %183:fpr64
15904B	  $d1 = COPY %188:fpr64
15920B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
15936B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
15952B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
15968B	  PCN_STACKMAP 57, 0, %188:fpr64, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %181:gpr64, %183:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
15984B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
16000B	  %191:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
16016B	  dead $wzr = SUBSWri %191:gpr32common, 4, 0, implicit-def $nzcv
16032B	  Bcc 1, %bb.75, implicit killed $nzcv
16048B	  B %bb.74

16064B	bb.74.if.then210:
	; predecessors: %bb.73
	  successors: %bb.77(0x80000000); %bb.77(100.00%)

16080B	  %208:fpr64 = LDRDui %394:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx211)
16096B	  %209:fpr64 = LDRDui %394:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
16160B	  %214:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
16168B	  %210:fpr64 = FSUBDrr %208:fpr64, %209:fpr64
16176B	  STRDui %210:fpr64, %394:gpr64sp, 11 :: (store 8 into %ir.t2)
16184B	  %213:fpr64 = FMULDrr %210:fpr64, %185:fpr64
16192B	  %215:fpr64 = FDIVDrr %213:fpr64, %214:fpr64
16200B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
16208B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_36__________1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1
16224B	  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_37_sub_convec, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_37_sub_convec
16240B	  $d0 = COPY %210:fpr64
16256B	  $d1 = COPY %215:fpr64
16272B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
16288B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
16304B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
16320B	  PCN_STACKMAP 58, 0, %215:fpr64, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %210:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
16336B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
16352B	  B %bb.77

16368B	bb.75.if.else217:
	; predecessors: %bb.73
	  successors: %bb.76(0x40000000), %bb.77(0x40000000); %bb.76(50.00%), %bb.77(50.00%)

16384B	  %193:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
16400B	  dead $wzr = SUBSWri %193:gpr32common, 7, 0, implicit-def $nzcv
16416B	  Bcc 1, %bb.77, implicit killed $nzcv
16432B	  B %bb.76

16448B	bb.76.if.then220:
	; predecessors: %bb.75
	  successors: %bb.77(0x80000000); %bb.77(100.00%)

16464B	  %195:fpr64 = LDRDui %394:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx221)
16480B	  %196:fpr64 = LDRDui %394:gpr64sp, 6 :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
16512B	  %198:fpr64 = LDRDui %394:gpr64sp, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
16520B	  %197:fpr64 = FSUBDrr %195:fpr64, %196:fpr64
16576B	  %203:fpr64 = LDRDui %394:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
16584B	  %199:fpr64 = FSUBDrr %197:fpr64, %198:fpr64
16592B	  STRDui %199:fpr64, %394:gpr64sp, 11 :: (store 8 into %ir.t2)
16600B	  %202:fpr64 = FMULDrr %199:fpr64, %185:fpr64
16608B	  %204:fpr64 = FDIVDrr %202:fpr64, %203:fpr64
16616B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
16624B	  $x0 = MOVaddr target-flags(aarch64-page) @ua__str_36__________1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1
16640B	  $x1 = MOVaddr target-flags(aarch64-page) @ua__str_38_sub_diffus, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_38_sub_diffus
16656B	  $d0 = COPY %199:fpr64
16672B	  $d1 = COPY %204:fpr64
16688B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
16704B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
16720B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
16736B	  PCN_STACKMAP 59, 0, %204:fpr64, 0, %stack.6.i, 0, 0, %stack.15.t2, 0, 0, %stack.17.t_names, 0, 0, %stack.10.tmax, 0, 0, %stack.16.trecs, 0, %199:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
16752B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

16768B	bb.77.for.inc231:
	; predecessors: %bb.75, %bb.76, %bb.74
	  successors: %bb.72(0x80000000); %bb.72(100.00%)

16784B	  %219:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
16800B	  %220:gpr32common = nsw ADDWri %219:gpr32common, 1, 0
16816B	  STRWui %220:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
16832B	  B %bb.72

16848B	bb.78.if.end234:
	; predecessors: %bb.65, %bb.72

16880B	  $w8 = COPY $wzr
16896B	  RET_ReallyLR implicit killed $w8

# End machine code for function main.

warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 20 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 20 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 20 across call to printf
Before post-MI-sched:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-56]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=4, align=4, at location [SP-68]
  fi#4: size=4, align=4, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-76]
  fi#6: size=4, align=4, at location [SP-80]
  fi#7: size=4, align=4, at location [SP-84]
  fi#8: size=4, align=4, at location [SP-88]
  fi#9: size=8, align=8, at location [SP-96]
  fi#10: size=8, align=8, at location [SP-104]
  fi#11: size=8, align=8, at location [SP-112]
  fi#12: size=1, align=4, at location [SP-116]
  fi#13: size=4, align=4, at location [SP-120]
  fi#14: size=4, align=4, at location [SP-124]
  fi#15: size=8, align=8, at location [SP-136]
  fi#16: size=88, align=16, at location [SP-224]
  fi#17: size=88, align=16, at location [SP-320]
  fi#18: size=8, align=8, at location [SP-328]
  fi#19: size=4, align=4, at location [SP-332]
  fi#20: size=8, align=8, at location [SP-344]
  fi#21: size=8, align=8, at location [SP-352]
  fi#22: size=8, align=8, at location [SP-360]
  fi#23: dead
  fi#24: dead
  fi#25: dead
  fi#26: dead
  fi#27: dead
  fi#28: dead
  fi#29: dead
  fi#30: dead
  fi#31: dead
  fi#32: dead
  fi#33: dead
  fi#34: dead
  fi#35: dead
  fi#36: dead
  fi#37: dead
  fi#38: dead
  fi#39: dead
  fi#40: dead
  fi#41: dead
  fi#42: dead
  fi#43: dead
  fi#44: size=8, align=8, at location [SP-40]
  fi#45: size=8, align=8, at location [SP-8]
  fi#46: size=8, align=8, at location [SP-16]
  fi#47: size=8, align=8, at location [SP-24]
  fi#48: size=8, align=8, at location [SP-32]
Constant Pool:
  cp#0: 5.000000e-01, align=8
  cp#1: 7.000000e+00, align=8
  cp#2: 4.000000e-02, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
Function Live Ins: $w0, $x1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 448, 0
  frame-setup STPXi killed $x20, killed $x19, $sp, 52 :: (store 8 into %stack.48), (store 8 into %stack.47)
  frame-setup STPXi killed $fp, killed $lr, $sp, 54 :: (store 8 into %stack.46), (store 8 into %stack.45)
  $fp = frame-setup ADDXri $sp, 432, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  $x8 = SUBXri $fp, 208, 0
  STPWi renamable $w0, $wzr, $fp, -10 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  STRXui killed renamable $x1, renamable $x8, 20 :: (store 8 into %ir.argv.addr)
  STRXui $xzr, killed renamable $x8, 14 :: (store 8 into %ir.nelt_tot)
  STURWi $wzr, $fp, -104 :: (store 4 into %ir.ifmortar)
  $x0 = ADRP target-flags(aarch64-page) @ua__str_timer_flag
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_timer_flag, 0
  $x1 = ADRP target-flags(aarch64-page) @ua__str_1_r_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_, 0
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  PCN_STACKMAP 0, 0, 0, $fp, -100, 0, $fp, -312, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -316, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  STRXui renamable $x8, $sp, 15 :: (store 8 into %ir.fp)
  CBZX killed renamable $x8, %bb.2

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  $w16 = MOVZWi 1, 0
  $x17 = ADRP target-flags(aarch64-page) @ua__str_2_total_
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_2_total_, 0
  $x18 = ADRP target-flags(aarch64-page) @ua__str_3_init_
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_3_init_, 0
  $x0 = ADRP target-flags(aarch64-page) @ua__str_4_convect_
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_4_convect_, 0
  $x1 = ADRP target-flags(aarch64-page) @ua__str_5_transfb_c_
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_5_transfb_c_, 0
  $x2 = ADRP target-flags(aarch64-page) @ua__str_6_diffusion_
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_6_diffusion_, 0
  STRWui killed renamable $w16, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  $x8 = ADRP target-flags(aarch64-page) @ua__str_7_transf_
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_7_transf_, 0
  $x16 = ADRP target-flags(aarch64-page) @ua__str_8_transfb_
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_8_transfb_, 0
  STPXi renamable $x17, renamable $x18, $sp, 17 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
  $x17 = ADRP target-flags(aarch64-page) @ua__str_9_adaptation
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_9_adaptation, 0
  STPXi renamable $x0, renamable $x1, $sp, 19 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
  $x18 = ADRP target-flags(aarch64-page) @ua__str_10_transf_b_
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_10_transf_b_, 0
  STPXi renamable $x2, renamable $x8, $sp, 21 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
  renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  STPXi renamable $x16, renamable $x17, $sp, 23 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
  $x8 = ADRP target-flags(aarch64-page) @ua__str_11_add2_
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_11_add2_, 0
  STPXi renamable $x18, renamable $x8, $sp, 25 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 1, 0, 0, $fp, -100, 0, $fp, -312, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -316, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  STRWui $wzr, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.11(0x30000000); %bb.4(62.50%), %bb.11(37.50%)

  $x0 = ADRP target-flags(aarch64-page) @ua__str_12____NAS_Par
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_12____NAS_Par, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 2, 0, 0, $fp, -100, 0, $fp, -312, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -316, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  $x0 = ADRP target-flags(aarch64-page) @ua__str_13_inputua_da
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_13_inputua_da, 0
  $x1 = ADRP target-flags(aarch64-page) @ua__str_1_r_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_, 0
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  PCN_STACKMAP 3, 0, 0, $fp, -100, 0, $fp, -312, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -316, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  STRXui renamable $x8, $sp, 15 :: (store 8 into %ir.fp)
  CBZX killed renamable $x8, %bb.11

bb.4.if.then14:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x0 = ADRP target-flags(aarch64-page) @ua__str_14__Reading_f
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_14__Reading_f, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 4, 0, 0, $fp, -100, 0, $fp, -312, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -316, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  $x1 = ADRP target-flags(aarch64-page) @ua__str_15__d_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_, 0
  $x2 = ADRP target-flags(aarch64-page) @fre
  $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @fre, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 5, 0, 0, $fp, -100, 0, $fp, -312, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -316, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  STRWui killed renamable $w8, $sp, 29 :: (store 4 into %ir.result)

bb.5.while.cond:
; predecessors: %bb.4, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 6, 0, 0, $fp, -100, 0, $fp, -312, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -316, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.5, implicit $nzcv

bb.6.while.end:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  $x1 = ADRP target-flags(aarch64-page) @ua__str_15__d_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_, 0
  $x2 = ADRP target-flags(aarch64-page) @niter
  $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @niter, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 7, 0, 0, $fp, -100, 0, $fp, -312, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -316, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  STRWui killed renamable $w8, $sp, 29 :: (store 4 into %ir.result)

bb.7.while.cond20:
; predecessors: %bb.6, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 8, 0, 0, $fp, -100, 0, $fp, -312, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -316, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.7, implicit $nzcv

bb.8.while.end24:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  $x1 = ADRP target-flags(aarch64-page) @ua__str_15__d_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_, 0
  $x2 = ADRP target-flags(aarch64-page) @nmxh
  $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @nmxh, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 9, 0, 0, $fp, -100, 0, $fp, -312, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -316, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  STRWui killed renamable $w8, $sp, 29 :: (store 4 into %ir.result)

bb.9.while.cond26:
; predecessors: %bb.8, %bb.9
  successors: %bb.9(0x7c000000), %bb.10(0x04000000); %bb.9(96.88%), %bb.10(3.12%)

  renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 10, 0, 0, $fp, -100, 0, $fp, -312, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -316, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.9, implicit $nzcv

bb.10.while.end30:
; predecessors: %bb.9
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  $x1 = ADRP target-flags(aarch64-page) @ua__str_16__lf_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_16__lf_, 0
  $x2 = ADRP target-flags(aarch64-page) @alpha
  $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @alpha, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 11, 0, 0, $fp, -100, 0, $fp, -312, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -316, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.18.fp), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.19.result, align 4), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  STRWui killed renamable $w8, $sp, 29 :: (store 4 into %ir.result)
  $w8 = MOVZWi 85, 0
  STURBBi killed renamable $w8, $fp, -100 :: (store 1 into %ir.Class, align 4)
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 12, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  B %bb.12

bb.11.if.else33:
; predecessors: %bb.3
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  $x0 = ADRP target-flags(aarch64-page) @ua__str_17__No_input_
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_17__No_input_, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 13, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @fre
  $w16 = MOVZWi 5, 0
  STRWui killed renamable $w16, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
  renamable $x8 = ADRP target-flags(aarch64-page) @niter
  $w16 = MOVZWi 200, 0
  STRWui killed renamable $w16, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
  renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
  $w16 = MOVZWi 10, 0
  STRWui killed renamable $w16, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
  renamable $x8 = ADRP target-flags(aarch64-page) @alpha
  $x16 = MOVZXi 63963, 0
  $x16 = MOVKXi $x16(tied-def 0), 27262, 16
  $x16 = MOVKXi $x16(tied-def 0), 29884, 32
  $x16 = MOVKXi $x16(tied-def 0), 16307, 48
  STRXui killed renamable $x16, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
  $w8 = MOVZWi 66, 0
  STURBBi killed renamable $w8, $fp, -100 :: (store 1 into %ir.Class, align 4)

bb.12.if.end35:
; predecessors: %bb.11, %bb.10
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  renamable $d1 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0
  PCN_STACKMAP 14, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  renamable $x8 = ADRP target-flags(aarch64-page) @dlmin
  STRDui renamable $d0, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  STRDui killed renamable $d0, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
  $x0 = ADRP target-flags(aarch64-page) @ua__str_18__Levels_of
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_18__Levels_of, 0
  $w1 = MOVZWi 7, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 15, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @fre
  renamable $w19 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  $x0 = ADRP target-flags(aarch64-page) @ua__str_19__Adaptatio
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_19__Adaptatio, 0
  $w1 = ORRWrs $wzr, $w19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 16, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @niter
  renamable $w19 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.20)
  $x0 = ADRP target-flags(aarch64-page) @ua__str_20__Time_step
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_20__Time_step, 0
  $w1 = ORRWrs $wzr, $w19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 17, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, killed renamable $w19, 1, 8, $fp, -328, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4), (load 8 from %stack.20)
  renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
  renamable $w19 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  $x0 = ADRP target-flags(aarch64-page) @ua__str_21__CG_iterat
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_21__CG_iterat, 0
  $w1 = ORRWrs $wzr, $w19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 18, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @alpha
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
  STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.20)
  $x0 = ADRP target-flags(aarch64-page) @ua__str_22__Heat_sour
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_22__Heat_sour, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 19, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, 1, 8, $fp, -328, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4), (load 8 from %stack.20)
  BL @top_constants, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 20, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  $w8 = MOVZWi 1, 0

bb.13.for.cond:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)
  liveins: $w8
  STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  $w8 = ORRWrs $wzr, killed renamable $w8, 0
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.15, implicit $nzcv

bb.14.for.body:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $w19 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  $w0 = ORRWrs $wzr, $w19, 0
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 21, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  B %bb.13

bb.15.for.end:
; predecessors: %bb.13
  successors: %bb.16(0x50000000), %bb.17(0x30000000); %bb.16(62.50%), %bb.17(37.50%)

  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.17

bb.16.if.then43:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  $w0 = MOVZWi 2, 0
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 22, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)

bb.17.if.end44:
; predecessors: %bb.15, %bb.16
  successors: %bb.18(0x50000000), %bb.19(0x30000000); %bb.18(62.50%), %bb.19(37.50%)

  BL @create_initial_grid, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 23, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  renamable $w19 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  $x0 = ADRP target-flags(aarch64-page) @ta1
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  $d0 = FMOVD0
  $w1 = ORRWrs $wzr, $w19, 0
  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  PCN_STACKMAP 24, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @nelt
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  renamable $w8 = ADDWrs killed renamable $w8, renamable $w8, 1
  renamable $w19 = UBFMWri killed renamable $w8, 29, 28
  $x0 = ADRP target-flags(aarch64-page) @sje
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sje, 0
  $w2 = MOVNWi 0, 0
  $w1 = ORRWrs $wzr, $w19, 0
  BL @nr_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp
  PCN_STACKMAP 25, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, killed renamable $w19, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  BL @coef, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 26, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  BL @geom1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 27, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  BL @setdef, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 28, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  BL @setpcmo_pre, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 29, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @time
  STRXui $xzr, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  BL @mortar, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 30, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  BL @prepwork, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 31, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  $x0 = SUBXri $fp, 104, 0
  $w1 = ORRWrs $wzr, $wzr, 0
  BL @adaptation, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  PCN_STACKMAP 32, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.19

bb.18.if.then47:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  $w0 = MOVZWi 2, 0
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 33, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)

bb.19.if.end48:
; predecessors: %bb.17, %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  $w0 = MOVZWi 1, 0
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 34, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @time
  STURWi $wzr, $fp, -52 :: (store 4 into %ir.step)
  $x19 = ADRP target-flags(aarch64-page) @trhs
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  $w20 = MOVZWi 200, 0, implicit-def $x20
  STRXui $xzr, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)

bb.20.for.cond49:
; predecessors: %bb.19, %bb.64
  successors: %bb.21(0x7c000000), %bb.65(0x04000000); %bb.21(96.88%), %bb.65(3.12%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  renamable $x16 = ADRP target-flags(aarch64-page) @niter
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 12, %bb.65, implicit $nzcv

bb.21.for.body51:
; predecessors: %bb.20
  successors: %bb.22(0x40000000), %bb.28(0x40000000); %bb.22(50.00%), %bb.28(50.00%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  dead $wzr = SUBSWri killed renamable $w8, 1, 0, implicit-def $nzcv
  Bcc 1, %bb.28, implicit $nzcv

bb.22.if.then53:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)
  liveins: $x19, $x20
  renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  renamable $w1 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  STRWui renamable $w1, $sp, 26 :: (store 4 into %stack.20)
  $x0 = ADRP target-flags(aarch64-page) @ta1
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  PCN_STACKMAP 35, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, 1, 4, $fp, -328, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4), (load 4 from %stack.20)
  renamable $x8 = ADRP target-flags(aarch64-page) @time
  STRXui $xzr, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  $x8 = SUBXri $fp, 208, 0
  STRXui $xzr, killed renamable $x8, 14 :: (store 8 into %ir.nelt_tot)
  $w8 = MOVZWi 1, 0

bb.23.for.cond54:
; predecessors: %bb.22, %bb.26
  successors: %bb.24(0x7c000000), %bb.27(0x04000000); %bb.24(96.88%), %bb.27(3.12%)
  liveins: $x19, $x20, $w8
  STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  $w8 = ORRWrs $wzr, killed renamable $w8, 0
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.27, implicit $nzcv

bb.24.for.body56:
; predecessors: %bb.23
  successors: %bb.25(0x40000000), %bb.26(0x40000000); %bb.25(50.00%), %bb.26(50.00%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 2, 0, implicit-def $nzcv
  Bcc 0, %bb.26, implicit $nzcv

bb.25.if.then58:
; predecessors: %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)
  liveins: $x19, $x20
  renamable $w0 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.20)
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 36, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, 1, 4, $fp, -328, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4), (load 4 from %stack.20)

bb.26.for.inc60:
; predecessors: %bb.24, %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  B %bb.23

bb.27.for.end62:
; predecessors: %bb.23
  successors: %bb.28(0x80000000); %bb.28(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 1, 0
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 37, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)

bb.28.if.end63:
; predecessors: %bb.21, %bb.27
  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)
  liveins: $x19, $x20
  renamable $w0 = LDURWi $fp, -104 :: (dereferenceable load 4 from %ir.ifmortar)
  STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.20)
  BL @convect, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 38, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, 1, 4, $fp, -328, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4), (load 4 from %stack.20)
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.30

bb.29.if.then65:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 9, 0
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 39, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)

bb.30.if.end66:
; predecessors: %bb.28, %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)
  liveins: $x19, $x20
  $x0 = ADRP target-flags(aarch64-page) @tmort
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tmort, 0
  $x1 = ADRP target-flags(aarch64-page) @ta1
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  PCN_STACKMAP 40, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  STURWi $wzr, $fp, -56 :: (store 4 into %ir.ie)

bb.31.for.cond67:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  $w1 = MOVZWi 1000, 0, implicit-def $x1
  $x3 = ADRP target-flags(aarch64-page) @ta2
  renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @ta2, 0
  Bcc 10, %bb.33, implicit $nzcv

bb.32.for.body69:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)
  liveins: $x1, $x3, $x19, $x20
  renamable $x8 = LDURSWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  $x16 = ADRP target-flags(aarch64-page) @size_e
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
  renamable $w2 = LDRWroX killed renamable $x16, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx75)
  STRWui renamable $w2, $sp, 22 :: (store 4 into %stack.22)
  renamable $x8 = MADDXrrr killed renamable $x8, killed renamable $x1, $xzr
  $x0 = ADDXrs killed renamable $x3, renamable $x8, 0
  $x16 = ADRP target-flags(aarch64-page) @ta1
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  $x1 = ADDXrs killed renamable $x16, killed renamable $x8, 0
  STPXi renamable $x1, renamable $x0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  BL @laplacian, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  PCN_STACKMAP 41, 0, 0, $fp, -100, 1, 8, $fp, -328, 1, 8, $fp, -336, 1, 8, $fp, -328, 1, 8, $fp, -336, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, 1, 4, $fp, -344, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4), (load 8 from %stack.20), (load 8 from %stack.21), (load 4 from %stack.22)
  renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -56 :: (store 4 into %ir.ie)
  B %bb.31

bb.33.for.end78:
; predecessors: %bb.31
  successors: %bb.34(0x80000000); %bb.34(100.00%)
  liveins: $x1, $x3, $x19, $x20
  STURWi $wzr, $fp, -56 :: (store 4 into %ir.ie)

bb.34.for.cond79:
; predecessors: %bb.33, %bb.44
  successors: %bb.35(0x7c000000), %bb.45(0x04000000); %bb.35(96.88%), %bb.45(3.12%)
  liveins: $x1, $x3, $x19, $x20
  renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.45, implicit $nzcv

bb.35.for.body81:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $x1, $x3, $x19, $x20
  STURWi $wzr, $fp, -72 :: (store 4 into %ir.k)

bb.36.for.cond82:
; predecessors: %bb.35, %bb.43
  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)
  liveins: $x1, $x3, $x19, $x20
  renamable $w8 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.44, implicit $nzcv

bb.37.for.body84:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)
  liveins: $x1, $x3, $x19, $x20
  STURWi $wzr, $fp, -68 :: (store 4 into %ir.j)

bb.38.for.cond85:
; predecessors: %bb.37, %bb.42
  successors: %bb.39(0x7c000000), %bb.43(0x04000000); %bb.39(96.88%), %bb.43(3.12%)
  liveins: $x1, $x3, $x19, $x20
  renamable $w8 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.43, implicit $nzcv

bb.39.for.body87:
; predecessors: %bb.38
  successors: %bb.40(0x80000000); %bb.40(100.00%)
  liveins: $x1, $x3, $x19, $x20
  STURWi $wzr, $fp, -64 :: (store 4 into %ir.i)

bb.40.for.cond88:
; predecessors: %bb.39, %bb.41
  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)
  liveins: $x1, $x3, $x19, $x20
  renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.42, implicit $nzcv

bb.41.for.body90:
; predecessors: %bb.40
  successors: %bb.40(0x80000000); %bb.40(100.00%)
  liveins: $x1, $x3, $x19, $x20
  renamable $x8 = LDURSWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  renamable $x16, renamable $x17 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  renamable $x8 = MADDXrrr killed renamable $x8, renamable $x1, $xzr
  renamable $x16 = MADDXrrr killed renamable $x16, renamable $x20, $xzr
  $x18 = ADDXrs renamable $x19, renamable $x8, 0
  $x8 = ADDXrs renamable $x3, killed renamable $x8, 0
  $x18 = ADDXrs killed renamable $x18, renamable $x16, 0
  renamable $x0 = LDURSWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  $x8 = ADDXrs killed renamable $x8, killed renamable $x16, 0
  renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  renamable $x17 = ADDXrs killed renamable $x17, renamable $x17, 2
  renamable $x0 = UBFMXri killed renamable $x0, 61, 60
  renamable $x17 = UBFMXri killed renamable $x17, 61, 60
  $x18 = ADDXrs killed renamable $x18, renamable $x17, 0
  $x8 = ADDXrs killed renamable $x8, killed renamable $x17, 0
  renamable $d0 = LDRDroX renamable $x18, renamable $x0, 0, 0 :: (load 8 from %ir.arrayidx98)
  renamable $d1 = LDRDroX killed renamable $x8, renamable $x0, 0, 0 :: (load 8 from %ir.arrayidx106)
  renamable $w8 = nsw ADDWri killed renamable $w16, 1, 0
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d1
  STRDroX killed renamable $d0, killed renamable $x18, killed renamable $x0, 0, 0 :: (store 8 into %ir.arrayidx114)
  STURWi killed renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  B %bb.40

bb.42.for.inc118:
; predecessors: %bb.40
  successors: %bb.38(0x80000000); %bb.38(100.00%)
  liveins: $x1, $x3, $x19, $x20
  renamable $w8 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.j)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -68 :: (store 4 into %ir.j)
  B %bb.38

bb.43.for.inc121:
; predecessors: %bb.38
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $x1, $x3, $x19, $x20
  renamable $w8 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.k)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -72 :: (store 4 into %ir.k)
  B %bb.36

bb.44.for.inc124:
; predecessors: %bb.36
  successors: %bb.34(0x80000000); %bb.34(100.00%)
  liveins: $x1, $x3, $x19, $x20
  renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -56 :: (store 4 into %ir.ie)
  B %bb.34

bb.45.for.end126:
; predecessors: %bb.34
  successors: %bb.46(0x50000000), %bb.47(0x30000000); %bb.46(62.50%), %bb.47(37.50%)
  liveins: $x19, $x20
  $x0 = ADRP target-flags(aarch64-page) @rmor
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  $x1 = ADRP target-flags(aarch64-page) @trhs
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  BL @transfb, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  PCN_STACKMAP 42, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.47

bb.46.if.then128:
; predecessors: %bb.45
  successors: %bb.47(0x80000000); %bb.47(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 9, 0
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 43, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)

bb.47.if.end129:
; predecessors: %bb.45, %bb.46
  successors: %bb.48(0x80000000); %bb.48(100.00%)
  liveins: $x19, $x20
  STURWi $wzr, $fp, -56 :: (store 4 into %ir.ie)
  $w17 = MOVZWi 24, 0, implicit-def $x17
  $x18 = ADRP target-flags(aarch64-page) @cbc
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0

bb.48.for.cond130:
; predecessors: %bb.47, %bb.54
  successors: %bb.49(0x7c000000), %bb.55(0x04000000); %bb.49(96.88%), %bb.55(3.12%)
  liveins: $x17, $x18, $x19, $x20
  renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.55, implicit $nzcv

bb.49.for.body132:
; predecessors: %bb.48
  successors: %bb.50(0x80000000); %bb.50(100.00%)
  liveins: $x17, $x18, $x19, $x20
  STURWi $wzr, $fp, -60 :: (store 4 into %ir.iside)

bb.50.for.cond133:
; predecessors: %bb.49, %bb.53
  successors: %bb.51(0x7c000000), %bb.54(0x04000000); %bb.51(96.88%), %bb.54(3.12%)
  liveins: $x17, $x18, $x19, $x20
  renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.iside)
  dead $wzr = SUBSWri killed renamable $w8, 5, 0, implicit-def $nzcv
  Bcc 12, %bb.54, implicit $nzcv

bb.51.for.body135:
; predecessors: %bb.50
  successors: %bb.52(0x30000000), %bb.53(0x50000000); %bb.52(37.50%), %bb.53(62.50%)
  liveins: $x17, $x18, $x19, $x20
  renamable $x16, renamable $x8 = LDPSWi $fp, -15 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
  renamable $x8 = MADDXrrr killed renamable $x8, renamable $x17, renamable $x18
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x16, 0, 1 :: (load 4 from %ir.arrayidx139)
  CBNZW killed renamable $w8, %bb.53

bb.52.if.then141:
; predecessors: %bb.51
  successors: %bb.53(0x80000000); %bb.53(100.00%)
  liveins: $x19, $x20
  renamable $w1, $w8 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
  $w8 = KILL $w8, implicit-def $x8
  $x8 = SBFMXri $x8, 0, 31
  STRWui renamable $w1, $sp, 24 :: (store 4 into %stack.21)
  $w16 = MOVZWi 1000, 0, implicit-def $x16
  renamable $x0 = MADDXrrr killed renamable $x8, killed renamable $x16, renamable $x19
  STRXui renamable $x0, $sp, 13 :: (store 8 into %stack.20)
  $d0 = FMOVD0
  BL @facev, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  $x18 = ADRP target-flags(aarch64-page) @cbc
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  PCN_STACKMAP 44, 0, 0, $fp, -100, 1, 8, $fp, -328, 1, 8, $fp, -328, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, 1, 4, $fp, -336, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4), (load 8 from %stack.20), (load 4 from %stack.21)
  $w17 = MOVZWi 24, 0, implicit-def $x17

bb.53.for.inc146:
; predecessors: %bb.51, %bb.52
  successors: %bb.50(0x80000000); %bb.50(100.00%)
  liveins: $x17, $x18, $x19, $x20
  renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.iside)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -60 :: (store 4 into %ir.iside)
  B %bb.50

bb.54.for.inc149:
; predecessors: %bb.50
  successors: %bb.48(0x80000000); %bb.48(100.00%)
  liveins: $x17, $x18, $x19, $x20
  renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -56 :: (store 4 into %ir.ie)
  B %bb.48

bb.55.for.end151:
; predecessors: %bb.48
  successors: %bb.56(0x50000000), %bb.57(0x30000000); %bb.56(62.50%), %bb.57(37.50%)
  liveins: $x19, $x20
  renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  STRWui renamable $w2, $sp, 26 :: (store 4 into %stack.20)
  $x0 = ADRP target-flags(aarch64-page) @rmor
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  $x1 = ADRP target-flags(aarch64-page) @tmmor
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0
  BL @col2, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  PCN_STACKMAP 45, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, 1, 4, $fp, -328, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4), (load 4 from %stack.20)
  renamable $w0 = LDURWi $fp, -104 :: (dereferenceable load 4 from %ir.ifmortar)
  STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.20)
  BL @diffusion, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 46, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, 1, 4, $fp, -328, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4), (load 4 from %stack.20)
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.57

bb.56.if.then153:
; predecessors: %bb.55
  successors: %bb.57(0x80000000); %bb.57(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 10, 0
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 47, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)

bb.57.if.end154:
; predecessors: %bb.55, %bb.56
  successors: %bb.58(0x50000000), %bb.59(0x30000000); %bb.58(62.50%), %bb.59(37.50%)
  liveins: $x19, $x20
  renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  STRWui renamable $w2, $sp, 26 :: (store 4 into %stack.20)
  $x0 = ADRP target-flags(aarch64-page) @ta1
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  $x1 = ADRP target-flags(aarch64-page) @t
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  BL @add2, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  PCN_STACKMAP 48, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, 1, 4, $fp, -328, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4), (load 4 from %stack.20)
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.59

bb.58.if.then156:
; predecessors: %bb.57
  successors: %bb.59(0x80000000); %bb.59(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 10, 0
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 49, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)

bb.59.if.end157:
; predecessors: %bb.57, %bb.58
  successors: %bb.60(0x50000000), %bb.63(0x30000000); %bb.60(62.50%), %bb.63(37.50%)
  liveins: $x19, $x20
  renamable $x16 = ADRP target-flags(aarch64-page) @time
  renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
  renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1
  STRDui killed renamable $d0, killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  CBZW killed renamable $w8, %bb.63

bb.60.land.lhs.true:
; predecessors: %bb.59
  successors: %bb.61(0x40000000), %bb.63(0x40000000); %bb.61(50.00%), %bb.63(50.00%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  renamable $x16 = ADRP target-flags(aarch64-page) @fre
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  renamable $w17 = SDIVWr renamable $w8, renamable $w16
  renamable $w16 = nsw MADDWrrr killed renamable $w17, killed renamable $w16, $wzr
  $wzr = SUBSWrs killed renamable $w16, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 1, %bb.63, implicit $nzcv

bb.61.if.then161:
; predecessors: %bb.60
  successors: %bb.62(0x40000000), %bb.64(0x40000000); %bb.62(50.00%), %bb.64(50.00%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  renamable $x16 = ADRP target-flags(aarch64-page) @niter
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 0, %bb.64, implicit $nzcv

bb.62.if.then163:
; predecessors: %bb.61
  successors: %bb.64(0x80000000); %bb.64(100.00%)
  liveins: $x19, $x20
  renamable $w1 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  STRWui renamable $w1, $sp, 26 :: (store 4 into %stack.20)
  $x0 = SUBXri $fp, 104, 0
  BL @adaptation, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  PCN_STACKMAP 50, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, 1, 4, $fp, -328, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4), (load 4 from %stack.20)
  B %bb.64

bb.63.if.else165:
; predecessors: %bb.59, %bb.60
  successors: %bb.64(0x80000000); %bb.64(100.00%)
  liveins: $x19, $x20
  STURWi $wzr, $fp, -104 :: (store 4 into %ir.ifmortar)

bb.64.if.end166:
; predecessors: %bb.63, %bb.61, %bb.62
  successors: %bb.20(0x80000000); %bb.20(100.00%)
  liveins: $x19, $x20
  renamable $x8 = ADRP target-flags(aarch64-page) @nelt
  renamable $s0 = LDRSui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nelt, implicit-def $d0 :: (dereferenceable load 4 from @nelt)
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  $x16 = SUBXri $fp, 208, 0
  renamable $d1 = LDRDui renamable $x16, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  renamable $q0 = SSHLLv2i32_shift killed renamable $d0, 0
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  renamable $d0 = SCVTFv1i64 renamable $d0, implicit killed $q0
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0
  STRDui killed renamable $d0, killed renamable $x16, 14 :: (store 8 into %ir.nelt_tot)
  STURWi killed renamable $w8, $fp, -52 :: (store 4 into %ir.step)
  B %bb.20

bb.65.for.end170:
; predecessors: %bb.20
  successors: %bb.66(0x50000000), %bb.78(0x30000000); %bb.66(62.50%), %bb.78(37.50%)

  $w0 = MOVZWi 1, 0
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 51, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -80, 0, $fp, -96, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  $w0 = MOVZWi 1, 0
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  PCN_STACKMAP 52, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -80, 0, $fp, -96, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  $x19 = SUBXri $fp, 208, 0
  STRDui killed renamable $d0, renamable $x19, 15 :: (store 8 into %ir.tmax)
  $x0 = SUBXri $fp, 100, 0
  $x1 = SUBXri $fp, 108, 0
  BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  PCN_STACKMAP 53, 0, 0, $fp, -100, 0, $fp, -64, 0, $fp, -80, 0, $fp, -96, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
  $w16 = MOVZWi 125, 0
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  renamable $d0, renamable $d2 = LDPDi renamable $x19, 14 :: (dereferenceable load 8 from %ir.nelt_tot), (dereferenceable load 8 from %ir.tmax)
  renamable $x17 = ADRP target-flags(aarch64-page) %const.3
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w16, $wzr
  renamable $w20 = LDURSBWi $fp, -100 :: (dereferenceable load 1 from %ir.Class, align 4)
  renamable $w8 = ADDWri killed renamable $w8, 125, 0
  renamable $d1 = SCVTFUWDri killed renamable $w8
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = LDRDui killed renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  renamable $x8 = ADRP target-flags(aarch64-page) @niter
  renamable $w6 = LDURWi $fp, -108 :: (dereferenceable load 4 from %ir.verified)
  STRWui renamable $w6, $sp, 26 :: (store 4 into %stack.20)
  renamable $w5 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  renamable $d1 = FMULDrr renamable $d2, killed renamable $d1
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1
  STRDui renamable $d0, killed renamable $x19, 16 :: (store 8 into %ir.mflops)
  $q1 = ORRv16i8 $q0, $q0
  STPDi $d0, renamable $d2, $sp, 11 :: (store 8 into %stack.21), (store 8 into %stack.22)
  $x8 = ADRP target-flags(aarch64-page) @ua__str_33__none__
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_33__none__, 0
  $x16 = ADRP target-flags(aarch64-page) @ua__str_32__O3__mcmod
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_32__O3__mcmod, 0
  $x17 = ADRP target-flags(aarch64-page) @ua__str_31__g__Wall__
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_31__g__Wall__, 0
  $x18 = ADRP target-flags(aarch64-page) @ua__str_30__I___commo
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_30__I___commo, 0
  $x0 = ADRP target-flags(aarch64-page) @ua__str_29__lm_
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_29__lm_, 0
  $x4 = ADRP target-flags(aarch64-page) @ua__str_28___CC__
  renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_28___CC__, 0
  $x2 = ADRP target-flags(aarch64-page) @ua__str_27_gcc_
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_27_gcc_, 0
  $x3 = ADRP target-flags(aarch64-page) @ua__str_26_03_Nov_201
  renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_26_03_Nov_201, 0
  STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
  $x8 = ADRP target-flags(aarch64-page) @ua__str_25_3_3_1_
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_25_3_3_1_, 0
  STRWui killed renamable $w6, $sp, 2 :: (store 4 into stack + 8)
  STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  $x16 = ADRP target-flags(aarch64-page) @ua__str_24_____coll__
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_24_____coll__, 0
  STPXi renamable $x4, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  $x0 = ADRP target-flags(aarch64-page) @ua__str_23_UA_
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_23_UA_, 0
  STPXi renamable $x3, renamable $x2, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  STRXui killed renamable $x8, $sp, 2 :: (store 8 into stack + 16)
  $w2 = MOVZWi 7, 0
  STRXui killed renamable $x16, $sp, 0 :: (store 8 into stack)
  $w1 = ORRWrs $wzr, $w20, 0
  $w3 = ORRWrs $wzr, $wzr, 0
  $w4 = ORRWrs $wzr, $wzr, 0
  $w19 = ORRWrs $wzr, $w5, 0
  $q0 = ORRv16i8 $q2, killed $q2
  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp
  PCN_STACKMAP 54, 0, 0, $fp, -64, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, killed renamable $w20, killed renamable $w19, 1, 8, $fp, -336, 1, 8, $fp, -344, 1, 4, $fp, -328, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 4 from %stack.20), (load 8 from %stack.21), (load 8 from %stack.22)
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.78

bb.66.if.then179:
; predecessors: %bb.65
  successors: %bb.67(0x80000000); %bb.67(100.00%)

  $w8 = MOVZWi 1, 0
  STURWi killed renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  $x20 = SUBXri $fp, 208, 0

bb.67.for.cond180:
; predecessors: %bb.66, %bb.68
  successors: %bb.68(0x7c000000), %bb.69(0x04000000); %bb.68(96.88%), %bb.69(3.12%)
  liveins: $x20
  renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.69, implicit $nzcv

bb.68.for.body183:
; predecessors: %bb.67
  successors: %bb.67(0x80000000); %bb.67(100.00%)
  liveins: $x20
  renamable $w19 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  $w0 = ORRWrs $wzr, $w19, 0
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  PCN_STACKMAP 55, 0, 0, $fp, -64, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
  renamable $x8 = LDURSWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  STRDroX killed renamable $d0, renamable $x20, killed renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx186)
  renamable $w8 = nsw ADDWri killed renamable $w16, 1, 0
  STURWi killed renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  B %bb.67

bb.69.for.end189:
; predecessors: %bb.67
  successors: %bb.70(0x50000000), %bb.71(0x30000000); %bb.70(62.50%), %bb.71(37.50%)

  $x16 = SUBXri $fp, 208, 0
  renamable $d0 = LDRDui renamable $x16, 15 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri killed renamable $d0, implicit-def $nzcv
  Bcc 1, %bb.71, implicit $nzcv

bb.70.if.then192:
; predecessors: %bb.69
  successors: %bb.71(0x80000000); %bb.71(100.00%)
  liveins: $x16
  $x8 = MOVZXi 16368, 48
  STRXui killed renamable $x8, killed renamable $x16, 15 :: (store 8 into %ir.tmax)

bb.71.if.end193:
; predecessors: %bb.69, %bb.70
  successors: %bb.72(0x80000000); %bb.72(100.00%)

  $x0 = ADRP target-flags(aarch64-page) @ua__str_34___SECTION_
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_34___SECTION_, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 56, 0, 0, $fp, -64, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16)
  $w8 = MOVZWi 1, 0
  renamable $x16 = ADRP target-flags(aarch64-page) %const.4
  renamable $d3 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  STURWi killed renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  STRDui renamable $d3, $sp, 11 :: (store 8 into %stack.22)

bb.72.for.cond195:
; predecessors: %bb.71, %bb.77
  successors: %bb.73(0x7c000000), %bb.78(0x04000000); %bb.73(96.88%), %bb.78(3.12%)
  liveins: $d3
  renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.78, implicit $nzcv

bb.73.for.body198:
; predecessors: %bb.72
  successors: %bb.74(0x40000000), %bb.75(0x40000000); %bb.74(50.00%), %bb.75(50.00%)
  liveins: $d3
  renamable $x8 = LDURSWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  renamable $x8 = UBFMXri killed renamable $x8, 61, 60
  $x16 = SUBXri $fp, 208, 0
  renamable $d0 = LDRDroX killed renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx204)
  $x20 = SUBXri $fp, 208, 0
  renamable $d2 = LDRDui renamable $x20, 15 :: (dereferenceable load 8 from %ir.tmax)
  $x16 = ADDXri $sp, 128, 0
  renamable $x19 = LDRXroX killed renamable $x16, killed renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx200)
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d3
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2
  STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  $x0 = ADRP target-flags(aarch64-page) @ua__str_35_____10s__9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_35_____10s__9, 0
  $x1 = ORRXrs $xzr, $x19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 57, 0, 1, 8, $fp, -336, 0, $fp, -64, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, killed renamable $x19, 1, 8, $fp, -328, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.20), (load 8 from %stack.21)
  renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 1, %bb.75, implicit $nzcv

bb.74.if.then210:
; predecessors: %bb.73
  successors: %bb.77(0x80000000); %bb.77(100.00%)
  liveins: $x20
  renamable $d0, renamable $d1 = LDPDi renamable $x20, 3 :: (dereferenceable load 8 from %ir.arrayidx211), (dereferenceable load 8 from %ir.arrayidx212, align 16)
  renamable $d2 = LDRDui renamable $x20, 15 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d3 = FSUBDrr killed renamable $d0, killed renamable $d1
  STRDui renamable $d3, killed renamable $x20, 11 :: (store 8 into %ir.t2)
  renamable $d0 = LDRDui $sp, 11 :: (load 8 from %stack.22)
  renamable $d0 = FMULDrr renamable $d3, killed renamable $d0
  renamable $d1 = FDIVDrr killed renamable $d0, killed renamable $d2
  STPDi renamable $d1, renamable $d3, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  $x0 = ADRP target-flags(aarch64-page) @ua__str_36__________1
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1, 0
  $x1 = ADRP target-flags(aarch64-page) @ua__str_37_sub_convec
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_37_sub_convec, 0
  $q0 = ORRv16i8 $q3, killed $q3
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 58, 0, 1, 8, $fp, -336, 0, $fp, -64, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 1, 8, $fp, -328, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.20), (load 8 from %stack.21)
  renamable $d3 = LDRDui $sp, 11 :: (load 8 from %stack.22)
  B %bb.77

bb.75.if.else217:
; predecessors: %bb.73
  successors: %bb.76(0x40000000), %bb.77(0x40000000); %bb.76(50.00%), %bb.77(50.00%)

  renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 7, 0, implicit-def $nzcv
  renamable $d3 = LDRDui $sp, 11 :: (load 8 from %stack.22)
  Bcc 1, %bb.77, implicit $nzcv

bb.76.if.then220:
; predecessors: %bb.75
  successors: %bb.77(0x80000000); %bb.77(100.00%)
  liveins: $d3
  $x8 = SUBXri $fp, 208, 0
  renamable $d0, renamable $d1 = LDPDi renamable $x8, 5 :: (dereferenceable load 8 from %ir.arrayidx221), (dereferenceable load 8 from %ir.arrayidx222, align 16)
  renamable $d2 = LDRDui renamable $x8, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = LDRDui renamable $x8, 15 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d2
  STRDui renamable $d0, killed renamable $x8, 11 :: (store 8 into %ir.t2)
  renamable $d2 = FMULDrr renamable $d0, killed renamable $d3
  renamable $d1 = FDIVDrr killed renamable $d2, killed renamable $d1
  STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  $x0 = ADRP target-flags(aarch64-page) @ua__str_36__________1
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1, 0
  $x1 = ADRP target-flags(aarch64-page) @ua__str_38_sub_diffus
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_38_sub_diffus, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  renamable $d3 = LDRDui $sp, 11 :: (load 8 from %stack.22)
  PCN_STACKMAP 59, 0, 1, 8, $fp, -336, 0, $fp, -64, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 1, 8, $fp, -328, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.6.i, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.20), (load 8 from %stack.21)

bb.77.for.inc231:
; predecessors: %bb.75, %bb.76, %bb.74
  successors: %bb.72(0x80000000); %bb.72(100.00%)
  liveins: $d3
  renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  B %bb.72

bb.78.if.end234:
; predecessors: %bb.65, %bb.72

  $w8 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.46), (load 8 from %stack.45)
  $x20, $x19 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.48), (load 8 from %stack.47)
  $sp = frame-destroy ADDXri $sp, 448, 0
  RET undef $lr, implicit $w8

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: $x8 = SUBXri $fp, 208, 0
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   $x8 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(3): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
SU(1):   STPWi renamable $w0, $wzr, $fp, -10 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Anti Latency=0
SU(2):   STRXui renamable $x1, renamable $x8, 20 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Anti Latency=0
SU(3):   STRXui $xzr, renamable $x8, 14 :: (store 8 into %ir.nelt_tot)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
SU(4):   STURWi $wzr, $fp, -104 :: (store 4 into %ir.ifmortar)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   $x0 = ADRP target-flags(aarch64-page) @ua__str_timer_flag
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(1): Anti Latency=0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_timer_flag, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x1 = ADRP target-flags(aarch64-page) @ua__str_1_r_
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(2): Anti Latency=0
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x1
SU(8):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = SUBXri $fp, 208, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) STPWi renamable $w0, $wzr, $fp, -10 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 3 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) STRXui renamable $x1, renamable $x8, 20 :: (store 8 into %ir.argv.addr)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 3 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x0 = ADRP target-flags(aarch64-page) @ua__str_timer_flag
  Ready @3c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 7 3 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x1 = ADRP target-flags(aarch64-page) @ua__str_1_r_
  Ready @4c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 3 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_timer_flag, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 8 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_, 0
  Ready @6c
  TopQ.A TopLatency SU(8) 2c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 7c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRXui $xzr, renamable $x8, 14 :: (store 8 into %ir.nelt_tot)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURWi $wzr, $fp, -104 :: (store 4 into %ir.ifmortar)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $x8 = SUBXri $fp, 208, 0
SU(1):   STPWi renamable $w0, $wzr, $fp, -10 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
SU(2):   STRXui renamable $x1, renamable $x8, 20 :: (store 8 into %ir.argv.addr)
SU(5):   $x0 = ADRP target-flags(aarch64-page) @ua__str_timer_flag
SU(7):   $x1 = ADRP target-flags(aarch64-page) @ua__str_1_r_
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_timer_flag, 0
SU(8):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_, 0
SU(3):   STRXui $xzr, renamable $x8, 14 :: (store 8 into %ir.nelt_tot)
SU(4):   STURWi $wzr, $fp, -104 :: (store 4 into %ir.ifmortar)

********** MI Scheduling **********
main:%bb.0 entry
  From: frame-setup STPXi killed $x20, killed $x19, $sp, 52 :: (store 8 into %stack.48), (store 8 into %stack.47)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x20, $x19, $sp, 52 :: (store 8 into %stack.48), (store 8 into %stack.47)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 54 :: (store 8 into %stack.46), (store 8 into %stack.45)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 432, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x20, $x19, $sp, 52 :: (store 8 into %stack.48), (store 8 into %stack.47)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 54 :: (store 8 into %stack.46), (store 8 into %stack.45)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 432, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x20, $x19, $sp, 52 :: (store 8 into %stack.48), (store 8 into %stack.47)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 54 :: (store 8 into %stack.46), (store 8 into %stack.45)
SU(2):   $fp = frame-setup ADDXri $sp, 432, 0

Fixup kills for %bb.0
********** MI Scheduling **********
main:%bb.1 if.then
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 30
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x8
SU(1):   $w16 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(15): Out  Latency=1
    SU(12): Data Latency=1 Reg=$w16
SU(2):   $x17 = ADRP target-flags(aarch64-page) @ua__str_2_total_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x17
SU(3):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_2_total_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x17
  Successors:
    SU(18): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x17
SU(4):   $x18 = ADRP target-flags(aarch64-page) @ua__str_3_init_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x18
SU(5):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_3_init_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x18
  Successors:
    SU(21): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x18
SU(6):   $x0 = ADRP target-flags(aarch64-page) @ua__str_4_convect_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
SU(7):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_4_convect_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
  Successors:
    SU(29): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x0
SU(8):   $x1 = ADRP target-flags(aarch64-page) @ua__str_5_transfb_c_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x1
SU(9):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_5_transfb_c_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x1
  Successors:
    SU(20): Data Latency=1 Reg=$x1
SU(10):   $x2 = ADRP target-flags(aarch64-page) @ua__str_6_diffusion_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x2
SU(11):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_6_diffusion_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x2
  Successors:
    SU(23): Data Latency=1 Reg=$x2
SU(12):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$w16
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(15): Anti Latency=0
    SU(13): Anti Latency=0
SU(13):   $x8 = ADRP target-flags(aarch64-page) @ua__str_7_transf_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(12): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x8
SU(14):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_7_transf_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x8
  Successors:
    SU(26): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x8
SU(15):   $x16 = ADRP target-flags(aarch64-page) @ua__str_8_transfb_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(12): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x16
SU(16):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_8_transfb_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x16
  Successors:
    SU(25): Data Latency=1 Reg=$x16
SU(17):   STPXi renamable $x17, renamable $x18, $sp, 17 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=$x18
    SU(3): Data Latency=1 Reg=$x17
  Successors:
    SU(18): Anti Latency=0
    SU(21): Anti Latency=0
SU(18):   $x17 = ADRP target-flags(aarch64-page) @ua__str_9_adaptation
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(17): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x17
SU(19):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_9_adaptation, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x17
  Successors:
    SU(25): Data Latency=1 Reg=$x17
SU(20):   STPXi renamable $x0, renamable $x1, $sp, 19 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(9): Data Latency=1 Reg=$x1
    SU(7): Data Latency=1 Reg=$x0
  Successors:
    SU(29): Anti Latency=0
SU(21):   $x18 = ADRP target-flags(aarch64-page) @ua__str_10_transf_b_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(17): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x18
SU(22):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_10_transf_b_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x18
  Successors:
    SU(28): Data Latency=1 Reg=$x18
SU(23):   STPXi renamable $x2, renamable $x8, $sp, 21 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(14): Data Latency=1 Reg=$x8
    SU(11): Data Latency=1 Reg=$x2
  Successors:
    SU(26): Anti Latency=0
SU(24):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(29): Data Latency=4 Reg=$x19
SU(25):   STPXi renamable $x16, renamable $x17, $sp, 23 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=$x17
    SU(16): Data Latency=1 Reg=$x16
SU(26):   $x8 = ADRP target-flags(aarch64-page) @ua__str_11_add2_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(23): Anti Latency=0
    SU(14): Out  Latency=1
  Successors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x8
SU(27):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_11_add2_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x8
  Successors:
    SU(28): Data Latency=1 Reg=$x8
SU(28):   STPXi renamable $x18, renamable $x8, $sp, 25 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(27): Data Latency=1 Reg=$x8
    SU(22): Data Latency=1 Reg=$x18
SU(29):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(24): Data Latency=4 Reg=$x19
    SU(20): Anti Latency=0
    SU(7): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(29): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 6 8 10 24 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 24 1 2 4 6 8 10 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(24) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) $w16 = MOVZWi 1, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 24 10 2 4 6 8 12 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(24) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(24) renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  Ready @2c
  TopQ.A BotLatency SU(24) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 2 4 6 8 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x17 = ADRP target-flags(aarch64-page) @ua__str_2_total_
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 8 4 6 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x18 = ADRP target-flags(aarch64-page) @ua__str_3_init_
  Ready @4c
  TopQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 8 3 6 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x2 = ADRP target-flags(aarch64-page) @ua__str_6_diffusion_
  Ready @5c
  TopQ.A BotLatency SU(10) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 5 8 3 6 11 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @6c
  TopQ.A TopLatency SU(12) 1c
  TopQ.A BotLatency SU(12) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 5 8 3 6 15 13 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(13) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x8 = ADRP target-flags(aarch64-page) @ua__str_7_transf_
  Ready @7c
  TopQ.A BotLatency SU(13) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 5 8 3 6 15 14 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_2_total_, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 5 8 14 6 15 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_3_init_, 0
  Ready @9c
  TopQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 15 8 14 6 17 
  TopQ.A RemainingLatency 0 + 10c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x0 = ADRP target-flags(aarch64-page) @ua__str_4_convect_
  Ready @10c
  TopQ.A BotLatency SU(6) 3c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 15 8 14 17 7 
  TopQ.A RemainingLatency 0 + 11c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x1 = ADRP target-flags(aarch64-page) @ua__str_5_transfb_c_
  Ready @11c
  TopQ.A BotLatency SU(8) 3c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 15 7 14 17 9 
  TopQ.A RemainingLatency 0 + 12c > CritPath 5
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_6_diffusion_, 0
  Ready @12c
  TopQ.A BotLatency SU(11) 3c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 15 7 14 17 
  TopQ.A RemainingLatency 0 + 13c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(14) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_7_transf_, 0
  Ready @13c
  TopQ.A TopLatency SU(14) 2c
  TopQ.A BotLatency SU(14) 3c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 15 7 17 23 
  TopQ.A RemainingLatency 0 + 14c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_4_convect_, 0
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 15 23 17 
  TopQ.A RemainingLatency 0 + 15c > CritPath 5
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_5_transfb_c_, 0
  Ready @15c
  TopQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 15 23 20 
  TopQ.A RemainingLatency 0 + 16c > CritPath 5
  Cand SU(17) ORDER                              
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) $x16 = ADRP target-flags(aarch64-page) @ua__str_8_transfb_
  Ready @16c
  TopQ.A BotLatency SU(15) 2c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 20 23 16 
  TopQ.A RemainingLatency 0 + 17c > CritPath 5
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) STPXi renamable $x17, renamable $x18, $sp, 17 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
  Ready @17c
  TopQ.A BotLatency SU(17) 2c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 20 23 18 21 
  TopQ.A RemainingLatency 0 + 18c > CritPath 5
  Cand SU(16) ORDER                              
  Cand SU(23) TOP-PATH                  2 cycles 
  Cand SU(18) ORDER                              
Pick Top ORDER     
Scheduling SU(18) $x17 = ADRP target-flags(aarch64-page) @ua__str_9_adaptation
  Ready @18c
  TopQ.A BotLatency SU(18) 2c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 20 23 21 19 
  TopQ.A RemainingLatency 0 + 19c > CritPath 5
  Cand SU(16) ORDER                              
  Cand SU(23) TOP-PATH                  2 cycles 
  Cand SU(21) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(21) $x18 = ADRP target-flags(aarch64-page) @ua__str_10_transf_b_
  Ready @19c
  TopQ.A BotLatency SU(21) 2c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 20 23 19 22 
  TopQ.A RemainingLatency 0 + 20c > CritPath 5
  Cand SU(16) ORDER                              
  Cand SU(23) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) STPXi renamable $x2, renamable $x8, $sp, 21 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
  Ready @20c
  TopQ.A TopLatency SU(23) 3c
  TopQ.A BotLatency SU(23) 2c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 20 22 19 26 
  TopQ.A RemainingLatency 0 + 21c > CritPath 5
  Cand SU(16) ORDER                              
  Cand SU(26) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(26) $x8 = ADRP target-flags(aarch64-page) @ua__str_11_add2_
  Ready @21c
  TopQ.A BotLatency SU(26) 2c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 20 22 19 27 
  TopQ.A RemainingLatency 0 + 22c > CritPath 5
  Cand SU(16) ORDER                              
Pick Top ORDER     
Scheduling SU(16) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_8_transfb_, 0
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 20 22 19 
  TopQ.A RemainingLatency 0 + 23c > CritPath 5
  Cand SU(27) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(19) ORDER                              
Pick Top ORDER     
Scheduling SU(19) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_9_adaptation, 0
  Ready @23c
  TopQ.A BotLatency SU(19) 1c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 20 22 25 
  TopQ.A RemainingLatency 0 + 24c > CritPath 5
  Cand SU(27) ORDER                              
  Cand SU(20) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(20) STPXi renamable $x0, renamable $x1, $sp, 19 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
  Ready @24c
  TopQ.A BotLatency SU(20) 1c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 25 22 29 
  TopQ.A RemainingLatency 0 + 25c > CritPath 5
  Cand SU(27) ORDER                              
  Cand SU(22) ORDER                              
Pick Top ORDER     
Scheduling SU(22) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_10_transf_b_, 0
  Ready @25c
  TopQ.A BotLatency SU(22) 1c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 25 29 
  TopQ.A RemainingLatency 0 + 26c > CritPath 5
  Cand SU(27) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(27) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_11_add2_, 0
  Ready @26c
  TopQ.A TopLatency SU(27) 4c
  TopQ.A BotLatency SU(27) 1c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 25 28 
  TopQ.A RemainingLatency 0 + 27c > CritPath 5
  Cand SU(29) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(29) $x0 = ORRXrs $xzr, $x19, 0
  Ready @27c
  TopQ.A BotLatency SU(29) 1c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 28 25 
  TopQ.A RemainingLatency 0 + 28c > CritPath 5
  Cand SU(28) ORDER                              
  Cand SU(25) ORDER                              
Pick Top ORDER     
Scheduling SU(25) STPXi renamable $x16, renamable $x17, $sp, 23 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
  Ready @28c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 28 
Pick Top ONLY1     
Scheduling SU(28) STPXi renamable $x18, renamable $x8, $sp, 25 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)
  Ready @29c
  TopQ.A TopLatency SU(28) 5c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   $w16 = MOVZWi 1, 0
SU(24):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
SU(2):   $x17 = ADRP target-flags(aarch64-page) @ua__str_2_total_
SU(4):   $x18 = ADRP target-flags(aarch64-page) @ua__str_3_init_
SU(10):   $x2 = ADRP target-flags(aarch64-page) @ua__str_6_diffusion_
SU(12):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
SU(13):   $x8 = ADRP target-flags(aarch64-page) @ua__str_7_transf_
SU(3):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_2_total_, 0
SU(5):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_3_init_, 0
SU(6):   $x0 = ADRP target-flags(aarch64-page) @ua__str_4_convect_
SU(8):   $x1 = ADRP target-flags(aarch64-page) @ua__str_5_transfb_c_
SU(11):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_6_diffusion_, 0
SU(14):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_7_transf_, 0
SU(7):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_4_convect_, 0
SU(9):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_5_transfb_c_, 0
SU(15):   $x16 = ADRP target-flags(aarch64-page) @ua__str_8_transfb_
SU(17):   STPXi renamable $x17, renamable $x18, $sp, 17 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
SU(18):   $x17 = ADRP target-flags(aarch64-page) @ua__str_9_adaptation
SU(21):   $x18 = ADRP target-flags(aarch64-page) @ua__str_10_transf_b_
SU(23):   STPXi renamable $x2, renamable $x8, $sp, 21 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
SU(26):   $x8 = ADRP target-flags(aarch64-page) @ua__str_11_add2_
SU(16):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_8_transfb_, 0
SU(19):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_9_adaptation, 0
SU(20):   STPXi renamable $x0, renamable $x1, $sp, 19 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
SU(22):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_10_transf_b_, 0
SU(27):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_11_add2_, 0
SU(29):   $x0 = ORRXrs $xzr, $x19, 0
SU(25):   STPXi renamable $x16, renamable $x17, $sp, 23 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
SU(28):   STPXi renamable $x18, renamable $x8, $sp, 25 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)

Fixup kills for %bb.1
********** MI Scheduling **********
main:%bb.2 if.else
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

Fixup kills for %bb.2
********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @ua__str_13_inputua_da
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ua__str_13_inputua_da
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_13_inputua_da, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @ua__str_1_r_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @ua__str_13_inputua_da
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @ua__str_1_r_
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_13_inputua_da, 0
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_, 0
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ua__str_13_inputua_da
SU(2):   $x1 = ADRP target-flags(aarch64-page) @ua__str_1_r_
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_13_inputua_da, 0
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_1_r_, 0

********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @ua__str_12____NAS_Par
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ua__str_12____NAS_Par
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_12____NAS_Par, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @ua__str_12____NAS_Par
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_12____NAS_Par, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ua__str_12____NAS_Par
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_12____NAS_Par, 0

Fixup kills for %bb.3
********** MI Scheduling **********
main:%bb.4 if.then14
  From: renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$x19
SU(1):   $x1 = ADRP target-flags(aarch64-page) @ua__str_15__d_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = ADRP target-flags(aarch64-page) @fre
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x2
SU(4):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @fre, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x1 = ADRP target-flags(aarch64-page) @ua__str_15__d_
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x2 = ADRP target-flags(aarch64-page) @fre
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @fre, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ORRXrs $xzr, $x19, 0
  Ready @5c
  TopQ.A TopLatency SU(5) 4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x1 = ADRP target-flags(aarch64-page) @ua__str_15__d_
SU(3):   $x2 = ADRP target-flags(aarch64-page) @fre
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_, 0
SU(4):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @fre, 0
SU(5):   $x0 = ORRXrs $xzr, $x19, 0

********** MI Scheduling **********
main:%bb.4 if.then14
  From: $x0 = ADRP target-flags(aarch64-page) @ua__str_14__Reading_f
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ua__str_14__Reading_f
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_14__Reading_f, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @ua__str_14__Reading_f
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_14__Reading_f, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ua__str_14__Reading_f
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_14__Reading_f, 0

Fixup kills for %bb.4
********** MI Scheduling **********
main:%bb.5 while.cond
  From: renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$x19
SU(1):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ORRXrs $xzr, $x19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.5
********** MI Scheduling **********
main:%bb.6 while.end
  From: renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$x19
SU(1):   $x1 = ADRP target-flags(aarch64-page) @ua__str_15__d_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = ADRP target-flags(aarch64-page) @niter
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x2
SU(4):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @niter, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x1 = ADRP target-flags(aarch64-page) @ua__str_15__d_
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x2 = ADRP target-flags(aarch64-page) @niter
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @niter, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ORRXrs $xzr, $x19, 0
  Ready @5c
  TopQ.A TopLatency SU(5) 4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x1 = ADRP target-flags(aarch64-page) @ua__str_15__d_
SU(3):   $x2 = ADRP target-flags(aarch64-page) @niter
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_, 0
SU(4):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @niter, 0
SU(5):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.6
********** MI Scheduling **********
main:%bb.7 while.cond20
  From: renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$x19
SU(1):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ORRXrs $xzr, $x19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.7
********** MI Scheduling **********
main:%bb.8 while.end24
  From: renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$x19
SU(1):   $x1 = ADRP target-flags(aarch64-page) @ua__str_15__d_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x2
SU(4):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @nmxh, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x1 = ADRP target-flags(aarch64-page) @ua__str_15__d_
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x2 = ADRP target-flags(aarch64-page) @nmxh
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @nmxh, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ORRXrs $xzr, $x19, 0
  Ready @5c
  TopQ.A TopLatency SU(5) 4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x1 = ADRP target-flags(aarch64-page) @ua__str_15__d_
SU(3):   $x2 = ADRP target-flags(aarch64-page) @nmxh
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_15__d_, 0
SU(4):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @nmxh, 0
SU(5):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.8
********** MI Scheduling **********
main:%bb.9 while.cond26
  From: renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$x19
SU(1):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ORRXrs $xzr, $x19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.9
********** MI Scheduling **********
main:%bb.10 while.end30
  From: renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$x19
SU(1):   STRWui renamable $w8, $sp, 29 :: (store 4 into %ir.result)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Anti Latency=0
SU(2):   $w8 = MOVZWi 85, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(3):   STURBBi renamable $w8, $fp, -100 :: (store 1 into %ir.Class, align 4)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
SU(4):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui renamable $w8, $sp, 29 :: (store 4 into %ir.result)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w8 = MOVZWi 85, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURBBi renamable $w8, $fp, -100 :: (store 1 into %ir.Class, align 4)
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x0 = ORRXrs $xzr, $x19, 0
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
SU(1):   STRWui renamable $w8, $sp, 29 :: (store 4 into %ir.result)
SU(2):   $w8 = MOVZWi 85, 0
SU(3):   STURBBi renamable $w8, $fp, -100 :: (store 1 into %ir.Class, align 4)
SU(4):   $x0 = ORRXrs $xzr, $x19, 0

********** MI Scheduling **********
main:%bb.10 while.end30
  From: renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$x19
SU(1):   $x1 = ADRP target-flags(aarch64-page) @ua__str_16__lf_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_16__lf_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = ADRP target-flags(aarch64-page) @alpha
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x2
SU(4):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @alpha, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x1 = ADRP target-flags(aarch64-page) @ua__str_16__lf_
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x2 = ADRP target-flags(aarch64-page) @alpha
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_16__lf_, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @alpha, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ORRXrs $xzr, $x19, 0
  Ready @5c
  TopQ.A TopLatency SU(5) 4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $x19 = LDRXui $sp, 15 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x1 = ADRP target-flags(aarch64-page) @ua__str_16__lf_
SU(3):   $x2 = ADRP target-flags(aarch64-page) @alpha
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_16__lf_, 0
SU(4):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @alpha, 0
SU(5):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.10
********** MI Scheduling **********
main:%bb.11 if.else33
  From: renamable $x8 = ADRP target-flags(aarch64-page) @fre
    To: End RegionInstrs: 17
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @fre
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(1):   $w16 = MOVZWi 5, 0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Out  Latency=1
    SU(10): Out  Latency=1
    SU(2): Data Latency=1 Reg=$w16
SU(2):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=$w16
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Anti Latency=0
    SU(10): Anti Latency=0
    SU(3): Anti Latency=0
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) @niter
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
SU(4):   $w16 = MOVZWi 200, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(10): Out  Latency=1
    SU(5): Data Latency=1 Reg=$w16
SU(5):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 6
  Predecessors:
    SU(4): Data Latency=1 Reg=$w16
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Anti Latency=0
    SU(10): Anti Latency=0
    SU(6): Anti Latency=0
SU(6):   renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 6
  Predecessors:
    SU(5): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x8
SU(7):   $w16 = MOVZWi 10, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 6
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(10): Out  Latency=1
    SU(8): Data Latency=1 Reg=$w16
SU(8):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 5
  Predecessors:
    SU(7): Data Latency=1 Reg=$w16
    SU(6): Data Latency=1 Reg=$x8
  Successors:
    SU(10): Anti Latency=0
    SU(9): Anti Latency=0
SU(9):   renamable $x8 = ADRP target-flags(aarch64-page) @alpha
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(8): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(15): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x8
SU(10):   $x16 = MOVZXi 63963, 0
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 5
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x16
SU(11):   $x16 = MOVKXi $x16(tied-def 0), 27262, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x16
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x16
SU(12):   $x16 = MOVKXi $x16(tied-def 0), 29884, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x16
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x16
SU(13):   $x16 = MOVKXi $x16(tied-def 0), 16307, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x16
  Successors:
    SU(14): Data Latency=1 Reg=$x16
SU(14):   STRXui renamable $x16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(13): Data Latency=1 Reg=$x16
    SU(9): Data Latency=1 Reg=$x8
  Successors:
    SU(15): Anti Latency=0
SU(15):   $w8 = MOVZWi 66, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(14): Anti Latency=0
    SU(9): Out  Latency=1
  Successors:
    SU(16): Data Latency=1 Reg=$w8
SU(16):   STURBBi renamable $w8, $fp, -100 :: (store 1 into %ir.Class, align 4)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(15): Data Latency=1 Reg=$w8
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @fre
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w16 = MOVZWi 5, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 8
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x8 = ADRP target-flags(aarch64-page) @niter
  Ready @3c
  TopQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w16 = MOVZWi 200, 0
  Ready @4c
  TopQ.A BotLatency SU(4) 7c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
  Ready @5c
  TopQ.A TopLatency SU(5) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
  Ready @6c
  TopQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $w16 = MOVZWi 10, 0
  Ready @7c
  TopQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
  Ready @8c
  TopQ.A TopLatency SU(8) 3c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 
  TopQ.A RemainingLatency 0 + 9c > CritPath 8
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x16 = MOVZXi 63963, 0
  Ready @9c
  TopQ.A BotLatency SU(10) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 8
  Cand SU(9) ORDER                              
  Cand SU(11) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x16 = MOVKXi $x16(tied-def 0), 27262, 16
  Ready @10c
  TopQ.A TopLatency SU(11) 4c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 8
  Cand SU(9) ORDER                              
  Cand SU(12) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) $x16 = MOVKXi $x16(tied-def 0), 29884, 32
  Ready @11c
  TopQ.A TopLatency SU(12) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 8
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $x8 = ADRP target-flags(aarch64-page) @alpha
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) $x16 = MOVKXi $x16(tied-def 0), 16307, 48
  Ready @13c
  TopQ.A TopLatency SU(13) 6c
  TopQ.A BotLatency SU(13) 2c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) STRXui renamable $x16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
  Ready @14c
  TopQ.A TopLatency SU(14) 7c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) $w8 = MOVZWi 66, 0
  Ready @15c
  TopQ.A BotLatency SU(15) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) STURBBi renamable $w8, $fp, -100 :: (store 1 into %ir.Class, align 4)
  Ready @16c
  TopQ.A TopLatency SU(16) 8c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @fre
SU(1):   $w16 = MOVZWi 5, 0
SU(2):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) @niter
SU(4):   $w16 = MOVZWi 200, 0
SU(5):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
SU(6):   renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
SU(7):   $w16 = MOVZWi 10, 0
SU(8):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
SU(10):   $x16 = MOVZXi 63963, 0
SU(11):   $x16 = MOVKXi $x16(tied-def 0), 27262, 16
SU(12):   $x16 = MOVKXi $x16(tied-def 0), 29884, 32
SU(9):   renamable $x8 = ADRP target-flags(aarch64-page) @alpha
SU(13):   $x16 = MOVKXi $x16(tied-def 0), 16307, 48
SU(14):   STRXui renamable $x16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
SU(15):   $w8 = MOVZWi 66, 0
SU(16):   STURBBi renamable $w8, $fp, -100 :: (store 1 into %ir.Class, align 4)

********** MI Scheduling **********
main:%bb.11 if.else33
  From: $x0 = ADRP target-flags(aarch64-page) @ua__str_17__No_input_
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ua__str_17__No_input_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_17__No_input_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @ua__str_17__No_input_
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_17__No_input_, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ua__str_17__No_input_
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_17__No_input_, 0

Fixup kills for %bb.11
********** MI Scheduling **********
main:%bb.12 if.end35
  From: renamable $x8 = ADRP target-flags(aarch64-page) @alpha
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @alpha
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(2): Data Latency=4 Reg=$d0
SU(2):   STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.20)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$d0
SU(3):   $x0 = ADRP target-flags(aarch64-page) @ua__str_22__Heat_sour
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_22__Heat_sour, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @alpha
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @ua__str_22__Heat_sour
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_22__Heat_sour, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.20)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @alpha
SU(1):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
SU(3):   $x0 = ADRP target-flags(aarch64-page) @ua__str_22__Heat_sour
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_22__Heat_sour, 0
SU(2):   STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.20)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$w19
SU(2):   $x0 = ADRP target-flags(aarch64-page) @ua__str_21__CG_iterat
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_21__CG_iterat, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $w1 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @ua__str_21__CG_iterat
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_21__CG_iterat, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w1 = ORRWrs $wzr, $w19, 0
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
SU(1):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
SU(2):   $x0 = ADRP target-flags(aarch64-page) @ua__str_21__CG_iterat
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_21__CG_iterat, 0
SU(4):   $w1 = ORRWrs $wzr, $w19, 0

********** MI Scheduling **********
main:%bb.12 if.end35
  From: renamable $x8 = ADRP target-flags(aarch64-page) @niter
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @niter
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Data Latency=4 Reg=$w19
    SU(2): Anti Latency=0
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(4): Data Latency=4 Reg=$d0
SU(4):   STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.20)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$d0
SU(5):   $x0 = ADRP target-flags(aarch64-page) @ua__str_20__Time_step
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_20__Time_step, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $w1 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @niter
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(5) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  Ready @2c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(5) ORDER                              
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  Ready @3c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 4 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ADRP target-flags(aarch64-page) @ua__str_20__Time_step
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 6 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_20__Time_step, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $w1 = ORRWrs $wzr, $w19, 0
  Ready @6c
  TopQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.20)
  Ready @7c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @niter
SU(1):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @dtime
SU(3):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
SU(5):   $x0 = ADRP target-flags(aarch64-page) @ua__str_20__Time_step
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_20__Time_step, 0
SU(7):   $w1 = ORRWrs $wzr, $w19, 0
SU(4):   STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.20)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: renamable $x8 = ADRP target-flags(aarch64-page) @fre
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @fre
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$w19
SU(2):   $x0 = ADRP target-flags(aarch64-page) @ua__str_19__Adaptatio
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_19__Adaptatio, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $w1 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @fre
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @ua__str_19__Adaptatio
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_19__Adaptatio, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w1 = ORRWrs $wzr, $w19, 0
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @fre
SU(1):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
SU(2):   $x0 = ADRP target-flags(aarch64-page) @ua__str_19__Adaptatio
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_19__Adaptatio, 0
SU(4):   $w1 = ORRWrs $wzr, $w19, 0

********** MI Scheduling **********
main:%bb.12 if.end35
  From: renamable $x8 = ADRP target-flags(aarch64-page) %const.2
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$d1
    SU(2): Anti Latency=0
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @dlmin
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   STRDui renamable $d0, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Anti Latency=0
    SU(5): Anti Latency=0
SU(4):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Data Latency=4 Reg=$d1
  Successors:
    SU(6): Data Latency=1 Reg=$d0
SU(5):   renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(6): Data Latency=1 Reg=$x8
SU(6):   STRDui renamable $d0, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d0
    SU(5): Data Latency=1 Reg=$x8
SU(7):   $x0 = ADRP target-flags(aarch64-page) @ua__str_18__Levels_of
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
SU(8):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_18__Levels_of, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $w1 = MOVZWi 7, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 9 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 7 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 7 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x8 = ADRP target-flags(aarch64-page) @dlmin
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 7 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x0 = ADRP target-flags(aarch64-page) @ua__str_18__Levels_of
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 3 8 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRDui renamable $d0, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
  Ready @4c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 4 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  Ready @6c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_18__Levels_of, 0
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 6 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $w1 = MOVZWi 7, 0
  Ready @8c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRDui renamable $d0, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
  Ready @9c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
SU(1):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @dlmin
SU(7):   $x0 = ADRP target-flags(aarch64-page) @ua__str_18__Levels_of
SU(3):   STRDui renamable $d0, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
SU(4):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(5):   renamable $x8 = ADRP target-flags(aarch64-page) @dtime
SU(8):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_18__Levels_of, 0
SU(9):   $w1 = MOVZWi 7, 0
SU(6):   STRDui renamable $d0, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: renamable $x8 = ADRP target-flags(aarch64-page) %const.0
    To: BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=$x16
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @3c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.1
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(3):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)

Fixup kills for %bb.12
********** MI Scheduling **********
main:%bb.13 for.cond
  From: STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
    To: Bcc 12, %bb.15, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.15, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
SU(2):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv

Fixup kills for %bb.13
********** MI Scheduling **********
main:%bb.14 for.body
  From: renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0

********** MI Scheduling **********
main:%bb.14 for.body
  From: renamable $w19 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
    To: BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w19
SU(1):   $w0 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w19 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w0 = ORRWrs $wzr, $w19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   renamable $w19 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(1):   $w0 = ORRWrs $wzr, $w19, 0

Fixup kills for %bb.14
********** MI Scheduling **********
main:%bb.15 for.end
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.17
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

Fixup kills for %bb.15
Fixup kills for %bb.16
********** MI Scheduling **********
main:%bb.17 if.end44
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.19
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.17 if.end44
  From: $x0 = SUBXri $fp, 104, 0
    To: BL @adaptation, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = SUBXri $fp, 104, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $w1 = ORRWrs $wzr, $wzr, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adaptation, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = SUBXri $fp, 104, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w1 = ORRWrs $wzr, $wzr, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   $x0 = SUBXri $fp, 104, 0
SU(1):   $w1 = ORRWrs $wzr, $wzr, 0

********** MI Scheduling **********
main:%bb.17 if.end44
  From: renamable $x8 = ADRP target-flags(aarch64-page) @time
    To: BL @mortar, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @time
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
ExitSU:   BL @mortar, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @time
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @time
SU(1):   STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)

********** MI Scheduling **********
main:%bb.17 if.end44
  From: renamable $x8 = ADRP target-flags(aarch64-page) @nelt
    To: BL @nr_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
SU(2):   renamable $w8 = ADDWrs renamable $w8, renamable $w8, 1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(3):   renamable $w19 = UBFMWri renamable $w8, 29, 28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
  Successors:
    SU(7): Data Latency=1 Reg=$w19
SU(4):   $x0 = ADRP target-flags(aarch64-page) @sje
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
SU(5):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sje, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $w2 = MOVNWi 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $w1 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @nr_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @nelt
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 4 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(6) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 6 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 8
  Cand SU(6) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x0 = ADRP target-flags(aarch64-page) @sje
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 8
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sje, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $w2 = MOVNWi 0, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = ADDWrs renamable $w8, renamable $w8, 1
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w19 = UBFMWri renamable $w8, 29, 28
  Ready @6c
  TopQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $w1 = ORRWrs $wzr, $w19, 0
  Ready @7c
  TopQ.A TopLatency SU(7) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nelt
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(4):   $x0 = ADRP target-flags(aarch64-page) @sje
SU(5):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sje, 0
SU(6):   $w2 = MOVNWi 0, 0
SU(2):   renamable $w8 = ADDWrs renamable $w8, renamable $w8, 1
SU(3):   renamable $w19 = UBFMWri renamable $w8, 29, 28
SU(7):   $w1 = ORRWrs $wzr, $w19, 0

********** MI Scheduling **********
main:%bb.17 if.end44
  From: renamable $x8 = ADRP target-flags(aarch64-page) @ntot
    To: BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Data Latency=4 Reg=$w19
SU(2):   $x0 = ADRP target-flags(aarch64-page) @ta1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $w1 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @ta1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $d0 = FMOVD0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $w1 = ORRWrs $wzr, $w19, 0
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
SU(1):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(2):   $x0 = ADRP target-flags(aarch64-page) @ta1
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
SU(4):   $d0 = FMOVD0
SU(5):   $w1 = ORRWrs $wzr, $w19, 0

Fixup kills for %bb.17
Fixup kills for %bb.18
********** MI Scheduling **********
main:%bb.19 if.end48
  From: renamable $x8 = ADRP target-flags(aarch64-page) @time
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @time
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=$x8
SU(1):   STURWi $wzr, $fp, -52 :: (store 4 into %ir.step)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $x19 = ADRP target-flags(aarch64-page) @trhs
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x19
SU(3):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $w20 = MOVZWi 200, 0, implicit-def $x20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x19 = ADRP target-flags(aarch64-page) @trhs
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @time
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 4 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $w20 = MOVZWi 200, 0, implicit-def $x20
  Ready @3c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STURWi $wzr, $fp, -52 :: (store 4 into %ir.step)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(2):   $x19 = ADRP target-flags(aarch64-page) @trhs
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @time
SU(3):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
SU(4):   $w20 = MOVZWi 200, 0, implicit-def $x20
SU(1):   STURWi $wzr, $fp, -52 :: (store 4 into %ir.step)
SU(5):   STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)

Fixup kills for %bb.19
********** MI Scheduling **********
main:%bb.20 for.cond49
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 12, %bb.65, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @niter
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.65, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @niter
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @niter
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.20
********** MI Scheduling **********
main:%bb.21 for.body51
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 1, %bb.28, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.28, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv

Fixup kills for %bb.21
********** MI Scheduling **********
main:%bb.22 if.then53
  From: renamable $x8 = ADRP target-flags(aarch64-page) @time
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @time
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(2): Anti Latency=0
SU(2):   $x8 = SUBXri $fp, 208, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   STRXui $xzr, renamable $x8, 14 :: (store 8 into %ir.nelt_tot)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Anti Latency=0
SU(4):   $w8 = MOVZWi 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @time
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x8 = SUBXri $fp, 208, 0
  Ready @2c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRXui $xzr, renamable $x8, 14 :: (store 8 into %ir.nelt_tot)
  Ready @3c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w8 = MOVZWi 1, 0
  Ready @4c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @time
SU(1):   STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
SU(2):   $x8 = SUBXri $fp, 208, 0
SU(3):   STRXui $xzr, renamable $x8, 14 :: (store 8 into %ir.nelt_tot)
SU(4):   $w8 = MOVZWi 1, 0

********** MI Scheduling **********
main:%bb.22 if.then53
  From: renamable $x8 = ADRP target-flags(aarch64-page) @ntot
    To: BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(2): Data Latency=4 Reg=$w1
SU(2):   STRWui renamable $w1, $sp, 26 :: (store 4 into %stack.20)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$w1
SU(3):   $x0 = ADRP target-flags(aarch64-page) @ta1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 5 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @ta1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $d0 = FMOVD0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w1, $sp, 26 :: (store 4 into %stack.20)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
SU(1):   renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(3):   $x0 = ADRP target-flags(aarch64-page) @ta1
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
SU(5):   $d0 = FMOVD0
SU(2):   STRWui renamable $w1, $sp, 26 :: (store 4 into %stack.20)

Fixup kills for %bb.22
********** MI Scheduling **********
main:%bb.23 for.cond54
  From: STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
    To: Bcc 12, %bb.27, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.27, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
SU(2):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv

Fixup kills for %bb.23
********** MI Scheduling **********
main:%bb.24 for.body56
  From: renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 0, %bb.26, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 0, %bb.26, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv

Fixup kills for %bb.24
********** MI Scheduling **********
main:%bb.25 if.then58
  From: renamable $w0 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
    To: BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$w0
SU(1):   STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.20)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$w0
ExitSU:   BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w0 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.20)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $w0 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(1):   STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.20)

Fixup kills for %bb.25
********** MI Scheduling **********
main:%bb.26 for.inc60
  From: renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.23
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.23
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0

Fixup kills for %bb.26
Fixup kills for %bb.27
********** MI Scheduling **********
main:%bb.28 if.end63
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.30
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.28 if.end63
  From: renamable $w0 = LDURWi $fp, -104 :: (dereferenceable load 4 from %ir.ifmortar)
    To: BL @convect, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDURWi $fp, -104 :: (dereferenceable load 4 from %ir.ifmortar)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$w0
SU(1):   STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.20)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$w0
ExitSU:   BL @convect, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w0 = LDURWi $fp, -104 :: (dereferenceable load 4 from %ir.ifmortar)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.20)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   renamable $w0 = LDURWi $fp, -104 :: (dereferenceable load 4 from %ir.ifmortar)
SU(1):   STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.20)

Fixup kills for %bb.28
Fixup kills for %bb.29
********** MI Scheduling **********
main:%bb.30 if.end66
  From: $x0 = ADRP target-flags(aarch64-page) @tmort
    To: BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @tmort
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tmort, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @ta1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @tmort
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @ta1
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tmort, 0
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @tmort
SU(2):   $x1 = ADRP target-flags(aarch64-page) @ta1
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tmort, 0
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0

Fixup kills for %bb.30
********** MI Scheduling **********
main:%bb.31 for.cond67
  From: renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.33, implicit $nzcv
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $w1 = MOVZWi 1000, 0, implicit-def $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x3 = ADRP target-flags(aarch64-page) @ta2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x3
SU(6):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @ta2, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x3
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.33, implicit $nzcv
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 4 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 5 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x3 = ADRP target-flags(aarch64-page) @ta2
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $w1 = MOVZWi 1000, 0, implicit-def $x1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @ta2, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nelt
SU(0):   renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(5):   $x3 = ADRP target-flags(aarch64-page) @ta2
SU(4):   $w1 = MOVZWi 1000, 0, implicit-def $x1
SU(6):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @ta2, 0
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.31
********** MI Scheduling **********
main:%bb.32 for.body69
  From: renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.31
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.31
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.ie)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.ie)

********** MI Scheduling **********
main:%bb.32 for.body69
  From: renamable $x8 = LDURSWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
    To: BL @laplacian, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x8
    SU(3): Data Latency=4 Reg=$x8
SU(1):   $x16 = ADRP target-flags(aarch64-page) @size_e
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(7): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   renamable $w2 = LDRWroX renamable $x16, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx75)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=$x16
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(4): Data Latency=4 Reg=$w2
    SU(7): Anti Latency=0
    SU(5): Anti Latency=0
SU(4):   STRWui renamable $w2, $sp, 22 :: (store 4 into %stack.22)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w2
SU(5):   renamable $x8 = MADDXrrr renamable $x8, renamable $x1, $xzr
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(9): Data Latency=1 Reg=$x8
    SU(6): Data Latency=1 Reg=$x8
    SU(9): Anti Latency=0
SU(6):   $x0 = ADDXrs renamable $x3, renamable $x8, 0
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(10): Data Latency=1 Reg=$x0
SU(7):   $x16 = ADRP target-flags(aarch64-page) @ta1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x16
SU(8):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x16
  Successors:
    SU(9): Data Latency=1 Reg=$x16
SU(9):   $x1 = ADDXrs renamable $x16, renamable $x8, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=$x16
    SU(5): Data Latency=1 Reg=$x8
    SU(5): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(10): Data Latency=1 Reg=$x1
SU(10):   STPXi renamable $x1, renamable $x0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$x1
    SU(6): Data Latency=1 Reg=$x0
ExitSU:   BL @laplacian, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x16 = ADRP target-flags(aarch64-page) @size_e
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w2 = LDRWroX renamable $x16, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx75)
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 7 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 8
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x16 = ADRP target-flags(aarch64-page) @ta1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 5 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x8 = MADDXrrr renamable $x8, renamable $x1, $xzr
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 8 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 8
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  Ready @7c
  TopQ.A TopLatency SU(8) 5c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 9 4 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x0 = ADDXrs renamable $x3, renamable $x8, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 9 
  TopQ.A RemainingLatency 0 + 9c > CritPath 8
  Cand SU(4) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x1 = ADDXrs renamable $x16, renamable $x8, 0
  Ready @9c
  TopQ.A TopLatency SU(9) 6c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 10 
  TopQ.A RemainingLatency 0 + 10c > CritPath 8
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STRWui renamable $w2, $sp, 22 :: (store 4 into %stack.22)
  Ready @10c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STPXi renamable $x1, renamable $x0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $x8 = LDURSWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
SU(1):   $x16 = ADRP target-flags(aarch64-page) @size_e
SU(2):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
SU(3):   renamable $w2 = LDRWroX renamable $x16, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx75)
SU(7):   $x16 = ADRP target-flags(aarch64-page) @ta1
SU(5):   renamable $x8 = MADDXrrr renamable $x8, renamable $x1, $xzr
SU(8):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
SU(6):   $x0 = ADDXrs renamable $x3, renamable $x8, 0
SU(9):   $x1 = ADDXrs renamable $x16, renamable $x8, 0
SU(4):   STRWui renamable $w2, $sp, 22 :: (store 4 into %stack.22)
SU(10):   STPXi renamable $x1, renamable $x0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)

Fixup kills for %bb.32
Fixup kills for %bb.33
********** MI Scheduling **********
main:%bb.34 for.cond79
  From: renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.45, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.45, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nelt
SU(0):   renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.34
Fixup kills for %bb.35
********** MI Scheduling **********
main:%bb.36 for.cond82
  From: renamable $w8 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.44, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.44, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   renamable $w8 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.36
Fixup kills for %bb.37
********** MI Scheduling **********
main:%bb.38 for.cond85
  From: renamable $w8 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.43, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.43, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $w8 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.38
Fixup kills for %bb.39
********** MI Scheduling **********
main:%bb.40 for.cond88
  From: renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.42, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.42, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.40
********** MI Scheduling **********
main:%bb.41 for.body90
  From: renamable $x8 = LDURSWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.40
 RegionInstrs: 21
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x16, renamable $x17 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x16
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$x17
SU(2):   renamable $x8 = MADDXrrr renamable $x8, renamable $x1, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
    SU(4): Data Latency=1 Reg=$x8
SU(3):   renamable $x16 = MADDXrrr renamable $x16, renamable $x20, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x16
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x16
    SU(6): Data Latency=1 Reg=$x16
SU(4):   $x18 = ADDXrs renamable $x19, renamable $x8, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x18
    SU(5): Anti Latency=0
SU(5):   $x8 = ADDXrs renamable $x3, renamable $x8, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x8
SU(6):   $x18 = ADDXrs renamable $x18, renamable $x16, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x18
    SU(3): Data Latency=1 Reg=$x16
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x18
    SU(9): Anti Latency=0
SU(7):   renamable $x0 = LDURSWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$x0
    SU(20): Ord  Latency=0 Memory
SU(8):   $x8 = ADDXrs renamable $x8, renamable $x16, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x16
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x8
    SU(9): Anti Latency=0
SU(9):   renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(8): Anti Latency=0
    SU(6): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(17): Data Latency=4 Reg=$w16
    SU(20): Ord  Latency=0 Memory
SU(10):   renamable $x17 = ADDXrs renamable $x17, renamable $x17, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x17
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x17
SU(11):   renamable $x0 = UBFMXri renamable $x0, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x0
  Successors:
    SU(19): Data Latency=1 Reg=$x0
    SU(16): Data Latency=1 Reg=$x0
    SU(15): Data Latency=1 Reg=$x0
SU(12):   renamable $x17 = UBFMXri renamable $x17, 61, 60
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x17
  Successors:
    SU(14): Data Latency=1 Reg=$x17
    SU(13): Data Latency=1 Reg=$x17
SU(13):   $x18 = ADDXrs renamable $x18, renamable $x17, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(6): Data Latency=1 Reg=$x18
    SU(6): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x17
  Successors:
    SU(19): Data Latency=1 Reg=$x18
    SU(15): Data Latency=1 Reg=$x18
SU(14):   $x8 = ADDXrs renamable $x8, renamable $x17, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(8): Data Latency=1 Reg=$x8
    SU(8): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x17
  Successors:
    SU(17): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x8
SU(15):   renamable $d0 = LDRDroX renamable $x18, renamable $x0, 0, 0 :: (load 8 from %ir.arrayidx98)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(13): Data Latency=1 Reg=$x18
    SU(11): Data Latency=1 Reg=$x0
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=4 Reg=$d0
    SU(19): Ord  Latency=0 Memory
SU(16):   renamable $d1 = LDRDroX renamable $x8, renamable $x0, 0, 0 :: (load 8 from %ir.arrayidx106)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(14): Data Latency=1 Reg=$x8
    SU(11): Data Latency=1 Reg=$x0
  Successors:
    SU(18): Data Latency=4 Reg=$d1
    SU(17): Anti Latency=0
SU(17):   renamable $w8 = nsw ADDWri renamable $w16, 1, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(16): Anti Latency=0
    SU(14): Out  Latency=1
    SU(9): Data Latency=4 Reg=$w16
  Successors:
    SU(20): Data Latency=1 Reg=$w8
SU(18):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(16): Data Latency=4 Reg=$d1
    SU(15): Out  Latency=1
    SU(15): Data Latency=4 Reg=$d0
  Successors:
    SU(19): Data Latency=1 Reg=$d0
SU(19):   STRDroX renamable $d0, renamable $x18, renamable $x0, 0, 0 :: (store 8 into %ir.arrayidx114)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=$d0
    SU(15): Ord  Latency=0 Memory
    SU(13): Data Latency=1 Reg=$x18
    SU(11): Data Latency=1 Reg=$x0
SU(20):   STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(17): Data Latency=1 Reg=$w8
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
ExitSU:   B %bb.40
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 13
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 13
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 7 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 13
  Cand SU(7) ORDER                              
  Cand SU(1) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16, renamable $x17 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 3 10 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $x0 = LDURSWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 11 3 10 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = MADDXrrr renamable $x8, renamable $x1, $xzr
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 11 
Queue TopQ.A: 4 3 10 
  TopQ.A RemainingLatency 0 + 5c > CritPath 13
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x16 = MADDXrrr renamable $x16, renamable $x20, $xzr
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 10 11 
  TopQ.A RemainingLatency 0 + 6c > CritPath 13
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x18 = ADDXrs renamable $x19, renamable $x8, 0
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  TopQ.A BotLatency SU(4) 8c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 10 6 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(10) TOP-PATH                  8 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x8 = ADDXrs renamable $x3, renamable $x8, 0
  Ready @7c
  TopQ.A BotLatency SU(5) 8c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 10 6 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(10) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x17 = ADDXrs renamable $x17, renamable $x17, 2
  Ready @8c
  TopQ.A BotLatency SU(10) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 8 6 12 
  TopQ.A RemainingLatency 0 + 9c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(8) TOP-PATH                  7 cycles 
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x18 = ADDXrs renamable $x18, renamable $x16, 0
  Ready @9c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 8 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(8) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x8 = ADDXrs renamable $x8, renamable $x16, 0
  Ready @10c
  TopQ.A BotLatency SU(8) 7c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 12 9 
  TopQ.A RemainingLatency 0 + 11c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(12) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) renamable $x17 = UBFMXri renamable $x17, 61, 60
  Ready @11c
  TopQ.A BotLatency SU(12) 7c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 9 14 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 13
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x0 = UBFMXri renamable $x0, 61, 60
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 9 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 13
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) $x18 = ADDXrs renamable $x18, renamable $x17, 0
  Ready @13c
  TopQ.A TopLatency SU(13) 7c
  TopQ.A BotLatency SU(13) 6c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 9 15 
  TopQ.A RemainingLatency 0 + 14c > CritPath 13
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) $x8 = ADDXrs renamable $x8, renamable $x17, 0
  Ready @14c
  TopQ.A BotLatency SU(14) 6c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 14
  Executed: 15c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 9 16 
  TopQ.A RemainingLatency 0 + 15c > CritPath 13
  Cand SU(15) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 15
  Executed: 16c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 16 
  TopQ.A RemainingLatency 0 + 16c > CritPath 13
  Cand SU(15) ORDER                              
Pick Top ORDER     
Scheduling SU(15) renamable $d0 = LDRDroX renamable $x18, renamable $x0, 0, 0 :: (load 8 from %ir.arrayidx98)
  Ready @16c
  TopQ.A TopLatency SU(15) 8c
  TopQ.A BotLatency SU(15) 5c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 16
  Executed: 17c
  Critical: 16c, 16 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $d1 = LDRDroX renamable $x8, renamable $x0, 0, 0 :: (load 8 from %ir.arrayidx106)
  Ready @17c
  TopQ.A BotLatency SU(16) 5c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 17
  Executed: 18c
  Critical: 17c, 17 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 19 TopQ.A
Queue TopQ.P: 18 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) renamable $w8 = nsw ADDWri renamable $w16, 1, 0
  Ready @19c
  TopQ.A TopLatency SU(17) 10c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 18
  Executed: 20c
  Critical: 18c, 18 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 18 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  Ready @20c
  TopQ.A TopLatency SU(20) 11c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 19
  Executed: 21c
  Critical: 19c, 19 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  Ready @21c
  TopQ.A TopLatency SU(18) 12c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 20
  Executed: 22c
  Critical: 20c, 20 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) STRDroX renamable $d0, renamable $x18, renamable $x0, 0, 0 :: (store 8 into %ir.arrayidx114)
  Ready @22c
  TopQ.A TopLatency SU(19) 13c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 21
  Executed: 23c
  Critical: 21c, 21 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   renamable $x8 = LDURSWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $x16, renamable $x17 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
SU(7):   renamable $x0 = LDURSWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(2):   renamable $x8 = MADDXrrr renamable $x8, renamable $x1, $xzr
SU(3):   renamable $x16 = MADDXrrr renamable $x16, renamable $x20, $xzr
SU(4):   $x18 = ADDXrs renamable $x19, renamable $x8, 0
SU(5):   $x8 = ADDXrs renamable $x3, renamable $x8, 0
SU(10):   renamable $x17 = ADDXrs renamable $x17, renamable $x17, 2
SU(6):   $x18 = ADDXrs renamable $x18, renamable $x16, 0
SU(8):   $x8 = ADDXrs renamable $x8, renamable $x16, 0
SU(12):   renamable $x17 = UBFMXri renamable $x17, 61, 60
SU(11):   renamable $x0 = UBFMXri renamable $x0, 61, 60
SU(13):   $x18 = ADDXrs renamable $x18, renamable $x17, 0
SU(14):   $x8 = ADDXrs renamable $x8, renamable $x17, 0
SU(9):   renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(15):   renamable $d0 = LDRDroX renamable $x18, renamable $x0, 0, 0 :: (load 8 from %ir.arrayidx98)
SU(16):   renamable $d1 = LDRDroX renamable $x8, renamable $x0, 0, 0 :: (load 8 from %ir.arrayidx106)
SU(17):   renamable $w8 = nsw ADDWri renamable $w16, 1, 0
SU(20):   STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
SU(18):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
SU(19):   STRDroX renamable $d0, renamable $x18, renamable $x0, 0, 0 :: (store 8 into %ir.arrayidx114)

Fixup kills for %bb.41
********** MI Scheduling **********
main:%bb.42 for.inc118
  From: renamable $w8 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.38
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -68 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.38
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -68 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   renamable $w8 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -68 :: (store 4 into %ir.j)

Fixup kills for %bb.42
********** MI Scheduling **********
main:%bb.43 for.inc121
  From: renamable $w8 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.36
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -72 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.36
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -72 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   renamable $w8 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -72 :: (store 4 into %ir.k)

Fixup kills for %bb.43
********** MI Scheduling **********
main:%bb.44 for.inc124
  From: renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.34
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.34
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.ie)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.ie)

Fixup kills for %bb.44
********** MI Scheduling **********
main:%bb.45 for.end126
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.47
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.47
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.45 for.end126
  From: $x0 = ADRP target-flags(aarch64-page) @rmor
    To: BL @transfb, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @rmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @trhs
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @transfb, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @rmor
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @trhs
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @rmor
SU(2):   $x1 = ADRP target-flags(aarch64-page) @trhs
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0

Fixup kills for %bb.45
Fixup kills for %bb.46
********** MI Scheduling **********
main:%bb.47 if.end129
  From: STURWi $wzr, $fp, -56 :: (store 4 into %ir.ie)
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -56 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w17 = MOVZWi 24, 0, implicit-def $x17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x18 = ADRP target-flags(aarch64-page) @cbc
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x18
SU(3):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x18 = ADRP target-flags(aarch64-page) @cbc
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w17 = MOVZWi 24, 0, implicit-def $x17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -56 :: (store 4 into %ir.ie)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.47 ***
SU(2):   $x18 = ADRP target-flags(aarch64-page) @cbc
SU(1):   $w17 = MOVZWi 24, 0, implicit-def $x17
SU(3):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
SU(0):   STURWi $wzr, $fp, -56 :: (store 4 into %ir.ie)

Fixup kills for %bb.47
********** MI Scheduling **********
main:%bb.48 for.cond130
  From: renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.55, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.55, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.48 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nelt
SU(0):   renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.48
Fixup kills for %bb.49
********** MI Scheduling **********
main:%bb.50 for.cond133
  From: renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.iside)
    To: Bcc 12, %bb.54, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.54, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.iside)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.iside)
SU(1):   dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv

Fixup kills for %bb.50
********** MI Scheduling **********
main:%bb.51 for.body135
  From: renamable $x16, renamable $x8 = LDPSWi $fp, -15 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
    To: CBNZW killed renamable $w8, %bb.53
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16, renamable $x8 = LDPSWi $fp, -15 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=$x16
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x8 = MADDXrrr renamable $x8, renamable $x17, renamable $x18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1 :: (load 4 from %ir.arrayidx139)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
    SU(0): Data Latency=4 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBNZW killed renamable $w8, %bb.53
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x16, renamable $x8 = LDPSWi $fp, -15 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x8 = MADDXrrr renamable $x8, renamable $x17, renamable $x18
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1 :: (load 4 from %ir.arrayidx139)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   renamable $x16, renamable $x8 = LDPSWi $fp, -15 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
SU(1):   renamable $x8 = MADDXrrr renamable $x8, renamable $x17, renamable $x18
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1 :: (load 4 from %ir.arrayidx139)

Fixup kills for %bb.51
********** MI Scheduling **********
main:%bb.52 if.then141
  From: $x18 = ADRP target-flags(aarch64-page) @cbc
    To: PCN_STACKMAP 44, 0, 0, $fp, -100, 1, 8, $fp, -328, 1, 8, $fp, -328, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, 1, 4, $fp, -336, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4), (load 8 from %stack.20), (load 4 from %stack.21)
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x18 = ADRP target-flags(aarch64-page) @cbc
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x18
SU(1):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x18
ExitSU:   PCN_STACKMAP 44, 0, 0, $fp, -100, 1, 8, $fp, -328, 1, 8, $fp, -328, 0, $fp, -64, 0, $fp, -56, 0, $fp, -104, 0, $fp, -60, 0, $fp, -68, 0, $fp, -72, 0, $fp, -80, 0, $fp, -96, 0, $fp, -52, 0, $fp, -120, 0, $fp, -304, 0, $fp, -88, 0, $fp, -208, 0, $fp, -108, 1, 4, $fp, -336, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.6.i, align 4), (load 8 from %stack.4.ie, align 4), (load 8 from %stack.13.ifmortar, align 4), (load 8 from %stack.5.iside, align 4), (load 8 from %stack.7.j, align 4), (load 8 from %stack.8.k, align 4), (load 8 from %stack.9.mflops), (load 8 from %stack.11.nelt_tot), (load 8 from %stack.3.step, align 4), (load 8 from %stack.15.t2), (load 8 from %stack.17.t_names, align 16), (load 8 from %stack.10.tmax), (load 8 from %stack.16.trecs, align 16), (load 8 from %stack.14.verified, align 4), (load 8 from %stack.20), (load 4 from %stack.21)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x18 = ADRP target-flags(aarch64-page) @cbc
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   $x18 = ADRP target-flags(aarch64-page) @cbc
SU(1):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0

********** MI Scheduling **********
main:%bb.52 if.then141
  From: renamable $w1, $w8 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
    To: BL @facev, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1, $w8 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$w1
    SU(1): Out  Latency=1
    SU(1): Data Latency=0 Reg=$w8
SU(1):   $w8 = KILL $w8, implicit-def $x8
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=0 Reg=$w8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=0 Reg=$x8
SU(2):   $x8 = SBFMXri $x8, 0, 31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=0 Reg=$x8
  Successors:
    SU(5): Data Latency=1 Reg=$x8
SU(3):   STRWui renamable $w1, $sp, 24 :: (store 4 into %stack.21)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$w1
SU(4):   $w16 = MOVZWi 1000, 0, implicit-def $x16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Data Latency=1 Reg=$x16
SU(5):   renamable $x0 = MADDXrrr renamable $x8, renamable $x16, renamable $x19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(6): Data Latency=1 Reg=$x0
SU(6):   STRXui renamable $x0, $sp, 13 :: (store 8 into %stack.20)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$x0
SU(7):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @facev, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1, $w8 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 7 4 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(7) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = KILL $w8, implicit-def $x8
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 2 
Queue TopQ.A: 7 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(7) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $w16 = MOVZWi 1000, 0, implicit-def $x16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 7 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(7) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x8 = SBFMXri $x8, 0, 31
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 7 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(7) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x0 = MADDXrrr renamable $x8, renamable $x16, renamable $x19
  Ready @3c
  TopQ.A TopLatency SU(5) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $d0 = FMOVD0
  Ready @4c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRWui renamable $w1, $sp, 24 :: (store 4 into %stack.21)
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRXui renamable $x0, $sp, 13 :: (store 8 into %stack.20)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   renamable $w1, $w8 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
SU(1):   $w8 = KILL $w8, implicit-def $x8
SU(4):   $w16 = MOVZWi 1000, 0, implicit-def $x16
SU(2):   $x8 = SBFMXri $x8, 0, 31
SU(5):   renamable $x0 = MADDXrrr renamable $x8, renamable $x16, renamable $x19
SU(7):   $d0 = FMOVD0
SU(3):   STRWui renamable $w1, $sp, 24 :: (store 4 into %stack.21)
SU(6):   STRXui renamable $x0, $sp, 13 :: (store 8 into %stack.20)

Fixup kills for %bb.52
********** MI Scheduling **********
main:%bb.53 for.inc146
  From: renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.iside)
    To: B %bb.50
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -60 :: (store 4 into %ir.iside)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.50
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.iside)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -60 :: (store 4 into %ir.iside)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.iside)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -60 :: (store 4 into %ir.iside)

Fixup kills for %bb.53
********** MI Scheduling **********
main:%bb.54 for.inc149
  From: renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.48
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.48
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.ie)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   renamable $w8 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.ie)

Fixup kills for %bb.54
********** MI Scheduling **********
main:%bb.55 for.end151
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.57
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.57
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.55 for.end151
  From: renamable $w0 = LDURWi $fp, -104 :: (dereferenceable load 4 from %ir.ifmortar)
    To: BL @diffusion, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDURWi $fp, -104 :: (dereferenceable load 4 from %ir.ifmortar)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$w0
SU(1):   STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.20)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$w0
ExitSU:   BL @diffusion, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w0 = LDURWi $fp, -104 :: (dereferenceable load 4 from %ir.ifmortar)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.20)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   renamable $w0 = LDURWi $fp, -104 :: (dereferenceable load 4 from %ir.ifmortar)
SU(1):   STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.20)

********** MI Scheduling **********
main:%bb.55 for.end151
  From: renamable $x8 = ADRP target-flags(aarch64-page) @nmor
    To: BL @col2, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(2): Data Latency=4 Reg=$w2
SU(2):   STRWui renamable $w2, $sp, 26 :: (store 4 into %stack.20)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$w2
SU(3):   $x0 = ADRP target-flags(aarch64-page) @rmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x1 = ADRP target-flags(aarch64-page) @tmmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x1
SU(6):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @col2, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 5 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @rmor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x1 = ADRP target-flags(aarch64-page) @tmmor
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0
  Ready @5c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w2, $sp, 26 :: (store 4 into %stack.20)
  Ready @6c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
SU(1):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(3):   $x0 = ADRP target-flags(aarch64-page) @rmor
SU(5):   $x1 = ADRP target-flags(aarch64-page) @tmmor
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
SU(6):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0
SU(2):   STRWui renamable $w2, $sp, 26 :: (store 4 into %stack.20)

Fixup kills for %bb.55
Fixup kills for %bb.56
********** MI Scheduling **********
main:%bb.57 if.end154
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.59
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.59
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.57 if.end154
  From: renamable $x8 = ADRP target-flags(aarch64-page) @ntot
    To: BL @add2, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(2): Data Latency=4 Reg=$w2
SU(2):   STRWui renamable $w2, $sp, 26 :: (store 4 into %stack.20)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$w2
SU(3):   $x0 = ADRP target-flags(aarch64-page) @ta1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x1 = ADRP target-flags(aarch64-page) @t
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x1
SU(6):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @add2, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 5 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @ta1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x1 = ADRP target-flags(aarch64-page) @t
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  Ready @5c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w2, $sp, 26 :: (store 4 into %stack.20)
  Ready @6c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
SU(1):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(3):   $x0 = ADRP target-flags(aarch64-page) @ta1
SU(5):   $x1 = ADRP target-flags(aarch64-page) @t
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
SU(6):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
SU(2):   STRWui renamable $w2, $sp, 26 :: (store 4 into %stack.20)

Fixup kills for %bb.57
Fixup kills for %bb.58
********** MI Scheduling **********
main:%bb.59 if.end157
  From: renamable $x16 = ADRP target-flags(aarch64-page) @time
    To: CBZW killed renamable $w8, %bb.63
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = ADRP target-flags(aarch64-page) @time
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(6): Data Latency=1 Reg=$x16
    SU(1): Data Latency=1 Reg=$x16
SU(1):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x16
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
    SU(6): Ord  Latency=0 Memory
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Data Latency=4 Reg=$d1
    SU(4): Anti Latency=0
SU(4):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(5):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STRDui renamable $d0, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=1 Reg=$x16
ExitSU:   CBZW killed renamable $w8, %bb.63
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x16 = ADRP target-flags(aarch64-page) @time
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  Ready @1c
  TopQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  Ready @3c
  TopQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 7 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FADDDrr renamable $d0, renamable $d1
  Ready @7c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRDui renamable $d0, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @8c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   renamable $x16 = ADRP target-flags(aarch64-page) @time
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @dtime
SU(1):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
SU(3):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
SU(4):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
SU(5):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
SU(6):   STRDui renamable $d0, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)

Fixup kills for %bb.59
********** MI Scheduling **********
main:%bb.60 land.lhs.true
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 1, %bb.63, implicit $nzcv
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(5): Data Latency=4 Reg=$w8
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @fre
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w16
    SU(3): Data Latency=4 Reg=$w16
SU(3):   renamable $w17 = SDIVWr renamable $w8, renamable $w16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Data Latency=1 Reg=$w17
    SU(4): Anti Latency=0
SU(4):   renamable $w16 = nsw MADDWrrr renamable $w17, renamable $w16, $wzr
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=$w17
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w16
  Successors:
    SU(5): Data Latency=1 Reg=$w16
SU(5):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.63, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @fre
  Ready @0c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w17 = SDIVWr renamable $w8, renamable $w16
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w16 = nsw MADDWrrr renamable $w17, renamable $w16, $wzr
  Ready @7c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @8c
  TopQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.60 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @fre
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
SU(3):   renamable $w17 = SDIVWr renamable $w8, renamable $w16
SU(4):   renamable $w16 = nsw MADDWrrr renamable $w17, renamable $w16, $wzr
SU(5):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.60
********** MI Scheduling **********
main:%bb.61 if.then161
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 0, %bb.64, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @niter
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 0, %bb.64, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @niter
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.61 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @niter
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.61
********** MI Scheduling **********
main:%bb.62 if.then163
  From: renamable $w1 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
    To: BL @adaptation, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$w1
SU(1):   STRWui renamable $w1, $sp, 26 :: (store 4 into %stack.20)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$w1
SU(2):   $x0 = SUBXri $fp, 104, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adaptation, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = SUBXri $fp, 104, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui renamable $w1, $sp, 26 :: (store 4 into %stack.20)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   renamable $w1 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
SU(2):   $x0 = SUBXri $fp, 104, 0
SU(1):   STRWui renamable $w1, $sp, 26 :: (store 4 into %stack.20)

Fixup kills for %bb.62
Fixup kills for %bb.63
********** MI Scheduling **********
main:%bb.64 if.end166
  From: renamable $x8 = ADRP target-flags(aarch64-page) @nelt
    To: B %bb.20
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $s0 = LDRSui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nelt, implicit-def $d0 :: (dereferenceable load 4 from @nelt)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
    SU(2): Anti Latency=0
SU(2):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w8
    SU(10): Ord  Latency=0 Memory
SU(3):   $x16 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(9): Data Latency=1 Reg=$x16
    SU(4): Data Latency=1 Reg=$x16
SU(4):   renamable $d1 = LDRDui renamable $x16, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=$x16
  Successors:
    SU(8): Data Latency=4 Reg=$d1
    SU(9): Ord  Latency=0 Memory
SU(5):   renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(7): Data Latency=0 Reg=$q0
SU(6):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    SU(10): Data Latency=1 Reg=$w8
SU(7):   renamable $d0 = SCVTFv1i64 renamable $d0, implicit $q0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(5): Data Latency=0 Reg=$q0
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
SU(8):   renamable $d0 = FADDDrr renamable $d1, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(4): Data Latency=4 Reg=$d1
  Successors:
    SU(9): Data Latency=1 Reg=$d0
SU(9):   STRDui renamable $d0, renamable $x16, 14 :: (store 8 into %ir.nelt_tot)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$d0
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=1 Reg=$x16
SU(10):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.step)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w8
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @nelt
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $s0 = LDRSui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nelt, implicit-def $d0 :: (dereferenceable load 4 from @nelt)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 8
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x16 = SUBXri $fp, 208, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 8
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d1 = LDRDui renamable $x16, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  Ready @4c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = SCVTFv1i64 renamable $d0, implicit $q0
  Ready @6c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d0 = FADDDrr renamable $d1, renamable $d0
  Ready @8c
  TopQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 
  TopQ.A RemainingLatency 0 + 9c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) STRDui renamable $d0, renamable $x16, 14 :: (store 8 into %ir.nelt_tot)
  Ready @9c
  TopQ.A TopLatency SU(9) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.step)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nelt
SU(1):   renamable $s0 = LDRSui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nelt, implicit-def $d0 :: (dereferenceable load 4 from @nelt)
SU(3):   $x16 = SUBXri $fp, 208, 0
SU(2):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.step)
SU(4):   renamable $d1 = LDRDui renamable $x16, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
SU(5):   renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
SU(7):   renamable $d0 = SCVTFv1i64 renamable $d0, implicit $q0
SU(6):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(8):   renamable $d0 = FADDDrr renamable $d1, renamable $d0
SU(9):   STRDui renamable $d0, renamable $x16, 14 :: (store 8 into %ir.nelt_tot)
SU(10):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.step)

Fixup kills for %bb.64
********** MI Scheduling **********
main:%bb.65 for.end170
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.78
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.78
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.65 for.end170
  From: renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
    To: BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp
 RegionInstrs: 55
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 15
  Successors:
    SU(2): Out  Latency=1
    SU(11): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(1):   $w16 = MOVZWi 125, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
    SU(22): Out  Latency=1
    SU(5): Data Latency=1 Reg=$w16
SU(2):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 14
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(11): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w8
    SU(11): Anti Latency=0
SU(3):   renamable $d0, renamable $d2 = LDPDi renamable $x19, 14 :: (dereferenceable load 8 from %ir.nelt_tot), (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(9): Out  Latency=1
    SU(54): Out  Latency=1
    SU(9): Data Latency=4 Reg=$d0
    SU(18): Data Latency=4 Reg=$q0
    SU(19): Data Latency=4 Reg=$d2
    SU(15): Data Latency=4 Reg=$d2
    SU(54): Data Latency=4 Reg=$q2
    SU(53): Anti Latency=0
SU(4):   renamable $x17 = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(24): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x17
SU(5):   renamable $w8 = MADDWrrr renamable $w8, renamable $w16, $wzr
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
    SU(1): Data Latency=1 Reg=$w16
  Successors:
    SU(7): Out  Latency=1
    SU(11): Out  Latency=1
    SU(7): Data Latency=1 Reg=$w8
    SU(11): Anti Latency=0
    SU(22): Anti Latency=0
SU(6):   renamable $w20 = LDURSBWi $fp, -100 :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(50): Data Latency=4 Reg=$w20
SU(7):   renamable $w8 = ADDWri renamable $w8, 125, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$w8
  Successors:
    SU(11): Out  Latency=1
    SU(8): Data Latency=1 Reg=$w8
    SU(11): Anti Latency=0
SU(8):   renamable $d1 = SCVTFUWDri renamable $w8
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(7): Data Latency=1 Reg=$w8
  Successors:
    SU(10): Out  Latency=1
    SU(18): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d1
    SU(11): Anti Latency=0
SU(9):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(8): Data Latency=1 Reg=$d1
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
  Successors:
    SU(16): Out  Latency=1
    SU(54): Out  Latency=1
    SU(16): Data Latency=1 Reg=$d0
    SU(18): Data Latency=1 Reg=$q0
    SU(54): Anti Latency=0
    SU(10): Anti Latency=0
    SU(18): Anti Latency=0
SU(10):   renamable $d1 = LDRDui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(9): Anti Latency=0
    SU(8): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x17
  Successors:
    SU(15): Out  Latency=1
    SU(18): Out  Latency=1
    SU(15): Data Latency=4 Reg=$d1
    SU(24): Anti Latency=0
SU(11):   renamable $x8 = ADRP target-flags(aarch64-page) @niter
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
    SU(7): Anti Latency=0
    SU(5): Out  Latency=1
    SU(5): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(20): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x8
SU(12):   renamable $w6 = LDURWi $fp, -108 :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(39): Data Latency=4 Reg=$w6
    SU(13): Data Latency=4 Reg=$w6
SU(13):   STRWui renamable $w6, $sp, 26 :: (store 4 into %stack.20)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(12): Data Latency=4 Reg=$w6
SU(14):   renamable $w5 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(11): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(53): Data Latency=4 Reg=$w5
    SU(20): Anti Latency=0
SU(15):   renamable $d1 = FMULDrr renamable $d2, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$d1
    SU(3): Data Latency=4 Reg=$d2
  Successors:
    SU(18): Out  Latency=1
    SU(16): Data Latency=1 Reg=$d1
    SU(18): Anti Latency=0
SU(16):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(15): Data Latency=1 Reg=$d1
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
  Successors:
    SU(54): Out  Latency=1
    SU(19): Data Latency=1 Reg=$d0
    SU(17): Data Latency=1 Reg=$d0
    SU(18): Data Latency=1 Reg=$q0
    SU(54): Anti Latency=0
    SU(18): Anti Latency=0
SU(17):   STRDui renamable $d0, renamable $x19, 16 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(16): Data Latency=1 Reg=$d0
  Successors:
    SU(54): Anti Latency=0
    SU(53): Anti Latency=0
SU(18):   $q1 = ORRv16i8 $q0, $q0
  # preds left       : 9
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(16): Data Latency=1 Reg=$q0
    SU(16): Anti Latency=0
    SU(15): Out  Latency=1
    SU(15): Anti Latency=0
    SU(10): Out  Latency=1
    SU(9): Data Latency=1 Reg=$q0
    SU(9): Anti Latency=0
    SU(8): Out  Latency=1
    SU(3): Data Latency=4 Reg=$q0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(54): Anti Latency=0
SU(19):   STPDi $d0, renamable $d2, $sp, 11 :: (store 8 into %stack.21), (store 8 into %stack.22)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(16): Data Latency=1 Reg=$d0
    SU(3): Data Latency=4 Reg=$d2
  Successors:
    SU(54): Anti Latency=0
SU(20):   $x8 = ADRP target-flags(aarch64-page) @ua__str_33__none__
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(14): Anti Latency=0
    SU(11): Out  Latency=1
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x8
SU(21):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_33__none__, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x8
  Successors:
    SU(37): Out  Latency=1
    SU(36): Data Latency=1 Reg=$x8
SU(22):   $x16 = ADRP target-flags(aarch64-page) @ua__str_32__O3__mcmod
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(5): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x16
SU(23):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_32__O3__mcmod, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x16
  Successors:
    SU(41): Out  Latency=1
    SU(36): Data Latency=1 Reg=$x16
SU(24):   $x17 = ADRP target-flags(aarch64-page) @ua__str_31__g__Wall__
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(10): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x17
SU(25):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_31__g__Wall__, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x17
  Successors:
    SU(40): Data Latency=1 Reg=$x17
SU(26):   $x18 = ADRP target-flags(aarch64-page) @ua__str_30__I___commo
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x18
SU(27):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_30__I___commo, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x18
  Successors:
    SU(40): Data Latency=1 Reg=$x18
SU(28):   $x0 = ADRP target-flags(aarch64-page) @ua__str_29__lm_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x0
SU(29):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_29__lm_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x0
  Successors:
    SU(44): Out  Latency=1
    SU(43): Data Latency=1 Reg=$x0
SU(30):   $x4 = ADRP target-flags(aarch64-page) @ua__str_28___CC__
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x4
SU(31):   renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_28___CC__, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x4
  Successors:
    SU(52): Out  Latency=1
    SU(43): Data Latency=1 Reg=$x4
SU(32):   $x2 = ADRP target-flags(aarch64-page) @ua__str_27_gcc_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(33): Out  Latency=1
    SU(33): Data Latency=1 Reg=$x2
SU(33):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_27_gcc_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x2
  Successors:
    SU(48): Out  Latency=1
    SU(46): Data Latency=1 Reg=$x2
SU(34):   $x3 = ADRP target-flags(aarch64-page) @ua__str_26_03_Nov_201
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x3
SU(35):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_26_03_Nov_201, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(34): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x3
  Successors:
    SU(51): Out  Latency=1
    SU(46): Data Latency=1 Reg=$x3
SU(36):   STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(21): Data Latency=1 Reg=$x8
    SU(23): Data Latency=1 Reg=$x16
  Successors:
    SU(41): Anti Latency=0
    SU(37): Anti Latency=0
SU(37):   $x8 = ADRP target-flags(aarch64-page) @ua__str_25_3_3_1_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(36): Anti Latency=0
    SU(21): Out  Latency=1
  Successors:
    SU(38): Out  Latency=1
    SU(38): Data Latency=1 Reg=$x8
SU(38):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_25_3_3_1_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(37): Out  Latency=1
    SU(37): Data Latency=1 Reg=$x8
  Successors:
    SU(47): Data Latency=1 Reg=$x8
SU(39):   STRWui renamable $w6, $sp, 2 :: (store 4 into stack + 8)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(12): Data Latency=4 Reg=$w6
SU(40):   STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(25): Data Latency=1 Reg=$x17
    SU(27): Data Latency=1 Reg=$x18
SU(41):   $x16 = ADRP target-flags(aarch64-page) @ua__str_24_____coll__
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(36): Anti Latency=0
    SU(23): Out  Latency=1
  Successors:
    SU(42): Out  Latency=1
    SU(42): Data Latency=1 Reg=$x16
SU(42):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_24_____coll__, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(41): Out  Latency=1
    SU(41): Data Latency=1 Reg=$x16
  Successors:
    SU(49): Data Latency=1 Reg=$x16
SU(43):   STPXi renamable $x4, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(31): Data Latency=1 Reg=$x4
    SU(29): Data Latency=1 Reg=$x0
  Successors:
    SU(52): Anti Latency=0
    SU(44): Anti Latency=0
SU(44):   $x0 = ADRP target-flags(aarch64-page) @ua__str_23_UA_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(43): Anti Latency=0
    SU(29): Out  Latency=1
  Successors:
    SU(45): Out  Latency=1
    SU(45): Data Latency=1 Reg=$x0
SU(45):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_23_UA_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(46):   STPXi renamable $x3, renamable $x2, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(35): Data Latency=1 Reg=$x3
    SU(33): Data Latency=1 Reg=$x2
  Successors:
    SU(51): Anti Latency=0
    SU(48): Anti Latency=0
SU(47):   STRXui renamable $x8, $sp, 2 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(38): Data Latency=1 Reg=$x8
SU(48):   $w2 = MOVZWi 7, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(46): Anti Latency=0
    SU(33): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(49):   STRXui renamable $x16, $sp, 0 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(42): Data Latency=1 Reg=$x16
SU(50):   $w1 = ORRWrs $wzr, $w20, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=$w20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(51):   $w3 = ORRWrs $wzr, $wzr, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(46): Anti Latency=0
    SU(35): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(52):   $w4 = ORRWrs $wzr, $wzr, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(43): Anti Latency=0
    SU(31): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(53):   $w19 = ORRWrs $wzr, $w5, 0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(17): Anti Latency=0
    SU(14): Data Latency=4 Reg=$w5
    SU(3): Anti Latency=0
SU(54):   $q0 = ORRv16i8 $q2, $q2
  # preds left       : 9
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(19): Anti Latency=0
    SU(18): Anti Latency=0
    SU(17): Anti Latency=0
    SU(16): Out  Latency=1
    SU(16): Anti Latency=0
    SU(9): Out  Latency=1
    SU(9): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$q2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(54): Ord  Latency=1 Artificial
    SU(52): Ord  Latency=1 Artificial
    SU(51): Ord  Latency=1 Artificial
    SU(50): Ord  Latency=1 Artificial
    SU(48): Ord  Latency=1 Artificial
    SU(45): Ord  Latency=1 Artificial
    SU(18): Ord  Latency=1 Artificial
    SU(14): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 6 12 26 28 30 32 34 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 1 3 4 6 12 26 28 30 32 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(1) TOP-PATH                  11 cycles 
  Cand SU(2) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 1 3 4 6 12 26 28 30 32 
  TopQ.A RemainingLatency 0 + 2c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(1) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w16 = MOVZWi 125, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 34 32 3 4 6 12 26 28 30 
  TopQ.A RemainingLatency 0 + 3c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(3) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0, renamable $d2 = LDPDi renamable $x19, 14 :: (dereferenceable load 8 from %ir.nelt_tot), (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 34 32 30 4 6 12 26 28 
  TopQ.A RemainingLatency 0 + 4c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(4) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x17 = ADRP target-flags(aarch64-page) %const.3
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 32 30 28 6 12 26 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(28) ORDER                              
  Cand SU(6) TOP-PATH                  5 cycles 
  Cand SU(5) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $w8 = MADDWrrr renamable $w8, renamable $w16, $wzr
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 32 30 28 6 12 26 7 22 
  TopQ.A RemainingLatency 0 + 6c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(28) ORDER                              
  Cand SU(6) TOP-PATH                  5 cycles 
  Cand SU(7) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $w8 = ADDWri renamable $w8, 125, 0
  Ready @6c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 32 30 28 6 12 26 22 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(28) ORDER                              
  Cand SU(6) TOP-PATH                  5 cycles 
  Cand SU(8) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = SCVTFUWDri renamable $w8
  Ready @7c
  TopQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 32 30 28 6 12 26 22 9 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(28) ORDER                              
  Cand SU(6) TOP-PATH                  5 cycles 
  Cand SU(9) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @8c
  TopQ.A TopLatency SU(9) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 32 30 28 6 12 26 22 11 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(28) ORDER                              
  Cand SU(6) TOP-PATH                  5 cycles 
  Cand SU(10) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $d1 = LDRDui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  Ready @9c
  TopQ.A BotLatency SU(10) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 15 
Queue TopQ.A: 34 32 30 28 6 12 26 22 11 24 
  TopQ.A RemainingLatency 0 + 10c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(28) ORDER                              
  Cand SU(6) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $w20 = LDURSBWi $fp, -100 :: (dereferenceable load 1 from %ir.Class, align 4)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 15 50 
Queue TopQ.A: 34 32 30 28 24 12 26 22 11 
  TopQ.A RemainingLatency 0 + 11c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(28) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(11) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x8 = ADRP target-flags(aarch64-page) @niter
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 15 50 
Queue TopQ.A: 34 32 30 28 24 12 26 22 14 
  TopQ.A RemainingLatency 0 + 12c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(28) ORDER                              
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) renamable $w6 = LDURWi $fp, -108 :: (dereferenceable load 4 from %ir.verified)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 50 39 
Queue TopQ.A: 34 32 30 28 24 14 26 22 15 
  TopQ.A RemainingLatency 0 + 13c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(28) ORDER                              
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $w5 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  Ready @13c
  TopQ.A BotLatency SU(14) 4c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 39 
Queue TopQ.A: 34 32 30 28 24 15 26 22 20 50 
  TopQ.A RemainingLatency 0 + 14c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(28) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(20) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(20) $x8 = ADRP target-flags(aarch64-page) @ua__str_33__none__
  Ready @14c
  TopQ.A BotLatency SU(20) 4c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 39 
Queue TopQ.A: 34 32 30 28 24 15 26 22 50 21 
  TopQ.A RemainingLatency 0 + 15c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(28) ORDER                              
  Cand SU(22) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(22) $x16 = ADRP target-flags(aarch64-page) @ua__str_32__O3__mcmod
  Ready @15c
  TopQ.A BotLatency SU(22) 4c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 32 30 28 24 15 26 21 50 23 13 39 
  TopQ.A RemainingLatency 0 + 16c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(28) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(28) $x0 = ADRP target-flags(aarch64-page) @ua__str_29__lm_
  Ready @16c
  TopQ.A BotLatency SU(28) 4c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 32 30 39 24 15 26 21 50 23 13 29 
  TopQ.A RemainingLatency 0 + 17c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(30) $x4 = ADRP target-flags(aarch64-page) @ua__str_28___CC__
  Ready @17c
  TopQ.A BotLatency SU(30) 4c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 32 29 39 24 15 26 21 50 23 13 31 
  TopQ.A RemainingLatency 0 + 18c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) renamable $d1 = FMULDrr renamable $d2, renamable $d1
  Ready @18c
  TopQ.A TopLatency SU(15) 12c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 32 29 39 24 31 26 21 50 23 13 16 
  TopQ.A RemainingLatency 0 + 19c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(21) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(21) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_33__none__, 0
  Ready @19c
  TopQ.A BotLatency SU(21) 3c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 32 29 39 24 31 26 16 50 23 13 
  TopQ.A RemainingLatency 0 + 20c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(23) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(23) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_32__O3__mcmod, 0
  Ready @20c
  TopQ.A BotLatency SU(23) 3c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 32 29 39 24 31 26 16 50 13 36 
  TopQ.A RemainingLatency 0 + 21c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(29) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(29) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_29__lm_, 0
  Ready @21c
  TopQ.A BotLatency SU(29) 3c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 32 36 39 24 31 26 16 50 13 
  TopQ.A RemainingLatency 0 + 22c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(31) renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_28___CC__, 0
  Ready @22c
  TopQ.A BotLatency SU(31) 3c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 32 36 39 24 13 26 16 50 43 
  TopQ.A RemainingLatency 0 + 23c > CritPath 15
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(32) $x2 = ADRP target-flags(aarch64-page) @ua__str_27_gcc_
  Ready @23c
  TopQ.A BotLatency SU(32) 3c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 43 36 39 24 13 26 16 50 33 
  TopQ.A RemainingLatency 0 + 24c > CritPath 15
  Cand SU(34) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(34) $x3 = ADRP target-flags(aarch64-page) @ua__str_26_03_Nov_201
  Ready @24c
  TopQ.A BotLatency SU(34) 3c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 33 43 36 39 24 13 26 16 50 35 
  TopQ.A RemainingLatency 0 + 25c > CritPath 15
  Cand SU(33) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(16) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(16) renamable $d0 = FDIVDrr renamable $d0, renamable $d1
  Ready @25c
  TopQ.A TopLatency SU(16) 13c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 33 43 36 39 24 13 26 35 50 19 17 18 
  TopQ.A RemainingLatency 0 + 26c > CritPath 15
  Cand SU(33) ORDER                              
  Cand SU(24) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(24) $x17 = ADRP target-flags(aarch64-page) @ua__str_31__g__Wall__
  Ready @26c
  TopQ.A BotLatency SU(24) 2c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 33 43 36 39 18 13 26 35 50 19 17 25 
  TopQ.A RemainingLatency 0 + 27c > CritPath 15
  Cand SU(33) ORDER                              
  Cand SU(26) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(26) $x18 = ADRP target-flags(aarch64-page) @ua__str_30__I___commo
  Ready @27c
  TopQ.A BotLatency SU(26) 2c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 33 43 36 39 18 13 25 35 50 19 17 27 
  TopQ.A RemainingLatency 0 + 28c > CritPath 15
  Cand SU(33) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(33) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_27_gcc_, 0
  Ready @28c
  TopQ.A BotLatency SU(33) 2c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 43 36 39 18 13 25 35 50 19 17 
  TopQ.A RemainingLatency 0 + 29c > CritPath 15
  Cand SU(27) ORDER                              
  Cand SU(43) TOP-PATH                  2 cycles 
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(35) renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_26_03_Nov_201, 0
  Ready @29c
  TopQ.A BotLatency SU(35) 2c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 43 36 39 18 13 25 17 50 19 46 
  TopQ.A RemainingLatency 0 + 30c > CritPath 15
  Cand SU(27) ORDER                              
  Cand SU(43) TOP-PATH                  2 cycles 
  Cand SU(36) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(36) STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
  Ready @30c
  TopQ.A BotLatency SU(36) 2c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 43 46 39 18 13 25 17 50 19 41 37 
  TopQ.A RemainingLatency 0 + 31c > CritPath 15
  Cand SU(27) ORDER                              
  Cand SU(43) TOP-PATH                  2 cycles 
  Cand SU(41) ORDER                              
  Cand SU(37) ORDER                              
Pick Top ORDER     
Scheduling SU(37) $x8 = ADRP target-flags(aarch64-page) @ua__str_25_3_3_1_
  Ready @31c
  TopQ.A BotLatency SU(37) 2c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 43 46 39 18 13 25 17 50 19 41 38 
  TopQ.A RemainingLatency 0 + 32c > CritPath 15
  Cand SU(27) ORDER                              
  Cand SU(43) TOP-PATH                  2 cycles 
  Cand SU(41) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(41) $x16 = ADRP target-flags(aarch64-page) @ua__str_24_____coll__
  Ready @32c
  TopQ.A BotLatency SU(41) 2c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 43 46 39 18 13 25 17 50 19 38 42 
  TopQ.A RemainingLatency 0 + 33c > CritPath 15
  Cand SU(27) ORDER                              
  Cand SU(43) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(43) STPXi renamable $x4, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  Ready @33c
  TopQ.A BotLatency SU(43) 2c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 42 46 39 18 13 25 17 50 19 38 52 44 
  TopQ.A RemainingLatency 0 + 34c > CritPath 15
  Cand SU(27) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(44) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(44) $x0 = ADRP target-flags(aarch64-page) @ua__str_23_UA_
  Ready @34c
  TopQ.A BotLatency SU(44) 2c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 42 46 39 18 13 25 17 50 19 38 52 45 
  TopQ.A RemainingLatency 0 + 35c > CritPath 15
  Cand SU(27) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(17) ORDER                              
Pick Top ORDER     
Scheduling SU(17) STRDui renamable $d0, renamable $x19, 16 :: (store 8 into %ir.mflops)
  Ready @35c
  TopQ.A TopLatency SU(17) 14c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 42 46 39 18 13 25 45 50 19 38 52 53 
  TopQ.A RemainingLatency 0 + 36c > CritPath 15
  Cand SU(27) ORDER                              
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) $q1 = ORRv16i8 $q0, $q0
  Ready @36c
  TopQ.A BotLatency SU(18) 1c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 42 46 39 53 13 25 45 50 19 38 52 
  TopQ.A RemainingLatency 0 + 37c > CritPath 15
  Cand SU(27) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(19) ORDER                              
Pick Top ORDER     
Scheduling SU(19) STPDi $d0, renamable $d2, $sp, 11 :: (store 8 into %stack.21), (store 8 into %stack.22)
  Ready @37c
  TopQ.A BotLatency SU(19) 1c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 42 46 39 53 13 25 45 50 52 38 54 
  TopQ.A RemainingLatency 0 + 38c > CritPath 15
  Cand SU(27) ORDER                              
  Cand SU(25) ORDER                              
Pick Top ORDER     
Scheduling SU(25) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_31__g__Wall__, 0
  Ready @38c
  TopQ.A BotLatency SU(25) 1c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 42 46 39 53 13 54 45 50 52 38 
  TopQ.A RemainingLatency 0 + 39c > CritPath 15
  Cand SU(27) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(27) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_30__I___commo, 0
  Ready @39c
  TopQ.A BotLatency SU(27) 1c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 42 46 39 53 13 54 45 50 52 40 
  TopQ.A RemainingLatency 0 + 40c > CritPath 15
  Cand SU(38) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(38) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_25_3_3_1_, 0
  Ready @40c
  TopQ.A BotLatency SU(38) 1c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 42 46 39 53 13 54 45 50 52 47 
  TopQ.A RemainingLatency 0 + 41c > CritPath 15
  Cand SU(40) ORDER                              
  Cand SU(42) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(42) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_24_____coll__, 0
  Ready @41c
  TopQ.A BotLatency SU(42) 1c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 47 46 39 53 13 54 45 50 52 49 
  TopQ.A RemainingLatency 0 + 42c > CritPath 15
  Cand SU(40) ORDER                              
  Cand SU(46) TOP-PATH                  1 cycles 
  Cand SU(45) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(45) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_23_UA_, 0
  Ready @42c
  TopQ.A BotLatency SU(45) 1c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 47 46 39 53 13 54 49 50 52 
  TopQ.A RemainingLatency 0 + 43c > CritPath 15
  Cand SU(40) ORDER                              
  Cand SU(46) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(46) STPXi renamable $x3, renamable $x2, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  Ready @43c
  TopQ.A BotLatency SU(46) 1c
  *** Max MOps 1 at cycle 43
Cycle: 44 TopQ.A
TopQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 47 52 39 53 13 54 49 50 51 48 
  TopQ.A RemainingLatency 0 + 44c > CritPath 15
  Cand SU(40) ORDER                              
  Cand SU(52) TOP-PATH                  1 cycles 
  Cand SU(50) ORDER                              
  Cand SU(48) ORDER                              
Pick Top ORDER     
Scheduling SU(48) $w2 = MOVZWi 7, 0
  Ready @44c
  TopQ.A BotLatency SU(48) 1c
  *** Max MOps 1 at cycle 44
Cycle: 45 TopQ.A
TopQ.A @45c
  Retired: 45
  Executed: 45c
  Critical: 45c, 45 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 47 52 39 53 13 54 49 50 51 
  TopQ.A RemainingLatency 0 + 45c > CritPath 15
  Cand SU(40) ORDER                              
  Cand SU(52) TOP-PATH                  1 cycles 
  Cand SU(50) ORDER                              
Pick Top ORDER     
Scheduling SU(50) $w1 = ORRWrs $wzr, $w20, 0
  Ready @45c
  TopQ.A BotLatency SU(50) 1c
  *** Max MOps 1 at cycle 45
Cycle: 46 TopQ.A
TopQ.A @46c
  Retired: 46
  Executed: 46c
  Critical: 46c, 46 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 47 52 39 53 13 54 49 51 
  TopQ.A RemainingLatency 0 + 46c > CritPath 15
  Cand SU(40) ORDER                              
  Cand SU(52) TOP-PATH                  1 cycles 
  Cand SU(51) ORDER                              
Pick Top ORDER     
Scheduling SU(51) $w3 = ORRWrs $wzr, $wzr, 0
  Ready @46c
  TopQ.A BotLatency SU(51) 1c
  *** Max MOps 1 at cycle 46
Cycle: 47 TopQ.A
TopQ.A @47c
  Retired: 47
  Executed: 47c
  Critical: 47c, 47 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 47 52 39 53 13 54 49 
  TopQ.A RemainingLatency 0 + 47c > CritPath 15
  Cand SU(40) ORDER                              
  Cand SU(52) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(52) $w4 = ORRWrs $wzr, $wzr, 0
  Ready @47c
  TopQ.A BotLatency SU(52) 1c
  *** Max MOps 1 at cycle 47
Cycle: 48 TopQ.A
TopQ.A @48c
  Retired: 48
  Executed: 48c
  Critical: 48c, 48 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 47 49 39 53 13 54 
  TopQ.A RemainingLatency 0 + 48c > CritPath 15
  Cand SU(40) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(54) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(54) $q0 = ORRv16i8 $q2, $q2
  Ready @48c
  TopQ.A BotLatency SU(54) 1c
  *** Max MOps 1 at cycle 48
Cycle: 49 TopQ.A
TopQ.A @49c
  Retired: 49
  Executed: 49c
  Critical: 49c, 49 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 47 49 39 53 13 
  TopQ.A RemainingLatency 0 + 49c > CritPath 15
  Cand SU(40) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(13) ORDER                              
Pick Top ORDER     
Scheduling SU(13) STRWui renamable $w6, $sp, 26 :: (store 4 into %stack.20)
  Ready @49c
  *** Max MOps 1 at cycle 49
Cycle: 50 TopQ.A
TopQ.A @50c
  Retired: 50
  Executed: 50c
  Critical: 50c, 50 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 47 49 39 53 
  TopQ.A RemainingLatency 0 + 50c > CritPath 15
  Cand SU(40) ORDER                              
  Cand SU(39) ORDER                              
Pick Top ORDER     
Scheduling SU(39) STRWui renamable $w6, $sp, 2 :: (store 4 into stack + 8)
  Ready @50c
  *** Max MOps 1 at cycle 50
Cycle: 51 TopQ.A
TopQ.A @51c
  Retired: 51
  Executed: 51c
  Critical: 51c, 51 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 47 49 53 
  TopQ.A RemainingLatency 0 + 51c > CritPath 15
  Cand SU(40) ORDER                              
Pick Top ORDER     
Scheduling SU(40) STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  Ready @51c
  *** Max MOps 1 at cycle 51
Cycle: 52 TopQ.A
TopQ.A @52c
  Retired: 52
  Executed: 52c
  Critical: 52c, 52 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 53 47 49 
  TopQ.A RemainingLatency 0 + 52c > CritPath 15
  Cand SU(53) ORDER                              
  Cand SU(47) ORDER                              
Pick Top ORDER     
Scheduling SU(47) STRXui renamable $x8, $sp, 2 :: (store 8 into stack + 16)
  Ready @52c
  *** Max MOps 1 at cycle 52
Cycle: 53 TopQ.A
TopQ.A @53c
  Retired: 53
  Executed: 53c
  Critical: 53c, 53 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 53 49 
  TopQ.A RemainingLatency 0 + 53c > CritPath 15
  Cand SU(53) ORDER                              
  Cand SU(49) ORDER                              
Pick Top ORDER     
Scheduling SU(49) STRXui renamable $x16, $sp, 0 :: (store 8 into stack)
  Ready @53c
  *** Max MOps 1 at cycle 53
Cycle: 54 TopQ.A
TopQ.A @54c
  Retired: 54
  Executed: 54c
  Critical: 54c, 54 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 53 
Pick Top ONLY1     
Scheduling SU(53) $w19 = ORRWrs $wzr, $w5, 0
  Ready @54c
  *** Max MOps 1 at cycle 54
Cycle: 55 TopQ.A
TopQ.A @55c
  Retired: 55
  Executed: 55c
  Critical: 55c, 55 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
SU(2):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
SU(1):   $w16 = MOVZWi 125, 0
SU(3):   renamable $d0, renamable $d2 = LDPDi renamable $x19, 14 :: (dereferenceable load 8 from %ir.nelt_tot), (dereferenceable load 8 from %ir.tmax)
SU(4):   renamable $x17 = ADRP target-flags(aarch64-page) %const.3
SU(5):   renamable $w8 = MADDWrrr renamable $w8, renamable $w16, $wzr
SU(7):   renamable $w8 = ADDWri renamable $w8, 125, 0
SU(8):   renamable $d1 = SCVTFUWDri renamable $w8
SU(9):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(10):   renamable $d1 = LDRDui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(6):   renamable $w20 = LDURSBWi $fp, -100 :: (dereferenceable load 1 from %ir.Class, align 4)
SU(11):   renamable $x8 = ADRP target-flags(aarch64-page) @niter
SU(12):   renamable $w6 = LDURWi $fp, -108 :: (dereferenceable load 4 from %ir.verified)
SU(14):   renamable $w5 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(20):   $x8 = ADRP target-flags(aarch64-page) @ua__str_33__none__
SU(22):   $x16 = ADRP target-flags(aarch64-page) @ua__str_32__O3__mcmod
SU(28):   $x0 = ADRP target-flags(aarch64-page) @ua__str_29__lm_
SU(30):   $x4 = ADRP target-flags(aarch64-page) @ua__str_28___CC__
SU(15):   renamable $d1 = FMULDrr renamable $d2, renamable $d1
SU(21):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_33__none__, 0
SU(23):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_32__O3__mcmod, 0
SU(29):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_29__lm_, 0
SU(31):   renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_28___CC__, 0
SU(32):   $x2 = ADRP target-flags(aarch64-page) @ua__str_27_gcc_
SU(34):   $x3 = ADRP target-flags(aarch64-page) @ua__str_26_03_Nov_201
SU(16):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1
SU(24):   $x17 = ADRP target-flags(aarch64-page) @ua__str_31__g__Wall__
SU(26):   $x18 = ADRP target-flags(aarch64-page) @ua__str_30__I___commo
SU(33):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_27_gcc_, 0
SU(35):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_26_03_Nov_201, 0
SU(36):   STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
SU(37):   $x8 = ADRP target-flags(aarch64-page) @ua__str_25_3_3_1_
SU(41):   $x16 = ADRP target-flags(aarch64-page) @ua__str_24_____coll__
SU(43):   STPXi renamable $x4, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
SU(44):   $x0 = ADRP target-flags(aarch64-page) @ua__str_23_UA_
SU(17):   STRDui renamable $d0, renamable $x19, 16 :: (store 8 into %ir.mflops)
SU(18):   $q1 = ORRv16i8 $q0, $q0
SU(19):   STPDi $d0, renamable $d2, $sp, 11 :: (store 8 into %stack.21), (store 8 into %stack.22)
SU(25):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_31__g__Wall__, 0
SU(27):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_30__I___commo, 0
SU(38):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_25_3_3_1_, 0
SU(42):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_24_____coll__, 0
SU(45):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_23_UA_, 0
SU(46):   STPXi renamable $x3, renamable $x2, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
SU(48):   $w2 = MOVZWi 7, 0
SU(50):   $w1 = ORRWrs $wzr, $w20, 0
SU(51):   $w3 = ORRWrs $wzr, $wzr, 0
SU(52):   $w4 = ORRWrs $wzr, $wzr, 0
SU(54):   $q0 = ORRv16i8 $q2, $q2
SU(13):   STRWui renamable $w6, $sp, 26 :: (store 4 into %stack.20)
SU(39):   STRWui renamable $w6, $sp, 2 :: (store 4 into stack + 8)
SU(40):   STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
SU(47):   STRXui renamable $x8, $sp, 2 :: (store 8 into stack + 16)
SU(49):   STRXui renamable $x16, $sp, 0 :: (store 8 into stack)
SU(53):   $w19 = ORRWrs $wzr, $w5, 0

********** MI Scheduling **********
main:%bb.65 for.end170
  From: $x19 = SUBXri $fp, 208, 0
    To: BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x19 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x19
SU(1):   STRDui renamable $d0, renamable $x19, 15 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x19
SU(2):   $x0 = SUBXri $fp, 100, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x1 = SUBXri $fp, 108, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x19 = SUBXri $fp, 208, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = SUBXri $fp, 100, 0
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x1 = SUBXri $fp, 108, 0
  Ready @2c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, renamable $x19, 15 :: (store 8 into %ir.tmax)
  Ready @3c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   $x19 = SUBXri $fp, 208, 0
SU(2):   $x0 = SUBXri $fp, 100, 0
SU(3):   $x1 = SUBXri $fp, 108, 0
SU(1):   STRDui renamable $d0, renamable $x19, 15 :: (store 8 into %ir.tmax)

Fixup kills for %bb.65
********** MI Scheduling **********
main:%bb.66 if.then179
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$w8
SU(1):   STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(2):   $x20 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x20 = SUBXri $fp, 208, 0
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   $w8 = MOVZWi 1, 0
SU(2):   $x20 = SUBXri $fp, 208, 0
SU(1):   STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)

Fixup kills for %bb.66
********** MI Scheduling **********
main:%bb.67 for.cond180
  From: renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.69, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.69, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.67 ***
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv

Fixup kills for %bb.67
********** MI Scheduling **********
main:%bb.68 for.body183
  From: renamable $x8 = LDURSWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.67
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w16
    SU(4): Ord  Latency=0 Memory
SU(2):   STRDroX renamable $d0, renamable $x20, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx186)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Anti Latency=0
SU(3):   renamable $w8 = nsw ADDWri renamable $w16, 1, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Out  Latency=1
  Successors:
    SU(4): Data Latency=1 Reg=$w8
SU(4):   STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.67
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDroX renamable $d0, renamable $x20, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx186)
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = nsw ADDWri renamable $w16, 1, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.68 ***
SU(0):   renamable $x8 = LDURSWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(2):   STRDroX renamable $d0, renamable $x20, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx186)
SU(3):   renamable $w8 = nsw ADDWri renamable $w16, 1, 0
SU(4):   STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.68 for.body183
  From: renamable $w19 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
    To: BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w19
SU(1):   $w0 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w19 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w0 = ORRWrs $wzr, $w19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.68 ***
SU(0):   renamable $w19 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(1):   $w0 = ORRWrs $wzr, $w19, 0

Fixup kills for %bb.68
********** MI Scheduling **********
main:%bb.69 for.end189
  From: $x16 = SUBXri $fp, 208, 0
    To: Bcc 1, %bb.71, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x16 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(1): Data Latency=1 Reg=$x16
SU(1):   renamable $d0 = LDRDui renamable $x16, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x16
  Successors:
    SU(2): Data Latency=4 Reg=$d0
SU(2):   FCMPDri renamable $d0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.71, implicit $nzcv
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x16 = SUBXri $fp, 208, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = LDRDui renamable $x16, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) FCMPDri renamable $d0, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.69 ***
SU(0):   $x16 = SUBXri $fp, 208, 0
SU(1):   renamable $d0 = LDRDui renamable $x16, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   FCMPDri renamable $d0, implicit-def $nzcv

Fixup kills for %bb.69
********** MI Scheduling **********
main:%bb.70 if.then192
  From: $x8 = MOVZXi 16368, 48
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui renamable $x8, renamable $x16, 15 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x8 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXui renamable $x8, renamable $x16, 15 :: (store 8 into %ir.tmax)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.70 ***
SU(0):   $x8 = MOVZXi 16368, 48
SU(1):   STRXui renamable $x8, renamable $x16, 15 :: (store 8 into %ir.tmax)

Fixup kills for %bb.70
********** MI Scheduling **********
main:%bb.71 if.end193
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $d3 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(4): Data Latency=4 Reg=$d3
SU(3):   STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(4):   STRDui renamable $d3, $sp, 11 :: (store 8 into %stack.22)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$d3
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) %const.4
  Ready @0c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d3 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d3, $sp, 11 :: (store 8 into %stack.22)
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.71 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.4
SU(2):   renamable $d3 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(0):   $w8 = MOVZWi 1, 0
SU(3):   STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
SU(4):   STRDui renamable $d3, $sp, 11 :: (store 8 into %stack.22)

********** MI Scheduling **********
main:%bb.71 if.end193
  From: $x0 = ADRP target-flags(aarch64-page) @ua__str_34___SECTION_
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ua__str_34___SECTION_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_34___SECTION_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @ua__str_34___SECTION_
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_34___SECTION_, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.71 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ua__str_34___SECTION_
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_34___SECTION_, 0

Fixup kills for %bb.71
********** MI Scheduling **********
main:%bb.72 for.cond195
  From: renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.78, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.78, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv

Fixup kills for %bb.72
********** MI Scheduling **********
main:%bb.73 for.body198
  From: renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.75, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.75, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.73 for.body198
  From: renamable $x8 = LDURSWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x8 = UBFMXri renamable $x8, 61, 60
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(7): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
SU(2):   $x16 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(6): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   renamable $d0 = LDRDroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx204)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(10): Data Latency=4 Reg=$d0
    SU(8): Data Latency=4 Reg=$d0
    SU(6): Anti Latency=0
SU(4):   $x20 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Data Latency=1 Reg=$x20
SU(5):   renamable $d2 = LDRDui renamable $x20, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=$x20
  Successors:
    SU(9): Data Latency=4 Reg=$d2
SU(6):   $x16 = ADDXri $sp, 128, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Data Latency=1 Reg=$x16
SU(7):   renamable $x19 = LDRXroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx200)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(6): Data Latency=1 Reg=$x16
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(13): Data Latency=4 Reg=$x19
SU(8):   renamable $d1 = FMULDrr renamable $d0, renamable $d3
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=$d0
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d1
SU(9):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
    SU(5): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(10): Data Latency=1 Reg=$d1
SU(10):   STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d1
    SU(3): Data Latency=4 Reg=$d0
SU(11):   $x0 = ADRP target-flags(aarch64-page) @ua__str_35_____10s__9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x0
SU(12):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_35_____10s__9, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(13):   $x1 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=1 Artificial
    SU(12): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 11 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 11 2 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(2) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x16 = SUBXri $fp, 208, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 11 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x20 = SUBXri $fp, 208, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 11 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(5) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d2 = LDRDui renamable $x20, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 1 
  TopQ.A RemainingLatency 0 + 4c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = UBFMXri renamable $x8, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = LDRDroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx204)
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 11 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(6) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x16 = ADDXri $sp, 128, 0
  Ready @6c
  TopQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 11 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(7) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x19 = LDRXroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx200)
  Ready @7c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 13 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) $x0 = ADRP target-flags(aarch64-page) @ua__str_35_____10s__9
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 
Queue TopQ.A: 12 8 
  TopQ.A RemainingLatency 0 + 9c > CritPath 11
  Cand SU(12) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = FMULDrr renamable $d0, renamable $d3
  Ready @9c
  TopQ.A TopLatency SU(8) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 
Queue TopQ.A: 12 9 
  TopQ.A RemainingLatency 0 + 10c > CritPath 11
  Cand SU(12) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  Ready @10c
  TopQ.A TopLatency SU(9) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 13 
  TopQ.A RemainingLatency 0 + 11c > CritPath 11
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_35_____10s__9, 0
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 10 
  TopQ.A RemainingLatency 0 + 12c > CritPath 11
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) $x1 = ORRXrs $xzr, $x19, 0
  Ready @12c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  Ready @13c
  TopQ.A TopLatency SU(10) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   renamable $x8 = LDURSWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(2):   $x16 = SUBXri $fp, 208, 0
SU(4):   $x20 = SUBXri $fp, 208, 0
SU(5):   renamable $d2 = LDRDui renamable $x20, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   renamable $x8 = UBFMXri renamable $x8, 61, 60
SU(3):   renamable $d0 = LDRDroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx204)
SU(6):   $x16 = ADDXri $sp, 128, 0
SU(7):   renamable $x19 = LDRXroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx200)
SU(11):   $x0 = ADRP target-flags(aarch64-page) @ua__str_35_____10s__9
SU(8):   renamable $d1 = FMULDrr renamable $d0, renamable $d3
SU(9):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
SU(12):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_35_____10s__9, 0
SU(13):   $x1 = ORRXrs $xzr, $x19, 0
SU(10):   STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)

Fixup kills for %bb.73
********** MI Scheduling **********
main:%bb.74 if.then210
  From: renamable $d0, renamable $d1 = LDPDi renamable $x20, 3 :: (dereferenceable load 8 from %ir.arrayidx211), (dereferenceable load 8 from %ir.arrayidx212, align 16)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x20, 3 :: (dereferenceable load 8 from %ir.arrayidx211), (dereferenceable load 8 from %ir.arrayidx212, align 16)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(12): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
    SU(6): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
SU(1):   renamable $d2 = LDRDui renamable $x20, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=$d2
SU(2):   renamable $d3 = FSUBDrr renamable $d0, renamable $d1
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(7): Data Latency=1 Reg=$d3
    SU(5): Data Latency=1 Reg=$d3
    SU(3): Data Latency=1 Reg=$d3
    SU(12): Data Latency=1 Reg=$q3
    SU(4): Anti Latency=0
    SU(12): Anti Latency=0
    SU(6): Anti Latency=0
SU(3):   STRDui renamable $d3, renamable $x20, 11 :: (store 8 into %ir.t2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$d3
SU(4):   renamable $d0 = LDRDui $sp, 11 :: (load 8 from %stack.22)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(12): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
SU(5):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
    SU(2): Data Latency=1 Reg=$d3
  Successors:
    SU(12): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d0
    SU(12): Anti Latency=0
SU(6):   renamable $d1 = FDIVDrr renamable $d0, renamable $d2
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$d2
    SU(0): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(7): Data Latency=1 Reg=$d1
    SU(12): Anti Latency=0
SU(7):   STPDi renamable $d1, renamable $d3, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$d1
    SU(2): Data Latency=1 Reg=$d3
SU(8):   $x0 = ADRP target-flags(aarch64-page) @ua__str_36__________1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x1 = ADRP target-flags(aarch64-page) @ua__str_37_sub_convec
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x1
SU(11):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_37_sub_convec, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   $q0 = ORRv16i8 $q3, $q3
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Out  Latency=1
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
    SU(2): Data Latency=1 Reg=$q3
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(12): Ord  Latency=1 Artificial
    SU(11): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 10 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0, renamable $d1 = LDPDi renamable $x20, 3 :: (dereferenceable load 8 from %ir.arrayidx211), (dereferenceable load 8 from %ir.arrayidx212, align 16)
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 10 1 8 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(10) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDRDui renamable $x20, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 10 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x0 = ADRP target-flags(aarch64-page) @ua__str_36__________1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 10 9 
  TopQ.A RemainingLatency 0 + 3c > CritPath 10
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x1 = ADRP target-flags(aarch64-page) @ua__str_37_sub_convec
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 11 2 
  TopQ.A RemainingLatency 0 + 4c > CritPath 10
  Cand SU(9) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d3 = FSUBDrr renamable $d0, renamable $d1
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 11 3 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 10
  Cand SU(9) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d0 = LDRDui $sp, 11 :: (load 8 from %stack.22)
  Ready @5c
  TopQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 9 11 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 10
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 11 
  TopQ.A RemainingLatency 0 + 7c > CritPath 10
  Cand SU(3) ORDER                              
  Cand SU(11) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_37_sub_convec, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDui renamable $d3, renamable $x20, 11 :: (store 8 into %ir.t2)
  Ready @8c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FMULDrr renamable $d3, renamable $d0
  Ready @9c
  TopQ.A TopLatency SU(5) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d1 = FDIVDrr renamable $d0, renamable $d2
  Ready @10c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 10
  Cand SU(7) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) $q0 = ORRv16i8 $q3, $q3
  Ready @11c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STPDi renamable $d1, renamable $d3, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  Ready @12c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.74 ***
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x20, 3 :: (dereferenceable load 8 from %ir.arrayidx211), (dereferenceable load 8 from %ir.arrayidx212, align 16)
SU(1):   renamable $d2 = LDRDui renamable $x20, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(8):   $x0 = ADRP target-flags(aarch64-page) @ua__str_36__________1
SU(10):   $x1 = ADRP target-flags(aarch64-page) @ua__str_37_sub_convec
SU(2):   renamable $d3 = FSUBDrr renamable $d0, renamable $d1
SU(4):   renamable $d0 = LDRDui $sp, 11 :: (load 8 from %stack.22)
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1, 0
SU(11):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_37_sub_convec, 0
SU(3):   STRDui renamable $d3, renamable $x20, 11 :: (store 8 into %ir.t2)
SU(5):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
SU(6):   renamable $d1 = FDIVDrr renamable $d0, renamable $d2
SU(12):   $q0 = ORRv16i8 $q3, $q3
SU(7):   STPDi renamable $d1, renamable $d3, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)

Fixup kills for %bb.74
********** MI Scheduling **********
main:%bb.75 if.else217
  From: renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.77, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 7, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   renamable $d3 = LDRDui $sp, 11 :: (load 8 from %stack.22)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   Bcc 1, %bb.77, implicit $nzcv
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d3 = LDRDui $sp, 11 :: (load 8 from %stack.22)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 7, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.75 ***
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(2):   renamable $d3 = LDRDui $sp, 11 :: (load 8 from %stack.22)
SU(1):   dead $wzr = SUBSWri renamable $w8, 7, 0, implicit-def $nzcv

Fixup kills for %bb.75
********** MI Scheduling **********
main:%bb.76 if.then220
  From: $x8 = SUBXri $fp, 208, 0
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   $x8 = SUBXri $fp, 208, 0
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=1 Reg=$x8
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d0, renamable $d1 = LDPDi renamable $x8, 5 :: (dereferenceable load 8 from %ir.arrayidx221), (dereferenceable load 8 from %ir.arrayidx222, align 16)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 9
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
    SU(4): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(2):   renamable $d2 = LDRDui renamable $x8, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d2
SU(3):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
    SU(1): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Anti Latency=0
SU(4):   renamable $d1 = LDRDui renamable $x8, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d1
SU(5):   renamable $d0 = FSUBDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d0
    SU(2): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(9): Data Latency=1 Reg=$d0
    SU(7): Data Latency=1 Reg=$d0
    SU(6): Data Latency=1 Reg=$d0
    SU(7): Anti Latency=0
SU(6):   STRDui renamable $d0, renamable $x8, 11 :: (store 8 into %ir.t2)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(0): Data Latency=1 Reg=$x8
SU(7):   renamable $d2 = FMULDrr renamable $d0, renamable $d3
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(5): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(8): Data Latency=1 Reg=$d2
SU(8):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=$d2
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(9): Data Latency=1 Reg=$d1
SU(9):   STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$d1
    SU(5): Data Latency=1 Reg=$d0
SU(10):   $x0 = ADRP target-flags(aarch64-page) @ua__str_36__________1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
SU(11):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   $x1 = ADRP target-flags(aarch64-page) @ua__str_38_sub_diffus
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x1
SU(13):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_38_sub_diffus, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=1 Artificial
    SU(11): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 12 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = SUBXri $fp, 208, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(2) TOP-PATH                  7 cycles 
  Cand SU(1) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0, renamable $d1 = LDPDi renamable $x8, 5 :: (dereferenceable load 8 from %ir.arrayidx221), (dereferenceable load 8 from %ir.arrayidx222, align 16)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 12 10 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(2) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d2 = LDRDui renamable $x8, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 12 10 
  TopQ.A RemainingLatency 0 + 3c > CritPath 10
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x0 = ADRP target-flags(aarch64-page) @ua__str_36__________1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 12 11 
  TopQ.A RemainingLatency 0 + 4c > CritPath 10
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x1 = ADRP target-flags(aarch64-page) @ua__str_38_sub_diffus
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 10
  Cand SU(11) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 5 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 10
  Cand SU(11) ORDER                              
  Cand SU(5) TOP-PATH                  3 cycles 
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = LDRDui renamable $x8, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @6c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 10
  Cand SU(11) ORDER                              
  Cand SU(5) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = FSUBDrr renamable $d0, renamable $d2
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 6 7 
  TopQ.A RemainingLatency 0 + 8c > CritPath 10
  Cand SU(11) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d2 = FMULDrr renamable $d0, renamable $d3
  Ready @8c
  TopQ.A TopLatency SU(7) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 11 13 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 10
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1, 0
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 13 8 
  TopQ.A RemainingLatency 0 + 10c > CritPath 10
  Cand SU(6) ORDER                              
  Cand SU(13) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $d1 = FDIVDrr renamable $d2, renamable $d1
  Ready @10c
  TopQ.A TopLatency SU(8) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 13 9 
  TopQ.A RemainingLatency 0 + 11c > CritPath 10
  Cand SU(6) ORDER                              
  Cand SU(13) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_38_sub_diffus, 0
  Ready @11c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 9 
  TopQ.A RemainingLatency 0 + 12c > CritPath 10
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STRDui renamable $d0, renamable $x8, 11 :: (store 8 into %ir.t2)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  Ready @13c
  TopQ.A TopLatency SU(9) 10c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.76 ***
SU(0):   $x8 = SUBXri $fp, 208, 0
SU(1):   renamable $d0, renamable $d1 = LDPDi renamable $x8, 5 :: (dereferenceable load 8 from %ir.arrayidx221), (dereferenceable load 8 from %ir.arrayidx222, align 16)
SU(2):   renamable $d2 = LDRDui renamable $x8, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
SU(10):   $x0 = ADRP target-flags(aarch64-page) @ua__str_36__________1
SU(12):   $x1 = ADRP target-flags(aarch64-page) @ua__str_38_sub_diffus
SU(3):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
SU(4):   renamable $d1 = LDRDui renamable $x8, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(5):   renamable $d0 = FSUBDrr renamable $d0, renamable $d2
SU(7):   renamable $d2 = FMULDrr renamable $d0, renamable $d3
SU(11):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_36__________1, 0
SU(8):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1
SU(13):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ua__str_38_sub_diffus, 0
SU(6):   STRDui renamable $d0, renamable $x8, 11 :: (store 8 into %ir.t2)
SU(9):   STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)

Fixup kills for %bb.76
********** MI Scheduling **********
main:%bb.77 for.inc231
  From: renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.72
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.72
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.77 ***
SU(0):   renamable $w8 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -64 :: (store 4 into %ir.i)

Fixup kills for %bb.77
********** MI Scheduling **********
main:%bb.78 if.end234
  From: $w8 = ORRWrs $wzr, $wzr, 0
    To: $sp = frame-destroy ADDXri $sp, 448, 0
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $w8 = ORRWrs $wzr, $wzr, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.46), (load 8 from %stack.45)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.48), (load 8 from %stack.47)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 448, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $fp, $lr = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.46), (load 8 from %stack.45)
  Ready @0c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x20, $x19 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.48), (load 8 from %stack.47)
  Ready @1c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w8 = ORRWrs $wzr, $wzr, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.78 ***
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.46), (load 8 from %stack.45)
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.48), (load 8 from %stack.47)
SU(0):   $w8 = ORRWrs $wzr, $wzr, 0

Fixup kills for %bb.78
