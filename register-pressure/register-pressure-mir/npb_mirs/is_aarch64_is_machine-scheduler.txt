Before MISched:
# Machine code for function randlc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: 5.000000e-01, align=8
Function Live Ins: $x0 in %0, $x1 in %1

bb.0.entry:
  successors: %bb.1(0x30000000), %bb.8(0x50000000); %bb.1(37.50%), %bb.8(62.50%)
  liveins: $x0, $x1
  %1:gpr64 = COPY $x1
  %0:gpr64 = COPY $x0
  STRXui %0:gpr64, %stack.0.X.addr, 0 :: (store 8 into %ir.X.addr)
  STRXui %1:gpr64, %stack.1.A.addr, 0 :: (store 8 into %ir.A.addr)
  %2:gpr64temp = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
  %3:gpr32 = LDRWui %2:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
  CBNZW %3:gpr32, %bb.8, debug-location !114; is.c:264:9
  B %bb.1, debug-location !114; is.c:264:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %4:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
  %5:gpr64 = MOVi64imm 4607182418800017408
  STRXui %5:gpr64, %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  %6:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
  STRXui %5:gpr64, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  %7:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
  STRXui %5:gpr64, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  %8:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
  STRXui %5:gpr64, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  %9:gpr32 = MOVi32imm 1
  STRWui %9:gpr32, %stack.11.i, 0, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
  %81:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  %82:fpr64 = LDRDui %81:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)

bb.2.for.cond:
; predecessors: %bb.1, %bb.3
  successors: %bb.3(0x7c000000), %bb.4(0x04000000); %bb.3(96.88%), %bb.4(3.12%)

  %10:gpr32common = LDRWui %stack.11.i, 0, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
  dead $wzr = SUBSWri %10:gpr32common, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9
  Bcc 12, %bb.4, implicit killed $nzcv, debug-location !126; is.c:270:9
  B %bb.3, debug-location !126; is.c:270:9

bb.3.for.body:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %80:fpr64 = LDRDui %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
  %83:fpr64 = FMULDrr %80:fpr64, %82:fpr64, debug-location !129; is.c:271:24
  STRDui %83:fpr64, %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  %85:fpr64 = LDRDui %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  %86:fpr64 = FADDDrr %85:fpr64, %85:fpr64, debug-location !132; is.c:272:23
  STRDui %86:fpr64, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  %87:gpr32common = LDRWui %stack.11.i, 0, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
  %88:gpr32common = nsw ADDWri %87:gpr32common, 1, 0, debug-location !134; is.c:270:31
  STRWui %88:gpr32common, %stack.11.i, 0, debug-location !134 :: (store 4 into %ir.i); is.c:270:31
  B %bb.2, debug-location !135; is.c:270:9

bb.4.for.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %12:gpr32 = MOVi32imm 1
  STRWui %12:gpr32, %stack.11.i, 0, debug-location !138 :: (store 4 into %ir.i); is.c:274:16
  %69:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46
  %71:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %74:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46

bb.5.for.cond3:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %13:gpr32common = LDRWui %stack.11.i, 0, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
  dead $wzr = SUBSWri %13:gpr32common, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9
  Bcc 12, %bb.7, implicit killed $nzcv, debug-location !144; is.c:274:9
  B %bb.6, debug-location !144; is.c:274:9

bb.6.for.body5:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
  %73:fpr64 = FMULDrr %70:fpr64, %72:fpr64, debug-location !147; is.c:275:24
  STRDui %73:fpr64, %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
  %75:fpr64 = LDRDui %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  %76:fpr64 = FADDDrr %75:fpr64, %75:fpr64, debug-location !150; is.c:276:23
  STRDui %76:fpr64, %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
  %77:gpr32common = LDRWui %stack.11.i, 0, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
  %78:gpr32common = nsw ADDWri %77:gpr32common, 1, 0, debug-location !152; is.c:274:31
  STRWui %78:gpr32common, %stack.11.i, 0, debug-location !152 :: (store 4 into %ir.i); is.c:274:31
  B %bb.5, debug-location !153; is.c:274:9

bb.7.for.end10:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  %15:gpr64temp = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !156; is.c:278:12
  %16:gpr32 = MOVi32imm 1
  STRWui %16:gpr32, %15:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12

bb.8.if.end:
; predecessors: %bb.0, %bb.7

  %17:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !158; is.c:283:10
  %18:fpr64 = LDRDui %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
  %19:gpr64common = LDRXui %stack.1.A.addr, 0, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
  %20:fpr64 = LDRDui %19:gpr64common, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
  %21:fpr64 = FMULDrr %18:fpr64, %20:fpr64, debug-location !161; is.c:283:14
  STRDui %21:fpr64, %stack.2.T1, 0, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
  %22:gpr32 = FCVTZSUWDr %21:fpr64, debug-location !163; is.c:284:9
  STRWui %22:gpr32, %stack.12.j, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
  %23:fpr64 = SCVTFUWDri %22:gpr32, debug-location !165; is.c:285:10
  STRDui %23:fpr64, %stack.6.A1, 0, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
  %24:fpr64 = LDRDui %19:gpr64common, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
  %25:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !169; is.c:286:15
  %26:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
  %27:fpr64 = FMULDrr %26:fpr64, %23:fpr64, debug-location !171; is.c:286:19
  %28:fpr64 = FSUBDrr %24:fpr64, %27:fpr64, debug-location !172; is.c:286:13
  STRDui %28:fpr64, %stack.7.A2, 0, debug-location !173 :: (store 8 into %ir.A2); is.c:286:8
  %29:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
  %30:fpr64 = LDRDui %29:gpr64common, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
  %31:fpr64 = FMULDrr %18:fpr64, %30:fpr64, debug-location !177; is.c:292:14
  STRDui %31:fpr64, %stack.2.T1, 0, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
  %32:gpr32 = FCVTZSUWDr %31:fpr64, debug-location !179; is.c:293:9
  STRWui %32:gpr32, %stack.12.j, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
  %33:fpr64 = SCVTFUWDri %32:gpr32, debug-location !181; is.c:294:10
  STRDui %33:fpr64, %stack.8.X1, 0, debug-location !182 :: (store 8 into %ir.X1); is.c:294:8
  %34:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
  %35:fpr64 = LDRDui %34:gpr64common, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
  %36:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
  %37:fpr64 = FMULDrr %36:fpr64, %33:fpr64, debug-location !187; is.c:295:19
  %38:fpr64 = FSUBDrr %35:fpr64, %37:fpr64, debug-location !188; is.c:295:13
  STRDui %38:fpr64, %stack.9.X2, 0, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
  %39:fpr64 = LDRDui %stack.6.A1, 0, debug-location !190 :: (dereferenceable load 8 from %ir.A1); is.c:296:10
  %40:fpr64 = FMULDrr %39:fpr64, %38:fpr64, debug-location !192; is.c:296:13
  %41:fpr64 = FMULDrr %28:fpr64, %33:fpr64, debug-location !195; is.c:296:23
  %42:fpr64 = FADDDrr %40:fpr64, %41:fpr64, debug-location !196; is.c:296:18
  STRDui %42:fpr64, %stack.2.T1, 0, debug-location !197 :: (store 8 into %ir.T1); is.c:296:8
  %43:fpr64 = LDRDui %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
  %44:fpr64 = FMULDrr %43:fpr64, %42:fpr64, debug-location !200; is.c:298:13
  %45:gpr32 = FCVTZSUWDr %44:fpr64, debug-location !198; is.c:298:9
  STRWui %45:gpr32, %stack.12.j, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
  %46:fpr64 = SCVTFUWDri %45:gpr32, debug-location !202; is.c:299:10
  STRDui %46:fpr64, %stack.3.T2, 0, debug-location !203 :: (store 8 into %ir.T2); is.c:299:8
  %47:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
  %48:fpr64 = FMULDrr %47:fpr64, %46:fpr64, debug-location !207; is.c:300:18
  %49:fpr64 = FSUBDrr %42:fpr64, %48:fpr64, debug-location !208; is.c:300:12
  STRDui %49:fpr64, %stack.10.Z, 0, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
  %50:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
  %51:fpr64 = FMULDrr %50:fpr64, %49:fpr64, debug-location !212; is.c:301:14
  %52:fpr64 = LDRDui %stack.7.A2, 0, debug-location !213 :: (dereferenceable load 8 from %ir.A2); is.c:301:20
  %53:fpr64 = FMULDrr %52:fpr64, %38:fpr64, debug-location !215; is.c:301:23
  %54:fpr64 = FADDDrr %51:fpr64, %53:fpr64, debug-location !216; is.c:301:18
  STRDui %54:fpr64, %stack.4.T3, 0, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
  %55:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !218; is.c:302:9
  %56:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
  %57:fpr64 = FMULDrr %56:fpr64, %54:fpr64, debug-location !220; is.c:302:13
  %58:gpr32 = FCVTZSUWDr %57:fpr64, debug-location !218; is.c:302:9
  STRWui %58:gpr32, %stack.12.j, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
  %59:fpr64 = SCVTFUWDri %58:gpr32, debug-location !222; is.c:303:10
  STRDui %59:fpr64, %stack.5.T4, 0, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
  %60:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !225; is.c:304:15
  %61:fpr64 = LDRDui %60:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
  %62:fpr64 = FMULDrr %61:fpr64, %59:fpr64, debug-location !227; is.c:304:19
  %63:fpr64 = FSUBDrr %54:fpr64, %62:fpr64, debug-location !228; is.c:304:13
  %64:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
  STRDui %63:fpr64, %64:gpr64common, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
  %65:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
  %66:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
  %67:fpr64 = LDRDui %66:gpr64common, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
  %68:fpr64 = FMULDrr %65:fpr64, %67:fpr64, debug-location !234; is.c:305:17
  $d0 = COPY %68:fpr64, debug-location !235; is.c:305:5
  RET_ReallyLR implicit killed $d0, debug-location !235; is.c:305:5

# End machine code for function randlc.

********** MI Scheduling **********
randlc:%bb.0 entry
  From: %1:gpr64 = COPY $x1
    To: CBNZW %3:gpr32, %bb.8, debug-location !114; is.c:264:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gpr64 = COPY $x0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   STRXui %0:gpr64, %stack.0.X.addr, 0 :: (store 8 into %ir.X.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(3):   STRXui %1:gpr64, %stack.1.A.addr, 0 :: (store 8 into %ir.A.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(4):   %2:gpr64temp = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=1 Reg=%2
  Single Issue       : false;
SU(5):   %3:gpr32 = LDRWui %2:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=%2
  Successors:
    ExitSU: Data Latency=4 Reg=%3
  Single Issue       : false;
ExitSU:   CBNZW %3:gpr32, %bb.8, debug-location !114; is.c:264:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=%3
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %1:gpr64 = COPY $x1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 4 1 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %0:gpr64 = COPY $x0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 4 3 2 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRXui %1:gpr64, %stack.1.A.addr, 0 :: (store 8 into %ir.A.addr)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRXui %0:gpr64, %stack.0.X.addr, 0 :: (store 8 into %ir.X.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %3:gpr32 = LDRWui %2:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
  Ready @4c
  BotQ.A TopLatency SU(5) 1c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %2:gpr64temp = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gpr64 = COPY $x1
SU(1):   %0:gpr64 = COPY $x0
SU(4):   %2:gpr64temp = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
SU(5):   %3:gpr32 = LDRWui %2:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
SU(2):   STRXui %0:gpr64, %stack.0.X.addr, 0 :: (store 8 into %ir.X.addr)
SU(3):   STRXui %1:gpr64, %stack.1.A.addr, 0 :: (store 8 into %ir.A.addr)

********** MI Scheduling **********
randlc:%bb.1 if.then
  From: %4:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=3
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: 
Live Out: %82 %7 %4 
Live Thru: 
  LiveReg: %82
  LiveReg: %7
  UpdateRegP: SU(6) STRXui %5:gpr64, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
              to GPR32 1
  LiveReg: %4
  UpdateRegP: SU(2) STRXui %5:gpr64, %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
              to GPR32 1
Top Pressure:

Bottom Pressure:
GPR64temp=2
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Excess PSets: 
SU(0):   %4:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%4
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(1):   %5:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%5
    SU(6): Data Latency=1 Reg=%5
    SU(4): Data Latency=1 Reg=%5
    SU(2): Data Latency=1 Reg=%5
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   STRXui %5:gpr64, %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%5
    SU(0): Data Latency=1 Reg=%4
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   %6:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%6
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(4):   STRXui %5:gpr64, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%6
    SU(1): Data Latency=1 Reg=%5
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(5):   %7:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%7
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(6):   STRXui %5:gpr64, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%7
    SU(1): Data Latency=1 Reg=%5
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %8:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%8
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(8):   STRXui %5:gpr64, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%8
    SU(1): Data Latency=1 Reg=%5
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(9):   %9:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=%9
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(10):   STRWui %9:gpr32, %stack.11.i, 0, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%9
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   %81:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(12): Data Latency=1 Reg=%81
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(12):   %82:fpr64 = LDRDui %81:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(11): Data Latency=1 Reg=%81
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 
Queue BotQ.A: 10 8 6 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) STRWui %9:gpr32, %stack.11.i, 0, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
Bottom Pressure:
GPR64temp=2
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %9
  UpdateRegP: SU(10) STRWui %9:gpr32, %stack.11.i, 0, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 
Queue BotQ.A: 2 8 6 4 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 
BotQ.A RemLatency SU(2) 1c
BotQ.A RemLatency SU(12) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %9:gpr32 = MOVi32imm 1
Bottom Pressure:
GPR64temp=2
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 
Queue BotQ.A: 2 8 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 11 
BotQ.A RemLatency SU(2) 1c
BotQ.A RemLatency SU(12) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) STRXui %5:gpr64, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
Bottom Pressure:
GPR64temp=3
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %5
  UpdateRegP: SU(2) STRXui %5:gpr64, %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
              to 
  UpdateRegP: SU(4) STRXui %5:gpr64, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
              to GPR64temp 1    GPR32 1
  UpdateRegP: SU(6) STRXui %5:gpr64, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
              to 
  UpdateRegP: SU(8) STRXui %5:gpr64, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
              to GPR64temp 1    GPR32 1
  LiveReg: %8
  UpdateRegP: SU(8) STRXui %5:gpr64, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
              to 
  Ready @2c
  BotQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 7 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 11 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) %8:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
Bottom Pressure:
GPR64temp=2
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 11 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 4c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %82:fpr64 = LDRDui %81:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=3
GPR32=4
  LiveReg: %81
  UpdateRegP: SU(12) %82:fpr64 = LDRDui %81:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @4c
  BotQ.A TopLatency SU(12) 1c
  BotQ.A BotLatency SU(12) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 11 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) STRXui %5:gpr64, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
Bottom Pressure:
GPR64temp=3
GPR32=4
  Ready @5c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 11 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 11 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(2) STRXui %5:gpr64, %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
Bottom Pressure:
GPR64temp=3
GPR32=4
  Ready @6c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 11 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 11 
  BotQ.A RemainingLatency 0 + 7c > CritPath 4
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %81:gpr64temp = ADRP target-flags(aarch64-page) %const.0
Bottom Pressure:
GPR64temp=2
GPR32=3
  Ready @7c
  BotQ.A BotLatency SU(11) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  BotQ.A RemainingLatency 0 + 8c > CritPath 4
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRXui %5:gpr64, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
Bottom Pressure:
GPR64temp=3
GPR32=4
  LiveReg: %6
  UpdateRegP: SU(4) STRXui %5:gpr64, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
              to 
  Ready @8c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  BotQ.A RemainingLatency 0 + 9c > CritPath 4
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %7:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
Bottom Pressure:
GPR64temp=2
GPR32=3
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 10c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %6:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
Bottom Pressure:
GPR64temp=1
GPR32=2
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 11c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %5:gpr64 = MOVi64imm 4607182418800017408
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %4:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
Bottom Pressure:

  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %4:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
SU(1):   %5:gpr64 = MOVi64imm 4607182418800017408
SU(3):   %6:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
SU(5):   %7:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
SU(4):   STRXui %5:gpr64, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
SU(11):   %81:gpr64temp = ADRP target-flags(aarch64-page) %const.0
SU(2):   STRXui %5:gpr64, %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
SU(6):   STRXui %5:gpr64, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
SU(12):   %82:fpr64 = LDRDui %81:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(7):   %8:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
SU(8):   STRXui %5:gpr64, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
SU(9):   %9:gpr32 = MOVi32imm 1
SU(10):   STRWui %9:gpr32, %stack.11.i, 0, debug-location !120 :: (store 4 into %ir.i); is.c:270:16

********** MI Scheduling **********
randlc:%bb.2 for.cond
  From: %10:gpr32common = LDRWui %stack.11.i, 0, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
    To: Bcc 12, %bb.4, implicit killed $nzcv, debug-location !126; is.c:270:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %10:gpr32common = LDRWui %stack.11.i, 0, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%10
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %10:gpr32common, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.4, implicit killed $nzcv, debug-location !126; is.c:270:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %10:gpr32common, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %10:gpr32common = LDRWui %stack.11.i, 0, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %10:gpr32common = LDRWui %stack.11.i, 0, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
SU(1):   dead $wzr = SUBSWri %10:gpr32common, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9

********** MI Scheduling **********
randlc:%bb.3 for.body
  From: %80:fpr64 = LDRDui %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
    To: B %bb.2, debug-location !135; is.c:270:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=2
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: %7 %4 %82 
Live Out: %7 %4 %82 
Live Thru: GPR64temp=2
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %7
  UpdateRegP: SU(3) %85:fpr64 = LDRDui %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) STRDui %86:fpr64, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  LiveReg: %4
  UpdateRegP: SU(0) %80:fpr64 = LDRDui %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(2) STRDui %83:fpr64, %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  LiveReg: %82
  UpdateRegP: SU(1) %83:fpr64 = FMULDrr %80:fpr64, %82:fpr64, debug-location !129; is.c:271:24
              to 
Top Pressure:
GPR64temp=2
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
GPR64temp=2
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Excess PSets: 
SU(0):   %80:fpr64 = LDRDui %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%80
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %83:fpr64 = FMULDrr %80:fpr64, %82:fpr64, debug-location !129; is.c:271:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%80
  Successors:
    SU(2): Data Latency=1 Reg=%83
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   STRDui %83:fpr64, %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%83
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(3):   %85:fpr64 = LDRDui %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%85
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %86:fpr64 = FADDDrr %85:fpr64, %85:fpr64, debug-location !132; is.c:272:23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%85
  Successors:
    SU(5): Data Latency=1 Reg=%86
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   STRDui %86:fpr64, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%86
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %87:gpr32common = LDRWui %stack.11.i, 0, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=%87
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %88:gpr32common = nsw ADDWri %87:gpr32common, 1, 0, debug-location !134; is.c:270:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%87
  Successors:
    SU(8): Data Latency=1 Reg=%88
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   STRWui %88:gpr32common, %stack.11.i, 0, debug-location !134 :: (store 4 into %ir.i); is.c:270:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%88
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.2, debug-location !135; is.c:270:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) STRWui %88:gpr32common, %stack.11.i, 0, debug-location !134 :: (store 4 into %ir.i); is.c:270:31
Bottom Pressure:
GPR64temp=2
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %88
  UpdateRegP: SU(8) STRWui %88:gpr32common, %stack.11.i, 0, debug-location !134 :: (store 4 into %ir.i); is.c:270:31
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 1c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %86:fpr64, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %86
  UpdateRegP: SU(5) STRDui %86:fpr64, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) %88:gpr32common = nsw ADDWri %87:gpr32common, 1, 0, debug-location !134; is.c:270:31
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %87
  UpdateRegP: SU(7) %88:gpr32common = nsw ADDWri %87:gpr32common, 1, 0, debug-location !134; is.c:270:31
              to GPR32 -1
  Ready @2c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 3c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(4) %86:fpr64 = FADDDrr %85:fpr64, %85:fpr64, debug-location !132; is.c:272:23
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %85
  UpdateRegP: SU(4) %86:fpr64 = FADDDrr %85:fpr64, %85:fpr64, debug-location !132; is.c:272:23
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDui %83:fpr64, %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %83
  UpdateRegP: SU(2) STRDui %83:fpr64, %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
              to 
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %83:fpr64 = FMULDrr %80:fpr64, %82:fpr64, debug-location !129; is.c:271:24
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %80
  UpdateRegP: SU(1) %83:fpr64 = FMULDrr %80:fpr64, %82:fpr64, debug-location !129; is.c:271:24
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 3 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %87:gpr32common = LDRWui %stack.11.i, 0, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @6c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %85:fpr64 = LDRDui %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %80:fpr64 = LDRDui %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
Bottom Pressure:
GPR64temp=2
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %80:fpr64 = LDRDui %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
SU(3):   %85:fpr64 = LDRDui %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
SU(6):   %87:gpr32common = LDRWui %stack.11.i, 0, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
SU(1):   %83:fpr64 = FMULDrr %80:fpr64, %82:fpr64, debug-location !129; is.c:271:24
SU(2):   STRDui %83:fpr64, %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
SU(4):   %86:fpr64 = FADDDrr %85:fpr64, %85:fpr64, debug-location !132; is.c:272:23
SU(7):   %88:gpr32common = nsw ADDWri %87:gpr32common, 1, 0, debug-location !134; is.c:270:31
SU(5):   STRDui %86:fpr64, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
SU(8):   STRWui %88:gpr32common, %stack.11.i, 0, debug-location !134 :: (store 4 into %ir.i); is.c:270:31

********** MI Scheduling **********
randlc:%bb.4 for.end
  From: %12:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %12:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%12
  Single Issue       : false;
SU(1):   STRWui %12:gpr32, %stack.11.i, 0, debug-location !138 :: (store 4 into %ir.i); is.c:274:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%12
  Single Issue       : false;
SU(2):   %69:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %71:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=1 Reg=%71
  Single Issue       : false;
SU(4):   %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(3): Data Latency=1 Reg=%71
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %74:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 5 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %74:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
BotQ.A RemLatency SU(1) 1c
BotQ.A RemLatency SU(4) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %69:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %12:gpr32, %stack.11.i, 0, debug-location !138 :: (store 4 into %ir.i); is.c:274:16
  Ready @2c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(4) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A TopLatency SU(4) 1c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %71:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %12:gpr32 = MOVi32imm 1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %12:gpr32 = MOVi32imm 1
SU(3):   %71:gpr64temp = ADRP target-flags(aarch64-page) %const.0
SU(4):   %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(1):   STRWui %12:gpr32, %stack.11.i, 0, debug-location !138 :: (store 4 into %ir.i); is.c:274:16
SU(2):   %69:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46
SU(5):   %74:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46

********** MI Scheduling **********
randlc:%bb.5 for.cond3
  From: %13:gpr32common = LDRWui %stack.11.i, 0, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
    To: Bcc 12, %bb.7, implicit killed $nzcv, debug-location !144; is.c:274:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %13:gpr32common = LDRWui %stack.11.i, 0, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%13
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %13:gpr32common, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%13
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.7, implicit killed $nzcv, debug-location !144; is.c:274:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %13:gpr32common, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %13:gpr32common = LDRWui %stack.11.i, 0, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %13:gpr32common = LDRWui %stack.11.i, 0, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
SU(1):   dead $wzr = SUBSWri %13:gpr32common, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9

********** MI Scheduling **********
randlc:%bb.6 for.body5
  From: %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
    To: B %bb.5, debug-location !153; is.c:274:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=2
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: %74 %69 %72 
Live Out: %74 %69 %72 
Live Thru: GPR64temp=2
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %74
  UpdateRegP: SU(3) %75:fpr64 = LDRDui %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) STRDui %76:fpr64, %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  LiveReg: %69
  UpdateRegP: SU(0) %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(2) STRDui %73:fpr64, %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  LiveReg: %72
  UpdateRegP: SU(1) %73:fpr64 = FMULDrr %70:fpr64, %72:fpr64, debug-location !147; is.c:275:24
              to 
Top Pressure:
GPR64temp=2
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
GPR64temp=2
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Excess PSets: 
SU(0):   %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%70
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %73:fpr64 = FMULDrr %70:fpr64, %72:fpr64, debug-location !147; is.c:275:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%70
  Successors:
    SU(2): Data Latency=1 Reg=%73
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   STRDui %73:fpr64, %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%73
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(3):   %75:fpr64 = LDRDui %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%75
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %76:fpr64 = FADDDrr %75:fpr64, %75:fpr64, debug-location !150; is.c:276:23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%75
  Successors:
    SU(5): Data Latency=1 Reg=%76
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   STRDui %76:fpr64, %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%76
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %77:gpr32common = LDRWui %stack.11.i, 0, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=%77
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %78:gpr32common = nsw ADDWri %77:gpr32common, 1, 0, debug-location !152; is.c:274:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%77
  Successors:
    SU(8): Data Latency=1 Reg=%78
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   STRWui %78:gpr32common, %stack.11.i, 0, debug-location !152 :: (store 4 into %ir.i); is.c:274:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%78
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.5, debug-location !153; is.c:274:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) STRWui %78:gpr32common, %stack.11.i, 0, debug-location !152 :: (store 4 into %ir.i); is.c:274:31
Bottom Pressure:
GPR64temp=2
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %78
  UpdateRegP: SU(8) STRWui %78:gpr32common, %stack.11.i, 0, debug-location !152 :: (store 4 into %ir.i); is.c:274:31
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 1c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %76:fpr64, %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %76
  UpdateRegP: SU(5) STRDui %76:fpr64, %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) %78:gpr32common = nsw ADDWri %77:gpr32common, 1, 0, debug-location !152; is.c:274:31
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %77
  UpdateRegP: SU(7) %78:gpr32common = nsw ADDWri %77:gpr32common, 1, 0, debug-location !152; is.c:274:31
              to GPR32 -1
  Ready @2c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 3c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(4) %76:fpr64 = FADDDrr %75:fpr64, %75:fpr64, debug-location !150; is.c:276:23
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %75
  UpdateRegP: SU(4) %76:fpr64 = FADDDrr %75:fpr64, %75:fpr64, debug-location !150; is.c:276:23
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDui %73:fpr64, %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %73
  UpdateRegP: SU(2) STRDui %73:fpr64, %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
              to 
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %73:fpr64 = FMULDrr %70:fpr64, %72:fpr64, debug-location !147; is.c:275:24
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %70
  UpdateRegP: SU(1) %73:fpr64 = FMULDrr %70:fpr64, %72:fpr64, debug-location !147; is.c:275:24
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 3 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %77:gpr32common = LDRWui %stack.11.i, 0, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @6c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %75:fpr64 = LDRDui %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
Bottom Pressure:
GPR64temp=2
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
SU(3):   %75:fpr64 = LDRDui %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
SU(6):   %77:gpr32common = LDRWui %stack.11.i, 0, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
SU(1):   %73:fpr64 = FMULDrr %70:fpr64, %72:fpr64, debug-location !147; is.c:275:24
SU(2):   STRDui %73:fpr64, %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
SU(4):   %76:fpr64 = FADDDrr %75:fpr64, %75:fpr64, debug-location !150; is.c:276:23
SU(7):   %78:gpr32common = nsw ADDWri %77:gpr32common, 1, 0, debug-location !152; is.c:274:31
SU(5):   STRDui %76:fpr64, %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
SU(8):   STRWui %78:gpr32common, %stack.11.i, 0, debug-location !152 :: (store 4 into %ir.i); is.c:274:31

********** MI Scheduling **********
randlc:%bb.7 for.end10
  From: %15:gpr64temp = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !156; is.c:278:12
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %15:gpr64temp = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !156; is.c:278:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%15
  Single Issue       : false;
SU(1):   %16:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%16
  Single Issue       : false;
SU(2):   STRWui %16:gpr32, %15:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%16
    SU(0): Data Latency=1 Reg=%15
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %16:gpr32, %15:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12
  Ready @0c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %16:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %15:gpr64temp = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !156; is.c:278:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %15:gpr64temp = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !156; is.c:278:12
SU(1):   %16:gpr32 = MOVi32imm 1
SU(2):   STRWui %16:gpr32, %15:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12

********** MI Scheduling **********
randlc:%bb.8 if.end
  From: %17:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !158; is.c:283:10
    To: RET_ReallyLR implicit killed $d0, debug-location !235; is.c:305:5
 RegionInstrs: 69
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=2
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Excess PSets: 
Cluster ld/st SU(16) - SU(24)
  Copy Succ SU(17)
  Copy Succ SU(63)
SU(0):   %17:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !158; is.c:283:10
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 52
  Successors:
    SU(35): Data Latency=1 Reg=%17
    SU(1): Data Latency=1 Reg=%17
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(1):   %18:fpr64 = LDRDui %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 51
  Predecessors:
    SU(0): Data Latency=1 Reg=%17
  Successors:
    SU(18): Data Latency=4 Reg=%18
    SU(4): Data Latency=4 Reg=%18
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(2):   %19:gpr64common = LDRXui %stack.1.A.addr, 0, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 55
  Successors:
    SU(10): Data Latency=4 Reg=%19
    SU(3): Data Latency=4 Reg=%19
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   %20:fpr64 = LDRDui %19:gpr64common, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
  # preds left       : 1
  # succs left       : 17
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 51
  Predecessors:
    SU(2): Data Latency=4 Reg=%19
  Successors:
    SU(4): Data Latency=4 Reg=%20
    SU(63): Ord  Latency=0 Memory
    SU(57): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(44): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %21:fpr64 = FMULDrr %18:fpr64, %20:fpr64, debug-location !161; is.c:283:14
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 47
  Predecessors:
    SU(3): Data Latency=4 Reg=%20
    SU(1): Data Latency=4 Reg=%18
  Successors:
    SU(6): Data Latency=1 Reg=%21
    SU(5): Data Latency=1 Reg=%21
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   STRDui %21:fpr64, %stack.2.T1, 0, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 44
  Predecessors:
    SU(4): Data Latency=1 Reg=%21
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(34): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(66): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %22:gpr32 = FCVTZSUWDr %21:fpr64, debug-location !163; is.c:284:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 46
  Predecessors:
    SU(4): Data Latency=1 Reg=%21
  Successors:
    SU(8): Data Latency=1 Reg=%22
    SU(7): Data Latency=1 Reg=%22
  Pressure Diff      : FPR8 1    GPR32 -1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(7):   STRWui %22:gpr32, %stack.12.j, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
  # preds left       : 2
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 44
  Predecessors:
    SU(6): Data Latency=1 Reg=%22
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(55): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(66): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %23:fpr64 = SCVTFUWDri %22:gpr32, debug-location !165; is.c:285:10
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 45
  Predecessors:
    SU(6): Data Latency=1 Reg=%22
  Successors:
    SU(13): Data Latency=1 Reg=%23
    SU(9): Data Latency=1 Reg=%23
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(9):   STRDui %23:fpr64, %stack.6.A1, 0, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 44
  Predecessors:
    SU(8): Data Latency=1 Reg=%23
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(30): Ord  Latency=1 Memory
    SU(66): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(10):   %24:fpr64 = LDRDui %19:gpr64common, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
  # preds left       : 4
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 43
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Data Latency=4 Reg=%19
  Successors:
    SU(14): Data Latency=4 Reg=%24
    SU(63): Ord  Latency=0 Memory
    SU(57): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(44): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(11):   %25:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !169; is.c:286:15
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 45
  Successors:
    SU(45): Data Latency=1 Reg=%25
    SU(41): Data Latency=1 Reg=%25
    SU(26): Data Latency=1 Reg=%25
    SU(12): Data Latency=1 Reg=%25
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(12):   %26:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 44
  Predecessors:
    SU(11): Data Latency=1 Reg=%25
  Successors:
    SU(13): Data Latency=4 Reg=%26
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(13):   %27:fpr64 = FMULDrr %26:fpr64, %23:fpr64, debug-location !171; is.c:286:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 40
  Predecessors:
    SU(8): Data Latency=1 Reg=%23
    SU(12): Data Latency=4 Reg=%26
  Successors:
    SU(14): Data Latency=1 Reg=%27
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(14):   %28:fpr64 = FSUBDrr %24:fpr64, %27:fpr64, debug-location !172; is.c:286:13
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 39
  Predecessors:
    SU(10): Data Latency=4 Reg=%24
    SU(13): Data Latency=1 Reg=%27
  Successors:
    SU(32): Data Latency=1 Reg=%28
    SU(15): Data Latency=1 Reg=%28
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(15):   STRDui %28:fpr64, %stack.7.A2, 0, debug-location !173 :: (store 8 into %ir.A2); is.c:286:8
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 38
  Predecessors:
    SU(14): Data Latency=1 Reg=%28
    SU(10): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(47): Ord  Latency=1 Memory
    SU(66): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(16):   %29:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 41
  Successors:
    SU(17): Data Latency=4 Reg=%29
    SU(63): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   %30:fpr64 = LDRDui %29:gpr64common, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
  # preds left       : 6
  # succs left       : 13
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 37
  Predecessors:
    SU(16): Data Latency=4 Reg=%29
    SU(15): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(24): Ord  Latency=0 Artificial
  Successors:
    SU(18): Data Latency=4 Reg=%30
    SU(63): Ord  Latency=0 Memory
    SU(57): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(44): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(18):   %31:fpr64 = FMULDrr %18:fpr64, %30:fpr64, debug-location !177; is.c:292:14
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 33
  Predecessors:
    SU(17): Data Latency=4 Reg=%30
    SU(1): Data Latency=4 Reg=%18
  Successors:
    SU(20): Data Latency=1 Reg=%31
    SU(19): Data Latency=1 Reg=%31
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(19):   STRDui %31:fpr64, %stack.2.T1, 0, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 30
  Predecessors:
    SU(18): Data Latency=1 Reg=%31
    SU(17): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(34): Ord  Latency=0 Memory
    SU(66): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(20):   %32:gpr32 = FCVTZSUWDr %31:fpr64, debug-location !179; is.c:293:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 32
  Predecessors:
    SU(18): Data Latency=1 Reg=%31
  Successors:
    SU(22): Data Latency=1 Reg=%32
    SU(21): Data Latency=1 Reg=%32
  Pressure Diff      : FPR8 1    GPR32 -1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(21):   STRWui %32:gpr32, %stack.12.j, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
  # preds left       : 5
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 30
  Predecessors:
    SU(20): Data Latency=1 Reg=%32
    SU(17): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(55): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(66): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(22):   %33:fpr64 = SCVTFUWDri %32:gpr32, debug-location !181; is.c:294:10
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 31
  Predecessors:
    SU(20): Data Latency=1 Reg=%32
  Successors:
    SU(32): Data Latency=1 Reg=%33
    SU(27): Data Latency=1 Reg=%33
    SU(23): Data Latency=1 Reg=%33
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(23):   STRDui %33:fpr64, %stack.8.X1, 0, debug-location !182 :: (store 8 into %ir.X1); is.c:294:8
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 30
  Predecessors:
    SU(22): Data Latency=1 Reg=%33
    SU(17): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(66): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(24):   %34:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Predecessors:
    SU(16): Ord  Latency=0 Cluster
  Successors:
    SU(25): Data Latency=4 Reg=%34
    SU(63): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(25):   %35:fpr64 = LDRDui %34:gpr64common, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
  # preds left       : 8
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 4
  Depth              : 26
  Height             : 29
  Predecessors:
    SU(24): Data Latency=4 Reg=%34
    SU(23): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(28): Data Latency=4 Reg=%35
    SU(63): Ord  Latency=0 Memory
    SU(57): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(44): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(26):   %36:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 30
  Predecessors:
    SU(11): Data Latency=1 Reg=%25
  Successors:
    SU(27): Data Latency=4 Reg=%36
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(27):   %37:fpr64 = FMULDrr %36:fpr64, %33:fpr64, debug-location !187; is.c:295:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 26
  Predecessors:
    SU(22): Data Latency=1 Reg=%33
    SU(26): Data Latency=4 Reg=%36
  Successors:
    SU(28): Data Latency=1 Reg=%37
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(28):   %38:fpr64 = FSUBDrr %35:fpr64, %37:fpr64, debug-location !188; is.c:295:13
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 30
  Height             : 25
  Predecessors:
    SU(25): Data Latency=4 Reg=%35
    SU(27): Data Latency=1 Reg=%37
  Successors:
    SU(48): Data Latency=1 Reg=%38
    SU(31): Data Latency=1 Reg=%38
    SU(29): Data Latency=1 Reg=%38
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(29):   STRDui %38:fpr64, %stack.9.X2, 0, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 31
  Height             : 10
  Predecessors:
    SU(28): Data Latency=1 Reg=%38
    SU(25): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(66): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(30):   %39:fpr64 = LDRDui %stack.6.A1, 0, debug-location !190 :: (dereferenceable load 8 from %ir.A1); is.c:296:10
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 28
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(31): Data Latency=4 Reg=%39
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(31):   %40:fpr64 = FMULDrr %39:fpr64, %38:fpr64, debug-location !192; is.c:296:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 31
  Height             : 24
  Predecessors:
    SU(28): Data Latency=1 Reg=%38
    SU(30): Data Latency=4 Reg=%39
  Successors:
    SU(33): Data Latency=1 Reg=%40
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(32):   %41:fpr64 = FMULDrr %28:fpr64, %33:fpr64, debug-location !195; is.c:296:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 24
  Predecessors:
    SU(22): Data Latency=1 Reg=%33
    SU(14): Data Latency=1 Reg=%28
  Successors:
    SU(33): Data Latency=1 Reg=%41
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(33):   %42:fpr64 = FADDDrr %40:fpr64, %41:fpr64, debug-location !196; is.c:296:18
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 32
  Height             : 23
  Predecessors:
    SU(31): Data Latency=1 Reg=%40
    SU(32): Data Latency=1 Reg=%41
  Successors:
    SU(43): Data Latency=1 Reg=%42
    SU(36): Data Latency=1 Reg=%42
    SU(34): Data Latency=1 Reg=%42
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(34):   STRDui %42:fpr64, %stack.2.T1, 0, debug-location !197 :: (store 8 into %ir.T1); is.c:296:8
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 33
  Height             : 10
  Predecessors:
    SU(33): Data Latency=1 Reg=%42
    SU(25): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(66): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(35):   %43:fpr64 = LDRDui %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 26
  Predecessors:
    SU(0): Data Latency=1 Reg=%17
  Successors:
    SU(36): Data Latency=4 Reg=%43
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(36):   %44:fpr64 = FMULDrr %43:fpr64, %42:fpr64, debug-location !200; is.c:298:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 33
  Height             : 22
  Predecessors:
    SU(33): Data Latency=1 Reg=%42
    SU(35): Data Latency=4 Reg=%43
  Successors:
    SU(37): Data Latency=1 Reg=%44
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(37):   %45:gpr32 = FCVTZSUWDr %44:fpr64, debug-location !198; is.c:298:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 21
  Predecessors:
    SU(36): Data Latency=1 Reg=%44
  Successors:
    SU(39): Data Latency=1 Reg=%45
    SU(38): Data Latency=1 Reg=%45
  Pressure Diff      : FPR8 1    GPR32 -1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(38):   STRWui %45:gpr32, %stack.12.j, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 10
  Predecessors:
    SU(37): Data Latency=1 Reg=%45
    SU(25): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(55): Ord  Latency=0 Memory
    SU(66): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(39):   %46:fpr64 = SCVTFUWDri %45:gpr32, debug-location !202; is.c:299:10
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 20
  Predecessors:
    SU(37): Data Latency=1 Reg=%45
  Successors:
    SU(42): Data Latency=1 Reg=%46
    SU(40): Data Latency=1 Reg=%46
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(40):   STRDui %46:fpr64, %stack.3.T2, 0, debug-location !203 :: (store 8 into %ir.T2); is.c:299:8
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 10
  Predecessors:
    SU(39): Data Latency=1 Reg=%46
    SU(25): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(66): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(41):   %47:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 23
  Predecessors:
    SU(11): Data Latency=1 Reg=%25
  Successors:
    SU(42): Data Latency=4 Reg=%47
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(42):   %48:fpr64 = FMULDrr %47:fpr64, %46:fpr64, debug-location !207; is.c:300:18
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 19
  Predecessors:
    SU(39): Data Latency=1 Reg=%46
    SU(41): Data Latency=4 Reg=%47
  Successors:
    SU(43): Data Latency=1 Reg=%48
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(43):   %49:fpr64 = FSUBDrr %42:fpr64, %48:fpr64, debug-location !208; is.c:300:12
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 37
  Height             : 18
  Predecessors:
    SU(42): Data Latency=1 Reg=%48
    SU(33): Data Latency=1 Reg=%42
  Successors:
    SU(46): Data Latency=1 Reg=%49
    SU(44): Data Latency=1 Reg=%49
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(44):   STRDui %49:fpr64, %stack.10.Z, 0, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 10
  Predecessors:
    SU(43): Data Latency=1 Reg=%49
    SU(25): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(66): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(45):   %50:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 21
  Predecessors:
    SU(11): Data Latency=1 Reg=%25
  Successors:
    SU(46): Data Latency=4 Reg=%50
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(46):   %51:fpr64 = FMULDrr %50:fpr64, %49:fpr64, debug-location !212; is.c:301:14
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 17
  Predecessors:
    SU(43): Data Latency=1 Reg=%49
    SU(45): Data Latency=4 Reg=%50
  Successors:
    SU(49): Data Latency=1 Reg=%51
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(47):   %52:fpr64 = LDRDui %stack.7.A2, 0, debug-location !213 :: (dereferenceable load 8 from %ir.A2); is.c:301:20
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 21
  Predecessors:
    SU(15): Ord  Latency=1 Memory
  Successors:
    SU(48): Data Latency=4 Reg=%52
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(48):   %53:fpr64 = FMULDrr %52:fpr64, %38:fpr64, debug-location !215; is.c:301:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 31
  Height             : 17
  Predecessors:
    SU(28): Data Latency=1 Reg=%38
    SU(47): Data Latency=4 Reg=%52
  Successors:
    SU(49): Data Latency=1 Reg=%53
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(49):   %54:fpr64 = FADDDrr %51:fpr64, %53:fpr64, debug-location !216; is.c:301:18
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 39
  Height             : 16
  Predecessors:
    SU(46): Data Latency=1 Reg=%51
    SU(48): Data Latency=1 Reg=%53
  Successors:
    SU(61): Data Latency=1 Reg=%54
    SU(53): Data Latency=1 Reg=%54
    SU(50): Data Latency=1 Reg=%54
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(50):   STRDui %54:fpr64, %stack.4.T3, 0, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 40
  Height             : 10
  Predecessors:
    SU(49): Data Latency=1 Reg=%54
    SU(25): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(66): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(51):   %55:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !218; is.c:302:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 20
  Successors:
    SU(64): Data Latency=1 Reg=%55
    SU(52): Data Latency=1 Reg=%55
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(52):   %56:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 19
  Predecessors:
    SU(51): Data Latency=1 Reg=%55
  Successors:
    SU(53): Data Latency=4 Reg=%56
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(53):   %57:fpr64 = FMULDrr %56:fpr64, %54:fpr64, debug-location !220; is.c:302:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 40
  Height             : 15
  Predecessors:
    SU(49): Data Latency=1 Reg=%54
    SU(52): Data Latency=4 Reg=%56
  Successors:
    SU(54): Data Latency=1 Reg=%57
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(54):   %58:gpr32 = FCVTZSUWDr %57:fpr64, debug-location !218; is.c:302:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 41
  Height             : 14
  Predecessors:
    SU(53): Data Latency=1 Reg=%57
  Successors:
    SU(56): Data Latency=1 Reg=%58
    SU(55): Data Latency=1 Reg=%58
  Pressure Diff      : FPR8 1    GPR32 -1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(55):   STRWui %58:gpr32, %stack.12.j, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 42
  Height             : 10
  Predecessors:
    SU(54): Data Latency=1 Reg=%58
    SU(38): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(66): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(56):   %59:fpr64 = SCVTFUWDri %58:gpr32, debug-location !222; is.c:303:10
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 42
  Height             : 13
  Predecessors:
    SU(54): Data Latency=1 Reg=%58
  Successors:
    SU(60): Data Latency=1 Reg=%59
    SU(57): Data Latency=1 Reg=%59
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(57):   STRDui %59:fpr64, %stack.5.T4, 0, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 43
  Height             : 10
  Predecessors:
    SU(56): Data Latency=1 Reg=%59
    SU(25): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(66): Ord  Latency=1 Memory
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(58):   %60:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !225; is.c:304:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 17
  Successors:
    SU(59): Data Latency=1 Reg=%60
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(59):   %61:fpr64 = LDRDui %60:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 16
  Predecessors:
    SU(58): Data Latency=1 Reg=%60
  Successors:
    SU(60): Data Latency=4 Reg=%61
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(60):   %62:fpr64 = FMULDrr %61:fpr64, %59:fpr64, debug-location !227; is.c:304:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 43
  Height             : 12
  Predecessors:
    SU(56): Data Latency=1 Reg=%59
    SU(59): Data Latency=4 Reg=%61
  Successors:
    SU(61): Data Latency=1 Reg=%62
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(61):   %63:fpr64 = FSUBDrr %54:fpr64, %62:fpr64, debug-location !228; is.c:304:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 44
  Height             : 11
  Predecessors:
    SU(60): Data Latency=1 Reg=%62
    SU(49): Data Latency=1 Reg=%54
  Successors:
    SU(63): Data Latency=1 Reg=%63
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(62):   %64:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(63): Data Latency=4 Reg=%64
    SU(63): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(63):   STRDui %63:fpr64, %64:gpr64common, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
  # preds left       : 35
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 45
  Height             : 10
  Predecessors:
    SU(61): Data Latency=1 Reg=%63
    SU(62): Ord  Latency=0 Memory
    SU(62): Data Latency=4 Reg=%64
    SU(59): Ord  Latency=0 Memory
    SU(57): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(45): Ord  Latency=0 Memory
    SU(44): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(66): Ord  Latency=1 Memory
    SU(65): Ord  Latency=1 Memory
    SU(64): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(64):   %65:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 46
  Height             : 5
  Predecessors:
    SU(63): Ord  Latency=1 Memory
    SU(51): Data Latency=1 Reg=%55
  Successors:
    SU(67): Data Latency=4 Reg=%65
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(65):   %66:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 46
  Height             : 9
  Predecessors:
    SU(63): Ord  Latency=1 Memory
  Successors:
    SU(66): Data Latency=4 Reg=%66
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(66):   %67:fpr64 = LDRDui %66:gpr64common, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
  # preds left       : 17
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 50
  Height             : 5
  Predecessors:
    SU(65): Data Latency=4 Reg=%66
    SU(63): Ord  Latency=1 Memory
    SU(57): Ord  Latency=1 Memory
    SU(55): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(44): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(38): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(67): Data Latency=4 Reg=%67
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(67):   %68:fpr64 = FMULDrr %65:fpr64, %67:fpr64, debug-location !234; is.c:305:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 54
  Height             : 1
  Predecessors:
    SU(66): Data Latency=4 Reg=%67
    SU(64): Data Latency=4 Reg=%65
  Successors:
    SU(68): Data Latency=1 Reg=%68
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(68):   $d0 = COPY %68:fpr64, debug-location !235; is.c:305:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 55
  Height             : 0
  Predecessors:
    SU(67): Data Latency=1 Reg=%68
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : ZPR_3b -1
  Single Issue       : false;
ExitSU:   RET_ReallyLR implicit killed $d0, debug-location !235; is.c:305:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 55
  Height             : 0
  Predecessors:
    SU(68): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 55
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 68 
Pick Bot ONLY1     
Scheduling SU(68) $d0 = COPY %68:fpr64, debug-location !235; is.c:305:5
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %68
  UpdateRegP: SU(68) $d0 = COPY %68:fpr64, debug-location !235; is.c:305:5
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @0c
  BotQ.A TopLatency SU(68) 55c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 67 
Pick Bot ONLY1     
Scheduling SU(67) %68:fpr64 = FMULDrr %65:fpr64, %67:fpr64, debug-location !234; is.c:305:17
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %65
  UpdateRegP: SU(67) %68:fpr64 = FMULDrr %65:fpr64, %67:fpr64, debug-location !234; is.c:305:17
              to 
  LiveReg: %67
  UpdateRegP: SU(67) %68:fpr64 = FMULDrr %65:fpr64, %67:fpr64, debug-location !234; is.c:305:17
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @1c
  BotQ.A BotLatency SU(67) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 66 64 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(66) 50c
Picking from Bot:
  Cand SU(66) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(66) %67:fpr64 = LDRDui %66:gpr64common, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %66
  UpdateRegP: SU(66) %67:fpr64 = LDRDui %66:gpr64common, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A BotLatency SU(66) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 65 
Queue BotQ.A: 64 
Pick Bot ONLY1     
Scheduling SU(64) %65:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
Bottom Pressure:
GPR64temp=1
GPR32=2
  LiveReg: %55
  UpdateRegP: SU(52) %56:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(64) %65:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 65 
Pick Bot ONLY1     
Scheduling SU(65) %66:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @9c
  BotQ.A BotLatency SU(65) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 63 
Pick Bot ONLY1     
Scheduling SU(63) STRDui %63:fpr64, %64:gpr64common, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %63
  UpdateRegP: SU(63) STRDui %63:fpr64, %64:gpr64common, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
              to GPR32 1
  LiveReg: %64
  UpdateRegP: SU(63) STRDui %63:fpr64, %64:gpr64common, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
              to 
  Ready @10c
  BotQ.A BotLatency SU(63) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 62 
Queue BotQ.A: 61 57 55 50 44 40 34 29 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(61) 44c
Picking from Bot:
  Cand SU(61) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(61) %63:fpr64 = FSUBDrr %54:fpr64, %62:fpr64, debug-location !228; is.c:304:13
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %54
  UpdateRegP: SU(50) STRDui %54:fpr64, %stack.4.T3, 0, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
              to 
  UpdateRegP: SU(53) %57:fpr64 = FMULDrr %56:fpr64, %54:fpr64, debug-location !220; is.c:302:13
              to 
  UpdateRegP: SU(61) %63:fpr64 = FSUBDrr %54:fpr64, %62:fpr64, debug-location !228; is.c:304:13
              to 
  LiveReg: %62
  UpdateRegP: SU(61) %63:fpr64 = FSUBDrr %54:fpr64, %62:fpr64, debug-location !228; is.c:304:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @11c
  BotQ.A BotLatency SU(61) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 62 
Queue BotQ.A: 29 57 55 50 44 40 34 60 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(57) 43c
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(60) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(60) %62:fpr64 = FMULDrr %61:fpr64, %59:fpr64, debug-location !227; is.c:304:19
Bottom Pressure:
GPR64temp=1
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %61
  UpdateRegP: SU(60) %62:fpr64 = FMULDrr %61:fpr64, %59:fpr64, debug-location !227; is.c:304:19
              to 
  LiveReg: %59
  UpdateRegP: SU(57) STRDui %59:fpr64, %stack.5.T4, 0, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
              to 
  UpdateRegP: SU(60) %62:fpr64 = FMULDrr %61:fpr64, %59:fpr64, debug-location !227; is.c:304:19
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @12c
  BotQ.A BotLatency SU(60) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 62 59 
Queue BotQ.A: 29 57 55 50 44 40 34 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(57) 43c
BotQ.A RemLatency SU(59) 1c
  BotQ.A RemainingLatency 43 + 13c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(57) BOT-PATH                  43 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(57) STRDui %59:fpr64, %stack.5.T4, 0, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
Bottom Pressure:
GPR64temp=1
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @13c
  BotQ.A TopLatency SU(57) 43c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 59 
Queue BotQ.A: 29 34 55 50 44 40 56 62 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(55) 42c
BotQ.A RemLatency SU(59) 1c
  BotQ.A RemainingLatency 42 + 14c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(34) BOT-PATH                  33 cycles 
  Cand SU(55) BOT-PATH                  42 cycles 
  Cand SU(56) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(56) %59:fpr64 = SCVTFUWDri %58:gpr32, debug-location !222; is.c:303:10
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %58
  UpdateRegP: SU(55) STRWui %58:gpr32, %stack.12.j, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
              to 
  UpdateRegP: SU(56) %59:fpr64 = SCVTFUWDri %58:gpr32, debug-location !222; is.c:303:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @14c
  BotQ.A BotLatency SU(56) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 9
  Executed: 15c
  Critical: 9c, 9 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 59 
Queue BotQ.A: 29 34 55 50 44 40 62 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(55) 42c
BotQ.A RemLatency SU(59) 1c
  BotQ.A RemainingLatency 42 + 15c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(34) BOT-PATH                  33 cycles 
  Cand SU(55) BOT-PATH                  42 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(55) STRWui %58:gpr32, %stack.12.j, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @15c
  BotQ.A TopLatency SU(55) 42c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 10
  Executed: 16c
  Critical: 10c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 34 62 50 44 40 54 38 59 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(54) 41c
  BotQ.A RemainingLatency 41 + 16c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(34) BOT-PATH                  33 cycles 
  Cand SU(50) BOT-PATH                  40 cycles 
  Cand SU(54) BOT-PATH                  41 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(54) %58:gpr32 = FCVTZSUWDr %57:fpr64, debug-location !218; is.c:302:9
Bottom Pressure:
GPR64temp=1
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %57
  UpdateRegP: SU(54) %58:gpr32 = FCVTZSUWDr %57:fpr64, debug-location !218; is.c:302:9
              to GPR32 -1
  Ready @16c
  BotQ.A BotLatency SU(54) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 11
  Executed: 17c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 34 62 50 44 40 59 38 53 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(50) 40c
  BotQ.A RemainingLatency 40 + 17c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(34) BOT-PATH                  33 cycles 
  Cand SU(50) BOT-PATH                  40 cycles 
  Cand SU(53) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(53) %57:fpr64 = FMULDrr %56:fpr64, %54:fpr64, debug-location !220; is.c:302:13
Bottom Pressure:
GPR64temp=1
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %56
  UpdateRegP: SU(53) %57:fpr64 = FMULDrr %56:fpr64, %54:fpr64, debug-location !220; is.c:302:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @17c
  BotQ.A BotLatency SU(53) 15c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 12
  Executed: 18c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 52 
Queue BotQ.A: 29 34 62 50 44 40 59 38 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(50) 40c
BotQ.A RemLatency SU(52) 1c
  BotQ.A RemainingLatency 40 + 18c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(34) BOT-PATH                  33 cycles 
  Cand SU(50) BOT-PATH                  40 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(50) STRDui %54:fpr64, %stack.4.T3, 0, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
Bottom Pressure:
GPR64temp=1
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @18c
  BotQ.A TopLatency SU(50) 40c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 13
  Executed: 19c
  Critical: 13c, 13 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 52 
Queue BotQ.A: 29 34 62 38 44 40 59 49 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(49) 39c
BotQ.A RemLatency SU(52) 1c
  BotQ.A RemainingLatency 39 + 19c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(34) BOT-PATH                  33 cycles 
  Cand SU(38) BOT-PATH                  35 cycles 
  Cand SU(44) BOT-PATH                  38 cycles 
  Cand SU(49) BOT-PATH                  39 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(49) %54:fpr64 = FADDDrr %51:fpr64, %53:fpr64, debug-location !216; is.c:301:18
Bottom Pressure:
GPR64temp=1
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %51
  UpdateRegP: SU(49) %54:fpr64 = FADDDrr %51:fpr64, %53:fpr64, debug-location !216; is.c:301:18
              to 
  LiveReg: %53
  UpdateRegP: SU(49) %54:fpr64 = FADDDrr %51:fpr64, %53:fpr64, debug-location !216; is.c:301:18
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @19c
  BotQ.A BotLatency SU(49) 16c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 14
  Executed: 20c
  Critical: 14c, 14 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 52 
Queue BotQ.A: 29 34 62 38 44 40 59 46 48 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(44) 38c
BotQ.A RemLatency SU(52) 1c
  BotQ.A RemainingLatency 38 + 20c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(34) BOT-PATH                  33 cycles 
  Cand SU(62) REG-MAX                            
  Cand SU(38) BOT-PATH                  35 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(38) STRWui %45:gpr32, %stack.12.j, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
Bottom Pressure:
GPR64temp=1
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %45
  UpdateRegP: SU(38) STRWui %45:gpr32, %stack.12.j, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
              to 
  UpdateRegP: SU(39) %46:fpr64 = SCVTFUWDri %45:gpr32, debug-location !202; is.c:299:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 15
  Executed: 21c
  Critical: 15c, 15 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 34 62 48 44 40 59 46 52 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(44) 38c
  BotQ.A RemainingLatency 38 + 21c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(34) BOT-PATH                  33 cycles 
  Cand SU(62) REG-MAX                            
  Cand SU(52) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(52) %56:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
Bottom Pressure:
GPR64temp=1
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @21c
  BotQ.A BotLatency SU(52) 19c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 16
  Executed: 22c
  Critical: 16c, 16 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 34 62 48 44 40 59 46 51 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(44) 38c
  BotQ.A RemainingLatency 38 + 22c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(34) BOT-PATH                  33 cycles 
  Cand SU(44) BOT-PATH                  38 cycles 
  Cand SU(46) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(46) %51:fpr64 = FMULDrr %50:fpr64, %49:fpr64, debug-location !212; is.c:301:14
Bottom Pressure:
GPR64temp=1
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %50
  UpdateRegP: SU(46) %51:fpr64 = FMULDrr %50:fpr64, %49:fpr64, debug-location !212; is.c:301:14
              to 
  LiveReg: %49
  UpdateRegP: SU(44) STRDui %49:fpr64, %stack.10.Z, 0, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
              to 
  UpdateRegP: SU(46) %51:fpr64 = FMULDrr %50:fpr64, %49:fpr64, debug-location !212; is.c:301:14
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @22c
  BotQ.A TopLatency SU(46) 38c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 17
  Executed: 23c
  Critical: 17c, 17 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 45 
Queue BotQ.A: 29 34 62 48 44 40 59 51 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(44) 38c
BotQ.A RemLatency SU(45) 1c
  BotQ.A RemainingLatency 38 + 23c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(34) BOT-PATH                  33 cycles 
  Cand SU(62) REG-MAX                            
  Cand SU(44) BOT-PATH                  38 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(44) STRDui %49:fpr64, %stack.10.Z, 0, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
Bottom Pressure:
GPR64temp=1
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @23c
  BotQ.A TopLatency SU(44) 38c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 18
  Executed: 24c
  Critical: 18c, 18 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 45 
Queue BotQ.A: 29 34 62 48 51 40 59 43 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 62 
BotQ.A RemLatency SU(43) 37c
BotQ.A RemLatency SU(45) 1c
  BotQ.A RemainingLatency 37 + 24c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(34) BOT-PATH                  33 cycles 
  Cand SU(62) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(62) %64:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
Bottom Pressure:
GPR64temp=1
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 19
  Executed: 25c
  Critical: 19c, 19 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 45 
Queue BotQ.A: 29 34 43 48 51 40 59 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 
BotQ.A RemLatency SU(43) 37c
BotQ.A RemLatency SU(45) 1c
  BotQ.A RemainingLatency 37 + 25c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(34) BOT-PATH                  33 cycles 
  Cand SU(43) BOT-PATH                  37 cycles 
  Cand SU(51) REG-MAX                            
  Cand SU(59) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(59) %61:fpr64 = LDRDui %60:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %60
  UpdateRegP: SU(59) %61:fpr64 = LDRDui %60:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 20
  Executed: 26c
  Critical: 20c, 20 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 34 43 48 51 40 58 45 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 
BotQ.A RemLatency SU(43) 37c
  BotQ.A RemainingLatency 37 + 26c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(34) BOT-PATH                  33 cycles 
  Cand SU(43) BOT-PATH                  37 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(43) %49:fpr64 = FSUBDrr %42:fpr64, %48:fpr64, debug-location !208; is.c:300:12
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %42
  UpdateRegP: SU(34) STRDui %42:fpr64, %stack.2.T1, 0, debug-location !197 :: (store 8 into %ir.T1); is.c:296:8
              to 
  UpdateRegP: SU(36) %44:fpr64 = FMULDrr %43:fpr64, %42:fpr64, debug-location !200; is.c:298:13
              to 
  UpdateRegP: SU(43) %49:fpr64 = FSUBDrr %42:fpr64, %48:fpr64, debug-location !208; is.c:300:12
              to 
  LiveReg: %48
  UpdateRegP: SU(43) %49:fpr64 = FSUBDrr %42:fpr64, %48:fpr64, debug-location !208; is.c:300:12
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @26c
  BotQ.A TopLatency SU(43) 37c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 21
  Executed: 27c
  Critical: 21c, 21 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 34 45 48 51 40 58 42 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 
BotQ.A RemLatency SU(40) 36c
  BotQ.A RemainingLatency 36 + 27c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(34) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(34) STRDui %42:fpr64, %stack.2.T1, 0, debug-location !197 :: (store 8 into %ir.T1); is.c:296:8
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 22
  Executed: 28c
  Critical: 22c, 22 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 42 45 48 51 40 58 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 58 
BotQ.A RemLatency SU(42) 36c
  BotQ.A RemainingLatency 36 + 28c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(42) BOT-PATH                  36 cycles 
  Cand SU(51) REG-MAX                            
  Cand SU(58) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(58) %60:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !225; is.c:304:15
Bottom Pressure:
GPR64temp=1
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @28c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 23
  Executed: 29c
  Critical: 23c, 23 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 42 45 48 51 40 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 
BotQ.A RemLatency SU(42) 36c
  BotQ.A RemainingLatency 36 + 29c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(42) BOT-PATH                  36 cycles 
  Cand SU(45) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(45) %50:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %25
  UpdateRegP: SU(12) %26:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(26) %36:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(41) %47:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(45) %50:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @29c
  BotQ.A BotLatency SU(45) 21c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 24
  Executed: 30c
  Critical: 24c, 24 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 42 40 48 51 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 
BotQ.A RemLatency SU(42) 36c
  BotQ.A RemainingLatency 36 + 30c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(42) BOT-PATH                  36 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(42) %48:fpr64 = FMULDrr %47:fpr64, %46:fpr64, debug-location !207; is.c:300:18
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %47
  UpdateRegP: SU(42) %48:fpr64 = FMULDrr %47:fpr64, %46:fpr64, debug-location !207; is.c:300:18
              to 
  LiveReg: %46
  UpdateRegP: SU(40) STRDui %46:fpr64, %stack.3.T2, 0, debug-location !203 :: (store 8 into %ir.T2); is.c:299:8
              to 
  UpdateRegP: SU(42) %48:fpr64 = FMULDrr %47:fpr64, %46:fpr64, debug-location !207; is.c:300:18
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @30c
  BotQ.A TopLatency SU(42) 36c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 25
  Executed: 31c
  Critical: 25c, 25 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 41 
Queue BotQ.A: 29 51 40 48 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 
BotQ.A RemLatency SU(40) 36c
BotQ.A RemLatency SU(41) 1c
  BotQ.A RemainingLatency 36 + 31c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(51) REG-MAX                            
  Cand SU(40) BOT-PATH                  36 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(40) STRDui %46:fpr64, %stack.3.T2, 0, debug-location !203 :: (store 8 into %ir.T2); is.c:299:8
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @31c
  BotQ.A TopLatency SU(40) 36c
  *** Max MOps 1 at cycle 31
Cycle: 32 BotQ.A
BotQ.A @32c
  Retired: 26
  Executed: 32c
  Critical: 26c, 26 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 41 
Queue BotQ.A: 29 51 48 39 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 
BotQ.A RemLatency SU(39) 35c
BotQ.A RemLatency SU(41) 1c
  BotQ.A RemainingLatency 35 + 32c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(51) REG-MAX                            
  Cand SU(39) BOT-PATH                  35 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(39) %46:fpr64 = SCVTFUWDri %45:gpr32, debug-location !202; is.c:299:10
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @32c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 27
  Executed: 33c
  Critical: 27c, 27 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 41 
Queue BotQ.A: 29 51 48 37 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 
BotQ.A RemLatency SU(37) 34c
BotQ.A RemLatency SU(41) 1c
  BotQ.A RemainingLatency 34 + 33c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(37) BOT-PATH                  34 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(37) %45:gpr32 = FCVTZSUWDr %44:fpr64, debug-location !198; is.c:298:9
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %44
  UpdateRegP: SU(37) %45:gpr32 = FCVTZSUWDr %44:fpr64, debug-location !198; is.c:298:9
              to GPR32 -1
  Ready @33c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 28
  Executed: 34c
  Critical: 28c, 28 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 51 48 36 41 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 
BotQ.A RemLatency SU(36) 33c
  BotQ.A RemainingLatency 33 + 34c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(51) REG-MAX                            
  Cand SU(36) BOT-PATH                  33 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(36) %44:fpr64 = FMULDrr %43:fpr64, %42:fpr64, debug-location !200; is.c:298:13
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %43
  UpdateRegP: SU(36) %44:fpr64 = FMULDrr %43:fpr64, %42:fpr64, debug-location !200; is.c:298:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @34c
  BotQ.A BotLatency SU(36) 22c
  *** Max MOps 1 at cycle 34
Cycle: 35 BotQ.A
BotQ.A @35c
  Retired: 29
  Executed: 35c
  Critical: 29c, 29 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 
Queue BotQ.A: 29 51 48 41 33 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 
BotQ.A RemLatency SU(33) 32c
BotQ.A RemLatency SU(35) 1c
  BotQ.A RemainingLatency 32 + 35c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(51) REG-MAX                            
  Cand SU(41) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(41) %47:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @35c
  BotQ.A BotLatency SU(41) 23c
  *** Max MOps 1 at cycle 35
Cycle: 36 BotQ.A
BotQ.A @36c
  Retired: 30
  Executed: 36c
  Critical: 30c, 30 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 
Queue BotQ.A: 29 51 48 33 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 
BotQ.A RemLatency SU(33) 32c
BotQ.A RemLatency SU(35) 1c
  BotQ.A RemainingLatency 32 + 36c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(33) BOT-PATH                  32 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(33) %42:fpr64 = FADDDrr %40:fpr64, %41:fpr64, debug-location !196; is.c:296:18
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %40
  UpdateRegP: SU(33) %42:fpr64 = FADDDrr %40:fpr64, %41:fpr64, debug-location !196; is.c:296:18
              to 
  LiveReg: %41
  UpdateRegP: SU(33) %42:fpr64 = FADDDrr %40:fpr64, %41:fpr64, debug-location !196; is.c:296:18
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @36c
  BotQ.A TopLatency SU(33) 32c
  *** Max MOps 1 at cycle 36
Cycle: 37 BotQ.A
BotQ.A @37c
  Retired: 31
  Executed: 37c
  Critical: 31c, 31 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 
Queue BotQ.A: 29 51 48 31 32 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 51 
BotQ.A RemLatency SU(29) 31c
BotQ.A RemLatency SU(35) 1c
  BotQ.A RemainingLatency 31 + 37c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(51) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(51) %55:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !218; is.c:302:9
Bottom Pressure:
GPR64temp=1
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 BotQ.A
BotQ.A @38c
  Retired: 32
  Executed: 38c
  Critical: 32c, 32 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 32 48 31 35 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
BotQ.A RemLatency SU(29) 31c
  BotQ.A RemainingLatency 31 + 38c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(35) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(35) %43:fpr64 = LDRDui %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %17
  UpdateRegP: SU(1) %18:fpr64 = LDRDui %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(35) %43:fpr64 = LDRDui %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @38c
  BotQ.A BotLatency SU(35) 26c
  *** Max MOps 1 at cycle 38
Cycle: 39 BotQ.A
BotQ.A @39c
  Retired: 33
  Executed: 39c
  Critical: 33c, 33 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 32 48 31 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
BotQ.A RemLatency SU(29) 31c
  BotQ.A RemainingLatency 31 + 39c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(48) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(48) %53:fpr64 = FMULDrr %52:fpr64, %38:fpr64, debug-location !215; is.c:301:23
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %52
  UpdateRegP: SU(48) %53:fpr64 = FMULDrr %52:fpr64, %38:fpr64, debug-location !215; is.c:301:23
              to 
  LiveReg: %38
  UpdateRegP: SU(29) STRDui %38:fpr64, %stack.9.X2, 0, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
              to 
  UpdateRegP: SU(31) %40:fpr64 = FMULDrr %39:fpr64, %38:fpr64, debug-location !192; is.c:296:13
              to 
  UpdateRegP: SU(48) %53:fpr64 = FMULDrr %52:fpr64, %38:fpr64, debug-location !215; is.c:301:23
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @39c
  BotQ.A TopLatency SU(48) 31c
  *** Max MOps 1 at cycle 39
Cycle: 40 BotQ.A
BotQ.A @40c
  Retired: 34
  Executed: 40c
  Critical: 34c, 34 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 47 
Queue BotQ.A: 29 32 31 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
BotQ.A RemLatency SU(29) 31c
BotQ.A RemLatency SU(47) 18c
  BotQ.A RemainingLatency 31 + 40c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(31) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(31) %40:fpr64 = FMULDrr %39:fpr64, %38:fpr64, debug-location !192; is.c:296:13
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %39
  UpdateRegP: SU(31) %40:fpr64 = FMULDrr %39:fpr64, %38:fpr64, debug-location !192; is.c:296:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @40c
  BotQ.A TopLatency SU(31) 31c
  *** Max MOps 1 at cycle 40
Cycle: 41 BotQ.A
BotQ.A @41c
  Retired: 35
  Executed: 41c
  Critical: 35c, 35 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 47 30 
Queue BotQ.A: 29 32 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
BotQ.A RemLatency SU(29) 31c
BotQ.A RemLatency SU(47) 18c
  BotQ.A RemainingLatency 31 + 41c > CritPath 55
Picking from Bot:
  Cand SU(29) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(29) STRDui %38:fpr64, %stack.9.X2, 0, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @41c
  BotQ.A TopLatency SU(29) 31c
  *** Max MOps 1 at cycle 41
Cycle: 42 BotQ.A
BotQ.A @42c
  Retired: 36
  Executed: 42c
  Critical: 36c, 36 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 47 30 
Queue BotQ.A: 32 28 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
BotQ.A RemLatency SU(28) 30c
BotQ.A RemLatency SU(47) 18c
  BotQ.A RemainingLatency 30 + 42c > CritPath 55
Picking from Bot:
  Cand SU(32) ORDER                              
  Cand SU(28) BOT-PATH                  30 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(28) %38:fpr64 = FSUBDrr %35:fpr64, %37:fpr64, debug-location !188; is.c:295:13
Bottom Pressure:
GPR64temp=2
FPR8=5
GPR32=2
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %35
  UpdateRegP: SU(28) %38:fpr64 = FSUBDrr %35:fpr64, %37:fpr64, debug-location !188; is.c:295:13
              to 
  LiveReg: %37
  UpdateRegP: SU(28) %38:fpr64 = FSUBDrr %35:fpr64, %37:fpr64, debug-location !188; is.c:295:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @42c
  *** Max MOps 1 at cycle 42
Cycle: 43 BotQ.A
BotQ.A @43c
  Retired: 37
  Executed: 43c
  Critical: 37c, 37 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 30 
Queue BotQ.A: 32 27 47 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
BotQ.A RemLatency SU(32) 25c
BotQ.A RemLatency SU(25) 26c
  BotQ.A RemainingLatency 29 + 43c > CritPath 55
Picking from Bot:
  Cand SU(32) ORDER                              
  Cand SU(47) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(47) %52:fpr64 = LDRDui %stack.7.A2, 0, debug-location !213 :: (dereferenceable load 8 from %ir.A2); is.c:301:20
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @43c
  *** Max MOps 1 at cycle 43
Cycle: 44 BotQ.A
BotQ.A @44c
  Retired: 38
  Executed: 44c
  Critical: 38c, 38 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 
Queue BotQ.A: 32 27 30 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
BotQ.A RemLatency SU(32) 25c
BotQ.A RemLatency SU(25) 26c
  BotQ.A RemainingLatency 28 + 44c > CritPath 55
Picking from Bot:
  Cand SU(32) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(32) %41:fpr64 = FMULDrr %28:fpr64, %33:fpr64, debug-location !195; is.c:296:23
Bottom Pressure:
GPR64temp=2
FPR8=5
GPR32=2
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %28
  UpdateRegP: SU(15) STRDui %28:fpr64, %stack.7.A2, 0, debug-location !173 :: (store 8 into %ir.A2); is.c:286:8
              to 
  UpdateRegP: SU(32) %41:fpr64 = FMULDrr %28:fpr64, %33:fpr64, debug-location !195; is.c:296:23
              to 
  LiveReg: %33
  UpdateRegP: SU(23) STRDui %33:fpr64, %stack.8.X1, 0, debug-location !182 :: (store 8 into %ir.X1); is.c:294:8
              to 
  UpdateRegP: SU(27) %37:fpr64 = FMULDrr %36:fpr64, %33:fpr64, debug-location !187; is.c:295:19
              to 
  UpdateRegP: SU(32) %41:fpr64 = FMULDrr %28:fpr64, %33:fpr64, debug-location !195; is.c:296:23
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @44c
  *** Max MOps 1 at cycle 44
Cycle: 45 BotQ.A
BotQ.A @45c
  Retired: 39
  Executed: 45c
  Critical: 39c, 39 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 
Queue BotQ.A: 30 27 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
BotQ.A RemLatency SU(27) 25c
BotQ.A RemLatency SU(25) 26c
  BotQ.A RemainingLatency 27 + 45c > CritPath 55
Picking from Bot:
  Cand SU(30) ORDER                              
  Cand SU(27) BOT-PATH                  25 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(27) %37:fpr64 = FMULDrr %36:fpr64, %33:fpr64, debug-location !187; is.c:295:19
Bottom Pressure:
GPR64temp=2
FPR8=5
GPR32=2
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %36
  UpdateRegP: SU(27) %37:fpr64 = FMULDrr %36:fpr64, %33:fpr64, debug-location !187; is.c:295:19
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @45c
  *** Max MOps 1 at cycle 45
Cycle: 46 BotQ.A
BotQ.A @46c
  Retired: 40
  Executed: 46c
  Critical: 40c, 40 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 
Queue BotQ.A: 30 25 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
BotQ.A RemLatency SU(25) 26c
BotQ.A RemLatency SU(26) 1c
  BotQ.A RemainingLatency 26 + 46c > CritPath 55
Picking from Bot:
  Cand SU(30) ORDER                              
  Cand SU(25) BOT-PATH                  26 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(25) %35:fpr64 = LDRDui %34:gpr64common, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %34
  UpdateRegP: SU(25) %35:fpr64 = LDRDui %34:gpr64common, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @46c
  BotQ.A BotLatency SU(25) 29c
  *** Max MOps 1 at cycle 46
Cycle: 47 BotQ.A
BotQ.A @47c
  Retired: 41
  Executed: 47c
  Critical: 41c, 41 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 
Queue BotQ.A: 30 23 21 19 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
BotQ.A RemLatency SU(23) 25c
BotQ.A RemLatency SU(26) 1c
  BotQ.A RemainingLatency 25 + 47c > CritPath 55
Picking from Bot:
  Cand SU(30) ORDER                              
  Cand SU(23) BOT-PATH                  25 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(23) STRDui %33:fpr64, %stack.8.X1, 0, debug-location !182 :: (store 8 into %ir.X1); is.c:294:8
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @47c
  BotQ.A BotLatency SU(23) 30c
  *** Max MOps 1 at cycle 47
Cycle: 48 BotQ.A
BotQ.A @48c
  Retired: 42
  Executed: 48c
  Critical: 42c, 42 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 
Queue BotQ.A: 30 19 21 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
BotQ.A RemLatency SU(21) 24c
BotQ.A RemLatency SU(26) 1c
  BotQ.A RemainingLatency 24 + 48c > CritPath 55
Picking from Bot:
  Cand SU(30) ORDER                              
  Cand SU(19) BOT-PATH                  23 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(19) STRDui %31:fpr64, %stack.2.T1, 0, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
Bottom Pressure:
GPR64temp=2
FPR8=5
GPR32=3
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %31
  UpdateRegP: SU(19) STRDui %31:fpr64, %stack.2.T1, 0, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
              to 
  UpdateRegP: SU(20) %32:gpr32 = FCVTZSUWDr %31:fpr64, debug-location !179; is.c:293:9
              to GPR32 -1
  Ready @48c
  *** Max MOps 1 at cycle 48
Cycle: 49 BotQ.A
BotQ.A @49c
  Retired: 43
  Executed: 49c
  Critical: 43c, 43 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 22 21 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
BotQ.A RemLatency SU(22) 24c
  BotQ.A RemainingLatency 24 + 49c > CritPath 55
Picking from Bot:
  Cand SU(30) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(30) %39:fpr64 = LDRDui %stack.6.A1, 0, debug-location !190 :: (dereferenceable load 8 from %ir.A1); is.c:296:10
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @49c
  *** Max MOps 1 at cycle 49
Cycle: 50 BotQ.A
BotQ.A @50c
  Retired: 44
  Executed: 50c
  Critical: 44c, 44 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 22 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
BotQ.A RemLatency SU(22) 24c
  BotQ.A RemainingLatency 24 + 50c > CritPath 55
Picking from Bot:
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(26) %36:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @50c
  *** Max MOps 1 at cycle 50
Cycle: 51 BotQ.A
BotQ.A @51c
  Retired: 45
  Executed: 51c
  Critical: 45c, 45 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
BotQ.A RemLatency SU(21) 24c
  BotQ.A RemainingLatency 24 + 51c > CritPath 55
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(22) %33:fpr64 = SCVTFUWDri %32:gpr32, debug-location !181; is.c:294:10
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %32
  UpdateRegP: SU(21) STRWui %32:gpr32, %stack.12.j, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
              to 
  UpdateRegP: SU(22) %33:fpr64 = SCVTFUWDri %32:gpr32, debug-location !181; is.c:294:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @51c
  BotQ.A TopLatency SU(22) 24c
  BotQ.A BotLatency SU(22) 31c
  *** Max MOps 1 at cycle 51
Cycle: 52 BotQ.A
BotQ.A @52c
  Retired: 46
  Executed: 52c
  Critical: 46c, 46 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 
Pick Bot ONLY1     
Scheduling SU(21) STRWui %32:gpr32, %stack.12.j, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @52c
  BotQ.A TopLatency SU(21) 24c
  *** Max MOps 1 at cycle 52
Cycle: 53 BotQ.A
BotQ.A @53c
  Retired: 47
  Executed: 53c
  Critical: 47c, 47 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 
Pick Bot ONLY1     
Scheduling SU(20) %32:gpr32 = FCVTZSUWDr %31:fpr64, debug-location !179; is.c:293:9
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @53c
  BotQ.A BotLatency SU(20) 32c
  *** Max MOps 1 at cycle 53
Cycle: 54 BotQ.A
BotQ.A @54c
  Retired: 48
  Executed: 54c
  Critical: 48c, 48 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 
Pick Bot ONLY1     
Scheduling SU(18) %31:fpr64 = FMULDrr %18:fpr64, %30:fpr64, debug-location !177; is.c:292:14
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %18
  UpdateRegP: SU(4) %21:fpr64 = FMULDrr %18:fpr64, %20:fpr64, debug-location !161; is.c:283:14
              to 
  UpdateRegP: SU(18) %31:fpr64 = FMULDrr %18:fpr64, %30:fpr64, debug-location !177; is.c:292:14
              to 
  LiveReg: %30
  UpdateRegP: SU(18) %31:fpr64 = FMULDrr %18:fpr64, %30:fpr64, debug-location !177; is.c:292:14
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @54c
  BotQ.A BotLatency SU(18) 33c
  *** Max MOps 1 at cycle 54
Cycle: 55 BotQ.A
BotQ.A @55c
  Retired: 49
  Executed: 55c
  Critical: 49c, 49 MOps
  ExpectedLatency: 33c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 58 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 17 
Pick Bot ONLY1     
Scheduling SU(17) %30:fpr64 = LDRDui %29:gpr64common, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %29
  UpdateRegP: SU(17) %30:fpr64 = LDRDui %29:gpr64common, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @58c
  BotQ.A BotLatency SU(17) 37c
  *** Max MOps 1 at cycle 58
Cycle: 59 BotQ.A
BotQ.A @59c
  Retired: 50
  Executed: 59c
  Critical: 50c, 50 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 
Queue BotQ.A: 15 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
  BotQ.A RemainingLatency 0 + 59c > CritPath 55
Picking from Bot:
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(15) STRDui %28:fpr64, %stack.7.A2, 0, debug-location !173 :: (store 8 into %ir.A2); is.c:286:8
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @59c
  BotQ.A BotLatency SU(15) 38c
  *** Max MOps 1 at cycle 59
Cycle: 60 BotQ.A
BotQ.A @60c
  Retired: 51
  Executed: 60c
  Critical: 51c, 51 MOps
  ExpectedLatency: 38c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 
Queue BotQ.A: 24 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
  BotQ.A RemainingLatency 0 + 60c > CritPath 55
Picking from Bot:
  Cand SU(24) ORDER                              
  Cand SU(14) BOT-PATH                  16 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %28:fpr64 = FSUBDrr %24:fpr64, %27:fpr64, debug-location !172; is.c:286:13
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %24
  UpdateRegP: SU(14) %28:fpr64 = FSUBDrr %24:fpr64, %27:fpr64, debug-location !172; is.c:286:13
              to 
  LiveReg: %27
  UpdateRegP: SU(14) %28:fpr64 = FSUBDrr %24:fpr64, %27:fpr64, debug-location !172; is.c:286:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @60c
  BotQ.A BotLatency SU(14) 39c
  *** Max MOps 1 at cycle 60
Cycle: 61 BotQ.A
BotQ.A @61c
  Retired: 52
  Executed: 61c
  Critical: 52c, 52 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 10 
Queue BotQ.A: 24 13 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
  BotQ.A RemainingLatency 0 + 61c > CritPath 55
Picking from Bot:
  Cand SU(24) ORDER                              
  Cand SU(13) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) %27:fpr64 = FMULDrr %26:fpr64, %23:fpr64, debug-location !171; is.c:286:19
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %26
  UpdateRegP: SU(13) %27:fpr64 = FMULDrr %26:fpr64, %23:fpr64, debug-location !171; is.c:286:19
              to 
  LiveReg: %23
  UpdateRegP: SU(9) STRDui %23:fpr64, %stack.6.A1, 0, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
              to 
  UpdateRegP: SU(13) %27:fpr64 = FMULDrr %26:fpr64, %23:fpr64, debug-location !171; is.c:286:19
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @61c
  BotQ.A BotLatency SU(13) 40c
  *** Max MOps 1 at cycle 61
Cycle: 62 BotQ.A
BotQ.A @62c
  Retired: 53
  Executed: 62c
  Critical: 53c, 53 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 10 
Queue BotQ.A: 24 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 16 24 
  BotQ.A RemainingLatency 0 + 62c > CritPath 55
Picking from Bot:
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(24) %34:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @62c
  *** Max MOps 1 at cycle 62
Cycle: 63 BotQ.A
BotQ.A @63c
  Retired: 54
  Executed: 63c
  Critical: 54c, 54 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 10 
Queue BotQ.A: 16 
Pick Bot ONLY1     
Scheduling SU(16) %29:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @63c
  BotQ.A BotLatency SU(16) 41c
  *** Max MOps 1 at cycle 63
Cycle: 64 BotQ.A
BotQ.A @64c
  Retired: 55
  Executed: 64c
  Critical: 55c, 55 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %24:fpr64 = LDRDui %19:gpr64common, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %19
  UpdateRegP: SU(3) %20:fpr64 = LDRDui %19:gpr64common, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(10) %24:fpr64 = LDRDui %19:gpr64common, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @64c
  BotQ.A BotLatency SU(10) 43c
  *** Max MOps 1 at cycle 64
Cycle: 65 BotQ.A
BotQ.A @65c
  Retired: 56
  Executed: 65c
  Critical: 56c, 56 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 5 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 
  BotQ.A RemainingLatency 0 + 65c > CritPath 55
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) STRDui %23:fpr64, %stack.6.A1, 0, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @65c
  BotQ.A BotLatency SU(9) 44c
  *** Max MOps 1 at cycle 65
Cycle: 66 BotQ.A
BotQ.A @66c
  Retired: 57
  Executed: 66c
  Critical: 57c, 57 MOps
  ExpectedLatency: 44c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 7 5 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 
  BotQ.A RemainingLatency 0 + 66c > CritPath 55
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(7) BOT-PATH                  10 cycles 
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %23:fpr64 = SCVTFUWDri %22:gpr32, debug-location !165; is.c:285:10
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %22
  UpdateRegP: SU(7) STRWui %22:gpr32, %stack.12.j, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
              to 
  UpdateRegP: SU(8) %23:fpr64 = SCVTFUWDri %22:gpr32, debug-location !165; is.c:285:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @66c
  BotQ.A BotLatency SU(8) 45c
  *** Max MOps 1 at cycle 66
Cycle: 67 BotQ.A
BotQ.A @67c
  Retired: 58
  Executed: 67c
  Critical: 58c, 58 MOps
  ExpectedLatency: 45c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 
  BotQ.A RemainingLatency 0 + 67c > CritPath 55
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(7) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRWui %22:gpr32, %stack.12.j, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @67c
  BotQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 67
Cycle: 68 BotQ.A
BotQ.A @68c
  Retired: 59
  Executed: 68c
  Critical: 59c, 59 MOps
  ExpectedLatency: 45c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 
  BotQ.A RemainingLatency 0 + 68c > CritPath 55
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(5) BOT-PATH                  9 cycles 
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %22:gpr32 = FCVTZSUWDr %21:fpr64, debug-location !163; is.c:284:9
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %21
  UpdateRegP: SU(5) STRDui %21:fpr64, %stack.2.T1, 0, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
              to 
  UpdateRegP: SU(6) %22:gpr32 = FCVTZSUWDr %21:fpr64, debug-location !163; is.c:284:9
              to GPR32 -1
  Ready @68c
  BotQ.A BotLatency SU(6) 46c
  *** Max MOps 1 at cycle 68
Cycle: 69 BotQ.A
BotQ.A @69c
  Retired: 60
  Executed: 69c
  Critical: 60c, 60 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 
  BotQ.A RemainingLatency 0 + 69c > CritPath 55
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(5) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %21:fpr64, %stack.2.T1, 0, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @69c
  BotQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 69
Cycle: 70 BotQ.A
BotQ.A @70c
  Retired: 61
  Executed: 70c
  Critical: 61c, 61 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 11 
  BotQ.A RemainingLatency 0 + 70c > CritPath 55
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(4) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %21:fpr64 = FMULDrr %18:fpr64, %20:fpr64, debug-location !161; is.c:283:14
Bottom Pressure:
GPR64temp=2
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %20
  UpdateRegP: SU(4) %21:fpr64 = FMULDrr %18:fpr64, %20:fpr64, debug-location !161; is.c:283:14
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @70c
  BotQ.A BotLatency SU(4) 47c
  *** Max MOps 1 at cycle 70
Cycle: 71 BotQ.A
BotQ.A @71c
  Retired: 62
  Executed: 71c
  Critical: 62c, 62 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) %26:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @71c
  *** Max MOps 1 at cycle 71
Cycle: 72 BotQ.A
BotQ.A @72c
  Retired: 63
  Executed: 72c
  Critical: 63c, 63 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %25:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !169; is.c:286:15
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @72c
  *** Max MOps 1 at cycle 72
Cycle: 73 BotQ.A
BotQ.A @73c
  Retired: 64
  Executed: 73c
  Critical: 64c, 64 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 74 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 74c > CritPath 55
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %20:fpr64 = LDRDui %19:gpr64common, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @74c
  BotQ.A BotLatency SU(3) 51c
  *** Max MOps 1 at cycle 74
Cycle: 75 BotQ.A
BotQ.A @75c
  Retired: 65
  Executed: 75c
  Critical: 65c, 65 MOps
  ExpectedLatency: 51c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %18:fpr64 = LDRDui %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
Bottom Pressure:
GPR64temp=1
GPR32=2
  Ready @75c
  *** Max MOps 1 at cycle 75
Cycle: 76 BotQ.A
BotQ.A @76c
  Retired: 66
  Executed: 76c
  Critical: 66c, 66 MOps
  ExpectedLatency: 51c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %17:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !158; is.c:283:10
Bottom Pressure:
GPR32=1
  Ready @76c
  BotQ.A BotLatency SU(0) 52c
  *** Max MOps 1 at cycle 76
Cycle: 77 BotQ.A
BotQ.A @77c
  Retired: 67
  Executed: 77c
  Critical: 67c, 67 MOps
  ExpectedLatency: 52c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 78 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %19:gpr64common = LDRXui %stack.1.A.addr, 0, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
Bottom Pressure:

  Ready @78c
  BotQ.A BotLatency SU(2) 55c
  *** Max MOps 1 at cycle 78
Cycle: 79 BotQ.A
BotQ.A @79c
  Retired: 68
  Executed: 79c
  Critical: 68c, 68 MOps
  ExpectedLatency: 55c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(2):   %19:gpr64common = LDRXui %stack.1.A.addr, 0, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
SU(0):   %17:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !158; is.c:283:10
SU(1):   %18:fpr64 = LDRDui %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
SU(3):   %20:fpr64 = LDRDui %19:gpr64common, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
SU(11):   %25:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !169; is.c:286:15
SU(12):   %26:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
SU(4):   %21:fpr64 = FMULDrr %18:fpr64, %20:fpr64, debug-location !161; is.c:283:14
SU(5):   STRDui %21:fpr64, %stack.2.T1, 0, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
SU(6):   %22:gpr32 = FCVTZSUWDr %21:fpr64, debug-location !163; is.c:284:9
SU(7):   STRWui %22:gpr32, %stack.12.j, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
SU(8):   %23:fpr64 = SCVTFUWDri %22:gpr32, debug-location !165; is.c:285:10
SU(9):   STRDui %23:fpr64, %stack.6.A1, 0, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
SU(10):   %24:fpr64 = LDRDui %19:gpr64common, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
SU(16):   %29:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
SU(24):   %34:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
SU(13):   %27:fpr64 = FMULDrr %26:fpr64, %23:fpr64, debug-location !171; is.c:286:19
SU(14):   %28:fpr64 = FSUBDrr %24:fpr64, %27:fpr64, debug-location !172; is.c:286:13
SU(15):   STRDui %28:fpr64, %stack.7.A2, 0, debug-location !173 :: (store 8 into %ir.A2); is.c:286:8
SU(17):   %30:fpr64 = LDRDui %29:gpr64common, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
SU(18):   %31:fpr64 = FMULDrr %18:fpr64, %30:fpr64, debug-location !177; is.c:292:14
SU(20):   %32:gpr32 = FCVTZSUWDr %31:fpr64, debug-location !179; is.c:293:9
SU(21):   STRWui %32:gpr32, %stack.12.j, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
SU(22):   %33:fpr64 = SCVTFUWDri %32:gpr32, debug-location !181; is.c:294:10
SU(26):   %36:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
SU(30):   %39:fpr64 = LDRDui %stack.6.A1, 0, debug-location !190 :: (dereferenceable load 8 from %ir.A1); is.c:296:10
SU(19):   STRDui %31:fpr64, %stack.2.T1, 0, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
SU(23):   STRDui %33:fpr64, %stack.8.X1, 0, debug-location !182 :: (store 8 into %ir.X1); is.c:294:8
SU(25):   %35:fpr64 = LDRDui %34:gpr64common, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
SU(27):   %37:fpr64 = FMULDrr %36:fpr64, %33:fpr64, debug-location !187; is.c:295:19
SU(32):   %41:fpr64 = FMULDrr %28:fpr64, %33:fpr64, debug-location !195; is.c:296:23
SU(47):   %52:fpr64 = LDRDui %stack.7.A2, 0, debug-location !213 :: (dereferenceable load 8 from %ir.A2); is.c:301:20
SU(28):   %38:fpr64 = FSUBDrr %35:fpr64, %37:fpr64, debug-location !188; is.c:295:13
SU(29):   STRDui %38:fpr64, %stack.9.X2, 0, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
SU(31):   %40:fpr64 = FMULDrr %39:fpr64, %38:fpr64, debug-location !192; is.c:296:13
SU(48):   %53:fpr64 = FMULDrr %52:fpr64, %38:fpr64, debug-location !215; is.c:301:23
SU(35):   %43:fpr64 = LDRDui %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
SU(51):   %55:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !218; is.c:302:9
SU(33):   %42:fpr64 = FADDDrr %40:fpr64, %41:fpr64, debug-location !196; is.c:296:18
SU(41):   %47:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
SU(36):   %44:fpr64 = FMULDrr %43:fpr64, %42:fpr64, debug-location !200; is.c:298:13
SU(37):   %45:gpr32 = FCVTZSUWDr %44:fpr64, debug-location !198; is.c:298:9
SU(39):   %46:fpr64 = SCVTFUWDri %45:gpr32, debug-location !202; is.c:299:10
SU(40):   STRDui %46:fpr64, %stack.3.T2, 0, debug-location !203 :: (store 8 into %ir.T2); is.c:299:8
SU(42):   %48:fpr64 = FMULDrr %47:fpr64, %46:fpr64, debug-location !207; is.c:300:18
SU(45):   %50:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
SU(58):   %60:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !225; is.c:304:15
SU(34):   STRDui %42:fpr64, %stack.2.T1, 0, debug-location !197 :: (store 8 into %ir.T1); is.c:296:8
SU(43):   %49:fpr64 = FSUBDrr %42:fpr64, %48:fpr64, debug-location !208; is.c:300:12
SU(59):   %61:fpr64 = LDRDui %60:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
SU(62):   %64:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
SU(44):   STRDui %49:fpr64, %stack.10.Z, 0, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
SU(46):   %51:fpr64 = FMULDrr %50:fpr64, %49:fpr64, debug-location !212; is.c:301:14
SU(52):   %56:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
SU(38):   STRWui %45:gpr32, %stack.12.j, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
SU(49):   %54:fpr64 = FADDDrr %51:fpr64, %53:fpr64, debug-location !216; is.c:301:18
SU(50):   STRDui %54:fpr64, %stack.4.T3, 0, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
SU(53):   %57:fpr64 = FMULDrr %56:fpr64, %54:fpr64, debug-location !220; is.c:302:13
SU(54):   %58:gpr32 = FCVTZSUWDr %57:fpr64, debug-location !218; is.c:302:9
SU(55):   STRWui %58:gpr32, %stack.12.j, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
SU(56):   %59:fpr64 = SCVTFUWDri %58:gpr32, debug-location !222; is.c:303:10
SU(57):   STRDui %59:fpr64, %stack.5.T4, 0, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
SU(60):   %62:fpr64 = FMULDrr %61:fpr64, %59:fpr64, debug-location !227; is.c:304:19
SU(61):   %63:fpr64 = FSUBDrr %54:fpr64, %62:fpr64, debug-location !228; is.c:304:13
SU(63):   STRDui %63:fpr64, %64:gpr64common, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
SU(65):   %66:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
SU(64):   %65:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
SU(66):   %67:fpr64 = LDRDui %66:gpr64common, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
SU(67):   %68:fpr64 = FMULDrr %65:fpr64, %67:fpr64, debug-location !234; is.c:305:17
SU(68):   $d0 = COPY %68:fpr64, debug-location !235; is.c:305:5

********** INTERVALS **********
W0 [0B,32r:0)  0@0B-phi
W1 [0B,16r:0)  0@0B-phi
%0 [32r,100r:0)  0@32r weight:0.000000e+00
%1 [16r,104r:0)  0@16r weight:0.000000e+00
%2 [80r,96r:0)  0@80r weight:0.000000e+00
%3 [96r,112r:0)  0@96r weight:0.000000e+00
%4 [160r,624B:0)  0@160r weight:0.000000e+00
%5 [176r,360r:0)  0@176r weight:0.000000e+00
%6 [208r,248r:0)  0@208r weight:0.000000e+00
%7 [240r,624B:0)  0@240r weight:0.000000e+00
%8 [356r,360r:0)  0@356r weight:0.000000e+00
%9 [368r,376r:0)  0@368r weight:0.000000e+00
%10 [392r,400r:0)  0@392r weight:0.000000e+00
%12 [640r,708r:0)  0@640r weight:0.000000e+00
%13 [752r,768r:0)  0@752r weight:0.000000e+00
%15 [1008r,1040r:0)  0@1008r weight:0.000000e+00
%16 [1024r,1040r:0)  0@1024r weight:0.000000e+00
%17 [1108r,1864r:0)  0@1108r weight:0.000000e+00
%18 [1112r,1488r:0)  0@1112r weight:0.000000e+00
%19 [1104r,1320r:0)  0@1104r weight:0.000000e+00
%20 [1120r,1272r:0)  0@1120r weight:0.000000e+00
%21 [1272r,1288r:0)  0@1272r weight:0.000000e+00
%22 [1288r,1304r:0)  0@1288r weight:0.000000e+00
%23 [1304r,1460r:0)  0@1304r weight:0.000000e+00
%24 [1320r,1464r:0)  0@1320r weight:0.000000e+00
%25 [1248r,1944r:0)  0@1248r weight:0.000000e+00
%26 [1264r,1460r:0)  0@1264r weight:0.000000e+00
%27 [1460r,1464r:0)  0@1460r weight:0.000000e+00
%28 [1464r,1608r:0)  0@1464r weight:0.000000e+00
%29 [1352r,1480r:0)  0@1352r weight:0.000000e+00
%30 [1480r,1488r:0)  0@1480r weight:0.000000e+00
%31 [1488r,1568r:0)  0@1488r weight:0.000000e+00
%32 [1496r,1512r:0)  0@1496r weight:0.000000e+00
%33 [1512r,1608r:0)  0@1512r weight:0.000000e+00
%34 [1456r,1584r:0)  0@1456r weight:0.000000e+00
%35 [1584r,1832r:0)  0@1584r weight:0.000000e+00
%36 [1528r,1592r:0)  0@1528r weight:0.000000e+00
%37 [1592r,1832r:0)  0@1592r weight:0.000000e+00
%38 [1832r,1856r:0)  0@1832r weight:0.000000e+00
%39 [1560r,1848r:0)  0@1560r weight:0.000000e+00
%40 [1848r,1892r:0)  0@1848r weight:0.000000e+00
%41 [1608r,1892r:0)  0@1608r weight:0.000000e+00
%42 [1892r,2008r:0)  0@1892r weight:0.000000e+00
%43 [1864r,1904r:0)  0@1864r weight:0.000000e+00
%44 [1904r,1912r:0)  0@1904r weight:0.000000e+00
%45 [1912r,2096r:0)  0@1912r weight:0.000000e+00
%46 [1920r,1936r:0)  0@1920r weight:0.000000e+00
%47 [1896r,1936r:0)  0@1896r weight:0.000000e+00
%48 [1936r,2008r:0)  0@1936r weight:0.000000e+00
%49 [2008r,2080r:0)  0@2008r weight:0.000000e+00
%50 [1944r,2080r:0)  0@1944r weight:0.000000e+00
%51 [2080r,2104r:0)  0@2080r weight:0.000000e+00
%52 [1824r,1856r:0)  0@1824r weight:0.000000e+00
%53 [1856r,2104r:0)  0@1856r weight:0.000000e+00
%54 [2104r,2168r:0)  0@2104r weight:0.000000e+00
%55 [1888r,2200r:0)  0@1888r weight:0.000000e+00
%56 [2088r,2120r:0)  0@2088r weight:0.000000e+00
%57 [2120r,2128r:0)  0@2120r weight:0.000000e+00
%58 [2128r,2144r:0)  0@2128r weight:0.000000e+00
%59 [2144r,2160r:0)  0@2144r weight:0.000000e+00
%60 [2000r,2016r:0)  0@2000r weight:0.000000e+00
%61 [2016r,2160r:0)  0@2016r weight:0.000000e+00
%62 [2160r,2168r:0)  0@2160r weight:0.000000e+00
%63 [2168r,2176r:0)  0@2168r weight:0.000000e+00
%64 [2064r,2176r:0)  0@2064r weight:0.000000e+00
%65 [2200r,2216r:0)  0@2200r weight:0.000000e+00
%66 [2192r,2208r:0)  0@2192r weight:0.000000e+00
%67 [2208r,2216r:0)  0@2208r weight:0.000000e+00
%68 [2216r,2224r:0)  0@2216r weight:0.000000e+00
%69 [712r,992B:0)  0@712r weight:0.000000e+00
%70 [832r,936r:0)  0@832r weight:0.000000e+00
%71 [688r,704r:0)  0@688r weight:0.000000e+00
%72 [704r,992B:0)  0@704r weight:0.000000e+00
%73 [936r,944r:0)  0@936r weight:0.000000e+00
%74 [720r,992B:0)  0@720r weight:0.000000e+00
%75 [880r,952r:0)  0@880r weight:0.000000e+00
%76 [952r,968r:0)  0@952r weight:0.000000e+00
%77 [928r,960r:0)  0@928r weight:0.000000e+00
%78 [960r,976r:0)  0@960r weight:0.000000e+00
%80 [464r,568r:0)  0@464r weight:0.000000e+00
%81 [336r,352r:0)  0@336r weight:0.000000e+00
%82 [352r,624B:0)  0@352r weight:0.000000e+00
%83 [568r,576r:0)  0@568r weight:0.000000e+00
%85 [512r,584r:0)  0@512r weight:0.000000e+00
%86 [584r,600r:0)  0@584r weight:0.000000e+00
%87 [560r,592r:0)  0@560r weight:0.000000e+00
%88 [592r,608r:0)  0@592r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function randlc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: 5.000000e-01, align=8
Function Live Ins: $x0 in %0, $x1 in %1

0B	bb.0.entry:
	  successors: %bb.1(0x30000000), %bb.8(0x50000000); %bb.1(37.50%), %bb.8(62.50%)
	  liveins: $x0, $x1
16B	  %1:gpr64 = COPY $x1
32B	  %0:gpr64 = COPY $x0
80B	  %2:gpr64temp = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
96B	  %3:gpr32 = LDRWui %2:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
100B	  STRXui %0:gpr64, %stack.0.X.addr, 0 :: (store 8 into %ir.X.addr)
104B	  STRXui %1:gpr64, %stack.1.A.addr, 0 :: (store 8 into %ir.A.addr)
112B	  CBNZW %3:gpr32, %bb.8, debug-location !114; is.c:264:9
128B	  B %bb.1, debug-location !114; is.c:264:9

144B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  %4:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
176B	  %5:gpr64 = MOVi64imm 4607182418800017408
208B	  %6:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
240B	  %7:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
248B	  STRXui %5:gpr64, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
336B	  %81:gpr64temp = ADRP target-flags(aarch64-page) %const.0
340B	  STRXui %5:gpr64, %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
344B	  STRXui %5:gpr64, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
352B	  %82:fpr64 = LDRDui %81:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
356B	  %8:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
360B	  STRXui %5:gpr64, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
368B	  %9:gpr32 = MOVi32imm 1
376B	  STRWui %9:gpr32, %stack.11.i, 0, debug-location !120 :: (store 4 into %ir.i); is.c:270:16

384B	bb.2.for.cond:
	; predecessors: %bb.1, %bb.3
	  successors: %bb.3(0x7c000000), %bb.4(0x04000000); %bb.3(96.88%), %bb.4(3.12%)

392B	  %10:gpr32common = LDRWui %stack.11.i, 0, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
400B	  dead $wzr = SUBSWri %10:gpr32common, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9
416B	  Bcc 12, %bb.4, implicit killed $nzcv, debug-location !126; is.c:270:9
432B	  B %bb.3, debug-location !126; is.c:270:9

448B	bb.3.for.body:
	; predecessors: %bb.2
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

464B	  %80:fpr64 = LDRDui %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
512B	  %85:fpr64 = LDRDui %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
560B	  %87:gpr32common = LDRWui %stack.11.i, 0, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
568B	  %83:fpr64 = FMULDrr %80:fpr64, %82:fpr64, debug-location !129; is.c:271:24
576B	  STRDui %83:fpr64, %4:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
584B	  %86:fpr64 = FADDDrr %85:fpr64, %85:fpr64, debug-location !132; is.c:272:23
592B	  %88:gpr32common = nsw ADDWri %87:gpr32common, 1, 0, debug-location !134; is.c:270:31
600B	  STRDui %86:fpr64, %7:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
608B	  STRWui %88:gpr32common, %stack.11.i, 0, debug-location !134 :: (store 4 into %ir.i); is.c:270:31
616B	  B %bb.2, debug-location !135; is.c:270:9

624B	bb.4.for.end:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

640B	  %12:gpr32 = MOVi32imm 1
688B	  %71:gpr64temp = ADRP target-flags(aarch64-page) %const.0
704B	  %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
708B	  STRWui %12:gpr32, %stack.11.i, 0, debug-location !138 :: (store 4 into %ir.i); is.c:274:16
712B	  %69:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46
720B	  %74:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46

736B	bb.5.for.cond3:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

752B	  %13:gpr32common = LDRWui %stack.11.i, 0, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
768B	  dead $wzr = SUBSWri %13:gpr32common, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9
784B	  Bcc 12, %bb.7, implicit killed $nzcv, debug-location !144; is.c:274:9
800B	  B %bb.6, debug-location !144; is.c:274:9

816B	bb.6.for.body5:
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

832B	  %70:fpr64 = LDRDui %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
880B	  %75:fpr64 = LDRDui %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
928B	  %77:gpr32common = LDRWui %stack.11.i, 0, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
936B	  %73:fpr64 = FMULDrr %70:fpr64, %72:fpr64, debug-location !147; is.c:275:24
944B	  STRDui %73:fpr64, %69:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
952B	  %76:fpr64 = FADDDrr %75:fpr64, %75:fpr64, debug-location !150; is.c:276:23
960B	  %78:gpr32common = nsw ADDWri %77:gpr32common, 1, 0, debug-location !152; is.c:274:31
968B	  STRDui %76:fpr64, %74:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
976B	  STRWui %78:gpr32common, %stack.11.i, 0, debug-location !152 :: (store 4 into %ir.i); is.c:274:31
984B	  B %bb.5, debug-location !153; is.c:274:9

992B	bb.7.for.end10:
	; predecessors: %bb.5
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

1008B	  %15:gpr64temp = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !156; is.c:278:12
1024B	  %16:gpr32 = MOVi32imm 1
1040B	  STRWui %16:gpr32, %15:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12

1056B	bb.8.if.end:
	; predecessors: %bb.0, %bb.7

1104B	  %19:gpr64common = LDRXui %stack.1.A.addr, 0, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
1108B	  %17:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !158; is.c:283:10
1112B	  %18:fpr64 = LDRDui %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
1120B	  %20:fpr64 = LDRDui %19:gpr64common, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
1248B	  %25:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !169; is.c:286:15
1264B	  %26:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
1272B	  %21:fpr64 = FMULDrr %18:fpr64, %20:fpr64, debug-location !161; is.c:283:14
1280B	  STRDui %21:fpr64, %stack.2.T1, 0, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
1288B	  %22:gpr32 = FCVTZSUWDr %21:fpr64, debug-location !163; is.c:284:9
1296B	  STRWui %22:gpr32, %stack.12.j, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
1304B	  %23:fpr64 = SCVTFUWDri %22:gpr32, debug-location !165; is.c:285:10
1312B	  STRDui %23:fpr64, %stack.6.A1, 0, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
1320B	  %24:fpr64 = LDRDui %19:gpr64common, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
1352B	  %29:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
1456B	  %34:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
1460B	  %27:fpr64 = FMULDrr %26:fpr64, %23:fpr64, debug-location !171; is.c:286:19
1464B	  %28:fpr64 = FSUBDrr %24:fpr64, %27:fpr64, debug-location !172; is.c:286:13
1472B	  STRDui %28:fpr64, %stack.7.A2, 0, debug-location !173 :: (store 8 into %ir.A2); is.c:286:8
1480B	  %30:fpr64 = LDRDui %29:gpr64common, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
1488B	  %31:fpr64 = FMULDrr %18:fpr64, %30:fpr64, debug-location !177; is.c:292:14
1496B	  %32:gpr32 = FCVTZSUWDr %31:fpr64, debug-location !179; is.c:293:9
1504B	  STRWui %32:gpr32, %stack.12.j, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
1512B	  %33:fpr64 = SCVTFUWDri %32:gpr32, debug-location !181; is.c:294:10
1528B	  %36:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
1560B	  %39:fpr64 = LDRDui %stack.6.A1, 0, debug-location !190 :: (dereferenceable load 8 from %ir.A1); is.c:296:10
1568B	  STRDui %31:fpr64, %stack.2.T1, 0, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
1576B	  STRDui %33:fpr64, %stack.8.X1, 0, debug-location !182 :: (store 8 into %ir.X1); is.c:294:8
1584B	  %35:fpr64 = LDRDui %34:gpr64common, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
1592B	  %37:fpr64 = FMULDrr %36:fpr64, %33:fpr64, debug-location !187; is.c:295:19
1608B	  %41:fpr64 = FMULDrr %28:fpr64, %33:fpr64, debug-location !195; is.c:296:23
1824B	  %52:fpr64 = LDRDui %stack.7.A2, 0, debug-location !213 :: (dereferenceable load 8 from %ir.A2); is.c:301:20
1832B	  %38:fpr64 = FSUBDrr %35:fpr64, %37:fpr64, debug-location !188; is.c:295:13
1840B	  STRDui %38:fpr64, %stack.9.X2, 0, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
1848B	  %40:fpr64 = FMULDrr %39:fpr64, %38:fpr64, debug-location !192; is.c:296:13
1856B	  %53:fpr64 = FMULDrr %52:fpr64, %38:fpr64, debug-location !215; is.c:301:23
1864B	  %43:fpr64 = LDRDui %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
1888B	  %55:gpr64temp = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !218; is.c:302:9
1892B	  %42:fpr64 = FADDDrr %40:fpr64, %41:fpr64, debug-location !196; is.c:296:18
1896B	  %47:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
1904B	  %44:fpr64 = FMULDrr %43:fpr64, %42:fpr64, debug-location !200; is.c:298:13
1912B	  %45:gpr32 = FCVTZSUWDr %44:fpr64, debug-location !198; is.c:298:9
1920B	  %46:fpr64 = SCVTFUWDri %45:gpr32, debug-location !202; is.c:299:10
1928B	  STRDui %46:fpr64, %stack.3.T2, 0, debug-location !203 :: (store 8 into %ir.T2); is.c:299:8
1936B	  %48:fpr64 = FMULDrr %47:fpr64, %46:fpr64, debug-location !207; is.c:300:18
1944B	  %50:fpr64 = LDRDui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
2000B	  %60:gpr64temp = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !225; is.c:304:15
2004B	  STRDui %42:fpr64, %stack.2.T1, 0, debug-location !197 :: (store 8 into %ir.T1); is.c:296:8
2008B	  %49:fpr64 = FSUBDrr %42:fpr64, %48:fpr64, debug-location !208; is.c:300:12
2016B	  %61:fpr64 = LDRDui %60:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
2064B	  %64:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
2072B	  STRDui %49:fpr64, %stack.10.Z, 0, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
2080B	  %51:fpr64 = FMULDrr %50:fpr64, %49:fpr64, debug-location !212; is.c:301:14
2088B	  %56:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
2096B	  STRWui %45:gpr32, %stack.12.j, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
2104B	  %54:fpr64 = FADDDrr %51:fpr64, %53:fpr64, debug-location !216; is.c:301:18
2112B	  STRDui %54:fpr64, %stack.4.T3, 0, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
2120B	  %57:fpr64 = FMULDrr %56:fpr64, %54:fpr64, debug-location !220; is.c:302:13
2128B	  %58:gpr32 = FCVTZSUWDr %57:fpr64, debug-location !218; is.c:302:9
2136B	  STRWui %58:gpr32, %stack.12.j, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
2144B	  %59:fpr64 = SCVTFUWDri %58:gpr32, debug-location !222; is.c:303:10
2152B	  STRDui %59:fpr64, %stack.5.T4, 0, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
2160B	  %62:fpr64 = FMULDrr %61:fpr64, %59:fpr64, debug-location !227; is.c:304:19
2168B	  %63:fpr64 = FSUBDrr %54:fpr64, %62:fpr64, debug-location !228; is.c:304:13
2176B	  STRDui %63:fpr64, %64:gpr64common, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
2192B	  %66:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
2200B	  %65:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
2208B	  %67:fpr64 = LDRDui %66:gpr64common, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
2216B	  %68:fpr64 = FMULDrr %65:fpr64, %67:fpr64, debug-location !234; is.c:305:17
2224B	  $d0 = COPY %68:fpr64, debug-location !235; is.c:305:5
2232B	  RET_ReallyLR implicit killed $d0, debug-location !235; is.c:305:5

# End machine code for function randlc.

Before post-MI-sched:
# Machine code for function randlc: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=8, align=8, at location [SP-32]
  fi#1: size=8, align=8, at location [SP-40]
  fi#2: size=8, align=8, at location [SP-48]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-64]
  fi#5: size=8, align=8, at location [SP-72]
  fi#6: size=8, align=8, at location [SP-80]
  fi#7: size=8, align=8, at location [SP-88]
  fi#8: size=8, align=8, at location [SP-96]
  fi#9: size=8, align=8, at location [SP-104]
  fi#10: size=8, align=8, at location [SP-112]
  fi#11: size=4, align=4, at location [SP-116]
  fi#12: size=4, align=4, at location [SP-120]
  fi#13: size=8, align=8, at location [SP-24]
  fi#14: size=8, align=8, at location [SP-8]
  fi#15: size=8, align=8, at location [SP-16]
Constant Pool:
  cp#0: 5.000000e-01, align=8
Function Live Ins: $x0, $x1

bb.0.entry:
  successors: %bb.1(0x30000000), %bb.8(0x50000000); %bb.1(37.50%), %bb.8(62.50%)
  liveins: $x0, $x1, $lr
  $sp = frame-setup SUBXri $sp, 128, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 14 :: (store 8 into %stack.15), (store 8 into %stack.14)
  $fp = frame-setup ADDXri $sp, 112, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8, debug-location !111; is.c:264:9
  frame-setup CFI_INSTRUCTION offset $w29, -16, debug-location !111; is.c:264:9
  renamable $x8 = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
  STPXi renamable $x1, renamable $x0, $fp, -3 :: (store 8 into %ir.X.addr), (store 8 into %ir.A.addr)
  CBNZW killed renamable $w8, %bb.8, debug-location !114; is.c:264:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
  $x17 = MOVZXi 16368, 48
  renamable $x18 = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
  renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
  STRXui renamable $x17, killed renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  renamable $x18 = ADRP target-flags(aarch64-page) %const.0
  STRXui renamable $x17, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  STRXui renamable $x17, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  renamable $d0 = LDRDui killed renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  renamable $x18 = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
  STRXui killed renamable $x17, killed renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  $w17 = MOVZWi 1, 0

bb.2.for.cond:
; predecessors: %bb.1, %bb.3
  successors: %bb.3(0x7c000000), %bb.4(0x04000000); %bb.3(96.88%), %bb.4(3.12%)
  liveins: $d0, $x8, $x16, $w17
  STRWui renamable $w17, $sp, 3, debug-location !DILocation(line: 0, scope: !121) :: (store 4 into %ir.i); is.c:0
  $w17 = ORRWrs $wzr, killed renamable $w17, 0, debug-location !123; is.c:270:21
  dead $wzr = SUBSWri killed renamable $w17, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9
  Bcc 12, %bb.4, implicit $nzcv, debug-location !126; is.c:270:9

bb.3.for.body:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $d0, $x8, $x16
  renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
  renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  renamable $w17 = LDRWui $sp, 3, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d0, debug-location !129; is.c:271:24
  STRDui killed renamable $d1, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  renamable $d1 = FADDDrr killed renamable $d2, renamable $d2, debug-location !132; is.c:272:23
  renamable $w17 = nsw ADDWri killed renamable $w17, 1, 0, debug-location !134; is.c:270:31
  STRDui killed renamable $d1, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  B %bb.2

bb.4.for.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $w8 = MOVZWi 1, 0
  renamable $x16 = ADRP target-flags(aarch64-page) %const.0
  renamable $d0 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  STRWui killed renamable $w8, $sp, 3, debug-location !138 :: (store 4 into %ir.i); is.c:274:16
  renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R46
  renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T46

bb.5.for.cond3:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)
  liveins: $d0, $x8, $x16
  renamable $w17 = LDRWui $sp, 3, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
  dead $wzr = SUBSWri killed renamable $w17, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9
  Bcc 12, %bb.7, implicit $nzcv, debug-location !144; is.c:274:9

bb.6.for.body5:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $d0, $x8, $x16
  renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
  renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  renamable $w17 = LDRWui $sp, 3, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d0, debug-location !147; is.c:275:24
  STRDui killed renamable $d1, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
  renamable $d1 = FADDDrr killed renamable $d2, renamable $d2, debug-location !150; is.c:276:23
  renamable $w17 = nsw ADDWri killed renamable $w17, 1, 0, debug-location !152; is.c:274:31
  STRDui killed renamable $d1, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
  STRWui killed renamable $w17, $sp, 3, debug-location !152 :: (store 4 into %ir.i); is.c:274:31
  B %bb.5

bb.7.for.end10:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !156; is.c:278:12
  $w16 = MOVZWi 1, 0
  STRWui killed renamable $w16, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12

bb.8.if.end:
; predecessors: %bb.0, %bb.7

  renamable $x17 = LDURXi $fp, -24, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
  renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !158; is.c:283:10
  renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
  renamable $d1 = LDRDui renamable $x17, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
  renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !169; is.c:286:15
  renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d1, debug-location !161; is.c:283:14
  STURDi renamable $d1, $fp, -32, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
  renamable $w18 = FCVTZSUWDr killed renamable $d1, debug-location !163; is.c:284:9
  STRWui renamable $w18, $sp, 2, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
  renamable $d1 = SCVTFUWDri killed renamable $w18, debug-location !165; is.c:285:10
  STRDui renamable $d1, $sp, 6, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
  renamable $d3 = LDRDui killed renamable $x17, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
  renamable $x17 = LDURXi $fp, -16, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
  renamable $x18 = LDURXi $fp, -16, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
  renamable $d1 = FMULDrr killed renamable $d2, killed renamable $d1, debug-location !171; is.c:286:19
  renamable $d1 = FSUBDrr killed renamable $d3, killed renamable $d1, debug-location !172; is.c:286:13
  renamable $d2 = LDRDui killed renamable $x17, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d2, debug-location !177; is.c:292:14
  renamable $w17 = FCVTZSUWDr renamable $d0, debug-location !179; is.c:293:9
  STRWui renamable $w17, $sp, 2, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
  renamable $d2 = SCVTFUWDri killed renamable $w17, debug-location !181; is.c:294:10
  renamable $d3 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
  STURDi killed renamable $d0, $fp, -32, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
  STPDi renamable $d2, renamable $d1, $sp, 4, debug-location !173 :: (store 8 into %ir.A2), (store 8 into %ir.X1); is.c:286:8
  renamable $d0 = LDRDui killed renamable $x18, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
  renamable $d3 = FMULDrr killed renamable $d3, renamable $d2, debug-location !187; is.c:295:19
  renamable $d1 = FMULDrr killed renamable $d1, killed renamable $d2, debug-location !195; is.c:296:23
  renamable $d2, renamable $d4 = LDPDi $sp, 5, debug-location !190 :: (dereferenceable load 8 from %ir.A1), (dereferenceable load 8 from %ir.A2); is.c:296:10
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d3, debug-location !188; is.c:295:13
  STRDui renamable $d0, $sp, 3, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
  renamable $d3 = FMULDrr killed renamable $d4, renamable $d0, debug-location !192; is.c:296:13
  renamable $d0 = FMULDrr killed renamable $d2, killed renamable $d0, debug-location !215; is.c:301:23
  renamable $d2 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
  renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !218; is.c:302:9
  renamable $d1 = FADDDrr killed renamable $d3, killed renamable $d1, debug-location !196; is.c:296:18
  renamable $d3 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
  renamable $d2 = FMULDrr killed renamable $d2, renamable $d1, debug-location !200; is.c:298:13
  renamable $w17 = FCVTZSUWDr killed renamable $d2, debug-location !198; is.c:298:9
  renamable $d2 = SCVTFUWDri renamable $w17, debug-location !202; is.c:299:10
  STPDi renamable $d2, renamable $d1, $fp, -5, debug-location !203 :: (store 8 into %ir.T2), (store 8 into %ir.T1); is.c:299:8
  renamable $d2 = FMULDrr killed renamable $d3, killed renamable $d2, debug-location !207; is.c:300:18
  renamable $d3 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
  renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !225; is.c:304:15
  renamable $d1 = FSUBDrr killed renamable $d1, killed renamable $d2, debug-location !208; is.c:300:12
  renamable $d2 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
  renamable $x16 = LDURXi $fp, -16, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
  STRDui renamable $d1, $sp, 2, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
  renamable $d1 = FMULDrr killed renamable $d3, killed renamable $d1, debug-location !212; is.c:301:14
  renamable $d3 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
  STRWui killed renamable $w17, $sp, 2, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0, debug-location !216; is.c:301:18
  STURDi renamable $d0, $fp, -48, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
  renamable $d1 = FMULDrr killed renamable $d3, renamable $d0, debug-location !220; is.c:302:13
  renamable $w17 = FCVTZSUWDr killed renamable $d1, debug-location !218; is.c:302:9
  STRWui renamable $w17, $sp, 2, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
  renamable $d1 = SCVTFUWDri killed renamable $w17, debug-location !222; is.c:303:10
  STRDui renamable $d1, $sp, 7, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
  renamable $d1 = FMULDrr killed renamable $d2, killed renamable $d1, debug-location !227; is.c:304:19
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d1, debug-location !228; is.c:304:13
  STRDui killed renamable $d0, killed renamable $x16, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
  renamable $x16 = LDURXi $fp, -16, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
  renamable $d1 = LDRDui killed renamable $x16, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !234; is.c:305:17
  $fp, $lr = frame-destroy LDPXi $sp, 14, debug-location !235 :: (load 8 from %stack.15), (load 8 from %stack.14); is.c:305:5
  $sp = frame-destroy ADDXri $sp, 128, 0, debug-location !235; is.c:305:5
  RET undef $lr, implicit $d0, debug-location !235; is.c:305:5

# End machine code for function randlc.

********** MI Scheduling **********
randlc:%bb.0 entry
  From: renamable $x8 = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
    To: CBNZW killed renamable $w8, %bb.8, debug-location !114; is.c:264:9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   STPXi renamable $x1, renamable $x0, $fp, -3 :: (store 8 into %ir.X.addr), (store 8 into %ir.A.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   CBNZW killed renamable $w8, %bb.8, debug-location !114; is.c:264:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STPXi renamable $x1, renamable $x0, $fp, -3 :: (store 8 into %ir.X.addr), (store 8 into %ir.A.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
SU(2):   STPXi renamable $x1, renamable $x0, $fp, -3 :: (store 8 into %ir.X.addr), (store 8 into %ir.A.addr)

********** MI Scheduling **********
randlc:%bb.0 entry
  From: frame-setup STPXi killed $fp, killed $lr, $sp, 14 :: (store 8 into %stack.15), (store 8 into %stack.14)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $fp, $lr, $sp, 14 :: (store 8 into %stack.15), (store 8 into %stack.14)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Anti Latency=0
SU(1):   $fp = frame-setup ADDXri $sp, 112, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) frame-setup STPXi $fp, $lr, $sp, 14 :: (store 8 into %stack.15), (store 8 into %stack.14)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $fp = frame-setup ADDXri $sp, 112, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $fp, $lr, $sp, 14 :: (store 8 into %stack.15), (store 8 into %stack.14)
SU(1):   $fp = frame-setup ADDXri $sp, 112, 0

Fixup kills for %bb.0
********** MI Scheduling **********
randlc:%bb.1 if.then
  From: renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
    To: End RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(6): Data Latency=1 Reg=$x8
SU(1):   $x17 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(11): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x17
    SU(7): Data Latency=1 Reg=$x17
    SU(6): Data Latency=1 Reg=$x17
    SU(4): Data Latency=1 Reg=$x17
SU(2):   renamable $x18 = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x18
SU(3):   renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(7): Data Latency=1 Reg=$x16
SU(4):   STRXui renamable $x17, renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x18
    SU(1): Data Latency=1 Reg=$x17
  Successors:
    SU(11): Anti Latency=0
    SU(5): Anti Latency=0
SU(5):   renamable $x18 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x18
SU(6):   STRXui renamable $x17, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$x17
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(11): Anti Latency=0
SU(7):   STRXui renamable $x17, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=$x16
    SU(1): Data Latency=1 Reg=$x17
  Successors:
    SU(11): Anti Latency=0
SU(8):   renamable $d0 = LDRDui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(5): Data Latency=1 Reg=$x18
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(9): Anti Latency=0
SU(9):   renamable $x18 = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(8): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(10): Data Latency=1 Reg=$x18
SU(10):   STRXui renamable $x17, renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(9): Data Latency=1 Reg=$x18
    SU(1): Data Latency=1 Reg=$x17
  Successors:
    SU(11): Anti Latency=0
SU(11):   $w17 = MOVZWi 1, 0
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(10): Anti Latency=0
    SU(7): Anti Latency=0
    SU(6): Anti Latency=0
    SU(4): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x17 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x18 = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
  Ready @1c
  TopQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) STRXui renamable $x17, renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  Ready @2c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x18 = ADRP target-flags(aarch64-page) %const.0
  Ready @3c
  TopQ.A BotLatency SU(5) 5c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 8 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d0 = LDRDui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @4c
  TopQ.A TopLatency SU(8) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 9 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 3 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 6 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x18 = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
  Ready @7c
  TopQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 10 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STRXui renamable $x17, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 6
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) STRXui renamable $x17, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  Ready @9c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRXui renamable $x17, renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  Ready @10c
  TopQ.A TopLatency SU(10) 3c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) $w17 = MOVZWi 1, 0
  Ready @11c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(1):   $x17 = MOVZXi 16368, 48
SU(2):   renamable $x18 = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
SU(4):   STRXui renamable $x17, renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
SU(5):   renamable $x18 = ADRP target-flags(aarch64-page) %const.0
SU(8):   renamable $d0 = LDRDui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
SU(3):   renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
SU(9):   renamable $x18 = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
SU(6):   STRXui renamable $x17, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
SU(7):   STRXui renamable $x17, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
SU(10):   STRXui renamable $x17, renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
SU(11):   $w17 = MOVZWi 1, 0

Fixup kills for %bb.1
********** MI Scheduling **********
randlc:%bb.2 for.cond
  From: STRWui renamable $w17, $sp, 3, debug-location !DILocation(line: 0, scope: !121) :: (store 4 into %ir.i); is.c:0
    To: Bcc 12, %bb.4, implicit $nzcv, debug-location !126; is.c:270:9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w17, $sp, 3, debug-location !DILocation(line: 0, scope: !121) :: (store 4 into %ir.i); is.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w17 = ORRWrs $wzr, renamable $w17, 0, debug-location !123; is.c:270:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=$w17
SU(2):   dead $wzr = SUBSWri renamable $w17, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.4, implicit $nzcv, debug-location !126; is.c:270:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui renamable $w17, $sp, 3, debug-location !DILocation(line: 0, scope: !121) :: (store 4 into %ir.i); is.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w17 = ORRWrs $wzr, renamable $w17, 0, debug-location !123; is.c:270:21
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w17, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   STRWui renamable $w17, $sp, 3, debug-location !DILocation(line: 0, scope: !121) :: (store 4 into %ir.i); is.c:0
SU(1):   $w17 = ORRWrs $wzr, renamable $w17, 0, debug-location !123; is.c:270:21
SU(2):   dead $wzr = SUBSWri renamable $w17, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9

Fixup kills for %bb.2
********** MI Scheduling **********
randlc:%bb.3 for.body
  From: renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
    To: B %bb.2
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$d2
    SU(7): Ord  Latency=0 Memory
SU(2):   renamable $w17 = LDRWui $sp, 3, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w17
SU(3):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !129; is.c:271:24
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d1
SU(4):   STRDui renamable $d1, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=$d1
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(5): Anti Latency=0
SU(5):   renamable $d1 = FADDDrr renamable $d2, renamable $d2, debug-location !132; is.c:272:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    SU(7): Data Latency=1 Reg=$d1
SU(6):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !134; is.c:270:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w17
SU(7):   STRDui renamable $d1, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d1
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.2
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w17 = LDRWui $sp, 3, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 6 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !129; is.c:271:24
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d1, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = FADDDrr renamable $d2, renamable $d2, debug-location !132; is.c:272:23
  Ready @6c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !134; is.c:270:31
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRDui renamable $d1, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  Ready @8c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
SU(1):   renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
SU(2):   renamable $w17 = LDRWui $sp, 3, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
SU(3):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !129; is.c:271:24
SU(4):   STRDui renamable $d1, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
SU(5):   renamable $d1 = FADDDrr renamable $d2, renamable $d2, debug-location !132; is.c:272:23
SU(6):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !134; is.c:270:31
SU(7):   STRDui renamable $d1, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17

Fixup kills for %bb.3
********** MI Scheduling **********
randlc:%bb.4 for.end
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(5): Anti Latency=0
SU(3):   STRWui renamable $w8, $sp, 3, debug-location !138 :: (store 4 into %ir.i); is.c:274:16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
  Successors:
    SU(4): Anti Latency=0
SU(4):   renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R46
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T46
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) %const.0
  Ready @0c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRWui renamable $w8, $sp, 3, debug-location !138 :: (store 4 into %ir.i); is.c:274:16
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R46
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T46
  Ready @5c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.0
SU(2):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(0):   $w8 = MOVZWi 1, 0
SU(3):   STRWui renamable $w8, $sp, 3, debug-location !138 :: (store 4 into %ir.i); is.c:274:16
SU(4):   renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R46
SU(5):   renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T46

Fixup kills for %bb.4
********** MI Scheduling **********
randlc:%bb.5 for.cond3
  From: renamable $w17 = LDRWui $sp, 3, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
    To: Bcc 12, %bb.7, implicit $nzcv, debug-location !144; is.c:274:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w17 = LDRWui $sp, 3, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w17
SU(1):   dead $wzr = SUBSWri renamable $w17, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.7, implicit $nzcv, debug-location !144; is.c:274:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w17 = LDRWui $sp, 3, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w17, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $w17 = LDRWui $sp, 3, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
SU(1):   dead $wzr = SUBSWri renamable $w17, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9

Fixup kills for %bb.5
********** MI Scheduling **********
randlc:%bb.6 for.body5
  From: renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
    To: B %bb.5
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$d2
    SU(7): Ord  Latency=0 Memory
SU(2):   renamable $w17 = LDRWui $sp, 3, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w17
    SU(8): Ord  Latency=0 Memory
SU(3):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !147; is.c:275:24
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d1
SU(4):   STRDui renamable $d1, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=$d1
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(5): Anti Latency=0
SU(5):   renamable $d1 = FADDDrr renamable $d2, renamable $d2, debug-location !150; is.c:276:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    SU(7): Data Latency=1 Reg=$d1
SU(6):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !152; is.c:274:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w17
  Successors:
    SU(8): Data Latency=1 Reg=$w17
SU(7):   STRDui renamable $d1, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d1
    SU(1): Ord  Latency=0 Memory
SU(8):   STRWui renamable $w17, $sp, 3, debug-location !152 :: (store 4 into %ir.i); is.c:274:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w17
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w17 = LDRWui $sp, 3, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
  Ready @2c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 6 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !147; is.c:275:24
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d1, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $d1 = FADDDrr renamable $d2, renamable $d2, debug-location !150; is.c:276:23
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !152; is.c:274:31
  Ready @7c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) STRDui renamable $d1, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
  Ready @8c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWui renamable $w17, $sp, 3, debug-location !152 :: (store 4 into %ir.i); is.c:274:31
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
SU(1):   renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
SU(2):   renamable $w17 = LDRWui $sp, 3, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
SU(3):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !147; is.c:275:24
SU(4):   STRDui renamable $d1, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
SU(5):   renamable $d1 = FADDDrr renamable $d2, renamable $d2, debug-location !150; is.c:276:23
SU(6):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !152; is.c:274:31
SU(7):   STRDui renamable $d1, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
SU(8):   STRWui renamable $w17, $sp, 3, debug-location !152 :: (store 4 into %ir.i); is.c:274:31

Fixup kills for %bb.6
********** MI Scheduling **********
randlc:%bb.7 for.end10
  From: renamable $x8 = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !156; is.c:278:12
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !156; is.c:278:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(1):   $w16 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=$w16
SU(2):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w16
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !156; is.c:278:12
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w16 = MOVZWi 1, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !156; is.c:278:12
SU(1):   $w16 = MOVZWi 1, 0
SU(2):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12

Fixup kills for %bb.7
********** MI Scheduling **********
randlc:%bb.8 if.end
  From: renamable $x17 = LDURXi $fp, -24, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
    To: $sp = frame-destroy ADDXri $sp, 128, 0, debug-location !235; is.c:305:5
 RegionInstrs: 66
ScheduleDAGMI::schedule starting
SU(0):   renamable $x17 = LDURXi $fp, -24, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 58
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=4 Reg=$x17
    SU(3): Data Latency=4 Reg=$x17
    SU(65): Anti Latency=0
    SU(60): Ord  Latency=0 Memory
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !158; is.c:283:10
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 55
  Successors:
    SU(34): Out  Latency=1
    SU(33): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 54
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=4 Reg=$d0
    SU(6): Data Latency=4 Reg=$d0
    SU(34): Anti Latency=0
    SU(60): Ord  Latency=0 Memory
SU(3):   renamable $d1 = LDRDui renamable $x17, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
  # preds left       : 1
  # succs left       : 17
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 54
  Predecessors:
    SU(0): Data Latency=4 Reg=$x17
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d1
    SU(13): Anti Latency=0
    SU(60): Ord  Latency=0 Memory
    SU(57): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
SU(4):   renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !169; is.c:286:15
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 47
  Successors:
    SU(43): Out  Latency=1
    SU(42): Data Latency=1 Reg=$x16
    SU(36): Data Latency=1 Reg=$x16
    SU(22): Data Latency=1 Reg=$x16
    SU(5): Data Latency=1 Reg=$x16
SU(5):   renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 46
  Predecessors:
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    SU(17): Out  Latency=1
    SU(15): Data Latency=4 Reg=$d2
    SU(43): Anti Latency=0
    SU(60): Ord  Latency=0 Memory
SU(6):   renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !161; is.c:283:14
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 50
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(10): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
    SU(7): Data Latency=1 Reg=$d1
    SU(18): Anti Latency=0
SU(7):   STURDi renamable $d1, $fp, -32, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 48
  Predecessors:
    SU(6): Data Latency=1 Reg=$d1
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(10): Anti Latency=0
    SU(65): Anti Latency=0
    SU(40): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(63): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(60): Ord  Latency=0 Memory
SU(8):   renamable $w18 = FCVTZSUWDr renamable $d1, debug-location !163; is.c:284:9
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 49
  Predecessors:
    SU(6): Data Latency=1 Reg=$d1
  Successors:
    SU(14): Out  Latency=1
    SU(10): Data Latency=1 Reg=$w18
    SU(9): Data Latency=1 Reg=$w18
    SU(10): Anti Latency=0
SU(9):   STRWui renamable $w18, $sp, 2, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 47
  Predecessors:
    SU(8): Data Latency=1 Reg=$w18
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(14): Anti Latency=0
    SU(55): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(63): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(60): Ord  Latency=0 Memory
SU(10):   renamable $d1 = SCVTFUWDri renamable $w18, debug-location !165; is.c:285:10
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 48
  Predecessors:
    SU(8): Data Latency=1 Reg=$w18
    SU(8): Anti Latency=0
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$d1
    SU(11): Data Latency=1 Reg=$d1
    SU(14): Anti Latency=0
SU(11):   STRDui renamable $d1, $sp, 6, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 47
  Predecessors:
    SU(10): Data Latency=1 Reg=$d1
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(15): Anti Latency=0
    SU(28): Ord  Latency=1 Memory
    SU(63): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(60): Ord  Latency=0 Memory
SU(12):   renamable $d3 = LDRDui renamable $x17, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
  # preds left       : 4
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 46
  Predecessors:
    SU(11): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(0): Data Latency=4 Reg=$x17
  Successors:
    SU(22): Out  Latency=1
    SU(16): Data Latency=4 Reg=$d3
    SU(13): Anti Latency=0
    SU(60): Ord  Latency=0 Memory
    SU(57): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
SU(13):   renamable $x17 = LDURXi $fp, -16, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 46
  Predecessors:
    SU(12): Anti Latency=0
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(17): Data Latency=4 Reg=$x17
    SU(65): Anti Latency=0
    SU(60): Ord  Latency=0 Memory
SU(14):   renamable $x18 = LDURXi $fp, -16, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 38
  Predecessors:
    SU(10): Anti Latency=0
    SU(9): Anti Latency=0
    SU(8): Out  Latency=1
  Successors:
    SU(25): Data Latency=4 Reg=$x18
    SU(65): Anti Latency=0
    SU(60): Ord  Latency=0 Memory
SU(15):   renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !171; is.c:286:19
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 42
  Predecessors:
    SU(11): Anti Latency=0
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d1
    SU(5): Data Latency=4 Reg=$d2
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$d1
    SU(17): Anti Latency=0
SU(16):   renamable $d1 = FSUBDrr renamable $d3, renamable $d1, debug-location !172; is.c:286:13
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 37
  Predecessors:
    SU(12): Data Latency=4 Reg=$d3
    SU(15): Data Latency=1 Reg=$d1
    SU(15): Out  Latency=1
  Successors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$d1
    SU(24): Data Latency=1 Reg=$d1
    SU(22): Anti Latency=0
SU(17):   renamable $d2 = LDRDui renamable $x17, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
  # preds left       : 6
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 42
  Predecessors:
    SU(15): Anti Latency=0
    SU(13): Data Latency=4 Reg=$x17
    SU(11): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Out  Latency=1
  Successors:
    SU(21): Out  Latency=1
    SU(18): Data Latency=4 Reg=$d2
    SU(19): Anti Latency=0
    SU(60): Ord  Latency=0 Memory
    SU(57): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
SU(18):   renamable $d0 = FMULDrr renamable $d0, renamable $d2, debug-location !177; is.c:292:14
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 38
  Predecessors:
    SU(17): Data Latency=4 Reg=$d2
    SU(6): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(25): Out  Latency=1
    SU(23): Data Latency=1 Reg=$d0
    SU(19): Data Latency=1 Reg=$d0
    SU(21): Anti Latency=0
SU(19):   renamable $w17 = FCVTZSUWDr renamable $d0, debug-location !179; is.c:293:9
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 37
  Predecessors:
    SU(18): Data Latency=1 Reg=$d0
    SU(17): Anti Latency=0
    SU(13): Out  Latency=1
  Successors:
    SU(38): Out  Latency=1
    SU(21): Data Latency=1 Reg=$w17
    SU(20): Data Latency=1 Reg=$w17
    SU(25): Anti Latency=0
SU(20):   STRWui renamable $w17, $sp, 2, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
  # preds left       : 5
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 35
  Predecessors:
    SU(19): Data Latency=1 Reg=$w17
    SU(17): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(38): Anti Latency=0
    SU(55): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(63): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(60): Ord  Latency=0 Memory
SU(21):   renamable $d2 = SCVTFUWDri renamable $w17, debug-location !181; is.c:294:10
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 36
  Predecessors:
    SU(19): Data Latency=1 Reg=$w17
    SU(18): Anti Latency=0
    SU(17): Out  Latency=1
  Successors:
    SU(28): Out  Latency=1
    SU(27): Data Latency=1 Reg=$d2
    SU(26): Data Latency=1 Reg=$d2
    SU(24): Data Latency=1 Reg=$d2
    SU(38): Anti Latency=0
SU(22):   renamable $d3 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 37
  Predecessors:
    SU(16): Anti Latency=0
    SU(12): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=4 Reg=$d3
    SU(43): Anti Latency=0
    SU(60): Ord  Latency=0 Memory
SU(23):   STURDi renamable $d0, $fp, -32, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
  # preds left       : 5
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 35
  Predecessors:
    SU(18): Data Latency=1 Reg=$d0
    SU(17): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(25): Anti Latency=0
    SU(65): Anti Latency=0
    SU(40): Ord  Latency=0 Memory
    SU(63): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(60): Ord  Latency=0 Memory
SU(24):   STPDi renamable $d2, renamable $d1, $sp, 4, debug-location !173 :: (store 8 into %ir.A2), (store 8 into %ir.X1); is.c:286:8
  # preds left       : 5
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 35
  Predecessors:
    SU(21): Data Latency=1 Reg=$d2
    SU(17): Ord  Latency=0 Memory
    SU(16): Data Latency=1 Reg=$d1
    SU(12): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(28): Anti Latency=0
    SU(27): Anti Latency=0
    SU(28): Ord  Latency=1 Memory
    SU(63): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(60): Ord  Latency=0 Memory
SU(25):   renamable $d0 = LDRDui renamable $x18, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
  # preds left       : 10
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 34
  Predecessors:
    SU(24): Ord  Latency=1 Memory
    SU(23): Anti Latency=0
    SU(23): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(19): Anti Latency=0
    SU(18): Out  Latency=1
    SU(14): Data Latency=4 Reg=$x18
    SU(11): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=4 Reg=$d0
    SU(60): Ord  Latency=0 Memory
    SU(57): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
SU(26):   renamable $d3 = FMULDrr renamable $d3, renamable $d2, debug-location !187; is.c:295:19
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 33
  Predecessors:
    SU(21): Data Latency=1 Reg=$d2
    SU(22): Data Latency=4 Reg=$d3
    SU(22): Out  Latency=1
  Successors:
    SU(31): Out  Latency=1
    SU(29): Data Latency=1 Reg=$d3
    SU(28): Anti Latency=0
SU(27):   renamable $d1 = FMULDrr renamable $d1, renamable $d2, debug-location !195; is.c:296:23
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 33
  Predecessors:
    SU(24): Anti Latency=0
    SU(21): Data Latency=1 Reg=$d2
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$d1
  Successors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$d1
    SU(28): Anti Latency=0
SU(28):   renamable $d2, renamable $d4 = LDPDi $sp, 5, debug-location !190 :: (dereferenceable load 8 from %ir.A1), (dereferenceable load 8 from %ir.A2); is.c:296:10
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 33
  Predecessors:
    SU(27): Anti Latency=0
    SU(26): Anti Latency=0
    SU(24): Anti Latency=0
    SU(24): Ord  Latency=1 Memory
    SU(21): Out  Latency=1
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(33): Out  Latency=1
    SU(32): Data Latency=4 Reg=$d2
    SU(31): Data Latency=4 Reg=$d4
    SU(60): Ord  Latency=0 Memory
SU(29):   renamable $d0 = FSUBDrr renamable $d0, renamable $d3, debug-location !188; is.c:295:13
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 30
  Predecessors:
    SU(25): Data Latency=4 Reg=$d0
    SU(25): Out  Latency=1
    SU(26): Data Latency=1 Reg=$d3
  Successors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$d0
    SU(31): Data Latency=1 Reg=$d0
    SU(30): Data Latency=1 Reg=$d0
    SU(31): Anti Latency=0
SU(30):   STRDui renamable $d0, $sp, 3, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 29
  Predecessors:
    SU(29): Data Latency=1 Reg=$d0
    SU(25): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(32): Anti Latency=0
    SU(63): Ord  Latency=1 Memory
    SU(60): Ord  Latency=0 Memory
SU(31):   renamable $d3 = FMULDrr renamable $d4, renamable $d0, debug-location !192; is.c:296:13
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 29
  Predecessors:
    SU(29): Data Latency=1 Reg=$d0
    SU(29): Anti Latency=0
    SU(28): Data Latency=4 Reg=$d4
    SU(26): Out  Latency=1
  Successors:
    SU(36): Out  Latency=1
    SU(35): Data Latency=1 Reg=$d3
    SU(32): Anti Latency=0
SU(32):   renamable $d0 = FMULDrr renamable $d2, renamable $d0, debug-location !215; is.c:301:23
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 29
  Predecessors:
    SU(31): Anti Latency=0
    SU(30): Anti Latency=0
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$d0
    SU(28): Data Latency=4 Reg=$d2
  Successors:
    SU(51): Out  Latency=1
    SU(51): Data Latency=1 Reg=$d0
    SU(33): Anti Latency=0
SU(33):   renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 29
  Height             : 29
  Predecessors:
    SU(32): Anti Latency=0
    SU(28): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(37): Out  Latency=1
    SU(37): Data Latency=4 Reg=$d2
    SU(34): Anti Latency=0
    SU(60): Ord  Latency=0 Memory
SU(34):   renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !218; is.c:302:9
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 19
  Predecessors:
    SU(33): Anti Latency=0
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(62): Data Latency=1 Reg=$x8
    SU(49): Data Latency=1 Reg=$x8
SU(35):   renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !196; is.c:296:18
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 30
  Height             : 26
  Predecessors:
    SU(31): Data Latency=1 Reg=$d3
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$d1
  Successors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d1
    SU(40): Data Latency=1 Reg=$d1
    SU(37): Data Latency=1 Reg=$d1
    SU(36): Anti Latency=0
SU(36):   renamable $d3 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 26
  Predecessors:
    SU(35): Anti Latency=0
    SU(31): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    SU(42): Out  Latency=1
    SU(41): Data Latency=4 Reg=$d3
    SU(43): Anti Latency=0
    SU(60): Ord  Latency=0 Memory
SU(37):   renamable $d2 = FMULDrr renamable $d2, renamable $d1, debug-location !200; is.c:298:13
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 33
  Height             : 25
  Predecessors:
    SU(35): Data Latency=1 Reg=$d1
    SU(33): Out  Latency=1
    SU(33): Data Latency=4 Reg=$d2
  Successors:
    SU(39): Out  Latency=1
    SU(38): Data Latency=1 Reg=$d2
    SU(44): Anti Latency=0
SU(38):   renamable $w17 = FCVTZSUWDr renamable $d2, debug-location !198; is.c:298:9
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 24
  Predecessors:
    SU(37): Data Latency=1 Reg=$d2
    SU(21): Anti Latency=0
    SU(20): Anti Latency=0
    SU(19): Out  Latency=1
  Successors:
    SU(54): Out  Latency=1
    SU(50): Data Latency=1 Reg=$w17
    SU(39): Data Latency=1 Reg=$w17
    SU(39): Anti Latency=0
SU(39):   renamable $d2 = SCVTFUWDri renamable $w17, debug-location !202; is.c:299:10
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 23
  Predecessors:
    SU(38): Data Latency=1 Reg=$w17
    SU(38): Anti Latency=0
    SU(37): Out  Latency=1
  Successors:
    SU(41): Out  Latency=1
    SU(41): Data Latency=1 Reg=$d2
    SU(40): Data Latency=1 Reg=$d2
    SU(54): Anti Latency=0
SU(40):   STPDi renamable $d2, renamable $d1, $fp, -5, debug-location !203 :: (store 8 into %ir.T2), (store 8 into %ir.T1); is.c:299:8
  # preds left       : 8
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 22
  Predecessors:
    SU(39): Data Latency=1 Reg=$d2
    SU(35): Data Latency=1 Reg=$d1
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(41): Anti Latency=0
    SU(44): Anti Latency=0
    SU(65): Anti Latency=0
    SU(63): Ord  Latency=1 Memory
    SU(60): Ord  Latency=0 Memory
SU(41):   renamable $d2 = FMULDrr renamable $d3, renamable $d2, debug-location !207; is.c:300:18
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 22
  Predecessors:
    SU(40): Anti Latency=0
    SU(39): Out  Latency=1
    SU(39): Data Latency=1 Reg=$d2
    SU(36): Data Latency=4 Reg=$d3
  Successors:
    SU(45): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d2
    SU(42): Anti Latency=0
SU(42):   renamable $d3 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 36
  Height             : 22
  Predecessors:
    SU(41): Anti Latency=0
    SU(36): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    SU(49): Out  Latency=1
    SU(48): Data Latency=4 Reg=$d3
    SU(43): Anti Latency=0
    SU(60): Ord  Latency=0 Memory
SU(43):   renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !225; is.c:304:15
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 16
  Predecessors:
    SU(42): Anti Latency=0
    SU(36): Anti Latency=0
    SU(22): Anti Latency=0
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(46): Out  Latency=1
    SU(45): Data Latency=1 Reg=$x16
SU(44):   renamable $d1 = FSUBDrr renamable $d1, renamable $d2, debug-location !208; is.c:300:12
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 37
  Height             : 19
  Predecessors:
    SU(41): Data Latency=1 Reg=$d2
    SU(40): Anti Latency=0
    SU(37): Anti Latency=0
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$d1
  Successors:
    SU(48): Out  Latency=1
    SU(48): Data Latency=1 Reg=$d1
    SU(47): Data Latency=1 Reg=$d1
    SU(45): Anti Latency=0
SU(45):   renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 37
  Height             : 15
  Predecessors:
    SU(44): Anti Latency=0
    SU(43): Data Latency=1 Reg=$x16
    SU(41): Out  Latency=1
  Successors:
    SU(58): Data Latency=4 Reg=$d2
    SU(46): Anti Latency=0
    SU(60): Ord  Latency=0 Memory
SU(46):   renamable $x16 = LDURXi $fp, -16, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 37
  Height             : 13
  Predecessors:
    SU(45): Anti Latency=0
    SU(43): Out  Latency=1
  Successors:
    SU(61): Out  Latency=1
    SU(60): Data Latency=4 Reg=$x16
    SU(65): Anti Latency=0
    SU(60): Ord  Latency=0 Memory
SU(47):   STRDui renamable $d1, $sp, 2, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 18
  Predecessors:
    SU(44): Data Latency=1 Reg=$d1
    SU(25): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(48): Anti Latency=0
    SU(63): Ord  Latency=1 Memory
    SU(60): Ord  Latency=0 Memory
SU(48):   renamable $d1 = FMULDrr renamable $d3, renamable $d1, debug-location !212; is.c:301:14
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 40
  Height             : 18
  Predecessors:
    SU(47): Anti Latency=0
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d1
    SU(42): Data Latency=4 Reg=$d3
  Successors:
    SU(53): Out  Latency=1
    SU(51): Data Latency=1 Reg=$d1
    SU(49): Anti Latency=0
SU(49):   renamable $d3 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 40
  Height             : 18
  Predecessors:
    SU(48): Anti Latency=0
    SU(42): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x8
  Successors:
    SU(53): Data Latency=4 Reg=$d3
    SU(60): Ord  Latency=0 Memory
SU(50):   STRWui renamable $w17, $sp, 2, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
  # preds left       : 7
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 13
  Predecessors:
    SU(38): Data Latency=1 Reg=$w17
    SU(25): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(54): Anti Latency=0
    SU(55): Ord  Latency=0 Memory
    SU(63): Ord  Latency=1 Memory
    SU(60): Ord  Latency=0 Memory
SU(51):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !216; is.c:301:18
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 41
  Height             : 15
  Predecessors:
    SU(48): Data Latency=1 Reg=$d1
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$d0
  Successors:
    SU(59): Out  Latency=1
    SU(59): Data Latency=1 Reg=$d0
    SU(53): Data Latency=1 Reg=$d0
    SU(52): Data Latency=1 Reg=$d0
    SU(53): Anti Latency=0
SU(52):   STURDi renamable $d0, $fp, -48, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 42
  Height             : 10
  Predecessors:
    SU(51): Data Latency=1 Reg=$d0
    SU(25): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(59): Anti Latency=0
    SU(65): Anti Latency=0
    SU(63): Ord  Latency=1 Memory
    SU(60): Ord  Latency=0 Memory
SU(53):   renamable $d1 = FMULDrr renamable $d3, renamable $d0, debug-location !220; is.c:302:13
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 44
  Height             : 14
  Predecessors:
    SU(51): Data Latency=1 Reg=$d0
    SU(51): Anti Latency=0
    SU(49): Data Latency=4 Reg=$d3
    SU(48): Out  Latency=1
  Successors:
    SU(56): Out  Latency=1
    SU(54): Data Latency=1 Reg=$d1
    SU(59): Anti Latency=0
SU(54):   renamable $w17 = FCVTZSUWDr renamable $d1, debug-location !218; is.c:302:9
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 45
  Height             : 13
  Predecessors:
    SU(53): Data Latency=1 Reg=$d1
    SU(50): Anti Latency=0
    SU(39): Anti Latency=0
    SU(38): Out  Latency=1
  Successors:
    SU(56): Data Latency=1 Reg=$w17
    SU(55): Data Latency=1 Reg=$w17
    SU(56): Anti Latency=0
SU(55):   STRWui renamable $w17, $sp, 2, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 46
  Height             : 9
  Predecessors:
    SU(54): Data Latency=1 Reg=$w17
    SU(50): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(63): Ord  Latency=1 Memory
    SU(60): Ord  Latency=0 Memory
SU(56):   renamable $d1 = SCVTFUWDri renamable $w17, debug-location !222; is.c:303:10
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 46
  Height             : 12
  Predecessors:
    SU(54): Data Latency=1 Reg=$w17
    SU(54): Anti Latency=0
    SU(53): Out  Latency=1
  Successors:
    SU(58): Out  Latency=1
    SU(58): Data Latency=1 Reg=$d1
    SU(57): Data Latency=1 Reg=$d1
SU(57):   STRDui renamable $d1, $sp, 7, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 47
  Height             : 11
  Predecessors:
    SU(56): Data Latency=1 Reg=$d1
    SU(25): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(58): Anti Latency=0
    SU(63): Ord  Latency=1 Memory
    SU(60): Ord  Latency=0 Memory
SU(58):   renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !227; is.c:304:19
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 47
  Height             : 11
  Predecessors:
    SU(57): Anti Latency=0
    SU(56): Out  Latency=1
    SU(56): Data Latency=1 Reg=$d1
    SU(45): Data Latency=4 Reg=$d2
  Successors:
    SU(63): Out  Latency=1
    SU(59): Data Latency=1 Reg=$d1
SU(59):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !228; is.c:304:13
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 48
  Height             : 10
  Predecessors:
    SU(58): Data Latency=1 Reg=$d1
    SU(53): Anti Latency=0
    SU(52): Anti Latency=0
    SU(51): Out  Latency=1
    SU(51): Data Latency=1 Reg=$d0
  Successors:
    SU(62): Out  Latency=1
    SU(60): Data Latency=1 Reg=$d0
    SU(63): Anti Latency=0
SU(60):   STRDui renamable $d0, renamable $x16, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
  # preds left       : 32
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 49
  Height             : 9
  Predecessors:
    SU(59): Data Latency=1 Reg=$d0
    SU(57): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(46): Data Latency=4 Reg=$x16
    SU(46): Ord  Latency=0 Memory
    SU(45): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(62): Anti Latency=0
    SU(61): Anti Latency=0
    SU(63): Ord  Latency=1 Memory
    SU(62): Ord  Latency=1 Memory
    SU(61): Ord  Latency=1 Memory
    SU(65): Ord  Latency=1 Memory
SU(61):   renamable $x16 = LDURXi $fp, -16, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 50
  Height             : 8
  Predecessors:
    SU(60): Anti Latency=0
    SU(60): Ord  Latency=1 Memory
    SU(46): Out  Latency=1
  Successors:
    SU(63): Data Latency=4 Reg=$x16
    SU(65): Anti Latency=0
SU(62):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 50
  Height             : 4
  Predecessors:
    SU(60): Anti Latency=0
    SU(60): Ord  Latency=1 Memory
    SU(59): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x8
  Successors:
    SU(64): Out  Latency=1
    SU(64): Data Latency=4 Reg=$d0
SU(63):   renamable $d1 = LDRDui renamable $x16, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
  # preds left       : 17
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 54
  Height             : 4
  Predecessors:
    SU(61): Data Latency=4 Reg=$x16
    SU(60): Ord  Latency=1 Memory
    SU(59): Anti Latency=0
    SU(58): Out  Latency=1
    SU(57): Ord  Latency=1 Memory
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(47): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
    SU(24): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(64): Data Latency=4 Reg=$d1
SU(64):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !234; is.c:305:17
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 58
  Height             : 0
  Predecessors:
    SU(63): Data Latency=4 Reg=$d1
    SU(62): Out  Latency=1
    SU(62): Data Latency=4 Reg=$d0
SU(65):   $fp, $lr = frame-destroy LDPXi $sp, 14, debug-location !235 :: (load 8 from %stack.15), (load 8 from %stack.14); is.c:305:5
  # preds left       : 10
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 50
  Height             : 3
  Predecessors:
    SU(61): Anti Latency=0
    SU(60): Ord  Latency=1 Memory
    SU(52): Anti Latency=0
    SU(46): Anti Latency=0
    SU(40): Anti Latency=0
    SU(23): Anti Latency=0
    SU(14): Anti Latency=0
    SU(13): Anti Latency=0
    SU(7): Anti Latency=0
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 128, 0, debug-location !235; is.c:305:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 53
  Height             : 0
  Predecessors:
    SU(65): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 58
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 58
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x17 = LDURXi $fp, -24, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
  Ready @0c
  TopQ.A BotLatency SU(0) 58c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 58
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  55 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !158; is.c:283:10
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 58
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  54 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !169; is.c:286:15
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 58
  Cand SU(5) ORDER                              
  Cand SU(3) TOP-PATH                  54 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDui renamable $x17, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !161; is.c:283:14
  Ready @8c
  TopQ.A TopLatency SU(6) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 7 
  TopQ.A RemainingLatency 0 + 9c > CritPath 58
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $w18 = FCVTZSUWDr renamable $d1, debug-location !163; is.c:284:9
  Ready @9c
  TopQ.A TopLatency SU(8) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 9 
  TopQ.A RemainingLatency 0 + 10c > CritPath 58
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) STURDi renamable $d1, $fp, -32, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 
  TopQ.A RemainingLatency 0 + 11c > CritPath 58
  Cand SU(9) ORDER                              
  Cand SU(10) TOP-PATH                  48 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $d1 = SCVTFUWDri renamable $w18, debug-location !165; is.c:285:10
  Ready @11c
  TopQ.A TopLatency SU(10) 10c
  TopQ.A BotLatency SU(10) 48c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 11 
  TopQ.A RemainingLatency 0 + 12c > CritPath 58
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) STRWui renamable $w18, $sp, 2, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 58
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) STRDui renamable $d1, $sp, 6, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
  Ready @13c
  TopQ.A TopLatency SU(11) 11c
  TopQ.A BotLatency SU(11) 47c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 15 12 
  TopQ.A RemainingLatency 0 + 14c > CritPath 58
  Cand SU(14) ORDER                              
  Cand SU(15) TOP-PATH                  42 cycles 
  Cand SU(12) TOP-PATH                  46 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) renamable $d3 = LDRDui renamable $x17, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
  Ready @14c
  TopQ.A TopLatency SU(12) 12c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 13
  Executed: 15c
  Critical: 13c, 13 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 15 13 
  TopQ.A RemainingLatency 0 + 15c > CritPath 58
  Cand SU(14) ORDER                              
  Cand SU(15) TOP-PATH                  42 cycles 
  Cand SU(13) TOP-PATH                  46 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) renamable $x17 = LDURXi $fp, -16, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
  Ready @15c
  TopQ.A BotLatency SU(13) 46c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 14
  Executed: 16c
  Critical: 14c, 14 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 15 
  TopQ.A RemainingLatency 0 + 16c > CritPath 58
  Cand SU(14) ORDER                              
  Cand SU(15) TOP-PATH                  42 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !171; is.c:286:19
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 15
  Executed: 17c
  Critical: 15c, 15 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 16 17 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) renamable $x18 = LDURXi $fp, -16, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 16
  Executed: 18c
  Critical: 16c, 16 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $d1 = FSUBDrr renamable $d3, renamable $d1, debug-location !172; is.c:286:13
  Ready @18c
  TopQ.A TopLatency SU(16) 16c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 17
  Executed: 19c
  Critical: 17c, 17 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 22 17 
  TopQ.A RemainingLatency 0 + 19c > CritPath 58
  Cand SU(22) ORDER                              
  Cand SU(17) TOP-PATH                  42 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) renamable $d2 = LDRDui renamable $x17, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 18
  Executed: 20c
  Critical: 18c, 18 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 18 
Queue TopQ.A: 22 
Pick Top ONLY1     
Scheduling SU(22) renamable $d3 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 19
  Executed: 21c
  Critical: 19c, 19 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 23 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $d0 = FMULDrr renamable $d0, renamable $d2, debug-location !177; is.c:292:14
  Ready @23c
  TopQ.A TopLatency SU(18) 20c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 20
  Executed: 24c
  Critical: 20c, 20 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 19 
  TopQ.A RemainingLatency 0 + 24c > CritPath 58
  Cand SU(23) ORDER                              
  Cand SU(19) TOP-PATH                  37 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) renamable $w17 = FCVTZSUWDr renamable $d0, debug-location !179; is.c:293:9
  Ready @24c
  TopQ.A TopLatency SU(19) 21c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 21
  Executed: 25c
  Critical: 21c, 21 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 21 20 
  TopQ.A RemainingLatency 0 + 25c > CritPath 58
  Cand SU(23) ORDER                              
  Cand SU(21) TOP-PATH                  36 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) renamable $d2 = SCVTFUWDri renamable $w17, debug-location !181; is.c:294:10
  Ready @25c
  TopQ.A TopLatency SU(21) 22c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 22
  Executed: 26c
  Critical: 22c, 22 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 20 26 24 
  TopQ.A RemainingLatency 0 + 26c > CritPath 58
  Cand SU(23) ORDER                              
  Cand SU(20) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(20) STRWui renamable $w17, $sp, 2, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 23
  Executed: 27c
  Critical: 23c, 23 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 24 26 
  TopQ.A RemainingLatency 0 + 27c > CritPath 58
  Cand SU(23) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(23) STURDi renamable $d0, $fp, -32, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
  Ready @27c
  TopQ.A BotLatency SU(23) 35c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 24
  Executed: 28c
  Critical: 24c, 24 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 26 24 
  TopQ.A RemainingLatency 0 + 28c > CritPath 58
  Cand SU(26) ORDER                              
  Cand SU(24) TOP-PATH                  35 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) STPDi renamable $d2, renamable $d1, $sp, 4, debug-location !173 :: (store 8 into %ir.A2), (store 8 into %ir.X1); is.c:286:8
  Ready @28c
  TopQ.A TopLatency SU(24) 23c
  TopQ.A BotLatency SU(24) 35c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 25
  Executed: 29c
  Critical: 25c, 25 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 26 27 25 
  TopQ.A RemainingLatency 0 + 29c > CritPath 58
  Cand SU(26) ORDER                              
  Cand SU(25) TOP-PATH                  34 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) renamable $d0 = LDRDui renamable $x18, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
  Ready @29c
  TopQ.A TopLatency SU(25) 24c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 26
  Executed: 30c
  Critical: 26c, 26 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 26 27 
  TopQ.A RemainingLatency 0 + 30c > CritPath 58
  Cand SU(26) ORDER                              
Pick Top ORDER     
Scheduling SU(26) renamable $d3 = FMULDrr renamable $d3, renamable $d2, debug-location !187; is.c:295:19
  Ready @30c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 27
  Executed: 31c
  Critical: 27c, 27 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 29 
Queue TopQ.A: 27 
Pick Top ONLY1     
Scheduling SU(27) renamable $d1 = FMULDrr renamable $d1, renamable $d2, debug-location !195; is.c:296:23
  Ready @31c
  TopQ.A BotLatency SU(27) 33c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 28
  Executed: 32c
  Critical: 28c, 28 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 29 
Queue TopQ.A: 28 
Pick Top ONLY1     
Scheduling SU(28) renamable $d2, renamable $d4 = LDPDi $sp, 5, debug-location !190 :: (dereferenceable load 8 from %ir.A1), (dereferenceable load 8 from %ir.A2); is.c:296:10
  Ready @32c
  TopQ.A BotLatency SU(28) 33c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 29
  Executed: 33c
  Critical: 29c, 29 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 
Pick Top ONLY1     
Scheduling SU(29) renamable $d0 = FSUBDrr renamable $d0, renamable $d3, debug-location !188; is.c:295:13
  Ready @33c
  TopQ.A TopLatency SU(29) 28c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 30
  Executed: 34c
  Critical: 30c, 30 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 31 
Queue TopQ.A: 30 
Pick Top ONLY1     
Scheduling SU(30) STRDui renamable $d0, $sp, 3, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
  Ready @34c
  TopQ.A TopLatency SU(30) 29c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 31
  Executed: 35c
  Critical: 31c, 31 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 36 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 31 
Pick Top ONLY1     
Scheduling SU(31) renamable $d3 = FMULDrr renamable $d4, renamable $d0, debug-location !192; is.c:296:13
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 32
  Executed: 37c
  Critical: 32c, 32 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 32 
  TopQ.A RemainingLatency 0 + 37c > CritPath 58
  Cand SU(35) ORDER                              
  Cand SU(32) TOP-PATH                  29 cycles 
Pick Top TOP-PATH  
Scheduling SU(32) renamable $d0 = FMULDrr renamable $d2, renamable $d0, debug-location !215; is.c:301:23
  Ready @37c
  TopQ.A BotLatency SU(32) 29c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 33
  Executed: 38c
  Critical: 33c, 33 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 33 
  TopQ.A RemainingLatency 0 + 38c > CritPath 58
  Cand SU(35) ORDER                              
  Cand SU(33) TOP-PATH                  29 cycles 
Pick Top TOP-PATH  
Scheduling SU(33) renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
  Ready @38c
  TopQ.A BotLatency SU(33) 29c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 34
  Executed: 39c
  Critical: 34c, 34 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 34 
  TopQ.A RemainingLatency 0 + 39c > CritPath 58
  Cand SU(35) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(35) renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !196; is.c:296:18
  Ready @39c
  TopQ.A TopLatency SU(35) 30c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 35
  Executed: 40c
  Critical: 35c, 35 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 37 
Queue TopQ.A: 34 36 
  TopQ.A RemainingLatency 0 + 40c > CritPath 58
  Cand SU(34) ORDER                              
  Cand SU(36) TOP-PATH                  26 cycles 
Pick Top TOP-PATH  
Scheduling SU(36) renamable $d3 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
  Ready @40c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 36
  Executed: 41c
  Critical: 36c, 36 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 37 
Queue TopQ.A: 34 
Pick Top ONLY1     
Scheduling SU(34) renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !218; is.c:302:9
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 37
  Executed: 42c
  Critical: 37c, 37 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 
Pick Top ONLY1     
Scheduling SU(37) renamable $d2 = FMULDrr renamable $d2, renamable $d1, debug-location !200; is.c:298:13
  Ready @42c
  TopQ.A TopLatency SU(37) 33c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 38
  Executed: 43c
  Critical: 38c, 38 MOps
  ExpectedLatency: 33c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 
Pick Top ONLY1     
Scheduling SU(38) renamable $w17 = FCVTZSUWDr renamable $d2, debug-location !198; is.c:298:9
  Ready @43c
  TopQ.A TopLatency SU(38) 34c
  *** Max MOps 1 at cycle 43
Cycle: 44 TopQ.A
TopQ.A @44c
  Retired: 39
  Executed: 44c
  Critical: 39c, 39 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 50 39 
  TopQ.A RemainingLatency 0 + 44c > CritPath 58
  Cand SU(50) ORDER                              
  Cand SU(39) TOP-PATH                  23 cycles 
Pick Top TOP-PATH  
Scheduling SU(39) renamable $d2 = SCVTFUWDri renamable $w17, debug-location !202; is.c:299:10
  Ready @44c
  TopQ.A TopLatency SU(39) 35c
  *** Max MOps 1 at cycle 44
Cycle: 45 TopQ.A
TopQ.A @45c
  Retired: 40
  Executed: 45c
  Critical: 40c, 40 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 50 40 
  TopQ.A RemainingLatency 0 + 45c > CritPath 58
  Cand SU(50) ORDER                              
  Cand SU(40) TOP-PATH                  22 cycles 
Pick Top TOP-PATH  
Scheduling SU(40) STPDi renamable $d2, renamable $d1, $fp, -5, debug-location !203 :: (store 8 into %ir.T2), (store 8 into %ir.T1); is.c:299:8
  Ready @45c
  TopQ.A TopLatency SU(40) 36c
  *** Max MOps 1 at cycle 45
Cycle: 46 TopQ.A
TopQ.A @46c
  Retired: 41
  Executed: 46c
  Critical: 41c, 41 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 50 41 
  TopQ.A RemainingLatency 0 + 46c > CritPath 58
  Cand SU(50) ORDER                              
  Cand SU(41) TOP-PATH                  22 cycles 
Pick Top TOP-PATH  
Scheduling SU(41) renamable $d2 = FMULDrr renamable $d3, renamable $d2, debug-location !207; is.c:300:18
  Ready @46c
  TopQ.A BotLatency SU(41) 22c
  *** Max MOps 1 at cycle 46
Cycle: 47 TopQ.A
TopQ.A @47c
  Retired: 42
  Executed: 47c
  Critical: 42c, 42 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 50 44 42 
  TopQ.A RemainingLatency 0 + 47c > CritPath 58
  Cand SU(50) ORDER                              
  Cand SU(44) TOP-PATH                  19 cycles 
  Cand SU(42) TOP-PATH                  22 cycles 
Pick Top TOP-PATH  
Scheduling SU(42) renamable $d3 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
  Ready @47c
  TopQ.A BotLatency SU(42) 22c
  *** Max MOps 1 at cycle 47
Cycle: 48 TopQ.A
TopQ.A @48c
  Retired: 43
  Executed: 48c
  Critical: 43c, 43 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 50 44 43 
  TopQ.A RemainingLatency 0 + 48c > CritPath 58
  Cand SU(50) ORDER                              
  Cand SU(44) TOP-PATH                  19 cycles 
Pick Top TOP-PATH  
Scheduling SU(44) renamable $d1 = FSUBDrr renamable $d1, renamable $d2, debug-location !208; is.c:300:12
  Ready @48c
  TopQ.A TopLatency SU(44) 37c
  *** Max MOps 1 at cycle 48
Cycle: 49 TopQ.A
TopQ.A @49c
  Retired: 44
  Executed: 49c
  Critical: 44c, 44 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 50 43 47 
  TopQ.A RemainingLatency 0 + 49c > CritPath 58
  Cand SU(50) ORDER                              
  Cand SU(43) TOP-PATH                  16 cycles 
  Cand SU(47) TOP-PATH                  18 cycles 
Pick Top TOP-PATH  
Scheduling SU(47) STRDui renamable $d1, $sp, 2, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
  Ready @49c
  TopQ.A TopLatency SU(47) 38c
  *** Max MOps 1 at cycle 49
Cycle: 50 TopQ.A
TopQ.A @50c
  Retired: 45
  Executed: 50c
  Critical: 45c, 45 MOps
  ExpectedLatency: 38c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 48 
Queue TopQ.A: 50 43 
  TopQ.A RemainingLatency 0 + 50c > CritPath 58
  Cand SU(50) ORDER                              
  Cand SU(43) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(43) renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !225; is.c:304:15
  Ready @50c
  *** Max MOps 1 at cycle 50
Cycle: 51 TopQ.A
TopQ.A @51c
  Retired: 46
  Executed: 51c
  Critical: 46c, 46 MOps
  ExpectedLatency: 38c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 50 45 48 
  TopQ.A RemainingLatency 0 + 51c > CritPath 58
  Cand SU(50) ORDER                              
  Cand SU(45) TOP-PATH                  15 cycles 
  Cand SU(48) TOP-PATH                  18 cycles 
Pick Top TOP-PATH  
Scheduling SU(48) renamable $d1 = FMULDrr renamable $d3, renamable $d1, debug-location !212; is.c:301:14
  Ready @51c
  TopQ.A TopLatency SU(48) 40c
  *** Max MOps 1 at cycle 51
Cycle: 52 TopQ.A
TopQ.A @52c
  Retired: 47
  Executed: 52c
  Critical: 47c, 47 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 50 45 51 49 
  TopQ.A RemainingLatency 0 + 52c > CritPath 58
  Cand SU(50) ORDER                              
  Cand SU(45) TOP-PATH                  15 cycles 
  Cand SU(49) TOP-PATH                  18 cycles 
Pick Top TOP-PATH  
Scheduling SU(49) renamable $d3 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
  Ready @52c
  TopQ.A BotLatency SU(49) 18c
  *** Max MOps 1 at cycle 52
Cycle: 53 TopQ.A
TopQ.A @53c
  Retired: 48
  Executed: 53c
  Critical: 48c, 48 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 50 45 51 
  TopQ.A RemainingLatency 0 + 53c > CritPath 58
  Cand SU(50) ORDER                              
  Cand SU(45) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(45) renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
  Ready @53c
  *** Max MOps 1 at cycle 53
Cycle: 54 TopQ.A
TopQ.A @54c
  Retired: 49
  Executed: 54c
  Critical: 49c, 49 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 50 51 46 
  TopQ.A RemainingLatency 0 + 54c > CritPath 58
  Cand SU(50) ORDER                              
  Cand SU(51) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(51) renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !216; is.c:301:18
  Ready @54c
  TopQ.A TopLatency SU(51) 41c
  *** Max MOps 1 at cycle 54
Cycle: 55 TopQ.A
TopQ.A @55c
  Retired: 50
  Executed: 55c
  Critical: 50c, 50 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 53 
Queue TopQ.A: 50 46 52 
  TopQ.A RemainingLatency 0 + 55c > CritPath 58
  Cand SU(50) ORDER                              
  Cand SU(46) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(46) renamable $x16 = LDURXi $fp, -16, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
  Ready @55c
  *** Max MOps 1 at cycle 55
Cycle: 56 TopQ.A
TopQ.A @56c
  Retired: 51
  Executed: 56c
  Critical: 51c, 51 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 50 52 53 
  TopQ.A RemainingLatency 0 + 56c > CritPath 58
  Cand SU(50) ORDER                              
  Cand SU(53) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(53) renamable $d1 = FMULDrr renamable $d3, renamable $d0, debug-location !220; is.c:302:13
  Ready @56c
  TopQ.A TopLatency SU(53) 44c
  *** Max MOps 1 at cycle 56
Cycle: 57 TopQ.A
TopQ.A @57c
  Retired: 52
  Executed: 57c
  Critical: 52c, 52 MOps
  ExpectedLatency: 44c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 50 52 
  TopQ.A RemainingLatency 0 + 57c > CritPath 58
  Cand SU(50) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(50) STRWui renamable $w17, $sp, 2, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
  Ready @57c
  *** Max MOps 1 at cycle 57
Cycle: 58 TopQ.A
TopQ.A @58c
  Retired: 53
  Executed: 58c
  Critical: 53c, 53 MOps
  ExpectedLatency: 44c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 52 54 
  TopQ.A RemainingLatency 0 + 58c > CritPath 58
  Cand SU(52) ORDER                              
  Cand SU(54) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(54) renamable $w17 = FCVTZSUWDr renamable $d1, debug-location !218; is.c:302:9
  Ready @58c
  TopQ.A TopLatency SU(54) 45c
  TopQ.A BotLatency SU(54) 13c
  *** Max MOps 1 at cycle 58
Cycle: 59 TopQ.A
TopQ.A @59c
  Retired: 54
  Executed: 59c
  Critical: 54c, 54 MOps
  ExpectedLatency: 45c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 52 55 56 
  TopQ.A RemainingLatency 0 + 59c > CritPath 58
  Cand SU(52) ORDER                              
  Cand SU(56) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(56) renamable $d1 = SCVTFUWDri renamable $w17, debug-location !222; is.c:303:10
  Ready @59c
  TopQ.A TopLatency SU(56) 46c
  *** Max MOps 1 at cycle 59
Cycle: 60 TopQ.A
TopQ.A @60c
  Retired: 55
  Executed: 60c
  Critical: 55c, 55 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 52 55 57 
  TopQ.A RemainingLatency 0 + 60c > CritPath 58
  Cand SU(52) ORDER                              
  Cand SU(57) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(57) STRDui renamable $d1, $sp, 7, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
  Ready @60c
  TopQ.A TopLatency SU(57) 47c
  *** Max MOps 1 at cycle 60
Cycle: 61 TopQ.A
TopQ.A @61c
  Retired: 56
  Executed: 61c
  Critical: 56c, 56 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 52 55 58 
  TopQ.A RemainingLatency 0 + 61c > CritPath 58
  Cand SU(52) ORDER                              
  Cand SU(58) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(58) renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !227; is.c:304:19
  Ready @61c
  TopQ.A BotLatency SU(58) 11c
  *** Max MOps 1 at cycle 61
Cycle: 62 TopQ.A
TopQ.A @62c
  Retired: 57
  Executed: 62c
  Critical: 57c, 57 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 52 55 
  TopQ.A RemainingLatency 0 + 62c > CritPath 58
  Cand SU(52) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(52) STURDi renamable $d0, $fp, -48, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
  Ready @62c
  *** Max MOps 1 at cycle 62
Cycle: 63 TopQ.A
TopQ.A @63c
  Retired: 58
  Executed: 63c
  Critical: 58c, 58 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 59 
  TopQ.A RemainingLatency 0 + 63c > CritPath 58
  Cand SU(55) ORDER                              
  Cand SU(59) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(59) renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !228; is.c:304:13
  Ready @63c
  TopQ.A TopLatency SU(59) 48c
  TopQ.A BotLatency SU(59) 10c
  *** Max MOps 1 at cycle 63
Cycle: 64 TopQ.A
TopQ.A @64c
  Retired: 59
  Executed: 64c
  Critical: 59c, 59 MOps
  ExpectedLatency: 48c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 
Pick Top ONLY1     
Scheduling SU(55) STRWui renamable $w17, $sp, 2, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
  Ready @64c
  *** Max MOps 1 at cycle 64
Cycle: 65 TopQ.A
TopQ.A @65c
  Retired: 60
  Executed: 65c
  Critical: 60c, 60 MOps
  ExpectedLatency: 48c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 60 
Pick Top ONLY1     
Scheduling SU(60) STRDui renamable $d0, renamable $x16, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
  Ready @65c
  TopQ.A TopLatency SU(60) 49c
  TopQ.A BotLatency SU(60) 9c
  *** Max MOps 1 at cycle 65
Cycle: 66 TopQ.A
TopQ.A @66c
  Retired: 61
  Executed: 66c
  Critical: 61c, 61 MOps
  ExpectedLatency: 49c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 62 61 
  TopQ.A RemainingLatency 0 + 66c > CritPath 58
  Cand SU(62) ORDER                              
  Cand SU(61) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(61) renamable $x16 = LDURXi $fp, -16, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
  Ready @66c
  TopQ.A TopLatency SU(61) 50c
  *** Max MOps 1 at cycle 66
Cycle: 67 TopQ.A
TopQ.A @67c
  Retired: 62
  Executed: 67c
  Critical: 62c, 62 MOps
  ExpectedLatency: 50c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 63 
Queue TopQ.A: 62 65 
  TopQ.A RemainingLatency 0 + 67c > CritPath 58
  Cand SU(62) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(62) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
  Ready @67c
  *** Max MOps 1 at cycle 67
Cycle: 68 TopQ.A
TopQ.A @68c
  Retired: 63
  Executed: 68c
  Critical: 63c, 63 MOps
  ExpectedLatency: 50c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 63 
Queue TopQ.A: 65 
Pick Top ONLY1     
Scheduling SU(65) $fp, $lr = frame-destroy LDPXi $sp, 14, debug-location !235 :: (load 8 from %stack.15), (load 8 from %stack.14); is.c:305:5
  Ready @68c
  *** Max MOps 1 at cycle 68
Cycle: 69 TopQ.A
TopQ.A @69c
  Retired: 64
  Executed: 69c
  Critical: 64c, 64 MOps
  ExpectedLatency: 50c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 70 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 63 
Pick Top ONLY1     
Scheduling SU(63) renamable $d1 = LDRDui renamable $x16, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
  Ready @70c
  TopQ.A TopLatency SU(63) 54c
  *** Max MOps 1 at cycle 70
Cycle: 71 TopQ.A
TopQ.A @71c
  Retired: 65
  Executed: 71c
  Critical: 65c, 65 MOps
  ExpectedLatency: 54c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 74 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 64 
Pick Top ONLY1     
Scheduling SU(64) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !234; is.c:305:17
  Ready @74c
  TopQ.A TopLatency SU(64) 58c
  *** Max MOps 1 at cycle 74
Cycle: 75 TopQ.A
TopQ.A @75c
  Retired: 66
  Executed: 75c
  Critical: 66c, 66 MOps
  ExpectedLatency: 58c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x17 = LDURXi $fp, -24, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !158; is.c:283:10
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
SU(4):   renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !169; is.c:286:15
SU(3):   renamable $d1 = LDRDui renamable $x17, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
SU(5):   renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
SU(6):   renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !161; is.c:283:14
SU(8):   renamable $w18 = FCVTZSUWDr renamable $d1, debug-location !163; is.c:284:9
SU(7):   STURDi renamable $d1, $fp, -32, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
SU(10):   renamable $d1 = SCVTFUWDri renamable $w18, debug-location !165; is.c:285:10
SU(9):   STRWui renamable $w18, $sp, 2, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
SU(11):   STRDui renamable $d1, $sp, 6, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
SU(12):   renamable $d3 = LDRDui renamable $x17, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
SU(13):   renamable $x17 = LDURXi $fp, -16, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
SU(15):   renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !171; is.c:286:19
SU(14):   renamable $x18 = LDURXi $fp, -16, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
SU(16):   renamable $d1 = FSUBDrr renamable $d3, renamable $d1, debug-location !172; is.c:286:13
SU(17):   renamable $d2 = LDRDui renamable $x17, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
SU(22):   renamable $d3 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
SU(18):   renamable $d0 = FMULDrr renamable $d0, renamable $d2, debug-location !177; is.c:292:14
SU(19):   renamable $w17 = FCVTZSUWDr renamable $d0, debug-location !179; is.c:293:9
SU(21):   renamable $d2 = SCVTFUWDri renamable $w17, debug-location !181; is.c:294:10
SU(20):   STRWui renamable $w17, $sp, 2, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
SU(23):   STURDi renamable $d0, $fp, -32, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
SU(24):   STPDi renamable $d2, renamable $d1, $sp, 4, debug-location !173 :: (store 8 into %ir.A2), (store 8 into %ir.X1); is.c:286:8
SU(25):   renamable $d0 = LDRDui renamable $x18, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
SU(26):   renamable $d3 = FMULDrr renamable $d3, renamable $d2, debug-location !187; is.c:295:19
SU(27):   renamable $d1 = FMULDrr renamable $d1, renamable $d2, debug-location !195; is.c:296:23
SU(28):   renamable $d2, renamable $d4 = LDPDi $sp, 5, debug-location !190 :: (dereferenceable load 8 from %ir.A1), (dereferenceable load 8 from %ir.A2); is.c:296:10
SU(29):   renamable $d0 = FSUBDrr renamable $d0, renamable $d3, debug-location !188; is.c:295:13
SU(30):   STRDui renamable $d0, $sp, 3, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
SU(31):   renamable $d3 = FMULDrr renamable $d4, renamable $d0, debug-location !192; is.c:296:13
SU(32):   renamable $d0 = FMULDrr renamable $d2, renamable $d0, debug-location !215; is.c:301:23
SU(33):   renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
SU(35):   renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !196; is.c:296:18
SU(36):   renamable $d3 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
SU(34):   renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !218; is.c:302:9
SU(37):   renamable $d2 = FMULDrr renamable $d2, renamable $d1, debug-location !200; is.c:298:13
SU(38):   renamable $w17 = FCVTZSUWDr renamable $d2, debug-location !198; is.c:298:9
SU(39):   renamable $d2 = SCVTFUWDri renamable $w17, debug-location !202; is.c:299:10
SU(40):   STPDi renamable $d2, renamable $d1, $fp, -5, debug-location !203 :: (store 8 into %ir.T2), (store 8 into %ir.T1); is.c:299:8
SU(41):   renamable $d2 = FMULDrr renamable $d3, renamable $d2, debug-location !207; is.c:300:18
SU(42):   renamable $d3 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
SU(44):   renamable $d1 = FSUBDrr renamable $d1, renamable $d2, debug-location !208; is.c:300:12
SU(47):   STRDui renamable $d1, $sp, 2, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
SU(43):   renamable $x16 = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !225; is.c:304:15
SU(48):   renamable $d1 = FMULDrr renamable $d3, renamable $d1, debug-location !212; is.c:301:14
SU(49):   renamable $d3 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
SU(45):   renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
SU(51):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !216; is.c:301:18
SU(46):   renamable $x16 = LDURXi $fp, -16, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
SU(53):   renamable $d1 = FMULDrr renamable $d3, renamable $d0, debug-location !220; is.c:302:13
SU(50):   STRWui renamable $w17, $sp, 2, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
SU(54):   renamable $w17 = FCVTZSUWDr renamable $d1, debug-location !218; is.c:302:9
SU(56):   renamable $d1 = SCVTFUWDri renamable $w17, debug-location !222; is.c:303:10
SU(57):   STRDui renamable $d1, $sp, 7, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
SU(58):   renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !227; is.c:304:19
SU(52):   STURDi renamable $d0, $fp, -48, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
SU(59):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !228; is.c:304:13
SU(55):   STRWui renamable $w17, $sp, 2, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
SU(60):   STRDui renamable $d0, renamable $x16, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
SU(61):   renamable $x16 = LDURXi $fp, -16, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
SU(62):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
SU(65):   $fp, $lr = frame-destroy LDPXi $sp, 14, debug-location !235 :: (load 8 from %stack.15), (load 8 from %stack.14); is.c:305:5
SU(63):   renamable $d1 = LDRDui renamable $x16, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
SU(64):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !234; is.c:305:17

Fixup kills for %bb.8
Before MISched:
# Machine code for function create_seq: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
Function Live Ins: $d0 in %0, $d1 in %1

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $d0, $d1
  %1:fpr64 = COPY $d1
  %0:fpr64 = COPY $d0
  STRDui %0:fpr64, %stack.0.seed.addr, 0 :: (store 8 into %ir.seed.addr)
  STRDui %1:fpr64, %stack.1.a.addr, 0 :: (store 8 into %ir.a.addr)
  %2:gpr32 = MOVi32imm 524288
  STRWui %2:gpr32, %stack.4.k, 0, debug-location !249 :: (store 4 into %ir.k); is.c:317:7
  STRWui $wzr, %stack.3.i, 0, debug-location !250 :: (store 4 into %ir.i); is.c:319:12
  %5:gpr32 = MOVi32imm 33554431
  %28:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %4:gpr32 = LDRWui %stack.3.i, 0, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
  dead $wzr = SUBSWrr %4:gpr32, %5:gpr32, implicit-def $nzcv, debug-location !256; is.c:319:5
  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !256; is.c:319:5
  B %bb.2, debug-location !256; is.c:319:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !257; is.c:320:13
  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !257; is.c:320:13
  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !257; is.c:320:13
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !257; is.c:320:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !257; is.c:320:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !259; is.c:320:11
  PCN_STACKMAP 0, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !259 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:320:11
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !259; is.c:320:11
  %9:fpr64 = COPY $d0, debug-location !257; is.c:320:13
  STRDui %9:fpr64, %stack.2.x, 0, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !260; is.c:321:14
  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !260; is.c:321:14
  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !260; is.c:321:14
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !260; is.c:321:14
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !260; is.c:321:14
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !261; is.c:321:11
  PCN_STACKMAP 1, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !261 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:321:11
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !261; is.c:321:11
  %10:fpr64 = COPY $d0, debug-location !260; is.c:321:14
  %11:fpr64 = LDRDui %stack.2.x, 0, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  %12:fpr64 = FADDDrr %11:fpr64, %10:fpr64, debug-location !261; is.c:321:11
  STRDui %12:fpr64, %stack.2.x, 0, debug-location !261 :: (store 8 into %ir.x); is.c:321:11
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !262; is.c:322:14
  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !262; is.c:322:14
  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !262; is.c:322:14
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !262; is.c:322:14
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !262; is.c:322:14
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !263; is.c:322:11
  PCN_STACKMAP 2, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !263 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:322:11
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !263; is.c:322:11
  %13:fpr64 = COPY $d0, debug-location !262; is.c:322:14
  %14:fpr64 = LDRDui %stack.2.x, 0, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  %15:fpr64 = FADDDrr %14:fpr64, %13:fpr64, debug-location !263; is.c:322:11
  STRDui %15:fpr64, %stack.2.x, 0, debug-location !263 :: (store 8 into %ir.x); is.c:322:11
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !264; is.c:323:14
  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !264; is.c:323:14
  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !264; is.c:323:14
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !264; is.c:323:14
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !264; is.c:323:14
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !265; is.c:323:11
  PCN_STACKMAP 3, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !265 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:323:11
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !265; is.c:323:11
  %16:fpr64 = COPY $d0, debug-location !264; is.c:323:14
  %17:fpr64 = LDRDui %stack.2.x, 0, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  %18:fpr64 = FADDDrr %17:fpr64, %16:fpr64, debug-location !265; is.c:323:11
  STRDui %18:fpr64, %stack.2.x, 0, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
  undef %20.ssub:fpr64 = LDRSui %stack.4.k, 0, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  %22:fpr128 = SSHLLv2i32_shift %20:fpr64, 0, debug-location !266; is.c:325:24
  %24:fpr64 = SCVTFv1i64 %22.dsub:fpr128, debug-location !266; is.c:325:24
  %25:fpr64 = FMULDrr %24:fpr64, %18:fpr64, debug-location !268; is.c:325:26
  %26:gpr32 = FCVTZSUWDr %25:fpr64, debug-location !266; is.c:325:24
  %27:gpr64 = LDRSWui %stack.3.i, 0, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  STRWroX %26:gpr32, %28:gpr64common, %27:gpr64, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
  %29:gpr32common = LDRWui %stack.3.i, 0, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
  %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !272; is.c:319:32
  STRWui %30:gpr32common, %stack.3.i, 0, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
  B %bb.1, debug-location !273; is.c:319:5

bb.3.for.end:
; predecessors: %bb.1

  RET_ReallyLR debug-location !276; is.c:327:1

# End machine code for function create_seq.

********** MI Scheduling **********
create_seq:%bb.0 entry
  From: %1:fpr64 = COPY $d1
    To: End RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: B0 B1 
Live Out: %28 %5 
Live Thru: 
  LiveReg: %28
  LiveReg: %5
Top Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Bottom Pressure:
GPR32=2
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:fpr64 = COPY $d1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%1
  Pressure Diff      : ZPR_3b 1
  Single Issue       : false;
SU(1):   %0:fpr64 = COPY $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%0
  Pressure Diff      : ZPR_3b 1
  Single Issue       : false;
SU(2):   STRDui %0:fpr64, %stack.0.seed.addr, 0 :: (store 8 into %ir.seed.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(3):   STRDui %1:fpr64, %stack.1.a.addr, 0 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(4):   %2:gpr32 = MOVi32imm 524288
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%2
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRWui %2:gpr32, %stack.4.k, 0, debug-location !249 :: (store 4 into %ir.k); is.c:317:7
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%2
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   STRWui $wzr, %stack.3.i, 0, debug-location !250 :: (store 4 into %ir.i); is.c:319:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %5:gpr32 = MOVi32imm 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %28:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 6 7 8 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %1:fpr64 = COPY $d1
Top Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 3 2 
Queue TopQ.P: 
Queue TopQ.A: 8 1 4 6 7 3 
Picking from Bot:
  Cand SU(8) REG-MAX                            
Picking from Top:
  Cand SU(8) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %0:fpr64 = COPY $d0
Top Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 3 2 
Queue TopQ.P: 
Queue TopQ.A: 8 3 4 6 7 2 
Picking from Bot:
  Cand SU(8) REG-MAX                            
Picking from Top:
  Cand SU(8) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(8) %28:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
Bottom Pressure:
GPR32=1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 6 5 3 
Queue TopQ.P: 
Queue TopQ.A: 2 3 4 6 7 
BotQ.A RemLatency SU(5) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(5) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRWui %2:gpr32, %stack.4.k, 0, debug-location !249 :: (store 4 into %ir.k); is.c:317:7
Bottom Pressure:
GPR32=2
  LiveReg: %2
  UpdateRegP: SU(5) STRWui %2:gpr32, %stack.4.k, 0, debug-location !249 :: (store 4 into %ir.k); is.c:317:7
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 6 3 4 
Queue TopQ.P: 
Queue TopQ.A: 2 3 4 6 7 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %5:gpr32 = MOVi32imm 33554431
Bottom Pressure:
GPR32=1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 3 
Queue TopQ.P: 
Queue TopQ.A: 2 3 4 6 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) STRWui $wzr, %stack.3.i, 0, debug-location !250 :: (store 4 into %ir.i); is.c:319:12
Bottom Pressure:
GPR32=1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 
Queue TopQ.P: 
Queue TopQ.A: 2 3 4 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %2:gpr32 = MOVi32imm 524288
Bottom Pressure:

  Ready @4c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRDui %1:fpr64, %stack.1.a.addr, 0 :: (store 8 into %ir.a.addr)
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %1
  UpdateRegP: SU(3) STRDui %1:fpr64, %stack.1.a.addr, 0 :: (store 8 into %ir.a.addr)
              to 
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDui %0:fpr64, %stack.0.seed.addr, 0 :: (store 8 into %ir.seed.addr)
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %0
  UpdateRegP: SU(2) STRDui %0:fpr64, %stack.0.seed.addr, 0 :: (store 8 into %ir.seed.addr)
              to 
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:fpr64 = COPY $d1
SU(1):   %0:fpr64 = COPY $d0
SU(2):   STRDui %0:fpr64, %stack.0.seed.addr, 0 :: (store 8 into %ir.seed.addr)
SU(3):   STRDui %1:fpr64, %stack.1.a.addr, 0 :: (store 8 into %ir.a.addr)
SU(4):   %2:gpr32 = MOVi32imm 524288
SU(6):   STRWui $wzr, %stack.3.i, 0, debug-location !250 :: (store 4 into %ir.i); is.c:319:12
SU(7):   %5:gpr32 = MOVi32imm 33554431
SU(5):   STRWui %2:gpr32, %stack.4.k, 0, debug-location !249 :: (store 4 into %ir.k); is.c:317:7
SU(8):   %28:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

********** MI Scheduling **********
create_seq:%bb.1 for.cond
  From: %4:gpr32 = LDRWui %stack.3.i, 0, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
    To: Bcc 12, %bb.3, implicit killed $nzcv, debug-location !256; is.c:319:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %4:gpr32 = LDRWui %stack.3.i, 0, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%4
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %4:gpr32, %5:gpr32, implicit-def $nzcv, debug-location !256; is.c:319:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.3, implicit killed $nzcv, debug-location !256; is.c:319:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %4:gpr32, %5:gpr32, implicit-def $nzcv, debug-location !256; is.c:319:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %4:gpr32 = LDRWui %stack.3.i, 0, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %4:gpr32 = LDRWui %stack.3.i, 0, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
SU(1):   dead $wzr = SUBSWrr %4:gpr32, %5:gpr32, implicit-def $nzcv, debug-location !256; is.c:319:5

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %16:fpr64 = COPY $d0, debug-location !264; is.c:323:14
    To: B %bb.1, debug-location !273; is.c:319:5
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: %28 B0 
Live Out: %28 
Live Thru: GPR32=1
  LiveReg: %28
  UpdateRegP: SU(10) STRWroX %26:gpr32, %28:gpr64common, %27:gpr64, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
              to GPR32 2
Top Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
GPR32=1
Excess PSets: 
Cluster ld/st SU(9) - SU(11)
  Copy Succ SU(10)
  Copy Succ SU(13)
SU(0):   %16:fpr64 = COPY $d0, debug-location !264; is.c:323:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Data Latency=0 Reg=%16
  Pressure Diff      : ZPR_3b 1
  Single Issue       : false;
SU(1):   %17:fpr64 = LDRDui %stack.2.x, 0, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%17
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(2):   %18:fpr64 = FADDDrr %17:fpr64, %16:fpr64, debug-location !265; is.c:323:11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%17
    SU(0): Data Latency=0 Reg=%16
  Successors:
    SU(7): Data Latency=1 Reg=%18
    SU(3): Data Latency=1 Reg=%18
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(3):   STRDui %18:fpr64, %stack.2.x, 0, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%18
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(4):   undef %20.ssub:fpr64 = LDRSui %stack.4.k, 0, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Data Latency=4 Reg=%20
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(5):   %22:fpr128 = SSHLLv2i32_shift %20:fpr64, 0, debug-location !266; is.c:325:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(4): Data Latency=4 Reg=%20
  Successors:
    SU(6): Data Latency=1 Reg=%22
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %24:fpr64 = SCVTFv1i64 %22.dsub:fpr128, debug-location !266; is.c:325:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%22
  Successors:
    SU(7): Data Latency=1 Reg=%24
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %25:fpr64 = FMULDrr %24:fpr64, %18:fpr64, debug-location !268; is.c:325:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(6): Data Latency=1 Reg=%24
    SU(2): Data Latency=1 Reg=%18
  Successors:
    SU(8): Data Latency=1 Reg=%25
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(8):   %26:gpr32 = FCVTZSUWDr %25:fpr64, debug-location !266; is.c:325:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%25
  Successors:
    SU(10): Data Latency=1 Reg=%26
  Pressure Diff      : FPR8 1    GPR32 -1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(9):   %27:gpr64 = LDRSWui %stack.3.i, 0, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=%27
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(10):   STRWroX %26:gpr32, %28:gpr64common, %27:gpr64, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%26
    SU(9): Data Latency=4 Reg=%27
    SU(11): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(11):   %29:gpr32common = LDRWui %stack.3.i, 0, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(9): Ord  Latency=0 Cluster
  Successors:
    SU(12): Data Latency=4 Reg=%29
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !272; is.c:319:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(11): Data Latency=4 Reg=%29
  Successors:
    SU(13): Data Latency=1 Reg=%30
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   STRWui %30:gpr32common, %stack.3.i, 0, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%30
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !273; is.c:319:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 10 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 9 11 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %16:fpr64 = COPY $d0, debug-location !264; is.c:323:14
Top Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 10 3 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(11) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot ORDER     
Scheduling SU(13) STRWui %30:gpr32common, %stack.3.i, 0, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
Bottom Pressure:
GPR32=2
  LiveReg: %30
  UpdateRegP: SU(13) STRWui %30:gpr32common, %stack.3.i, 0, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 10 12 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
BotQ.A RemLatency SU(10) 8c
  BotQ.A RemainingLatency 8 + 1c > CritPath 8
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(3) STRDui %18:fpr64, %stack.2.x, 0, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %18
  UpdateRegP: SU(3) STRDui %18:fpr64, %stack.2.x, 0, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
              to 
  UpdateRegP: SU(7) %25:fpr64 = FMULDrr %24:fpr64, %18:fpr64, debug-location !268; is.c:325:26
              to 
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 10 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
BotQ.A RemLatency SU(10) 8c
  BotQ.A RemainingLatency 8 + 2c > CritPath 8
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(12) %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !272; is.c:319:32
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %29
  UpdateRegP: SU(12) %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !272; is.c:319:32
              to GPR32 -1
  Ready @2c
  BotQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) STRWroX %26:gpr32, %28:gpr64common, %27:gpr64, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %26
  UpdateRegP: SU(10) STRWroX %26:gpr32, %28:gpr64common, %27:gpr64, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
              to GPR32 1
  LiveReg: %27
  UpdateRegP: SU(10) STRWroX %26:gpr32, %28:gpr64common, %27:gpr64, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
              to 
  Ready @3c
  BotQ.A TopLatency SU(10) 8c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 11 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %26:gpr32 = FCVTZSUWDr %25:fpr64, debug-location !266; is.c:325:24
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %25
  UpdateRegP: SU(8) %26:gpr32 = FCVTZSUWDr %25:fpr64, debug-location !266; is.c:325:24
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 11 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %25:fpr64 = FMULDrr %24:fpr64, %18:fpr64, debug-location !268; is.c:325:26
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %24
  UpdateRegP: SU(7) %25:fpr64 = FMULDrr %24:fpr64, %18:fpr64, debug-location !268; is.c:325:26
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 6 2 11 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
BotQ.A RemLatency SU(6) 5c
  BotQ.A RemainingLatency 5 + 6c > CritPath 8
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %24:fpr64 = SCVTFv1i64 %22.dsub:fpr128, debug-location !266; is.c:325:24
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %22
  UpdateRegP: SU(6) %24:fpr64 = SCVTFv1i64 %22.dsub:fpr128, debug-location !266; is.c:325:24
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  BotQ.A BotLatency SU(6) 3c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 2 5 9 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 7c > CritPath 8
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(5) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot WEAK      
Scheduling SU(5) %22:fpr128 = SSHLLv2i32_shift %20:fpr64, 0, debug-location !266; is.c:325:24
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %20
  UpdateRegP: SU(5) %22:fpr128 = SSHLLv2i32_shift %20:fpr64, 0, debug-location !266; is.c:325:24
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 11 2 9 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 8c > CritPath 8
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot WEAK      
Scheduling SU(11) %29:gpr32common = LDRWui %stack.3.i, 0, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @8c
  BotQ.A BotLatency SU(11) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 9 2 
Queue TopQ.P: 
Queue TopQ.A: 9 1 4 
  BotQ.A RemainingLatency 0 + 9c > CritPath 8
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(9) %27:gpr64 = LDRSWui %stack.3.i, 0, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %18:fpr64 = FADDDrr %17:fpr64, %16:fpr64, debug-location !265; is.c:323:11
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %17
  UpdateRegP: SU(2) %18:fpr64 = FADDDrr %17:fpr64, %16:fpr64, debug-location !265; is.c:323:11
              to 
  LiveReg: %16
  UpdateRegP: SU(2) %18:fpr64 = FADDDrr %17:fpr64, %16:fpr64, debug-location !265; is.c:323:11
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @10c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) undef %20.ssub:fpr64 = LDRSui %stack.4.k, 0, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @11c
  BotQ.A BotLatency SU(4) 8c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 14 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %17:fpr64 = LDRDui %stack.2.x, 0, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 13
  Executed: 15c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %16:fpr64 = COPY $d0, debug-location !264; is.c:323:14
SU(1):   %17:fpr64 = LDRDui %stack.2.x, 0, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
SU(4):   undef %20.ssub:fpr64 = LDRSui %stack.4.k, 0, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
SU(2):   %18:fpr64 = FADDDrr %17:fpr64, %16:fpr64, debug-location !265; is.c:323:11
SU(9):   %27:gpr64 = LDRSWui %stack.3.i, 0, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
SU(11):   %29:gpr32common = LDRWui %stack.3.i, 0, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
SU(5):   %22:fpr128 = SSHLLv2i32_shift %20:fpr64, 0, debug-location !266; is.c:325:24
SU(6):   %24:fpr64 = SCVTFv1i64 %22.dsub:fpr128, debug-location !266; is.c:325:24
SU(7):   %25:fpr64 = FMULDrr %24:fpr64, %18:fpr64, debug-location !268; is.c:325:26
SU(8):   %26:gpr32 = FCVTZSUWDr %25:fpr64, debug-location !266; is.c:325:24
SU(10):   STRWroX %26:gpr32, %28:gpr64common, %27:gpr64, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
SU(12):   %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !272; is.c:319:32
SU(3):   STRDui %18:fpr64, %stack.2.x, 0, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
SU(13):   STRWui %30:gpr32common, %stack.3.i, 0, debug-location !272 :: (store 4 into %ir.i); is.c:319:32

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !264; is.c:323:14
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !264; is.c:323:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !264; is.c:323:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !264; is.c:323:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !264; is.c:323:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !264; is.c:323:14
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !264; is.c:323:14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !264; is.c:323:14
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !264; is.c:323:14

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %13:fpr64 = COPY $d0, debug-location !262; is.c:322:14
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !264; is.c:323:14
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %13:fpr64 = COPY $d0, debug-location !262; is.c:322:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%13
  Single Issue       : false;
SU(1):   %14:fpr64 = LDRDui %stack.2.x, 0, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%14
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %15:fpr64 = FADDDrr %14:fpr64, %13:fpr64, debug-location !263; is.c:322:11
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%14
    SU(0): Data Latency=0 Reg=%13
  Successors:
    SU(3): Data Latency=1 Reg=%15
  Single Issue       : false;
SU(3):   STRDui %15:fpr64, %stack.2.x, 0, debug-location !263 :: (store 8 into %ir.x); is.c:322:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%15
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !264; is.c:323:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %15:fpr64, %stack.2.x, 0, debug-location !263 :: (store 8 into %ir.x); is.c:322:11
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %15:fpr64 = FADDDrr %14:fpr64, %13:fpr64, debug-location !263; is.c:322:11
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %13:fpr64 = COPY $d0, debug-location !262; is.c:322:14
  Ready @2c
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %14:fpr64 = LDRDui %stack.2.x, 0, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(1):   %14:fpr64 = LDRDui %stack.2.x, 0, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
SU(0):   %13:fpr64 = COPY $d0, debug-location !262; is.c:322:14
SU(2):   %15:fpr64 = FADDDrr %14:fpr64, %13:fpr64, debug-location !263; is.c:322:11
SU(3):   STRDui %15:fpr64, %stack.2.x, 0, debug-location !263 :: (store 8 into %ir.x); is.c:322:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !262; is.c:322:14
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !262; is.c:322:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !262; is.c:322:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !262; is.c:322:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !262; is.c:322:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !262; is.c:322:14
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !262; is.c:322:14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !262; is.c:322:14
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !262; is.c:322:14

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %10:fpr64 = COPY $d0, debug-location !260; is.c:321:14
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !262; is.c:322:14
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %10:fpr64 = COPY $d0, debug-location !260; is.c:321:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%10
  Single Issue       : false;
SU(1):   %11:fpr64 = LDRDui %stack.2.x, 0, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%11
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %12:fpr64 = FADDDrr %11:fpr64, %10:fpr64, debug-location !261; is.c:321:11
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%11
    SU(0): Data Latency=0 Reg=%10
  Successors:
    SU(3): Data Latency=1 Reg=%12
  Single Issue       : false;
SU(3):   STRDui %12:fpr64, %stack.2.x, 0, debug-location !261 :: (store 8 into %ir.x); is.c:321:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%12
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !262; is.c:322:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %12:fpr64, %stack.2.x, 0, debug-location !261 :: (store 8 into %ir.x); is.c:321:11
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %12:fpr64 = FADDDrr %11:fpr64, %10:fpr64, debug-location !261; is.c:321:11
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %10:fpr64 = COPY $d0, debug-location !260; is.c:321:14
  Ready @2c
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %11:fpr64 = LDRDui %stack.2.x, 0, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(1):   %11:fpr64 = LDRDui %stack.2.x, 0, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
SU(0):   %10:fpr64 = COPY $d0, debug-location !260; is.c:321:14
SU(2):   %12:fpr64 = FADDDrr %11:fpr64, %10:fpr64, debug-location !261; is.c:321:11
SU(3):   STRDui %12:fpr64, %stack.2.x, 0, debug-location !261 :: (store 8 into %ir.x); is.c:321:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !260; is.c:321:14
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !260; is.c:321:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !260; is.c:321:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !260; is.c:321:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !260; is.c:321:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !260; is.c:321:14
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !260; is.c:321:14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !260; is.c:321:14
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !260; is.c:321:14

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %9:fpr64 = COPY $d0, debug-location !257; is.c:320:13
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !260; is.c:321:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %9:fpr64 = COPY $d0, debug-location !257; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%9
  Single Issue       : false;
SU(1):   STRDui %9:fpr64, %stack.2.x, 0, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%9
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !260; is.c:321:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %9:fpr64, %stack.2.x, 0, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %9:fpr64 = COPY $d0, debug-location !257; is.c:320:13
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %9:fpr64 = COPY $d0, debug-location !257; is.c:320:13
SU(1):   STRDui %9:fpr64, %stack.2.x, 0, debug-location !259 :: (store 8 into %ir.x); is.c:320:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !257; is.c:320:13
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !257; is.c:320:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !257; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !257; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !257; is.c:320:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !257; is.c:320:13
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !257; is.c:320:13
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !257; is.c:320:13
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !257; is.c:320:13

********** INTERVALS **********
B0 [0B,32r:0)[352r,432r:4)[512r,616r:3)[704r,808r:2)[896r,976r:1)  0@0B-phi 1@896r 2@704r 3@512r 4@352r
B1 [0B,16r:0)  0@0B-phi
%0 [32r,48r:0)  0@32r weight:0.000000e+00
%1 [16r,64r:0)  0@16r weight:0.000000e+00
%2 [80r,152r:0)  0@80r weight:0.000000e+00
%4 [224r,240r:0)  0@224r weight:0.000000e+00
%5 [144r,1264B:0)  0@144r weight:0.000000e+00
%9 [432r,448r:0)  0@432r weight:0.000000e+00
%10 [616r,624r:0)  0@616r weight:0.000000e+00
%11 [608r,624r:0)  0@608r weight:0.000000e+00
%12 [624r,640r:0)  0@624r weight:0.000000e+00
%13 [808r,816r:0)  0@808r weight:0.000000e+00
%14 [800r,816r:0)  0@800r weight:0.000000e+00
%15 [816r,832r:0)  0@816r weight:0.000000e+00
%16 [976r,1048r:0)  0@976r weight:0.000000e+00
%17 [992r,1048r:0)  0@992r weight:0.000000e+00
%18 [1048r,1240r:0)  0@1048r weight:0.000000e+00
%20 [1040r,1192r:0)  0@1040r weight:0.000000e+00
%22 [1192r,1200r:0)  0@1192r weight:0.000000e+00
%24 [1200r,1208r:0)  0@1200r weight:0.000000e+00
%25 [1208r,1216r:0)  0@1208r weight:0.000000e+00
%26 [1216r,1224r:0)  0@1216r weight:0.000000e+00
%27 [1152r,1224r:0)  0@1152r weight:0.000000e+00
%28 [192r,1264B:0)  0@192r weight:0.000000e+00
%29 [1184r,1232r:0)  0@1184r weight:0.000000e+00
%30 [1232r,1248r:0)  0@1232r weight:0.000000e+00
RegMasks: 352r 512r 704r 896r
********** MACHINEINSTRS **********
# Machine code for function create_seq: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
Function Live Ins: $d0 in %0, $d1 in %1

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $d0, $d1
16B	  %1:fpr64 = COPY $d1
32B	  %0:fpr64 = COPY $d0
48B	  STRDui %0:fpr64, %stack.0.seed.addr, 0 :: (store 8 into %ir.seed.addr)
64B	  STRDui %1:fpr64, %stack.1.a.addr, 0 :: (store 8 into %ir.a.addr)
80B	  %2:gpr32 = MOVi32imm 524288
128B	  STRWui $wzr, %stack.3.i, 0, debug-location !250 :: (store 4 into %ir.i); is.c:319:12
144B	  %5:gpr32 = MOVi32imm 33554431
152B	  STRWui %2:gpr32, %stack.4.k, 0, debug-location !249 :: (store 4 into %ir.k); is.c:317:7
192B	  %28:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

208B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

224B	  %4:gpr32 = LDRWui %stack.3.i, 0, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
240B	  dead $wzr = SUBSWrr %4:gpr32, %5:gpr32, implicit-def $nzcv, debug-location !256; is.c:319:5
256B	  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !256; is.c:319:5
272B	  B %bb.2, debug-location !256; is.c:319:5

288B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

304B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !257; is.c:320:13
320B	  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !257; is.c:320:13
336B	  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !257; is.c:320:13
352B	  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !257; is.c:320:13
368B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !257; is.c:320:13
384B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !259; is.c:320:11
400B	  PCN_STACKMAP 0, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !259 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:320:11
416B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !259; is.c:320:11
432B	  %9:fpr64 = COPY $d0, debug-location !257; is.c:320:13
448B	  STRDui %9:fpr64, %stack.2.x, 0, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
464B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !260; is.c:321:14
480B	  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !260; is.c:321:14
496B	  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !260; is.c:321:14
512B	  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !260; is.c:321:14
528B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !260; is.c:321:14
544B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !261; is.c:321:11
560B	  PCN_STACKMAP 1, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !261 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:321:11
576B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !261; is.c:321:11
608B	  %11:fpr64 = LDRDui %stack.2.x, 0, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
616B	  %10:fpr64 = COPY $d0, debug-location !260; is.c:321:14
624B	  %12:fpr64 = FADDDrr %11:fpr64, %10:fpr64, debug-location !261; is.c:321:11
640B	  STRDui %12:fpr64, %stack.2.x, 0, debug-location !261 :: (store 8 into %ir.x); is.c:321:11
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !262; is.c:322:14
672B	  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !262; is.c:322:14
688B	  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !262; is.c:322:14
704B	  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !262; is.c:322:14
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !262; is.c:322:14
736B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !263; is.c:322:11
752B	  PCN_STACKMAP 2, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !263 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:322:11
768B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !263; is.c:322:11
800B	  %14:fpr64 = LDRDui %stack.2.x, 0, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
808B	  %13:fpr64 = COPY $d0, debug-location !262; is.c:322:14
816B	  %15:fpr64 = FADDDrr %14:fpr64, %13:fpr64, debug-location !263; is.c:322:11
832B	  STRDui %15:fpr64, %stack.2.x, 0, debug-location !263 :: (store 8 into %ir.x); is.c:322:11
848B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !264; is.c:323:14
864B	  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !264; is.c:323:14
880B	  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !264; is.c:323:14
896B	  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !264; is.c:323:14
912B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !264; is.c:323:14
928B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !265; is.c:323:11
944B	  PCN_STACKMAP 3, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !265 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:323:11
960B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !265; is.c:323:11
976B	  %16:fpr64 = COPY $d0, debug-location !264; is.c:323:14
992B	  %17:fpr64 = LDRDui %stack.2.x, 0, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
1040B	  undef %20.ssub:fpr64 = LDRSui %stack.4.k, 0, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
1048B	  %18:fpr64 = FADDDrr %17:fpr64, %16:fpr64, debug-location !265; is.c:323:11
1152B	  %27:gpr64 = LDRSWui %stack.3.i, 0, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
1184B	  %29:gpr32common = LDRWui %stack.3.i, 0, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
1192B	  %22:fpr128 = SSHLLv2i32_shift %20:fpr64, 0, debug-location !266; is.c:325:24
1200B	  %24:fpr64 = SCVTFv1i64 %22.dsub:fpr128, debug-location !266; is.c:325:24
1208B	  %25:fpr64 = FMULDrr %24:fpr64, %18:fpr64, debug-location !268; is.c:325:26
1216B	  %26:gpr32 = FCVTZSUWDr %25:fpr64, debug-location !266; is.c:325:24
1224B	  STRWroX %26:gpr32, %28:gpr64common, %27:gpr64, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
1232B	  %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !272; is.c:319:32
1240B	  STRDui %18:fpr64, %stack.2.x, 0, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
1248B	  STRWui %30:gpr32common, %stack.3.i, 0, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
1256B	  B %bb.1, debug-location !273; is.c:319:5

1264B	bb.3.for.end:
	; predecessors: %bb.1

1272B	  RET_ReallyLR debug-location !276; is.c:327:1

# End machine code for function create_seq.

Before post-MI-sched:
# Machine code for function create_seq: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=8, align=8, at location [SP-48]
  fi#1: size=8, align=8, at location [SP-56]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=4, align=4, at location [SP-68]
  fi#4: size=4, align=4, at location [SP-72]
  fi#5: size=8, align=8, at location [SP-40]
  fi#6: size=8, align=8, at location [SP-8]
  fi#7: size=8, align=8, at location [SP-16]
  fi#8: size=8, align=8, at location [SP-24]
  fi#9: size=8, align=8, at location [SP-32]
Function Live Ins: $d0, $d1

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $d0, $d1, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup STPXi killed $x20, killed $x19, $sp, 6 :: (store 8 into %stack.9), (store 8 into %stack.8)
  frame-setup STPXi killed $fp, killed $lr, $sp, 8 :: (store 8 into %stack.7), (store 8 into %stack.6)
  $fp = frame-setup ADDXri $sp, 64, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  STPDi renamable $d1, renamable $d0, $sp, 3 :: (store 8 into %ir.seed.addr), (store 8 into %ir.a.addr)
  $w8 = MOVZWi 8, 16
  STPWi renamable $w8, $wzr, $sp, 2, debug-location !250 :: (store 4 into %ir.i), (store 4 into %ir.k); is.c:319:12
  $w19 = MOVNWi 65024, 16
  $x20 = ADRP target-flags(aarch64-page) @key_array
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $w19, $x20
  renamable $w8 = LDRWui $sp, 3, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
  $wzr = SUBSWrs killed renamable $w8, renamable $w19, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !256; is.c:319:5
  Bcc 12, %bb.3, implicit $nzcv, debug-location !256; is.c:319:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w19, $x20
  $x0 = ADDXri $sp, 32, 0, debug-location !257; is.c:320:13
  $x1 = ADDXri $sp, 24, 0, debug-location !257; is.c:320:13
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !257; is.c:320:13
  PCN_STACKMAP 0, 0, 0, $fp, -40, 0, $fp, -52, 0, $fp, -56, 0, $fp, -32, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !259 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:320:11
  STRDui killed renamable $d0, $sp, 2, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
  $x0 = ADDXri $sp, 32, 0, debug-location !260; is.c:321:14
  $x1 = ADDXri $sp, 24, 0, debug-location !260; is.c:321:14
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !260; is.c:321:14
  PCN_STACKMAP 1, 0, 0, $fp, -40, 0, $fp, -52, 0, $fp, -56, 0, $fp, -32, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !261 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:321:11
  renamable $d1 = LDRDui $sp, 2, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0, debug-location !261; is.c:321:11
  STRDui killed renamable $d0, $sp, 2, debug-location !261 :: (store 8 into %ir.x); is.c:321:11
  $x0 = ADDXri $sp, 32, 0, debug-location !262; is.c:322:14
  $x1 = ADDXri $sp, 24, 0, debug-location !262; is.c:322:14
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !262; is.c:322:14
  PCN_STACKMAP 2, 0, 0, $fp, -40, 0, $fp, -52, 0, $fp, -56, 0, $fp, -32, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !263 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:322:11
  renamable $d1 = LDRDui $sp, 2, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0, debug-location !263; is.c:322:11
  STRDui killed renamable $d0, $sp, 2, debug-location !263 :: (store 8 into %ir.x); is.c:322:11
  $x0 = ADDXri $sp, 32, 0, debug-location !264; is.c:323:14
  $x1 = ADDXri $sp, 24, 0, debug-location !264; is.c:323:14
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !264; is.c:323:14
  PCN_STACKMAP 3, 0, 0, $fp, -40, 0, $fp, -52, 0, $fp, -56, 0, $fp, -32, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !265 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:323:11
  renamable $d1 = LDRDui $sp, 2, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  renamable $s2 = LDRSui $sp, 2, implicit-def $d2, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0, debug-location !265; is.c:323:11
  renamable $x8 = LDRSWui $sp, 3, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  renamable $w16 = LDRWui $sp, 3, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
  renamable $q1 = SSHLLv2i32_shift killed renamable $d2, 0, debug-location !266; is.c:325:24
  renamable $d1 = SCVTFv1i64 renamable $d1, implicit killed $q1, debug-location !266; is.c:325:24
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d0, debug-location !268; is.c:325:26
  renamable $w17 = FCVTZSUWDr killed renamable $d1, debug-location !266; is.c:325:24
  STRWroX killed renamable $w17, renamable $x20, killed renamable $x8, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
  renamable $w8 = nsw ADDWri killed renamable $w16, 1, 0, debug-location !272; is.c:319:32
  STRDui killed renamable $d0, $sp, 2, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
  STRWui killed renamable $w8, $sp, 3, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
  B %bb.1

bb.3.for.end:
; predecessors: %bb.1

  $fp, $lr = frame-destroy LDPXi $sp, 8, debug-location !276 :: (load 8 from %stack.7), (load 8 from %stack.6); is.c:327:1
  $x20, $x19 = frame-destroy LDPXi $sp, 6, debug-location !276 :: (load 8 from %stack.9), (load 8 from %stack.8); is.c:327:1
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !276; is.c:327:1
  RET undef $lr, debug-location !276; is.c:327:1

# End machine code for function create_seq.

********** MI Scheduling **********
create_seq:%bb.0 entry
  From: STPDi renamable $d1, renamable $d0, $sp, 3 :: (store 8 into %ir.seed.addr), (store 8 into %ir.a.addr)
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STPDi renamable $d1, renamable $d0, $sp, 3 :: (store 8 into %ir.seed.addr), (store 8 into %ir.a.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 8, 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STPWi renamable $w8, $wzr, $sp, 2, debug-location !250 :: (store 4 into %ir.i), (store 4 into %ir.k); is.c:319:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
SU(3):   $w19 = MOVNWi 65024, 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x20 = ADRP target-flags(aarch64-page) @key_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x20
SU(5):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x20 = ADRP target-flags(aarch64-page) @key_array
  Ready @0c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 8, 16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $w19 = MOVNWi 65024, 16
  Ready @2c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  Ready @3c
  TopQ.A TopLatency SU(5) 1c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPDi renamable $d1, renamable $d0, $sp, 3 :: (store 8 into %ir.seed.addr), (store 8 into %ir.a.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STPWi renamable $w8, $wzr, $sp, 2, debug-location !250 :: (store 4 into %ir.i), (store 4 into %ir.k); is.c:319:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(4):   $x20 = ADRP target-flags(aarch64-page) @key_array
SU(1):   $w8 = MOVZWi 8, 16
SU(3):   $w19 = MOVNWi 65024, 16
SU(5):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
SU(0):   STPDi renamable $d1, renamable $d0, $sp, 3 :: (store 8 into %ir.seed.addr), (store 8 into %ir.a.addr)
SU(2):   STPWi renamable $w8, $wzr, $sp, 2, debug-location !250 :: (store 4 into %ir.i), (store 4 into %ir.k); is.c:319:12

********** MI Scheduling **********
create_seq:%bb.0 entry
  From: frame-setup STPXi killed $x20, killed $x19, $sp, 6 :: (store 8 into %stack.9), (store 8 into %stack.8)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x20, $x19, $sp, 6 :: (store 8 into %stack.9), (store 8 into %stack.8)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 8 :: (store 8 into %stack.7), (store 8 into %stack.6)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 64, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x20, $x19, $sp, 6 :: (store 8 into %stack.9), (store 8 into %stack.8)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 8 :: (store 8 into %stack.7), (store 8 into %stack.6)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 64, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x20, $x19, $sp, 6 :: (store 8 into %stack.9), (store 8 into %stack.8)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 8 :: (store 8 into %stack.7), (store 8 into %stack.6)
SU(2):   $fp = frame-setup ADDXri $sp, 64, 0

Fixup kills for %bb.0
********** MI Scheduling **********
create_seq:%bb.1 for.cond
  From: renamable $w8 = LDRWui $sp, 3, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
    To: Bcc 12, %bb.3, implicit $nzcv, debug-location !256; is.c:319:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 3, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w19, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !256; is.c:319:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.3, implicit $nzcv, debug-location !256; is.c:319:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 3, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w8, renamable $w19, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !256; is.c:319:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w8 = LDRWui $sp, 3, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w19, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !256; is.c:319:5

Fixup kills for %bb.1
********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: renamable $d1 = LDRDui $sp, 2, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
    To: B %bb.1
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 2, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
    SU(11): Ord  Latency=0 Memory
SU(1):   renamable $s2 = LDRSui $sp, 2, implicit-def $d2, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Data Latency=4 Reg=$d2
SU(2):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !265; is.c:323:11
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(11): Data Latency=1 Reg=$d0
    SU(7): Data Latency=1 Reg=$d0
    SU(5): Anti Latency=0
SU(3):   renamable $x8 = LDRSWui $sp, 3, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=4 Reg=$x8
    SU(12): Ord  Latency=0 Memory
SU(4):   renamable $w16 = LDRWui $sp, 3, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=$w16
    SU(12): Ord  Latency=0 Memory
SU(5):   renamable $q1 = SSHLLv2i32_shift renamable $d2, 0, debug-location !266; is.c:325:24
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$d2
    SU(0): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
    SU(6): Data Latency=0 Reg=$q1
SU(6):   renamable $d1 = SCVTFv1i64 renamable $d1, implicit $q1, debug-location !266; is.c:325:24
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d1
    SU(5): Data Latency=0 Reg=$q1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d1
SU(7):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !268; is.c:325:26
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
    SU(2): Data Latency=1 Reg=$d0
  Successors:
    SU(8): Data Latency=1 Reg=$d1
SU(8):   renamable $w17 = FCVTZSUWDr renamable $d1, debug-location !266; is.c:325:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 2
  Predecessors:
    SU(7): Data Latency=1 Reg=$d1
  Successors:
    SU(9): Data Latency=1 Reg=$w17
SU(9):   STRWroX renamable $w17, renamable $x20, renamable $x8, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=$w17
    SU(3): Data Latency=4 Reg=$x8
  Successors:
    SU(10): Anti Latency=0
SU(10):   renamable $w8 = nsw ADDWri renamable $w16, 1, 0, debug-location !272; is.c:319:32
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(9): Anti Latency=0
    SU(4): Data Latency=4 Reg=$w16
    SU(3): Out  Latency=1
  Successors:
    SU(12): Data Latency=1 Reg=$w8
SU(11):   STRDui renamable $d0, $sp, 2, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$d0
    SU(0): Ord  Latency=0 Memory
SU(12):   STRWui renamable $w8, $sp, 3, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$w8
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui $sp, 2, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $s2 = LDRSui $sp, 2, implicit-def $d2, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 9
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x8 = LDRSWui $sp, 3, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w16 = LDRWui $sp, 3, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !265; is.c:323:11
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 9
  Cand SU(11) ORDER                              
  Cand SU(5) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $q1 = SSHLLv2i32_shift renamable $d2, 0, debug-location !266; is.c:325:24
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 9
  Cand SU(11) ORDER                              
  Cand SU(6) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d1 = SCVTFv1i64 renamable $d1, implicit $q1, debug-location !266; is.c:325:24
  Ready @6c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 9
  Cand SU(11) ORDER                              
  Cand SU(7) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !268; is.c:325:26
  Ready @7c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 9
  Cand SU(11) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $w17 = FCVTZSUWDr renamable $d1, debug-location !266; is.c:325:24
  Ready @8c
  TopQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 9 
  TopQ.A RemainingLatency 0 + 9c > CritPath 9
  Cand SU(11) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) STRWroX renamable $w17, renamable $x20, renamable $x8, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
  Ready @9c
  TopQ.A TopLatency SU(9) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 10 
  TopQ.A RemainingLatency 0 + 10c > CritPath 9
  Cand SU(11) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $w8 = nsw ADDWri renamable $w16, 1, 0, debug-location !272; is.c:319:32
  Ready @10c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 9
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) STRDui renamable $d0, $sp, 2, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRWui renamable $w8, $sp, 3, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
  Ready @12c
  TopQ.A TopLatency SU(12) 9c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $d1 = LDRDui $sp, 2, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
SU(1):   renamable $s2 = LDRSui $sp, 2, implicit-def $d2, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
SU(3):   renamable $x8 = LDRSWui $sp, 3, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
SU(4):   renamable $w16 = LDRWui $sp, 3, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
SU(2):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !265; is.c:323:11
SU(5):   renamable $q1 = SSHLLv2i32_shift renamable $d2, 0, debug-location !266; is.c:325:24
SU(6):   renamable $d1 = SCVTFv1i64 renamable $d1, implicit $q1, debug-location !266; is.c:325:24
SU(7):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !268; is.c:325:26
SU(8):   renamable $w17 = FCVTZSUWDr renamable $d1, debug-location !266; is.c:325:24
SU(9):   STRWroX renamable $w17, renamable $x20, renamable $x8, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
SU(10):   renamable $w8 = nsw ADDWri renamable $w16, 1, 0, debug-location !272; is.c:319:32
SU(11):   STRDui renamable $d0, $sp, 2, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
SU(12):   STRWui renamable $w8, $sp, 3, debug-location !272 :: (store 4 into %ir.i); is.c:319:32

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: renamable $d1 = LDRDui $sp, 2, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !264; is.c:323:14
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 2, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d1
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !263; is.c:322:11
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(2): Data Latency=1 Reg=$d0
SU(2):   STRDui renamable $d0, $sp, 2, debug-location !263 :: (store 8 into %ir.x); is.c:322:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
    SU(0): Ord  Latency=0 Memory
SU(3):   $x0 = ADDXri $sp, 32, 0, debug-location !264; is.c:323:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x1 = ADDXri $sp, 24, 0, debug-location !264; is.c:323:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !264; is.c:323:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui $sp, 2, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADDXri $sp, 32, 0, debug-location !264; is.c:323:14
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x1 = ADDXri $sp, 24, 0, debug-location !264; is.c:323:14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !263; is.c:322:11
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, $sp, 2, debug-location !263 :: (store 8 into %ir.x); is.c:322:11
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $d1 = LDRDui $sp, 2, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
SU(3):   $x0 = ADDXri $sp, 32, 0, debug-location !264; is.c:323:14
SU(4):   $x1 = ADDXri $sp, 24, 0, debug-location !264; is.c:323:14
SU(1):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !263; is.c:322:11
SU(2):   STRDui renamable $d0, $sp, 2, debug-location !263 :: (store 8 into %ir.x); is.c:322:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: renamable $d1 = LDRDui $sp, 2, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !262; is.c:322:14
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 2, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d1
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !261; is.c:321:11
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(2): Data Latency=1 Reg=$d0
SU(2):   STRDui renamable $d0, $sp, 2, debug-location !261 :: (store 8 into %ir.x); is.c:321:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
    SU(0): Ord  Latency=0 Memory
SU(3):   $x0 = ADDXri $sp, 32, 0, debug-location !262; is.c:322:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x1 = ADDXri $sp, 24, 0, debug-location !262; is.c:322:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !262; is.c:322:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui $sp, 2, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADDXri $sp, 32, 0, debug-location !262; is.c:322:14
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x1 = ADDXri $sp, 24, 0, debug-location !262; is.c:322:14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !261; is.c:321:11
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, $sp, 2, debug-location !261 :: (store 8 into %ir.x); is.c:321:11
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $d1 = LDRDui $sp, 2, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
SU(3):   $x0 = ADDXri $sp, 32, 0, debug-location !262; is.c:322:14
SU(4):   $x1 = ADDXri $sp, 24, 0, debug-location !262; is.c:322:14
SU(1):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !261; is.c:321:11
SU(2):   STRDui renamable $d0, $sp, 2, debug-location !261 :: (store 8 into %ir.x); is.c:321:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: STRDui killed renamable $d0, $sp, 2, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !260; is.c:321:14
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 2, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x0 = ADDXri $sp, 32, 0, debug-location !260; is.c:321:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADDXri $sp, 24, 0, debug-location !260; is.c:321:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !260; is.c:321:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x0 = ADDXri $sp, 32, 0, debug-location !260; is.c:321:14
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADDXri $sp, 24, 0, debug-location !260; is.c:321:14
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRDui renamable $d0, $sp, 2, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(1):   $x0 = ADDXri $sp, 32, 0, debug-location !260; is.c:321:14
SU(2):   $x1 = ADDXri $sp, 24, 0, debug-location !260; is.c:321:14
SU(0):   STRDui renamable $d0, $sp, 2, debug-location !259 :: (store 8 into %ir.x); is.c:320:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $x0 = ADDXri $sp, 32, 0, debug-location !257; is.c:320:13
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !257; is.c:320:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADDXri $sp, 32, 0, debug-location !257; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $x1 = ADDXri $sp, 24, 0, debug-location !257; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !257; is.c:320:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADDXri $sp, 32, 0, debug-location !257; is.c:320:13
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x1 = ADDXri $sp, 24, 0, debug-location !257; is.c:320:13
  Ready @1c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $x0 = ADDXri $sp, 32, 0, debug-location !257; is.c:320:13
SU(1):   $x1 = ADDXri $sp, 24, 0, debug-location !257; is.c:320:13

Fixup kills for %bb.2
********** MI Scheduling **********
create_seq:%bb.3 for.end
  From: $fp, $lr = frame-destroy LDPXi $sp, 8, debug-location !276 :: (load 8 from %stack.7), (load 8 from %stack.6); is.c:327:1
    To: $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !276; is.c:327:1
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 8, debug-location !276 :: (load 8 from %stack.7), (load 8 from %stack.6); is.c:327:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 6, debug-location !276 :: (load 8 from %stack.9), (load 8 from %stack.8); is.c:327:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !276; is.c:327:1
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $fp, $lr = frame-destroy LDPXi $sp, 8, debug-location !276 :: (load 8 from %stack.7), (load 8 from %stack.6); is.c:327:1
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x20, $x19 = frame-destroy LDPXi $sp, 6, debug-location !276 :: (load 8 from %stack.9), (load 8 from %stack.8); is.c:327:1
  Ready @1c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 8, debug-location !276 :: (load 8 from %stack.7), (load 8 from %stack.6); is.c:327:1
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 6, debug-location !276 :: (load 8 from %stack.9), (load 8 from %stack.8); is.c:327:1

Fixup kills for %bb.3
Before MISched:
# Machine code for function full_verify: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  STRWui $wzr, %stack.0.i, 0, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
  %2:gpr32 = MOVi32imm 33554431
  %27:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2
  %29:gpr64temp = ADRP target-flags(aarch64-page) @key_buff_ptr_global
  %35:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %1:gpr32 = LDRWui %stack.0.i, 0, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
  dead $wzr = SUBSWrr %1:gpr32, %2:gpr32, implicit-def $nzcv, debug-location !290; is.c:351:5
  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !290; is.c:351:5
  B %bb.2, debug-location !290; is.c:351:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %26:gpr64 = LDRSWui %stack.0.i, 0, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  %28:gpr64 = LDRSWroX %27:gpr64common, %26:gpr64, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
  %30:gpr64common = LDRXui %29:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  %31:gpr64 = UBFMXri %28:gpr64, 62, 61, debug-location !293; is.c:352:21
  %32:gpr64common = LDRSWroX %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
  %33:gpr64common = nsw SUBXri %32:gpr64common, 1, 0, debug-location !296; is.c:352:19
  STRWroX %33.sub_32:gpr64common, %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
  STRWroX %28.sub_32:gpr64, %35:gpr64common, %33:gpr64common, 0, 1, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
  %37:gpr32common = LDRWui %stack.0.i, 0, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
  %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0, debug-location !299; is.c:351:32
  STRWui %38:gpr32common, %stack.0.i, 0, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
  B %bb.1, debug-location !300; is.c:351:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  STRWui $wzr, %stack.1.j, 0, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
  %5:gpr32 = MOVi32imm 1
  STRWui %5:gpr32, %stack.0.i, 0, debug-location !304 :: (store 4 into %ir.i); is.c:357:12
  %7:gpr32 = MOVi32imm 33554431
  %17:gpr64 = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

bb.4.for.cond7:
; predecessors: %bb.3, %bb.7
  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

  %6:gpr32 = LDRWui %stack.0.i, 0, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
  dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !310; is.c:357:5
  Bcc 12, %bb.8, implicit killed $nzcv, debug-location !310; is.c:357:5
  B %bb.5, debug-location !310; is.c:357:5

bb.5.for.body9:
; predecessors: %bb.4
  successors: %bb.6(0x40000000), %bb.7(0x40000000); %bb.6(50.00%), %bb.7(50.00%)

  %16:gpr64 = LDRSWui %stack.0.i, 0, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  %18:gpr64common = ADDXrs %17:gpr64, %16:gpr64, 2, debug-location !316; is.c:358:32
  %19:gpr32 = LDURWi %18:gpr64common, -4, debug-location !314 :: (load 4 from %ir.arrayidx11); is.c:358:13
  %20:gpr32 = LDRWui %18:gpr64common, 0, debug-location !316 :: (load 4 from %ir.arrayidx13); is.c:358:32
  dead $wzr = SUBSWrr %19:gpr32, %20:gpr32, implicit-def $nzcv, debug-location !318; is.c:358:13
  Bcc 13, %bb.7, implicit killed $nzcv, debug-location !318; is.c:358:13
  B %bb.6, debug-location !318; is.c:358:13

bb.6.if.then:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %22:gpr32common = LDRWui %stack.1.j, 0, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
  %23:gpr32common = nsw ADDWri %22:gpr32common, 1, 0, debug-location !319; is.c:359:14
  STRWui %23:gpr32common, %stack.1.j, 0, debug-location !319 :: (store 4 into %ir.j); is.c:359:14

bb.7.for.inc16:
; predecessors: %bb.5, %bb.6
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %24:gpr32common = LDRWui %stack.0.i, 0, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
  %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !321; is.c:357:32
  STRWui %25:gpr32common, %stack.0.i, 0, debug-location !321 :: (store 4 into %ir.i); is.c:357:32
  B %bb.4, debug-location !322; is.c:357:5

bb.8.for.end18:
; predecessors: %bb.4
  successors: %bb.9(0x50000000), %bb.10(0x30000000); %bb.9(62.50%), %bb.10(37.50%)

  %9:gpr32 = LDRWui %stack.1.j, 0, debug-location !325 :: (dereferenceable load 4 from %ir.j); is.c:361:9
  CBZW %9:gpr32, %bb.10, debug-location !328; is.c:361:9
  B %bb.9, debug-location !328; is.c:361:9

bb.9.if.then20:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %13:gpr64 = LDRSWui %stack.1.j, 0, debug-location !329 :: (dereferenceable load 4 from %ir.j); is.c:362:72
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !332; is.c:362:9
  $x0 = MOVaddr target-flags(aarch64-page) @is__str_Full_verif, target-flags(aarch64-pageoff, aarch64-nc) @is__str_Full_verif, debug-location !332; is.c:362:9
  $x1 = COPY %13:gpr64, debug-location !332; is.c:362:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w8, debug-location !332; is.c:362:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !332; is.c:362:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !333; is.c:363:5
  PCN_STACKMAP 0, 0, %13:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !333; is.c:363:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !333; is.c:363:5
  B %bb.11, debug-location !333; is.c:363:5

bb.10.if.else:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %10:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
  %11:gpr32common = LDRWui %10:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
  %12:gpr32common = nsw ADDWri %11:gpr32common, 1, 0, debug-location !334; is.c:365:28
  STRWui %12:gpr32common, %10:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28

bb.11.if.end22:
; predecessors: %bb.10, %bb.9

  RET_ReallyLR debug-location !335; is.c:366:1

# End machine code for function full_verify.

********** MI Scheduling **********
full_verify:%bb.0 entry
  From: STRWui $wzr, %stack.0.i, 0, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   STRWui $wzr, %stack.0.i, 0, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %2:gpr32 = MOVi32imm 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %27:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %29:gpr64temp = ADRP target-flags(aarch64-page) @key_buff_ptr_global
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %35:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %35:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %29:gpr64temp = ADRP target-flags(aarch64-page) @key_buff_ptr_global
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %27:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %2:gpr32 = MOVi32imm 33554431
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.0.i, 0, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   STRWui $wzr, %stack.0.i, 0, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
SU(1):   %2:gpr32 = MOVi32imm 33554431
SU(2):   %27:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2
SU(3):   %29:gpr64temp = ADRP target-flags(aarch64-page) @key_buff_ptr_global
SU(4):   %35:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

********** MI Scheduling **********
full_verify:%bb.1 for.cond
  From: %1:gpr32 = LDRWui %stack.0.i, 0, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
    To: Bcc 12, %bb.3, implicit killed $nzcv, debug-location !290; is.c:351:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %1:gpr32 = LDRWui %stack.0.i, 0, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%1
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %1:gpr32, %2:gpr32, implicit-def $nzcv, debug-location !290; is.c:351:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.3, implicit killed $nzcv, debug-location !290; is.c:351:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %1:gpr32, %2:gpr32, implicit-def $nzcv, debug-location !290; is.c:351:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %1:gpr32 = LDRWui %stack.0.i, 0, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %1:gpr32 = LDRWui %stack.0.i, 0, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
SU(1):   dead $wzr = SUBSWrr %1:gpr32, %2:gpr32, implicit-def $nzcv, debug-location !290; is.c:351:5

********** MI Scheduling **********
full_verify:%bb.2 for.body
  From: %26:gpr64 = LDRSWui %stack.0.i, 0, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
    To: B %bb.1, debug-location !300; is.c:351:5
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=7
Live In: %35 %29 %27 
Live Out: %35 %29 %27 
Live Thru: GPR64temp=1
GPR32=3
  LiveReg: %35
  UpdateRegP: SU(7) STRWroX %28.sub_32:gpr64, %35:gpr64common, %33:gpr64common, 0, 1, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
              to GPR32 2
  LiveReg: %29
  UpdateRegP: SU(2) %30:gpr64common = LDRXui %29:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
              to GPR32 -1
  LiveReg: %27
  UpdateRegP: SU(1) %28:gpr64 = LDRSWroX %27:gpr64common, %26:gpr64, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
              to 
Top Pressure:
GPR64temp=1
GPR32=3
Bottom Pressure:
GPR64temp=1
GPR32=3
Excess PSets: 
SU(0):   %26:gpr64 = LDRSWui %stack.0.i, 0, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(1): Data Latency=4 Reg=%26
    SU(10): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %28:gpr64 = LDRSWroX %27:gpr64common, %26:gpr64, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(0): Data Latency=4 Reg=%26
  Successors:
    SU(7): Data Latency=4 Reg=%28
    SU(3): Data Latency=4 Reg=%28
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %30:gpr64common = LDRXui %29:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=%30
    SU(4): Data Latency=4 Reg=%30
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   %31:gpr64 = UBFMXri %28:gpr64, 62, 61, debug-location !293; is.c:352:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%28
  Successors:
    SU(6): Data Latency=1 Reg=%31
    SU(4): Data Latency=1 Reg=%31
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %32:gpr64common = LDRSWroX %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(3): Data Latency=1 Reg=%31
    SU(2): Data Latency=4 Reg=%30
  Successors:
    SU(5): Data Latency=4 Reg=%32
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   %33:gpr64common = nsw SUBXri %32:gpr64common, 1, 0, debug-location !296; is.c:352:19
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 7
  Predecessors:
    SU(4): Data Latency=4 Reg=%32
  Successors:
    SU(7): Data Latency=1 Reg=%33
    SU(6): Data Latency=1 Reg=%33
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   STRWroX %33.sub_32:gpr64common, %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%33
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=1 Reg=%31
    SU(2): Data Latency=4 Reg=%30
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 3
  Single Issue       : false;
SU(7):   STRWroX %28.sub_32:gpr64, %35:gpr64common, %33:gpr64common, 0, 1, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=1 Reg=%33
    SU(4): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%28
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(8):   %37:gpr32common = LDRWui %stack.0.i, 0, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 5
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%37
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0, debug-location !299; is.c:351:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%37
  Successors:
    SU(10): Data Latency=1 Reg=%38
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   STRWui %38:gpr32common, %stack.0.i, 0, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%38
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !300; is.c:351:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 20
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) STRWui %38:gpr32common, %stack.0.i, 0, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
Bottom Pressure:
GPR64temp=1
GPR32=4
  LiveReg: %38
  UpdateRegP: SU(10) STRWui %38:gpr32common, %stack.0.i, 0, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 20c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 9 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(9) 19c
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0, debug-location !299; is.c:351:32
Bottom Pressure:
GPR64temp=1
GPR32=4
  LiveReg: %37
  UpdateRegP: SU(9) %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0, debug-location !299; is.c:351:32
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) STRWroX %28.sub_32:gpr64, %35:gpr64common, %33:gpr64common, 0, 1, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
Bottom Pressure:
GPR64temp=1
GPR32=6
  LiveReg: %28
  UpdateRegP: SU(3) %31:gpr64 = UBFMXri %28:gpr64, 62, 61, debug-location !293; is.c:352:21
              to GPR32 -1
  UpdateRegP: SU(7) STRWroX %28.sub_32:gpr64, %35:gpr64common, %33:gpr64common, 0, 1, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
              to GPR32 1
  LiveReg: %33
  UpdateRegP: SU(6) STRWroX %33.sub_32:gpr64common, %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
              to GPR32 2
  UpdateRegP: SU(7) STRWroX %28.sub_32:gpr64, %35:gpr64common, %33:gpr64common, 0, 1, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
              to 
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %37:gpr32common = LDRWui %stack.0.i, 0, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
Bottom Pressure:
GPR64temp=1
GPR32=5
  Ready @5c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWroX %33.sub_32:gpr64common, %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
Bottom Pressure:
GPR64temp=1
GPR32=7
  LiveReg: %30
  UpdateRegP: SU(4) %32:gpr64common = LDRSWroX %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
              to 
  UpdateRegP: SU(6) STRWroX %33.sub_32:gpr64common, %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
              to GPR32 1
  LiveReg: %31
  UpdateRegP: SU(4) %32:gpr64common = LDRSWroX %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
              to GPR32 -1
  UpdateRegP: SU(6) STRWroX %33.sub_32:gpr64common, %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
              to 
  Ready @6c
  BotQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %33:gpr64common = nsw SUBXri %32:gpr64common, 1, 0, debug-location !296; is.c:352:19
Bottom Pressure:
GPR64temp=1
GPR32=7
  LiveReg: %32
  UpdateRegP: SU(5) %33:gpr64common = nsw SUBXri %32:gpr64common, 1, 0, debug-location !296; is.c:352:19
              to GPR32 -1
  Ready @7c
  BotQ.A BotLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %32:gpr64common = LDRSWroX %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
Bottom Pressure:
GPR64temp=1
GPR32=6
  Ready @11c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %31:gpr64 = UBFMXri %28:gpr64, 62, 61, debug-location !293; is.c:352:21
Bottom Pressure:
GPR64temp=1
GPR32=5
  Ready @12c
  BotQ.A BotLatency SU(3) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %30:gpr64common = LDRXui %29:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
Bottom Pressure:
GPR64temp=1
GPR32=4
  Ready @15c
  BotQ.A BotLatency SU(2) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 9
  Executed: 16c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %28:gpr64 = LDRSWroX %27:gpr64common, %26:gpr64, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
Bottom Pressure:
GPR64temp=1
GPR32=4
  LiveReg: %26
  UpdateRegP: SU(1) %28:gpr64 = LDRSWroX %27:gpr64common, %26:gpr64, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
              to GPR32 -1
  Ready @16c
  BotQ.A BotLatency SU(1) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 10
  Executed: 17c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 20 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %26:gpr64 = LDRSWui %stack.0.i, 0, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
Bottom Pressure:
GPR64temp=1
GPR32=3
  Ready @20c
  BotQ.A BotLatency SU(0) 20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 11
  Executed: 21c
  Critical: 11c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %26:gpr64 = LDRSWui %stack.0.i, 0, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
SU(1):   %28:gpr64 = LDRSWroX %27:gpr64common, %26:gpr64, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
SU(2):   %30:gpr64common = LDRXui %29:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
SU(3):   %31:gpr64 = UBFMXri %28:gpr64, 62, 61, debug-location !293; is.c:352:21
SU(4):   %32:gpr64common = LDRSWroX %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
SU(5):   %33:gpr64common = nsw SUBXri %32:gpr64common, 1, 0, debug-location !296; is.c:352:19
SU(6):   STRWroX %33.sub_32:gpr64common, %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
SU(8):   %37:gpr32common = LDRWui %stack.0.i, 0, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
SU(7):   STRWroX %28.sub_32:gpr64, %35:gpr64common, %33:gpr64common, 0, 1, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
SU(9):   %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0, debug-location !299; is.c:351:32
SU(10):   STRWui %38:gpr32common, %stack.0.i, 0, debug-location !299 :: (store 4 into %ir.i); is.c:351:32

********** MI Scheduling **********
full_verify:%bb.3 for.end
  From: STRWui $wzr, %stack.1.j, 0, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.1.j, 0, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %5:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(2):   STRWui %5:gpr32, %stack.0.i, 0, debug-location !304 :: (store 4 into %ir.i); is.c:357:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(3):   %7:gpr32 = MOVi32imm 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %17:gpr64 = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRWui %5:gpr32, %stack.0.i, 0, debug-location !304 :: (store 4 into %ir.i); is.c:357:12
  Ready @1c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %7:gpr32 = MOVi32imm 33554431
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %5:gpr32 = MOVi32imm 1
  Ready @3c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.1.j, 0, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   STRWui $wzr, %stack.1.j, 0, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
SU(1):   %5:gpr32 = MOVi32imm 1
SU(3):   %7:gpr32 = MOVi32imm 33554431
SU(2):   STRWui %5:gpr32, %stack.0.i, 0, debug-location !304 :: (store 4 into %ir.i); is.c:357:12
SU(4):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

********** MI Scheduling **********
full_verify:%bb.4 for.cond7
  From: %6:gpr32 = LDRWui %stack.0.i, 0, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
    To: Bcc 12, %bb.8, implicit killed $nzcv, debug-location !310; is.c:357:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %6:gpr32 = LDRWui %stack.0.i, 0, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%6
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !310; is.c:357:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.8, implicit killed $nzcv, debug-location !310; is.c:357:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !310; is.c:357:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %6:gpr32 = LDRWui %stack.0.i, 0, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %6:gpr32 = LDRWui %stack.0.i, 0, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
SU(1):   dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !310; is.c:357:5

********** MI Scheduling **********
full_verify:%bb.5 for.body9
  From: %16:gpr64 = LDRSWui %stack.0.i, 0, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
    To: Bcc 13, %bb.7, implicit killed $nzcv, debug-location !318; is.c:358:13
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %16:gpr64 = LDRSWui %stack.0.i, 0, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=4 Reg=%16
  Single Issue       : false;
SU(1):   %18:gpr64common = ADDXrs %17:gpr64, %16:gpr64, 2, debug-location !316; is.c:358:32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%16
  Successors:
    SU(3): Data Latency=1 Reg=%18
    SU(2): Data Latency=1 Reg=%18
  Single Issue       : false;
SU(2):   %19:gpr32 = LDURWi %18:gpr64common, -4, debug-location !314 :: (load 4 from %ir.arrayidx11); is.c:358:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%18
  Successors:
    SU(4): Data Latency=4 Reg=%19
  Single Issue       : false;
SU(3):   %20:gpr32 = LDRWui %18:gpr64common, 0, debug-location !316 :: (load 4 from %ir.arrayidx13); is.c:358:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%18
  Successors:
    SU(4): Data Latency=4 Reg=%20
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %19:gpr32, %20:gpr32, implicit-def $nzcv, debug-location !318; is.c:358:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%20
    SU(2): Data Latency=4 Reg=%19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 13, %bb.7, implicit killed $nzcv, debug-location !318; is.c:358:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %19:gpr32, %20:gpr32, implicit-def $nzcv, debug-location !318; is.c:358:13
  Ready @1c
  BotQ.A TopLatency SU(4) 9c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %16:gpr64 = LDRSWui %stack.0.i, 0, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %18:gpr64common = ADDXrs %17:gpr64, %16:gpr64, 2, debug-location !316; is.c:358:32
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
BotQ.A RemLatency SU(3) 5c
TopQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %20:gpr32 = LDRWui %18:gpr64common, 0, debug-location !316 :: (load 4 from %ir.arrayidx13); is.c:358:32
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %19:gpr32 = LDURWi %18:gpr64common, -4, debug-location !314 :: (load 4 from %ir.arrayidx11); is.c:358:13
  Ready @6c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %16:gpr64 = LDRSWui %stack.0.i, 0, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
SU(1):   %18:gpr64common = ADDXrs %17:gpr64, %16:gpr64, 2, debug-location !316; is.c:358:32
SU(2):   %19:gpr32 = LDURWi %18:gpr64common, -4, debug-location !314 :: (load 4 from %ir.arrayidx11); is.c:358:13
SU(3):   %20:gpr32 = LDRWui %18:gpr64common, 0, debug-location !316 :: (load 4 from %ir.arrayidx13); is.c:358:32
SU(4):   dead $wzr = SUBSWrr %19:gpr32, %20:gpr32, implicit-def $nzcv, debug-location !318; is.c:358:13

********** MI Scheduling **********
full_verify:%bb.6 if.then
  From: %22:gpr32common = LDRWui %stack.1.j, 0, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %22:gpr32common = LDRWui %stack.1.j, 0, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%22
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %23:gpr32common = nsw ADDWri %22:gpr32common, 1, 0, debug-location !319; is.c:359:14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%22
  Successors:
    SU(2): Data Latency=1 Reg=%23
  Single Issue       : false;
SU(2):   STRWui %23:gpr32common, %stack.1.j, 0, debug-location !319 :: (store 4 into %ir.j); is.c:359:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%23
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %23:gpr32common, %stack.1.j, 0, debug-location !319 :: (store 4 into %ir.j); is.c:359:14
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %23:gpr32common = nsw ADDWri %22:gpr32common, 1, 0, debug-location !319; is.c:359:14
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %22:gpr32common = LDRWui %stack.1.j, 0, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %22:gpr32common = LDRWui %stack.1.j, 0, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
SU(1):   %23:gpr32common = nsw ADDWri %22:gpr32common, 1, 0, debug-location !319; is.c:359:14
SU(2):   STRWui %23:gpr32common, %stack.1.j, 0, debug-location !319 :: (store 4 into %ir.j); is.c:359:14

********** MI Scheduling **********
full_verify:%bb.7 for.inc16
  From: %24:gpr32common = LDRWui %stack.0.i, 0, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
    To: B %bb.4, debug-location !322; is.c:357:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %24:gpr32common = LDRWui %stack.0.i, 0, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%24
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !321; is.c:357:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%24
  Successors:
    SU(2): Data Latency=1 Reg=%25
  Single Issue       : false;
SU(2):   STRWui %25:gpr32common, %stack.0.i, 0, debug-location !321 :: (store 4 into %ir.i); is.c:357:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%25
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.4, debug-location !322; is.c:357:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %25:gpr32common, %stack.0.i, 0, debug-location !321 :: (store 4 into %ir.i); is.c:357:32
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !321; is.c:357:32
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %24:gpr32common = LDRWui %stack.0.i, 0, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %24:gpr32common = LDRWui %stack.0.i, 0, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
SU(1):   %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !321; is.c:357:32
SU(2):   STRWui %25:gpr32common, %stack.0.i, 0, debug-location !321 :: (store 4 into %ir.i); is.c:357:32

********** MI Scheduling **********
full_verify:%bb.9 if.then20
  From: $x0 = MOVaddr target-flags(aarch64-page) @is__str_Full_verif, target-flags(aarch64-pageoff, aarch64-nc) @is__str_Full_verif, debug-location !332; is.c:362:9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w8, debug-location !332; is.c:362:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_Full_verif, target-flags(aarch64-pageoff, aarch64-nc) @is__str_Full_verif, debug-location !332; is.c:362:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %13:gpr64, debug-location !332; is.c:362:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w8, debug-location !332; is.c:362:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = COPY %13:gpr64, debug-location !332; is.c:362:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @is__str_Full_verif, target-flags(aarch64-pageoff, aarch64-nc) @is__str_Full_verif, debug-location !332; is.c:362:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_Full_verif, target-flags(aarch64-pageoff, aarch64-nc) @is__str_Full_verif, debug-location !332; is.c:362:9
SU(1):   $x1 = COPY %13:gpr64, debug-location !332; is.c:362:9

********** MI Scheduling **********
full_verify:%bb.10 if.else
  From: %10:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %10:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=1 Reg=%10
    SU(1): Data Latency=1 Reg=%10
  Single Issue       : false;
SU(1):   %11:gpr32common = LDRWui %10:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=%10
  Successors:
    SU(2): Data Latency=4 Reg=%11
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %12:gpr32common = nsw ADDWri %11:gpr32common, 1, 0, debug-location !334; is.c:365:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%11
  Successors:
    SU(3): Data Latency=1 Reg=%12
  Single Issue       : false;
SU(3):   STRWui %12:gpr32common, %10:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%12
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=1 Reg=%10
  Single Issue       : false;
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWui %12:gpr32common, %10:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28
  Ready @0c
  BotQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %12:gpr32common = nsw ADDWri %11:gpr32common, 1, 0, debug-location !334; is.c:365:28
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %11:gpr32common = LDRWui %10:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %10:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
  Ready @6c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %10:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
SU(1):   %11:gpr32common = LDRWui %10:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
SU(2):   %12:gpr32common = nsw ADDWri %11:gpr32common, 1, 0, debug-location !334; is.c:365:28
SU(3):   STRWui %12:gpr32common, %10:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28

********** INTERVALS **********
%1 [128r,144r:0)  0@128r weight:0.000000e+00
%2 [48r,432B:0)  0@48r weight:0.000000e+00
%5 [480r,520r:0)  0@480r weight:0.000000e+00
%6 [560r,576r:0)  0@560r weight:0.000000e+00
%7 [512r,896B:0)  0@512r weight:0.000000e+00
%9 [912r,928r:0)  0@912r weight:0.000000e+00
%10 [1168r,1216r:0)  0@1168r weight:0.000000e+00
%11 [1184r,1200r:0)  0@1184r weight:0.000000e+00
%12 [1200r,1216r:0)  0@1200r weight:0.000000e+00
%13 [976r,1104r:0)  0@976r weight:0.000000e+00
%16 [640r,656r:0)  0@640r weight:0.000000e+00
%17 [528r,896B:0)  0@528r weight:0.000000e+00
%18 [656r,688r:0)  0@656r weight:0.000000e+00
%19 [672r,704r:0)  0@672r weight:0.000000e+00
%20 [688r,704r:0)  0@688r weight:0.000000e+00
%22 [768r,784r:0)  0@768r weight:0.000000e+00
%23 [784r,800r:0)  0@784r weight:0.000000e+00
%24 [832r,848r:0)  0@832r weight:0.000000e+00
%25 [848r,864r:0)  0@848r weight:0.000000e+00
%26 [208r,224r:0)  0@208r weight:0.000000e+00
%27 [64r,432B:0)  0@64r weight:0.000000e+00
%28 [224r,376r:0)  0@224r weight:0.000000e+00
%29 [80r,432B:0)  0@80r weight:0.000000e+00
%30 [240r,320r:0)  0@240r weight:0.000000e+00
%31 [256r,320r:0)  0@256r weight:0.000000e+00
%32 [272r,288r:0)  0@272r weight:0.000000e+00
%33 [288r,376r:0)  0@288r weight:0.000000e+00
%35 [96r,432B:0)  0@96r weight:0.000000e+00
%37 [368r,384r:0)  0@368r weight:0.000000e+00
%38 [384r,400r:0)  0@384r weight:0.000000e+00
RegMasks: 1056r
********** MACHINEINSTRS **********
# Machine code for function full_verify: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

32B	  STRWui $wzr, %stack.0.i, 0, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
48B	  %2:gpr32 = MOVi32imm 33554431
64B	  %27:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2
80B	  %29:gpr64temp = ADRP target-flags(aarch64-page) @key_buff_ptr_global
96B	  %35:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

112B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %1:gpr32 = LDRWui %stack.0.i, 0, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
144B	  dead $wzr = SUBSWrr %1:gpr32, %2:gpr32, implicit-def $nzcv, debug-location !290; is.c:351:5
160B	  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !290; is.c:351:5
176B	  B %bb.2, debug-location !290; is.c:351:5

192B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %26:gpr64 = LDRSWui %stack.0.i, 0, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
224B	  %28:gpr64 = LDRSWroX %27:gpr64common, %26:gpr64, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
240B	  %30:gpr64common = LDRXui %29:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
256B	  %31:gpr64 = UBFMXri %28:gpr64, 62, 61, debug-location !293; is.c:352:21
272B	  %32:gpr64common = LDRSWroX %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
288B	  %33:gpr64common = nsw SUBXri %32:gpr64common, 1, 0, debug-location !296; is.c:352:19
320B	  STRWroX %33.sub_32:gpr64common, %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
368B	  %37:gpr32common = LDRWui %stack.0.i, 0, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
376B	  STRWroX %28.sub_32:gpr64, %35:gpr64common, %33:gpr64common, 0, 1, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
384B	  %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0, debug-location !299; is.c:351:32
400B	  STRWui %38:gpr32common, %stack.0.i, 0, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
416B	  B %bb.1, debug-location !300; is.c:351:5

432B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

464B	  STRWui $wzr, %stack.1.j, 0, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
480B	  %5:gpr32 = MOVi32imm 1
512B	  %7:gpr32 = MOVi32imm 33554431
520B	  STRWui %5:gpr32, %stack.0.i, 0, debug-location !304 :: (store 4 into %ir.i); is.c:357:12
528B	  %17:gpr64 = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

544B	bb.4.for.cond7:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

560B	  %6:gpr32 = LDRWui %stack.0.i, 0, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
576B	  dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !310; is.c:357:5
592B	  Bcc 12, %bb.8, implicit killed $nzcv, debug-location !310; is.c:357:5
608B	  B %bb.5, debug-location !310; is.c:357:5

624B	bb.5.for.body9:
	; predecessors: %bb.4
	  successors: %bb.6(0x40000000), %bb.7(0x40000000); %bb.6(50.00%), %bb.7(50.00%)

640B	  %16:gpr64 = LDRSWui %stack.0.i, 0, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
656B	  %18:gpr64common = ADDXrs %17:gpr64, %16:gpr64, 2, debug-location !316; is.c:358:32
672B	  %19:gpr32 = LDURWi %18:gpr64common, -4, debug-location !314 :: (load 4 from %ir.arrayidx11); is.c:358:13
688B	  %20:gpr32 = LDRWui %18:gpr64common, 0, debug-location !316 :: (load 4 from %ir.arrayidx13); is.c:358:32
704B	  dead $wzr = SUBSWrr %19:gpr32, %20:gpr32, implicit-def $nzcv, debug-location !318; is.c:358:13
720B	  Bcc 13, %bb.7, implicit killed $nzcv, debug-location !318; is.c:358:13
736B	  B %bb.6, debug-location !318; is.c:358:13

752B	bb.6.if.then:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

768B	  %22:gpr32common = LDRWui %stack.1.j, 0, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
784B	  %23:gpr32common = nsw ADDWri %22:gpr32common, 1, 0, debug-location !319; is.c:359:14
800B	  STRWui %23:gpr32common, %stack.1.j, 0, debug-location !319 :: (store 4 into %ir.j); is.c:359:14

816B	bb.7.for.inc16:
	; predecessors: %bb.5, %bb.6
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

832B	  %24:gpr32common = LDRWui %stack.0.i, 0, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
848B	  %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !321; is.c:357:32
864B	  STRWui %25:gpr32common, %stack.0.i, 0, debug-location !321 :: (store 4 into %ir.i); is.c:357:32
880B	  B %bb.4, debug-location !322; is.c:357:5

896B	bb.8.for.end18:
	; predecessors: %bb.4
	  successors: %bb.9(0x50000000), %bb.10(0x30000000); %bb.9(62.50%), %bb.10(37.50%)

912B	  %9:gpr32 = LDRWui %stack.1.j, 0, debug-location !325 :: (dereferenceable load 4 from %ir.j); is.c:361:9
928B	  CBZW %9:gpr32, %bb.10, debug-location !328; is.c:361:9
944B	  B %bb.9, debug-location !328; is.c:361:9

960B	bb.9.if.then20:
	; predecessors: %bb.8
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

976B	  %13:gpr64 = LDRSWui %stack.1.j, 0, debug-location !329 :: (dereferenceable load 4 from %ir.j); is.c:362:72
992B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !332; is.c:362:9
1024B	  $x0 = MOVaddr target-flags(aarch64-page) @is__str_Full_verif, target-flags(aarch64-pageoff, aarch64-nc) @is__str_Full_verif, debug-location !332; is.c:362:9
1040B	  $x1 = COPY %13:gpr64, debug-location !332; is.c:362:9
1056B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w8, debug-location !332; is.c:362:9
1072B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !332; is.c:362:9
1088B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !333; is.c:363:5
1104B	  PCN_STACKMAP 0, 0, %13:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !333; is.c:363:5
1120B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !333; is.c:363:5
1136B	  B %bb.11, debug-location !333; is.c:363:5

1152B	bb.10.if.else:
	; predecessors: %bb.8
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1168B	  %10:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
1184B	  %11:gpr32common = LDRWui %10:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
1200B	  %12:gpr32common = nsw ADDWri %11:gpr32common, 1, 0, debug-location !334; is.c:365:28
1216B	  STRWui %12:gpr32common, %10:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28

1232B	bb.11.if.end22:
	; predecessors: %bb.10, %bb.9

1248B	  RET_ReallyLR debug-location !335; is.c:366:1

# End machine code for function full_verify.

Before post-MI-sched:
# Machine code for function full_verify: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=4, align=4, at location [SP-40]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-8]
  fi#4: size=8, align=8, at location [SP-16]
  fi#5: size=8, align=8, at location [SP-24]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x19, $lr
  $sp = frame-setup SUBXri $sp, 48, 0
  frame-setup STRXui killed $x19, $sp, 3 :: (store 8 into %stack.5)
  frame-setup STPXi killed $fp, killed $lr, $sp, 4 :: (store 8 into %stack.4), (store 8 into %stack.3)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8, debug-location !284; is.c:351:12
  frame-setup CFI_INSTRUCTION offset $w29, -16, debug-location !284; is.c:351:12
  frame-setup CFI_INSTRUCTION offset $w19, -24, debug-location !284; is.c:351:12
  STRWui $wzr, $sp, 3, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
  $w8 = MOVNWi 65024, 16
  $x16 = ADRP target-flags(aarch64-page) @key_buff2
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0
  renamable $x17 = ADRP target-flags(aarch64-page) @key_buff_ptr_global
  $x18 = ADRP target-flags(aarch64-page) @key_array
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $w8, $x16, $x17, $x18
  renamable $w0 = LDRWui $sp, 3, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
  $wzr = SUBSWrs killed renamable $w0, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !290; is.c:351:5
  Bcc 12, %bb.3, implicit $nzcv, debug-location !290; is.c:351:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w8, $x16, $x17, $x18
  renamable $x0 = LDRSWui $sp, 3, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  renamable $x0 = LDRSWroX renamable $x16, killed renamable $x0, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
  renamable $x1 = LDRXui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  renamable $x2 = UBFMXri renamable $x0, 62, 61, debug-location !293; is.c:352:21
  renamable $x3 = LDRSWroX renamable $x1, renamable $x2, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
  renamable $x3 = nsw SUBXri killed renamable $x3, 1, 0, debug-location !296; is.c:352:19
  STRWroX renamable $w3, killed renamable $x1, killed renamable $x2, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
  renamable $w1 = LDRWui $sp, 3, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
  STRWroX renamable $w0, renamable $x18, killed renamable $x3, 0, 1, implicit killed $x0, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
  renamable $w0 = nsw ADDWri killed renamable $w1, 1, 0, debug-location !299; is.c:351:32
  STRWui killed renamable $w0, $sp, 3, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
  B %bb.1

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  $w16 = MOVZWi 1, 0
  $w8 = MOVNWi 65024, 16
  STPWi $wzr, killed renamable $w16, $sp, 2, debug-location !303 :: (store 4 into %ir.j), (store 4 into %ir.i); is.c:356:7
  $x16 = ADRP target-flags(aarch64-page) @key_array
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0

bb.4.for.cond7:
; predecessors: %bb.3, %bb.7
  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)
  liveins: $w8, $x16
  renamable $w17 = LDRWui $sp, 3, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
  $wzr = SUBSWrs killed renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !310; is.c:357:5
  Bcc 12, %bb.8, implicit $nzcv, debug-location !310; is.c:357:5

bb.5.for.body9:
; predecessors: %bb.4
  successors: %bb.6(0x40000000), %bb.7(0x40000000); %bb.6(50.00%), %bb.7(50.00%)
  liveins: $w8, $x16
  renamable $x17 = LDRSWui $sp, 3, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  renamable $x17 = ADDXrs renamable $x16, killed renamable $x17, 2, debug-location !316; is.c:358:32
  renamable $w18, renamable $w17 = LDPWi renamable $x17, -1, debug-location !314 :: (load 4 from %ir.arrayidx11), (load 4 from %ir.arrayidx13); is.c:358:13
  $wzr = SUBSWrs killed renamable $w18, killed renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !318; is.c:358:13
  Bcc 13, %bb.7, implicit $nzcv, debug-location !318; is.c:358:13

bb.6.if.then:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $w8, $x16
  renamable $w17 = LDRWui $sp, 2, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
  renamable $w17 = nsw ADDWri killed renamable $w17, 1, 0, debug-location !319; is.c:359:14
  STRWui killed renamable $w17, $sp, 2, debug-location !319 :: (store 4 into %ir.j); is.c:359:14

bb.7.for.inc16:
; predecessors: %bb.5, %bb.6
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $w8, $x16
  renamable $w17 = LDRWui $sp, 3, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
  renamable $w17 = nsw ADDWri killed renamable $w17, 1, 0, debug-location !321; is.c:357:32
  STRWui killed renamable $w17, $sp, 3, debug-location !321 :: (store 4 into %ir.i); is.c:357:32
  B %bb.4

bb.8.for.end18:
; predecessors: %bb.4
  successors: %bb.9(0x50000000), %bb.10(0x30000000); %bb.9(62.50%), %bb.10(37.50%)

  renamable $w8 = LDRWui $sp, 2, debug-location !325 :: (dereferenceable load 4 from %ir.j); is.c:361:9
  CBZW killed renamable $w8, %bb.10, debug-location !328; is.c:361:9

bb.9.if.then20:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  renamable $x19 = LDRSWui $sp, 2, debug-location !329 :: (dereferenceable load 4 from %ir.j); is.c:362:72
  $x0 = ADRP target-flags(aarch64-page) @is__str_Full_verif, debug-location !332; is.c:362:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_Full_verif, 0, debug-location !332; is.c:362:9
  $x1 = ORRXrs $xzr, $x19, 0, debug-location !332; is.c:362:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def dead $w8, debug-location !332; is.c:362:9
  PCN_STACKMAP 0, 0, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !333; is.c:363:5
  B %bb.11

bb.10.if.else:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
  renamable $w16 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0, debug-location !334; is.c:365:28
  STRWui killed renamable $w16, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28

bb.11.if.end22:
; predecessors: %bb.10, %bb.9

  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !335 :: (load 8 from %stack.4), (load 8 from %stack.3); is.c:366:1
  $x19 = frame-destroy LDRXui $sp, 3, debug-location !335 :: (load 8 from %stack.5); is.c:366:1
  $sp = frame-destroy ADDXri $sp, 48, 0, debug-location !335; is.c:366:1
  RET undef $lr, debug-location !335; is.c:366:1

# End machine code for function full_verify.

********** MI Scheduling **********
full_verify:%bb.0 entry
  From: STRWui $wzr, $sp, 3, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
    To: End RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 3, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVNWi 65024, 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x16 = ADRP target-flags(aarch64-page) @key_buff2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   renamable $x17 = ADRP target-flags(aarch64-page) @key_buff_ptr_global
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x18 = ADRP target-flags(aarch64-page) @key_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x18
SU(6):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x16 = ADRP target-flags(aarch64-page) @key_buff2
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 4 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x18 = ADRP target-flags(aarch64-page) @key_array
  Ready @1c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 6 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVNWi 65024, 16
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 3 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x17 = ADRP target-flags(aarch64-page) @key_buff_ptr_global
  Ready @4c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  Ready @5c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 3, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(2):   $x16 = ADRP target-flags(aarch64-page) @key_buff2
SU(5):   $x18 = ADRP target-flags(aarch64-page) @key_array
SU(1):   $w8 = MOVNWi 65024, 16
SU(3):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0
SU(4):   renamable $x17 = ADRP target-flags(aarch64-page) @key_buff_ptr_global
SU(6):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
SU(0):   STRWui $wzr, $sp, 3, debug-location !284 :: (store 4 into %ir.i); is.c:351:12

********** MI Scheduling **********
full_verify:%bb.0 entry
  From: frame-setup STRXui killed $x19, $sp, 3 :: (store 8 into %stack.5)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STRXui $x19, $sp, 3 :: (store 8 into %stack.5)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 4 :: (store 8 into %stack.4), (store 8 into %stack.3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 32, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STRXui $x19, $sp, 3 :: (store 8 into %stack.5)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 4 :: (store 8 into %stack.4), (store 8 into %stack.3)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 32, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STRXui $x19, $sp, 3 :: (store 8 into %stack.5)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 4 :: (store 8 into %stack.4), (store 8 into %stack.3)
SU(2):   $fp = frame-setup ADDXri $sp, 32, 0

Fixup kills for %bb.0
********** MI Scheduling **********
full_verify:%bb.1 for.cond
  From: renamable $w0 = LDRWui $sp, 3, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
    To: Bcc 12, %bb.3, implicit $nzcv, debug-location !290; is.c:351:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDRWui $sp, 3, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w0
SU(1):   $wzr = SUBSWrs renamable $w0, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !290; is.c:351:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.3, implicit $nzcv, debug-location !290; is.c:351:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w0 = LDRWui $sp, 3, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w0, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !290; is.c:351:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w0 = LDRWui $sp, 3, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
SU(1):   $wzr = SUBSWrs renamable $w0, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !290; is.c:351:5

Fixup kills for %bb.1
********** MI Scheduling **********
full_verify:%bb.2 for.body
  From: renamable $x0 = LDRSWui $sp, 3, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
    To: B %bb.1
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDRSWui $sp, 3, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x0
    SU(10): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
SU(1):   renamable $x0 = LDRSWroX renamable $x16, renamable $x0, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x0
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w0
    SU(8): Data Latency=0 Reg=$x0
    SU(3): Data Latency=4 Reg=$x0
    SU(6): Ord  Latency=0 Memory
SU(2):   renamable $x1 = LDRXui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(7): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x1
    SU(4): Data Latency=4 Reg=$x1
    SU(6): Ord  Latency=0 Memory
SU(3):   renamable $x2 = UBFMXri renamable $x0, 62, 61, debug-location !293; is.c:352:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=$x0
  Successors:
    SU(6): Data Latency=1 Reg=$x2
    SU(4): Data Latency=1 Reg=$x2
    SU(9): Anti Latency=0
SU(4):   renamable $x3 = LDRSWroX renamable $x1, renamable $x2, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(3): Data Latency=1 Reg=$x2
    SU(2): Data Latency=4 Reg=$x1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x3
    SU(7): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
SU(5):   renamable $x3 = nsw SUBXri renamable $x3, 1, 0, debug-location !296; is.c:352:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 7
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x3
  Successors:
    SU(6): Data Latency=1 Reg=$w3
    SU(8): Data Latency=1 Reg=$x3
SU(6):   STRWroX renamable $w3, renamable $x1, renamable $x2, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
  # preds left       : 7
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=$w3
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=1 Reg=$x2
    SU(2): Data Latency=4 Reg=$x1
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=1 Memory
SU(7):   renamable $w1 = LDRWui $sp, 3, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 5
  Predecessors:
    SU(6): Anti Latency=0
    SU(6): Ord  Latency=1 Memory
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(9): Data Latency=4 Reg=$w1
    SU(10): Ord  Latency=0 Memory
SU(8):   STRWroX renamable $w0, renamable $x18, renamable $x3, 0, 1, implicit $x0, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=1 Reg=$x3
    SU(4): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$w0
    SU(1): Data Latency=0 Reg=$x0
  Successors:
    SU(9): Anti Latency=0
SU(9):   renamable $w0 = nsw ADDWri renamable $w1, 1, 0, debug-location !299; is.c:351:32
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 1
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Data Latency=4 Reg=$w1
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(10): Data Latency=1 Reg=$w0
SU(10):   STRWui renamable $w0, $sp, 3, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$w0
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 20
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 20
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDRSWui $sp, 3, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  Ready @0c
  TopQ.A BotLatency SU(0) 20c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x1 = LDRXui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = LDRSWroX renamable $x16, renamable $x0, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x2 = UBFMXri renamable $x0, 62, 61, debug-location !293; is.c:352:21
  Ready @8c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 4
  Executed: 9c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x3 = LDRSWroX renamable $x1, renamable $x2, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
  Ready @9c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 13 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x3 = nsw SUBXri renamable $x3, 1, 0, debug-location !296; is.c:352:19
  Ready @13c
  TopQ.A TopLatency SU(5) 13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 6
  Executed: 14c
  Critical: 6c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWroX renamable $w3, renamable $x1, renamable $x2, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
  Ready @14c
  TopQ.A TopLatency SU(6) 14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 7
  Executed: 15c
  Critical: 7c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 7 
  TopQ.A RemainingLatency 0 + 15c > CritPath 20
  Cand SU(8) ORDER                              
  Cand SU(7) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $w1 = LDRWui $sp, 3, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
  Ready @15c
  TopQ.A TopLatency SU(7) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 8
  Executed: 16c
  Critical: 8c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWroX renamable $w0, renamable $x18, renamable $x3, 0, 1, implicit $x0, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 9
  Executed: 17c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 19 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $w0 = nsw ADDWri renamable $w1, 1, 0, debug-location !299; is.c:351:32
  Ready @19c
  TopQ.A TopLatency SU(9) 19c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 10
  Executed: 20c
  Critical: 10c, 10 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRWui renamable $w0, $sp, 3, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
  Ready @20c
  TopQ.A TopLatency SU(10) 20c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 11
  Executed: 21c
  Critical: 11c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x0 = LDRSWui $sp, 3, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
SU(2):   renamable $x1 = LDRXui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
SU(1):   renamable $x0 = LDRSWroX renamable $x16, renamable $x0, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
SU(3):   renamable $x2 = UBFMXri renamable $x0, 62, 61, debug-location !293; is.c:352:21
SU(4):   renamable $x3 = LDRSWroX renamable $x1, renamable $x2, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
SU(5):   renamable $x3 = nsw SUBXri renamable $x3, 1, 0, debug-location !296; is.c:352:19
SU(6):   STRWroX renamable $w3, renamable $x1, renamable $x2, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
SU(7):   renamable $w1 = LDRWui $sp, 3, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
SU(8):   STRWroX renamable $w0, renamable $x18, renamable $x3, 0, 1, implicit $x0, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
SU(9):   renamable $w0 = nsw ADDWri renamable $w1, 1, 0, debug-location !299; is.c:351:32
SU(10):   STRWui renamable $w0, $sp, 3, debug-location !299 :: (store 4 into %ir.i); is.c:351:32

Fixup kills for %bb.2
********** MI Scheduling **********
full_verify:%bb.3 for.end
  From: $w16 = MOVZWi 1, 0
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   $w16 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=1 Reg=$w16
SU(1):   $w8 = MOVNWi 65024, 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   STPWi $wzr, renamable $w16, $sp, 2, debug-location !303 :: (store 4 into %ir.j), (store 4 into %ir.i); is.c:356:7
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Data Latency=1 Reg=$w16
  Successors:
    SU(3): Anti Latency=0
SU(3):   $x16 = ADRP target-flags(aarch64-page) @key_array
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
SU(4):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w16 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(1) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) STPWi $wzr, renamable $w16, $sp, 2, debug-location !303 :: (store 4 into %ir.j), (store 4 into %ir.i); is.c:356:7
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(1) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x16 = ADRP target-flags(aarch64-page) @key_array
  Ready @2c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $w8 = MOVNWi 65024, 16
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  Ready @4c
  TopQ.A TopLatency SU(4) 2c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $w16 = MOVZWi 1, 0
SU(2):   STPWi $wzr, renamable $w16, $sp, 2, debug-location !303 :: (store 4 into %ir.j), (store 4 into %ir.i); is.c:356:7
SU(3):   $x16 = ADRP target-flags(aarch64-page) @key_array
SU(1):   $w8 = MOVNWi 65024, 16
SU(4):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0

Fixup kills for %bb.3
********** MI Scheduling **********
full_verify:%bb.4 for.cond7
  From: renamable $w17 = LDRWui $sp, 3, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
    To: Bcc 12, %bb.8, implicit $nzcv, debug-location !310; is.c:357:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w17 = LDRWui $sp, 3, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w17
SU(1):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !310; is.c:357:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.8, implicit $nzcv, debug-location !310; is.c:357:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w17 = LDRWui $sp, 3, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !310; is.c:357:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w17 = LDRWui $sp, 3, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
SU(1):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !310; is.c:357:5

Fixup kills for %bb.4
********** MI Scheduling **********
full_verify:%bb.5 for.body9
  From: renamable $x17 = LDRSWui $sp, 3, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
    To: Bcc 13, %bb.7, implicit $nzcv, debug-location !318; is.c:358:13
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x17 = LDRSWui $sp, 3, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x17
SU(1):   renamable $x17 = ADDXrs renamable $x16, renamable $x17, 2, debug-location !316; is.c:358:32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x17
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x17
SU(2):   renamable $w18, renamable $w17 = LDPWi renamable $x17, -1, debug-location !314 :: (load 4 from %ir.arrayidx11), (load 4 from %ir.arrayidx13); is.c:358:13
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x17
  Successors:
    SU(3): Data Latency=4 Reg=$w18
    SU(3): Data Latency=4 Reg=$w17
SU(3):   $wzr = SUBSWrs renamable $w18, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !318; is.c:358:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w18
    SU(2): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 13, %bb.7, implicit $nzcv, debug-location !318; is.c:358:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x17 = LDRSWui $sp, 3, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x17 = ADDXrs renamable $x16, renamable $x17, 2, debug-location !316; is.c:358:32
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w18, renamable $w17 = LDPWi renamable $x17, -1, debug-location !314 :: (load 4 from %ir.arrayidx11), (load 4 from %ir.arrayidx13); is.c:358:13
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w18, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !318; is.c:358:13
  Ready @9c
  TopQ.A TopLatency SU(3) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $x17 = LDRSWui $sp, 3, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
SU(1):   renamable $x17 = ADDXrs renamable $x16, renamable $x17, 2, debug-location !316; is.c:358:32
SU(2):   renamable $w18, renamable $w17 = LDPWi renamable $x17, -1, debug-location !314 :: (load 4 from %ir.arrayidx11), (load 4 from %ir.arrayidx13); is.c:358:13
SU(3):   $wzr = SUBSWrs renamable $w18, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !318; is.c:358:13

Fixup kills for %bb.5
********** MI Scheduling **********
full_verify:%bb.6 if.then
  From: renamable $w17 = LDRWui $sp, 2, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w17 = LDRWui $sp, 2, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w17
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !319; is.c:359:14
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w17
  Successors:
    SU(2): Data Latency=1 Reg=$w17
SU(2):   STRWui renamable $w17, $sp, 2, debug-location !319 :: (store 4 into %ir.j); is.c:359:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w17
    SU(0): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w17 = LDRWui $sp, 2, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !319; is.c:359:14
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w17, $sp, 2, debug-location !319 :: (store 4 into %ir.j); is.c:359:14
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $w17 = LDRWui $sp, 2, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
SU(1):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !319; is.c:359:14
SU(2):   STRWui renamable $w17, $sp, 2, debug-location !319 :: (store 4 into %ir.j); is.c:359:14

Fixup kills for %bb.6
********** MI Scheduling **********
full_verify:%bb.7 for.inc16
  From: renamable $w17 = LDRWui $sp, 3, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
    To: B %bb.4
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w17 = LDRWui $sp, 3, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w17
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !321; is.c:357:32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w17
  Successors:
    SU(2): Data Latency=1 Reg=$w17
SU(2):   STRWui renamable $w17, $sp, 3, debug-location !321 :: (store 4 into %ir.i); is.c:357:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w17
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.4
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w17 = LDRWui $sp, 3, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !321; is.c:357:32
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w17, $sp, 3, debug-location !321 :: (store 4 into %ir.i); is.c:357:32
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w17 = LDRWui $sp, 3, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
SU(1):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !321; is.c:357:32
SU(2):   STRWui renamable $w17, $sp, 3, debug-location !321 :: (store 4 into %ir.i); is.c:357:32

Fixup kills for %bb.7
Fixup kills for %bb.8
********** MI Scheduling **********
full_verify:%bb.9 if.then20
  From: renamable $x19 = LDRSWui $sp, 2, debug-location !329 :: (dereferenceable load 4 from %ir.j); is.c:362:72
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def dead $w8, debug-location !332; is.c:362:9
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRSWui $sp, 2, debug-location !329 :: (dereferenceable load 4 from %ir.j); is.c:362:72
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$x19
SU(1):   $x0 = ADRP target-flags(aarch64-page) @is__str_Full_verif, debug-location !332; is.c:362:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_Full_verif, 0, debug-location !332; is.c:362:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x1 = ORRXrs $xzr, $x19, 0, debug-location !332; is.c:362:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def dead $w8, debug-location !332; is.c:362:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRSWui $sp, 2, debug-location !329 :: (dereferenceable load 4 from %ir.j); is.c:362:72
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @is__str_Full_verif, debug-location !332; is.c:362:9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_Full_verif, 0, debug-location !332; is.c:362:9
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x1 = ORRXrs $xzr, $x19, 0, debug-location !332; is.c:362:9
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   renamable $x19 = LDRSWui $sp, 2, debug-location !329 :: (dereferenceable load 4 from %ir.j); is.c:362:72
SU(1):   $x0 = ADRP target-flags(aarch64-page) @is__str_Full_verif, debug-location !332; is.c:362:9
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_Full_verif, 0, debug-location !332; is.c:362:9
SU(3):   $x1 = ORRXrs $xzr, $x19, 0, debug-location !332; is.c:362:9

Fixup kills for %bb.9
********** MI Scheduling **********
full_verify:%bb.10 if.else
  From: renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=1 Reg=$x8
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w16 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w16
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !334; is.c:365:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w16
  Successors:
    SU(3): Data Latency=1 Reg=$w16
SU(3):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w16
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !334; is.c:365:28
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28
  Ready @6c
  TopQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
SU(1):   renamable $w16 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
SU(2):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !334; is.c:365:28
SU(3):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28

Fixup kills for %bb.10
********** MI Scheduling **********
full_verify:%bb.11 if.end22
  From: $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !335 :: (load 8 from %stack.4), (load 8 from %stack.3); is.c:366:1
    To: $sp = frame-destroy ADDXri $sp, 48, 0, debug-location !335; is.c:366:1
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !335 :: (load 8 from %stack.4), (load 8 from %stack.3); is.c:366:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(1):   $x19 = frame-destroy LDRXui $sp, 3, debug-location !335 :: (load 8 from %stack.5); is.c:366:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 48, 0, debug-location !335; is.c:366:1
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !335 :: (load 8 from %stack.4), (load 8 from %stack.3); is.c:366:1
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x19 = frame-destroy LDRXui $sp, 3, debug-location !335 :: (load 8 from %stack.5); is.c:366:1
  Ready @1c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !335 :: (load 8 from %stack.4), (load 8 from %stack.3); is.c:366:1
SU(1):   $x19 = frame-destroy LDRXui $sp, 3, debug-location !335 :: (load 8 from %stack.5); is.c:366:1

Fixup kills for %bb.11
Before MISched:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %0

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0
  undef %4.sub_32:gpr64 = COPY $w0
  STRWui %4.sub_32:gpr64, %stack.0.iteration.addr, 0 :: (store 4 into %ir.iteration.addr)
  %1:gpr32 = MOVi32imm 11
  STRWui %1:gpr32, %stack.5.shift, 0, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array, debug-location !355; is.c:384:5
  %3:gpr64sp = ADDXrx %2:gpr64common, %4.sub_32:gpr64, 50, debug-location !355; is.c:384:5
  %6:gpr64 = SBFMXri %4:gpr64, 0, 31, debug-location !353; is.c:384:28
  STRWui %6.sub_32:gpr64, %3:gpr64sp, 0, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
  %8:gpr32 = MOVi32imm 2097152
  %9:gpr32 = nsw SUBWrr %8:gpr32, %4.sub_32:gpr64, debug-location !358; is.c:385:53
  STRWui %9:gpr32, %3:gpr64sp, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
  STRWui $wzr, %stack.1.i, 0, debug-location !363 :: (store 4 into %ir.i); is.c:389:12
  %169:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
  %173:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %11:gpr32common = LDRWui %stack.1.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
  dead $wzr = SUBSWri %11:gpr32common, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5
  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !369; is.c:389:5
  B %bb.2, debug-location !369; is.c:389:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %166:gpr64common = LDRSWui %stack.1.i, 0, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  %168:gpr64 = UBFMXri %166:gpr64common, 62, 61, debug-location !371; is.c:390:44
  %170:gpr64 = LDRSWroX %169:gpr64common, %168:gpr64, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
  %172:gpr32 = LDRWroX %2:gpr64common, %170:gpr64, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
  STRWroX %172:gpr32, %173:gpr64common, %168:gpr64, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
  %174:gpr32common = nsw ADDWri %166.sub_32:gpr64common, 1, 0, debug-location !376; is.c:389:39
  STRWui %174:gpr32common, %stack.1.i, 0, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
  B %bb.1, debug-location !377; is.c:389:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  STRWui $wzr, %stack.1.i, 0, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
  %163:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size

bb.4.for.cond9:
; predecessors: %bb.3, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %14:gpr32common = LDRWui %stack.1.i, 0, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
  dead $wzr = SUBSWri %14:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5
  Bcc 12, %bb.6, implicit killed $nzcv, debug-location !386; is.c:395:5
  B %bb.5, debug-location !386; is.c:395:5

bb.5.for.body11:
; predecessors: %bb.4
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %161:gpr64common = LDRSWui %stack.1.i, 0, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  STRWroX $wzr, %163:gpr64common, %161:gpr64common, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
  %165:gpr32common = nsw ADDWri %161.sub_32:gpr64common, 1, 0, debug-location !390; is.c:395:35
  STRWui %165:gpr32common, %stack.1.i, 0, debug-location !390 :: (store 4 into %ir.i); is.c:395:35
  B %bb.4, debug-location !391; is.c:395:5

bb.6.for.end16:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  STRWui $wzr, %stack.1.i, 0, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
  %18:gpr32 = MOVi32imm 33554431
  %148:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  %157:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size

bb.7.for.cond17:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  %17:gpr32 = LDRWui %stack.1.i, 0, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
  dead $wzr = SUBSWrr %17:gpr32, %18:gpr32, implicit-def $nzcv, debug-location !400; is.c:399:5
  Bcc 12, %bb.9, implicit killed $nzcv, debug-location !400; is.c:399:5
  B %bb.8, debug-location !400; is.c:399:5

bb.8.for.body19:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %146:gpr64common = LDRSWui %stack.1.i, 0, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  %149:gpr32 = LDRWroX %148:gpr64common, %146:gpr64common, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
  undef %151.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
  undef %154.sub_32:gpr64 = ASRVWr %149:gpr32, %151.sub_32:gpr64, debug-location !404; is.c:400:34
  %156:gpr64 = SBFMXri %154:gpr64, 62, 31, debug-location !405; is.c:400:9
  %158:gpr32common = LDRWroX %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
  %159:gpr32common = nsw ADDWri %158:gpr32common, 1, 0, debug-location !406; is.c:400:43
  STRWroX %159:gpr32common, %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
  %160:gpr32common = nsw ADDWri %146.sub_32:gpr64common, 1, 0, debug-location !407; is.c:399:32
  STRWui %160:gpr32common, %stack.1.i, 0, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
  B %bb.7, debug-location !408; is.c:399:5

bb.9.for.end27:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %20:gpr64temp = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
  STRWui $wzr, %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  %22:gpr32 = MOVi32imm 1
  STRWui %22:gpr32, %stack.1.i, 0, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
  %140:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs
  %142:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size

bb.10.for.cond28:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

  %23:gpr32common = LDRWui %stack.1.i, 0, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
  dead $wzr = SUBSWri %23:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5
  Bcc 12, %bb.12, implicit killed $nzcv, debug-location !418; is.c:404:5
  B %bb.11, debug-location !418; is.c:404:5

bb.11.for.body30:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %136:gpr64common = LDRSWui %stack.1.i, 0, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  %138:gpr64common = UBFMXri %136:gpr64common, 62, 61, debug-location !420; is.c:405:40
  %139:gpr64common = SUBXri %138:gpr64common, 4, 0, debug-location !421; is.c:405:26
  %141:gpr32 = LDRWroX %140:gpr64common, %139:gpr64common, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
  %143:gpr32 = LDRWroX %142:gpr64common, %139:gpr64common, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
  %144:gpr32 = nsw ADDWrr %141:gpr32, %143:gpr32, debug-location !425; is.c:405:45
  STRWroX %144:gpr32, %140:gpr64common, %138:gpr64common, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
  %145:gpr32common = nsw ADDWri %136.sub_32:gpr64common, 1, 0, debug-location !429; is.c:404:35
  STRWui %145:gpr32common, %stack.1.i, 0, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
  B %bb.10, debug-location !430; is.c:404:5

bb.12.for.end42:
; predecessors: %bb.10
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  STRWui $wzr, %stack.1.i, 0, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
  %27:gpr32 = MOVi32imm 33554431
  %121:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  %130:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs
  %134:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2

bb.13.for.cond43:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

  %26:gpr32 = LDRWui %stack.1.i, 0, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
  dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !439; is.c:408:5
  Bcc 12, %bb.15, implicit killed $nzcv, debug-location !439; is.c:408:5
  B %bb.14, debug-location !439; is.c:408:5

bb.14.for.body45:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %119:gpr64common = LDRSWui %stack.1.i, 0, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  %122:gpr32 = LDRWroX %121:gpr64common, %119:gpr64common, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
  STRWui %122:gpr32, %stack.6.key, 0, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
  undef %124.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
  undef %127.sub_32:gpr64 = ASRVWr %122:gpr32, %124.sub_32:gpr64, debug-location !447; is.c:410:35
  %129:gpr64 = SBFMXri %127:gpr64, 62, 31, debug-location !448; is.c:410:19
  %131:gpr64common = LDRSWroX %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
  %133:gpr32common = nsw ADDWri %131.sub_32:gpr64common, 1, 0, debug-location !449; is.c:410:44
  STRWroX %133:gpr32common, %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
  STRWroX %122:gpr32, %134:gpr64common, %131:gpr64common, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
  %135:gpr32common = nsw ADDWri %119.sub_32:gpr64common, 1, 0, debug-location !452; is.c:408:32
  STRWui %135:gpr32common, %stack.1.i, 0, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
  B %bb.13, debug-location !453; is.c:408:5

bb.15.for.end56:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %29:gpr64 = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, debug-location !456; is.c:413:19
  STRXui %29:gpr64, %stack.4.key_buff_ptr2, 0, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  STRWui $wzr, %stack.1.i, 0, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
  %116:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1

bb.16.for.cond57:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

  %31:gpr32common = LDRWui %stack.1.i, 0, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
  dead $wzr = SUBSWri %31:gpr32common, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5
  Bcc 10, %bb.18, implicit killed $nzcv, debug-location !463; is.c:422:5
  B %bb.17, debug-location !463; is.c:422:5

bb.17.for.body59:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %114:gpr64common = LDRSWui %stack.1.i, 0, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  STRWroX $wzr, %116:gpr64common, %114:gpr64common, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
  %118:gpr32common = nsw ADDWri %114.sub_32:gpr64common, 1, 0, debug-location !467; is.c:422:31
  STRWui %118:gpr32common, %stack.1.i, 0, debug-location !467 :: (store 4 into %ir.i); is.c:422:31
  B %bb.16, debug-location !468; is.c:422:5

bb.18.for.end64:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %33:gpr64 = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, debug-location !471; is.c:427:18
  STRXui %33:gpr64, %stack.3.key_buff_ptr, 0, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  STRWui $wzr, %stack.1.i, 0, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
  %36:gpr32 = MOVi32imm 33554431

bb.19.for.cond65:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

  %35:gpr32 = LDRWui %stack.1.i, 0, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
  dead $wzr = SUBSWrr %35:gpr32, %36:gpr32, implicit-def $nzcv, debug-location !478; is.c:433:5
  Bcc 12, %bb.21, implicit killed $nzcv, debug-location !478; is.c:433:5
  B %bb.20, debug-location !478; is.c:433:5

bb.20.for.body67:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %105:gpr64common = LDRXui %stack.3.key_buff_ptr, 0, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  %106:gpr64common = LDRXui %stack.4.key_buff_ptr2, 0, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  %107:gpr64 = LDRSWui %stack.1.i, 0, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  %108:gpr64 = LDRSWroX %106:gpr64common, %107:gpr64, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
  %109:gpr64 = UBFMXri %108:gpr64, 62, 61, debug-location !479; is.c:434:9
  %110:gpr32common = LDRWroX %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
  %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0, debug-location !482; is.c:434:39
  STRWroX %111:gpr32common, %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
  %112:gpr32common = LDRWui %stack.1.i, 0, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
  %113:gpr32common = nsw ADDWri %112:gpr32common, 1, 0, debug-location !483; is.c:433:32
  STRWui %113:gpr32common, %stack.1.i, 0, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
  B %bb.19, debug-location !484; is.c:433:5

bb.21.for.end75:
; predecessors: %bb.19
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  STRWui $wzr, %stack.1.i, 0, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
  %40:gpr32 = MOVi32imm 2097150

bb.22.for.cond76:
; predecessors: %bb.21, %bb.23
  successors: %bb.23(0x7c000000), %bb.24(0x04000000); %bb.23(96.88%), %bb.24(3.12%)

  %39:gpr32 = LDRWui %stack.1.i, 0, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
  dead $wzr = SUBSWrr %39:gpr32, %40:gpr32, implicit-def $nzcv, debug-location !493; is.c:440:5
  Bcc 12, %bb.24, implicit killed $nzcv, debug-location !493; is.c:440:5
  B %bb.23, debug-location !493; is.c:440:5

bb.23.for.body78:
; predecessors: %bb.22
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  %97:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  %98:gpr64 = LDRSWui %stack.1.i, 0, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  %99:gpr64common = ADDXrs %97:gpr64, %98:gpr64, 2, debug-location !494; is.c:441:32
  %100:gpr32 = LDRWui %99:gpr64common, 0, debug-location !494 :: (load 4 from %ir.arrayidx80); is.c:441:32
  %101:gpr32 = LDRWui %99:gpr64common, 1, debug-location !499 :: (load 4 from %ir.arrayidx83); is.c:441:29
  %102:gpr32 = nsw ADDWrr %101:gpr32, %100:gpr32, debug-location !499; is.c:441:29
  STRWui %102:gpr32, %99:gpr64common, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
  %103:gpr32common = LDRWui %stack.1.i, 0, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
  %104:gpr32common = nsw ADDWri %103:gpr32common, 1, 0, debug-location !500; is.c:440:35
  STRWui %104:gpr32common, %stack.1.i, 0, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
  B %bb.22, debug-location !501; is.c:440:5

bb.24.for.end87:
; predecessors: %bb.22
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  STRWui $wzr, %stack.1.i, 0, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
  %51:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals
  %54:gpr32 = MOVi32imm 33554431
  %80:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array
  %88:gpr32 = MOVi32imm 1
  %85:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification

bb.25.for.cond88:
; predecessors: %bb.24, %bb.39
  successors: %bb.26(0x7c000000), %bb.40(0x04000000); %bb.26(96.88%), %bb.40(3.12%)

  %43:gpr32common = LDRWui %stack.1.i, 0, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
  dead $wzr = SUBSWri %43:gpr32common, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5
  Bcc 12, %bb.40, implicit killed $nzcv, debug-location !510; is.c:446:5
  B %bb.26, debug-location !510; is.c:446:5

bb.26.for.body90:
; predecessors: %bb.25
  successors: %bb.27(0x60000000), %bb.39(0x20000000); %bb.27(75.00%), %bb.39(25.00%)

  %50:gpr64 = LDRSWui %stack.1.i, 0, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  %49:gpr32common = LDRWroX %51:gpr64common, %50:gpr64, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
  STRWui %49:gpr32common, %stack.2.k, 0, debug-location !514 :: (store 4 into %ir.k); is.c:447:11
  dead $wzr = SUBSWri %49:gpr32common, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
  Bcc 11, %bb.39, implicit killed $nzcv, debug-location !520; is.c:448:19
  B %bb.27, debug-location !520; is.c:448:19

bb.27.for.body90:
; predecessors: %bb.26
  successors: %bb.28(0x55555555), %bb.39(0x2aaaaaab); %bb.28(66.67%), %bb.39(33.33%)

  dead $wzr = SUBSWrr %49:gpr32common, %54:gpr32, implicit-def $nzcv, debug-location !520; is.c:448:19
  Bcc 12, %bb.39, implicit killed $nzcv, debug-location !520; is.c:448:19
  B %bb.28, debug-location !520; is.c:448:19

bb.28.if.then:
; predecessors: %bb.27
  successors: %bb.31(0x10000000), %bb.29(0x70000000); %bb.31(12.50%), %bb.29(87.50%)

  %58:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  %59:gpr64 = LDRSWui %stack.2.k, 0, debug-location !525 :: (dereferenceable load 4 from %ir.k); is.c:449:46
  %60:gpr64common = ADDXrs %58:gpr64, %59:gpr64, 2, debug-location !524; is.c:449:33
  %61:gpr32 = LDURWi %60:gpr64common, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
  STRWui %61:gpr32, %stack.7.key_rank, 0, debug-location !523 :: (store 4 into %ir.key_rank); is.c:449:22
  STRWui $wzr, %stack.8.failed, 0, debug-location !528 :: (store 4 into %ir.failed); is.c:450:17
  %57:gpr32common = LDRWui %stack.1.i, 0, debug-location !529 :: (dereferenceable load 4 from %ir.i); is.c:496:21
  dead $wzr = SUBSWri %57:gpr32common, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  Bcc 0, %bb.31, implicit killed $nzcv, debug-location !534; is.c:496:28
  B %bb.29, debug-location !534; is.c:496:28

bb.29.if.then:
; predecessors: %bb.28
  successors: %bb.31(0x12492492), %bb.30(0x6db6db6e); %bb.31(14.29%), %bb.30(85.71%)

  dead $wzr = SUBSWri %57:gpr32common, 2, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  Bcc 0, %bb.31, implicit killed $nzcv, debug-location !534; is.c:496:28
  B %bb.30, debug-location !534; is.c:496:28

bb.30.if.then:
; predecessors: %bb.29
  successors: %bb.31(0x2aaaaaab), %bb.34(0x55555555); %bb.31(33.33%), %bb.34(66.67%)

  dead $wzr = SUBSWri %57:gpr32common, 4, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  Bcc 1, %bb.34, implicit killed $nzcv, debug-location !534; is.c:496:28
  B %bb.31, debug-location !534; is.c:496:28

bb.31.if.then102:
; predecessors: %bb.28, %bb.29, %bb.30
  successors: %bb.32(0x40000000), %bb.33(0x40000000); %bb.32(50.00%), %bb.33(50.00%)

  %78:gpr32 = LDRWui %stack.7.key_rank, 0, debug-location !537 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:25
  %79:gpr64 = LDRSWui %stack.1.i, 0, debug-location !540 :: (dereferenceable load 4 from %ir.i); is.c:497:53
  %81:gpr32 = LDRWroX %80:gpr64common, %79:gpr64, 0, 1, debug-location !541 :: (load 4 from %ir.arrayidx104); is.c:497:37
  %82:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !542 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:58
  %83:gpr32 = nsw ADDWrr %81:gpr32, %82:gpr32, debug-location !543; is.c:497:56
  dead $wzr = SUBSWrr %78:gpr32, %83:gpr32, implicit-def $nzcv, debug-location !545; is.c:497:25
  Bcc 0, %bb.33, implicit killed $nzcv, debug-location !545; is.c:497:25
  B %bb.32, debug-location !545; is.c:497:25

bb.32.if.then107:
; predecessors: %bb.31
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  STRWui %88:gpr32, %stack.8.failed, 0, debug-location !546 :: (store 4 into %ir.failed); is.c:498:32
  B %bb.37, debug-location !547; is.c:498:25

bb.33.if.else:
; predecessors: %bb.31
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  %86:gpr32common = LDRWui %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !548 :: (dereferenceable load 4 from @passed_verification); is.c:500:44
  %87:gpr32common = nsw ADDWri %86:gpr32common, 1, 0, debug-location !548; is.c:500:44
  STRWui %87:gpr32common, %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !548 :: (store 4 into @passed_verification); is.c:500:44
  B %bb.37

bb.34.if.else109:
; predecessors: %bb.30
  successors: %bb.35(0x40000000), %bb.36(0x40000000); %bb.35(50.00%), %bb.36(50.00%)

  %67:gpr32 = LDRWui %stack.7.key_rank, 0, debug-location !549 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:25
  %68:gpr64 = LDRSWui %stack.1.i, 0, debug-location !552 :: (dereferenceable load 4 from %ir.i); is.c:503:53
  %70:gpr32 = LDRWroX %80:gpr64common, %68:gpr64, 0, 1, debug-location !553 :: (load 4 from %ir.arrayidx111); is.c:503:37
  %71:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !554 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:58
  %72:gpr32 = nsw SUBWrr %70:gpr32, %71:gpr32, debug-location !555; is.c:503:56
  dead $wzr = SUBSWrr %67:gpr32, %72:gpr32, implicit-def $nzcv, debug-location !557; is.c:503:25
  Bcc 0, %bb.36, implicit killed $nzcv, debug-location !557; is.c:503:25
  B %bb.35, debug-location !557; is.c:503:25

bb.35.if.then114:
; predecessors: %bb.34
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  STRWui %88:gpr32, %stack.8.failed, 0, debug-location !558 :: (store 4 into %ir.failed); is.c:504:32
  B %bb.37, debug-location !559; is.c:504:25

bb.36.if.else115:
; predecessors: %bb.34
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  %75:gpr32common = LDRWui %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !560 :: (dereferenceable load 4 from @passed_verification); is.c:506:44
  %76:gpr32common = nsw ADDWri %75:gpr32common, 1, 0, debug-location !560; is.c:506:44
  STRWui %76:gpr32common, %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !560 :: (store 4 into @passed_verification); is.c:506:44

bb.37.if.end118:
; predecessors: %bb.36, %bb.35, %bb.33, %bb.32
  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

  %89:gpr32common = LDRWui %stack.8.failed, 0, debug-location !561 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
  dead $wzr = SUBSWri %89:gpr32common, 1, 0, implicit-def $nzcv, debug-location !564; is.c:538:17
  Bcc 1, %bb.39, implicit killed $nzcv, debug-location !564; is.c:538:17
  B %bb.38, debug-location !564; is.c:538:17

bb.38.if.then120:
; predecessors: %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  %91:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
  %92:gpr32 = LDRWui %stack.1.i, 0, debug-location !566 :: (dereferenceable load 4 from %ir.i); is.c:541:40
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !567; is.c:539:17
  $x0 = MOVaddr target-flags(aarch64-page) @is__str_1_Failed_par, target-flags(aarch64-pageoff, aarch64-nc) @is__str_1_Failed_par, debug-location !567; is.c:539:17
  $w1 = COPY %91:gpr32, debug-location !567; is.c:539:17
  $w2 = COPY %92:gpr32, debug-location !567; is.c:539:17
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $w2, implicit-def $sp, implicit-def dead $w8, debug-location !567; is.c:539:17
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !567; is.c:539:17
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !567; is.c:539:17
  PCN_STACKMAP 0, 0, 0, %stack.8.failed, 0, 0, %stack.1.i, 0, 0, %stack.0.iteration.addr, 0, 0, %stack.2.k, 0, 0, %stack.3.key_buff_ptr, 0, 0, %stack.7.key_rank, 0, %91:gpr32, %92:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !567 :: (load 8 from %stack.8.failed, align 4), (load 8 from %stack.1.i, align 4), (load 8 from %stack.0.iteration.addr, align 4), (load 8 from %stack.2.k, align 4), (load 8 from %stack.3.key_buff_ptr), (load 8 from %stack.7.key_rank, align 4); is.c:539:17
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !567; is.c:539:17

bb.39.for.inc123:
; predecessors: %bb.26, %bb.27, %bb.37, %bb.38
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %95:gpr32common = LDRWui %stack.1.i, 0, debug-location !568 :: (dereferenceable load 4 from %ir.i); is.c:446:39
  %96:gpr32common = nsw ADDWri %95:gpr32common, 1, 0, debug-location !568; is.c:446:39
  STRWui %96:gpr32common, %stack.1.i, 0, debug-location !568 :: (store 4 into %ir.i); is.c:446:39
  B %bb.25, debug-location !569; is.c:446:5

bb.40.for.end125:
; predecessors: %bb.25
  successors: %bb.41(0x40000000), %bb.42(0x40000000); %bb.41(50.00%), %bb.42(50.00%)

  %45:gpr32common = LDRWui %stack.0.iteration.addr, 0, debug-location !572 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
  dead $wzr = SUBSWri %45:gpr32common, 10, 0, implicit-def $nzcv, debug-location !575; is.c:549:9
  Bcc 1, %bb.42, implicit killed $nzcv, debug-location !575; is.c:549:9
  B %bb.41, debug-location !575; is.c:549:9

bb.41.if.then127:
; predecessors: %bb.40
  successors: %bb.42(0x80000000); %bb.42(100.00%)

  %47:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !576 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  %48:gpr64temp = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !577; is.c:550:29
  STRXui %47:gpr64, %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !577 :: (store 8 into @key_buff_ptr_global); is.c:550:29

bb.42.if.end128:
; predecessors: %bb.40, %bb.41

  RET_ReallyLR debug-location !579; is.c:551:1

# End machine code for function rank.

********** MI Scheduling **********
rank:%bb.0 entry
  From: undef %4.sub_32:gpr64 = COPY $w0
    To: End RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=4
Live In: W0 
Live Out: %173 %169 %2 
Live Thru: 
  LiveReg: %173
  LiveReg: %169
  LiveReg: %2
  UpdateRegP: SU(5) %3:gpr64sp = ADDXrx %2:gpr64common, %4.sub_32:gpr64, 50, debug-location !355; is.c:384:5
              to 
Top Pressure:
GPR32=1
Bottom Pressure:
GPR32=3
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   undef %4.sub_32:gpr64 = COPY $w0
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=0 Reg=%4
    SU(6): Data Latency=0 Reg=%4
    SU(5): Data Latency=0 Reg=%4
    SU(1): Data Latency=0 Reg=%4
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   STRWui %4.sub_32:gpr64, %stack.0.iteration.addr, 0 :: (store 4 into %ir.iteration.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %1:gpr32 = MOVi32imm 11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%1
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRWui %1:gpr32, %stack.5.shift, 0, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%1
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %2:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array, debug-location !355; is.c:384:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Data Latency=1 Reg=%2
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %3:gpr64sp = ADDXrx %2:gpr64common, %4.sub_32:gpr64, 50, debug-location !355; is.c:384:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%2
    SU(0): Data Latency=0 Reg=%4
  Successors:
    SU(10): Data Latency=1 Reg=%3
    SU(7): Data Latency=1 Reg=%3
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %6:gpr64 = SBFMXri %4:gpr64, 0, 31, debug-location !353; is.c:384:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Successors:
    SU(7): Data Latency=1 Reg=%6
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   STRWui %6.sub_32:gpr64, %3:gpr64sp, 0, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%3
    SU(6): Data Latency=1 Reg=%6
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(8):   %8:gpr32 = MOVi32imm 2097152
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Data Latency=1 Reg=%8
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   %9:gpr32 = nsw SUBWrr %8:gpr32, %4.sub_32:gpr64, debug-location !358; is.c:385:53
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%8
    SU(0): Data Latency=0 Reg=%4
  Successors:
    SU(10): Data Latency=1 Reg=%9
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   STRWui %9:gpr32, %3:gpr64sp, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%9
    SU(5): Data Latency=1 Reg=%3
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(11):   STRWui $wzr, %stack.1.i, 0, debug-location !363 :: (store 4 into %ir.i); is.c:389:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %169:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   %173:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
Critical Path(GS-RR ): 2
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 7 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 8 11 12 13 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) undef %4.sub_32:gpr64 = COPY $w0
Top Pressure:
GPR32=1
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 7 3 1 
Queue TopQ.P: 
Queue TopQ.A: 13 2 4 8 11 12 6 1 
Picking from Bot:
  Cand SU(13) REG-MAX                            
Picking from Top:
  Cand SU(13) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(13) %173:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals
Bottom Pressure:
GPR32=2
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 12 11 10 7 3 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 11 12 6 
BotQ.A RemLatency SU(10) 2c
  BotQ.A RemainingLatency 2 + 1c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(10) BOT-PATH                  2 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) STRWui %9:gpr32, %3:gpr64sp, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
Bottom Pressure:
GPR32=4
  LiveReg: %9
  UpdateRegP: SU(10) STRWui %9:gpr32, %3:gpr64sp, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
              to GPR32 1
  LiveReg: %3
  UpdateRegP: SU(7) STRWui %6.sub_32:gpr64, %3:gpr64sp, 0, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
              to GPR32 1
  UpdateRegP: SU(10) STRWui %9:gpr32, %3:gpr64sp, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
              to 
  Ready @1c
  BotQ.A TopLatency SU(10) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 12 11 3 7 9 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 11 12 6 
BotQ.A RemLatency SU(7) 2c
  BotQ.A RemainingLatency 2 + 2c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(12) REG-MAX                            
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(12) %169:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
Bottom Pressure:
GPR32=3
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 9 11 3 7 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 11 6 
  BotQ.A RemainingLatency 0 + 3c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(9) BOT-PATH                  1 cycles 
  Cand SU(7) BOT-PATH                  2 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRWui %6.sub_32:gpr64, %3:gpr64sp, 0, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
Bottom Pressure:
GPR32=4
  LiveReg: %6
  UpdateRegP: SU(7) STRWui %6.sub_32:gpr64, %3:gpr64sp, 0, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
              to 
  Ready @3c
  BotQ.A TopLatency SU(7) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 9 11 3 5 6 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 11 6 
  BotQ.A RemainingLatency 0 + 4c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(9) BOT-PATH                  1 cycles 
  Cand SU(11) REG-MAX                            
  Cand SU(5) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %3:gpr64sp = ADDXrx %2:gpr64common, %4.sub_32:gpr64, 50, debug-location !355; is.c:384:5
Bottom Pressure:
GPR32=4
  LiveReg: %4
  UpdateRegP: SU(1) STRWui %4.sub_32:gpr64, %stack.0.iteration.addr, 0 :: (store 4 into %ir.iteration.addr)
              to 
  UpdateRegP: SU(5) %3:gpr64sp = ADDXrx %2:gpr64common, %4.sub_32:gpr64, 50, debug-location !355; is.c:384:5
              to GPR32 -1
  UpdateRegP: SU(6) %6:gpr64 = SBFMXri %4:gpr64, 0, 31, debug-location !353; is.c:384:28
              to GPR32 -1
  UpdateRegP: SU(9) %9:gpr32 = nsw SUBWrr %8:gpr32, %4.sub_32:gpr64, debug-location !358; is.c:385:53
              to 
  Ready @4c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 9 11 3 6 4 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 11 6 
  BotQ.A RemainingLatency 0 + 5c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(9) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(9) %9:gpr32 = nsw SUBWrr %8:gpr32, %4.sub_32:gpr64, debug-location !358; is.c:385:53
Bottom Pressure:
GPR32=4
  LiveReg: %8
  UpdateRegP: SU(9) %9:gpr32 = nsw SUBWrr %8:gpr32, %4.sub_32:gpr64, debug-location !358; is.c:385:53
              to GPR32 -1
  Ready @5c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 11 3 6 8 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 11 6 
  BotQ.A RemainingLatency 0 + 6c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(11) STRWui $wzr, %stack.1.i, 0, debug-location !363 :: (store 4 into %ir.i); is.c:389:12
Bottom Pressure:
GPR32=4
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 8 3 6 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 6 
  BotQ.A RemainingLatency 0 + 7c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(8) %8:gpr32 = MOVi32imm 2097152
Bottom Pressure:
GPR32=3
  Ready @7c
  BotQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 6 3 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 6 
  BotQ.A RemainingLatency 0 + 8c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(3) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRWui %1:gpr32, %stack.5.shift, 0, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
Bottom Pressure:
GPR32=4
  LiveReg: %1
  UpdateRegP: SU(3) STRWui %1:gpr32, %stack.5.shift, 0, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
              to 
  Ready @8c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 6 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 6 
  BotQ.A RemainingLatency 0 + 9c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %6:gpr64 = SBFMXri %4:gpr64, 0, 31, debug-location !353; is.c:384:28
Bottom Pressure:
GPR32=3
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 
  BotQ.A RemainingLatency 0 + 10c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %2:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array, debug-location !355; is.c:384:5
Bottom Pressure:
GPR32=2
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  BotQ.A RemainingLatency 0 + 11c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %1:gpr32 = MOVi32imm 11
Bottom Pressure:
GPR32=1
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %4.sub_32:gpr64, %stack.0.iteration.addr, 0 :: (store 4 into %ir.iteration.addr)
Bottom Pressure:
GPR32=1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   undef %4.sub_32:gpr64 = COPY $w0
SU(1):   STRWui %4.sub_32:gpr64, %stack.0.iteration.addr, 0 :: (store 4 into %ir.iteration.addr)
SU(2):   %1:gpr32 = MOVi32imm 11
SU(4):   %2:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array, debug-location !355; is.c:384:5
SU(6):   %6:gpr64 = SBFMXri %4:gpr64, 0, 31, debug-location !353; is.c:384:28
SU(3):   STRWui %1:gpr32, %stack.5.shift, 0, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
SU(8):   %8:gpr32 = MOVi32imm 2097152
SU(11):   STRWui $wzr, %stack.1.i, 0, debug-location !363 :: (store 4 into %ir.i); is.c:389:12
SU(9):   %9:gpr32 = nsw SUBWrr %8:gpr32, %4.sub_32:gpr64, debug-location !358; is.c:385:53
SU(5):   %3:gpr64sp = ADDXrx %2:gpr64common, %4.sub_32:gpr64, 50, debug-location !355; is.c:384:5
SU(7):   STRWui %6.sub_32:gpr64, %3:gpr64sp, 0, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
SU(12):   %169:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
SU(10):   STRWui %9:gpr32, %3:gpr64sp, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
SU(13):   %173:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals

********** MI Scheduling **********
rank:%bb.1 for.cond
  From: %11:gpr32common = LDRWui %stack.1.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
    To: Bcc 12, %bb.3, implicit killed $nzcv, debug-location !369; is.c:389:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %11:gpr32common = LDRWui %stack.1.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%11
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %11:gpr32common, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%11
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.3, implicit killed $nzcv, debug-location !369; is.c:389:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %11:gpr32common, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %11:gpr32common = LDRWui %stack.1.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %11:gpr32common = LDRWui %stack.1.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
SU(1):   dead $wzr = SUBSWri %11:gpr32common, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5

********** MI Scheduling **********
rank:%bb.2 for.body
  From: %166:gpr64common = LDRSWui %stack.1.i, 0, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
    To: B %bb.1, debug-location !377; is.c:389:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %166:gpr64common = LDRSWui %stack.1.i, 0, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(5): Data Latency=4 Reg=%166
    SU(1): Data Latency=4 Reg=%166
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %168:gpr64 = UBFMXri %166:gpr64common, 62, 61, debug-location !371; is.c:390:44
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%166
  Successors:
    SU(4): Data Latency=1 Reg=%168
    SU(2): Data Latency=1 Reg=%168
  Single Issue       : false;
SU(2):   %170:gpr64 = LDRSWroX %169:gpr64common, %168:gpr64, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(1): Data Latency=1 Reg=%168
  Successors:
    SU(3): Data Latency=4 Reg=%170
  Single Issue       : false;
SU(3):   %172:gpr32 = LDRWroX %2:gpr64common, %170:gpr64, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%170
  Successors:
    SU(4): Data Latency=4 Reg=%172
  Single Issue       : false;
SU(4):   STRWroX %172:gpr32, %173:gpr64common, %168:gpr64, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%172
    SU(1): Data Latency=1 Reg=%168
  Single Issue       : false;
SU(5):   %174:gpr32common = nsw ADDWri %166.sub_32:gpr64common, 1, 0, debug-location !376; is.c:389:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%166
  Successors:
    SU(6): Data Latency=1 Reg=%174
  Single Issue       : false;
SU(6):   STRWui %174:gpr32common, %stack.1.i, 0, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%174
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !377; is.c:389:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %166:gpr64common = LDRSWui %stack.1.i, 0, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  Ready @0c
  TopQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 1 
TopQ.A RemLatency SU(1) 9c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) STRWui %174:gpr32common, %stack.1.i, 0, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
Queue TopQ.P: 
Queue TopQ.A: 5 1 
BotQ.A RemLatency SU(4) 13c
  BotQ.A RemainingLatency 13 + 1c > CritPath 13
TopQ.A RemLatency SU(1) 9c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRWroX %172:gpr32, %173:gpr64common, %168:gpr64, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
  Ready @1c
  BotQ.A TopLatency SU(4) 13c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %174:gpr32common = nsw ADDWri %166.sub_32:gpr64common, 1, 0, debug-location !376; is.c:389:39
  Ready @2c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %172:gpr32 = LDRWroX %2:gpr64common, %170:gpr64, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
  Ready @5c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %170:gpr64 = LDRSWroX %169:gpr64common, %168:gpr64, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
  Ready @9c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %168:gpr64 = UBFMXri %166:gpr64common, 62, 61, debug-location !371; is.c:390:44
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %166:gpr64common = LDRSWui %stack.1.i, 0, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
SU(1):   %168:gpr64 = UBFMXri %166:gpr64common, 62, 61, debug-location !371; is.c:390:44
SU(2):   %170:gpr64 = LDRSWroX %169:gpr64common, %168:gpr64, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
SU(3):   %172:gpr32 = LDRWroX %2:gpr64common, %170:gpr64, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
SU(5):   %174:gpr32common = nsw ADDWri %166.sub_32:gpr64common, 1, 0, debug-location !376; is.c:389:39
SU(4):   STRWroX %172:gpr32, %173:gpr64common, %168:gpr64, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
SU(6):   STRWui %174:gpr32common, %stack.1.i, 0, debug-location !376 :: (store 4 into %ir.i); is.c:389:39

********** MI Scheduling **********
rank:%bb.3 for.end
  From: STRWui $wzr, %stack.1.i, 0, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %163:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %163:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.1.i, 0, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
SU(1):   %163:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size

********** MI Scheduling **********
rank:%bb.4 for.cond9
  From: %14:gpr32common = LDRWui %stack.1.i, 0, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
    To: Bcc 12, %bb.6, implicit killed $nzcv, debug-location !386; is.c:395:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %14:gpr32common = LDRWui %stack.1.i, 0, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%14
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %14:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.6, implicit killed $nzcv, debug-location !386; is.c:395:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %14:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %14:gpr32common = LDRWui %stack.1.i, 0, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %14:gpr32common = LDRWui %stack.1.i, 0, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
SU(1):   dead $wzr = SUBSWri %14:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5

********** MI Scheduling **********
rank:%bb.5 for.body11
  From: %161:gpr64common = LDRSWui %stack.1.i, 0, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
    To: B %bb.4, debug-location !391; is.c:395:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %161:gpr64common = LDRSWui %stack.1.i, 0, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%161
    SU(1): Data Latency=4 Reg=%161
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRWroX $wzr, %163:gpr64common, %161:gpr64common, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%161
  Single Issue       : false;
SU(2):   %165:gpr32common = nsw ADDWri %161.sub_32:gpr64common, 1, 0, debug-location !390; is.c:395:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%161
  Successors:
    SU(3): Data Latency=1 Reg=%165
  Single Issue       : false;
SU(3):   STRWui %165:gpr32common, %stack.1.i, 0, debug-location !390 :: (store 4 into %ir.i); is.c:395:35
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%165
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.4, debug-location !391; is.c:395:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %161:gpr64common = LDRSWui %stack.1.i, 0, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRWui %165:gpr32common, %stack.1.i, 0, debug-location !390 :: (store 4 into %ir.i); is.c:395:35
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(1) 4c
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %165:gpr32common = nsw ADDWri %161.sub_32:gpr64common, 1, 0, debug-location !390; is.c:395:35
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWroX $wzr, %163:gpr64common, %161:gpr64common, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
  Ready @2c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %161:gpr64common = LDRSWui %stack.1.i, 0, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
SU(1):   STRWroX $wzr, %163:gpr64common, %161:gpr64common, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
SU(2):   %165:gpr32common = nsw ADDWri %161.sub_32:gpr64common, 1, 0, debug-location !390; is.c:395:35
SU(3):   STRWui %165:gpr32common, %stack.1.i, 0, debug-location !390 :: (store 4 into %ir.i); is.c:395:35

********** MI Scheduling **********
rank:%bb.6 for.end16
  From: STRWui $wzr, %stack.1.i, 0, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %18:gpr32 = MOVi32imm 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %148:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %157:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %157:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %148:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %18:gpr32 = MOVi32imm 33554431
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.1.i, 0, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
SU(1):   %18:gpr32 = MOVi32imm 33554431
SU(2):   %148:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
SU(3):   %157:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size

********** MI Scheduling **********
rank:%bb.7 for.cond17
  From: %17:gpr32 = LDRWui %stack.1.i, 0, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
    To: Bcc 12, %bb.9, implicit killed $nzcv, debug-location !400; is.c:399:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %17:gpr32 = LDRWui %stack.1.i, 0, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%17
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %17:gpr32, %18:gpr32, implicit-def $nzcv, debug-location !400; is.c:399:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.9, implicit killed $nzcv, debug-location !400; is.c:399:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %17:gpr32, %18:gpr32, implicit-def $nzcv, debug-location !400; is.c:399:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %17:gpr32 = LDRWui %stack.1.i, 0, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %17:gpr32 = LDRWui %stack.1.i, 0, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
SU(1):   dead $wzr = SUBSWrr %17:gpr32, %18:gpr32, implicit-def $nzcv, debug-location !400; is.c:399:5

********** MI Scheduling **********
rank:%bb.8 for.body19
  From: %146:gpr64common = LDRSWui %stack.1.i, 0, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
    To: B %bb.7, debug-location !408; is.c:399:5
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=5
Live In: %157 %148 
Live Out: %157 %148 
Live Thru: GPR32=2
  LiveReg: %157
  UpdateRegP: SU(5) %158:gpr32common = LDRWroX %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
              to 
  UpdateRegP: SU(7) STRWroX %159:gpr32common, %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
              to GPR32 2
  LiveReg: %148
  UpdateRegP: SU(1) %149:gpr32 = LDRWroX %148:gpr64common, %146:gpr64common, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
              to 
Top Pressure:
GPR32=2
Bottom Pressure:
GPR32=2
Excess PSets: 
SU(0):   %146:gpr64common = LDRSWui %stack.1.i, 0, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(8): Data Latency=4 Reg=%146
    SU(1): Data Latency=4 Reg=%146
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %149:gpr32 = LDRWroX %148:gpr64common, %146:gpr64common, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Data Latency=4 Reg=%146
  Successors:
    SU(3): Data Latency=4 Reg=%149
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   undef %151.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%151
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   undef %154.sub_32:gpr64 = ASRVWr %149:gpr32, %151.sub_32:gpr64, debug-location !404; is.c:400:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%149
    SU(2): Data Latency=4 Reg=%151
  Successors:
    SU(4): Data Latency=1 Reg=%154
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %156:gpr64 = SBFMXri %154:gpr64, 62, 31, debug-location !405; is.c:400:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(3): Data Latency=1 Reg=%154
  Successors:
    SU(7): Data Latency=1 Reg=%156
    SU(5): Data Latency=1 Reg=%156
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %158:gpr32common = LDRWroX %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=%156
  Successors:
    SU(6): Data Latency=4 Reg=%158
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %159:gpr32common = nsw ADDWri %158:gpr32common, 1, 0, debug-location !406; is.c:400:43
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=%158
  Successors:
    SU(7): Data Latency=1 Reg=%159
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   STRWroX %159:gpr32common, %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%159
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=1 Reg=%156
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(8):   %160:gpr32common = nsw ADDWri %146.sub_32:gpr64common, 1, 0, debug-location !407; is.c:399:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%146
  Successors:
    SU(9): Data Latency=1 Reg=%160
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   STRWui %160:gpr32common, %stack.1.i, 0, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%160
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.7, debug-location !408; is.c:399:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) STRWui %160:gpr32common, %stack.1.i, 0, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
Bottom Pressure:
GPR32=3
  LiveReg: %160
  UpdateRegP: SU(9) STRWui %160:gpr32common, %stack.1.i, 0, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(7) 15c
  BotQ.A RemainingLatency 15 + 1c > CritPath 15
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRWroX %159:gpr32common, %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
Bottom Pressure:
GPR32=5
  LiveReg: %159
  UpdateRegP: SU(7) STRWroX %159:gpr32common, %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
              to GPR32 1
  LiveReg: %156
  UpdateRegP: SU(5) %158:gpr32common = LDRWroX %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
              to GPR32 -1
  UpdateRegP: SU(7) STRWroX %159:gpr32common, %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
              to 
  Ready @1c
  BotQ.A TopLatency SU(7) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(6) 14c
  BotQ.A RemainingLatency 14 + 2c > CritPath 15
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(6) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %159:gpr32common = nsw ADDWri %158:gpr32common, 1, 0, debug-location !406; is.c:400:43
Bottom Pressure:
GPR32=5
  LiveReg: %158
  UpdateRegP: SU(6) %159:gpr32common = nsw ADDWri %158:gpr32common, 1, 0, debug-location !406; is.c:400:43
              to GPR32 -1
  Ready @2c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %160:gpr32common = nsw ADDWri %146.sub_32:gpr64common, 1, 0, debug-location !407; is.c:399:32
Bottom Pressure:
GPR32=5
  LiveReg: %146
  UpdateRegP: SU(1) %149:gpr32 = LDRWroX %148:gpr64common, %146:gpr64common, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
              to GPR32 -1
  UpdateRegP: SU(8) %160:gpr32common = nsw ADDWri %146.sub_32:gpr64common, 1, 0, debug-location !407; is.c:399:32
              to GPR32 -1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %158:gpr32common = LDRWroX %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
Bottom Pressure:
GPR32=4
  Ready @6c
  BotQ.A BotLatency SU(5) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %156:gpr64 = SBFMXri %154:gpr64, 62, 31, debug-location !405; is.c:400:9
Bottom Pressure:
GPR32=4
  LiveReg: %154
  UpdateRegP: SU(4) %156:gpr64 = SBFMXri %154:gpr64, 62, 31, debug-location !405; is.c:400:9
              to GPR32 -1
  Ready @7c
  BotQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) undef %154.sub_32:gpr64 = ASRVWr %149:gpr32, %151.sub_32:gpr64, debug-location !404; is.c:400:34
Bottom Pressure:
GPR32=5
  LiveReg: %149
  UpdateRegP: SU(3) undef %154.sub_32:gpr64 = ASRVWr %149:gpr32, %151.sub_32:gpr64, debug-location !404; is.c:400:34
              to 
  LiveReg: %151
  UpdateRegP: SU(3) undef %154.sub_32:gpr64 = ASRVWr %149:gpr32, %151.sub_32:gpr64, debug-location !404; is.c:400:34
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 12 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 12c > CritPath 15
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %149:gpr32 = LDRWroX %148:gpr64common, %146:gpr64common, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
Bottom Pressure:
GPR32=4
  Ready @12c
  BotQ.A BotLatency SU(1) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) undef %151.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
Bottom Pressure:
GPR32=3
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %146:gpr64common = LDRSWui %stack.1.i, 0, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
Bottom Pressure:
GPR32=2
  Ready @16c
  BotQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 10
  Executed: 17c
  Critical: 10c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %146:gpr64common = LDRSWui %stack.1.i, 0, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
SU(2):   undef %151.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
SU(1):   %149:gpr32 = LDRWroX %148:gpr64common, %146:gpr64common, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
SU(3):   undef %154.sub_32:gpr64 = ASRVWr %149:gpr32, %151.sub_32:gpr64, debug-location !404; is.c:400:34
SU(4):   %156:gpr64 = SBFMXri %154:gpr64, 62, 31, debug-location !405; is.c:400:9
SU(5):   %158:gpr32common = LDRWroX %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
SU(8):   %160:gpr32common = nsw ADDWri %146.sub_32:gpr64common, 1, 0, debug-location !407; is.c:399:32
SU(6):   %159:gpr32common = nsw ADDWri %158:gpr32common, 1, 0, debug-location !406; is.c:400:43
SU(7):   STRWroX %159:gpr32common, %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
SU(9):   STRWui %160:gpr32common, %stack.1.i, 0, debug-location !407 :: (store 4 into %ir.i); is.c:399:32

********** MI Scheduling **********
rank:%bb.9 for.end27
  From: %20:gpr64temp = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %20:gpr64temp = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%20
  Single Issue       : false;
SU(1):   STRWui $wzr, %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%20
  Single Issue       : false;
SU(2):   %22:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%22
  Single Issue       : false;
SU(3):   STRWui %22:gpr32, %stack.1.i, 0, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%22
  Single Issue       : false;
SU(4):   %140:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %142:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 5 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %142:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRWui %22:gpr32, %stack.1.i, 0, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
  Ready @1c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui $wzr, %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  Ready @2c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %140:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %22:gpr32 = MOVi32imm 1
  Ready @4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %20:gpr64temp = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %20:gpr64temp = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
SU(2):   %22:gpr32 = MOVi32imm 1
SU(4):   %140:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs
SU(1):   STRWui $wzr, %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
SU(3):   STRWui %22:gpr32, %stack.1.i, 0, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
SU(5):   %142:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size

********** MI Scheduling **********
rank:%bb.10 for.cond28
  From: %23:gpr32common = LDRWui %stack.1.i, 0, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
    To: Bcc 12, %bb.12, implicit killed $nzcv, debug-location !418; is.c:404:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %23:gpr32common = LDRWui %stack.1.i, 0, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%23
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %23:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%23
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.12, implicit killed $nzcv, debug-location !418; is.c:404:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %23:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %23:gpr32common = LDRWui %stack.1.i, 0, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %23:gpr32common = LDRWui %stack.1.i, 0, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
SU(1):   dead $wzr = SUBSWri %23:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5

********** MI Scheduling **********
rank:%bb.11 for.body30
  From: %136:gpr64common = LDRSWui %stack.1.i, 0, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
    To: B %bb.10, debug-location !430; is.c:404:5
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=6
Live In: %140 %142 
Live Out: %140 %142 
Live Thru: GPR32=2
  LiveReg: %140
  UpdateRegP: SU(3) %141:gpr32 = LDRWroX %140:gpr64common, %139:gpr64common, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
              to 
  UpdateRegP: SU(6) STRWroX %144:gpr32, %140:gpr64common, %138:gpr64common, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
              to GPR32 2
  LiveReg: %142
  UpdateRegP: SU(4) %143:gpr32 = LDRWroX %142:gpr64common, %139:gpr64common, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
              to 
Top Pressure:
GPR32=2
Bottom Pressure:
GPR32=2
Excess PSets: 
SU(0):   %136:gpr64common = LDRSWui %stack.1.i, 0, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(7): Data Latency=4 Reg=%136
    SU(1): Data Latency=4 Reg=%136
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %138:gpr64common = UBFMXri %136:gpr64common, 62, 61, debug-location !420; is.c:405:40
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=%136
  Successors:
    SU(6): Data Latency=1 Reg=%138
    SU(2): Data Latency=1 Reg=%138
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %139:gpr64common = SUBXri %138:gpr64common, 4, 0, debug-location !421; is.c:405:26
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=%138
  Successors:
    SU(4): Data Latency=1 Reg=%139
    SU(3): Data Latency=1 Reg=%139
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %141:gpr32 = LDRWroX %140:gpr64common, %139:gpr64common, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%139
  Successors:
    SU(5): Data Latency=4 Reg=%141
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %143:gpr32 = LDRWroX %142:gpr64common, %139:gpr64common, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%139
  Successors:
    SU(5): Data Latency=4 Reg=%143
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %144:gpr32 = nsw ADDWrr %141:gpr32, %143:gpr32, debug-location !425; is.c:405:45
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%143
    SU(3): Data Latency=4 Reg=%141
  Successors:
    SU(6): Data Latency=1 Reg=%144
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   STRWroX %144:gpr32, %140:gpr64common, %138:gpr64common, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%144
    SU(3): Ord  Latency=0 Memory
    SU(1): Data Latency=1 Reg=%138
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(7):   %145:gpr32common = nsw ADDWri %136.sub_32:gpr64common, 1, 0, debug-location !429; is.c:404:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%136
  Successors:
    SU(8): Data Latency=1 Reg=%145
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   STRWui %145:gpr32common, %stack.1.i, 0, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%145
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.10, debug-location !430; is.c:404:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %136:gpr64common = LDRSWui %stack.1.i, 0, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
Top Pressure:
GPR32=3
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 1 
TopQ.A RemLatency SU(1) 7c
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(7) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) STRWui %145:gpr32common, %stack.1.i, 0, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
Bottom Pressure:
GPR32=3
  LiveReg: %145
  UpdateRegP: SU(8) STRWui %145:gpr32common, %stack.1.i, 0, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
Queue TopQ.P: 
Queue TopQ.A: 7 1 
BotQ.A RemLatency SU(6) 11c
  BotQ.A RemainingLatency 11 + 1c > CritPath 11
TopQ.A RemLatency SU(1) 7c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) STRWroX %144:gpr32, %140:gpr64common, %138:gpr64common, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
Bottom Pressure:
GPR32=5
  LiveReg: %144
  UpdateRegP: SU(6) STRWroX %144:gpr32, %140:gpr64common, %138:gpr64common, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
              to GPR32 1
  LiveReg: %138
  UpdateRegP: SU(2) %139:gpr64common = SUBXri %138:gpr64common, 4, 0, debug-location !421; is.c:405:26
              to GPR32 -1
  UpdateRegP: SU(6) STRWroX %144:gpr32, %140:gpr64common, %138:gpr64common, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
              to 
  Ready @1c
  BotQ.A TopLatency SU(6) 11c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 7 1 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 2c > CritPath 11
TopQ.A RemLatency SU(1) 7c
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(5) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %144:gpr32 = nsw ADDWrr %141:gpr32, %143:gpr32, debug-location !425; is.c:405:45
Bottom Pressure:
GPR32=6
  LiveReg: %141
  UpdateRegP: SU(5) %144:gpr32 = nsw ADDWrr %141:gpr32, %143:gpr32, debug-location !425; is.c:405:45
              to 
  LiveReg: %143
  UpdateRegP: SU(5) %144:gpr32 = nsw ADDWrr %141:gpr32, %143:gpr32, debug-location !425; is.c:405:45
              to GPR32 -1
  Ready @2c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 3 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %145:gpr32common = nsw ADDWri %136.sub_32:gpr64common, 1, 0, debug-location !429; is.c:404:35
Bottom Pressure:
GPR32=6
  LiveReg: %136
  UpdateRegP: SU(1) %138:gpr64common = UBFMXri %136:gpr64common, 62, 61, debug-location !420; is.c:405:40
              to GPR32 -1
  UpdateRegP: SU(7) %145:gpr32common = nsw ADDWri %136.sub_32:gpr64common, 1, 0, debug-location !429; is.c:404:35
              to GPR32 -1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %138:gpr64common = UBFMXri %136:gpr64common, 62, 61, debug-location !420; is.c:405:40
Top Pressure:
GPR32=4
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) %139:gpr64common = SUBXri %138:gpr64common, 4, 0, debug-location !421; is.c:405:26
Top Pressure:
GPR32=5
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 4 3 
BotQ.A RemLatency SU(4) 6c
  BotQ.A RemainingLatency 6 + 6c > CritPath 11
TopQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %143:gpr32 = LDRWroX %142:gpr64common, %139:gpr64common, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
Bottom Pressure:
GPR32=6
  LiveReg: %139
  UpdateRegP: SU(3) %141:gpr32 = LDRWroX %140:gpr64common, %139:gpr64common, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
              to GPR32 -1
  UpdateRegP: SU(4) %143:gpr32 = LDRWroX %142:gpr64common, %139:gpr64common, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
              to GPR32 -1
  Ready @6c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %141:gpr32 = LDRWroX %140:gpr64common, %139:gpr64common, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
Bottom Pressure:
GPR32=5
  Ready @7c
  BotQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %136:gpr64common = LDRSWui %stack.1.i, 0, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
SU(1):   %138:gpr64common = UBFMXri %136:gpr64common, 62, 61, debug-location !420; is.c:405:40
SU(2):   %139:gpr64common = SUBXri %138:gpr64common, 4, 0, debug-location !421; is.c:405:26
SU(3):   %141:gpr32 = LDRWroX %140:gpr64common, %139:gpr64common, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
SU(4):   %143:gpr32 = LDRWroX %142:gpr64common, %139:gpr64common, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
SU(7):   %145:gpr32common = nsw ADDWri %136.sub_32:gpr64common, 1, 0, debug-location !429; is.c:404:35
SU(5):   %144:gpr32 = nsw ADDWrr %141:gpr32, %143:gpr32, debug-location !425; is.c:405:45
SU(6):   STRWroX %144:gpr32, %140:gpr64common, %138:gpr64common, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
SU(8):   STRWui %145:gpr32common, %stack.1.i, 0, debug-location !429 :: (store 4 into %ir.i); is.c:404:35

********** MI Scheduling **********
rank:%bb.12 for.end42
  From: STRWui $wzr, %stack.1.i, 0, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %27:gpr32 = MOVi32imm 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %121:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %130:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %134:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %134:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %130:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %121:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %27:gpr32 = MOVi32imm 33554431
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.1.i, 0, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
SU(1):   %27:gpr32 = MOVi32imm 33554431
SU(2):   %121:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
SU(3):   %130:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs
SU(4):   %134:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2

********** MI Scheduling **********
rank:%bb.13 for.cond43
  From: %26:gpr32 = LDRWui %stack.1.i, 0, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
    To: Bcc 12, %bb.15, implicit killed $nzcv, debug-location !439; is.c:408:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %26:gpr32 = LDRWui %stack.1.i, 0, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%26
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !439; is.c:408:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%26
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.15, implicit killed $nzcv, debug-location !439; is.c:408:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !439; is.c:408:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %26:gpr32 = LDRWui %stack.1.i, 0, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %26:gpr32 = LDRWui %stack.1.i, 0, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
SU(1):   dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !439; is.c:408:5

********** MI Scheduling **********
rank:%bb.14 for.body45
  From: %119:gpr64common = LDRSWui %stack.1.i, 0, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
    To: B %bb.13, debug-location !453; is.c:408:5
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=8
Live In: %134 %130 %121 
Live Out: %134 %130 %121 
Live Thru: GPR32=3
  LiveReg: %134
  UpdateRegP: SU(9) STRWroX %122:gpr32, %134:gpr64common, %131:gpr64common, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
              to GPR32 2
  LiveReg: %130
  UpdateRegP: SU(6) %131:gpr64common = LDRSWroX %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
              to 
  UpdateRegP: SU(8) STRWroX %133:gpr32common, %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
              to GPR32 2
  LiveReg: %121
  UpdateRegP: SU(1) %122:gpr32 = LDRWroX %121:gpr64common, %119:gpr64common, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
              to 
Top Pressure:
GPR32=3
Bottom Pressure:
GPR32=3
Excess PSets: 
SU(0):   %119:gpr64common = LDRSWui %stack.1.i, 0, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(10): Data Latency=4 Reg=%119
    SU(1): Data Latency=4 Reg=%119
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %122:gpr32 = LDRWroX %121:gpr64common, %119:gpr64common, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Data Latency=4 Reg=%119
  Successors:
    SU(9): Data Latency=4 Reg=%122
    SU(4): Data Latency=4 Reg=%122
    SU(2): Data Latency=4 Reg=%122
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   STRWui %122:gpr32, %stack.6.key, 0, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%122
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   undef %124.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(4): Data Latency=4 Reg=%124
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   undef %127.sub_32:gpr64 = ASRVWr %122:gpr32, %124.sub_32:gpr64, debug-location !447; is.c:410:35
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%122
    SU(3): Data Latency=4 Reg=%124
  Successors:
    SU(5): Data Latency=1 Reg=%127
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   %129:gpr64 = SBFMXri %127:gpr64, 62, 31, debug-location !448; is.c:410:19
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(4): Data Latency=1 Reg=%127
  Successors:
    SU(8): Data Latency=1 Reg=%129
    SU(6): Data Latency=1 Reg=%129
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %131:gpr64common = LDRSWroX %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(5): Data Latency=1 Reg=%129
  Successors:
    SU(9): Data Latency=4 Reg=%131
    SU(7): Data Latency=4 Reg=%131
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %133:gpr32common = nsw ADDWri %131.sub_32:gpr64common, 1, 0, debug-location !449; is.c:410:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%131
  Successors:
    SU(8): Data Latency=1 Reg=%133
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   STRWroX %133:gpr32common, %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%133
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=1 Reg=%129
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(9):   STRWroX %122:gpr32, %134:gpr64common, %131:gpr64common, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=%131
    SU(1): Data Latency=4 Reg=%122
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(10):   %135:gpr32common = nsw ADDWri %119.sub_32:gpr64common, 1, 0, debug-location !452; is.c:408:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%119
  Successors:
    SU(11): Data Latency=1 Reg=%135
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   STRWui %135:gpr32common, %stack.1.i, 0, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%135
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.13, debug-location !453; is.c:408:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 9 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) STRWui %135:gpr32common, %stack.1.i, 0, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
Bottom Pressure:
GPR32=4
  LiveReg: %135
  UpdateRegP: SU(11) STRWui %135:gpr32common, %stack.1.i, 0, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
              to 
  Ready @0c
  BotQ.A TopLatency SU(11) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 9 8 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(8) 15c
  BotQ.A RemainingLatency 15 + 1c > CritPath 15
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(9) BOT-PATH                  14 cycles 
  Cand SU(8) BOT-PATH                  15 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) STRWroX %133:gpr32common, %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
Bottom Pressure:
GPR32=6
  LiveReg: %133
  UpdateRegP: SU(8) STRWroX %133:gpr32common, %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
              to GPR32 1
  LiveReg: %129
  UpdateRegP: SU(6) %131:gpr64common = LDRSWroX %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
              to GPR32 -1
  UpdateRegP: SU(8) STRWroX %133:gpr32common, %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
              to 
  Ready @1c
  BotQ.A TopLatency SU(8) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 9 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(9) 14c
  BotQ.A RemainingLatency 14 + 2c > CritPath 15
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(9) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) STRWroX %122:gpr32, %134:gpr64common, %131:gpr64common, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
Bottom Pressure:
GPR32=8
  LiveReg: %122
  UpdateRegP: SU(2) STRWui %122:gpr32, %stack.6.key, 0, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
              to 
  UpdateRegP: SU(4) undef %127.sub_32:gpr64 = ASRVWr %122:gpr32, %124.sub_32:gpr64, debug-location !447; is.c:410:35
              to 
  UpdateRegP: SU(9) STRWroX %122:gpr32, %134:gpr64common, %131:gpr64common, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
              to GPR32 1
  LiveReg: %131
  UpdateRegP: SU(7) %133:gpr32common = nsw ADDWri %131.sub_32:gpr64common, 1, 0, debug-location !449; is.c:410:44
              to GPR32 -1
  UpdateRegP: SU(9) STRWroX %122:gpr32, %134:gpr64common, %131:gpr64common, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
              to 
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(7) 14c
  BotQ.A RemainingLatency 14 + 3c > CritPath 15
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %133:gpr32common = nsw ADDWri %131.sub_32:gpr64common, 1, 0, debug-location !449; is.c:410:44
Bottom Pressure:
GPR32=7
  Ready @3c
  BotQ.A TopLatency SU(7) 14c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 2 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(2) 8c
BotQ.A RemLatency SU(6) 10c
  BotQ.A RemainingLatency 13 + 4c > CritPath 15
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRWui %122:gpr32, %stack.6.key, 0, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
Bottom Pressure:
GPR32=7
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %135:gpr32common = nsw ADDWri %119.sub_32:gpr64common, 1, 0, debug-location !452; is.c:408:32
Bottom Pressure:
GPR32=7
  LiveReg: %119
  UpdateRegP: SU(1) %122:gpr32 = LDRWroX %121:gpr64common, %119:gpr64common, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
              to GPR32 -1
  UpdateRegP: SU(10) %135:gpr32common = nsw ADDWri %119.sub_32:gpr64common, 1, 0, debug-location !452; is.c:408:32
              to GPR32 -1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %131:gpr64common = LDRSWroX %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
Bottom Pressure:
GPR32=6
  Ready @7c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %129:gpr64 = SBFMXri %127:gpr64, 62, 31, debug-location !448; is.c:410:19
Bottom Pressure:
GPR32=6
  LiveReg: %127
  UpdateRegP: SU(5) %129:gpr64 = SBFMXri %127:gpr64, 62, 31, debug-location !448; is.c:410:19
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) undef %127.sub_32:gpr64 = ASRVWr %122:gpr32, %124.sub_32:gpr64, debug-location !447; is.c:410:35
Bottom Pressure:
GPR32=6
  LiveReg: %124
  UpdateRegP: SU(4) undef %127.sub_32:gpr64 = ASRVWr %122:gpr32, %124.sub_32:gpr64, debug-location !447; is.c:410:35
              to GPR32 -1
  Ready @9c
  BotQ.A BotLatency SU(4) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 13 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 13c > CritPath 15
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %122:gpr32 = LDRWroX %121:gpr64common, %119:gpr64common, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
Bottom Pressure:
GPR32=5
  Ready @13c
  BotQ.A BotLatency SU(1) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 10
  Executed: 14c
  Critical: 10c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) undef %124.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
Bottom Pressure:
GPR32=4
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 11
  Executed: 15c
  Critical: 11c, 11 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 17 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %119:gpr64common = LDRSWui %stack.1.i, 0, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
Bottom Pressure:
GPR32=3
  Ready @17c
  BotQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 12
  Executed: 18c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %119:gpr64common = LDRSWui %stack.1.i, 0, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
SU(3):   undef %124.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
SU(1):   %122:gpr32 = LDRWroX %121:gpr64common, %119:gpr64common, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
SU(4):   undef %127.sub_32:gpr64 = ASRVWr %122:gpr32, %124.sub_32:gpr64, debug-location !447; is.c:410:35
SU(5):   %129:gpr64 = SBFMXri %127:gpr64, 62, 31, debug-location !448; is.c:410:19
SU(6):   %131:gpr64common = LDRSWroX %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
SU(10):   %135:gpr32common = nsw ADDWri %119.sub_32:gpr64common, 1, 0, debug-location !452; is.c:408:32
SU(2):   STRWui %122:gpr32, %stack.6.key, 0, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
SU(7):   %133:gpr32common = nsw ADDWri %131.sub_32:gpr64common, 1, 0, debug-location !449; is.c:410:44
SU(9):   STRWroX %122:gpr32, %134:gpr64common, %131:gpr64common, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
SU(8):   STRWroX %133:gpr32common, %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
SU(11):   STRWui %135:gpr32common, %stack.1.i, 0, debug-location !452 :: (store 4 into %ir.i); is.c:408:32

********** MI Scheduling **********
rank:%bb.15 for.end56
  From: %29:gpr64 = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, debug-location !456; is.c:413:19
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %29:gpr64 = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, debug-location !456; is.c:413:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%29
  Single Issue       : false;
SU(1):   STRXui %29:gpr64, %stack.4.key_buff_ptr2, 0, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%29
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.1.i, 0, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %116:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %116:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %29:gpr64, %stack.4.key_buff_ptr2, 0, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.1.i, 0, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %29:gpr64 = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, debug-location !456; is.c:413:19
  Ready @3c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %29:gpr64 = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, debug-location !456; is.c:413:19
SU(2):   STRWui $wzr, %stack.1.i, 0, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
SU(1):   STRXui %29:gpr64, %stack.4.key_buff_ptr2, 0, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
SU(3):   %116:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1

********** MI Scheduling **********
rank:%bb.16 for.cond57
  From: %31:gpr32common = LDRWui %stack.1.i, 0, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
    To: Bcc 10, %bb.18, implicit killed $nzcv, debug-location !463; is.c:422:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %31:gpr32common = LDRWui %stack.1.i, 0, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%31
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %31:gpr32common, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%31
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.18, implicit killed $nzcv, debug-location !463; is.c:422:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %31:gpr32common, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %31:gpr32common = LDRWui %stack.1.i, 0, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %31:gpr32common = LDRWui %stack.1.i, 0, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
SU(1):   dead $wzr = SUBSWri %31:gpr32common, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5

********** MI Scheduling **********
rank:%bb.17 for.body59
  From: %114:gpr64common = LDRSWui %stack.1.i, 0, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
    To: B %bb.16, debug-location !468; is.c:422:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %114:gpr64common = LDRSWui %stack.1.i, 0, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%114
    SU(1): Data Latency=4 Reg=%114
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRWroX $wzr, %116:gpr64common, %114:gpr64common, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%114
  Single Issue       : false;
SU(2):   %118:gpr32common = nsw ADDWri %114.sub_32:gpr64common, 1, 0, debug-location !467; is.c:422:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%114
  Successors:
    SU(3): Data Latency=1 Reg=%118
  Single Issue       : false;
SU(3):   STRWui %118:gpr32common, %stack.1.i, 0, debug-location !467 :: (store 4 into %ir.i); is.c:422:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%118
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.16, debug-location !468; is.c:422:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %114:gpr64common = LDRSWui %stack.1.i, 0, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRWui %118:gpr32common, %stack.1.i, 0, debug-location !467 :: (store 4 into %ir.i); is.c:422:31
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(1) 4c
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %118:gpr32common = nsw ADDWri %114.sub_32:gpr64common, 1, 0, debug-location !467; is.c:422:31
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWroX $wzr, %116:gpr64common, %114:gpr64common, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
  Ready @2c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %114:gpr64common = LDRSWui %stack.1.i, 0, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
SU(1):   STRWroX $wzr, %116:gpr64common, %114:gpr64common, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
SU(2):   %118:gpr32common = nsw ADDWri %114.sub_32:gpr64common, 1, 0, debug-location !467; is.c:422:31
SU(3):   STRWui %118:gpr32common, %stack.1.i, 0, debug-location !467 :: (store 4 into %ir.i); is.c:422:31

********** MI Scheduling **********
rank:%bb.18 for.end64
  From: %33:gpr64 = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, debug-location !471; is.c:427:18
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %33:gpr64 = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, debug-location !471; is.c:427:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(1):   STRXui %33:gpr64, %stack.3.key_buff_ptr, 0, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.1.i, 0, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %36:gpr32 = MOVi32imm 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %36:gpr32 = MOVi32imm 33554431
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %33:gpr64, %stack.3.key_buff_ptr, 0, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.1.i, 0, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %33:gpr64 = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, debug-location !471; is.c:427:18
  Ready @3c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %33:gpr64 = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, debug-location !471; is.c:427:18
SU(2):   STRWui $wzr, %stack.1.i, 0, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
SU(1):   STRXui %33:gpr64, %stack.3.key_buff_ptr, 0, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
SU(3):   %36:gpr32 = MOVi32imm 33554431

********** MI Scheduling **********
rank:%bb.19 for.cond65
  From: %35:gpr32 = LDRWui %stack.1.i, 0, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
    To: Bcc 12, %bb.21, implicit killed $nzcv, debug-location !478; is.c:433:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %35:gpr32 = LDRWui %stack.1.i, 0, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%35
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %35:gpr32, %36:gpr32, implicit-def $nzcv, debug-location !478; is.c:433:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%35
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.21, implicit killed $nzcv, debug-location !478; is.c:433:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %35:gpr32, %36:gpr32, implicit-def $nzcv, debug-location !478; is.c:433:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %35:gpr32 = LDRWui %stack.1.i, 0, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %35:gpr32 = LDRWui %stack.1.i, 0, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
SU(1):   dead $wzr = SUBSWrr %35:gpr32, %36:gpr32, implicit-def $nzcv, debug-location !478; is.c:433:5

********** MI Scheduling **********
rank:%bb.20 for.body67
  From: %105:gpr64common = LDRXui %stack.3.key_buff_ptr, 0, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
    To: B %bb.19, debug-location !484; is.c:433:5
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=3
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %105:gpr64common = LDRXui %stack.3.key_buff_ptr, 0, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(7): Data Latency=4 Reg=%105
    SU(5): Data Latency=4 Reg=%105
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %106:gpr64common = LDRXui %stack.4.key_buff_ptr2, 0, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(3): Data Latency=4 Reg=%106
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %107:gpr64 = LDRSWui %stack.1.i, 0, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(3): Data Latency=4 Reg=%107
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   %108:gpr64 = LDRSWroX %106:gpr64common, %107:gpr64, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(2): Data Latency=4 Reg=%107
    SU(1): Data Latency=4 Reg=%106
  Successors:
    SU(4): Data Latency=4 Reg=%108
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %109:gpr64 = UBFMXri %108:gpr64, 62, 61, debug-location !479; is.c:434:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(3): Data Latency=4 Reg=%108
  Successors:
    SU(7): Data Latency=1 Reg=%109
    SU(5): Data Latency=1 Reg=%109
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %110:gpr32common = LDRWroX %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(4): Data Latency=1 Reg=%109
    SU(0): Data Latency=4 Reg=%105
  Successors:
    SU(6): Data Latency=4 Reg=%110
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0, debug-location !482; is.c:434:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 7
  Predecessors:
    SU(5): Data Latency=4 Reg=%110
  Successors:
    SU(7): Data Latency=1 Reg=%111
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   STRWroX %111:gpr32common, %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 6
  Predecessors:
    SU(6): Data Latency=1 Reg=%111
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=1 Reg=%109
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%105
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 3
  Single Issue       : false;
SU(8):   %112:gpr32common = LDRWui %stack.1.i, 0, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 5
  Predecessors:
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%112
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   %113:gpr32common = nsw ADDWri %112:gpr32common, 1, 0, debug-location !483; is.c:433:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%112
  Successors:
    SU(10): Data Latency=1 Reg=%113
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   STRWui %113:gpr32common, %stack.1.i, 0, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%113
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.19, debug-location !484; is.c:433:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 20
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) STRWui %113:gpr32common, %stack.1.i, 0, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
Bottom Pressure:
GPR32=1
  LiveReg: %113
  UpdateRegP: SU(10) STRWui %113:gpr32common, %stack.1.i, 0, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 20c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %113:gpr32common = nsw ADDWri %112:gpr32common, 1, 0, debug-location !483; is.c:433:32
Bottom Pressure:
GPR32=1
  LiveReg: %112
  UpdateRegP: SU(9) %113:gpr32common = nsw ADDWri %112:gpr32common, 1, 0, debug-location !483; is.c:433:32
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %112:gpr32common = LDRWui %stack.1.i, 0, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) STRWroX %111:gpr32common, %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
Bottom Pressure:
GPR32=3
  LiveReg: %111
  UpdateRegP: SU(7) STRWroX %111:gpr32common, %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
              to GPR32 2
  LiveReg: %105
  UpdateRegP: SU(5) %110:gpr32common = LDRWroX %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
              to 
  UpdateRegP: SU(7) STRWroX %111:gpr32common, %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
              to GPR32 1
  LiveReg: %109
  UpdateRegP: SU(5) %110:gpr32common = LDRWroX %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
              to GPR32 -1
  UpdateRegP: SU(7) STRWroX %111:gpr32common, %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
              to 
  Ready @6c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0, debug-location !482; is.c:434:39
Bottom Pressure:
GPR32=3
  LiveReg: %110
  UpdateRegP: SU(6) %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0, debug-location !482; is.c:434:39
              to GPR32 -1
  Ready @7c
  BotQ.A BotLatency SU(6) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %110:gpr32common = LDRWroX %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
Bottom Pressure:
GPR32=2
  Ready @11c
  BotQ.A BotLatency SU(5) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %109:gpr64 = UBFMXri %108:gpr64, 62, 61, debug-location !479; is.c:434:9
Bottom Pressure:
GPR32=2
  LiveReg: %108
  UpdateRegP: SU(4) %109:gpr64 = UBFMXri %108:gpr64, 62, 61, debug-location !479; is.c:434:9
              to GPR32 -1
  Ready @12c
  BotQ.A BotLatency SU(4) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 3 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %105:gpr64common = LDRXui %stack.3.key_buff_ptr, 0, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
Bottom Pressure:
GPR32=1
  Ready @15c
  BotQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 8
  Executed: 16c
  Critical: 8c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %108:gpr64 = LDRSWroX %106:gpr64common, %107:gpr64, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
Bottom Pressure:
GPR32=2
  LiveReg: %106
  UpdateRegP: SU(3) %108:gpr64 = LDRSWroX %106:gpr64common, %107:gpr64, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
              to 
  LiveReg: %107
  UpdateRegP: SU(3) %108:gpr64 = LDRSWroX %106:gpr64common, %107:gpr64, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
              to GPR32 -1
  Ready @16c
  BotQ.A BotLatency SU(3) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 9
  Executed: 17c
  Critical: 9c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 20 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %107:gpr64 = LDRSWui %stack.1.i, 0, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
Bottom Pressure:
GPR32=1
  Ready @20c
  BotQ.A BotLatency SU(2) 20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 10
  Executed: 21c
  Critical: 10c, 10 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %106:gpr64common = LDRXui %stack.4.key_buff_ptr2, 0, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
Bottom Pressure:

  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 11
  Executed: 22c
  Critical: 11c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(1):   %106:gpr64common = LDRXui %stack.4.key_buff_ptr2, 0, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
SU(2):   %107:gpr64 = LDRSWui %stack.1.i, 0, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
SU(3):   %108:gpr64 = LDRSWroX %106:gpr64common, %107:gpr64, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
SU(0):   %105:gpr64common = LDRXui %stack.3.key_buff_ptr, 0, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
SU(4):   %109:gpr64 = UBFMXri %108:gpr64, 62, 61, debug-location !479; is.c:434:9
SU(5):   %110:gpr32common = LDRWroX %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
SU(6):   %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0, debug-location !482; is.c:434:39
SU(7):   STRWroX %111:gpr32common, %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
SU(8):   %112:gpr32common = LDRWui %stack.1.i, 0, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
SU(9):   %113:gpr32common = nsw ADDWri %112:gpr32common, 1, 0, debug-location !483; is.c:433:32
SU(10):   STRWui %113:gpr32common, %stack.1.i, 0, debug-location !483 :: (store 4 into %ir.i); is.c:433:32

********** MI Scheduling **********
rank:%bb.21 for.end75
  From: STRWui $wzr, %stack.1.i, 0, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %40:gpr32 = MOVi32imm 2097150
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %40:gpr32 = MOVi32imm 2097150
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.1.i, 0, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
SU(1):   %40:gpr32 = MOVi32imm 2097150

********** MI Scheduling **********
rank:%bb.22 for.cond76
  From: %39:gpr32 = LDRWui %stack.1.i, 0, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
    To: Bcc 12, %bb.24, implicit killed $nzcv, debug-location !493; is.c:440:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %39:gpr32 = LDRWui %stack.1.i, 0, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%39
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %39:gpr32, %40:gpr32, implicit-def $nzcv, debug-location !493; is.c:440:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%39
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.24, implicit killed $nzcv, debug-location !493; is.c:440:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %39:gpr32, %40:gpr32, implicit-def $nzcv, debug-location !493; is.c:440:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %39:gpr32 = LDRWui %stack.1.i, 0, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %39:gpr32 = LDRWui %stack.1.i, 0, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
SU(1):   dead $wzr = SUBSWrr %39:gpr32, %40:gpr32, implicit-def $nzcv, debug-location !493; is.c:440:5

********** MI Scheduling **********
rank:%bb.23 for.body78
  From: %97:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
    To: B %bb.22, debug-location !501; is.c:440:5
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=3
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
Cluster ld/st SU(3) - SU(4)
  Copy Succ SU(5)
  Copy Succ SU(9)
SU(0):   %97:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%97
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %98:gpr64 = LDRSWui %stack.1.i, 0, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%98
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %99:gpr64common = ADDXrs %97:gpr64, %98:gpr64, 2, debug-location !494; is.c:441:32
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%98
    SU(0): Data Latency=4 Reg=%97
  Successors:
    SU(6): Data Latency=1 Reg=%99
    SU(4): Data Latency=1 Reg=%99
    SU(3): Data Latency=1 Reg=%99
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   %100:gpr32 = LDRWui %99:gpr64common, 0, debug-location !494 :: (load 4 from %ir.arrayidx80); is.c:441:32
  # preds left       : 1
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%99
  Successors:
    SU(5): Data Latency=4 Reg=%100
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Cluster
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %101:gpr32 = LDRWui %99:gpr64common, 1, debug-location !499 :: (load 4 from %ir.arrayidx83); is.c:441:29
  # preds left       : 1
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%99
    SU(3): Ord  Latency=0 Cluster
  Successors:
    SU(5): Data Latency=4 Reg=%101
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %102:gpr32 = nsw ADDWrr %101:gpr32, %100:gpr32, debug-location !499; is.c:441:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(4): Data Latency=4 Reg=%101
    SU(3): Data Latency=4 Reg=%100
  Successors:
    SU(6): Data Latency=1 Reg=%102
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   STRWui %102:gpr32, %99:gpr64common, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%102
    SU(4): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%99
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(7):   %103:gpr32common = LDRWui %stack.1.i, 0, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%103
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %104:gpr32common = nsw ADDWri %103:gpr32common, 1, 0, debug-location !500; is.c:440:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=%103
  Successors:
    SU(9): Data Latency=1 Reg=%104
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   STRWui %104:gpr32common, %stack.1.i, 0, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%104
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.22, debug-location !501; is.c:440:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRWui %104:gpr32common, %stack.1.i, 0, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
Bottom Pressure:
GPR32=1
  LiveReg: %104
  UpdateRegP: SU(9) STRWui %104:gpr32common, %stack.1.i, 0, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %104:gpr32common = nsw ADDWri %103:gpr32common, 1, 0, debug-location !500; is.c:440:35
Bottom Pressure:
GPR32=1
  LiveReg: %103
  UpdateRegP: SU(8) %104:gpr32common = nsw ADDWri %103:gpr32common, 1, 0, debug-location !500; is.c:440:35
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %103:gpr32common = LDRWui %stack.1.i, 0, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWui %102:gpr32, %99:gpr64common, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
Bottom Pressure:
GPR32=2
  LiveReg: %102
  UpdateRegP: SU(6) STRWui %102:gpr32, %99:gpr64common, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
              to GPR32 1
  LiveReg: %99
  UpdateRegP: SU(3) %100:gpr32 = LDRWui %99:gpr64common, 0, debug-location !494 :: (load 4 from %ir.arrayidx80); is.c:441:32
              to GPR32 -1
  UpdateRegP: SU(4) %101:gpr32 = LDRWui %99:gpr64common, 1, debug-location !499 :: (load 4 from %ir.arrayidx83); is.c:441:29
              to GPR32 -1
  UpdateRegP: SU(6) STRWui %102:gpr32, %99:gpr64common, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
              to 
  Ready @6c
  BotQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %102:gpr32 = nsw ADDWrr %101:gpr32, %100:gpr32, debug-location !499; is.c:441:29
Bottom Pressure:
GPR32=3
  LiveReg: %101
  UpdateRegP: SU(5) %102:gpr32 = nsw ADDWrr %101:gpr32, %100:gpr32, debug-location !499; is.c:441:29
              to 
  LiveReg: %100
  UpdateRegP: SU(5) %102:gpr32 = nsw ADDWrr %101:gpr32, %100:gpr32, debug-location !499; is.c:441:29
              to GPR32 -1
  Ready @7c
  BotQ.A BotLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(4) %101:gpr32 = LDRWui %99:gpr64common, 1, debug-location !499 :: (load 4 from %ir.arrayidx83); is.c:441:29
Bottom Pressure:
GPR32=2
  Ready @11c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %100:gpr32 = LDRWui %99:gpr64common, 0, debug-location !494 :: (load 4 from %ir.arrayidx80); is.c:441:32
Bottom Pressure:
GPR32=1
  Ready @12c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %99:gpr64common = ADDXrs %97:gpr64, %98:gpr64, 2, debug-location !494; is.c:441:32
Bottom Pressure:
GPR32=2
  LiveReg: %97
  UpdateRegP: SU(2) %99:gpr64common = ADDXrs %97:gpr64, %98:gpr64, 2, debug-location !494; is.c:441:32
              to 
  LiveReg: %98
  UpdateRegP: SU(2) %99:gpr64common = ADDXrs %97:gpr64, %98:gpr64, 2, debug-location !494; is.c:441:32
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(2) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 17 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 17c > CritPath 16
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %98:gpr64 = LDRSWui %stack.1.i, 0, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
Bottom Pressure:
GPR32=1
  Ready @17c
  BotQ.A BotLatency SU(1) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %97:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
Bottom Pressure:

  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 10
  Executed: 19c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %97:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
SU(1):   %98:gpr64 = LDRSWui %stack.1.i, 0, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
SU(2):   %99:gpr64common = ADDXrs %97:gpr64, %98:gpr64, 2, debug-location !494; is.c:441:32
SU(3):   %100:gpr32 = LDRWui %99:gpr64common, 0, debug-location !494 :: (load 4 from %ir.arrayidx80); is.c:441:32
SU(4):   %101:gpr32 = LDRWui %99:gpr64common, 1, debug-location !499 :: (load 4 from %ir.arrayidx83); is.c:441:29
SU(5):   %102:gpr32 = nsw ADDWrr %101:gpr32, %100:gpr32, debug-location !499; is.c:441:29
SU(6):   STRWui %102:gpr32, %99:gpr64common, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
SU(7):   %103:gpr32common = LDRWui %stack.1.i, 0, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
SU(8):   %104:gpr32common = nsw ADDWri %103:gpr32common, 1, 0, debug-location !500; is.c:440:35
SU(9):   STRWui %104:gpr32common, %stack.1.i, 0, debug-location !500 :: (store 4 into %ir.i); is.c:440:35

********** MI Scheduling **********
rank:%bb.24 for.end87
  From: STRWui $wzr, %stack.1.i, 0, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %51:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %54:gpr32 = MOVi32imm 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %80:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %88:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %85:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %85:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %88:gpr32 = MOVi32imm 1
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %80:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %54:gpr32 = MOVi32imm 33554431
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 4c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %51:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.1.i, 0, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
SU(1):   %51:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals
SU(2):   %54:gpr32 = MOVi32imm 33554431
SU(3):   %80:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array
SU(4):   %88:gpr32 = MOVi32imm 1
SU(5):   %85:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification

********** MI Scheduling **********
rank:%bb.25 for.cond88
  From: %43:gpr32common = LDRWui %stack.1.i, 0, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
    To: Bcc 12, %bb.40, implicit killed $nzcv, debug-location !510; is.c:446:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %43:gpr32common = LDRWui %stack.1.i, 0, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%43
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %43:gpr32common, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%43
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.40, implicit killed $nzcv, debug-location !510; is.c:446:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %43:gpr32common, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %43:gpr32common = LDRWui %stack.1.i, 0, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %43:gpr32common = LDRWui %stack.1.i, 0, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
SU(1):   dead $wzr = SUBSWri %43:gpr32common, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5

********** MI Scheduling **********
rank:%bb.26 for.body90
  From: %50:gpr64 = LDRSWui %stack.1.i, 0, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
    To: Bcc 11, %bb.39, implicit killed $nzcv, debug-location !520; is.c:448:19
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %50:gpr64 = LDRSWui %stack.1.i, 0, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%50
  Single Issue       : false;
SU(1):   %49:gpr32common = LDRWroX %51:gpr64common, %50:gpr64, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%50
  Successors:
    SU(3): Data Latency=4 Reg=%49
    SU(2): Data Latency=4 Reg=%49
  Single Issue       : false;
SU(2):   STRWui %49:gpr32common, %stack.2.k, 0, debug-location !514 :: (store 4 into %ir.k); is.c:447:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%49
  Single Issue       : false;
SU(3):   dead $wzr = SUBSWri %49:gpr32common, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%49
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 11, %bb.39, implicit killed $nzcv, debug-location !520; is.c:448:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %49:gpr32common, %stack.2.k, 0, debug-location !514 :: (store 4 into %ir.k); is.c:447:11
  Ready @0c
  BotQ.A TopLatency SU(2) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) dead $wzr = SUBSWri %49:gpr32common, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
  Ready @1c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %49:gpr32common = LDRWroX %51:gpr64common, %50:gpr64, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %50:gpr64 = LDRSWui %stack.1.i, 0, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %50:gpr64 = LDRSWui %stack.1.i, 0, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
SU(1):   %49:gpr32common = LDRWroX %51:gpr64common, %50:gpr64, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
SU(3):   dead $wzr = SUBSWri %49:gpr32common, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
SU(2):   STRWui %49:gpr32common, %stack.2.k, 0, debug-location !514 :: (store 4 into %ir.k); is.c:447:11

********** MI Scheduling **********
rank:%bb.28 if.then
  From: %58:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
    To: Bcc 0, %bb.31, implicit killed $nzcv, debug-location !534; is.c:496:28
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=2
Live In: 
Live Out: %57 
Live Thru: 
  LiveReg: %57
  UpdateRegP: SU(7) dead $wzr = SUBSWri %57:gpr32common, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
              to 
Top Pressure:

Bottom Pressure:
GPR32=1
Excess PSets: 
SU(0):   %58:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%58
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %59:gpr64 = LDRSWui %stack.2.k, 0, debug-location !525 :: (dereferenceable load 4 from %ir.k); is.c:449:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%59
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %60:gpr64common = ADDXrs %58:gpr64, %59:gpr64, 2, debug-location !524; is.c:449:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%59
    SU(0): Data Latency=4 Reg=%58
  Successors:
    SU(3): Data Latency=1 Reg=%60
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   %61:gpr32 = LDURWi %60:gpr64common, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%60
  Successors:
    SU(4): Data Latency=4 Reg=%61
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   STRWui %61:gpr32, %stack.7.key_rank, 0, debug-location !523 :: (store 4 into %ir.key_rank); is.c:449:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%61
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   STRWui $wzr, %stack.8.failed, 0, debug-location !528 :: (store 4 into %ir.failed); is.c:450:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %57:gpr32common = LDRWui %stack.1.i, 0, debug-location !529 :: (dereferenceable load 4 from %ir.i); is.c:496:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=%57
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   dead $wzr = SUBSWri %57:gpr32common, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%57
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.31, implicit killed $nzcv, debug-location !534; is.c:496:28
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRWui $wzr, %stack.8.failed, 0, debug-location !528 :: (store 4 into %ir.failed); is.c:450:17
Bottom Pressure:
GPR32=1
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
BotQ.A RemLatency SU(4) 9c
  BotQ.A RemainingLatency 9 + 1c > CritPath 9
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRWui %61:gpr32, %stack.7.key_rank, 0, debug-location !523 :: (store 4 into %ir.key_rank); is.c:449:22
Bottom Pressure:
GPR32=2
  LiveReg: %61
  UpdateRegP: SU(4) STRWui %61:gpr32, %stack.7.key_rank, 0, debug-location !523 :: (store 4 into %ir.key_rank); is.c:449:22
              to 
  Ready @1c
  BotQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) dead $wzr = SUBSWri %57:gpr32common, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
Bottom Pressure:
GPR32=2
  Ready @2c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 6 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %61:gpr32 = LDURWi %60:gpr64common, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
Bottom Pressure:
GPR32=2
  LiveReg: %60
  UpdateRegP: SU(3) %61:gpr32 = LDURWi %60:gpr64common, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
              to GPR32 -1
  Ready @5c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 6c > CritPath 9
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %57:gpr32common = LDRWui %stack.1.i, 0, debug-location !529 :: (dereferenceable load 4 from %ir.i); is.c:496:21
Bottom Pressure:
GPR32=1
  Ready @6c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %60:gpr64common = ADDXrs %58:gpr64, %59:gpr64, 2, debug-location !524; is.c:449:33
Bottom Pressure:
GPR32=2
  LiveReg: %58
  UpdateRegP: SU(2) %60:gpr64common = ADDXrs %58:gpr64, %59:gpr64, 2, debug-location !524; is.c:449:33
              to 
  LiveReg: %59
  UpdateRegP: SU(2) %60:gpr64common = ADDXrs %58:gpr64, %59:gpr64, 2, debug-location !524; is.c:449:33
              to GPR32 -1
  Ready @7c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 11c > CritPath 9
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %59:gpr64 = LDRSWui %stack.2.k, 0, debug-location !525 :: (dereferenceable load 4 from %ir.k); is.c:449:46
Bottom Pressure:
GPR32=1
  Ready @11c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %58:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
Bottom Pressure:

  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %58:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
SU(1):   %59:gpr64 = LDRSWui %stack.2.k, 0, debug-location !525 :: (dereferenceable load 4 from %ir.k); is.c:449:46
SU(2):   %60:gpr64common = ADDXrs %58:gpr64, %59:gpr64, 2, debug-location !524; is.c:449:33
SU(6):   %57:gpr32common = LDRWui %stack.1.i, 0, debug-location !529 :: (dereferenceable load 4 from %ir.i); is.c:496:21
SU(3):   %61:gpr32 = LDURWi %60:gpr64common, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
SU(7):   dead $wzr = SUBSWri %57:gpr32common, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
SU(4):   STRWui %61:gpr32, %stack.7.key_rank, 0, debug-location !523 :: (store 4 into %ir.key_rank); is.c:449:22
SU(5):   STRWui $wzr, %stack.8.failed, 0, debug-location !528 :: (store 4 into %ir.failed); is.c:450:17

********** MI Scheduling **********
rank:%bb.31 if.then102
  From: %78:gpr32 = LDRWui %stack.7.key_rank, 0, debug-location !537 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:25
    To: Bcc 0, %bb.33, implicit killed $nzcv, debug-location !545; is.c:497:25
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %78:gpr32 = LDRWui %stack.7.key_rank, 0, debug-location !537 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%78
  Single Issue       : false;
SU(1):   %79:gpr64 = LDRSWui %stack.1.i, 0, debug-location !540 :: (dereferenceable load 4 from %ir.i); is.c:497:53
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%79
  Single Issue       : false;
SU(2):   %81:gpr32 = LDRWroX %80:gpr64common, %79:gpr64, 0, 1, debug-location !541 :: (load 4 from %ir.arrayidx104); is.c:497:37
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%79
  Successors:
    SU(4): Data Latency=4 Reg=%81
  Single Issue       : false;
SU(3):   %82:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !542 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:58
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=4 Reg=%82
  Single Issue       : false;
SU(4):   %83:gpr32 = nsw ADDWrr %81:gpr32, %82:gpr32, debug-location !543; is.c:497:56
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%81
    SU(3): Data Latency=4 Reg=%82
  Successors:
    SU(5): Data Latency=1 Reg=%83
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %78:gpr32, %83:gpr32, implicit-def $nzcv, debug-location !545; is.c:497:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%83
    SU(0): Data Latency=4 Reg=%78
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.33, implicit killed $nzcv, debug-location !545; is.c:497:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %78:gpr32, %83:gpr32, implicit-def $nzcv, debug-location !545; is.c:497:25
  Ready @1c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %83:gpr32 = nsw ADDWrr %81:gpr32, %82:gpr32, debug-location !543; is.c:497:56
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 3 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %78:gpr32 = LDRWui %stack.7.key_rank, 0, debug-location !537 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:25
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %82:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !542 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:58
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %81:gpr32 = LDRWroX %80:gpr64common, %79:gpr64, 0, 1, debug-location !541 :: (load 4 from %ir.arrayidx104); is.c:497:37
  Ready @7c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %79:gpr64 = LDRSWui %stack.1.i, 0, debug-location !540 :: (dereferenceable load 4 from %ir.i); is.c:497:53
  Ready @11c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(1):   %79:gpr64 = LDRSWui %stack.1.i, 0, debug-location !540 :: (dereferenceable load 4 from %ir.i); is.c:497:53
SU(2):   %81:gpr32 = LDRWroX %80:gpr64common, %79:gpr64, 0, 1, debug-location !541 :: (load 4 from %ir.arrayidx104); is.c:497:37
SU(3):   %82:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !542 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:58
SU(0):   %78:gpr32 = LDRWui %stack.7.key_rank, 0, debug-location !537 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:25
SU(4):   %83:gpr32 = nsw ADDWrr %81:gpr32, %82:gpr32, debug-location !543; is.c:497:56
SU(5):   dead $wzr = SUBSWrr %78:gpr32, %83:gpr32, implicit-def $nzcv, debug-location !545; is.c:497:25

********** MI Scheduling **********
rank:%bb.33 if.else
  From: %86:gpr32common = LDRWui %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !548 :: (dereferenceable load 4 from @passed_verification); is.c:500:44
    To: B %bb.37
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %86:gpr32common = LDRWui %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !548 :: (dereferenceable load 4 from @passed_verification); is.c:500:44
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%86
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %87:gpr32common = nsw ADDWri %86:gpr32common, 1, 0, debug-location !548; is.c:500:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%86
  Successors:
    SU(2): Data Latency=1 Reg=%87
  Single Issue       : false;
SU(2):   STRWui %87:gpr32common, %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !548 :: (store 4 into @passed_verification); is.c:500:44
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%87
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.37
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %87:gpr32common, %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !548 :: (store 4 into @passed_verification); is.c:500:44
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %87:gpr32common = nsw ADDWri %86:gpr32common, 1, 0, debug-location !548; is.c:500:44
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %86:gpr32common = LDRWui %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !548 :: (dereferenceable load 4 from @passed_verification); is.c:500:44
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %86:gpr32common = LDRWui %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !548 :: (dereferenceable load 4 from @passed_verification); is.c:500:44
SU(1):   %87:gpr32common = nsw ADDWri %86:gpr32common, 1, 0, debug-location !548; is.c:500:44
SU(2):   STRWui %87:gpr32common, %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !548 :: (store 4 into @passed_verification); is.c:500:44

********** MI Scheduling **********
rank:%bb.34 if.else109
  From: %67:gpr32 = LDRWui %stack.7.key_rank, 0, debug-location !549 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:25
    To: Bcc 0, %bb.36, implicit killed $nzcv, debug-location !557; is.c:503:25
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %67:gpr32 = LDRWui %stack.7.key_rank, 0, debug-location !549 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%67
  Single Issue       : false;
SU(1):   %68:gpr64 = LDRSWui %stack.1.i, 0, debug-location !552 :: (dereferenceable load 4 from %ir.i); is.c:503:53
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%68
  Single Issue       : false;
SU(2):   %70:gpr32 = LDRWroX %80:gpr64common, %68:gpr64, 0, 1, debug-location !553 :: (load 4 from %ir.arrayidx111); is.c:503:37
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%68
  Successors:
    SU(4): Data Latency=4 Reg=%70
  Single Issue       : false;
SU(3):   %71:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !554 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:58
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=4 Reg=%71
  Single Issue       : false;
SU(4):   %72:gpr32 = nsw SUBWrr %70:gpr32, %71:gpr32, debug-location !555; is.c:503:56
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%70
    SU(3): Data Latency=4 Reg=%71
  Successors:
    SU(5): Data Latency=1 Reg=%72
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %67:gpr32, %72:gpr32, implicit-def $nzcv, debug-location !557; is.c:503:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%72
    SU(0): Data Latency=4 Reg=%67
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.36, implicit killed $nzcv, debug-location !557; is.c:503:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %67:gpr32, %72:gpr32, implicit-def $nzcv, debug-location !557; is.c:503:25
  Ready @1c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %72:gpr32 = nsw SUBWrr %70:gpr32, %71:gpr32, debug-location !555; is.c:503:56
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 3 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %67:gpr32 = LDRWui %stack.7.key_rank, 0, debug-location !549 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:25
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %71:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !554 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:58
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %70:gpr32 = LDRWroX %80:gpr64common, %68:gpr64, 0, 1, debug-location !553 :: (load 4 from %ir.arrayidx111); is.c:503:37
  Ready @7c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %68:gpr64 = LDRSWui %stack.1.i, 0, debug-location !552 :: (dereferenceable load 4 from %ir.i); is.c:503:53
  Ready @11c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(1):   %68:gpr64 = LDRSWui %stack.1.i, 0, debug-location !552 :: (dereferenceable load 4 from %ir.i); is.c:503:53
SU(2):   %70:gpr32 = LDRWroX %80:gpr64common, %68:gpr64, 0, 1, debug-location !553 :: (load 4 from %ir.arrayidx111); is.c:503:37
SU(3):   %71:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !554 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:58
SU(0):   %67:gpr32 = LDRWui %stack.7.key_rank, 0, debug-location !549 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:25
SU(4):   %72:gpr32 = nsw SUBWrr %70:gpr32, %71:gpr32, debug-location !555; is.c:503:56
SU(5):   dead $wzr = SUBSWrr %67:gpr32, %72:gpr32, implicit-def $nzcv, debug-location !557; is.c:503:25

********** MI Scheduling **********
rank:%bb.36 if.else115
  From: %75:gpr32common = LDRWui %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !560 :: (dereferenceable load 4 from @passed_verification); is.c:506:44
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %75:gpr32common = LDRWui %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !560 :: (dereferenceable load 4 from @passed_verification); is.c:506:44
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%75
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %76:gpr32common = nsw ADDWri %75:gpr32common, 1, 0, debug-location !560; is.c:506:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%75
  Successors:
    SU(2): Data Latency=1 Reg=%76
  Single Issue       : false;
SU(2):   STRWui %76:gpr32common, %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !560 :: (store 4 into @passed_verification); is.c:506:44
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%76
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %76:gpr32common, %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !560 :: (store 4 into @passed_verification); is.c:506:44
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %76:gpr32common = nsw ADDWri %75:gpr32common, 1, 0, debug-location !560; is.c:506:44
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %75:gpr32common = LDRWui %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !560 :: (dereferenceable load 4 from @passed_verification); is.c:506:44
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %75:gpr32common = LDRWui %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !560 :: (dereferenceable load 4 from @passed_verification); is.c:506:44
SU(1):   %76:gpr32common = nsw ADDWri %75:gpr32common, 1, 0, debug-location !560; is.c:506:44
SU(2):   STRWui %76:gpr32common, %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !560 :: (store 4 into @passed_verification); is.c:506:44

********** MI Scheduling **********
rank:%bb.37 if.end118
  From: %89:gpr32common = LDRWui %stack.8.failed, 0, debug-location !561 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
    To: Bcc 1, %bb.39, implicit killed $nzcv, debug-location !564; is.c:538:17
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %89:gpr32common = LDRWui %stack.8.failed, 0, debug-location !561 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%89
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %89:gpr32common, 1, 0, implicit-def $nzcv, debug-location !564; is.c:538:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%89
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.39, implicit killed $nzcv, debug-location !564; is.c:538:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %89:gpr32common, 1, 0, implicit-def $nzcv, debug-location !564; is.c:538:17
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %89:gpr32common = LDRWui %stack.8.failed, 0, debug-location !561 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %89:gpr32common = LDRWui %stack.8.failed, 0, debug-location !561 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
SU(1):   dead $wzr = SUBSWri %89:gpr32common, 1, 0, implicit-def $nzcv, debug-location !564; is.c:538:17

********** MI Scheduling **********
rank:%bb.38 if.then120
  From: $x0 = MOVaddr target-flags(aarch64-page) @is__str_1_Failed_par, target-flags(aarch64-pageoff, aarch64-nc) @is__str_1_Failed_par, debug-location !567; is.c:539:17
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $w2, implicit-def $sp, implicit-def dead $w8, debug-location !567; is.c:539:17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_1_Failed_par, target-flags(aarch64-pageoff, aarch64-nc) @is__str_1_Failed_par, debug-location !567; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %91:gpr32, debug-location !567; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %92:gpr32, debug-location !567; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $w2, implicit-def $sp, implicit-def dead $w8, debug-location !567; is.c:539:17
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %92:gpr32, debug-location !567; is.c:539:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %91:gpr32, debug-location !567; is.c:539:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @is__str_1_Failed_par, target-flags(aarch64-pageoff, aarch64-nc) @is__str_1_Failed_par, debug-location !567; is.c:539:17
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_1_Failed_par, target-flags(aarch64-pageoff, aarch64-nc) @is__str_1_Failed_par, debug-location !567; is.c:539:17
SU(1):   $w1 = COPY %91:gpr32, debug-location !567; is.c:539:17
SU(2):   $w2 = COPY %92:gpr32, debug-location !567; is.c:539:17

********** MI Scheduling **********
rank:%bb.38 if.then120
  From: %91:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !567; is.c:539:17
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %91:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %92:gpr32 = LDRWui %stack.1.i, 0, debug-location !566 :: (dereferenceable load 4 from %ir.i); is.c:541:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !567; is.c:539:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %92:gpr32 = LDRWui %stack.1.i, 0, debug-location !566 :: (dereferenceable load 4 from %ir.i); is.c:541:40
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %91:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %91:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
SU(1):   %92:gpr32 = LDRWui %stack.1.i, 0, debug-location !566 :: (dereferenceable load 4 from %ir.i); is.c:541:40

********** MI Scheduling **********
rank:%bb.39 for.inc123
  From: %95:gpr32common = LDRWui %stack.1.i, 0, debug-location !568 :: (dereferenceable load 4 from %ir.i); is.c:446:39
    To: B %bb.25, debug-location !569; is.c:446:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %95:gpr32common = LDRWui %stack.1.i, 0, debug-location !568 :: (dereferenceable load 4 from %ir.i); is.c:446:39
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%95
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %96:gpr32common = nsw ADDWri %95:gpr32common, 1, 0, debug-location !568; is.c:446:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%95
  Successors:
    SU(2): Data Latency=1 Reg=%96
  Single Issue       : false;
SU(2):   STRWui %96:gpr32common, %stack.1.i, 0, debug-location !568 :: (store 4 into %ir.i); is.c:446:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%96
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.25, debug-location !569; is.c:446:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %96:gpr32common, %stack.1.i, 0, debug-location !568 :: (store 4 into %ir.i); is.c:446:39
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %96:gpr32common = nsw ADDWri %95:gpr32common, 1, 0, debug-location !568; is.c:446:39
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %95:gpr32common = LDRWui %stack.1.i, 0, debug-location !568 :: (dereferenceable load 4 from %ir.i); is.c:446:39
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %95:gpr32common = LDRWui %stack.1.i, 0, debug-location !568 :: (dereferenceable load 4 from %ir.i); is.c:446:39
SU(1):   %96:gpr32common = nsw ADDWri %95:gpr32common, 1, 0, debug-location !568; is.c:446:39
SU(2):   STRWui %96:gpr32common, %stack.1.i, 0, debug-location !568 :: (store 4 into %ir.i); is.c:446:39

********** MI Scheduling **********
rank:%bb.40 for.end125
  From: %45:gpr32common = LDRWui %stack.0.iteration.addr, 0, debug-location !572 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
    To: Bcc 1, %bb.42, implicit killed $nzcv, debug-location !575; is.c:549:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %45:gpr32common = LDRWui %stack.0.iteration.addr, 0, debug-location !572 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%45
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %45:gpr32common, 10, 0, implicit-def $nzcv, debug-location !575; is.c:549:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%45
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.42, implicit killed $nzcv, debug-location !575; is.c:549:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %45:gpr32common, 10, 0, implicit-def $nzcv, debug-location !575; is.c:549:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %45:gpr32common = LDRWui %stack.0.iteration.addr, 0, debug-location !572 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %45:gpr32common = LDRWui %stack.0.iteration.addr, 0, debug-location !572 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
SU(1):   dead $wzr = SUBSWri %45:gpr32common, 10, 0, implicit-def $nzcv, debug-location !575; is.c:549:9

********** MI Scheduling **********
rank:%bb.41 if.then127
  From: %47:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !576 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %47:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !576 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%47
  Single Issue       : false;
SU(1):   %48:gpr64temp = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !577; is.c:550:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%48
  Single Issue       : false;
SU(2):   STRXui %47:gpr64, %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !577 :: (store 8 into @key_buff_ptr_global); is.c:550:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%48
    SU(0): Data Latency=4 Reg=%47
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRXui %47:gpr64, %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !577 :: (store 8 into @key_buff_ptr_global); is.c:550:29
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %48:gpr64temp = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !577; is.c:550:29
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %47:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !576 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %47:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !576 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
SU(1):   %48:gpr64temp = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !577; is.c:550:29
SU(2):   STRXui %47:gpr64, %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !577 :: (store 8 into @key_buff_ptr_global); is.c:550:29

********** INTERVALS **********
W0 [0B,16r:0)[4592r,4640r:1)  0@0B-phi 1@4592r
%1 [48r,136r:0)  0@48r weight:0.000000e+00
%2 [80r,528B:0)  0@80r weight:0.000000e+00
%3 [256r,280r:0)  0@256r weight:0.000000e+00
%4 [16r,256r:0)  0@16r weight:0.000000e+00
%6 [128r,264r:0)  0@128r weight:0.000000e+00
%8 [176r,248r:0)  0@176r weight:0.000000e+00
%9 [248r,280r:0)  0@248r weight:0.000000e+00
%11 [304r,320r:0)  0@304r weight:0.000000e+00
%14 [608r,624r:0)  0@608r weight:0.000000e+00
%17 [912r,928r:0)  0@912r weight:0.000000e+00
%18 [848r,1232B:0)  0@848r weight:0.000000e+00
%20 [1248r,1332r:0)  0@1248r weight:0.000000e+00
%22 [1296r,1336r:0)  0@1296r weight:0.000000e+00
%23 [1376r,1392r:0)  0@1376r weight:0.000000e+00
%26 [1760r,1776r:0)  0@1760r weight:0.000000e+00
%27 [1680r,2128B:0)  0@1680r weight:0.000000e+00
%29 [2144r,2200r:0)  0@2144r weight:0.000000e+00
%31 [2240r,2256r:0)  0@2240r weight:0.000000e+00
%33 [2448r,2504r:0)  0@2448r weight:0.000000e+00
%35 [2544r,2560r:0)  0@2544r weight:0.000000e+00
%36 [2512r,2816B:0)  0@2512r weight:0.000000e+00
%39 [2896r,2912r:0)  0@2896r weight:0.000000e+00
%40 [2864r,3152B:0)  0@2864r weight:0.000000e+00
%43 [3312r,3328r:0)  0@3312r weight:0.000000e+00
%45 [4816r,4832r:0)  0@4816r weight:0.000000e+00
%47 [4896r,4928r:0)  0@4896r weight:0.000000e+00
%48 [4912r,4928r:0)  0@4912r weight:0.000000e+00
%49 [3408r,3520r:0)  0@3408r weight:0.000000e+00
%50 [3392r,3408r:0)  0@3392r weight:0.000000e+00
%51 [3200r,4800B:0)  0@3200r weight:0.000000e+00
%54 [3216r,4800B:0)  0@3216r weight:0.000000e+00
%57 [3696r,3872r:0)  0@3696r weight:0.000000e+00
%58 [3584r,3616r:0)  0@3584r weight:0.000000e+00
%59 [3600r,3616r:0)  0@3600r weight:0.000000e+00
%60 [3616r,3704r:0)  0@3616r weight:0.000000e+00
%61 [3704r,3716r:0)  0@3704r weight:0.000000e+00
%67 [4264r,4288r:0)  0@4264r weight:0.000000e+00
%68 [4224r,4240r:0)  0@4224r weight:0.000000e+00
%70 [4240r,4272r:0)  0@4240r weight:0.000000e+00
%71 [4256r,4272r:0)  0@4256r weight:0.000000e+00
%72 [4272r,4288r:0)  0@4272r weight:0.000000e+00
%75 [4400r,4416r:0)  0@4400r weight:0.000000e+00
%76 [4416r,4432r:0)  0@4416r weight:0.000000e+00
%78 [3992r,4016r:0)  0@3992r weight:0.000000e+00
%79 [3952r,3968r:0)  0@3952r weight:0.000000e+00
%80 [3232r,4800B:0)  0@3232r weight:0.000000e+00
%81 [3968r,4000r:0)  0@3968r weight:0.000000e+00
%82 [3984r,4000r:0)  0@3984r weight:0.000000e+00
%83 [4000r,4016r:0)  0@4000r weight:0.000000e+00
%85 [3264r,4800B:0)  0@3264r weight:0.000000e+00
%86 [4128r,4144r:0)  0@4128r weight:0.000000e+00
%87 [4144r,4160r:0)  0@4144r weight:0.000000e+00
%88 [3248r,4800B:0)  0@3248r weight:0.000000e+00
%89 [4464r,4480r:0)  0@4464r weight:0.000000e+00
%91 [4544r,4688r:0)  0@4544r weight:0.000000e+00
%92 [4560r,4688r:0)  0@4560r weight:0.000000e+00
%95 [4736r,4752r:0)  0@4736r weight:0.000000e+00
%96 [4752r,4768r:0)  0@4752r weight:0.000000e+00
%97 [2976r,3008r:0)  0@2976r weight:0.000000e+00
%98 [2992r,3008r:0)  0@2992r weight:0.000000e+00
%99 [3008r,3072r:0)  0@3008r weight:0.000000e+00
%100 [3024r,3056r:0)  0@3024r weight:0.000000e+00
%101 [3040r,3056r:0)  0@3040r weight:0.000000e+00
%102 [3056r,3072r:0)  0@3056r weight:0.000000e+00
%103 [3088r,3104r:0)  0@3088r weight:0.000000e+00
%104 [3104r,3120r:0)  0@3104r weight:0.000000e+00
%105 [2680r,2736r:0)  0@2680r weight:0.000000e+00
%106 [2640r,2672r:0)  0@2640r weight:0.000000e+00
%107 [2656r,2672r:0)  0@2656r weight:0.000000e+00
%108 [2672r,2688r:0)  0@2672r weight:0.000000e+00
%109 [2688r,2736r:0)  0@2688r weight:0.000000e+00
%110 [2704r,2720r:0)  0@2704r weight:0.000000e+00
%111 [2720r,2736r:0)  0@2720r weight:0.000000e+00
%112 [2752r,2768r:0)  0@2752r weight:0.000000e+00
%113 [2768r,2784r:0)  0@2768r weight:0.000000e+00
%114 [2320r,2384r:0)  0@2320r weight:0.000000e+00
%116 [2208r,2432B:0)  0@2208r weight:0.000000e+00
%118 [2384r,2400r:0)  0@2384r weight:0.000000e+00
%119 [1840r,2080r:0)  0@1840r weight:0.000000e+00
%121 [1696r,2128B:0)  0@1696r weight:0.000000e+00
%122 [1912r,2096r:0)  0@1912r weight:0.000000e+00
%124 [1904r,1952r:0)  0@1904r weight:0.000000e+00
%127 [1952r,1984r:0)  0@1952r weight:0.000000e+00
%129 [1984r,2104r:0)  0@1984r weight:0.000000e+00
%130 [1712r,2128B:0)  0@1712r weight:0.000000e+00
%131 [2000r,2096r:0)  0@2000r weight:0.000000e+00
%133 [2088r,2104r:0)  0@2088r weight:0.000000e+00
%134 [1728r,2128B:0)  0@1728r weight:0.000000e+00
%135 [2080r,2112r:0)  0@2080r weight:0.000000e+00
%136 [1456r,1584r:0)  0@1456r weight:0.000000e+00
%138 [1488r,1592r:0)  0@1488r weight:0.000000e+00
%139 [1504r,1536r:0)  0@1504r weight:0.000000e+00
%140 [1328r,1632B:0)  0@1328r weight:0.000000e+00
%141 [1520r,1588r:0)  0@1520r weight:0.000000e+00
%142 [1344r,1632B:0)  0@1344r weight:0.000000e+00
%143 [1536r,1588r:0)  0@1536r weight:0.000000e+00
%144 [1588r,1592r:0)  0@1588r weight:0.000000e+00
%145 [1584r,1600r:0)  0@1584r weight:0.000000e+00
%146 [992r,1184r:0)  0@992r weight:0.000000e+00
%148 [864r,1232B:0)  0@864r weight:0.000000e+00
%149 [1048r,1088r:0)  0@1048r weight:0.000000e+00
%151 [1040r,1088r:0)  0@1040r weight:0.000000e+00
%154 [1088r,1120r:0)  0@1088r weight:0.000000e+00
%156 [1120r,1192r:0)  0@1120r weight:0.000000e+00
%157 [880r,1232B:0)  0@880r weight:0.000000e+00
%158 [1136r,1188r:0)  0@1136r weight:0.000000e+00
%159 [1188r,1192r:0)  0@1188r weight:0.000000e+00
%160 [1184r,1200r:0)  0@1184r weight:0.000000e+00
%161 [688r,752r:0)  0@688r weight:0.000000e+00
%163 [576r,800B:0)  0@576r weight:0.000000e+00
%165 [752r,768r:0)  0@752r weight:0.000000e+00
%166 [384r,480r:0)  0@384r weight:0.000000e+00
%168 [416r,488r:0)  0@416r weight:0.000000e+00
%169 [272r,528B:0)  0@272r weight:0.000000e+00
%170 [432r,448r:0)  0@432r weight:0.000000e+00
%172 [448r,488r:0)  0@448r weight:0.000000e+00
%173 [288r,528B:0)  0@288r weight:0.000000e+00
%174 [480r,496r:0)  0@480r weight:0.000000e+00
RegMasks: 4640r
********** MACHINEINSTRS **********
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %0

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $w0
16B	  undef %4.sub_32:gpr64 = COPY $w0
32B	  STRWui %4.sub_32:gpr64, %stack.0.iteration.addr, 0 :: (store 4 into %ir.iteration.addr)
48B	  %1:gpr32 = MOVi32imm 11
80B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array, debug-location !355; is.c:384:5
128B	  %6:gpr64 = SBFMXri %4:gpr64, 0, 31, debug-location !353; is.c:384:28
136B	  STRWui %1:gpr32, %stack.5.shift, 0, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
176B	  %8:gpr32 = MOVi32imm 2097152
240B	  STRWui $wzr, %stack.1.i, 0, debug-location !363 :: (store 4 into %ir.i); is.c:389:12
248B	  %9:gpr32 = nsw SUBWrr %8:gpr32, %4.sub_32:gpr64, debug-location !358; is.c:385:53
256B	  %3:gpr64sp = ADDXrx %2:gpr64common, %4.sub_32:gpr64, 50, debug-location !355; is.c:384:5
264B	  STRWui %6.sub_32:gpr64, %3:gpr64sp, 0, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
272B	  %169:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
280B	  STRWui %9:gpr32, %3:gpr64sp, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
288B	  %173:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals

296B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

304B	  %11:gpr32common = LDRWui %stack.1.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
320B	  dead $wzr = SUBSWri %11:gpr32common, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5
336B	  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !369; is.c:389:5
352B	  B %bb.2, debug-location !369; is.c:389:5

368B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

384B	  %166:gpr64common = LDRSWui %stack.1.i, 0, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
416B	  %168:gpr64 = UBFMXri %166:gpr64common, 62, 61, debug-location !371; is.c:390:44
432B	  %170:gpr64 = LDRSWroX %169:gpr64common, %168:gpr64, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
448B	  %172:gpr32 = LDRWroX %2:gpr64common, %170:gpr64, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
480B	  %174:gpr32common = nsw ADDWri %166.sub_32:gpr64common, 1, 0, debug-location !376; is.c:389:39
488B	  STRWroX %172:gpr32, %173:gpr64common, %168:gpr64, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
496B	  STRWui %174:gpr32common, %stack.1.i, 0, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
512B	  B %bb.1, debug-location !377; is.c:389:5

528B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

560B	  STRWui $wzr, %stack.1.i, 0, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
576B	  %163:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size

592B	bb.4.for.cond9:
	; predecessors: %bb.3, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

608B	  %14:gpr32common = LDRWui %stack.1.i, 0, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
624B	  dead $wzr = SUBSWri %14:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5
640B	  Bcc 12, %bb.6, implicit killed $nzcv, debug-location !386; is.c:395:5
656B	  B %bb.5, debug-location !386; is.c:395:5

672B	bb.5.for.body11:
	; predecessors: %bb.4
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

688B	  %161:gpr64common = LDRSWui %stack.1.i, 0, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
736B	  STRWroX $wzr, %163:gpr64common, %161:gpr64common, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
752B	  %165:gpr32common = nsw ADDWri %161.sub_32:gpr64common, 1, 0, debug-location !390; is.c:395:35
768B	  STRWui %165:gpr32common, %stack.1.i, 0, debug-location !390 :: (store 4 into %ir.i); is.c:395:35
784B	  B %bb.4, debug-location !391; is.c:395:5

800B	bb.6.for.end16:
	; predecessors: %bb.4
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

832B	  STRWui $wzr, %stack.1.i, 0, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
848B	  %18:gpr32 = MOVi32imm 33554431
864B	  %148:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
880B	  %157:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size

896B	bb.7.for.cond17:
	; predecessors: %bb.6, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

912B	  %17:gpr32 = LDRWui %stack.1.i, 0, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
928B	  dead $wzr = SUBSWrr %17:gpr32, %18:gpr32, implicit-def $nzcv, debug-location !400; is.c:399:5
944B	  Bcc 12, %bb.9, implicit killed $nzcv, debug-location !400; is.c:399:5
960B	  B %bb.8, debug-location !400; is.c:399:5

976B	bb.8.for.body19:
	; predecessors: %bb.7
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

992B	  %146:gpr64common = LDRSWui %stack.1.i, 0, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
1040B	  undef %151.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
1048B	  %149:gpr32 = LDRWroX %148:gpr64common, %146:gpr64common, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
1088B	  undef %154.sub_32:gpr64 = ASRVWr %149:gpr32, %151.sub_32:gpr64, debug-location !404; is.c:400:34
1120B	  %156:gpr64 = SBFMXri %154:gpr64, 62, 31, debug-location !405; is.c:400:9
1136B	  %158:gpr32common = LDRWroX %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
1184B	  %160:gpr32common = nsw ADDWri %146.sub_32:gpr64common, 1, 0, debug-location !407; is.c:399:32
1188B	  %159:gpr32common = nsw ADDWri %158:gpr32common, 1, 0, debug-location !406; is.c:400:43
1192B	  STRWroX %159:gpr32common, %157:gpr64common, %156:gpr64, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
1200B	  STRWui %160:gpr32common, %stack.1.i, 0, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
1216B	  B %bb.7, debug-location !408; is.c:399:5

1232B	bb.9.for.end27:
	; predecessors: %bb.7
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1248B	  %20:gpr64temp = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
1296B	  %22:gpr32 = MOVi32imm 1
1328B	  %140:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs
1332B	  STRWui $wzr, %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
1336B	  STRWui %22:gpr32, %stack.1.i, 0, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
1344B	  %142:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size

1360B	bb.10.for.cond28:
	; predecessors: %bb.9, %bb.11
	  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

1376B	  %23:gpr32common = LDRWui %stack.1.i, 0, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
1392B	  dead $wzr = SUBSWri %23:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5
1408B	  Bcc 12, %bb.12, implicit killed $nzcv, debug-location !418; is.c:404:5
1424B	  B %bb.11, debug-location !418; is.c:404:5

1440B	bb.11.for.body30:
	; predecessors: %bb.10
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1456B	  %136:gpr64common = LDRSWui %stack.1.i, 0, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
1488B	  %138:gpr64common = UBFMXri %136:gpr64common, 62, 61, debug-location !420; is.c:405:40
1504B	  %139:gpr64common = SUBXri %138:gpr64common, 4, 0, debug-location !421; is.c:405:26
1520B	  %141:gpr32 = LDRWroX %140:gpr64common, %139:gpr64common, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
1536B	  %143:gpr32 = LDRWroX %142:gpr64common, %139:gpr64common, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
1584B	  %145:gpr32common = nsw ADDWri %136.sub_32:gpr64common, 1, 0, debug-location !429; is.c:404:35
1588B	  %144:gpr32 = nsw ADDWrr %141:gpr32, %143:gpr32, debug-location !425; is.c:405:45
1592B	  STRWroX %144:gpr32, %140:gpr64common, %138:gpr64common, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
1600B	  STRWui %145:gpr32common, %stack.1.i, 0, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
1616B	  B %bb.10, debug-location !430; is.c:404:5

1632B	bb.12.for.end42:
	; predecessors: %bb.10
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

1664B	  STRWui $wzr, %stack.1.i, 0, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
1680B	  %27:gpr32 = MOVi32imm 33554431
1696B	  %121:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
1712B	  %130:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs
1728B	  %134:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2

1744B	bb.13.for.cond43:
	; predecessors: %bb.12, %bb.14
	  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

1760B	  %26:gpr32 = LDRWui %stack.1.i, 0, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
1776B	  dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !439; is.c:408:5
1792B	  Bcc 12, %bb.15, implicit killed $nzcv, debug-location !439; is.c:408:5
1808B	  B %bb.14, debug-location !439; is.c:408:5

1824B	bb.14.for.body45:
	; predecessors: %bb.13
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

1840B	  %119:gpr64common = LDRSWui %stack.1.i, 0, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
1904B	  undef %124.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
1912B	  %122:gpr32 = LDRWroX %121:gpr64common, %119:gpr64common, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
1952B	  undef %127.sub_32:gpr64 = ASRVWr %122:gpr32, %124.sub_32:gpr64, debug-location !447; is.c:410:35
1984B	  %129:gpr64 = SBFMXri %127:gpr64, 62, 31, debug-location !448; is.c:410:19
2000B	  %131:gpr64common = LDRSWroX %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
2080B	  %135:gpr32common = nsw ADDWri %119.sub_32:gpr64common, 1, 0, debug-location !452; is.c:408:32
2084B	  STRWui %122:gpr32, %stack.6.key, 0, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
2088B	  %133:gpr32common = nsw ADDWri %131.sub_32:gpr64common, 1, 0, debug-location !449; is.c:410:44
2096B	  STRWroX %122:gpr32, %134:gpr64common, %131:gpr64common, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
2104B	  STRWroX %133:gpr32common, %130:gpr64common, %129:gpr64, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
2112B	  STRWui %135:gpr32common, %stack.1.i, 0, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
2120B	  B %bb.13, debug-location !453; is.c:408:5

2128B	bb.15.for.end56:
	; predecessors: %bb.13
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

2144B	  %29:gpr64 = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, debug-location !456; is.c:413:19
2192B	  STRWui $wzr, %stack.1.i, 0, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
2200B	  STRXui %29:gpr64, %stack.4.key_buff_ptr2, 0, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
2208B	  %116:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1

2224B	bb.16.for.cond57:
	; predecessors: %bb.15, %bb.17
	  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

2240B	  %31:gpr32common = LDRWui %stack.1.i, 0, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
2256B	  dead $wzr = SUBSWri %31:gpr32common, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5
2272B	  Bcc 10, %bb.18, implicit killed $nzcv, debug-location !463; is.c:422:5
2288B	  B %bb.17, debug-location !463; is.c:422:5

2304B	bb.17.for.body59:
	; predecessors: %bb.16
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

2320B	  %114:gpr64common = LDRSWui %stack.1.i, 0, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
2368B	  STRWroX $wzr, %116:gpr64common, %114:gpr64common, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
2384B	  %118:gpr32common = nsw ADDWri %114.sub_32:gpr64common, 1, 0, debug-location !467; is.c:422:31
2400B	  STRWui %118:gpr32common, %stack.1.i, 0, debug-location !467 :: (store 4 into %ir.i); is.c:422:31
2416B	  B %bb.16, debug-location !468; is.c:422:5

2432B	bb.18.for.end64:
	; predecessors: %bb.16
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

2448B	  %33:gpr64 = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, debug-location !471; is.c:427:18
2496B	  STRWui $wzr, %stack.1.i, 0, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
2504B	  STRXui %33:gpr64, %stack.3.key_buff_ptr, 0, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
2512B	  %36:gpr32 = MOVi32imm 33554431

2528B	bb.19.for.cond65:
	; predecessors: %bb.18, %bb.20
	  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

2544B	  %35:gpr32 = LDRWui %stack.1.i, 0, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
2560B	  dead $wzr = SUBSWrr %35:gpr32, %36:gpr32, implicit-def $nzcv, debug-location !478; is.c:433:5
2576B	  Bcc 12, %bb.21, implicit killed $nzcv, debug-location !478; is.c:433:5
2592B	  B %bb.20, debug-location !478; is.c:433:5

2608B	bb.20.for.body67:
	; predecessors: %bb.19
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

2640B	  %106:gpr64common = LDRXui %stack.4.key_buff_ptr2, 0, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
2656B	  %107:gpr64 = LDRSWui %stack.1.i, 0, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
2672B	  %108:gpr64 = LDRSWroX %106:gpr64common, %107:gpr64, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
2680B	  %105:gpr64common = LDRXui %stack.3.key_buff_ptr, 0, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
2688B	  %109:gpr64 = UBFMXri %108:gpr64, 62, 61, debug-location !479; is.c:434:9
2704B	  %110:gpr32common = LDRWroX %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
2720B	  %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0, debug-location !482; is.c:434:39
2736B	  STRWroX %111:gpr32common, %105:gpr64common, %109:gpr64, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
2752B	  %112:gpr32common = LDRWui %stack.1.i, 0, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
2768B	  %113:gpr32common = nsw ADDWri %112:gpr32common, 1, 0, debug-location !483; is.c:433:32
2784B	  STRWui %113:gpr32common, %stack.1.i, 0, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
2800B	  B %bb.19, debug-location !484; is.c:433:5

2816B	bb.21.for.end75:
	; predecessors: %bb.19
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

2848B	  STRWui $wzr, %stack.1.i, 0, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
2864B	  %40:gpr32 = MOVi32imm 2097150

2880B	bb.22.for.cond76:
	; predecessors: %bb.21, %bb.23
	  successors: %bb.23(0x7c000000), %bb.24(0x04000000); %bb.23(96.88%), %bb.24(3.12%)

2896B	  %39:gpr32 = LDRWui %stack.1.i, 0, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
2912B	  dead $wzr = SUBSWrr %39:gpr32, %40:gpr32, implicit-def $nzcv, debug-location !493; is.c:440:5
2928B	  Bcc 12, %bb.24, implicit killed $nzcv, debug-location !493; is.c:440:5
2944B	  B %bb.23, debug-location !493; is.c:440:5

2960B	bb.23.for.body78:
	; predecessors: %bb.22
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

2976B	  %97:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
2992B	  %98:gpr64 = LDRSWui %stack.1.i, 0, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
3008B	  %99:gpr64common = ADDXrs %97:gpr64, %98:gpr64, 2, debug-location !494; is.c:441:32
3024B	  %100:gpr32 = LDRWui %99:gpr64common, 0, debug-location !494 :: (load 4 from %ir.arrayidx80); is.c:441:32
3040B	  %101:gpr32 = LDRWui %99:gpr64common, 1, debug-location !499 :: (load 4 from %ir.arrayidx83); is.c:441:29
3056B	  %102:gpr32 = nsw ADDWrr %101:gpr32, %100:gpr32, debug-location !499; is.c:441:29
3072B	  STRWui %102:gpr32, %99:gpr64common, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
3088B	  %103:gpr32common = LDRWui %stack.1.i, 0, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
3104B	  %104:gpr32common = nsw ADDWri %103:gpr32common, 1, 0, debug-location !500; is.c:440:35
3120B	  STRWui %104:gpr32common, %stack.1.i, 0, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
3136B	  B %bb.22, debug-location !501; is.c:440:5

3152B	bb.24.for.end87:
	; predecessors: %bb.22
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

3184B	  STRWui $wzr, %stack.1.i, 0, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
3200B	  %51:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals
3216B	  %54:gpr32 = MOVi32imm 33554431
3232B	  %80:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array
3248B	  %88:gpr32 = MOVi32imm 1
3264B	  %85:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification

3296B	bb.25.for.cond88:
	; predecessors: %bb.24, %bb.39
	  successors: %bb.26(0x7c000000), %bb.40(0x04000000); %bb.26(96.88%), %bb.40(3.12%)

3312B	  %43:gpr32common = LDRWui %stack.1.i, 0, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
3328B	  dead $wzr = SUBSWri %43:gpr32common, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5
3344B	  Bcc 12, %bb.40, implicit killed $nzcv, debug-location !510; is.c:446:5
3360B	  B %bb.26, debug-location !510; is.c:446:5

3376B	bb.26.for.body90:
	; predecessors: %bb.25
	  successors: %bb.27(0x60000000), %bb.39(0x20000000); %bb.27(75.00%), %bb.39(25.00%)

3392B	  %50:gpr64 = LDRSWui %stack.1.i, 0, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
3408B	  %49:gpr32common = LDRWroX %51:gpr64common, %50:gpr64, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
3440B	  dead $wzr = SUBSWri %49:gpr32common, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
3448B	  STRWui %49:gpr32common, %stack.2.k, 0, debug-location !514 :: (store 4 into %ir.k); is.c:447:11
3456B	  Bcc 11, %bb.39, implicit killed $nzcv, debug-location !520; is.c:448:19
3472B	  B %bb.27, debug-location !520; is.c:448:19

3488B	bb.27.for.body90:
	; predecessors: %bb.26
	  successors: %bb.28(0x55555555), %bb.39(0x2aaaaaab); %bb.28(66.67%), %bb.39(33.33%)

3520B	  dead $wzr = SUBSWrr %49:gpr32common, %54:gpr32, implicit-def $nzcv, debug-location !520; is.c:448:19
3536B	  Bcc 12, %bb.39, implicit killed $nzcv, debug-location !520; is.c:448:19
3552B	  B %bb.28, debug-location !520; is.c:448:19

3568B	bb.28.if.then:
	; predecessors: %bb.27
	  successors: %bb.31(0x10000000), %bb.29(0x70000000); %bb.31(12.50%), %bb.29(87.50%)

3584B	  %58:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
3600B	  %59:gpr64 = LDRSWui %stack.2.k, 0, debug-location !525 :: (dereferenceable load 4 from %ir.k); is.c:449:46
3616B	  %60:gpr64common = ADDXrs %58:gpr64, %59:gpr64, 2, debug-location !524; is.c:449:33
3696B	  %57:gpr32common = LDRWui %stack.1.i, 0, debug-location !529 :: (dereferenceable load 4 from %ir.i); is.c:496:21
3704B	  %61:gpr32 = LDURWi %60:gpr64common, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
3712B	  dead $wzr = SUBSWri %57:gpr32common, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
3716B	  STRWui %61:gpr32, %stack.7.key_rank, 0, debug-location !523 :: (store 4 into %ir.key_rank); is.c:449:22
3720B	  STRWui $wzr, %stack.8.failed, 0, debug-location !528 :: (store 4 into %ir.failed); is.c:450:17
3728B	  Bcc 0, %bb.31, implicit killed $nzcv, debug-location !534; is.c:496:28
3744B	  B %bb.29, debug-location !534; is.c:496:28

3760B	bb.29.if.then:
	; predecessors: %bb.28
	  successors: %bb.31(0x12492492), %bb.30(0x6db6db6e); %bb.31(14.29%), %bb.30(85.71%)

3792B	  dead $wzr = SUBSWri %57:gpr32common, 2, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
3808B	  Bcc 0, %bb.31, implicit killed $nzcv, debug-location !534; is.c:496:28
3824B	  B %bb.30, debug-location !534; is.c:496:28

3840B	bb.30.if.then:
	; predecessors: %bb.29
	  successors: %bb.31(0x2aaaaaab), %bb.34(0x55555555); %bb.31(33.33%), %bb.34(66.67%)

3872B	  dead $wzr = SUBSWri %57:gpr32common, 4, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
3888B	  Bcc 1, %bb.34, implicit killed $nzcv, debug-location !534; is.c:496:28
3904B	  B %bb.31, debug-location !534; is.c:496:28

3920B	bb.31.if.then102:
	; predecessors: %bb.28, %bb.29, %bb.30
	  successors: %bb.32(0x40000000), %bb.33(0x40000000); %bb.32(50.00%), %bb.33(50.00%)

3952B	  %79:gpr64 = LDRSWui %stack.1.i, 0, debug-location !540 :: (dereferenceable load 4 from %ir.i); is.c:497:53
3968B	  %81:gpr32 = LDRWroX %80:gpr64common, %79:gpr64, 0, 1, debug-location !541 :: (load 4 from %ir.arrayidx104); is.c:497:37
3984B	  %82:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !542 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:58
3992B	  %78:gpr32 = LDRWui %stack.7.key_rank, 0, debug-location !537 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:25
4000B	  %83:gpr32 = nsw ADDWrr %81:gpr32, %82:gpr32, debug-location !543; is.c:497:56
4016B	  dead $wzr = SUBSWrr %78:gpr32, %83:gpr32, implicit-def $nzcv, debug-location !545; is.c:497:25
4032B	  Bcc 0, %bb.33, implicit killed $nzcv, debug-location !545; is.c:497:25
4048B	  B %bb.32, debug-location !545; is.c:497:25

4064B	bb.32.if.then107:
	; predecessors: %bb.31
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

4080B	  STRWui %88:gpr32, %stack.8.failed, 0, debug-location !546 :: (store 4 into %ir.failed); is.c:498:32
4096B	  B %bb.37, debug-location !547; is.c:498:25

4112B	bb.33.if.else:
	; predecessors: %bb.31
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

4128B	  %86:gpr32common = LDRWui %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !548 :: (dereferenceable load 4 from @passed_verification); is.c:500:44
4144B	  %87:gpr32common = nsw ADDWri %86:gpr32common, 1, 0, debug-location !548; is.c:500:44
4160B	  STRWui %87:gpr32common, %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !548 :: (store 4 into @passed_verification); is.c:500:44
4176B	  B %bb.37

4192B	bb.34.if.else109:
	; predecessors: %bb.30
	  successors: %bb.35(0x40000000), %bb.36(0x40000000); %bb.35(50.00%), %bb.36(50.00%)

4224B	  %68:gpr64 = LDRSWui %stack.1.i, 0, debug-location !552 :: (dereferenceable load 4 from %ir.i); is.c:503:53
4240B	  %70:gpr32 = LDRWroX %80:gpr64common, %68:gpr64, 0, 1, debug-location !553 :: (load 4 from %ir.arrayidx111); is.c:503:37
4256B	  %71:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !554 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:58
4264B	  %67:gpr32 = LDRWui %stack.7.key_rank, 0, debug-location !549 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:25
4272B	  %72:gpr32 = nsw SUBWrr %70:gpr32, %71:gpr32, debug-location !555; is.c:503:56
4288B	  dead $wzr = SUBSWrr %67:gpr32, %72:gpr32, implicit-def $nzcv, debug-location !557; is.c:503:25
4304B	  Bcc 0, %bb.36, implicit killed $nzcv, debug-location !557; is.c:503:25
4320B	  B %bb.35, debug-location !557; is.c:503:25

4336B	bb.35.if.then114:
	; predecessors: %bb.34
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

4352B	  STRWui %88:gpr32, %stack.8.failed, 0, debug-location !558 :: (store 4 into %ir.failed); is.c:504:32
4368B	  B %bb.37, debug-location !559; is.c:504:25

4384B	bb.36.if.else115:
	; predecessors: %bb.34
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

4400B	  %75:gpr32common = LDRWui %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !560 :: (dereferenceable load 4 from @passed_verification); is.c:506:44
4416B	  %76:gpr32common = nsw ADDWri %75:gpr32common, 1, 0, debug-location !560; is.c:506:44
4432B	  STRWui %76:gpr32common, %85:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !560 :: (store 4 into @passed_verification); is.c:506:44

4448B	bb.37.if.end118:
	; predecessors: %bb.36, %bb.35, %bb.33, %bb.32
	  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

4464B	  %89:gpr32common = LDRWui %stack.8.failed, 0, debug-location !561 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
4480B	  dead $wzr = SUBSWri %89:gpr32common, 1, 0, implicit-def $nzcv, debug-location !564; is.c:538:17
4496B	  Bcc 1, %bb.39, implicit killed $nzcv, debug-location !564; is.c:538:17
4512B	  B %bb.38, debug-location !564; is.c:538:17

4528B	bb.38.if.then120:
	; predecessors: %bb.37
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

4544B	  %91:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
4560B	  %92:gpr32 = LDRWui %stack.1.i, 0, debug-location !566 :: (dereferenceable load 4 from %ir.i); is.c:541:40
4576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !567; is.c:539:17
4592B	  $x0 = MOVaddr target-flags(aarch64-page) @is__str_1_Failed_par, target-flags(aarch64-pageoff, aarch64-nc) @is__str_1_Failed_par, debug-location !567; is.c:539:17
4608B	  $w1 = COPY %91:gpr32, debug-location !567; is.c:539:17
4624B	  $w2 = COPY %92:gpr32, debug-location !567; is.c:539:17
4640B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $w2, implicit-def $sp, implicit-def dead $w8, debug-location !567; is.c:539:17
4656B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !567; is.c:539:17
4672B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !567; is.c:539:17
4688B	  PCN_STACKMAP 0, 0, 0, %stack.8.failed, 0, 0, %stack.1.i, 0, 0, %stack.0.iteration.addr, 0, 0, %stack.2.k, 0, 0, %stack.3.key_buff_ptr, 0, 0, %stack.7.key_rank, 0, %91:gpr32, %92:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !567 :: (load 8 from %stack.8.failed, align 4), (load 8 from %stack.1.i, align 4), (load 8 from %stack.0.iteration.addr, align 4), (load 8 from %stack.2.k, align 4), (load 8 from %stack.3.key_buff_ptr), (load 8 from %stack.7.key_rank, align 4); is.c:539:17
4704B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !567; is.c:539:17

4720B	bb.39.for.inc123:
	; predecessors: %bb.26, %bb.27, %bb.37, %bb.38
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

4736B	  %95:gpr32common = LDRWui %stack.1.i, 0, debug-location !568 :: (dereferenceable load 4 from %ir.i); is.c:446:39
4752B	  %96:gpr32common = nsw ADDWri %95:gpr32common, 1, 0, debug-location !568; is.c:446:39
4768B	  STRWui %96:gpr32common, %stack.1.i, 0, debug-location !568 :: (store 4 into %ir.i); is.c:446:39
4784B	  B %bb.25, debug-location !569; is.c:446:5

4800B	bb.40.for.end125:
	; predecessors: %bb.25
	  successors: %bb.41(0x40000000), %bb.42(0x40000000); %bb.41(50.00%), %bb.42(50.00%)

4816B	  %45:gpr32common = LDRWui %stack.0.iteration.addr, 0, debug-location !572 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
4832B	  dead $wzr = SUBSWri %45:gpr32common, 10, 0, implicit-def $nzcv, debug-location !575; is.c:549:9
4848B	  Bcc 1, %bb.42, implicit killed $nzcv, debug-location !575; is.c:549:9
4864B	  B %bb.41, debug-location !575; is.c:549:9

4880B	bb.41.if.then127:
	; predecessors: %bb.40
	  successors: %bb.42(0x80000000); %bb.42(100.00%)

4896B	  %47:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !576 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
4912B	  %48:gpr64temp = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !577; is.c:550:29
4928B	  STRXui %47:gpr64, %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !577 :: (store 8 into @key_buff_ptr_global); is.c:550:29

4944B	bb.42.if.end128:
	; predecessors: %bb.40, %bb.41

4960B	  RET_ReallyLR debug-location !579; is.c:551:1

# End machine code for function rank.

Before post-MI-sched:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=4, align=4, at location [SP-48]
  fi#2: size=4, align=4, at location [SP-52]
  fi#3: size=8, align=8, at location [SP-64]
  fi#4: size=8, align=8, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-76]
  fi#6: size=4, align=4, at location [SP-80]
  fi#7: size=4, align=4, at location [SP-84]
  fi#8: size=4, align=4, at location [SP-88]
  fi#9: size=8, align=8, at location [SP-40]
  fi#10: size=8, align=8, at location [SP-8]
  fi#11: size=8, align=8, at location [SP-16]
  fi#12: size=8, align=8, at location [SP-24]
  fi#13: size=8, align=8, at location [SP-32]
Function Live Ins: $w0

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 96, 0
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store 8 into %stack.13), (store 8 into %stack.12)
  frame-setup STPXi killed $fp, killed $lr, $sp, 10 :: (store 8 into %stack.11), (store 8 into %stack.10)
  $fp = frame-setup ADDXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  renamable $w0 = KILL $w0, implicit-def $x0
  STPWi $wzr, renamable $w0, $fp, -8 :: (store 4 into %ir.iteration.addr), (store 4 into %ir.i)
  $w16 = MOVZWi 11, 0
  $x8 = ADRP target-flags(aarch64-page) @key_array, debug-location !355; is.c:384:5
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0, debug-location !355; is.c:384:5
  renamable $x17 = SBFMXri renamable $x0, 0, 31, debug-location !353; is.c:384:28
  STRWui killed renamable $w16, $sp, 5, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
  $w16 = MOVZWi 32, 16
  $w18 = SUBWrs killed renamable $w16, renamable $w0, 0, debug-location !358; is.c:385:53
  renamable $x0 = ADDXrx renamable $x8, renamable $w0, 50, implicit killed $x0, debug-location !355; is.c:384:5
  STRWui renamable $w17, renamable $x0, 0, implicit killed $x17, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
  $x16 = ADRP target-flags(aarch64-page) @test_index_array
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
  STRWui killed renamable $w18, killed renamable $x0, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
  $x17 = ADRP target-flags(aarch64-page) @partial_verify_vals
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $x8, $x16, $x17
  renamable $w18 = LDURWi $fp, -32, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
  dead $wzr = SUBSWri killed renamable $w18, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5
  Bcc 12, %bb.3, implicit $nzcv, debug-location !369; is.c:389:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x8, $x16, $x17
  renamable $x18 = LDURSWi $fp, -32, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  renamable $x0 = UBFMXri renamable $x18, 62, 61, debug-location !371; is.c:390:44
  renamable $x1 = LDRSWroX renamable $x16, renamable $x0, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
  renamable $w1 = LDRWroX renamable $x8, killed renamable $x1, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
  renamable $w18 = nsw ADDWri renamable $w18, 1, 0, implicit killed $x18, debug-location !376; is.c:389:39
  STRWroX killed renamable $w1, renamable $x17, killed renamable $x0, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
  STURWi killed renamable $w18, $fp, -32, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
  B %bb.1

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  STURWi $wzr, $fp, -32, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
  $x8 = ADRP target-flags(aarch64-page) @bucket_size
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0

bb.4.for.cond9:
; predecessors: %bb.3, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)
  liveins: $x8
  renamable $w16 = LDURWi $fp, -32, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
  dead $wzr = SUBSWri killed renamable $w16, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5
  Bcc 12, %bb.6, implicit $nzcv, debug-location !386; is.c:395:5

bb.5.for.body11:
; predecessors: %bb.4
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $x8
  renamable $x16 = LDURSWi $fp, -32, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  STRWroX $wzr, renamable $x8, renamable $x16, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
  renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit killed $x16, debug-location !390; is.c:395:35
  STURWi killed renamable $w16, $fp, -32, debug-location !390 :: (store 4 into %ir.i); is.c:395:35
  B %bb.4

bb.6.for.end16:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  STURWi $wzr, $fp, -32, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
  $w8 = MOVNWi 65024, 16
  $x16 = ADRP target-flags(aarch64-page) @key_array
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  $x17 = ADRP target-flags(aarch64-page) @bucket_size
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0

bb.7.for.cond17:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)
  liveins: $w8, $x16, $x17
  renamable $w18 = LDURWi $fp, -32, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
  $wzr = SUBSWrs killed renamable $w18, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !400; is.c:399:5
  Bcc 12, %bb.9, implicit $nzcv, debug-location !400; is.c:399:5

bb.8.for.body19:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $w8, $x16, $x17
  renamable $x18 = LDURSWi $fp, -32, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  renamable $w0 = LDRWui $sp, 5, implicit-def $x0, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
  renamable $w1 = LDRWroX renamable $x16, renamable $x18, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
  renamable $w0 = ASRVWr killed renamable $w1, renamable $w0, implicit killed $x0, implicit-def $x0, debug-location !404; is.c:400:34
  renamable $x0 = SBFMXri killed renamable $x0, 62, 31, debug-location !405; is.c:400:9
  renamable $w1 = LDRWroX renamable $x17, renamable $x0, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
  renamable $w18 = nsw ADDWri renamable $w18, 1, 0, implicit killed $x18, debug-location !407; is.c:399:32
  renamable $w1 = nsw ADDWri killed renamable $w1, 1, 0, debug-location !406; is.c:400:43
  STRWroX killed renamable $w1, renamable $x17, killed renamable $x0, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
  STURWi killed renamable $w18, $fp, -32, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
  B %bb.7

bb.9.for.end27:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  renamable $x16 = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
  $w17 = MOVZWi 1, 0
  $x8 = ADRP target-flags(aarch64-page) @bucket_ptrs
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, 0
  STRWui $wzr, killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  STURWi killed renamable $w17, $fp, -32, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
  $x16 = ADRP target-flags(aarch64-page) @bucket_size
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0

bb.10.for.cond28:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)
  liveins: $x8, $x16
  renamable $w17 = LDURWi $fp, -32, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
  dead $wzr = SUBSWri killed renamable $w17, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5
  Bcc 12, %bb.12, implicit $nzcv, debug-location !418; is.c:404:5

bb.11.for.body30:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)
  liveins: $x8, $x16
  renamable $x17 = LDURSWi $fp, -32, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  renamable $x18 = UBFMXri renamable $x17, 62, 61, debug-location !420; is.c:405:40
  renamable $x0 = SUBXri renamable $x18, 4, 0, debug-location !421; is.c:405:26
  renamable $w1 = LDRWroX renamable $x8, renamable $x0, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
  renamable $w0 = LDRWroX renamable $x16, killed renamable $x0, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
  renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit killed $x17, debug-location !429; is.c:404:35
  $w0 = ADDWrs killed renamable $w1, killed renamable $w0, 0, debug-location !425; is.c:405:45
  STRWroX killed renamable $w0, renamable $x8, killed renamable $x18, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
  STURWi killed renamable $w17, $fp, -32, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
  B %bb.10

bb.12.for.end42:
; predecessors: %bb.10
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  STURWi $wzr, $fp, -32, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
  $w8 = MOVNWi 65024, 16
  $x16 = ADRP target-flags(aarch64-page) @key_array
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  $x17 = ADRP target-flags(aarch64-page) @bucket_ptrs
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, 0
  $x18 = ADRP target-flags(aarch64-page) @key_buff2
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0

bb.13.for.cond43:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)
  liveins: $w8, $x16, $x17, $x18
  renamable $w0 = LDURWi $fp, -32, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
  $wzr = SUBSWrs killed renamable $w0, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !439; is.c:408:5
  Bcc 12, %bb.15, implicit $nzcv, debug-location !439; is.c:408:5

bb.14.for.body45:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $w8, $x16, $x17, $x18
  renamable $x0 = LDURSWi $fp, -32, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  renamable $w1 = LDRWui $sp, 5, implicit-def $x1, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
  renamable $w2 = LDRWroX renamable $x16, renamable $x0, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
  renamable $w1 = ASRVWr renamable $w2, renamable $w1, implicit killed $x1, implicit-def $x1, debug-location !447; is.c:410:35
  renamable $x1 = SBFMXri killed renamable $x1, 62, 31, debug-location !448; is.c:410:19
  renamable $x3 = LDRSWroX renamable $x17, renamable $x1, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
  renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit killed $x0, debug-location !452; is.c:408:32
  STRWui renamable $w2, $sp, 4, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
  renamable $w4 = nsw ADDWri renamable $w3, 1, 0, debug-location !449; is.c:410:44
  STRWroX killed renamable $w2, renamable $x18, killed renamable $x3, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
  STRWroX killed renamable $w4, renamable $x17, killed renamable $x1, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
  STURWi killed renamable $w0, $fp, -32, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
  B %bb.13

bb.15.for.end56:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  $x8 = ADRP target-flags(aarch64-page) @key_buff2, debug-location !456; is.c:413:19
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0, debug-location !456; is.c:413:19
  STURWi $wzr, $fp, -32, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
  STRXui killed renamable $x8, $sp, 3, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  $x8 = ADRP target-flags(aarch64-page) @key_buff1
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, 0

bb.16.for.cond57:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)
  liveins: $x8
  renamable $w16 = LDURWi $fp, -32, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
  dead $wzr = SUBSWri killed renamable $w16, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5
  Bcc 10, %bb.18, implicit $nzcv, debug-location !463; is.c:422:5

bb.17.for.body59:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)
  liveins: $x8
  renamable $x16 = LDURSWi $fp, -32, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  STRWroX $wzr, renamable $x8, renamable $x16, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
  renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit killed $x16, debug-location !467; is.c:422:31
  STURWi killed renamable $w16, $fp, -32, debug-location !467 :: (store 4 into %ir.i); is.c:422:31
  B %bb.16

bb.18.for.end64:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  $x8 = ADRP target-flags(aarch64-page) @key_buff1, debug-location !471; is.c:427:18
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, 0, debug-location !471; is.c:427:18
  STURWi $wzr, $fp, -32, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
  STRXui killed renamable $x8, $sp, 4, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  $w8 = MOVNWi 65024, 16

bb.19.for.cond65:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)
  liveins: $w8
  renamable $w16 = LDURWi $fp, -32, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
  $wzr = SUBSWrs killed renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !478; is.c:433:5
  Bcc 12, %bb.21, implicit $nzcv, debug-location !478; is.c:433:5

bb.20.for.body67:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $w8
  renamable $x16 = LDRXui $sp, 3, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  renamable $x17 = LDURSWi $fp, -32, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  renamable $x16 = LDRSWroX killed renamable $x16, killed renamable $x17, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
  renamable $x17 = LDRXui $sp, 4, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  renamable $x16 = UBFMXri killed renamable $x16, 62, 61, debug-location !479; is.c:434:9
  renamable $w18 = LDRWroX renamable $x17, renamable $x16, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
  renamable $w18 = nsw ADDWri killed renamable $w18, 1, 0, debug-location !482; is.c:434:39
  STRWroX killed renamable $w18, killed renamable $x17, killed renamable $x16, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
  renamable $w16 = LDURWi $fp, -32, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0, debug-location !483; is.c:433:32
  STURWi killed renamable $w16, $fp, -32, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
  B %bb.19

bb.21.for.end75:
; predecessors: %bb.19
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  STURWi $wzr, $fp, -32, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
  renamable $w8 = ORRWri $wzr, 2003

bb.22.for.cond76:
; predecessors: %bb.21, %bb.23
  successors: %bb.23(0x7c000000), %bb.24(0x04000000); %bb.23(96.88%), %bb.24(3.12%)
  liveins: $w8
  renamable $w16 = LDURWi $fp, -32, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
  $wzr = SUBSWrs killed renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !493; is.c:440:5
  Bcc 12, %bb.24, implicit $nzcv, debug-location !493; is.c:440:5

bb.23.for.body78:
; predecessors: %bb.22
  successors: %bb.22(0x80000000); %bb.22(100.00%)
  liveins: $w8
  renamable $x16 = LDRXui $sp, 4, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  renamable $x17 = LDURSWi $fp, -32, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  renamable $x16 = ADDXrs killed renamable $x16, killed renamable $x17, 2, debug-location !494; is.c:441:32
  renamable $w17, renamable $w18 = LDPWi renamable $x16, 0, debug-location !494 :: (load 4 from %ir.arrayidx80), (load 4 from %ir.arrayidx83); is.c:441:32
  $w17 = ADDWrs killed renamable $w18, killed renamable $w17, 0, debug-location !499; is.c:441:29
  STRWui killed renamable $w17, killed renamable $x16, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
  renamable $w16 = LDURWi $fp, -32, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0, debug-location !500; is.c:440:35
  STURWi killed renamable $w16, $fp, -32, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
  B %bb.22

bb.24.for.end87:
; predecessors: %bb.22
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  STURWi $wzr, $fp, -32, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
  $x18 = ADRP target-flags(aarch64-page) @partial_verify_vals
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0
  $w0 = MOVNWi 65024, 16
  $x1 = ADRP target-flags(aarch64-page) @test_rank_array
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0

bb.25.for.cond88:
; predecessors: %bb.24, %bb.38
  successors: %bb.26(0x7c000000), %bb.39(0x04000000); %bb.26(96.88%), %bb.39(3.12%)
  liveins: $w0, $x1, $x18
  renamable $w8 = LDURWi $fp, -32, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5
  Bcc 12, %bb.39, implicit $nzcv, debug-location !510; is.c:446:5

bb.26.for.body90:
; predecessors: %bb.25
  successors: %bb.27(0x60000000), %bb.38(0x20000000); %bb.27(75.00%), %bb.38(25.00%)
  liveins: $w0, $x1, $x18
  renamable $x8 = LDURSWi $fp, -32, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  renamable $w8 = LDRWroX renamable $x18, killed renamable $x8, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
  dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
  STURWi renamable $w8, $fp, -36, debug-location !514 :: (store 4 into %ir.k); is.c:447:11
  Bcc 11, %bb.38, implicit $nzcv, debug-location !520; is.c:448:19

bb.27.for.body90:
; predecessors: %bb.26
  successors: %bb.28(0x55555555), %bb.38(0x2aaaaaab); %bb.28(66.67%), %bb.38(33.33%)
  liveins: $w0, $w8, $x1, $x18
  $wzr = SUBSWrs killed renamable $w8, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !520; is.c:448:19
  Bcc 12, %bb.38, implicit $nzcv, debug-location !520; is.c:448:19

bb.28.if.then:
; predecessors: %bb.27
  successors: %bb.31(0x10000000), %bb.29(0x70000000); %bb.31(12.50%), %bb.29(87.50%)
  liveins: $w0, $x1, $x18
  renamable $x8 = LDRXui $sp, 4, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  renamable $x16 = LDURSWi $fp, -36, debug-location !525 :: (dereferenceable load 4 from %ir.k); is.c:449:46
  renamable $x16 = ADDXrs killed renamable $x8, killed renamable $x16, 2, debug-location !524; is.c:449:33
  renamable $w8 = LDURWi $fp, -32, debug-location !529 :: (dereferenceable load 4 from %ir.i); is.c:496:21
  renamable $w16 = LDURWi killed renamable $x16, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
  dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  STPWi $wzr, renamable $w16, $sp, 2, debug-location !523 :: (store 4 into %ir.key_rank), (store 4 into %ir.failed); is.c:449:22
  Bcc 0, %bb.31, implicit $nzcv, debug-location !534; is.c:496:28

bb.29.if.then:
; predecessors: %bb.28
  successors: %bb.31(0x12492492), %bb.30(0x6db6db6e); %bb.31(14.29%), %bb.30(85.71%)
  liveins: $w0, $w8, $x1, $x18
  dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  Bcc 0, %bb.31, implicit $nzcv, debug-location !534; is.c:496:28

bb.30.if.then:
; predecessors: %bb.29
  successors: %bb.31(0x2aaaaaab), %bb.34(0x55555555); %bb.31(33.33%), %bb.34(66.67%)
  liveins: $w0, $w8, $x1, $x18
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  Bcc 1, %bb.34, implicit $nzcv, debug-location !534; is.c:496:28

bb.31.if.then102:
; predecessors: %bb.28, %bb.29, %bb.30
  successors: %bb.32(0x80000000); %bb.32(100.00%)
  liveins: $w0, $x1, $x18
  $w8, renamable $w16 = LDPWi $fp, -8, debug-location !540 :: (dereferenceable load 4 from %ir.i), (dereferenceable load 4 from %ir.iteration.addr); is.c:497:53
  $w8 = KILL $w8, implicit-def $x8, debug-location !540; is.c:497:53
  $x8 = SBFMXri $x8, 0, 31, debug-location !540; is.c:497:53
  renamable $w8 = LDRWroX renamable $x1, killed renamable $x8, 0, 1, debug-location !541 :: (load 4 from %ir.arrayidx104); is.c:497:37
  renamable $w17 = LDRWui $sp, 3, debug-location !537 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:25
  $w8 = ADDWrs killed renamable $w8, killed renamable $w16, 0, debug-location !543; is.c:497:56

bb.32.if.then102:
; predecessors: %bb.31, %bb.34
  successors: %bb.33(0x40000000), %bb.35(0x40000000); %bb.33(50.00%), %bb.35(50.00%)
  liveins: $w0, $x1, $x18, $w17, $w8
  $wzr = SUBSWrs killed renamable $w17, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !DILocation(line: 0, scope: !530); is.c:0
  Bcc 0, %bb.35, implicit $nzcv, debug-location !DILocation(line: 0, scope: !530); is.c:0

bb.33.if.then107:
; predecessors: %bb.32
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $w0, $x1, $x18
  $w8 = MOVZWi 1, 0, debug-location !DILocation(line: 0, scope: !530); is.c:0
  STRWui killed renamable $w8, $sp, 2, debug-location !DILocation(line: 0, scope: !530) :: (store 4 into %ir.failed); is.c:0
  B %bb.36

bb.34.if.else109:
; predecessors: %bb.30
  successors: %bb.32(0x80000000); %bb.32(100.00%)
  liveins: $w0, $x1, $x18
  $w8, renamable $w16 = LDPWi $fp, -8, debug-location !552 :: (dereferenceable load 4 from %ir.i), (dereferenceable load 4 from %ir.iteration.addr); is.c:503:53
  $w8 = KILL $w8, implicit-def $x8, debug-location !552; is.c:503:53
  $x8 = SBFMXri $x8, 0, 31, debug-location !552; is.c:503:53
  renamable $w8 = LDRWroX renamable $x1, killed renamable $x8, 0, 1, debug-location !553 :: (load 4 from %ir.arrayidx111); is.c:503:37
  renamable $w17 = LDRWui $sp, 3, debug-location !549 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:25
  $w8 = SUBWrs killed renamable $w8, killed renamable $w16, 0, debug-location !555; is.c:503:56
  B %bb.32

bb.35.if.else115:
; predecessors: %bb.32
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $w0, $x1, $x18
  renamable $x16 = ADRP target-flags(aarch64-page) @passed_verification
  renamable $w8 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !DILocation(line: 0, scope: !530) :: (dereferenceable load 4 from @passed_verification); is.c:0
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !DILocation(line: 0, scope: !530); is.c:0
  STRWui killed renamable $w8, killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !DILocation(line: 0, scope: !530) :: (store 4 into @passed_verification); is.c:0

bb.36.if.end118:
; predecessors: %bb.35, %bb.33
  successors: %bb.37(0x40000000), %bb.38(0x40000000); %bb.37(50.00%), %bb.38(50.00%)
  liveins: $w0, $x1, $x18
  renamable $w8 = LDRWui $sp, 2, debug-location !561 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
  dead $wzr = SUBSWri killed renamable $w8, 1, 0, implicit-def $nzcv, debug-location !564; is.c:538:17
  Bcc 1, %bb.38, implicit $nzcv, debug-location !564; is.c:538:17

bb.37.if.then120:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  renamable $w20, renamable $w19 = LDPWi $fp, -8, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr), (dereferenceable load 4 from %ir.i); is.c:541:24
  $x0 = ADRP target-flags(aarch64-page) @is__str_1_Failed_par, debug-location !567; is.c:539:17
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_1_Failed_par, 0, debug-location !567; is.c:539:17
  $w1 = ORRWrs $wzr, $w19, 0, debug-location !567; is.c:539:17
  $w2 = ORRWrs $wzr, $w20, 0, debug-location !567; is.c:539:17
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w8, debug-location !567; is.c:539:17
  $x1 = ADRP target-flags(aarch64-page) @test_rank_array
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
  $w0 = MOVNWi 65024, 16
  $x18 = ADRP target-flags(aarch64-page) @partial_verify_vals
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0
  PCN_STACKMAP 0, 0, 0, $fp, -72, 0, $fp, -32, 0, $fp, -28, 0, $fp, -36, 0, $fp, -48, 0, $fp, -68, killed renamable $w19, killed renamable $w20, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !567 :: (load 8 from %stack.8.failed, align 4), (load 8 from %stack.1.i, align 4), (load 8 from %stack.0.iteration.addr, align 4), (load 8 from %stack.2.k, align 4), (load 8 from %stack.3.key_buff_ptr), (load 8 from %stack.7.key_rank, align 4); is.c:539:17

bb.38.for.inc123:
; predecessors: %bb.26, %bb.27, %bb.36, %bb.37
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $w0, $x1, $x18
  renamable $w8 = LDURWi $fp, -32, debug-location !568 :: (dereferenceable load 4 from %ir.i); is.c:446:39
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !568; is.c:446:39
  STURWi killed renamable $w8, $fp, -32, debug-location !568 :: (store 4 into %ir.i); is.c:446:39
  B %bb.25

bb.39.for.end125:
; predecessors: %bb.25
  successors: %bb.40(0x40000000), %bb.41(0x40000000); %bb.40(50.00%), %bb.41(50.00%)

  renamable $w8 = LDURWi $fp, -28, debug-location !572 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv, debug-location !575; is.c:549:9
  Bcc 1, %bb.41, implicit $nzcv, debug-location !575; is.c:549:9

bb.40.if.then127:
; predecessors: %bb.39
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  renamable $x8 = LDRXui $sp, 4, debug-location !576 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  renamable $x16 = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !577; is.c:550:29
  STRXui killed renamable $x8, killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !577 :: (store 8 into @key_buff_ptr_global); is.c:550:29

bb.41.if.end128:
; predecessors: %bb.39, %bb.40

  $fp, $lr = frame-destroy LDPXi $sp, 10, debug-location !579 :: (load 8 from %stack.11), (load 8 from %stack.10); is.c:551:1
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !579 :: (load 8 from %stack.13), (load 8 from %stack.12); is.c:551:1
  $sp = frame-destroy ADDXri $sp, 96, 0, debug-location !579; is.c:551:1
  RET undef $lr, debug-location !579; is.c:551:1

# End machine code for function rank.

********** MI Scheduling **********
rank:%bb.0 entry
  From: renamable $w0 = KILL $w0, implicit-def $x0
    To: End RegionInstrs: 16
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = KILL $w0, implicit-def $x0
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=0 Reg=$w0
    SU(8): Data Latency=0 Reg=$w0
    SU(1): Data Latency=0 Reg=$w0
    SU(9): Data Latency=0 Reg=$x0
    SU(5): Data Latency=0 Reg=$x0
SU(1):   STPWi $wzr, renamable $w0, $fp, -8 :: (store 4 into %ir.iteration.addr), (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Data Latency=0 Reg=$w0
  Successors:
    SU(9): Anti Latency=0
SU(2):   $w16 = MOVZWi 11, 0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Out  Latency=1
    SU(11): Out  Latency=1
    SU(6): Data Latency=1 Reg=$w16
SU(3):   $x8 = ADRP target-flags(aarch64-page) @key_array, debug-location !355; is.c:384:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
SU(4):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0, debug-location !355; is.c:384:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(9): Data Latency=1 Reg=$x8
SU(5):   renamable $x17 = SBFMXri renamable $x0, 0, 31, debug-location !353; is.c:384:28
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Data Latency=0 Reg=$x0
  Successors:
    SU(14): Out  Latency=1
    SU(10): Data Latency=1 Reg=$w17
    SU(10): Data Latency=0 Reg=$x17
    SU(9): Anti Latency=0
SU(6):   STRWui renamable $w16, $sp, 5, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=$w16
  Successors:
    SU(7): Anti Latency=0
    SU(11): Anti Latency=0
SU(7):   $w16 = MOVZWi 32, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(6): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(11): Out  Latency=1
    SU(8): Data Latency=1 Reg=$w16
SU(8):   $w18 = SUBWrs renamable $w16, renamable $w0, 0, debug-location !358; is.c:385:53
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(7): Data Latency=1 Reg=$w16
    SU(0): Data Latency=0 Reg=$w0
  Successors:
    SU(13): Data Latency=1 Reg=$w18
    SU(11): Anti Latency=0
    SU(9): Anti Latency=0
SU(9):   renamable $x0 = ADDXrx renamable $x8, renamable $w0, 50, implicit $x0, debug-location !355; is.c:384:5
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(8): Anti Latency=0
    SU(5): Anti Latency=0
    SU(4): Data Latency=1 Reg=$x8
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=0 Reg=$w0
    SU(0): Data Latency=0 Reg=$x0
  Successors:
    SU(13): Data Latency=1 Reg=$x0
    SU(10): Data Latency=1 Reg=$x0
SU(10):   STRWui renamable $w17, renamable $x0, 0, implicit $x17, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(9): Data Latency=1 Reg=$x0
    SU(5): Data Latency=1 Reg=$w17
    SU(5): Data Latency=0 Reg=$x17
  Successors:
    SU(14): Anti Latency=0
SU(11):   $x16 = ADRP target-flags(aarch64-page) @test_index_array
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
    SU(6): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x16
SU(12):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(13):   STRWui renamable $w18, renamable $x0, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$x0
    SU(8): Data Latency=1 Reg=$w18
SU(14):   $x17 = ADRP target-flags(aarch64-page) @partial_verify_vals
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(10): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x17
SU(15):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $w16 = MOVZWi 11, 0
  Ready @0c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x8 = ADRP target-flags(aarch64-page) @key_array, debug-location !355; is.c:384:5
  Ready @1c
  TopQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w0 = KILL $w0, implicit-def $x0
  Ready @2c
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 1 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0, debug-location !355; is.c:384:5
  Ready @2c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 1 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(6) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) STRWui renamable $w16, $sp, 5, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
  Ready @3c
  TopQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 7 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(7) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $w16 = MOVZWi 32, 16
  Ready @4c
  TopQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STPWi $wzr, renamable $w0, $fp, -8 :: (store 4 into %ir.iteration.addr), (store 4 into %ir.i)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x17 = SBFMXri renamable $x0, 0, 31, debug-location !353; is.c:384:28
  Ready @6c
  TopQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) $w18 = SUBWrs renamable $w16, renamable $w0, 0, debug-location !358; is.c:385:53
  Ready @7c
  TopQ.A TopLatency SU(8) 2c
  TopQ.A BotLatency SU(8) 3c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(9) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x0 = ADDXrx renamable $x8, renamable $w0, 50, implicit $x0, debug-location !355; is.c:384:5
  Ready @8c
  TopQ.A BotLatency SU(9) 3c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) STRWui renamable $w17, renamable $x0, 0, implicit $x17, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
  Ready @9c
  TopQ.A TopLatency SU(10) 3c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 14 
  TopQ.A RemainingLatency 0 + 10c > CritPath 5
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x16 = ADRP target-flags(aarch64-page) @test_index_array
  Ready @10c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 13 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 5
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) $x17 = ADRP target-flags(aarch64-page) @partial_verify_vals
  Ready @11c
  TopQ.A BotLatency SU(14) 2c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 13 15 
  TopQ.A RemainingLatency 0 + 12c > CritPath 5
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 13 
  TopQ.A RemainingLatency 0 + 13c > CritPath 5
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0
  Ready @13c
  TopQ.A TopLatency SU(15) 4c
  TopQ.A BotLatency SU(15) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STRWui renamable $w18, renamable $x0, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(2):   $w16 = MOVZWi 11, 0
SU(3):   $x8 = ADRP target-flags(aarch64-page) @key_array, debug-location !355; is.c:384:5
SU(0):   renamable $w0 = KILL $w0, implicit-def $x0
SU(4):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0, debug-location !355; is.c:384:5
SU(6):   STRWui renamable $w16, $sp, 5, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
SU(7):   $w16 = MOVZWi 32, 16
SU(1):   STPWi $wzr, renamable $w0, $fp, -8 :: (store 4 into %ir.iteration.addr), (store 4 into %ir.i)
SU(5):   renamable $x17 = SBFMXri renamable $x0, 0, 31, debug-location !353; is.c:384:28
SU(8):   $w18 = SUBWrs renamable $w16, renamable $w0, 0, debug-location !358; is.c:385:53
SU(9):   renamable $x0 = ADDXrx renamable $x8, renamable $w0, 50, implicit $x0, debug-location !355; is.c:384:5
SU(10):   STRWui renamable $w17, renamable $x0, 0, implicit $x17, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
SU(11):   $x16 = ADRP target-flags(aarch64-page) @test_index_array
SU(14):   $x17 = ADRP target-flags(aarch64-page) @partial_verify_vals
SU(12):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
SU(15):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0
SU(13):   STRWui renamable $w18, renamable $x0, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43

********** MI Scheduling **********
rank:%bb.0 entry
  From: frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store 8 into %stack.13), (store 8 into %stack.12)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x20, $x19, $sp, 8 :: (store 8 into %stack.13), (store 8 into %stack.12)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 10 :: (store 8 into %stack.11), (store 8 into %stack.10)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 80, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x20, $x19, $sp, 8 :: (store 8 into %stack.13), (store 8 into %stack.12)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 10 :: (store 8 into %stack.11), (store 8 into %stack.10)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 80, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x20, $x19, $sp, 8 :: (store 8 into %stack.13), (store 8 into %stack.12)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 10 :: (store 8 into %stack.11), (store 8 into %stack.10)
SU(2):   $fp = frame-setup ADDXri $sp, 80, 0

Fixup kills for %bb.0
********** MI Scheduling **********
rank:%bb.1 for.cond
  From: renamable $w18 = LDURWi $fp, -32, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
    To: Bcc 12, %bb.3, implicit $nzcv, debug-location !369; is.c:389:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -32, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w18
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.3, implicit $nzcv, debug-location !369; is.c:389:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -32, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w18 = LDURWi $fp, -32, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5

Fixup kills for %bb.1
********** MI Scheduling **********
rank:%bb.2 for.body
  From: renamable $x18 = LDURSWi $fp, -32, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
    To: B %bb.1
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x18 = LDURSWi $fp, -32, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w18
    SU(4): Data Latency=0 Reg=$x18
    SU(1): Data Latency=4 Reg=$x18
    SU(6): Ord  Latency=0 Memory
SU(1):   renamable $x0 = UBFMXri renamable $x18, 62, 61, debug-location !371; is.c:390:44
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=$x18
  Successors:
    SU(5): Data Latency=1 Reg=$x0
    SU(2): Data Latency=1 Reg=$x0
    SU(4): Anti Latency=0
SU(2):   renamable $x1 = LDRSWroX renamable $x16, renamable $x0, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x1
SU(3):   renamable $w1 = LDRWroX renamable $x8, renamable $x1, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x1
  Successors:
    SU(5): Data Latency=4 Reg=$w1
SU(4):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0, implicit $x18, debug-location !376; is.c:389:39
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w18
    SU(0): Data Latency=0 Reg=$x18
  Successors:
    SU(6): Data Latency=1 Reg=$w18
SU(5):   STRWroX renamable $w1, renamable $x17, renamable $x0, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w1
    SU(1): Data Latency=1 Reg=$x0
SU(6):   STURWi renamable $w18, $fp, -32, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w18
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 13
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x18 = LDURSWi $fp, -32, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  Ready @0c
  TopQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = UBFMXri renamable $x18, 62, 61, debug-location !371; is.c:390:44
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 13
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x1 = LDRSWroX renamable $x16, renamable $x0, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w18 = nsw ADDWri renamable $w18, 1, 0, implicit $x18, debug-location !376; is.c:389:39
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STURWi renamable $w18, $fp, -32, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w1 = LDRWroX renamable $x8, renamable $x1, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
  Ready @9c
  TopQ.A TopLatency SU(3) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 6
  Executed: 10c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 13 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWroX renamable $w1, renamable $x17, renamable $x0, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
  Ready @13c
  TopQ.A TopLatency SU(5) 13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 7
  Executed: 14c
  Critical: 7c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x18 = LDURSWi $fp, -32, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
SU(1):   renamable $x0 = UBFMXri renamable $x18, 62, 61, debug-location !371; is.c:390:44
SU(2):   renamable $x1 = LDRSWroX renamable $x16, renamable $x0, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
SU(4):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0, implicit $x18, debug-location !376; is.c:389:39
SU(6):   STURWi renamable $w18, $fp, -32, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
SU(3):   renamable $w1 = LDRWroX renamable $x8, renamable $x1, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
SU(5):   STRWroX renamable $w1, renamable $x17, renamable $x0, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32

Fixup kills for %bb.2
********** MI Scheduling **********
rank:%bb.3 for.end
  From: STURWi $wzr, $fp, -32, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -32, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x8 = ADRP target-flags(aarch64-page) @bucket_size
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = ADRP target-flags(aarch64-page) @bucket_size
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -32, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(1):   $x8 = ADRP target-flags(aarch64-page) @bucket_size
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0
SU(0):   STURWi $wzr, $fp, -32, debug-location !380 :: (store 4 into %ir.i); is.c:395:12

Fixup kills for %bb.3
********** MI Scheduling **********
rank:%bb.4 for.cond9
  From: renamable $w16 = LDURWi $fp, -32, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
    To: Bcc 12, %bb.6, implicit $nzcv, debug-location !386; is.c:395:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDURWi $fp, -32, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w16
SU(1):   dead $wzr = SUBSWri renamable $w16, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.6, implicit $nzcv, debug-location !386; is.c:395:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w16 = LDURWi $fp, -32, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w16, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w16 = LDURWi $fp, -32, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
SU(1):   dead $wzr = SUBSWri renamable $w16, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5

Fixup kills for %bb.4
********** MI Scheduling **********
rank:%bb.5 for.body11
  From: renamable $x16 = LDURSWi $fp, -32, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
    To: B %bb.4
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = LDURSWi $fp, -32, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w16
    SU(2): Data Latency=0 Reg=$x16
    SU(1): Data Latency=4 Reg=$x16
    SU(3): Ord  Latency=0 Memory
SU(1):   STRWroX $wzr, renamable $x8, renamable $x16, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x16
  Successors:
    SU(2): Anti Latency=0
SU(2):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit $x16, debug-location !390; is.c:395:35
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w16
    SU(0): Data Latency=0 Reg=$x16
  Successors:
    SU(3): Data Latency=1 Reg=$w16
SU(3):   STURWi renamable $w16, $fp, -32, debug-location !390 :: (store 4 into %ir.i); is.c:395:35
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w16
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.4
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x16 = LDURSWi $fp, -32, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWroX $wzr, renamable $x8, renamable $x16, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit $x16, debug-location !390; is.c:395:35
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi renamable $w16, $fp, -32, debug-location !390 :: (store 4 into %ir.i); is.c:395:35
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $x16 = LDURSWi $fp, -32, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
SU(1):   STRWroX $wzr, renamable $x8, renamable $x16, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
SU(2):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit $x16, debug-location !390; is.c:395:35
SU(3):   STURWi renamable $w16, $fp, -32, debug-location !390 :: (store 4 into %ir.i); is.c:395:35

Fixup kills for %bb.5
********** MI Scheduling **********
rank:%bb.6 for.end16
  From: STURWi $wzr, $fp, -32, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -32, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVNWi 65024, 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x16 = ADRP target-flags(aarch64-page) @key_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x17 = ADRP target-flags(aarch64-page) @bucket_size
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x17
SU(5):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x16 = ADRP target-flags(aarch64-page) @key_array
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x17 = ADRP target-flags(aarch64-page) @bucket_size
  Ready @1c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVNWi 65024, 16
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0
  Ready @4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -32, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(2):   $x16 = ADRP target-flags(aarch64-page) @key_array
SU(4):   $x17 = ADRP target-flags(aarch64-page) @bucket_size
SU(1):   $w8 = MOVNWi 65024, 16
SU(3):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
SU(5):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0
SU(0):   STURWi $wzr, $fp, -32, debug-location !394 :: (store 4 into %ir.i); is.c:399:12

Fixup kills for %bb.6
********** MI Scheduling **********
rank:%bb.7 for.cond17
  From: renamable $w18 = LDURWi $fp, -32, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
    To: Bcc 12, %bb.9, implicit $nzcv, debug-location !400; is.c:399:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -32, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w18
SU(1):   $wzr = SUBSWrs renamable $w18, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !400; is.c:399:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.9, implicit $nzcv, debug-location !400; is.c:399:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -32, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w18, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !400; is.c:399:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w18 = LDURWi $fp, -32, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
SU(1):   $wzr = SUBSWrs renamable $w18, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !400; is.c:399:5

Fixup kills for %bb.7
********** MI Scheduling **********
rank:%bb.8 for.body19
  From: renamable $x18 = LDURSWi $fp, -32, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
    To: B %bb.7
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $x18 = LDURSWi $fp, -32, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w18
    SU(6): Data Latency=0 Reg=$x18
    SU(2): Data Latency=4 Reg=$x18
    SU(9): Ord  Latency=0 Memory
SU(1):   renamable $w0 = LDRWui $sp, 5, implicit-def $x0, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w0
    SU(3): Data Latency=0 Reg=$x0
SU(2):   renamable $w1 = LDRWroX renamable $x16, renamable $x18, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Data Latency=4 Reg=$x18
  Successors:
    SU(5): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w1
    SU(6): Anti Latency=0
SU(3):   renamable $w0 = ASRVWr renamable $w1, renamable $w0, implicit $x0, implicit-def $x0, debug-location !404; is.c:400:34
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(2): Data Latency=4 Reg=$w1
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w0
    SU(1): Data Latency=0 Reg=$x0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
    SU(5): Anti Latency=0
SU(4):   renamable $x0 = SBFMXri renamable $x0, 62, 31, debug-location !405; is.c:400:9
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    SU(8): Data Latency=1 Reg=$x0
    SU(5): Data Latency=1 Reg=$x0
SU(5):   renamable $w1 = LDRWroX renamable $x17, renamable $x0, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=$x0
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w1
    SU(8): Ord  Latency=0 Memory
SU(6):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0, implicit $x18, debug-location !407; is.c:399:32
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w18
    SU(0): Data Latency=0 Reg=$x18
  Successors:
    SU(9): Data Latency=1 Reg=$w18
SU(7):   renamable $w1 = nsw ADDWri renamable $w1, 1, 0, debug-location !406; is.c:400:43
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w1
  Successors:
    SU(8): Data Latency=1 Reg=$w1
SU(8):   STRWroX renamable $w1, renamable $x17, renamable $x0, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w1
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=1 Reg=$x0
SU(9):   STURWi renamable $w18, $fp, -32, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w18
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x18 = LDURSWi $fp, -32, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w0 = LDRWui $sp, 5, implicit-def $x0, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w1 = LDRWroX renamable $x16, renamable $x18, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w18 = nsw ADDWri renamable $w18, 1, 0, implicit $x18, debug-location !407; is.c:399:32
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STURWi renamable $w18, $fp, -32, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
  Ready @6c
  TopQ.A TopLatency SU(9) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w0 = ASRVWr renamable $w1, renamable $w0, implicit $x0, implicit-def $x0, debug-location !404; is.c:400:34
  Ready @8c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x0 = SBFMXri renamable $x0, 62, 31, debug-location !405; is.c:400:9
  Ready @9c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w1 = LDRWroX renamable $x17, renamable $x0, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
  Ready @10c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 14 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w1 = nsw ADDWri renamable $w1, 1, 0, debug-location !406; is.c:400:43
  Ready @14c
  TopQ.A TopLatency SU(7) 14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 9
  Executed: 15c
  Critical: 9c, 9 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWroX renamable $w1, renamable $x17, renamable $x0, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
  Ready @15c
  TopQ.A TopLatency SU(8) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 10
  Executed: 16c
  Critical: 10c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x18 = LDURSWi $fp, -32, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
SU(1):   renamable $w0 = LDRWui $sp, 5, implicit-def $x0, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
SU(2):   renamable $w1 = LDRWroX renamable $x16, renamable $x18, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
SU(6):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0, implicit $x18, debug-location !407; is.c:399:32
SU(9):   STURWi renamable $w18, $fp, -32, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
SU(3):   renamable $w0 = ASRVWr renamable $w1, renamable $w0, implicit $x0, implicit-def $x0, debug-location !404; is.c:400:34
SU(4):   renamable $x0 = SBFMXri renamable $x0, 62, 31, debug-location !405; is.c:400:9
SU(5):   renamable $w1 = LDRWroX renamable $x17, renamable $x0, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
SU(7):   renamable $w1 = nsw ADDWri renamable $w1, 1, 0, debug-location !406; is.c:400:43
SU(8):   STRWroX renamable $w1, renamable $x17, renamable $x0, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43

Fixup kills for %bb.8
********** MI Scheduling **********
rank:%bb.9 for.end27
  From: renamable $x16 = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
    To: End RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(6): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
SU(1):   $w17 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=$w17
SU(2):   $x8 = ADRP target-flags(aarch64-page) @bucket_ptrs
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   STRWui $wzr, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Data Latency=1 Reg=$x16
  Successors:
    SU(6): Anti Latency=0
SU(5):   STURWi renamable $w17, $fp, -32, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w17
SU(6):   $x16 = ADRP target-flags(aarch64-page) @bucket_size
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(4): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x16
SU(7):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x16 = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x8 = ADRP target-flags(aarch64-page) @bucket_ptrs
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) STRWui $wzr, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  Ready @2c
  TopQ.A TopLatency SU(4) 1c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x16 = ADRP target-flags(aarch64-page) @bucket_size
  Ready @3c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 7 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $w17 = MOVZWi 1, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 7 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 3
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, 0
  Ready @5c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 3
  Cand SU(5) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0
  Ready @6c
  TopQ.A TopLatency SU(7) 2c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STURWi renamable $w17, $fp, -32, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   renamable $x16 = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
SU(2):   $x8 = ADRP target-flags(aarch64-page) @bucket_ptrs
SU(4):   STRWui $wzr, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
SU(6):   $x16 = ADRP target-flags(aarch64-page) @bucket_size
SU(1):   $w17 = MOVZWi 1, 0
SU(3):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, 0
SU(7):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0
SU(5):   STURWi renamable $w17, $fp, -32, debug-location !412 :: (store 4 into %ir.i); is.c:404:12

Fixup kills for %bb.9
********** MI Scheduling **********
rank:%bb.10 for.cond28
  From: renamable $w17 = LDURWi $fp, -32, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
    To: Bcc 12, %bb.12, implicit $nzcv, debug-location !418; is.c:404:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w17 = LDURWi $fp, -32, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w17
SU(1):   dead $wzr = SUBSWri renamable $w17, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.12, implicit $nzcv, debug-location !418; is.c:404:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w17 = LDURWi $fp, -32, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w17, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w17 = LDURWi $fp, -32, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
SU(1):   dead $wzr = SUBSWri renamable $w17, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5

Fixup kills for %bb.10
********** MI Scheduling **********
rank:%bb.11 for.body30
  From: renamable $x17 = LDURSWi $fp, -32, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
    To: B %bb.10
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x17 = LDURSWi $fp, -32, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w17
    SU(5): Data Latency=0 Reg=$x17
    SU(1): Data Latency=4 Reg=$x17
    SU(8): Ord  Latency=0 Memory
SU(1):   renamable $x18 = UBFMXri renamable $x17, 62, 61, debug-location !420; is.c:405:40
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=$x17
  Successors:
    SU(7): Data Latency=1 Reg=$x18
    SU(2): Data Latency=1 Reg=$x18
    SU(5): Anti Latency=0
SU(2):   renamable $x0 = SUBXri renamable $x18, 4, 0, debug-location !421; is.c:405:26
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x18
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
    SU(3): Data Latency=1 Reg=$x0
SU(3):   renamable $w1 = LDRWroX renamable $x8, renamable $x0, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    SU(6): Data Latency=4 Reg=$w1
    SU(4): Anti Latency=0
    SU(7): Ord  Latency=0 Memory
SU(4):   renamable $w0 = LDRWroX renamable $x16, renamable $x0, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w0
SU(5):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !429; is.c:404:35
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w17
    SU(0): Data Latency=0 Reg=$x17
  Successors:
    SU(8): Data Latency=1 Reg=$w17
SU(6):   $w0 = ADDWrs renamable $w1, renamable $w0, 0, debug-location !425; is.c:405:45
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w0
    SU(3): Data Latency=4 Reg=$w1
  Successors:
    SU(7): Data Latency=1 Reg=$w0
SU(7):   STRWroX renamable $w0, renamable $x8, renamable $x18, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w0
    SU(3): Ord  Latency=0 Memory
    SU(1): Data Latency=1 Reg=$x18
SU(8):   STURWi renamable $w17, $fp, -32, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$w17
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x17 = LDURSWi $fp, -32, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x18 = UBFMXri renamable $x17, 62, 61, debug-location !420; is.c:405:40
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x0 = SUBXri renamable $x18, 4, 0, debug-location !421; is.c:405:26
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w1 = LDRWroX renamable $x8, renamable $x0, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
  Ready @6c
  TopQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w0 = LDRWroX renamable $x16, renamable $x0, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
  Ready @7c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !429; is.c:404:35
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STURWi renamable $w17, $fp, -32, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $w0 = ADDWrs renamable $w1, renamable $w0, 0, debug-location !425; is.c:405:45
  Ready @11c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWroX renamable $w0, renamable $x8, renamable $x18, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
  Ready @12c
  TopQ.A TopLatency SU(7) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $x17 = LDURSWi $fp, -32, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
SU(1):   renamable $x18 = UBFMXri renamable $x17, 62, 61, debug-location !420; is.c:405:40
SU(2):   renamable $x0 = SUBXri renamable $x18, 4, 0, debug-location !421; is.c:405:26
SU(3):   renamable $w1 = LDRWroX renamable $x8, renamable $x0, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
SU(4):   renamable $w0 = LDRWroX renamable $x16, renamable $x0, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
SU(5):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !429; is.c:404:35
SU(8):   STURWi renamable $w17, $fp, -32, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
SU(6):   $w0 = ADDWrs renamable $w1, renamable $w0, 0, debug-location !425; is.c:405:45
SU(7):   STRWroX renamable $w0, renamable $x8, renamable $x18, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24

Fixup kills for %bb.11
********** MI Scheduling **********
rank:%bb.12 for.end42
  From: STURWi $wzr, $fp, -32, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
    To: End RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -32, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVNWi 65024, 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x16 = ADRP target-flags(aarch64-page) @key_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x17 = ADRP target-flags(aarch64-page) @bucket_ptrs
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x17
SU(5):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x18 = ADRP target-flags(aarch64-page) @key_buff2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x18
SU(7):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x16 = ADRP target-flags(aarch64-page) @key_array
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 4 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(6) TOP-PATH                  2 cycles 
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x17 = ADRP target-flags(aarch64-page) @bucket_ptrs
  Ready @1c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 3 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x18 = ADRP target-flags(aarch64-page) @key_buff2
  Ready @2c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 3 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVNWi 65024, 16
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 5 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  Ready @4c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, 0
  Ready @5c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0
  Ready @6c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -32, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(2):   $x16 = ADRP target-flags(aarch64-page) @key_array
SU(4):   $x17 = ADRP target-flags(aarch64-page) @bucket_ptrs
SU(6):   $x18 = ADRP target-flags(aarch64-page) @key_buff2
SU(1):   $w8 = MOVNWi 65024, 16
SU(3):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
SU(5):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, 0
SU(7):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0
SU(0):   STURWi $wzr, $fp, -32, debug-location !433 :: (store 4 into %ir.i); is.c:408:12

Fixup kills for %bb.12
********** MI Scheduling **********
rank:%bb.13 for.cond43
  From: renamable $w0 = LDURWi $fp, -32, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
    To: Bcc 12, %bb.15, implicit $nzcv, debug-location !439; is.c:408:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDURWi $fp, -32, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w0
SU(1):   $wzr = SUBSWrs renamable $w0, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !439; is.c:408:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.15, implicit $nzcv, debug-location !439; is.c:408:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w0 = LDURWi $fp, -32, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w0, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !439; is.c:408:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   renamable $w0 = LDURWi $fp, -32, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
SU(1):   $wzr = SUBSWrs renamable $w0, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !439; is.c:408:5

Fixup kills for %bb.13
********** MI Scheduling **********
rank:%bb.14 for.body45
  From: renamable $x0 = LDURSWi $fp, -32, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
    To: B %bb.13
 RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDURSWi $fp, -32, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w0
    SU(6): Data Latency=0 Reg=$x0
    SU(2): Data Latency=4 Reg=$x0
    SU(11): Ord  Latency=0 Memory
SU(1):   renamable $w1 = LDRWui $sp, 5, implicit-def $x1, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w1
    SU(3): Data Latency=0 Reg=$x1
SU(2):   renamable $w2 = LDRWroX renamable $x16, renamable $x0, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Data Latency=4 Reg=$x0
  Successors:
    SU(9): Data Latency=4 Reg=$w2
    SU(7): Data Latency=4 Reg=$w2
    SU(3): Data Latency=4 Reg=$w2
    SU(6): Anti Latency=0
SU(3):   renamable $w1 = ASRVWr renamable $w2, renamable $w1, implicit $x1, implicit-def $x1, debug-location !447; is.c:410:35
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(2): Data Latency=4 Reg=$w2
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w1
    SU(1): Data Latency=0 Reg=$x1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x1
SU(4):   renamable $x1 = SBFMXri renamable $x1, 62, 31, debug-location !448; is.c:410:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
  Successors:
    SU(10): Data Latency=1 Reg=$x1
    SU(5): Data Latency=1 Reg=$x1
SU(5):   renamable $x3 = LDRSWroX renamable $x17, renamable $x1, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=$x1
  Successors:
    SU(8): Data Latency=4 Reg=$w3
    SU(9): Data Latency=4 Reg=$x3
    SU(10): Ord  Latency=0 Memory
SU(6):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0, debug-location !452; is.c:408:32
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w0
    SU(0): Data Latency=0 Reg=$x0
  Successors:
    SU(11): Data Latency=1 Reg=$w0
SU(7):   STRWui renamable $w2, $sp, 4, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$w2
SU(8):   renamable $w4 = nsw ADDWri renamable $w3, 1, 0, debug-location !449; is.c:410:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=$w3
  Successors:
    SU(10): Data Latency=1 Reg=$w4
SU(9):   STRWroX renamable $w2, renamable $x18, renamable $x3, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=$x3
    SU(2): Data Latency=4 Reg=$w2
SU(10):   STRWroX renamable $w4, renamable $x17, renamable $x1, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$w4
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=1 Reg=$x1
SU(11):   STURWi renamable $w0, $fp, -32, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w0
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDURSWi $fp, -32, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w1 = LDRWui $sp, 5, implicit-def $x1, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w2 = LDRWroX renamable $x16, renamable $x0, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 3 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0, debug-location !452; is.c:408:32
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 3 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STURWi renamable $w0, $fp, -32, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
  Ready @6c
  TopQ.A TopLatency SU(11) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 3 
  TopQ.A RemainingLatency 0 + 8c > CritPath 15
  Cand SU(7) ORDER                              
  Cand SU(3) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w1 = ASRVWr renamable $w2, renamable $w1, implicit $x1, implicit-def $x1, debug-location !447; is.c:410:35
  Ready @8c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 4 
  TopQ.A RemainingLatency 0 + 9c > CritPath 15
  Cand SU(7) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x1 = SBFMXri renamable $x1, 62, 31, debug-location !448; is.c:410:19
  Ready @9c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 5 
  TopQ.A RemainingLatency 0 + 10c > CritPath 15
  Cand SU(7) ORDER                              
  Cand SU(5) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x3 = LDRSWroX renamable $x17, renamable $x1, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
  Ready @10c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 9 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWui renamable $w2, $sp, 4, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 14 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 9 
  TopQ.A RemainingLatency 0 + 14c > CritPath 15
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $w4 = nsw ADDWri renamable $w3, 1, 0, debug-location !449; is.c:410:44
  Ready @14c
  TopQ.A TopLatency SU(8) 14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 
  TopQ.A RemainingLatency 0 + 15c > CritPath 15
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) STRWroX renamable $w2, renamable $x18, renamable $x3, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRWroX renamable $w4, renamable $x17, renamable $x1, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
  Ready @16c
  TopQ.A TopLatency SU(10) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   renamable $x0 = LDURSWi $fp, -32, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
SU(1):   renamable $w1 = LDRWui $sp, 5, implicit-def $x1, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
SU(2):   renamable $w2 = LDRWroX renamable $x16, renamable $x0, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
SU(6):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0, debug-location !452; is.c:408:32
SU(11):   STURWi renamable $w0, $fp, -32, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
SU(3):   renamable $w1 = ASRVWr renamable $w2, renamable $w1, implicit $x1, implicit-def $x1, debug-location !447; is.c:410:35
SU(4):   renamable $x1 = SBFMXri renamable $x1, 62, 31, debug-location !448; is.c:410:19
SU(5):   renamable $x3 = LDRSWroX renamable $x17, renamable $x1, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
SU(7):   STRWui renamable $w2, $sp, 4, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
SU(8):   renamable $w4 = nsw ADDWri renamable $w3, 1, 0, debug-location !449; is.c:410:44
SU(9):   STRWroX renamable $w2, renamable $x18, renamable $x3, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
SU(10):   STRWroX renamable $w4, renamable $x17, renamable $x1, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44

Fixup kills for %bb.14
********** MI Scheduling **********
rank:%bb.15 for.end56
  From: $x8 = ADRP target-flags(aarch64-page) @key_buff2, debug-location !456; is.c:413:19
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADRP target-flags(aarch64-page) @key_buff2, debug-location !456; is.c:413:19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0, debug-location !456; is.c:413:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(2):   STURWi $wzr, $fp, -32, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   STRXui renamable $x8, $sp, 3, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Anti Latency=0
SU(4):   $x8 = ADRP target-flags(aarch64-page) @key_buff1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
SU(5):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADRP target-flags(aarch64-page) @key_buff2, debug-location !456; is.c:413:19
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0, debug-location !456; is.c:413:19
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) STRXui renamable $x8, $sp, 3, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  Ready @2c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x8 = ADRP target-flags(aarch64-page) @key_buff1
  Ready @3c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, 0
  Ready @4c
  TopQ.A TopLatency SU(5) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi $wzr, $fp, -32, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   $x8 = ADRP target-flags(aarch64-page) @key_buff2, debug-location !456; is.c:413:19
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0, debug-location !456; is.c:413:19
SU(3):   STRXui renamable $x8, $sp, 3, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
SU(4):   $x8 = ADRP target-flags(aarch64-page) @key_buff1
SU(5):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, 0
SU(2):   STURWi $wzr, $fp, -32, debug-location !457 :: (store 4 into %ir.i); is.c:422:12

Fixup kills for %bb.15
********** MI Scheduling **********
rank:%bb.16 for.cond57
  From: renamable $w16 = LDURWi $fp, -32, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
    To: Bcc 10, %bb.18, implicit $nzcv, debug-location !463; is.c:422:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDURWi $fp, -32, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w16
SU(1):   dead $wzr = SUBSWri renamable $w16, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.18, implicit $nzcv, debug-location !463; is.c:422:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w16 = LDURWi $fp, -32, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w16, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   renamable $w16 = LDURWi $fp, -32, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
SU(1):   dead $wzr = SUBSWri renamable $w16, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5

Fixup kills for %bb.16
********** MI Scheduling **********
rank:%bb.17 for.body59
  From: renamable $x16 = LDURSWi $fp, -32, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
    To: B %bb.16
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = LDURSWi $fp, -32, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w16
    SU(2): Data Latency=0 Reg=$x16
    SU(1): Data Latency=4 Reg=$x16
    SU(3): Ord  Latency=0 Memory
SU(1):   STRWroX $wzr, renamable $x8, renamable $x16, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x16
  Successors:
    SU(2): Anti Latency=0
SU(2):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit $x16, debug-location !467; is.c:422:31
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w16
    SU(0): Data Latency=0 Reg=$x16
  Successors:
    SU(3): Data Latency=1 Reg=$w16
SU(3):   STURWi renamable $w16, $fp, -32, debug-location !467 :: (store 4 into %ir.i); is.c:422:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w16
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x16 = LDURSWi $fp, -32, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWroX $wzr, renamable $x8, renamable $x16, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit $x16, debug-location !467; is.c:422:31
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi renamable $w16, $fp, -32, debug-location !467 :: (store 4 into %ir.i); is.c:422:31
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $x16 = LDURSWi $fp, -32, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
SU(1):   STRWroX $wzr, renamable $x8, renamable $x16, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
SU(2):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit $x16, debug-location !467; is.c:422:31
SU(3):   STURWi renamable $w16, $fp, -32, debug-location !467 :: (store 4 into %ir.i); is.c:422:31

Fixup kills for %bb.17
********** MI Scheduling **********
rank:%bb.18 for.end64
  From: $x8 = ADRP target-flags(aarch64-page) @key_buff1, debug-location !471; is.c:427:18
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADRP target-flags(aarch64-page) @key_buff1, debug-location !471; is.c:427:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, 0, debug-location !471; is.c:427:18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(2):   STURWi $wzr, $fp, -32, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   STRXui renamable $x8, $sp, 4, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Anti Latency=0
SU(4):   $w8 = MOVNWi 65024, 16
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADRP target-flags(aarch64-page) @key_buff1, debug-location !471; is.c:427:18
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, 0, debug-location !471; is.c:427:18
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(2) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) STRXui renamable $x8, $sp, 4, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  Ready @2c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(2) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $w8 = MOVNWi 65024, 16
  Ready @3c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi $wzr, $fp, -32, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   $x8 = ADRP target-flags(aarch64-page) @key_buff1, debug-location !471; is.c:427:18
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, 0, debug-location !471; is.c:427:18
SU(3):   STRXui renamable $x8, $sp, 4, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
SU(4):   $w8 = MOVNWi 65024, 16
SU(2):   STURWi $wzr, $fp, -32, debug-location !472 :: (store 4 into %ir.i); is.c:433:12

Fixup kills for %bb.18
********** MI Scheduling **********
rank:%bb.19 for.cond65
  From: renamable $w16 = LDURWi $fp, -32, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
    To: Bcc 12, %bb.21, implicit $nzcv, debug-location !478; is.c:433:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDURWi $fp, -32, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w16
SU(1):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !478; is.c:433:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.21, implicit $nzcv, debug-location !478; is.c:433:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w16 = LDURWi $fp, -32, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !478; is.c:433:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   renamable $w16 = LDURWi $fp, -32, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
SU(1):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !478; is.c:433:5

Fixup kills for %bb.19
********** MI Scheduling **********
rank:%bb.20 for.body67
  From: renamable $x16 = LDRXui $sp, 3, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
    To: B %bb.19
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = LDRXui $sp, 3, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
    SU(7): Ord  Latency=0 Memory
SU(1):   renamable $x17 = LDURSWi $fp, -32, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x17
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(2):   renamable $x16 = LDRSWroX renamable $x16, renamable $x17, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(1): Data Latency=4 Reg=$x17
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x16
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x16
    SU(3): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(3):   renamable $x17 = LDRXui $sp, 4, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(7): Data Latency=4 Reg=$x17
    SU(5): Data Latency=4 Reg=$x17
    SU(7): Ord  Latency=0 Memory
SU(4):   renamable $x16 = UBFMXri renamable $x16, 62, 61, debug-location !479; is.c:434:9
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x16
    SU(5): Data Latency=1 Reg=$x16
SU(5):   renamable $w18 = LDRWroX renamable $x17, renamable $x16, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(4): Data Latency=1 Reg=$x16
    SU(3): Data Latency=4 Reg=$x17
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w18
    SU(8): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(6):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0, debug-location !482; is.c:434:39
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 7
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w18
  Successors:
    SU(7): Data Latency=1 Reg=$w18
SU(7):   STRWroX renamable $w18, renamable $x17, renamable $x16, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
  # preds left       : 8
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 6
  Predecessors:
    SU(6): Data Latency=1 Reg=$w18
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=1 Reg=$x16
    SU(3): Data Latency=4 Reg=$x17
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
SU(8):   renamable $w16 = LDURWi $fp, -32, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 5
  Predecessors:
    SU(7): Anti Latency=0
    SU(7): Ord  Latency=1 Memory
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$w16
    SU(10): Ord  Latency=0 Memory
SU(9):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !483; is.c:433:32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w16
  Successors:
    SU(10): Data Latency=1 Reg=$w16
SU(10):   STURWi renamable $w16, $fp, -32, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$w16
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 20
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 20
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x16 = LDRXui $sp, 3, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  Ready @0c
  TopQ.A BotLatency SU(0) 20c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x17 = LDURSWi $fp, -32, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  Ready @1c
  TopQ.A BotLatency SU(1) 20c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x16 = LDRSWroX renamable $x16, renamable $x17, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x17 = LDRXui $sp, 4, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x16 = UBFMXri renamable $x16, 62, 61, debug-location !479; is.c:434:9
  Ready @9c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w18 = LDRWroX renamable $x17, renamable $x16, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
  Ready @10c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 14 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w18 = nsw ADDWri renamable $w18, 1, 0, debug-location !482; is.c:434:39
  Ready @14c
  TopQ.A TopLatency SU(6) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 7
  Executed: 15c
  Critical: 7c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWroX renamable $w18, renamable $x17, renamable $x16, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
  Ready @15c
  TopQ.A TopLatency SU(7) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 8
  Executed: 16c
  Critical: 8c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $w16 = LDURWi $fp, -32, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
  Ready @16c
  TopQ.A TopLatency SU(8) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 9
  Executed: 17c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 20 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !483; is.c:433:32
  Ready @20c
  TopQ.A TopLatency SU(9) 19c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 10
  Executed: 21c
  Critical: 10c, 10 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STURWi renamable $w16, $fp, -32, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
  Ready @21c
  TopQ.A TopLatency SU(10) 20c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 11
  Executed: 22c
  Critical: 11c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   renamable $x16 = LDRXui $sp, 3, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
SU(1):   renamable $x17 = LDURSWi $fp, -32, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
SU(2):   renamable $x16 = LDRSWroX renamable $x16, renamable $x17, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
SU(3):   renamable $x17 = LDRXui $sp, 4, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
SU(4):   renamable $x16 = UBFMXri renamable $x16, 62, 61, debug-location !479; is.c:434:9
SU(5):   renamable $w18 = LDRWroX renamable $x17, renamable $x16, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
SU(6):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0, debug-location !482; is.c:434:39
SU(7):   STRWroX renamable $w18, renamable $x17, renamable $x16, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
SU(8):   renamable $w16 = LDURWi $fp, -32, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
SU(9):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !483; is.c:433:32
SU(10):   STURWi renamable $w16, $fp, -32, debug-location !483 :: (store 4 into %ir.i); is.c:433:32

Fixup kills for %bb.20
********** MI Scheduling **********
rank:%bb.21 for.end75
  From: STURWi $wzr, $fp, -32, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -32, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $w8 = ORRWri $wzr, 2003
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w8 = ORRWri $wzr, 2003
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -32, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(1):   renamable $w8 = ORRWri $wzr, 2003
SU(0):   STURWi $wzr, $fp, -32, debug-location !487 :: (store 4 into %ir.i); is.c:440:12

Fixup kills for %bb.21
********** MI Scheduling **********
rank:%bb.22 for.cond76
  From: renamable $w16 = LDURWi $fp, -32, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
    To: Bcc 12, %bb.24, implicit $nzcv, debug-location !493; is.c:440:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDURWi $fp, -32, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w16
SU(1):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !493; is.c:440:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.24, implicit $nzcv, debug-location !493; is.c:440:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w16 = LDURWi $fp, -32, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !493; is.c:440:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $w16 = LDURWi $fp, -32, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
SU(1):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !493; is.c:440:5

Fixup kills for %bb.22
********** MI Scheduling **********
rank:%bb.23 for.body78
  From: renamable $x16 = LDRXui $sp, 4, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
    To: B %bb.22
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = LDRXui $sp, 4, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
    SU(5): Ord  Latency=0 Memory
SU(1):   renamable $x17 = LDURSWi $fp, -32, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x17
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
SU(2):   renamable $x16 = ADDXrs renamable $x16, renamable $x17, 2, debug-location !494; is.c:441:32
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=$x17
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x16
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x16
    SU(3): Data Latency=1 Reg=$x16
    SU(3): Anti Latency=0
SU(3):   renamable $w17, renamable $w18 = LDPWi renamable $x16, 0, debug-location !494 :: (load 4 from %ir.arrayidx80), (load 4 from %ir.arrayidx83); is.c:441:32
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=$x16
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w17
    SU(4): Data Latency=4 Reg=$w18
    SU(6): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
SU(4):   $w17 = ADDWrs renamable $w18, renamable $w17, 0, debug-location !499; is.c:441:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w17
    SU(3): Data Latency=4 Reg=$w18
  Successors:
    SU(5): Data Latency=1 Reg=$w17
SU(5):   STRWui renamable $w17, renamable $x16, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(4): Data Latency=1 Reg=$w17
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=$x16
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=1 Memory
SU(6):   renamable $w16 = LDURWi $fp, -32, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(5): Anti Latency=0
    SU(5): Ord  Latency=1 Memory
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w16
    SU(8): Ord  Latency=0 Memory
SU(7):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !500; is.c:440:35
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w16
  Successors:
    SU(8): Data Latency=1 Reg=$w16
SU(8):   STURWi renamable $w16, $fp, -32, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w16
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.22
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 16
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 16
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x16 = LDRXui $sp, 4, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  Ready @0c
  TopQ.A BotLatency SU(0) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x17 = LDURSWi $fp, -32, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  Ready @1c
  TopQ.A BotLatency SU(1) 16c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x16 = ADDXrs renamable $x16, renamable $x17, 2, debug-location !494; is.c:441:32
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w17, renamable $w18 = LDPWi renamable $x16, 0, debug-location !494 :: (load 4 from %ir.arrayidx80), (load 4 from %ir.arrayidx83); is.c:441:32
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w17 = ADDWrs renamable $w18, renamable $w17, 0, debug-location !499; is.c:441:29
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWui renamable $w17, renamable $x16, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w16 = LDURWi $fp, -32, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
  Ready @12c
  TopQ.A TopLatency SU(6) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 16 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !500; is.c:440:35
  Ready @16c
  TopQ.A TopLatency SU(7) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STURWi renamable $w16, $fp, -32, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
  Ready @17c
  TopQ.A TopLatency SU(8) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $x16 = LDRXui $sp, 4, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
SU(1):   renamable $x17 = LDURSWi $fp, -32, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
SU(2):   renamable $x16 = ADDXrs renamable $x16, renamable $x17, 2, debug-location !494; is.c:441:32
SU(3):   renamable $w17, renamable $w18 = LDPWi renamable $x16, 0, debug-location !494 :: (load 4 from %ir.arrayidx80), (load 4 from %ir.arrayidx83); is.c:441:32
SU(4):   $w17 = ADDWrs renamable $w18, renamable $w17, 0, debug-location !499; is.c:441:29
SU(5):   STRWui renamable $w17, renamable $x16, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
SU(6):   renamable $w16 = LDURWi $fp, -32, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
SU(7):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !500; is.c:440:35
SU(8):   STURWi renamable $w16, $fp, -32, debug-location !500 :: (store 4 into %ir.i); is.c:440:35

Fixup kills for %bb.23
********** MI Scheduling **********
rank:%bb.24 for.end87
  From: STURWi $wzr, $fp, -32, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -32, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x18 = ADRP target-flags(aarch64-page) @partial_verify_vals
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x18
SU(2):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w0 = MOVNWi 65024, 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x1 = ADRP target-flags(aarch64-page) @test_rank_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
SU(5):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x18 = ADRP target-flags(aarch64-page) @partial_verify_vals
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x1 = ADRP target-flags(aarch64-page) @test_rank_array
  Ready @1c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $w0 = MOVNWi 65024, 16
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
  Ready @4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -32, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(1):   $x18 = ADRP target-flags(aarch64-page) @partial_verify_vals
SU(4):   $x1 = ADRP target-flags(aarch64-page) @test_rank_array
SU(2):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0
SU(3):   $w0 = MOVNWi 65024, 16
SU(5):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
SU(0):   STURWi $wzr, $fp, -32, debug-location !504 :: (store 4 into %ir.i); is.c:446:12

Fixup kills for %bb.24
********** MI Scheduling **********
rank:%bb.25 for.cond88
  From: renamable $w8 = LDURWi $fp, -32, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
    To: Bcc 12, %bb.39, implicit $nzcv, debug-location !510; is.c:446:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -32, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.39, implicit $nzcv, debug-location !510; is.c:446:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -32, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $w8 = LDURWi $fp, -32, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5

Fixup kills for %bb.25
********** MI Scheduling **********
rank:%bb.26 for.body90
  From: renamable $x8 = LDURSWi $fp, -32, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
    To: Bcc 11, %bb.38, implicit $nzcv, debug-location !520; is.c:448:19
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -32, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $w8 = LDRWroX renamable $x18, renamable $x8, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$w8
    SU(2): Data Latency=4 Reg=$w8
SU(2):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   STURWi renamable $w8, $fp, -36, debug-location !514 :: (store 4 into %ir.k); is.c:447:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$w8
ExitSU:   Bcc 11, %bb.38, implicit $nzcv, debug-location !520; is.c:448:19
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -32, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWroX renamable $x18, renamable $x8, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 8c > CritPath 9
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
  Ready @8c
  TopQ.A TopLatency SU(2) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 3
  Executed: 9c
  Critical: 3c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi renamable $w8, $fp, -36, debug-location !514 :: (store 4 into %ir.k); is.c:447:11
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   renamable $x8 = LDURSWi $fp, -32, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
SU(1):   renamable $w8 = LDRWroX renamable $x18, renamable $x8, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
SU(2):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
SU(3):   STURWi renamable $w8, $fp, -36, debug-location !514 :: (store 4 into %ir.k); is.c:447:11

Fixup kills for %bb.26
Fixup kills for %bb.27
********** MI Scheduling **********
rank:%bb.28 if.then
  From: renamable $x8 = LDRXui $sp, 4, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
    To: Bcc 0, %bb.31, implicit $nzcv, debug-location !534; is.c:496:28
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $sp, 4, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDURSWi $fp, -36, debug-location !525 :: (dereferenceable load 4 from %ir.k); is.c:449:46
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
SU(2):   renamable $x16 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !524; is.c:449:33
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
    SU(3): Anti Latency=0
SU(3):   renamable $w8 = LDURWi $fp, -32, debug-location !529 :: (dereferenceable load 4 from %ir.i); is.c:496:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(5): Data Latency=4 Reg=$w8
SU(4):   renamable $w16 = LDURWi renamable $x16, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    SU(6): Data Latency=4 Reg=$w16
    SU(6): Ord  Latency=0 Memory
SU(5):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   STPWi $wzr, renamable $w16, $sp, 2, debug-location !523 :: (store 4 into %ir.key_rank), (store 4 into %ir.failed); is.c:449:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=$w16
    SU(4): Ord  Latency=0 Memory
ExitSU:   Bcc 0, %bb.31, implicit $nzcv, debug-location !534; is.c:496:28
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDRXui $sp, 4, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDURSWi $fp, -36, debug-location !525 :: (dereferenceable load 4 from %ir.k); is.c:449:46
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x16 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !524; is.c:449:33
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 9
  Cand SU(4) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w8 = LDURWi $fp, -32, debug-location !529 :: (dereferenceable load 4 from %ir.i); is.c:496:21
  Ready @6c
  TopQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w16 = LDURWi renamable $x16, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
  Ready @7c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  Ready @10c
  TopQ.A TopLatency SU(5) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STPWi $wzr, renamable $w16, $sp, 2, debug-location !523 :: (store 4 into %ir.key_rank), (store 4 into %ir.failed); is.c:449:22
  Ready @11c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   renamable $x8 = LDRXui $sp, 4, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
SU(1):   renamable $x16 = LDURSWi $fp, -36, debug-location !525 :: (dereferenceable load 4 from %ir.k); is.c:449:46
SU(2):   renamable $x16 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !524; is.c:449:33
SU(3):   renamable $w8 = LDURWi $fp, -32, debug-location !529 :: (dereferenceable load 4 from %ir.i); is.c:496:21
SU(4):   renamable $w16 = LDURWi renamable $x16, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
SU(5):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
SU(6):   STPWi $wzr, renamable $w16, $sp, 2, debug-location !523 :: (store 4 into %ir.key_rank), (store 4 into %ir.failed); is.c:449:22

Fixup kills for %bb.28
Fixup kills for %bb.29
Fixup kills for %bb.30
********** MI Scheduling **********
rank:%bb.31 if.then102
  From: $w8, renamable $w16 = LDPWi $fp, -8, debug-location !540 :: (dereferenceable load 4 from %ir.i), (dereferenceable load 4 from %ir.iteration.addr); is.c:497:53
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   $w8, renamable $w16 = LDPWi $fp, -8, debug-location !540 :: (dereferenceable load 4 from %ir.i), (dereferenceable load 4 from %ir.iteration.addr); is.c:497:53
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=0 Reg=$w8
    SU(5): Data Latency=4 Reg=$w16
SU(1):   $w8 = KILL $w8, implicit-def $x8, debug-location !540; is.c:497:53
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=0 Reg=$w8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=0 Reg=$x8
SU(2):   $x8 = SBFMXri $x8, 0, 31, debug-location !540; is.c:497:53
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 6
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=0 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $w8 = LDRWroX renamable $x1, renamable $x8, 0, 1, debug-location !541 :: (load 4 from %ir.arrayidx104); is.c:497:37
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 3
  Height             : 5
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w8
SU(4):   renamable $w17 = LDRWui $sp, 3, debug-location !537 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(5):   $w8 = ADDWrs renamable $w8, renamable $w16, 0, debug-location !543; is.c:497:56
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w8, renamable $w16 = LDPWi $fp, -8, debug-location !540 :: (dereferenceable load 4 from %ir.i), (dereferenceable load 4 from %ir.iteration.addr); is.c:497:53
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = KILL $w8, implicit-def $x8, debug-location !540; is.c:497:53
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w17 = LDRWui $sp, 3, debug-location !537 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:25
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x8 = SBFMXri $x8, 0, 31, debug-location !540; is.c:497:53
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDRWroX renamable $x1, renamable $x8, 0, 1, debug-location !541 :: (load 4 from %ir.arrayidx104); is.c:497:37
  Ready @3c
  TopQ.A TopLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 7 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $w8 = ADDWrs renamable $w8, renamable $w16, 0, debug-location !543; is.c:497:56
  Ready @7c
  TopQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   $w8, renamable $w16 = LDPWi $fp, -8, debug-location !540 :: (dereferenceable load 4 from %ir.i), (dereferenceable load 4 from %ir.iteration.addr); is.c:497:53
SU(1):   $w8 = KILL $w8, implicit-def $x8, debug-location !540; is.c:497:53
SU(4):   renamable $w17 = LDRWui $sp, 3, debug-location !537 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:25
SU(2):   $x8 = SBFMXri $x8, 0, 31, debug-location !540; is.c:497:53
SU(3):   renamable $w8 = LDRWroX renamable $x1, renamable $x8, 0, 1, debug-location !541 :: (load 4 from %ir.arrayidx104); is.c:497:37
SU(5):   $w8 = ADDWrs renamable $w8, renamable $w16, 0, debug-location !543; is.c:497:56

Fixup kills for %bb.31
Fixup kills for %bb.32
********** MI Scheduling **********
rank:%bb.33 if.then107
  From: $w8 = MOVZWi 1, 0, debug-location !DILocation(line: 0, scope: !530); is.c:0
    To: B %bb.36
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0, debug-location !DILocation(line: 0, scope: !530); is.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$w8
SU(1):   STRWui renamable $w8, $sp, 2, debug-location !DILocation(line: 0, scope: !530) :: (store 4 into %ir.failed); is.c:0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
ExitSU:   B %bb.36
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w8 = MOVZWi 1, 0, debug-location !DILocation(line: 0, scope: !530); is.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui renamable $w8, $sp, 2, debug-location !DILocation(line: 0, scope: !530) :: (store 4 into %ir.failed); is.c:0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   $w8 = MOVZWi 1, 0, debug-location !DILocation(line: 0, scope: !530); is.c:0
SU(1):   STRWui renamable $w8, $sp, 2, debug-location !DILocation(line: 0, scope: !530) :: (store 4 into %ir.failed); is.c:0

Fixup kills for %bb.33
********** MI Scheduling **********
rank:%bb.34 if.else109
  From: $w8, renamable $w16 = LDPWi $fp, -8, debug-location !552 :: (dereferenceable load 4 from %ir.i), (dereferenceable load 4 from %ir.iteration.addr); is.c:503:53
    To: B %bb.32
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   $w8, renamable $w16 = LDPWi $fp, -8, debug-location !552 :: (dereferenceable load 4 from %ir.i), (dereferenceable load 4 from %ir.iteration.addr); is.c:503:53
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=0 Reg=$w8
    SU(5): Data Latency=4 Reg=$w16
SU(1):   $w8 = KILL $w8, implicit-def $x8, debug-location !552; is.c:503:53
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=0 Reg=$w8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=0 Reg=$x8
SU(2):   $x8 = SBFMXri $x8, 0, 31, debug-location !552; is.c:503:53
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=0 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $w8 = LDRWroX renamable $x1, renamable $x8, 0, 1, debug-location !553 :: (load 4 from %ir.arrayidx111); is.c:503:37
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 3
  Height             : 4
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w8
SU(4):   renamable $w17 = LDRWui $sp, 3, debug-location !549 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(5):   $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !555; is.c:503:56
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
    SU(0): Data Latency=4 Reg=$w16
ExitSU:   B %bb.32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w8, renamable $w16 = LDPWi $fp, -8, debug-location !552 :: (dereferenceable load 4 from %ir.i), (dereferenceable load 4 from %ir.iteration.addr); is.c:503:53
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = KILL $w8, implicit-def $x8, debug-location !552; is.c:503:53
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w17 = LDRWui $sp, 3, debug-location !549 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:25
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x8 = SBFMXri $x8, 0, 31, debug-location !552; is.c:503:53
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDRWroX renamable $x1, renamable $x8, 0, 1, debug-location !553 :: (load 4 from %ir.arrayidx111); is.c:503:37
  Ready @3c
  TopQ.A TopLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 7 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !555; is.c:503:56
  Ready @7c
  TopQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   $w8, renamable $w16 = LDPWi $fp, -8, debug-location !552 :: (dereferenceable load 4 from %ir.i), (dereferenceable load 4 from %ir.iteration.addr); is.c:503:53
SU(1):   $w8 = KILL $w8, implicit-def $x8, debug-location !552; is.c:503:53
SU(4):   renamable $w17 = LDRWui $sp, 3, debug-location !549 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:25
SU(2):   $x8 = SBFMXri $x8, 0, 31, debug-location !552; is.c:503:53
SU(3):   renamable $w8 = LDRWroX renamable $x1, renamable $x8, 0, 1, debug-location !553 :: (load 4 from %ir.arrayidx111); is.c:503:37
SU(5):   $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !555; is.c:503:56

Fixup kills for %bb.34
********** MI Scheduling **********
rank:%bb.35 if.else115
  From: renamable $x16 = ADRP target-flags(aarch64-page) @passed_verification
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = ADRP target-flags(aarch64-page) @passed_verification
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=1 Reg=$x16
    SU(1): Data Latency=1 Reg=$x16
SU(1):   renamable $w8 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !DILocation(line: 0, scope: !530) :: (dereferenceable load 4 from @passed_verification); is.c:0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x16
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !DILocation(line: 0, scope: !530); is.c:0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(3):   STRWui renamable $w8, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !DILocation(line: 0, scope: !530) :: (store 4 into @passed_verification); is.c:0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=1 Reg=$x16
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x16 = ADRP target-flags(aarch64-page) @passed_verification
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !DILocation(line: 0, scope: !530) :: (dereferenceable load 4 from @passed_verification); is.c:0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !DILocation(line: 0, scope: !530); is.c:0
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w8, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !DILocation(line: 0, scope: !530) :: (store 4 into @passed_verification); is.c:0
  Ready @6c
  TopQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   renamable $x16 = ADRP target-flags(aarch64-page) @passed_verification
SU(1):   renamable $w8 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !DILocation(line: 0, scope: !530) :: (dereferenceable load 4 from @passed_verification); is.c:0
SU(2):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !DILocation(line: 0, scope: !530); is.c:0
SU(3):   STRWui renamable $w8, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !DILocation(line: 0, scope: !530) :: (store 4 into @passed_verification); is.c:0

Fixup kills for %bb.35
********** MI Scheduling **********
rank:%bb.36 if.end118
  From: renamable $w8 = LDRWui $sp, 2, debug-location !561 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
    To: Bcc 1, %bb.38, implicit $nzcv, debug-location !564; is.c:538:17
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 2, debug-location !561 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !564; is.c:538:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.38, implicit $nzcv, debug-location !564; is.c:538:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 2, debug-location !561 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !564; is.c:538:17
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   renamable $w8 = LDRWui $sp, 2, debug-location !561 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !564; is.c:538:17

Fixup kills for %bb.36
********** MI Scheduling **********
rank:%bb.37 if.then120
  From: $x1 = ADRP target-flags(aarch64-page) @test_rank_array
    To: PCN_STACKMAP 0, 0, 0, $fp, -72, 0, $fp, -32, 0, $fp, -28, 0, $fp, -36, 0, $fp, -48, 0, $fp, -68, killed renamable $w19, killed renamable $w20, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !567 :: (load 8 from %stack.8.failed, align 4), (load 8 from %stack.1.i, align 4), (load 8 from %stack.0.iteration.addr, align 4), (load 8 from %stack.2.k, align 4), (load 8 from %stack.3.key_buff_ptr), (load 8 from %stack.7.key_rank, align 4); is.c:539:17
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   $x1 = ADRP target-flags(aarch64-page) @test_rank_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
SU(1):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x1
SU(2):   $w0 = MOVNWi 65024, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   $x18 = ADRP target-flags(aarch64-page) @partial_verify_vals
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x18
SU(4):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x18
ExitSU:   PCN_STACKMAP 0, 0, 0, $fp, -72, 0, $fp, -32, 0, $fp, -28, 0, $fp, -36, 0, $fp, -48, 0, $fp, -68, killed renamable $w19, killed renamable $w20, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !567 :: (load 8 from %stack.8.failed, align 4), (load 8 from %stack.1.i, align 4), (load 8 from %stack.0.iteration.addr, align 4), (load 8 from %stack.2.k, align 4), (load 8 from %stack.3.key_buff_ptr), (load 8 from %stack.7.key_rank, align 4); is.c:539:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x1 = ADRP target-flags(aarch64-page) @test_rank_array
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x18 = ADRP target-flags(aarch64-page) @partial_verify_vals
  Ready @1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 1
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $w0 = MOVNWi 65024, 16
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   $x1 = ADRP target-flags(aarch64-page) @test_rank_array
SU(3):   $x18 = ADRP target-flags(aarch64-page) @partial_verify_vals
SU(1):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
SU(2):   $w0 = MOVNWi 65024, 16
SU(4):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0

********** MI Scheduling **********
rank:%bb.37 if.then120
  From: renamable $w20, renamable $w19 = LDPWi $fp, -8, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr), (dereferenceable load 4 from %ir.i); is.c:541:24
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w8, debug-location !567; is.c:539:17
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $w20, renamable $w19 = LDPWi $fp, -8, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr), (dereferenceable load 4 from %ir.i); is.c:541:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$w20
    SU(3): Data Latency=4 Reg=$w19
SU(1):   $x0 = ADRP target-flags(aarch64-page) @is__str_1_Failed_par, debug-location !567; is.c:539:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_1_Failed_par, 0, debug-location !567; is.c:539:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w1 = ORRWrs $wzr, $w19, 0, debug-location !567; is.c:539:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $w2 = ORRWrs $wzr, $w20, 0, debug-location !567; is.c:539:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w8, debug-location !567; is.c:539:17
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w20, renamable $w19 = LDPWi $fp, -8, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr), (dereferenceable load 4 from %ir.i); is.c:541:24
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 3 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @is__str_1_Failed_par, debug-location !567; is.c:539:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_1_Failed_par, 0, debug-location !567; is.c:539:17
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $w1 = ORRWrs $wzr, $w19, 0, debug-location !567; is.c:539:17
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w2 = ORRWrs $wzr, $w20, 0, debug-location !567; is.c:539:17
  Ready @5c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   renamable $w20, renamable $w19 = LDPWi $fp, -8, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr), (dereferenceable load 4 from %ir.i); is.c:541:24
SU(1):   $x0 = ADRP target-flags(aarch64-page) @is__str_1_Failed_par, debug-location !567; is.c:539:17
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_1_Failed_par, 0, debug-location !567; is.c:539:17
SU(3):   $w1 = ORRWrs $wzr, $w19, 0, debug-location !567; is.c:539:17
SU(4):   $w2 = ORRWrs $wzr, $w20, 0, debug-location !567; is.c:539:17

Fixup kills for %bb.37
********** MI Scheduling **********
rank:%bb.38 for.inc123
  From: renamable $w8 = LDURWi $fp, -32, debug-location !568 :: (dereferenceable load 4 from %ir.i); is.c:446:39
    To: B %bb.25
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -32, debug-location !568 :: (dereferenceable load 4 from %ir.i); is.c:446:39
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !568; is.c:446:39
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -32, debug-location !568 :: (store 4 into %ir.i); is.c:446:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -32, debug-location !568 :: (dereferenceable load 4 from %ir.i); is.c:446:39
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !568; is.c:446:39
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -32, debug-location !568 :: (store 4 into %ir.i); is.c:446:39
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $w8 = LDURWi $fp, -32, debug-location !568 :: (dereferenceable load 4 from %ir.i); is.c:446:39
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !568; is.c:446:39
SU(2):   STURWi renamable $w8, $fp, -32, debug-location !568 :: (store 4 into %ir.i); is.c:446:39

Fixup kills for %bb.38
********** MI Scheduling **********
rank:%bb.39 for.end125
  From: renamable $w8 = LDURWi $fp, -28, debug-location !572 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
    To: Bcc 1, %bb.41, implicit $nzcv, debug-location !575; is.c:549:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -28, debug-location !572 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv, debug-location !575; is.c:549:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.41, implicit $nzcv, debug-location !575; is.c:549:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -28, debug-location !572 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv, debug-location !575; is.c:549:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $w8 = LDURWi $fp, -28, debug-location !572 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv, debug-location !575; is.c:549:9

Fixup kills for %bb.39
********** MI Scheduling **********
rank:%bb.40 if.then127
  From: renamable $x8 = LDRXui $sp, 4, debug-location !576 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $sp, 4, debug-location !576 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !577; is.c:550:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=$x16
SU(2):   STRXui renamable $x8, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !577 :: (store 8 into @key_buff_ptr_global); is.c:550:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
    SU(0): Data Latency=4 Reg=$x8
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRXui $sp, 4, debug-location !576 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !577; is.c:550:29
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRXui renamable $x8, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !577 :: (store 8 into @key_buff_ptr_global); is.c:550:29
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   renamable $x8 = LDRXui $sp, 4, debug-location !576 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !577; is.c:550:29
SU(2):   STRXui renamable $x8, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !577 :: (store 8 into @key_buff_ptr_global); is.c:550:29

Fixup kills for %bb.40
********** MI Scheduling **********
rank:%bb.41 if.end128
  From: $fp, $lr = frame-destroy LDPXi $sp, 10, debug-location !579 :: (load 8 from %stack.11), (load 8 from %stack.10); is.c:551:1
    To: $sp = frame-destroy ADDXri $sp, 96, 0, debug-location !579; is.c:551:1
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 10, debug-location !579 :: (load 8 from %stack.11), (load 8 from %stack.10); is.c:551:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !579 :: (load 8 from %stack.13), (load 8 from %stack.12); is.c:551:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 96, 0, debug-location !579; is.c:551:1
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $fp, $lr = frame-destroy LDPXi $sp, 10, debug-location !579 :: (load 8 from %stack.11), (load 8 from %stack.10); is.c:551:1
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !579 :: (load 8 from %stack.13), (load 8 from %stack.12); is.c:551:1
  Ready @1c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 10, debug-location !579 :: (load 8 from %stack.11), (load 8 from %stack.10); is.c:551:1
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !579 :: (load 8 from %stack.13), (load 8 from %stack.12); is.c:551:1

Fixup kills for %bb.41
Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 0x41B2B9B0A1000000, align=8
  cp#1: 0x41D2309CE5400000, align=8
  cp#2: 0x41B4000000000000, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
Function Live Ins: $w0 in %0, $x1 in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1
  %1:gpr64 = COPY $x1
  %0:gpr32 = COPY $w0
  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  STRWui $wzr, %stack.5.timer_on, 0, debug-location !604 :: (store 4 into %ir.timer_on); is.c:572:14
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !605; is.c:573:15
  $x0 = MOVaddr target-flags(aarch64-page) @is__str_2_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @is__str_2_timer_flag, debug-location !605; is.c:573:15
  $x1 = MOVaddr target-flags(aarch64-page) @is__str_3_r_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_3_r_, debug-location !605; is.c:573:15
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !605; is.c:573:15
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !605; is.c:573:15
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !607; is.c:573:13
  PCN_STACKMAP 0, 0, 0, %stack.7.fp, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !607 :: (load 8 from %stack.7.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:573:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !607; is.c:573:13
  %5:gpr64 = COPY killed $x8, debug-location !605; is.c:573:15
  STRXui %5:gpr64, %stack.7.fp, 0, debug-location !607 :: (store 8 into %ir.fp); is.c:573:13
  CBZX %5:gpr64, %bb.2, debug-location !609; is.c:573:9
  B %bb.1, debug-location !609; is.c:573:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %6:gpr64 = LDRXui %stack.7.fp, 0, debug-location !610 :: (dereferenceable load 8 from %ir.fp); is.c:574:16
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !612; is.c:574:9
  $x0 = COPY %6:gpr64, debug-location !612; is.c:574:9
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !612; is.c:574:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !612; is.c:574:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !613; is.c:575:18
  PCN_STACKMAP 1, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %6:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !613 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:575:18
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !613; is.c:575:18
  %8:gpr32 = MOVi32imm 1
  STRWui %8:gpr32, %stack.5.timer_on, 0, debug-location !613 :: (store 4 into %ir.timer_on); is.c:575:18

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !615; is.c:577:5
  $w0 = COPY $wzr, debug-location !615; is.c:577:5
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !615; is.c:577:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !615; is.c:577:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !616; is.c:578:9
  PCN_STACKMAP 2, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !616 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:578:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !616; is.c:578:9
  %10:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !616 :: (dereferenceable load 4 from %ir.timer_on); is.c:578:9
  CBZW %10:gpr32, %bb.4, debug-location !618; is.c:578:9
  B %bb.3, debug-location !618; is.c:578:9

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !619; is.c:579:9
  $w0 = MOVi32imm 1, debug-location !619; is.c:579:9
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !619; is.c:579:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !619; is.c:579:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !621; is.c:580:9
  PCN_STACKMAP 3, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !621 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:580:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !621; is.c:580:9
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !621; is.c:580:9
  $w0 = MOVi32imm 2, debug-location !621; is.c:580:9
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !621; is.c:580:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !621; is.c:580:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !622; is.c:581:9
  PCN_STACKMAP 4, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !622 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:581:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !622; is.c:581:9
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !622; is.c:581:9
  $w0 = MOVi32imm 3, debug-location !622; is.c:581:9
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !622; is.c:581:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !622; is.c:581:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !623; is.c:582:5
  PCN_STACKMAP 5, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !623 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:582:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !623; is.c:582:5

bb.4.if.end3:
; predecessors: %bb.2, %bb.3
  successors: %bb.5(0x50000000), %bb.6(0x30000000); %bb.5(62.50%), %bb.6(37.50%)

  %14:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !624 :: (dereferenceable load 4 from %ir.timer_on); is.c:584:9
  CBZW %14:gpr32, %bb.6, debug-location !626; is.c:584:9
  B %bb.5, debug-location !626; is.c:584:9

bb.5.if.then5:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !627; is.c:585:9
  $w0 = MOVi32imm 3, debug-location !627; is.c:585:9
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !627; is.c:585:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !627; is.c:585:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !627; is.c:585:9
  PCN_STACKMAP 6, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !627 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:585:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !627; is.c:585:9

bb.6.if.end6:
; predecessors: %bb.4, %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  STRWui $wzr, %stack.3.i, 0, debug-location !628 :: (store 4 into %ir.i); is.c:588:12
  %124:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array
  %127:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
  %128:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array
  %130:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array

bb.7.for.cond:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  %17:gpr32common = LDRWui %stack.3.i, 0, debug-location !631 :: (dereferenceable load 4 from %ir.i); is.c:588:17
  dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv, debug-location !634; is.c:588:5
  Bcc 12, %bb.9, implicit killed $nzcv, debug-location !634; is.c:588:5
  B %bb.8, debug-location !634; is.c:588:5

bb.8.for.body:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %122:gpr64common = LDRSWui %stack.3.i, 0, debug-location !635 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  %125:gpr64 = UBFMXri %122:gpr64common, 62, 61, debug-location !641; is.c:604:34
  %126:gpr32 = LDRWroX %124:gpr64common, %125:gpr64, 0, 0, debug-location !636 :: (load 4 from %ir.arrayidx); is.c:603:35
  STRWroX %126:gpr32, %127:gpr64common, %125:gpr64, 0, 0, debug-location !639 :: (store 4 into %ir.arrayidx9); is.c:603:33
  %129:gpr32 = LDRWroX %128:gpr64common, %125:gpr64, 0, 0, debug-location !641 :: (load 4 from %ir.arrayidx11); is.c:604:34
  STRWroX %129:gpr32, %130:gpr64common, %125:gpr64, 0, 0, debug-location !644 :: (store 4 into %ir.arrayidx13); is.c:604:32
  %131:gpr32common = nsw ADDWri %122.sub_32:gpr64common, 1, 0, debug-location !645; is.c:588:39
  STRWui %131:gpr32common, %stack.3.i, 0, debug-location !645 :: (store 4 into %ir.i); is.c:588:39
  B %bb.7, debug-location !646; is.c:588:5

bb.9.for.end:
; predecessors: %bb.7
  successors: %bb.10(0x50000000), %bb.11(0x30000000); %bb.10(62.50%), %bb.11(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !649; is.c:617:5
  $x0 = MOVaddr target-flags(aarch64-page) @is__str_4____NAS_Par, target-flags(aarch64-pageoff, aarch64-nc) @is__str_4____NAS_Par, debug-location !649; is.c:617:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !649; is.c:617:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !649; is.c:617:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !650; is.c:618:5
  PCN_STACKMAP 7, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !650 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:618:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !650; is.c:618:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !650; is.c:618:5
  $x0 = MOVaddr target-flags(aarch64-page) @is__str_5__Size____l, target-flags(aarch64-pageoff, aarch64-nc) @is__str_5__Size____l, debug-location !650; is.c:618:5
  dead $w1 = MOVi32imm 33554432, implicit-def $x1, debug-location !650; is.c:618:5
  $w2 = MOVi32imm 66, debug-location !650; is.c:618:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp, implicit-def dead $w8, debug-location !650; is.c:618:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !650; is.c:618:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !651; is.c:619:5
  PCN_STACKMAP 8, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !651 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:619:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !651; is.c:619:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !651; is.c:619:5
  $x0 = MOVaddr target-flags(aarch64-page) @is__str_6__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @is__str_6__Iteration, debug-location !651; is.c:619:5
  $w1 = MOVi32imm 10, debug-location !651; is.c:619:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !651; is.c:619:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !651; is.c:619:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !652; is.c:621:9
  PCN_STACKMAP 9, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !652 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:621:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !652; is.c:621:9
  %29:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !652 :: (dereferenceable load 4 from %ir.timer_on); is.c:621:9
  CBZW %29:gpr32, %bb.11, debug-location !654; is.c:621:9
  B %bb.10, debug-location !654; is.c:621:9

bb.10.if.then18:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !655; is.c:622:9
  $w0 = MOVi32imm 1, debug-location !655; is.c:622:9
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !655; is.c:622:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !655; is.c:622:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !655; is.c:622:9
  PCN_STACKMAP 10, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !655 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:622:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !655; is.c:622:9

bb.11.if.end19:
; predecessors: %bb.9, %bb.10
  successors: %bb.12(0x50000000), %bb.13(0x30000000); %bb.12(62.50%), %bb.13(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !656; is.c:625:5
  %31:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  %32:fpr64 = LDRDui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %33:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  %34:fpr64 = LDRDui %33:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  $d0 = COPY %32:fpr64, debug-location !656; is.c:625:5
  $d1 = COPY %34:fpr64, debug-location !656; is.c:625:5
  BL @create_seq, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !656; is.c:625:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !656; is.c:625:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !657; is.c:627:9
  PCN_STACKMAP 11, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !657 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:627:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !657; is.c:627:9
  %35:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !657 :: (dereferenceable load 4 from %ir.timer_on); is.c:627:9
  CBZW %35:gpr32, %bb.13, debug-location !659; is.c:627:9
  B %bb.12, debug-location !659; is.c:627:9

bb.12.if.then21:
; predecessors: %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !660; is.c:628:9
  $w0 = MOVi32imm 1, debug-location !660; is.c:628:9
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !660; is.c:628:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !660; is.c:628:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !660; is.c:628:9
  PCN_STACKMAP 12, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !660 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:628:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !660; is.c:628:9

bb.13.if.end22:
; predecessors: %bb.11, %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !661; is.c:632:5
  %37:gpr32 = MOVi32imm 1
  $w0 = MOVi32imm 1, debug-location !661; is.c:632:5
  BL @rank, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !661; is.c:632:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !661; is.c:632:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !662; is.c:635:25
  PCN_STACKMAP 13, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !662 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:635:25
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !662; is.c:635:25
  %38:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !662; is.c:635:25
  STRWui $wzr, %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !662 :: (store 4 into @passed_verification); is.c:635:25
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !663; is.c:638:9
  $x0 = MOVaddr target-flags(aarch64-page) @is__str_7_____iterat, target-flags(aarch64-pageoff, aarch64-nc) @is__str_7_____iterat, debug-location !663; is.c:638:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !663; is.c:638:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !663; is.c:638:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !665; is.c:641:5
  PCN_STACKMAP 14, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !665 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:641:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !665; is.c:641:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !665; is.c:641:5
  $w0 = COPY $wzr, debug-location !665; is.c:641:5
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !665; is.c:641:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !665; is.c:641:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !666; is.c:644:5
  PCN_STACKMAP 15, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !666 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:644:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !666; is.c:644:5
  STRWui %37:gpr32, %stack.4.iteration, 0, debug-location !667 :: (store 4 into %ir.iteration); is.c:646:20

bb.14.for.cond28:
; predecessors: %bb.13, %bb.15
  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

  %42:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !670 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
  dead $wzr = SUBSWri %42:gpr32common, 10, 0, implicit-def $nzcv, debug-location !673; is.c:646:5
  Bcc 12, %bb.16, implicit killed $nzcv, debug-location !673; is.c:646:5
  B %bb.15, debug-location !673; is.c:646:5

bb.15.for.body30:
; predecessors: %bb.14
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  %116:gpr32 = LDRWui %stack.4.iteration, 0, debug-location !674 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !677; is.c:648:13
  $x0 = MOVaddr target-flags(aarch64-page) @is__str_8__________d, target-flags(aarch64-pageoff, aarch64-nc) @is__str_8__________d, debug-location !677; is.c:648:13
  $w1 = COPY %116:gpr32, debug-location !677; is.c:648:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !677; is.c:648:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !677; is.c:648:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !678; is.c:650:14
  PCN_STACKMAP 16, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %116:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !678 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:650:14
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !678; is.c:650:14
  %119:gpr32 = LDRWui %stack.4.iteration, 0, debug-location !678 :: (dereferenceable load 4 from %ir.iteration); is.c:650:14
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !679; is.c:650:9
  $w0 = COPY %119:gpr32, debug-location !679; is.c:650:9
  BL @rank, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !679; is.c:650:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !679; is.c:650:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !680; is.c:652:5
  PCN_STACKMAP 17, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %119:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !680 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:652:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !680; is.c:652:5
  %120:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !681 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
  %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !681; is.c:646:63
  STRWui %121:gpr32common, %stack.4.iteration, 0, debug-location !681 :: (store 4 into %ir.iteration); is.c:646:63
  B %bb.14, debug-location !682; is.c:646:5

bb.16.do.end38:
; predecessors: %bb.14
  successors: %bb.17(0x50000000), %bb.18(0x30000000); %bb.17(62.50%), %bb.18(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !685; is.c:657:5
  $w0 = COPY $wzr, debug-location !685; is.c:657:5
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !685; is.c:657:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !685; is.c:657:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !686; is.c:658:19
  PCN_STACKMAP 18, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !686 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:658:19
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !686; is.c:658:19
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !686; is.c:658:19
  $w0 = COPY $wzr, debug-location !686; is.c:658:19
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !686; is.c:658:19
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !686; is.c:658:19
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !687; is.c:658:17
  PCN_STACKMAP 19, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !687 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:658:17
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !687; is.c:658:17
  %45:fpr64 = COPY killed $d0, debug-location !686; is.c:658:19
  STRDui %45:fpr64, %stack.6.timecounter, 0, debug-location !687 :: (store 8 into %ir.timecounter); is.c:658:17
  %46:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !688 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  CBZW %46:gpr32, %bb.18, debug-location !690; is.c:662:9
  B %bb.17, debug-location !690; is.c:662:9

bb.17.if.then41:
; predecessors: %bb.16
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !691; is.c:663:9
  $w0 = MOVi32imm 2, debug-location !691; is.c:663:9
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !691; is.c:663:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !691; is.c:663:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !691; is.c:663:9
  PCN_STACKMAP 20, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !691 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:663:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !691; is.c:663:9

bb.18.if.end42:
; predecessors: %bb.16, %bb.17
  successors: %bb.19(0x50000000), %bb.20(0x30000000); %bb.19(62.50%), %bb.20(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !692; is.c:664:5
  BL @full_verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !692; is.c:664:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !692; is.c:664:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !693; is.c:665:9
  PCN_STACKMAP 21, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !693 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:665:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !693; is.c:665:9
  %48:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !693 :: (dereferenceable load 4 from %ir.timer_on); is.c:665:9
  CBZW %48:gpr32, %bb.20, debug-location !695; is.c:665:9
  B %bb.19, debug-location !695; is.c:665:9

bb.19.if.then44:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !696; is.c:666:9
  $w0 = MOVi32imm 2, debug-location !696; is.c:666:9
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !696; is.c:666:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !696; is.c:666:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !696; is.c:666:9
  PCN_STACKMAP 22, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !696 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:666:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !696; is.c:666:9

bb.20.if.end45:
; predecessors: %bb.18, %bb.19
  successors: %bb.21(0x50000000), %bb.22(0x30000000); %bb.21(62.50%), %bb.22(37.50%)

  %50:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !697 :: (dereferenceable load 4 from %ir.timer_on); is.c:668:9
  CBZW %50:gpr32, %bb.22, debug-location !699; is.c:668:9
  B %bb.21, debug-location !699; is.c:668:9

bb.21.if.then47:
; predecessors: %bb.20
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !700; is.c:669:9
  $w0 = MOVi32imm 3, debug-location !700; is.c:669:9
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !700; is.c:669:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !700; is.c:669:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !700; is.c:669:9
  PCN_STACKMAP 23, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !700 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:669:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !700; is.c:669:9

bb.22.if.end48:
; predecessors: %bb.20, %bb.21
  successors: %bb.23(0x40000000), %bb.24(0x40000000); %bb.23(50.00%), %bb.24(50.00%)

  %52:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !701; is.c:672:9
  %53:gpr32common = LDRWui %52:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !701 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
  dead $wzr = SUBSWri %53:gpr32common, 51, 0, implicit-def $nzcv, debug-location !704; is.c:672:9
  Bcc 0, %bb.24, implicit killed $nzcv, debug-location !704; is.c:672:9
  B %bb.23, debug-location !704; is.c:672:9

bb.23.if.then50:
; predecessors: %bb.22
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  %55:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !705; is.c:673:29
  STRWui $wzr, %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !705 :: (store 4 into @passed_verification); is.c:673:29

bb.24.if.end51:
; predecessors: %bb.22, %bb.23
  successors: %bb.25(0x50000000), %bb.28(0x30000000); %bb.25(62.50%), %bb.28(37.50%)

  %57:fpr64 = LDRDui %stack.6.timecounter, 0, debug-location !707 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  %58:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  %59:fpr64 = LDRDui %58:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  %60:fpr64 = FDIVDrr %59:fpr64, %57:fpr64, debug-location !709; is.c:676:49
  %61:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  %62:fpr64 = LDRDui %61:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  %63:fpr64 = FDIVDrr %60:fpr64, %62:fpr64, debug-location !710; is.c:676:63
  %64:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !711; is.c:677:24
  %65:gpr32 = LDRWui %64:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !711 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  ADJCALLSTACKDOWN 80, 0, implicit-def dead $sp, implicit $sp, debug-location !712; is.c:674:5
  %66:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_18__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @is__str_18__O3__mcmod, debug-location !712; is.c:674:5
  STRXui %66:gpr64, $sp, 9, debug-location !712 :: (store 8 into stack + 72); is.c:674:5
  %68:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_17__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_17__g__Wall__, debug-location !712; is.c:674:5
  STRXui %68:gpr64, $sp, 8, debug-location !712 :: (store 8 into stack + 64); is.c:674:5
  %69:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_16__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @is__str_16__I___commo, debug-location !712; is.c:674:5
  STRXui %69:gpr64, $sp, 7, debug-location !712 :: (store 8 into stack + 56); is.c:674:5
  %70:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_15__lm_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_15__lm_, debug-location !712; is.c:674:5
  STRXui %70:gpr64, $sp, 6, debug-location !712 :: (store 8 into stack + 48); is.c:674:5
  %71:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_14___CC__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_14___CC__, debug-location !712; is.c:674:5
  STRXui %71:gpr64, $sp, 5, debug-location !712 :: (store 8 into stack + 40); is.c:674:5
  %72:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_13_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_13_gcc_, debug-location !712; is.c:674:5
  STRXui %72:gpr64, $sp, 4, debug-location !712 :: (store 8 into stack + 32); is.c:674:5
  %73:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_12_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @is__str_12_03_Nov_201, debug-location !712; is.c:674:5
  STRXui %73:gpr64, $sp, 3, debug-location !712 :: (store 8 into stack + 24); is.c:674:5
  %74:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_11_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_11_3_3_1_, debug-location !712; is.c:674:5
  STRXui %74:gpr64, $sp, 2, debug-location !712 :: (store 8 into stack + 16); is.c:674:5
  STRWui %65:gpr32, $sp, 2, debug-location !712 :: (store 4 into stack + 8); is.c:674:5
  %75:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_10_keys_ranke, target-flags(aarch64-pageoff, aarch64-nc) @is__str_10_keys_ranke, debug-location !712; is.c:674:5
  STRXui %75:gpr64, $sp, 0, debug-location !712 :: (store 8 into stack); is.c:674:5
  $x0 = MOVaddr target-flags(aarch64-page) @is__str_9_IS_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_9_IS_, debug-location !712; is.c:674:5
  $w1 = MOVi32imm 66, debug-location !712; is.c:674:5
  $w2 = MOVi32imm 524288, debug-location !712; is.c:674:5
  $w3 = MOVi32imm 64, debug-location !712; is.c:674:5
  $w4 = COPY $wzr, debug-location !712; is.c:674:5
  $w5 = MOVi32imm 10, debug-location !712; is.c:674:5
  $d0 = COPY %57:fpr64, debug-location !712; is.c:674:5
  $d1 = COPY %63:fpr64, debug-location !712; is.c:674:5
  BL @c_print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !712; is.c:674:5
  ADJCALLSTACKUP 80, 0, implicit-def $sp, implicit $sp, debug-location !712; is.c:674:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !713; is.c:681:9
  PCN_STACKMAP 24, 0, %63:fpr64, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %57:fpr64, %65:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !713 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:681:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !713; is.c:681:9
  %82:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !713 :: (dereferenceable load 4 from %ir.timer_on); is.c:681:9
  CBZW %82:gpr32, %bb.28, debug-location !715; is.c:681:9
  B %bb.25, debug-location !715; is.c:681:9

bb.25.if.then54:
; predecessors: %bb.24
  successors: %bb.26(0x50000000), %bb.27(0x30000000); %bb.26(62.50%), %bb.27(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !721; is.c:684:19
  $w0 = MOVi32imm 3, debug-location !721; is.c:684:19
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !721; is.c:684:19
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !721; is.c:684:19
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !722; is.c:684:17
  PCN_STACKMAP 25, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !722 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:684:17
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !722; is.c:684:17
  %84:fpr64 = COPY killed $d0, debug-location !721; is.c:684:19
  STRDui %84:fpr64, %stack.8.t_total, 0, debug-location !722 :: (store 8 into %ir.t_total); is.c:684:17
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !723; is.c:685:9
  $x0 = MOVaddr target-flags(aarch64-page) @is__str_19__Additiona, target-flags(aarch64-pageoff, aarch64-nc) @is__str_19__Additiona, debug-location !723; is.c:685:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !723; is.c:685:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !723; is.c:685:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !724; is.c:686:45
  PCN_STACKMAP 26, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !724 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:686:45
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !724; is.c:686:45
  %87:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !724 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !725; is.c:686:9
  $x0 = MOVaddr target-flags(aarch64-page) @is__str_20__Total_exe, target-flags(aarch64-pageoff, aarch64-nc) @is__str_20__Total_exe, debug-location !725; is.c:686:9
  $d0 = COPY %87:fpr64, debug-location !725; is.c:686:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w8, debug-location !725; is.c:686:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !725; is.c:686:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !726; is.c:687:13
  PCN_STACKMAP 27, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, %87:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !726 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:687:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !726; is.c:687:13
  %90:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  FCMPDri %90:fpr64, implicit-def $nzcv, debug-location !729; is.c:687:13
  Bcc 1, %bb.27, implicit killed $nzcv, debug-location !729; is.c:687:13
  B %bb.26, debug-location !729; is.c:687:13

bb.26.if.then59:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  %91:gpr64 = MOVi64imm 4607182418800017408
  STRXui %91:gpr64, %stack.8.t_total, 0, debug-location !730 :: (store 8 into %ir.t_total); is.c:688:21

bb.27.if.end60:
; predecessors: %bb.25, %bb.26
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !732; is.c:689:23
  $w0 = MOVi32imm 1, debug-location !732; is.c:689:23
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !732; is.c:689:23
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !732; is.c:689:23
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !733; is.c:689:21
  PCN_STACKMAP 28, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !733 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:689:21
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !733; is.c:689:21
  %93:fpr64 = COPY killed $d0, debug-location !732; is.c:689:23
  STRDui %93:fpr64, %stack.6.timecounter, 0, debug-location !733 :: (store 8 into %ir.timecounter); is.c:689:21
  %94:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !735 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
  %95:fpr64 = FDIVDrr %93:fpr64, %94:fpr64, debug-location !736; is.c:690:33
  %96:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  %97:fpr64 = LDRDui %96:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  %98:fpr64 = FMULDrr %95:fpr64, %97:fpr64, debug-location !737; is.c:690:43
  STRDui %98:fpr64, %stack.9.t_percent, 0, debug-location !738 :: (store 8 into %ir.t_percent); is.c:690:19
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !741; is.c:691:9
  $x0 = MOVaddr target-flags(aarch64-page) @is__str_21__Initializ, target-flags(aarch64-pageoff, aarch64-nc) @is__str_21__Initializ, debug-location !741; is.c:691:9
  $d0 = COPY %93:fpr64, debug-location !741; is.c:691:9
  $d1 = COPY %98:fpr64, debug-location !741; is.c:691:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !741; is.c:691:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !741; is.c:691:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !742; is.c:692:23
  PCN_STACKMAP 29, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, %93:fpr64, %98:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !742 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:692:23
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !742; is.c:692:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !742; is.c:692:23
  $w0 = COPY $wzr, debug-location !742; is.c:692:23
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !742; is.c:692:23
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !742; is.c:692:23
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !743; is.c:692:21
  PCN_STACKMAP 30, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !743 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:692:21
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !743; is.c:692:21
  %102:fpr64 = COPY killed $d0, debug-location !742; is.c:692:23
  STRDui %102:fpr64, %stack.6.timecounter, 0, debug-location !743 :: (store 8 into %ir.timecounter); is.c:692:21
  %103:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !745 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
  %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64, debug-location !746; is.c:693:33
  %105:fpr64 = FMULDrr %104:fpr64, %97:fpr64, debug-location !747; is.c:693:43
  STRDui %105:fpr64, %stack.9.t_percent, 0, debug-location !748 :: (store 8 into %ir.t_percent); is.c:693:19
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !751; is.c:694:9
  $x0 = MOVaddr target-flags(aarch64-page) @is__str_22__Benchmark, target-flags(aarch64-pageoff, aarch64-nc) @is__str_22__Benchmark, debug-location !751; is.c:694:9
  $d0 = COPY %102:fpr64, debug-location !751; is.c:694:9
  $d1 = COPY %105:fpr64, debug-location !751; is.c:694:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !751; is.c:694:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !751; is.c:694:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !752; is.c:695:23
  PCN_STACKMAP 31, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, %102:fpr64, %105:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !752 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:695:23
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !752; is.c:695:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !752; is.c:695:23
  $w0 = MOVi32imm 2, debug-location !752; is.c:695:23
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !752; is.c:695:23
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !752; is.c:695:23
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !753; is.c:695:21
  PCN_STACKMAP 32, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !753 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:695:21
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !753; is.c:695:21
  %109:fpr64 = COPY killed $d0, debug-location !752; is.c:695:23
  STRDui %109:fpr64, %stack.6.timecounter, 0, debug-location !753 :: (store 8 into %ir.timecounter); is.c:695:21
  %110:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !755 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
  %111:fpr64 = FDIVDrr %109:fpr64, %110:fpr64, debug-location !756; is.c:696:33
  %112:fpr64 = FMULDrr %111:fpr64, %97:fpr64, debug-location !757; is.c:696:43
  STRDui %112:fpr64, %stack.9.t_percent, 0, debug-location !758 :: (store 8 into %ir.t_percent); is.c:696:19
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !761; is.c:697:9
  $x0 = MOVaddr target-flags(aarch64-page) @is__str_23__Sorting__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_23__Sorting__, debug-location !761; is.c:697:9
  $d0 = COPY %109:fpr64, debug-location !761; is.c:697:9
  $d1 = COPY %112:fpr64, debug-location !761; is.c:697:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !761; is.c:697:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !761; is.c:697:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !762; is.c:698:5
  PCN_STACKMAP 33, 0, %109:fpr64, %112:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !762; is.c:698:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !762; is.c:698:5

bb.28.do.end76:
; predecessors: %bb.24, %bb.27

  $w8 = COPY $wzr, debug-location !763; is.c:703:5
  RET_ReallyLR implicit killed $w8, debug-location !763; is.c:703:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %5:gpr64 = COPY killed $x8, debug-location !605; is.c:573:15
    To: CBZX %5:gpr64, %bb.2, debug-location !609; is.c:573:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:gpr64 = COPY killed $x8, debug-location !605; is.c:573:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%5
    SU(1): Data Latency=0 Reg=%5
  Single Issue       : false;
SU(1):   STRXui %5:gpr64, %stack.7.fp, 0, debug-location !607 :: (store 8 into %ir.fp); is.c:573:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Single Issue       : false;
ExitSU:   CBZX %5:gpr64, %bb.2, debug-location !609; is.c:573:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %5:gpr64, %stack.7.fp, 0, debug-location !607 :: (store 8 into %ir.fp); is.c:573:13
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %5:gpr64 = COPY killed $x8, debug-location !605; is.c:573:15
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gpr64 = COPY killed $x8, debug-location !605; is.c:573:15
SU(1):   STRXui %5:gpr64, %stack.7.fp, 0, debug-location !607 :: (store 8 into %ir.fp); is.c:573:13

********** MI Scheduling **********
main:%bb.0 entry
  From: $x0 = MOVaddr target-flags(aarch64-page) @is__str_2_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @is__str_2_timer_flag, debug-location !605; is.c:573:15
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !605; is.c:573:15
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_2_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @is__str_2_timer_flag, debug-location !605; is.c:573:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @is__str_3_r_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_3_r_, debug-location !605; is.c:573:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !605; is.c:573:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @is__str_3_r_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_3_r_, debug-location !605; is.c:573:15
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @is__str_2_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @is__str_2_timer_flag, debug-location !605; is.c:573:15
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_2_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @is__str_2_timer_flag, debug-location !605; is.c:573:15
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @is__str_3_r_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_3_r_, debug-location !605; is.c:573:15

********** MI Scheduling **********
main:%bb.0 entry
  From: %1:gpr64 = COPY $x1
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !605; is.c:573:15
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %1:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(4):   STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(5):   STRWui $wzr, %stack.5.timer_on, 0, debug-location !604 :: (store 4 into %ir.timer_on); is.c:572:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !605; is.c:573:15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %1:gpr64 = COPY $x1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 4 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %0:gpr32 = COPY $w0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 3 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRWui $wzr, %stack.5.timer_on, 0, debug-location !604 :: (store 4 into %ir.timer_on); is.c:572:14
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 
Queue TopQ.P: 
Queue TopQ.A: 3 4 2 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gpr64 = COPY $x1
SU(1):   %0:gpr32 = COPY $w0
SU(2):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
SU(3):   STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
SU(4):   STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
SU(5):   STRWui $wzr, %stack.5.timer_on, 0, debug-location !604 :: (store 4 into %ir.timer_on); is.c:572:14

********** MI Scheduling **********
main:%bb.1 if.then
  From: %8:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %8:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%8
  Single Issue       : false;
SU(1):   STRWui %8:gpr32, %stack.5.timer_on, 0, debug-location !613 :: (store 4 into %ir.timer_on); is.c:575:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%8
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %8:gpr32, %stack.5.timer_on, 0, debug-location !613 :: (store 4 into %ir.timer_on); is.c:575:18
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %8:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %8:gpr32 = MOVi32imm 1
SU(1):   STRWui %8:gpr32, %stack.5.timer_on, 0, debug-location !613 :: (store 4 into %ir.timer_on); is.c:575:18

********** MI Scheduling **********
main:%bb.6 if.end6
  From: STRWui $wzr, %stack.3.i, 0, debug-location !628 :: (store 4 into %ir.i); is.c:588:12
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !628 :: (store 4 into %ir.i); is.c:588:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %124:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %127:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %128:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %130:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %130:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %128:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %127:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %124:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.3.i, 0, debug-location !628 :: (store 4 into %ir.i); is.c:588:12
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !628 :: (store 4 into %ir.i); is.c:588:12
SU(1):   %124:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array
SU(2):   %127:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
SU(3):   %128:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array
SU(4):   %130:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array

********** MI Scheduling **********
main:%bb.7 for.cond
  From: %17:gpr32common = LDRWui %stack.3.i, 0, debug-location !631 :: (dereferenceable load 4 from %ir.i); is.c:588:17
    To: Bcc 12, %bb.9, implicit killed $nzcv, debug-location !634; is.c:588:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %17:gpr32common = LDRWui %stack.3.i, 0, debug-location !631 :: (dereferenceable load 4 from %ir.i); is.c:588:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%17
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv, debug-location !634; is.c:588:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.9, implicit killed $nzcv, debug-location !634; is.c:588:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv, debug-location !634; is.c:588:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %17:gpr32common = LDRWui %stack.3.i, 0, debug-location !631 :: (dereferenceable load 4 from %ir.i); is.c:588:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %17:gpr32common = LDRWui %stack.3.i, 0, debug-location !631 :: (dereferenceable load 4 from %ir.i); is.c:588:17
SU(1):   dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv, debug-location !634; is.c:588:5

********** MI Scheduling **********
main:%bb.8 for.body
  From: %122:gpr64common = LDRSWui %stack.3.i, 0, debug-location !635 :: (dereferenceable load 4 from %ir.i); is.c:603:54
    To: B %bb.7, debug-location !646; is.c:588:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=7
Live In: %130 %128 %127 %124 
Live Out: %130 %128 %127 %124 
Live Thru: GPR32=4
  LiveReg: %130
  UpdateRegP: SU(5) STRWroX %129:gpr32, %130:gpr64common, %125:gpr64, 0, 0, debug-location !644 :: (store 4 into %ir.arrayidx13); is.c:604:32
              to GPR32 2
  LiveReg: %128
  UpdateRegP: SU(4) %129:gpr32 = LDRWroX %128:gpr64common, %125:gpr64, 0, 0, debug-location !641 :: (load 4 from %ir.arrayidx11); is.c:604:34
              to 
  LiveReg: %127
  UpdateRegP: SU(3) STRWroX %126:gpr32, %127:gpr64common, %125:gpr64, 0, 0, debug-location !639 :: (store 4 into %ir.arrayidx9); is.c:603:33
              to GPR32 2
  LiveReg: %124
  UpdateRegP: SU(2) %126:gpr32 = LDRWroX %124:gpr64common, %125:gpr64, 0, 0, debug-location !636 :: (load 4 from %ir.arrayidx); is.c:603:35
              to 
Top Pressure:
GPR32=4
Bottom Pressure:
GPR32=4
Excess PSets: 
SU(0):   %122:gpr64common = LDRSWui %stack.3.i, 0, debug-location !635 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(6): Data Latency=4 Reg=%122
    SU(1): Data Latency=4 Reg=%122
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %125:gpr64 = UBFMXri %122:gpr64common, 62, 61, debug-location !641; is.c:604:34
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%122
  Successors:
    SU(5): Data Latency=1 Reg=%125
    SU(4): Data Latency=1 Reg=%125
    SU(3): Data Latency=1 Reg=%125
    SU(2): Data Latency=1 Reg=%125
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %126:gpr32 = LDRWroX %124:gpr64common, %125:gpr64, 0, 0, debug-location !636 :: (load 4 from %ir.arrayidx); is.c:603:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%125
  Successors:
    SU(3): Data Latency=4 Reg=%126
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   STRWroX %126:gpr32, %127:gpr64common, %125:gpr64, 0, 0, debug-location !639 :: (store 4 into %ir.arrayidx9); is.c:603:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%126
    SU(1): Data Latency=1 Reg=%125
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(4):   %129:gpr32 = LDRWroX %128:gpr64common, %125:gpr64, 0, 0, debug-location !641 :: (load 4 from %ir.arrayidx11); is.c:604:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%125
  Successors:
    SU(5): Data Latency=4 Reg=%129
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   STRWroX %129:gpr32, %130:gpr64common, %125:gpr64, 0, 0, debug-location !644 :: (store 4 into %ir.arrayidx13); is.c:604:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%129
    SU(1): Data Latency=1 Reg=%125
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(6):   %131:gpr32common = nsw ADDWri %122.sub_32:gpr64common, 1, 0, debug-location !645; is.c:588:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%122
  Successors:
    SU(7): Data Latency=1 Reg=%131
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   STRWui %131:gpr32common, %stack.3.i, 0, debug-location !645 :: (store 4 into %ir.i); is.c:588:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%131
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.7, debug-location !646; is.c:588:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %122:gpr64common = LDRSWui %stack.3.i, 0, debug-location !635 :: (dereferenceable load 4 from %ir.i); is.c:603:54
Top Pressure:
GPR32=5
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 3 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 1 
TopQ.A RemLatency SU(1) 5c
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(6) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui %131:gpr32common, %stack.3.i, 0, debug-location !645 :: (store 4 into %ir.i); is.c:588:39
Bottom Pressure:
GPR32=5
  LiveReg: %131
  UpdateRegP: SU(7) STRWui %131:gpr32common, %stack.3.i, 0, debug-location !645 :: (store 4 into %ir.i); is.c:588:39
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 6 
Queue TopQ.P: 
Queue TopQ.A: 6 1 
BotQ.A RemLatency SU(3) 9c
  BotQ.A RemainingLatency 9 + 1c > CritPath 9
TopQ.A RemLatency SU(1) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRWroX %129:gpr32, %130:gpr64common, %125:gpr64, 0, 0, debug-location !644 :: (store 4 into %ir.arrayidx13); is.c:604:32
Bottom Pressure:
GPR32=7
  LiveReg: %129
  UpdateRegP: SU(5) STRWroX %129:gpr32, %130:gpr64common, %125:gpr64, 0, 0, debug-location !644 :: (store 4 into %ir.arrayidx13); is.c:604:32
              to GPR32 1
  LiveReg: %125
  UpdateRegP: SU(2) %126:gpr32 = LDRWroX %124:gpr64common, %125:gpr64, 0, 0, debug-location !636 :: (load 4 from %ir.arrayidx); is.c:603:35
              to GPR32 -1
  UpdateRegP: SU(3) STRWroX %126:gpr32, %127:gpr64common, %125:gpr64, 0, 0, debug-location !639 :: (store 4 into %ir.arrayidx9); is.c:603:33
              to GPR32 1
  UpdateRegP: SU(4) %129:gpr32 = LDRWroX %128:gpr64common, %125:gpr64, 0, 0, debug-location !641 :: (load 4 from %ir.arrayidx11); is.c:604:34
              to GPR32 -1
  UpdateRegP: SU(5) STRWroX %129:gpr32, %130:gpr64common, %125:gpr64, 0, 0, debug-location !644 :: (store 4 into %ir.arrayidx13); is.c:604:32
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 6 
Queue TopQ.P: 
Queue TopQ.A: 6 1 
BotQ.A RemLatency SU(3) 9c
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 9 + 2c > CritPath 9
TopQ.A RemLatency SU(1) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(6) REG-MAX                            
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %131:gpr32common = nsw ADDWri %122.sub_32:gpr64common, 1, 0, debug-location !645; is.c:588:39
Bottom Pressure:
GPR32=7
  LiveReg: %122
  UpdateRegP: SU(1) %125:gpr64 = UBFMXri %122:gpr64common, 62, 61, debug-location !641; is.c:604:34
              to GPR32 -1
  UpdateRegP: SU(6) %131:gpr32common = nsw ADDWri %122.sub_32:gpr64common, 1, 0, debug-location !645; is.c:588:39
              to GPR32 -1
  Ready @2c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWroX %126:gpr32, %127:gpr64common, %125:gpr64, 0, 0, debug-location !639 :: (store 4 into %ir.arrayidx9); is.c:603:33
Bottom Pressure:
GPR32=8
  LiveReg: %126
  UpdateRegP: SU(3) STRWroX %126:gpr32, %127:gpr64common, %125:gpr64, 0, 0, debug-location !639 :: (store 4 into %ir.arrayidx9); is.c:603:33
              to 
  Ready @3c
  BotQ.A TopLatency SU(3) 9c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 2 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %129:gpr32 = LDRWroX %128:gpr64common, %125:gpr64, 0, 0, debug-location !641 :: (load 4 from %ir.arrayidx11); is.c:604:34
Bottom Pressure:
GPR32=7
  Ready @5c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %126:gpr32 = LDRWroX %124:gpr64common, %125:gpr64, 0, 0, debug-location !636 :: (load 4 from %ir.arrayidx); is.c:603:35
Bottom Pressure:
GPR32=6
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %125:gpr64 = UBFMXri %122:gpr64common, 62, 61, debug-location !641; is.c:604:34
Bottom Pressure:
GPR32=5
  Ready @8c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %122:gpr64common = LDRSWui %stack.3.i, 0, debug-location !635 :: (dereferenceable load 4 from %ir.i); is.c:603:54
SU(1):   %125:gpr64 = UBFMXri %122:gpr64common, 62, 61, debug-location !641; is.c:604:34
SU(2):   %126:gpr32 = LDRWroX %124:gpr64common, %125:gpr64, 0, 0, debug-location !636 :: (load 4 from %ir.arrayidx); is.c:603:35
SU(4):   %129:gpr32 = LDRWroX %128:gpr64common, %125:gpr64, 0, 0, debug-location !641 :: (load 4 from %ir.arrayidx11); is.c:604:34
SU(3):   STRWroX %126:gpr32, %127:gpr64common, %125:gpr64, 0, 0, debug-location !639 :: (store 4 into %ir.arrayidx9); is.c:603:33
SU(6):   %131:gpr32common = nsw ADDWri %122.sub_32:gpr64common, 1, 0, debug-location !645; is.c:588:39
SU(5):   STRWroX %129:gpr32, %130:gpr64common, %125:gpr64, 0, 0, debug-location !644 :: (store 4 into %ir.arrayidx13); is.c:604:32
SU(7):   STRWui %131:gpr32common, %stack.3.i, 0, debug-location !645 :: (store 4 into %ir.i); is.c:588:39

********** MI Scheduling **********
main:%bb.9 for.end
  From: $x0 = MOVaddr target-flags(aarch64-page) @is__str_6__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @is__str_6__Iteration, debug-location !651; is.c:619:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !651; is.c:619:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_6__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @is__str_6__Iteration, debug-location !651; is.c:619:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = MOVi32imm 10, debug-location !651; is.c:619:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !651; is.c:619:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = MOVi32imm 10, debug-location !651; is.c:619:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @is__str_6__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @is__str_6__Iteration, debug-location !651; is.c:619:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_6__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @is__str_6__Iteration, debug-location !651; is.c:619:5
SU(1):   $w1 = MOVi32imm 10, debug-location !651; is.c:619:5

********** MI Scheduling **********
main:%bb.9 for.end
  From: $x0 = MOVaddr target-flags(aarch64-page) @is__str_5__Size____l, target-flags(aarch64-pageoff, aarch64-nc) @is__str_5__Size____l, debug-location !650; is.c:618:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp, implicit-def dead $w8, debug-location !650; is.c:618:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_5__Size____l, target-flags(aarch64-pageoff, aarch64-nc) @is__str_5__Size____l, debug-location !650; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $w1 = MOVi32imm 33554432, implicit-def $x1, debug-location !650; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $w2 = MOVi32imm 66, debug-location !650; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp, implicit-def dead $w8, debug-location !650; is.c:618:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = MOVi32imm 66, debug-location !650; is.c:618:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) dead $w1 = MOVi32imm 33554432, implicit-def $x1, debug-location !650; is.c:618:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @is__str_5__Size____l, target-flags(aarch64-pageoff, aarch64-nc) @is__str_5__Size____l, debug-location !650; is.c:618:5
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_5__Size____l, target-flags(aarch64-pageoff, aarch64-nc) @is__str_5__Size____l, debug-location !650; is.c:618:5
SU(1):   dead $w1 = MOVi32imm 33554432, implicit-def $x1, debug-location !650; is.c:618:5
SU(2):   $w2 = MOVi32imm 66, debug-location !650; is.c:618:5

********** MI Scheduling **********
main:%bb.11 if.end19
  From: %31:gpr64temp = ADRP target-flags(aarch64-page) %const.0
    To: BL @create_seq, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !656; is.c:625:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %31:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%31
  Single Issue       : false;
SU(1):   %32:fpr64 = LDRDui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%31
  Successors:
    SU(4): Data Latency=4 Reg=%32
  Single Issue       : false;
SU(2):   %33:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(3):   %34:fpr64 = LDRDui %33:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%33
  Successors:
    SU(5): Data Latency=4 Reg=%34
  Single Issue       : false;
SU(4):   $d0 = COPY %32:fpr64, debug-location !656; is.c:625:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%32
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $d1 = COPY %34:fpr64, debug-location !656; is.c:625:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%34
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @create_seq, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !656; is.c:625:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $d1 = COPY %34:fpr64, debug-location !656; is.c:625:5
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) $d0 = COPY %32:fpr64, debug-location !656; is.c:625:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(3) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %34:fpr64 = LDRDui %33:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 5c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %32:fpr64 = LDRDui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 6c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %33:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  Ready @6c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %31:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %31:gpr64temp = ADRP target-flags(aarch64-page) %const.0
SU(2):   %33:gpr64temp = ADRP target-flags(aarch64-page) %const.1
SU(1):   %32:fpr64 = LDRDui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(3):   %34:fpr64 = LDRDui %33:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(4):   $d0 = COPY %32:fpr64, debug-location !656; is.c:625:5
SU(5):   $d1 = COPY %34:fpr64, debug-location !656; is.c:625:5

********** MI Scheduling **********
main:%bb.13 if.end22
  From: %38:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !662; is.c:635:25
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !663; is.c:638:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %38:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !662; is.c:635:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%38
  Single Issue       : false;
SU(1):   STRWui $wzr, %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !662 :: (store 4 into @passed_verification); is.c:635:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%38
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !663; is.c:638:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui $wzr, %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !662 :: (store 4 into @passed_verification); is.c:635:25
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %38:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !662; is.c:635:25
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %38:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !662; is.c:635:25
SU(1):   STRWui $wzr, %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !662 :: (store 4 into @passed_verification); is.c:635:25

********** MI Scheduling **********
main:%bb.13 if.end22
  From: %37:gpr32 = MOVi32imm 1
    To: BL @rank, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !661; is.c:632:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %37:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $w0 = MOVi32imm 1, debug-location !661; is.c:632:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @rank, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !661; is.c:632:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %37:gpr32 = MOVi32imm 1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w0 = MOVi32imm 1, debug-location !661; is.c:632:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(1):   $w0 = MOVi32imm 1, debug-location !661; is.c:632:5
SU(0):   %37:gpr32 = MOVi32imm 1

********** MI Scheduling **********
main:%bb.14 for.cond28
  From: %42:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !670 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
    To: Bcc 12, %bb.16, implicit killed $nzcv, debug-location !673; is.c:646:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %42:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !670 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%42
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %42:gpr32common, 10, 0, implicit-def $nzcv, debug-location !673; is.c:646:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%42
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.16, implicit killed $nzcv, debug-location !673; is.c:646:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %42:gpr32common, 10, 0, implicit-def $nzcv, debug-location !673; is.c:646:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %42:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !670 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %42:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !670 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
SU(1):   dead $wzr = SUBSWri %42:gpr32common, 10, 0, implicit-def $nzcv, debug-location !673; is.c:646:5

********** MI Scheduling **********
main:%bb.15 for.body30
  From: %120:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !681 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
    To: B %bb.14, debug-location !682; is.c:646:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %120:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !681 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%120
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !681; is.c:646:63
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%120
  Successors:
    SU(2): Data Latency=1 Reg=%121
  Single Issue       : false;
SU(2):   STRWui %121:gpr32common, %stack.4.iteration, 0, debug-location !681 :: (store 4 into %ir.iteration); is.c:646:63
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%121
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.14, debug-location !682; is.c:646:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %121:gpr32common, %stack.4.iteration, 0, debug-location !681 :: (store 4 into %ir.iteration); is.c:646:63
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !681; is.c:646:63
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %120:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !681 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %120:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !681 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
SU(1):   %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !681; is.c:646:63
SU(2):   STRWui %121:gpr32common, %stack.4.iteration, 0, debug-location !681 :: (store 4 into %ir.iteration); is.c:646:63

********** MI Scheduling **********
main:%bb.15 for.body30
  From: $x0 = MOVaddr target-flags(aarch64-page) @is__str_8__________d, target-flags(aarch64-pageoff, aarch64-nc) @is__str_8__________d, debug-location !677; is.c:648:13
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !677; is.c:648:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_8__________d, target-flags(aarch64-pageoff, aarch64-nc) @is__str_8__________d, debug-location !677; is.c:648:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %116:gpr32, debug-location !677; is.c:648:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !677; is.c:648:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %116:gpr32, debug-location !677; is.c:648:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @is__str_8__________d, target-flags(aarch64-pageoff, aarch64-nc) @is__str_8__________d, debug-location !677; is.c:648:13
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_8__________d, target-flags(aarch64-pageoff, aarch64-nc) @is__str_8__________d, debug-location !677; is.c:648:13
SU(1):   $w1 = COPY %116:gpr32, debug-location !677; is.c:648:13

********** MI Scheduling **********
main:%bb.16 do.end38
  From: %45:fpr64 = COPY killed $d0, debug-location !686; is.c:658:19
    To: CBZW %46:gpr32, %bb.18, debug-location !690; is.c:662:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %45:fpr64 = COPY killed $d0, debug-location !686; is.c:658:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%45
  Single Issue       : false;
SU(1):   STRDui %45:fpr64, %stack.6.timecounter, 0, debug-location !687 :: (store 8 into %ir.timecounter); is.c:658:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%45
  Single Issue       : false;
SU(2):   %46:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !688 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Data Latency=4 Reg=%46
  Single Issue       : false;
ExitSU:   CBZW %46:gpr32, %bb.18, debug-location !690; is.c:662:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%46
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %45:fpr64, %stack.6.timecounter, 0, debug-location !687 :: (store 8 into %ir.timecounter); is.c:658:17
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %45:fpr64 = COPY killed $d0, debug-location !686; is.c:658:19
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %46:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !688 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(2):   %46:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !688 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
SU(0):   %45:fpr64 = COPY $d0, debug-location !686; is.c:658:19
SU(1):   STRDui %45:fpr64, %stack.6.timecounter, 0, debug-location !687 :: (store 8 into %ir.timecounter); is.c:658:17

********** MI Scheduling **********
main:%bb.22 if.end48
  From: %52:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !701; is.c:672:9
    To: Bcc 0, %bb.24, implicit killed $nzcv, debug-location !704; is.c:672:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %52:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !701; is.c:672:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=1 Reg=%52
  Single Issue       : false;
SU(1):   %53:gpr32common = LDRWui %52:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !701 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=%52
  Successors:
    SU(2): Data Latency=4 Reg=%53
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWri %53:gpr32common, 51, 0, implicit-def $nzcv, debug-location !704; is.c:672:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%53
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.24, implicit killed $nzcv, debug-location !704; is.c:672:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri %53:gpr32common, 51, 0, implicit-def $nzcv, debug-location !704; is.c:672:9
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %53:gpr32common = LDRWui %52:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !701 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %52:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !701; is.c:672:9
  Ready @6c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %52:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !701; is.c:672:9
SU(1):   %53:gpr32common = LDRWui %52:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !701 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
SU(2):   dead $wzr = SUBSWri %53:gpr32common, 51, 0, implicit-def $nzcv, debug-location !704; is.c:672:9

********** MI Scheduling **********
main:%bb.23 if.then50
  From: %55:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !705; is.c:673:29
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %55:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !705; is.c:673:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%55
  Single Issue       : false;
SU(1):   STRWui $wzr, %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !705 :: (store 4 into @passed_verification); is.c:673:29
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%55
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui $wzr, %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !705 :: (store 4 into @passed_verification); is.c:673:29
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %55:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !705; is.c:673:29
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %55:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !705; is.c:673:29
SU(1):   STRWui $wzr, %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !705 :: (store 4 into @passed_verification); is.c:673:29

********** MI Scheduling **********
main:%bb.24 if.end51
  From: %66:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_18__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @is__str_18__O3__mcmod, debug-location !712; is.c:674:5
    To: BL @c_print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp, debug-location !712; is.c:674:5
 RegionInstrs: 27
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %63 %57 %65 
Live Out: %63 %57 %65 
Live Thru: FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %63
  UpdateRegP: SU(26) $d1 = COPY %63:fpr64, debug-location !712; is.c:674:5
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %57
  UpdateRegP: SU(25) $d0 = COPY %57:fpr64, debug-location !712; is.c:674:5
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %65
  UpdateRegP: SU(16) STRWui %65:gpr32, $sp, 2, debug-location !712 :: (store 4 into stack + 8); is.c:674:5
              to 
Top Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Bottom Pressure:
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Excess PSets: 
Cluster ld/st SU(15) - SU(13)
Cluster ld/st SU(11) - SU(9)
Cluster ld/st SU(7) - SU(5)
Cluster ld/st SU(3) - SU(1)
SU(0):   %66:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_18__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @is__str_18__O3__mcmod, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%66
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %66:gpr64, $sp, 9, debug-location !712 :: (store 8 into stack + 72); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%66
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %68:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_17__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_17__g__Wall__, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%68
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %68:gpr64, $sp, 8, debug-location !712 :: (store 8 into stack + 64); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%68
  Successors:
    SU(1): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %69:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_16__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @is__str_16__I___commo, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%69
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %69:gpr64, $sp, 7, debug-location !712 :: (store 8 into stack + 56); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%69
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %70:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_15__lm_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_15__lm_, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%70
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %70:gpr64, $sp, 6, debug-location !712 :: (store 8 into stack + 48); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%70
  Successors:
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %71:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_14___CC__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_14___CC__, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%71
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %71:gpr64, $sp, 5, debug-location !712 :: (store 8 into stack + 40); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%71
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %72:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_13_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_13_gcc_, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%72
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %72:gpr64, $sp, 4, debug-location !712 :: (store 8 into stack + 32); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%72
  Successors:
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %73:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_12_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @is__str_12_03_Nov_201, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%73
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %73:gpr64, $sp, 3, debug-location !712 :: (store 8 into stack + 24); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%73
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %74:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_11_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_11_3_3_1_, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%74
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %74:gpr64, $sp, 2, debug-location !712 :: (store 8 into stack + 16); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%74
  Successors:
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   STRWui %65:gpr32, $sp, 2, debug-location !712 :: (store 4 into stack + 8); is.c:674:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %75:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_10_keys_ranke, target-flags(aarch64-pageoff, aarch64-nc) @is__str_10_keys_ranke, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(18): Data Latency=1 Reg=%75
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(18):   STRXui %75:gpr64, $sp, 0, debug-location !712 :: (store 8 into stack); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(17): Data Latency=1 Reg=%75
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(19):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_9_IS_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_9_IS_, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   $w1 = MOVi32imm 66, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(21):   $w2 = MOVi32imm 524288, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(22):   $w3 = MOVi32imm 64, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(23):   $w4 = COPY $wzr, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(24):   $w5 = MOVi32imm 10, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(25):   $d0 = COPY %57:fpr64, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(26):   $d1 = COPY %63:fpr64, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
ExitSU:   BL @c_print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp, debug-location !712; is.c:674:5
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=1 Artificial
    SU(23): Ord  Latency=0 Artificial
    SU(22): Ord  Latency=1 Artificial
    SU(21): Ord  Latency=1 Artificial
    SU(20): Ord  Latency=1 Artificial
    SU(19): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 24 22 21 20 19 
Queue BotQ.A: 18 16 15 13 11 9 7 5 3 1 26 25 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 22 23 24 25 26 
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(26) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(23) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(26) $d1 = COPY %63:fpr64, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 24 22 21 20 19 
Queue BotQ.A: 18 16 15 13 11 9 7 5 3 1 23 25 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 22 23 24 25 
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(23) PHYS-REG                           
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(23) NOCAND                             
Pick Bot ORDER     
Scheduling SU(25) $d0 = COPY %57:fpr64, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 24 22 21 20 19 
Queue BotQ.A: 18 16 15 13 11 9 7 5 3 1 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 22 23 24 
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(23) PHYS-REG                           
Picking from Top:
  Cand SU(23) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(23) $w4 = COPY $wzr, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 24 22 21 20 19 
Queue BotQ.A: 18 16 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 22 24 
Picking from Bot:
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(18) STRXui %75:gpr64, $sp, 0, debug-location !712 :: (store 8 into stack); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %75
  UpdateRegP: SU(18) STRXui %75:gpr64, $sp, 0, debug-location !712 :: (store 8 into stack); is.c:674:5
              to 
  Ready @0c
  BotQ.A TopLatency SU(18) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 15 13 11 9 7 5 3 17 24 19 20 21 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 22 24 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(17) ORDER                              
  Cand SU(24) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(24) $w5 = MOVi32imm 10, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @1c
  BotQ.A BotLatency SU(24) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 15 13 11 9 7 5 3 17 22 19 20 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 22 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(22) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(22) $w3 = MOVi32imm 64, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 15 13 11 9 7 5 3 17 21 19 20 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(21) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(21) $w2 = MOVi32imm 524288, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 15 13 11 9 7 5 3 17 20 19 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(20) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(20) $w1 = MOVi32imm 66, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 15 13 11 9 7 5 3 17 19 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(13) STRXui %73:gpr64, $sp, 3, debug-location !712 :: (store 8 into stack + 24); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %73
  UpdateRegP: SU(13) STRXui %73:gpr64, $sp, 3, debug-location !712 :: (store 8 into stack + 24); is.c:674:5
              to 
  Ready @5c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 15 19 11 9 7 5 3 17 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(15) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(15) STRXui %74:gpr64, $sp, 2, debug-location !712 :: (store 8 into stack + 16); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %74
  UpdateRegP: SU(15) STRXui %74:gpr64, $sp, 2, debug-location !712 :: (store 8 into stack + 16); is.c:674:5
              to 
  Ready @6c
  BotQ.A TopLatency SU(15) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 12 19 11 9 7 5 3 17 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(9) STRXui %71:gpr64, $sp, 5, debug-location !712 :: (store 8 into stack + 40); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %71
  UpdateRegP: SU(9) STRXui %71:gpr64, $sp, 5, debug-location !712 :: (store 8 into stack + 40); is.c:674:5
              to 
  Ready @7c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 12 19 11 14 7 5 3 17 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(11) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(11) STRXui %72:gpr64, $sp, 4, debug-location !712 :: (store 8 into stack + 32); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %72
  UpdateRegP: SU(11) STRXui %72:gpr64, $sp, 4, debug-location !712 :: (store 8 into stack + 32); is.c:674:5
              to 
  Ready @8c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 12 19 8 14 7 5 3 17 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(19) $x0 = MOVaddr target-flags(aarch64-page) @is__str_9_IS_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_9_IS_, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 12 10 8 14 7 5 3 17 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(5) STRXui %69:gpr64, $sp, 7, debug-location !712 :: (store 8 into stack + 56); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %69
  UpdateRegP: SU(5) STRXui %69:gpr64, $sp, 7, debug-location !712 :: (store 8 into stack + 56); is.c:674:5
              to 
  Ready @10c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 12 10 8 14 7 17 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(7) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(7) STRXui %70:gpr64, $sp, 6, debug-location !712 :: (store 8 into stack + 48); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %70
  UpdateRegP: SU(7) STRXui %70:gpr64, $sp, 6, debug-location !712 :: (store 8 into stack + 48); is.c:674:5
              to 
  Ready @11c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 12 10 8 14 4 17 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(17) %75:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_10_keys_ranke, target-flags(aarch64-pageoff, aarch64-nc) @is__str_10_keys_ranke, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 12 10 8 14 4 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) STRXui %66:gpr64, $sp, 9, debug-location !712 :: (store 8 into stack + 72); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %66
  UpdateRegP: SU(1) STRXui %66:gpr64, $sp, 9, debug-location !712 :: (store 8 into stack + 72); is.c:674:5
              to 
  Ready @13c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 16 12 10 8 14 4 6 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(3) STRXui %68:gpr64, $sp, 8, debug-location !712 :: (store 8 into stack + 64); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %68
  UpdateRegP: SU(3) STRXui %68:gpr64, $sp, 8, debug-location !712 :: (store 8 into stack + 64); is.c:674:5
              to 
  Ready @14c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 16 12 10 8 14 4 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) STRWui %65:gpr32, $sp, 2, debug-location !712 :: (store 4 into stack + 8); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 12 10 8 14 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %74:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_11_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_11_3_3_1_, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 12 10 8 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 17c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %73:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_12_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @is__str_12_03_Nov_201, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 4 10 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 18c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %72:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_13_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_13_gcc_, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 4 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 19c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %71:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_14___CC__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_14___CC__, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 20c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %70:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_15__lm_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_15__lm_, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 21c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %69:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_16__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @is__str_16__I___commo, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 22c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %68:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_17__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_17__g__Wall__, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %66:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_18__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @is__str_18__O3__mcmod, debug-location !712; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %66:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_18__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @is__str_18__O3__mcmod, debug-location !712; is.c:674:5
SU(2):   %68:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_17__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_17__g__Wall__, debug-location !712; is.c:674:5
SU(4):   %69:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_16__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @is__str_16__I___commo, debug-location !712; is.c:674:5
SU(6):   %70:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_15__lm_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_15__lm_, debug-location !712; is.c:674:5
SU(8):   %71:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_14___CC__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_14___CC__, debug-location !712; is.c:674:5
SU(10):   %72:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_13_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_13_gcc_, debug-location !712; is.c:674:5
SU(12):   %73:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_12_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @is__str_12_03_Nov_201, debug-location !712; is.c:674:5
SU(14):   %74:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_11_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_11_3_3_1_, debug-location !712; is.c:674:5
SU(16):   STRWui %65:gpr32, $sp, 2, debug-location !712 :: (store 4 into stack + 8); is.c:674:5
SU(3):   STRXui %68:gpr64, $sp, 8, debug-location !712 :: (store 8 into stack + 64); is.c:674:5
SU(1):   STRXui %66:gpr64, $sp, 9, debug-location !712 :: (store 8 into stack + 72); is.c:674:5
SU(17):   %75:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_10_keys_ranke, target-flags(aarch64-pageoff, aarch64-nc) @is__str_10_keys_ranke, debug-location !712; is.c:674:5
SU(7):   STRXui %70:gpr64, $sp, 6, debug-location !712 :: (store 8 into stack + 48); is.c:674:5
SU(5):   STRXui %69:gpr64, $sp, 7, debug-location !712 :: (store 8 into stack + 56); is.c:674:5
SU(19):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_9_IS_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_9_IS_, debug-location !712; is.c:674:5
SU(11):   STRXui %72:gpr64, $sp, 4, debug-location !712 :: (store 8 into stack + 32); is.c:674:5
SU(9):   STRXui %71:gpr64, $sp, 5, debug-location !712 :: (store 8 into stack + 40); is.c:674:5
SU(15):   STRXui %74:gpr64, $sp, 2, debug-location !712 :: (store 8 into stack + 16); is.c:674:5
SU(13):   STRXui %73:gpr64, $sp, 3, debug-location !712 :: (store 8 into stack + 24); is.c:674:5
SU(20):   $w1 = MOVi32imm 66, debug-location !712; is.c:674:5
SU(21):   $w2 = MOVi32imm 524288, debug-location !712; is.c:674:5
SU(22):   $w3 = MOVi32imm 64, debug-location !712; is.c:674:5
SU(24):   $w5 = MOVi32imm 10, debug-location !712; is.c:674:5
SU(18):   STRXui %75:gpr64, $sp, 0, debug-location !712 :: (store 8 into stack); is.c:674:5
SU(23):   $w4 = COPY $wzr, debug-location !712; is.c:674:5
SU(25):   $d0 = COPY %57:fpr64, debug-location !712; is.c:674:5
SU(26):   $d1 = COPY %63:fpr64, debug-location !712; is.c:674:5

********** MI Scheduling **********
main:%bb.24 if.end51
  From: %57:fpr64 = LDRDui %stack.6.timecounter, 0, debug-location !707 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
    To: ADJCALLSTACKDOWN 80, 0, implicit-def dead $sp, implicit $sp, debug-location !712; is.c:674:5
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: 
Live Out: %65 %63 %57 
Live Thru: 
  LiveReg: %65
  LiveReg: %63
  LiveReg: %57
  UpdateRegP: SU(3) %60:fpr64 = FDIVDrr %59:fpr64, %57:fpr64, debug-location !709; is.c:676:49
              to 
Top Pressure:

Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Excess PSets: 
SU(0):   %57:fpr64 = LDRDui %stack.6.timecounter, 0, debug-location !707 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%57
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %58:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=1 Reg=%58
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(2):   %59:fpr64 = LDRDui %58:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%58
  Successors:
    SU(3): Data Latency=4 Reg=%59
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(3):   %60:fpr64 = FDIVDrr %59:fpr64, %57:fpr64, debug-location !709; is.c:676:49
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%59
    SU(0): Data Latency=4 Reg=%57
  Successors:
    SU(6): Data Latency=1 Reg=%60
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %61:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=1 Reg=%61
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(5):   %62:fpr64 = LDRDui %61:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=%61
  Successors:
    SU(6): Data Latency=4 Reg=%62
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(6):   %63:fpr64 = FDIVDrr %60:fpr64, %62:fpr64, debug-location !710; is.c:676:63
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%60
    SU(5): Data Latency=4 Reg=%62
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(7):   %64:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !711; is.c:677:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Data Latency=1 Reg=%64
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(8):   %65:gpr32 = LDRWui %64:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !711 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(7): Data Latency=1 Reg=%64
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 80, 0, implicit-def dead $sp, implicit $sp, debug-location !712; is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %63:fpr64 = FDIVDrr %60:fpr64, %62:fpr64, debug-location !710; is.c:676:63
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %60
  UpdateRegP: SU(6) %63:fpr64 = FDIVDrr %60:fpr64, %62:fpr64, debug-location !710; is.c:676:63
              to 
  LiveReg: %62
  UpdateRegP: SU(6) %63:fpr64 = FDIVDrr %60:fpr64, %62:fpr64, debug-location !710; is.c:676:63
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @0c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 5 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %60:fpr64 = FDIVDrr %59:fpr64, %57:fpr64, debug-location !709; is.c:676:49
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %59
  UpdateRegP: SU(3) %60:fpr64 = FDIVDrr %59:fpr64, %57:fpr64, debug-location !709; is.c:676:49
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 5 2 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %65:gpr32 = LDRWui %64:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !711 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
Bottom Pressure:
GPR64temp=1
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %64
  UpdateRegP: SU(8) %65:gpr32 = LDRWui %64:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !711 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
              to GPR32 -1
  Ready @3c
  BotQ.A BotLatency SU(8) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 2 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 7 
BotQ.A RemLatency SU(5) 1c
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(7) %64:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !711; is.c:677:24
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %62:fpr64 = LDRDui %61:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %61
  UpdateRegP: SU(5) %62:fpr64 = LDRDui %61:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 6c > CritPath 6
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(0) REG-MAX                            
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %61:gpr64temp = ADRP target-flags(aarch64-page) %const.3
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %59:fpr64 = LDRDui %58:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %58
  UpdateRegP: SU(2) %59:fpr64 = LDRDui %58:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 8c > CritPath 6
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %58:gpr64temp = ADRP target-flags(aarch64-page) %const.2
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @8c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %57:fpr64 = LDRDui %stack.6.timecounter, 0, debug-location !707 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
Bottom Pressure:

  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %57:fpr64 = LDRDui %stack.6.timecounter, 0, debug-location !707 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
SU(1):   %58:gpr64temp = ADRP target-flags(aarch64-page) %const.2
SU(2):   %59:fpr64 = LDRDui %58:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(4):   %61:gpr64temp = ADRP target-flags(aarch64-page) %const.3
SU(5):   %62:fpr64 = LDRDui %61:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(7):   %64:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !711; is.c:677:24
SU(8):   %65:gpr32 = LDRWui %64:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !711 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
SU(3):   %60:fpr64 = FDIVDrr %59:fpr64, %57:fpr64, debug-location !709; is.c:676:49
SU(6):   %63:fpr64 = FDIVDrr %60:fpr64, %62:fpr64, debug-location !710; is.c:676:63

********** MI Scheduling **********
main:%bb.25 if.then54
  From: %90:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
    To: Bcc 1, %bb.27, implicit killed $nzcv, debug-location !729; is.c:687:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %90:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%90
  Single Issue       : false;
SU(1):   FCMPDri %90:fpr64, implicit-def $nzcv, debug-location !729; is.c:687:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%90
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.27, implicit killed $nzcv, debug-location !729; is.c:687:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) FCMPDri %90:fpr64, implicit-def $nzcv, debug-location !729; is.c:687:13
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %90:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %90:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
SU(1):   FCMPDri %90:fpr64, implicit-def $nzcv, debug-location !729; is.c:687:13

********** MI Scheduling **********
main:%bb.25 if.then54
  From: $x0 = MOVaddr target-flags(aarch64-page) @is__str_20__Total_exe, target-flags(aarch64-pageoff, aarch64-nc) @is__str_20__Total_exe, debug-location !725; is.c:686:9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !725; is.c:686:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_20__Total_exe, target-flags(aarch64-pageoff, aarch64-nc) @is__str_20__Total_exe, debug-location !725; is.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %87:fpr64, debug-location !725; is.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !725; is.c:686:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %87:fpr64, debug-location !725; is.c:686:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @is__str_20__Total_exe, target-flags(aarch64-pageoff, aarch64-nc) @is__str_20__Total_exe, debug-location !725; is.c:686:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_20__Total_exe, target-flags(aarch64-pageoff, aarch64-nc) @is__str_20__Total_exe, debug-location !725; is.c:686:9
SU(1):   $d0 = COPY %87:fpr64, debug-location !725; is.c:686:9

********** MI Scheduling **********
main:%bb.25 if.then54
  From: %84:fpr64 = COPY $d0, debug-location !721; is.c:684:19
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !723; is.c:685:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %84:fpr64 = COPY $d0, debug-location !721; is.c:684:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%84
  Single Issue       : false;
SU(1):   STRDui %84:fpr64, %stack.8.t_total, 0, debug-location !722 :: (store 8 into %ir.t_total); is.c:684:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%84
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !723; is.c:685:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %84:fpr64, %stack.8.t_total, 0, debug-location !722 :: (store 8 into %ir.t_total); is.c:684:17
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %84:fpr64 = COPY $d0, debug-location !721; is.c:684:19
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %84:fpr64 = COPY $d0, debug-location !721; is.c:684:19
SU(1):   STRDui %84:fpr64, %stack.8.t_total, 0, debug-location !722 :: (store 8 into %ir.t_total); is.c:684:17

********** MI Scheduling **********
main:%bb.26 if.then59
  From: %91:gpr64 = MOVi64imm 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %91:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%91
  Single Issue       : false;
SU(1):   STRXui %91:gpr64, %stack.8.t_total, 0, debug-location !730 :: (store 8 into %ir.t_total); is.c:688:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%91
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %91:gpr64, %stack.8.t_total, 0, debug-location !730 :: (store 8 into %ir.t_total); is.c:688:21
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %91:gpr64 = MOVi64imm 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %91:gpr64 = MOVi64imm 4607182418800017408
SU(1):   STRXui %91:gpr64, %stack.8.t_total, 0, debug-location !730 :: (store 8 into %ir.t_total); is.c:688:21

********** MI Scheduling **********
main:%bb.27 if.end60
  From: $x0 = MOVaddr target-flags(aarch64-page) @is__str_23__Sorting__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_23__Sorting__, debug-location !761; is.c:697:9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !761; is.c:697:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_23__Sorting__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_23__Sorting__, debug-location !761; is.c:697:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %109:fpr64, debug-location !761; is.c:697:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d1 = COPY %112:fpr64, debug-location !761; is.c:697:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !761; is.c:697:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d1 = COPY %112:fpr64, debug-location !761; is.c:697:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %109:fpr64, debug-location !761; is.c:697:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @is__str_23__Sorting__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_23__Sorting__, debug-location !761; is.c:697:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_23__Sorting__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_23__Sorting__, debug-location !761; is.c:697:9
SU(1):   $d0 = COPY %109:fpr64, debug-location !761; is.c:697:9
SU(2):   $d1 = COPY %112:fpr64, debug-location !761; is.c:697:9

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %109:fpr64 = COPY $d0, debug-location !752; is.c:695:23
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !761; is.c:697:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %109:fpr64 = COPY $d0, debug-location !752; is.c:695:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=0 Reg=%109
    SU(1): Data Latency=0 Reg=%109
  Single Issue       : false;
SU(1):   STRDui %109:fpr64, %stack.6.timecounter, 0, debug-location !753 :: (store 8 into %ir.timecounter); is.c:695:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%109
  Single Issue       : false;
SU(2):   %110:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !755 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=%110
  Single Issue       : false;
SU(3):   %111:fpr64 = FDIVDrr %109:fpr64, %110:fpr64, debug-location !756; is.c:696:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%110
    SU(0): Data Latency=0 Reg=%109
  Successors:
    SU(4): Data Latency=1 Reg=%111
  Single Issue       : false;
SU(4):   %112:fpr64 = FMULDrr %111:fpr64, %97:fpr64, debug-location !757; is.c:696:43
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%111
  Successors:
    SU(5): Data Latency=1 Reg=%112
  Single Issue       : false;
SU(5):   STRDui %112:fpr64, %stack.9.t_percent, 0, debug-location !758 :: (store 8 into %ir.t_percent); is.c:696:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%112
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !761; is.c:697:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %109:fpr64 = COPY $d0, debug-location !752; is.c:695:23
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRDui %112:fpr64, %stack.9.t_percent, 0, debug-location !758 :: (store 8 into %ir.t_percent); is.c:696:19
  Ready @0c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %112:fpr64 = FMULDrr %111:fpr64, %97:fpr64, debug-location !757; is.c:696:43
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %111:fpr64 = FDIVDrr %109:fpr64, %110:fpr64, debug-location !756; is.c:696:33
  Ready @2c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %109:fpr64, %stack.6.timecounter, 0, debug-location !753 :: (store 8 into %ir.timecounter); is.c:695:21
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %110:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !755 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %109:fpr64 = COPY $d0, debug-location !752; is.c:695:23
SU(2):   %110:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !755 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
SU(1):   STRDui %109:fpr64, %stack.6.timecounter, 0, debug-location !753 :: (store 8 into %ir.timecounter); is.c:695:21
SU(3):   %111:fpr64 = FDIVDrr %109:fpr64, %110:fpr64, debug-location !756; is.c:696:33
SU(4):   %112:fpr64 = FMULDrr %111:fpr64, %97:fpr64, debug-location !757; is.c:696:43
SU(5):   STRDui %112:fpr64, %stack.9.t_percent, 0, debug-location !758 :: (store 8 into %ir.t_percent); is.c:696:19

********** MI Scheduling **********
main:%bb.27 if.end60
  From: $x0 = MOVaddr target-flags(aarch64-page) @is__str_22__Benchmark, target-flags(aarch64-pageoff, aarch64-nc) @is__str_22__Benchmark, debug-location !751; is.c:694:9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !751; is.c:694:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_22__Benchmark, target-flags(aarch64-pageoff, aarch64-nc) @is__str_22__Benchmark, debug-location !751; is.c:694:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %102:fpr64, debug-location !751; is.c:694:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d1 = COPY %105:fpr64, debug-location !751; is.c:694:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !751; is.c:694:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d1 = COPY %105:fpr64, debug-location !751; is.c:694:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %102:fpr64, debug-location !751; is.c:694:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @is__str_22__Benchmark, target-flags(aarch64-pageoff, aarch64-nc) @is__str_22__Benchmark, debug-location !751; is.c:694:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_22__Benchmark, target-flags(aarch64-pageoff, aarch64-nc) @is__str_22__Benchmark, debug-location !751; is.c:694:9
SU(1):   $d0 = COPY %102:fpr64, debug-location !751; is.c:694:9
SU(2):   $d1 = COPY %105:fpr64, debug-location !751; is.c:694:9

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %102:fpr64 = COPY $d0, debug-location !742; is.c:692:23
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !751; is.c:694:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %102:fpr64 = COPY $d0, debug-location !742; is.c:692:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=0 Reg=%102
    SU(1): Data Latency=0 Reg=%102
  Single Issue       : false;
SU(1):   STRDui %102:fpr64, %stack.6.timecounter, 0, debug-location !743 :: (store 8 into %ir.timecounter); is.c:692:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%102
  Single Issue       : false;
SU(2):   %103:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !745 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=%103
  Single Issue       : false;
SU(3):   %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64, debug-location !746; is.c:693:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%103
    SU(0): Data Latency=0 Reg=%102
  Successors:
    SU(4): Data Latency=1 Reg=%104
  Single Issue       : false;
SU(4):   %105:fpr64 = FMULDrr %104:fpr64, %97:fpr64, debug-location !747; is.c:693:43
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%104
  Successors:
    SU(5): Data Latency=1 Reg=%105
  Single Issue       : false;
SU(5):   STRDui %105:fpr64, %stack.9.t_percent, 0, debug-location !748 :: (store 8 into %ir.t_percent); is.c:693:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%105
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !751; is.c:694:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %102:fpr64 = COPY $d0, debug-location !742; is.c:692:23
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRDui %105:fpr64, %stack.9.t_percent, 0, debug-location !748 :: (store 8 into %ir.t_percent); is.c:693:19
  Ready @0c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %105:fpr64 = FMULDrr %104:fpr64, %97:fpr64, debug-location !747; is.c:693:43
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64, debug-location !746; is.c:693:33
  Ready @2c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %102:fpr64, %stack.6.timecounter, 0, debug-location !743 :: (store 8 into %ir.timecounter); is.c:692:21
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %103:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !745 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %102:fpr64 = COPY $d0, debug-location !742; is.c:692:23
SU(2):   %103:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !745 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
SU(1):   STRDui %102:fpr64, %stack.6.timecounter, 0, debug-location !743 :: (store 8 into %ir.timecounter); is.c:692:21
SU(3):   %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64, debug-location !746; is.c:693:33
SU(4):   %105:fpr64 = FMULDrr %104:fpr64, %97:fpr64, debug-location !747; is.c:693:43
SU(5):   STRDui %105:fpr64, %stack.9.t_percent, 0, debug-location !748 :: (store 8 into %ir.t_percent); is.c:693:19

********** MI Scheduling **********
main:%bb.27 if.end60
  From: $x0 = MOVaddr target-flags(aarch64-page) @is__str_21__Initializ, target-flags(aarch64-pageoff, aarch64-nc) @is__str_21__Initializ, debug-location !741; is.c:691:9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !741; is.c:691:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_21__Initializ, target-flags(aarch64-pageoff, aarch64-nc) @is__str_21__Initializ, debug-location !741; is.c:691:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %93:fpr64, debug-location !741; is.c:691:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d1 = COPY %98:fpr64, debug-location !741; is.c:691:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !741; is.c:691:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d1 = COPY %98:fpr64, debug-location !741; is.c:691:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %93:fpr64, debug-location !741; is.c:691:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @is__str_21__Initializ, target-flags(aarch64-pageoff, aarch64-nc) @is__str_21__Initializ, debug-location !741; is.c:691:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @is__str_21__Initializ, target-flags(aarch64-pageoff, aarch64-nc) @is__str_21__Initializ, debug-location !741; is.c:691:9
SU(1):   $d0 = COPY %93:fpr64, debug-location !741; is.c:691:9
SU(2):   $d1 = COPY %98:fpr64, debug-location !741; is.c:691:9

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %93:fpr64 = COPY $d0, debug-location !732; is.c:689:23
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !741; is.c:691:9
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: B0 
Live Out: %98 %97 %93 
Live Thru: 
  LiveReg: %98
  UpdateRegP: SU(7) STRDui %98:fpr64, %stack.9.t_percent, 0, debug-location !738 :: (store 8 into %ir.t_percent); is.c:690:19
              to 
  LiveReg: %97
  UpdateRegP: SU(6) %98:fpr64 = FMULDrr %95:fpr64, %97:fpr64, debug-location !737; is.c:690:43
              to 
  LiveReg: %93
  UpdateRegP: SU(1) STRDui %93:fpr64, %stack.6.timecounter, 0, debug-location !733 :: (store 8 into %ir.timecounter); is.c:689:21
              to 
  UpdateRegP: SU(3) %95:fpr64 = FDIVDrr %93:fpr64, %94:fpr64, debug-location !736; is.c:690:33
              to 
Top Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Excess PSets: 
SU(0):   %93:fpr64 = COPY $d0, debug-location !732; is.c:689:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=0 Reg=%93
    SU(1): Data Latency=0 Reg=%93
  Pressure Diff      : ZPR_3b 1
  Single Issue       : false;
SU(1):   STRDui %93:fpr64, %stack.6.timecounter, 0, debug-location !733 :: (store 8 into %ir.timecounter); is.c:689:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%93
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %94:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !735 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=%94
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(3):   %95:fpr64 = FDIVDrr %93:fpr64, %94:fpr64, debug-location !736; is.c:690:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%94
    SU(0): Data Latency=0 Reg=%93
  Successors:
    SU(6): Data Latency=1 Reg=%95
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %96:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Data Latency=1 Reg=%96
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(5):   %97:fpr64 = LDRDui %96:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=%96
  Successors:
    SU(6): Data Latency=4 Reg=%97
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(6):   %98:fpr64 = FMULDrr %95:fpr64, %97:fpr64, debug-location !737; is.c:690:43
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%95
    SU(5): Data Latency=4 Reg=%97
  Successors:
    SU(7): Data Latency=1 Reg=%98
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   STRDui %98:fpr64, %stack.9.t_percent, 0, debug-location !738 :: (store 8 into %ir.t_percent); is.c:690:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%98
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !741; is.c:691:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %93:fpr64 = COPY $d0, debug-location !732; is.c:689:23
Top Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 1 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRDui %98:fpr64, %stack.9.t_percent, 0, debug-location !738 :: (store 8 into %ir.t_percent); is.c:690:19
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @0c
  BotQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
BotQ.A RemLatency SU(6) 5c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %98:fpr64 = FMULDrr %95:fpr64, %97:fpr64, debug-location !737; is.c:690:43
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %95
  UpdateRegP: SU(6) %98:fpr64 = FMULDrr %95:fpr64, %97:fpr64, debug-location !737; is.c:690:43
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
BotQ.A RemLatency SU(3) 4c
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %95:fpr64 = FDIVDrr %93:fpr64, %94:fpr64, debug-location !736; is.c:690:33
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %94
  UpdateRegP: SU(3) %95:fpr64 = FDIVDrr %93:fpr64, %94:fpr64, debug-location !736; is.c:690:33
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %93:fpr64, %stack.6.timecounter, 0, debug-location !733 :: (store 8 into %ir.timecounter); is.c:689:21
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 2 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %97:fpr64 = LDRDui %96:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %96
  UpdateRegP: SU(5) %97:fpr64 = LDRDui %96:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A BotLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 
Queue TopQ.P: 
Queue TopQ.A: 4 2 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %96:gpr64temp = ADRP target-flags(aarch64-page) %const.4
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  BotQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %94:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !735 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %93:fpr64 = COPY $d0, debug-location !732; is.c:689:23
SU(2):   %94:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !735 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
SU(4):   %96:gpr64temp = ADRP target-flags(aarch64-page) %const.4
SU(5):   %97:fpr64 = LDRDui %96:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(1):   STRDui %93:fpr64, %stack.6.timecounter, 0, debug-location !733 :: (store 8 into %ir.timecounter); is.c:689:21
SU(3):   %95:fpr64 = FDIVDrr %93:fpr64, %94:fpr64, debug-location !736; is.c:690:33
SU(6):   %98:fpr64 = FMULDrr %95:fpr64, %97:fpr64, debug-location !737; is.c:690:43
SU(7):   STRDui %98:fpr64, %stack.9.t_percent, 0, debug-location !738 :: (store 8 into %ir.t_percent); is.c:690:19

********** INTERVALS **********
WSP [128r,128d:169)[208r,208d:168)[224r,224d:167)[240r,240d:166)[272r,272d:165)[384r,384d:164)[416r,416d:163)[432r,432d:162)[448r,448d:161)[480r,480d:160)[544r,544d:159)[592r,592d:158)[608r,608d:157)[624r,624d:156)[656r,656d:155)[736r,736d:154)[784r,784d:153)[800r,800d:152)[816r,816d:151)[848r,848d:150)[864r,864d:149)[912r,912d:148)[928r,928d:147)[944r,944d:146)[976r,976d:145)[992r,992d:144)[1040r,1040d:143)[1056r,1056d:142)[1072r,1072d:141)[1104r,1104d:140)[1200r,1200d:139)[1248r,1248d:138)[1264r,1264d:137)[1280r,1280d:136)[1312r,1312d:135)[1712r,1712d:134)[1760r,1760d:133)[1776r,1776d:132)[1792r,1792d:131)[1824r,1824d:130)[1840r,1840d:129)[1968r,1968d:128)[1984r,1984d:127)[2000r,2000d:126)[2032r,2032d:125)[2048r,2048d:124)[2128r,2128d:123)[2144r,2144d:122)[2160r,2160d:121)[2192r,2192d:120)[2272r,2272d:119)[2320r,2320d:118)[2336r,2336d:117)[2352r,2352d:116)[2384r,2384d:115)[2416r,2416d:114)[2528r,2528d:113)[2544r,2544d:112)[2560r,2560d:111)[2592r,2592d:110)[2672r,2672d:109)[2720r,2720d:108)[2736r,2736d:107)[2752r,2752d:106)[2784r,2784d:105)[2816r,2816d:104)[2864r,2864d:103)[2880r,2880d:102)[2896r,2896d:101)[2928r,2928d:100)[2992r,2992d:99)[3040r,3040d:98)[3056r,3056d:97)[3072r,3072d:96)[3104r,3104d:95)[3120r,3120d:94)[3152r,3152d:93)[3168r,3168d:92)[3184r,3184d:91)[3216r,3216d:90)[3376r,3376d:9)[3424r,3424d:8)[3440r,3440d:7)[3456r,3456d:6)[3488r,3488d:5)[3520r,3520d:4)[3552r,3552d:3)[3568r,3568d:2)[3584r,3584d:1)[3616r,3616d:0)[3712r,3712d:89)[3760r,3760d:88)[3776r,3776d:87)[3792r,3792d:86)[3824r,3824d:85)[3840r,3840d:84)[3872r,3872d:83)[3888r,3888d:82)[3904r,3904d:81)[3936r,3936d:80)[4048r,4048d:79)[4096r,4096d:78)[4112r,4112d:77)[4128r,4128d:76)[4160r,4160d:75)[4192r,4192d:74)[4208r,4208d:73)[4224r,4224d:72)[4240r,4240d:71)[4272r,4272d:70)[4352r,4352d:69)[4400r,4400d:68)[4416r,4416d:67)[4432r,4432d:66)[4464r,4464d:65)[4560r,4560d:64)[4608r,4608d:63)[4624r,4624d:62)[4640r,4640d:61)[4672r,4672d:60)[5008r,5008d:59)[5568r,5568d:58)[5584r,5584d:57)[5600r,5600d:56)[5632r,5632d:55)[5712r,5712d:54)[5760r,5760d:53)[5776r,5776d:52)[5792r,5792d:51)[5824r,5824d:50)[5872r,5872d:49)[5920r,5920d:48)[5936r,5936d:47)[5952r,5952d:46)[5984r,5984d:45)[6016r,6016d:44)[6080r,6080d:43)[6096r,6096d:42)[6112r,6112d:41)[6144r,6144d:40)[6288r,6288d:39)[6336r,6336d:38)[6352r,6352d:37)[6368r,6368d:36)[6400r,6400d:35)[6544r,6544d:34)[6624r,6624d:33)[6640r,6640d:32)[6656r,6656d:31)[6688r,6688d:30)[6704r,6704d:29)[6752r,6752d:28)[6768r,6768d:27)[6784r,6784d:26)[6816r,6816d:25)[6928r,6928d:24)[7008r,7008d:23)[7024r,7024d:22)[7040r,7040d:21)[7072r,7072d:20)[7088r,7088d:19)[7136r,7136d:18)[7152r,7152d:17)[7168r,7168d:16)[7200r,7200d:15)[7312r,7312d:14)[7392r,7392d:13)[7408r,7408d:12)[7424r,7424d:11)[7456r,7456d:10)  0@3616r 1@3584r 2@3568r 3@3552r 4@3520r 5@3488r 6@3456r 7@3440r 8@3424r 9@3376r 10@7456r 11@7424r 12@7408r 13@7392r 14@7312r 15@7200r 16@7168r 17@7152r 18@7136r 19@7088r 20@7072r 21@7040r 22@7024r 23@7008r 24@6928r 25@6816r 26@6784r 27@6768r 28@6752r 29@6704r 30@6688r 31@6656r 32@6640r 33@6624r 34@6544r 35@6400r 36@6368r 37@6352r 38@6336r 39@6288r 40@6144r 41@6112r 42@6096r 43@6080r 44@6016r 45@5984r 46@5952r 47@5936r 48@5920r 49@5872r 50@5824r 51@5792r 52@5776r 53@5760r 54@5712r 55@5632r 56@5600r 57@5584r 58@5568r 59@5008r 60@4672r 61@4640r 62@4624r 63@4608r 64@4560r 65@4464r 66@4432r 67@4416r 68@4400r 69@4352r 70@4272r 71@4240r 72@4224r 73@4208r 74@4192r 75@4160r 76@4128r 77@4112r 78@4096r 79@4048r 80@3936r 81@3904r 82@3888r 83@3872r 84@3840r 85@3824r 86@3792r 87@3776r 88@3760r 89@3712r 90@3216r 91@3184r 92@3168r 93@3152r 94@3120r 95@3104r 96@3072r 97@3056r 98@3040r 99@2992r 100@2928r 101@2896r 102@2880r 103@2864r 104@2816r 105@2784r 106@2752r 107@2736r 108@2720r 109@2672r 110@2592r 111@2560r 112@2544r 113@2528r 114@2416r 115@2384r 116@2352r 117@2336r 118@2320r 119@2272r 120@2192r 121@2160r 122@2144r 123@2128r 124@2048r 125@2032r 126@2000r 127@1984r 128@1968r 129@1840r 130@1824r 131@1792r 132@1776r 133@1760r 134@1712r 135@1312r 136@1280r 137@1264r 138@1248r 139@1200r 140@1104r 141@1072r 142@1056r 143@1040r 144@992r 145@976r 146@944r 147@928r 148@912r 149@864r 150@848r 151@816r 152@800r 153@784r 154@736r 155@656r 156@624r 157@608r 158@592r 159@544r 160@480r 161@448r 162@432r 163@416r 164@384r 165@272r 166@240r 167@224r 168@208r 169@128r
B0 [2496r,2528r:10)[3872r,3988r:9)[5536r,5568r:8)[5760r,5840r:7)[6064r,6080r:6)[6336r,6416r:5)[6592r,6624r:4)[6752r,6832r:3)[6976r,7008r:2)[7136r,7216r:1)[7360r,7392r:0)  0@7360r 1@7136r 2@6976r 3@6752r 4@6592r 5@6336r 6@6064r 7@5760r 8@5536r 9@3872r 10@2496r
W0 [0B,32r:0)[176r,208r:32)[400r,416r:31)[576r,592r:19)[768r,784r:18)[896r,912r:17)[1024r,1040r:16)[1232r,1248r:15)[1744r,1760r:30)[1920r,1968r:29)[2096r,2128r:28)[2304r,2320r:14)[2704r,2720r:13)[2848r,2864r:12)[3024r,3040r:27)[3136r,3152r:11)[3392r,3424r:20)[3536r,3552r:1)[3744r,3760r:10)[3856r,3872r:9)[4080r,4096r:8)[4384r,4400r:7)[4592r,4608r:6)[5440r,5568r:26)[5744r,5760r:5)[5904r,5920r:25)[6048r,6080r:24)[6320r,6336r:4)[6576r,6624r:23)[6736r,6752r:3)[6960r,7008r:22)[7120r,7136r:2)[7344r,7392r:21)  0@0B-phi 1@3536r 2@7120r 3@6736r 4@6320r 5@5744r 6@4592r 7@4384r 8@4080r 9@3856r 10@3744r 11@3136r 12@2848r 13@2704r 14@2304r 15@1232r 16@1024r 17@896r 18@768r 19@576r 20@3392r 21@7344r 22@6960r 23@6576r 24@6048r 25@5904r 26@5440r 27@3024r 28@2096r 29@1920r 30@1744r 31@400r 32@176r
W1 [0B,16r:0)[192r,208r:5)[1936r,1968r:4)[2112r,2128r:3)[3408r,3424r:1)[5472r,5568r:2)  0@0B-phi 1@3408r 2@5472r 3@2112r 4@1936r 5@192r
W4 [5528r,5568r:0)  0@5528r
%0 [32r,80r:0)  0@32r weight:0.000000e+00
%1 [16r,96r:0)  0@16r weight:0.000000e+00
%5 [288r,320r:0)  0@288r weight:0.000000e+00
%6 [368r,464r:0)  0@368r weight:0.000000e+00
%8 [496r,512r:0)  0@496r weight:0.000000e+00
%10 [672r,688r:0)  0@672r weight:0.000000e+00
%14 [1136r,1152r:0)  0@1136r weight:0.000000e+00
%17 [1456r,1472r:0)  0@1456r weight:0.000000e+00
%29 [2208r,2224r:0)  0@2208r weight:0.000000e+00
%31 [2432r,2472r:0)  0@2432r weight:0.000000e+00
%32 [2472r,2496r:0)  0@2472r weight:0.000000e+00
%33 [2464r,2480r:0)  0@2464r weight:0.000000e+00
%34 [2480r,2512r:0)  0@2480r weight:0.000000e+00
%35 [2608r,2624r:0)  0@2608r weight:0.000000e+00
%37 [2856r,3232r:0)  0@2856r weight:0.000000e+00
%38 [2944r,2976r:0)  0@2944r weight:0.000000e+00
%42 [3280r,3296r:0)  0@3280r weight:0.000000e+00
%45 [3988r,3992r:0)  0@3988r weight:0.000000e+00
%46 [3984r,4000r:0)  0@3984r weight:0.000000e+00
%48 [4288r,4304r:0)  0@4288r weight:0.000000e+00
%50 [4496r,4512r:0)  0@4496r weight:0.000000e+00
%52 [4704r,4720r:0)  0@4704r weight:0.000000e+00
%53 [4720r,4736r:0)  0@4720r weight:0.000000e+00
%55 [4800r,4832r:0)  0@4800r weight:0.000000e+00
%57 [4864r,5616r:0)  0@4864r weight:0.000000e+00
%58 [4880r,4896r:0)  0@4880r weight:0.000000e+00
%59 [4896r,4996r:0)  0@4896r weight:0.000000e+00
%60 [4996r,5000r:0)  0@4996r weight:0.000000e+00
%61 [4928r,4944r:0)  0@4928r weight:0.000000e+00
%62 [4944r,5000r:0)  0@4944r weight:0.000000e+00
%63 [5000r,5616r:0)  0@5000r weight:0.000000e+00
%64 [4976r,4992r:0)  0@4976r weight:0.000000e+00
%65 [4992r,5616r:0)  0@4992r weight:0.000000e+00
%66 [5024r,5304r:0)  0@5024r weight:0.000000e+00
%68 [5072r,5300r:0)  0@5072r weight:0.000000e+00
%69 [5104r,5320r:0)  0@5104r weight:0.000000e+00
%70 [5136r,5316r:0)  0@5136r weight:0.000000e+00
%71 [5168r,5448r:0)  0@5168r weight:0.000000e+00
%72 [5200r,5444r:0)  0@5200r weight:0.000000e+00
%73 [5232r,5464r:0)  0@5232r weight:0.000000e+00
%74 [5264r,5456r:0)  0@5264r weight:0.000000e+00
%75 [5312r,5524r:0)  0@5312r weight:0.000000e+00
%82 [5648r,5664r:0)  0@5648r weight:0.000000e+00
%84 [5840r,5856r:0)  0@5840r weight:0.000000e+00
%87 [6000r,6128r:0)  0@6000r weight:0.000000e+00
%90 [6160r,6176r:0)  0@6160r weight:0.000000e+00
%91 [6240r,6256r:0)  0@6240r weight:0.000000e+00
%93 [6416r,6672r:0)  0@6416r weight:0.000000e+00
%94 [6448r,6504r:0)  0@6448r weight:0.000000e+00
%95 [6504r,6512r:0)  0@6504r weight:0.000000e+00
%96 [6480r,6496r:0)  0@6480r weight:0.000000e+00
%97 [6496r,7280r:0)  0@6496r weight:0.000000e+00
%98 [6512r,6672r:0)  0@6512r weight:0.000000e+00
%102 [6832r,7056r:0)  0@6832r weight:0.000000e+00
%103 [6864r,6880r:0)  0@6864r weight:0.000000e+00
%104 [6880r,6896r:0)  0@6880r weight:0.000000e+00
%105 [6896r,7056r:0)  0@6896r weight:0.000000e+00
%109 [7216r,7440r:0)  0@7216r weight:0.000000e+00
%110 [7248r,7264r:0)  0@7248r weight:0.000000e+00
%111 [7264r,7280r:0)  0@7264r weight:0.000000e+00
%112 [7280r,7440r:0)  0@7280r weight:0.000000e+00
%116 [3360r,3472r:0)  0@3360r weight:0.000000e+00
%119 [3504r,3600r:0)  0@3504r weight:0.000000e+00
%120 [3632r,3648r:0)  0@3632r weight:0.000000e+00
%121 [3648r,3664r:0)  0@3648r weight:0.000000e+00
%122 [1536r,1648r:0)  0@1536r weight:0.000000e+00
%124 [1376r,1696B:0)  0@1376r weight:0.000000e+00
%125 [1568r,1656r:0)  0@1568r weight:0.000000e+00
%126 [1584r,1624r:0)  0@1584r weight:0.000000e+00
%127 [1392r,1696B:0)  0@1392r weight:0.000000e+00
%128 [1408r,1696B:0)  0@1408r weight:0.000000e+00
%129 [1616r,1656r:0)  0@1616r weight:0.000000e+00
%130 [1424r,1696B:0)  0@1424r weight:0.000000e+00
%131 [1648r,1664r:0)  0@1648r weight:0.000000e+00
RegMasks: 208r 416r 592r 784r 912r 1040r 1248r 1760r 1968r 2128r 2320r 2528r 2720r 2864r 3040r 3152r 3424r 3552r 3760r 3872r 4096r 4208r 4400r 4608r 5568r 5760r 5920r 6080r 6336r 6624r 6752r 7008r 7136r 7392r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 0x41B2B9B0A1000000, align=8
  cp#1: 0x41D2309CE5400000, align=8
  cp#2: 0x41B4000000000000, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
Function Live Ins: $w0 in %0, $x1 in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $w0, $x1
16B	  %1:gpr64 = COPY $x1
32B	  %0:gpr32 = COPY $w0
64B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
80B	  STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
96B	  STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
112B	  STRWui $wzr, %stack.5.timer_on, 0, debug-location !604 :: (store 4 into %ir.timer_on); is.c:572:14
128B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !605; is.c:573:15
176B	  $x0 = MOVaddr target-flags(aarch64-page) @is__str_2_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @is__str_2_timer_flag, debug-location !605; is.c:573:15
192B	  $x1 = MOVaddr target-flags(aarch64-page) @is__str_3_r_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_3_r_, debug-location !605; is.c:573:15
208B	  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !605; is.c:573:15
224B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !605; is.c:573:15
240B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !607; is.c:573:13
256B	  PCN_STACKMAP 0, 0, 0, %stack.7.fp, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !607 :: (load 8 from %stack.7.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:573:13
272B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !607; is.c:573:13
288B	  %5:gpr64 = COPY killed $x8, debug-location !605; is.c:573:15
304B	  STRXui %5:gpr64, %stack.7.fp, 0, debug-location !607 :: (store 8 into %ir.fp); is.c:573:13
320B	  CBZX %5:gpr64, %bb.2, debug-location !609; is.c:573:9
336B	  B %bb.1, debug-location !609; is.c:573:9

352B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

368B	  %6:gpr64 = LDRXui %stack.7.fp, 0, debug-location !610 :: (dereferenceable load 8 from %ir.fp); is.c:574:16
384B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !612; is.c:574:9
400B	  $x0 = COPY %6:gpr64, debug-location !612; is.c:574:9
416B	  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !612; is.c:574:9
432B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !612; is.c:574:9
448B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !613; is.c:575:18
464B	  PCN_STACKMAP 1, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %6:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !613 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:575:18
480B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !613; is.c:575:18
496B	  %8:gpr32 = MOVi32imm 1
512B	  STRWui %8:gpr32, %stack.5.timer_on, 0, debug-location !613 :: (store 4 into %ir.timer_on); is.c:575:18

528B	bb.2.if.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

544B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !615; is.c:577:5
576B	  $w0 = COPY $wzr, debug-location !615; is.c:577:5
592B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !615; is.c:577:5
608B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !615; is.c:577:5
624B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !616; is.c:578:9
640B	  PCN_STACKMAP 2, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !616 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:578:9
656B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !616; is.c:578:9
672B	  %10:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !616 :: (dereferenceable load 4 from %ir.timer_on); is.c:578:9
688B	  CBZW %10:gpr32, %bb.4, debug-location !618; is.c:578:9
704B	  B %bb.3, debug-location !618; is.c:578:9

720B	bb.3.if.then2:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

736B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !619; is.c:579:9
768B	  $w0 = MOVi32imm 1, debug-location !619; is.c:579:9
784B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !619; is.c:579:9
800B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !619; is.c:579:9
816B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !621; is.c:580:9
832B	  PCN_STACKMAP 3, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !621 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:580:9
848B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !621; is.c:580:9
864B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !621; is.c:580:9
896B	  $w0 = MOVi32imm 2, debug-location !621; is.c:580:9
912B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !621; is.c:580:9
928B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !621; is.c:580:9
944B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !622; is.c:581:9
960B	  PCN_STACKMAP 4, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !622 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:581:9
976B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !622; is.c:581:9
992B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !622; is.c:581:9
1024B	  $w0 = MOVi32imm 3, debug-location !622; is.c:581:9
1040B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !622; is.c:581:9
1056B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !622; is.c:581:9
1072B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !623; is.c:582:5
1088B	  PCN_STACKMAP 5, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !623 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:582:5
1104B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !623; is.c:582:5

1120B	bb.4.if.end3:
	; predecessors: %bb.2, %bb.3
	  successors: %bb.5(0x50000000), %bb.6(0x30000000); %bb.5(62.50%), %bb.6(37.50%)

1136B	  %14:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !624 :: (dereferenceable load 4 from %ir.timer_on); is.c:584:9
1152B	  CBZW %14:gpr32, %bb.6, debug-location !626; is.c:584:9
1168B	  B %bb.5, debug-location !626; is.c:584:9

1184B	bb.5.if.then5:
	; predecessors: %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1200B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !627; is.c:585:9
1232B	  $w0 = MOVi32imm 3, debug-location !627; is.c:585:9
1248B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !627; is.c:585:9
1264B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !627; is.c:585:9
1280B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !627; is.c:585:9
1296B	  PCN_STACKMAP 6, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !627 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:585:9
1312B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !627; is.c:585:9

1328B	bb.6.if.end6:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1360B	  STRWui $wzr, %stack.3.i, 0, debug-location !628 :: (store 4 into %ir.i); is.c:588:12
1376B	  %124:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array
1392B	  %127:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
1408B	  %128:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array
1424B	  %130:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array

1440B	bb.7.for.cond:
	; predecessors: %bb.6, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

1456B	  %17:gpr32common = LDRWui %stack.3.i, 0, debug-location !631 :: (dereferenceable load 4 from %ir.i); is.c:588:17
1472B	  dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv, debug-location !634; is.c:588:5
1488B	  Bcc 12, %bb.9, implicit killed $nzcv, debug-location !634; is.c:588:5
1504B	  B %bb.8, debug-location !634; is.c:588:5

1520B	bb.8.for.body:
	; predecessors: %bb.7
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1536B	  %122:gpr64common = LDRSWui %stack.3.i, 0, debug-location !635 :: (dereferenceable load 4 from %ir.i); is.c:603:54
1568B	  %125:gpr64 = UBFMXri %122:gpr64common, 62, 61, debug-location !641; is.c:604:34
1584B	  %126:gpr32 = LDRWroX %124:gpr64common, %125:gpr64, 0, 0, debug-location !636 :: (load 4 from %ir.arrayidx); is.c:603:35
1616B	  %129:gpr32 = LDRWroX %128:gpr64common, %125:gpr64, 0, 0, debug-location !641 :: (load 4 from %ir.arrayidx11); is.c:604:34
1624B	  STRWroX %126:gpr32, %127:gpr64common, %125:gpr64, 0, 0, debug-location !639 :: (store 4 into %ir.arrayidx9); is.c:603:33
1648B	  %131:gpr32common = nsw ADDWri %122.sub_32:gpr64common, 1, 0, debug-location !645; is.c:588:39
1656B	  STRWroX %129:gpr32, %130:gpr64common, %125:gpr64, 0, 0, debug-location !644 :: (store 4 into %ir.arrayidx13); is.c:604:32
1664B	  STRWui %131:gpr32common, %stack.3.i, 0, debug-location !645 :: (store 4 into %ir.i); is.c:588:39
1680B	  B %bb.7, debug-location !646; is.c:588:5

1696B	bb.9.for.end:
	; predecessors: %bb.7
	  successors: %bb.10(0x50000000), %bb.11(0x30000000); %bb.10(62.50%), %bb.11(37.50%)

1712B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !649; is.c:617:5
1744B	  $x0 = MOVaddr target-flags(aarch64-page) @is__str_4____NAS_Par, target-flags(aarch64-pageoff, aarch64-nc) @is__str_4____NAS_Par, debug-location !649; is.c:617:5
1760B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !649; is.c:617:5
1776B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !649; is.c:617:5
1792B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !650; is.c:618:5
1808B	  PCN_STACKMAP 7, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !650 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:618:5
1824B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !650; is.c:618:5
1840B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !650; is.c:618:5
1920B	  $x0 = MOVaddr target-flags(aarch64-page) @is__str_5__Size____l, target-flags(aarch64-pageoff, aarch64-nc) @is__str_5__Size____l, debug-location !650; is.c:618:5
1936B	  dead $w1 = MOVi32imm 33554432, implicit-def $x1, debug-location !650; is.c:618:5
1952B	  $w2 = MOVi32imm 66, debug-location !650; is.c:618:5
1968B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp, implicit-def dead $w8, debug-location !650; is.c:618:5
1984B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !650; is.c:618:5
2000B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !651; is.c:619:5
2016B	  PCN_STACKMAP 8, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !651 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:619:5
2032B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !651; is.c:619:5
2048B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !651; is.c:619:5
2096B	  $x0 = MOVaddr target-flags(aarch64-page) @is__str_6__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @is__str_6__Iteration, debug-location !651; is.c:619:5
2112B	  $w1 = MOVi32imm 10, debug-location !651; is.c:619:5
2128B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !651; is.c:619:5
2144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !651; is.c:619:5
2160B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !652; is.c:621:9
2176B	  PCN_STACKMAP 9, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !652 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:621:9
2192B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !652; is.c:621:9
2208B	  %29:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !652 :: (dereferenceable load 4 from %ir.timer_on); is.c:621:9
2224B	  CBZW %29:gpr32, %bb.11, debug-location !654; is.c:621:9
2240B	  B %bb.10, debug-location !654; is.c:621:9

2256B	bb.10.if.then18:
	; predecessors: %bb.9
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

2272B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !655; is.c:622:9
2304B	  $w0 = MOVi32imm 1, debug-location !655; is.c:622:9
2320B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !655; is.c:622:9
2336B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !655; is.c:622:9
2352B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !655; is.c:622:9
2368B	  PCN_STACKMAP 10, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !655 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:622:9
2384B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !655; is.c:622:9

2400B	bb.11.if.end19:
	; predecessors: %bb.9, %bb.10
	  successors: %bb.12(0x50000000), %bb.13(0x30000000); %bb.12(62.50%), %bb.13(37.50%)

2416B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !656; is.c:625:5
2432B	  %31:gpr64temp = ADRP target-flags(aarch64-page) %const.0
2464B	  %33:gpr64temp = ADRP target-flags(aarch64-page) %const.1
2472B	  %32:fpr64 = LDRDui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
2480B	  %34:fpr64 = LDRDui %33:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
2496B	  $d0 = COPY %32:fpr64, debug-location !656; is.c:625:5
2512B	  $d1 = COPY %34:fpr64, debug-location !656; is.c:625:5
2528B	  BL @create_seq, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit killed $d1, implicit-def $sp, debug-location !656; is.c:625:5
2544B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !656; is.c:625:5
2560B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !657; is.c:627:9
2576B	  PCN_STACKMAP 11, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !657 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:627:9
2592B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !657; is.c:627:9
2608B	  %35:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !657 :: (dereferenceable load 4 from %ir.timer_on); is.c:627:9
2624B	  CBZW %35:gpr32, %bb.13, debug-location !659; is.c:627:9
2640B	  B %bb.12, debug-location !659; is.c:627:9

2656B	bb.12.if.then21:
	; predecessors: %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

2672B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !660; is.c:628:9
2704B	  $w0 = MOVi32imm 1, debug-location !660; is.c:628:9
2720B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !660; is.c:628:9
2736B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !660; is.c:628:9
2752B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !660; is.c:628:9
2768B	  PCN_STACKMAP 12, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !660 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:628:9
2784B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !660; is.c:628:9

2800B	bb.13.if.end22:
	; predecessors: %bb.11, %bb.12
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

2816B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !661; is.c:632:5
2848B	  $w0 = MOVi32imm 1, debug-location !661; is.c:632:5
2856B	  %37:gpr32 = MOVi32imm 1
2864B	  BL @rank, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !661; is.c:632:5
2880B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !661; is.c:632:5
2896B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !662; is.c:635:25
2912B	  PCN_STACKMAP 13, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !662 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:635:25
2928B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !662; is.c:635:25
2944B	  %38:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !662; is.c:635:25
2976B	  STRWui $wzr, %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !662 :: (store 4 into @passed_verification); is.c:635:25
2992B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !663; is.c:638:9
3024B	  $x0 = MOVaddr target-flags(aarch64-page) @is__str_7_____iterat, target-flags(aarch64-pageoff, aarch64-nc) @is__str_7_____iterat, debug-location !663; is.c:638:9
3040B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !663; is.c:638:9
3056B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !663; is.c:638:9
3072B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !665; is.c:641:5
3088B	  PCN_STACKMAP 14, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !665 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:641:5
3104B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !665; is.c:641:5
3120B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !665; is.c:641:5
3136B	  $w0 = COPY $wzr, debug-location !665; is.c:641:5
3152B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !665; is.c:641:5
3168B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !665; is.c:641:5
3184B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !666; is.c:644:5
3200B	  PCN_STACKMAP 15, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !666 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:644:5
3216B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !666; is.c:644:5
3232B	  STRWui %37:gpr32, %stack.4.iteration, 0, debug-location !667 :: (store 4 into %ir.iteration); is.c:646:20

3264B	bb.14.for.cond28:
	; predecessors: %bb.13, %bb.15
	  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

3280B	  %42:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !670 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
3296B	  dead $wzr = SUBSWri %42:gpr32common, 10, 0, implicit-def $nzcv, debug-location !673; is.c:646:5
3312B	  Bcc 12, %bb.16, implicit killed $nzcv, debug-location !673; is.c:646:5
3328B	  B %bb.15, debug-location !673; is.c:646:5

3344B	bb.15.for.body30:
	; predecessors: %bb.14
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3360B	  %116:gpr32 = LDRWui %stack.4.iteration, 0, debug-location !674 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
3376B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !677; is.c:648:13
3392B	  $x0 = MOVaddr target-flags(aarch64-page) @is__str_8__________d, target-flags(aarch64-pageoff, aarch64-nc) @is__str_8__________d, debug-location !677; is.c:648:13
3408B	  $w1 = COPY %116:gpr32, debug-location !677; is.c:648:13
3424B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !677; is.c:648:13
3440B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !677; is.c:648:13
3456B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !678; is.c:650:14
3472B	  PCN_STACKMAP 16, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %116:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !678 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:650:14
3488B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !678; is.c:650:14
3504B	  %119:gpr32 = LDRWui %stack.4.iteration, 0, debug-location !678 :: (dereferenceable load 4 from %ir.iteration); is.c:650:14
3520B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !679; is.c:650:9
3536B	  $w0 = COPY %119:gpr32, debug-location !679; is.c:650:9
3552B	  BL @rank, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !679; is.c:650:9
3568B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !679; is.c:650:9
3584B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !680; is.c:652:5
3600B	  PCN_STACKMAP 17, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %119:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !680 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:652:5
3616B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !680; is.c:652:5
3632B	  %120:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !681 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
3648B	  %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !681; is.c:646:63
3664B	  STRWui %121:gpr32common, %stack.4.iteration, 0, debug-location !681 :: (store 4 into %ir.iteration); is.c:646:63
3680B	  B %bb.14, debug-location !682; is.c:646:5

3696B	bb.16.do.end38:
	; predecessors: %bb.14
	  successors: %bb.17(0x50000000), %bb.18(0x30000000); %bb.17(62.50%), %bb.18(37.50%)

3712B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !685; is.c:657:5
3744B	  $w0 = COPY $wzr, debug-location !685; is.c:657:5
3760B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !685; is.c:657:5
3776B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !685; is.c:657:5
3792B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !686; is.c:658:19
3808B	  PCN_STACKMAP 18, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !686 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:658:19
3824B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !686; is.c:658:19
3840B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !686; is.c:658:19
3856B	  $w0 = COPY $wzr, debug-location !686; is.c:658:19
3872B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !686; is.c:658:19
3888B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !686; is.c:658:19
3904B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !687; is.c:658:17
3920B	  PCN_STACKMAP 19, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !687 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:658:17
3936B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !687; is.c:658:17
3984B	  %46:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !688 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
3988B	  %45:fpr64 = COPY $d0, debug-location !686; is.c:658:19
3992B	  STRDui %45:fpr64, %stack.6.timecounter, 0, debug-location !687 :: (store 8 into %ir.timecounter); is.c:658:17
4000B	  CBZW %46:gpr32, %bb.18, debug-location !690; is.c:662:9
4016B	  B %bb.17, debug-location !690; is.c:662:9

4032B	bb.17.if.then41:
	; predecessors: %bb.16
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

4048B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !691; is.c:663:9
4080B	  $w0 = MOVi32imm 2, debug-location !691; is.c:663:9
4096B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !691; is.c:663:9
4112B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !691; is.c:663:9
4128B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !691; is.c:663:9
4144B	  PCN_STACKMAP 20, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !691 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:663:9
4160B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !691; is.c:663:9

4176B	bb.18.if.end42:
	; predecessors: %bb.16, %bb.17
	  successors: %bb.19(0x50000000), %bb.20(0x30000000); %bb.19(62.50%), %bb.20(37.50%)

4192B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !692; is.c:664:5
4208B	  BL @full_verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !692; is.c:664:5
4224B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !692; is.c:664:5
4240B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !693; is.c:665:9
4256B	  PCN_STACKMAP 21, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !693 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:665:9
4272B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !693; is.c:665:9
4288B	  %48:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !693 :: (dereferenceable load 4 from %ir.timer_on); is.c:665:9
4304B	  CBZW %48:gpr32, %bb.20, debug-location !695; is.c:665:9
4320B	  B %bb.19, debug-location !695; is.c:665:9

4336B	bb.19.if.then44:
	; predecessors: %bb.18
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

4352B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !696; is.c:666:9
4384B	  $w0 = MOVi32imm 2, debug-location !696; is.c:666:9
4400B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !696; is.c:666:9
4416B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !696; is.c:666:9
4432B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !696; is.c:666:9
4448B	  PCN_STACKMAP 22, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !696 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:666:9
4464B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !696; is.c:666:9

4480B	bb.20.if.end45:
	; predecessors: %bb.18, %bb.19
	  successors: %bb.21(0x50000000), %bb.22(0x30000000); %bb.21(62.50%), %bb.22(37.50%)

4496B	  %50:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !697 :: (dereferenceable load 4 from %ir.timer_on); is.c:668:9
4512B	  CBZW %50:gpr32, %bb.22, debug-location !699; is.c:668:9
4528B	  B %bb.21, debug-location !699; is.c:668:9

4544B	bb.21.if.then47:
	; predecessors: %bb.20
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

4560B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !700; is.c:669:9
4592B	  $w0 = MOVi32imm 3, debug-location !700; is.c:669:9
4608B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !700; is.c:669:9
4624B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !700; is.c:669:9
4640B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !700; is.c:669:9
4656B	  PCN_STACKMAP 23, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !700 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:669:9
4672B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !700; is.c:669:9

4688B	bb.22.if.end48:
	; predecessors: %bb.20, %bb.21
	  successors: %bb.23(0x40000000), %bb.24(0x40000000); %bb.23(50.00%), %bb.24(50.00%)

4704B	  %52:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !701; is.c:672:9
4720B	  %53:gpr32common = LDRWui %52:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !701 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
4736B	  dead $wzr = SUBSWri %53:gpr32common, 51, 0, implicit-def $nzcv, debug-location !704; is.c:672:9
4752B	  Bcc 0, %bb.24, implicit killed $nzcv, debug-location !704; is.c:672:9
4768B	  B %bb.23, debug-location !704; is.c:672:9

4784B	bb.23.if.then50:
	; predecessors: %bb.22
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

4800B	  %55:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !705; is.c:673:29
4832B	  STRWui $wzr, %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !705 :: (store 4 into @passed_verification); is.c:673:29

4848B	bb.24.if.end51:
	; predecessors: %bb.22, %bb.23
	  successors: %bb.25(0x50000000), %bb.28(0x30000000); %bb.25(62.50%), %bb.28(37.50%)

4864B	  %57:fpr64 = LDRDui %stack.6.timecounter, 0, debug-location !707 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
4880B	  %58:gpr64temp = ADRP target-flags(aarch64-page) %const.2
4896B	  %59:fpr64 = LDRDui %58:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
4928B	  %61:gpr64temp = ADRP target-flags(aarch64-page) %const.3
4944B	  %62:fpr64 = LDRDui %61:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
4976B	  %64:gpr64temp = ADRP target-flags(aarch64-page) @passed_verification, debug-location !711; is.c:677:24
4992B	  %65:gpr32 = LDRWui %64:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !711 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
4996B	  %60:fpr64 = FDIVDrr %59:fpr64, %57:fpr64, debug-location !709; is.c:676:49
5000B	  %63:fpr64 = FDIVDrr %60:fpr64, %62:fpr64, debug-location !710; is.c:676:63
5008B	  ADJCALLSTACKDOWN 80, 0, implicit-def dead $sp, implicit $sp, debug-location !712; is.c:674:5
5024B	  %66:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_18__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @is__str_18__O3__mcmod, debug-location !712; is.c:674:5
5072B	  %68:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_17__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_17__g__Wall__, debug-location !712; is.c:674:5
5104B	  %69:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_16__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @is__str_16__I___commo, debug-location !712; is.c:674:5
5136B	  %70:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_15__lm_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_15__lm_, debug-location !712; is.c:674:5
5168B	  %71:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_14___CC__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_14___CC__, debug-location !712; is.c:674:5
5200B	  %72:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_13_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_13_gcc_, debug-location !712; is.c:674:5
5232B	  %73:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_12_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @is__str_12_03_Nov_201, debug-location !712; is.c:674:5
5264B	  %74:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_11_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_11_3_3_1_, debug-location !712; is.c:674:5
5296B	  STRWui %65:gpr32, $sp, 2, debug-location !712 :: (store 4 into stack + 8); is.c:674:5
5300B	  STRXui %68:gpr64, $sp, 8, debug-location !712 :: (store 8 into stack + 64); is.c:674:5
5304B	  STRXui %66:gpr64, $sp, 9, debug-location !712 :: (store 8 into stack + 72); is.c:674:5
5312B	  %75:gpr64 = MOVaddr target-flags(aarch64-page) @is__str_10_keys_ranke, target-flags(aarch64-pageoff, aarch64-nc) @is__str_10_keys_ranke, debug-location !712; is.c:674:5
5316B	  STRXui %70:gpr64, $sp, 6, debug-location !712 :: (store 8 into stack + 48); is.c:674:5
5320B	  STRXui %69:gpr64, $sp, 7, debug-location !712 :: (store 8 into stack + 56); is.c:674:5
5440B	  $x0 = MOVaddr target-flags(aarch64-page) @is__str_9_IS_, target-flags(aarch64-pageoff, aarch64-nc) @is__str_9_IS_, debug-location !712; is.c:674:5
5444B	  STRXui %72:gpr64, $sp, 4, debug-location !712 :: (store 8 into stack + 32); is.c:674:5
5448B	  STRXui %71:gpr64, $sp, 5, debug-location !712 :: (store 8 into stack + 40); is.c:674:5
5456B	  STRXui %74:gpr64, $sp, 2, debug-location !712 :: (store 8 into stack + 16); is.c:674:5
5464B	  STRXui %73:gpr64, $sp, 3, debug-location !712 :: (store 8 into stack + 24); is.c:674:5
5472B	  $w1 = MOVi32imm 66, debug-location !712; is.c:674:5
5480B	  $w2 = MOVi32imm 524288, debug-location !712; is.c:674:5
5488B	  $w3 = MOVi32imm 64, debug-location !712; is.c:674:5
5520B	  $w5 = MOVi32imm 10, debug-location !712; is.c:674:5
5524B	  STRXui %75:gpr64, $sp, 0, debug-location !712 :: (store 8 into stack); is.c:674:5
5528B	  $w4 = COPY $wzr, debug-location !712; is.c:674:5
5536B	  $d0 = COPY %57:fpr64, debug-location !712; is.c:674:5
5552B	  $d1 = COPY %63:fpr64, debug-location !712; is.c:674:5
5568B	  BL @c_print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp, debug-location !712; is.c:674:5
5584B	  ADJCALLSTACKUP 80, 0, implicit-def $sp, implicit $sp, debug-location !712; is.c:674:5
5600B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !713; is.c:681:9
5616B	  PCN_STACKMAP 24, 0, %63:fpr64, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %57:fpr64, %65:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !713 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:681:9
5632B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !713; is.c:681:9
5648B	  %82:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !713 :: (dereferenceable load 4 from %ir.timer_on); is.c:681:9
5664B	  CBZW %82:gpr32, %bb.28, debug-location !715; is.c:681:9
5680B	  B %bb.25, debug-location !715; is.c:681:9

5696B	bb.25.if.then54:
	; predecessors: %bb.24
	  successors: %bb.26(0x50000000), %bb.27(0x30000000); %bb.26(62.50%), %bb.27(37.50%)

5712B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !721; is.c:684:19
5744B	  $w0 = MOVi32imm 3, debug-location !721; is.c:684:19
5760B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !721; is.c:684:19
5776B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !721; is.c:684:19
5792B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !722; is.c:684:17
5808B	  PCN_STACKMAP 25, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !722 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:684:17
5824B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !722; is.c:684:17
5840B	  %84:fpr64 = COPY $d0, debug-location !721; is.c:684:19
5856B	  STRDui %84:fpr64, %stack.8.t_total, 0, debug-location !722 :: (store 8 into %ir.t_total); is.c:684:17
5872B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !723; is.c:685:9
5904B	  $x0 = MOVaddr target-flags(aarch64-page) @is__str_19__Additiona, target-flags(aarch64-pageoff, aarch64-nc) @is__str_19__Additiona, debug-location !723; is.c:685:9
5920B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !723; is.c:685:9
5936B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !723; is.c:685:9
5952B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !724; is.c:686:45
5968B	  PCN_STACKMAP 26, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !724 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:686:45
5984B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !724; is.c:686:45
6000B	  %87:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !724 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
6016B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !725; is.c:686:9
6048B	  $x0 = MOVaddr target-flags(aarch64-page) @is__str_20__Total_exe, target-flags(aarch64-pageoff, aarch64-nc) @is__str_20__Total_exe, debug-location !725; is.c:686:9
6064B	  $d0 = COPY %87:fpr64, debug-location !725; is.c:686:9
6080B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !725; is.c:686:9
6096B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !725; is.c:686:9
6112B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !726; is.c:687:13
6128B	  PCN_STACKMAP 27, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, %87:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !726 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:687:13
6144B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !726; is.c:687:13
6160B	  %90:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
6176B	  FCMPDri %90:fpr64, implicit-def $nzcv, debug-location !729; is.c:687:13
6192B	  Bcc 1, %bb.27, implicit killed $nzcv, debug-location !729; is.c:687:13
6208B	  B %bb.26, debug-location !729; is.c:687:13

6224B	bb.26.if.then59:
	; predecessors: %bb.25
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

6240B	  %91:gpr64 = MOVi64imm 4607182418800017408
6256B	  STRXui %91:gpr64, %stack.8.t_total, 0, debug-location !730 :: (store 8 into %ir.t_total); is.c:688:21

6272B	bb.27.if.end60:
	; predecessors: %bb.25, %bb.26
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

6288B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !732; is.c:689:23
6320B	  $w0 = MOVi32imm 1, debug-location !732; is.c:689:23
6336B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !732; is.c:689:23
6352B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !732; is.c:689:23
6368B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !733; is.c:689:21
6384B	  PCN_STACKMAP 28, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !733 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:689:21
6400B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !733; is.c:689:21
6416B	  %93:fpr64 = COPY $d0, debug-location !732; is.c:689:23
6448B	  %94:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !735 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
6480B	  %96:gpr64temp = ADRP target-flags(aarch64-page) %const.4
6496B	  %97:fpr64 = LDRDui %96:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
6500B	  STRDui %93:fpr64, %stack.6.timecounter, 0, debug-location !733 :: (store 8 into %ir.timecounter); is.c:689:21
6504B	  %95:fpr64 = FDIVDrr %93:fpr64, %94:fpr64, debug-location !736; is.c:690:33
6512B	  %98:fpr64 = FMULDrr %95:fpr64, %97:fpr64, debug-location !737; is.c:690:43
6528B	  STRDui %98:fpr64, %stack.9.t_percent, 0, debug-location !738 :: (store 8 into %ir.t_percent); is.c:690:19
6544B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !741; is.c:691:9
6576B	  $x0 = MOVaddr target-flags(aarch64-page) @is__str_21__Initializ, target-flags(aarch64-pageoff, aarch64-nc) @is__str_21__Initializ, debug-location !741; is.c:691:9
6592B	  $d0 = COPY %93:fpr64, debug-location !741; is.c:691:9
6608B	  $d1 = COPY %98:fpr64, debug-location !741; is.c:691:9
6624B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !741; is.c:691:9
6640B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !741; is.c:691:9
6656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !742; is.c:692:23
6672B	  PCN_STACKMAP 29, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, %93:fpr64, %98:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !742 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:692:23
6688B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !742; is.c:692:23
6704B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !742; is.c:692:23
6736B	  $w0 = COPY $wzr, debug-location !742; is.c:692:23
6752B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !742; is.c:692:23
6768B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !742; is.c:692:23
6784B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !743; is.c:692:21
6800B	  PCN_STACKMAP 30, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !743 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:692:21
6816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !743; is.c:692:21
6832B	  %102:fpr64 = COPY $d0, debug-location !742; is.c:692:23
6864B	  %103:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !745 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
6872B	  STRDui %102:fpr64, %stack.6.timecounter, 0, debug-location !743 :: (store 8 into %ir.timecounter); is.c:692:21
6880B	  %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64, debug-location !746; is.c:693:33
6896B	  %105:fpr64 = FMULDrr %104:fpr64, %97:fpr64, debug-location !747; is.c:693:43
6912B	  STRDui %105:fpr64, %stack.9.t_percent, 0, debug-location !748 :: (store 8 into %ir.t_percent); is.c:693:19
6928B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !751; is.c:694:9
6960B	  $x0 = MOVaddr target-flags(aarch64-page) @is__str_22__Benchmark, target-flags(aarch64-pageoff, aarch64-nc) @is__str_22__Benchmark, debug-location !751; is.c:694:9
6976B	  $d0 = COPY %102:fpr64, debug-location !751; is.c:694:9
6992B	  $d1 = COPY %105:fpr64, debug-location !751; is.c:694:9
7008B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !751; is.c:694:9
7024B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !751; is.c:694:9
7040B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !752; is.c:695:23
7056B	  PCN_STACKMAP 31, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, %102:fpr64, %105:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !752 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:695:23
7072B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !752; is.c:695:23
7088B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !752; is.c:695:23
7120B	  $w0 = MOVi32imm 2, debug-location !752; is.c:695:23
7136B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !752; is.c:695:23
7152B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !752; is.c:695:23
7168B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !753; is.c:695:21
7184B	  PCN_STACKMAP 32, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !753 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:695:21
7200B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !753; is.c:695:21
7216B	  %109:fpr64 = COPY $d0, debug-location !752; is.c:695:23
7248B	  %110:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !755 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
7256B	  STRDui %109:fpr64, %stack.6.timecounter, 0, debug-location !753 :: (store 8 into %ir.timecounter); is.c:695:21
7264B	  %111:fpr64 = FDIVDrr %109:fpr64, %110:fpr64, debug-location !756; is.c:696:33
7280B	  %112:fpr64 = FMULDrr %111:fpr64, %97:fpr64, debug-location !757; is.c:696:43
7296B	  STRDui %112:fpr64, %stack.9.t_percent, 0, debug-location !758 :: (store 8 into %ir.t_percent); is.c:696:19
7312B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !761; is.c:697:9
7344B	  $x0 = MOVaddr target-flags(aarch64-page) @is__str_23__Sorting__, target-flags(aarch64-pageoff, aarch64-nc) @is__str_23__Sorting__, debug-location !761; is.c:697:9
7360B	  $d0 = COPY %109:fpr64, debug-location !761; is.c:697:9
7376B	  $d1 = COPY %112:fpr64, debug-location !761; is.c:697:9
7392B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !761; is.c:697:9
7408B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !761; is.c:697:9
7424B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !762; is.c:698:5
7440B	  PCN_STACKMAP 33, 0, %109:fpr64, %112:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !762; is.c:698:5
7456B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !762; is.c:698:5

7472B	bb.28.do.end76:
	; predecessors: %bb.24, %bb.27

7504B	  $w8 = COPY $wzr, debug-location !763; is.c:703:5
7520B	  RET_ReallyLR implicit killed $w8, debug-location !763; is.c:703:5

# End machine code for function main.

Before post-MI-sched:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=4, align=4, at location [SP-40]
  fi#2: size=8, align=8, at location [SP-48]
  fi#3: size=4, align=4, at location [SP-52]
  fi#4: size=4, align=4, at location [SP-56]
  fi#5: size=4, align=4, at location [SP-60]
  fi#6: size=8, align=8, at location [SP-72]
  fi#7: size=8, align=8, at location [SP-80]
  fi#8: size=8, align=8, at location [SP-88]
  fi#9: size=8, align=8, at location [SP-96]
  fi#10: size=8, align=8, at location [SP-104]
  fi#11: size=8, align=8, at location [SP-112]
  fi#12: size=8, align=8, at location [SP-120]
  fi#13: dead
  fi#14: dead
  fi#15: dead
  fi#16: dead
  fi#17: dead
  fi#18: dead
  fi#19: dead
  fi#20: size=8, align=8, at location [SP-32]
  fi#21: size=8, align=8, at location [SP-8]
  fi#22: size=8, align=8, at location [SP-16]
  fi#23: size=8, align=8, at location [SP-24]
Constant Pool:
  cp#0: 0x41B2B9B0A1000000, align=8
  cp#1: 0x41D2309CE5400000, align=8
  cp#2: 0x41B4000000000000, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
Function Live Ins: $w0, $x1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1, $x19, $lr
  $sp = frame-setup SUBXri $sp, 208, 0
  frame-setup STRXui killed $x19, $sp, 23 :: (store 8 into %stack.23)
  frame-setup STPXi killed $fp, killed $lr, $sp, 24 :: (store 8 into %stack.22), (store 8 into %stack.21)
  $fp = frame-setup ADDXri $sp, 192, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  STPWi renamable $w0, $wzr, $fp, -6 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  STURXi killed renamable $x1, $fp, -32 :: (store 8 into %ir.argv.addr)
  STURWi $wzr, $fp, -44, debug-location !604 :: (store 4 into %ir.timer_on); is.c:572:14
  $x0 = ADRP target-flags(aarch64-page) @is__str_2_timer_flag, debug-location !605; is.c:573:15
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_2_timer_flag, 0, debug-location !605; is.c:573:15
  $x1 = ADRP target-flags(aarch64-page) @is__str_3_r_, debug-location !605; is.c:573:15
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @is__str_3_r_, 0, debug-location !605; is.c:573:15
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !605; is.c:573:15
  PCN_STACKMAP 0, 0, 0, $fp, -64, 0, $fp, -36, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !607 :: (load 8 from %stack.7.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:573:13
  STURXi renamable $x8, $fp, -64, debug-location !607 :: (store 8 into %ir.fp); is.c:573:13
  CBZX killed renamable $x8, %bb.2, debug-location !609; is.c:573:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  renamable $x19 = LDURXi $fp, -64, debug-location !610 :: (dereferenceable load 8 from %ir.fp); is.c:574:16
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !612; is.c:574:9
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !612; is.c:574:9
  PCN_STACKMAP 1, 0, 0, $fp, -36, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !613 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:575:18
  $w8 = MOVZWi 1, 0
  STURWi killed renamable $w8, $fp, -44, debug-location !613 :: (store 4 into %ir.timer_on); is.c:575:18

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !615; is.c:577:5
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !615; is.c:577:5
  PCN_STACKMAP 2, 0, 0, $fp, -36, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !616 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:578:9
  renamable $w8 = LDURWi $fp, -44, debug-location !616 :: (dereferenceable load 4 from %ir.timer_on); is.c:578:9
  CBZW killed renamable $w8, %bb.4, debug-location !618; is.c:578:9

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  $w0 = MOVZWi 1, 0, debug-location !619; is.c:579:9
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !619; is.c:579:9
  PCN_STACKMAP 3, 0, 0, $fp, -36, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !621 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:580:9
  $w0 = MOVZWi 2, 0, debug-location !621; is.c:580:9
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !621; is.c:580:9
  PCN_STACKMAP 4, 0, 0, $fp, -36, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !622 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:581:9
  $w0 = MOVZWi 3, 0, debug-location !622; is.c:581:9
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !622; is.c:581:9
  PCN_STACKMAP 5, 0, 0, $fp, -36, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !623 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:582:5

bb.4.if.end3:
; predecessors: %bb.2, %bb.3
  successors: %bb.5(0x50000000), %bb.6(0x30000000); %bb.5(62.50%), %bb.6(37.50%)

  renamable $w8 = LDURWi $fp, -44, debug-location !624 :: (dereferenceable load 4 from %ir.timer_on); is.c:584:9
  CBZW killed renamable $w8, %bb.6, debug-location !626; is.c:584:9

bb.5.if.then5:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $w0 = MOVZWi 3, 0, debug-location !627; is.c:585:9
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !627; is.c:585:9
  PCN_STACKMAP 6, 0, 0, $fp, -36, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !627 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:585:9

bb.6.if.end6:
; predecessors: %bb.4, %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  STURWi $wzr, $fp, -36, debug-location !628 :: (store 4 into %ir.i); is.c:588:12
  $x8 = ADRP target-flags(aarch64-page) @B_test_index_array
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array, 0
  $x16 = ADRP target-flags(aarch64-page) @test_index_array
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
  $x17 = ADRP target-flags(aarch64-page) @B_test_rank_array
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array, 0
  $x18 = ADRP target-flags(aarch64-page) @test_rank_array
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0

bb.7.for.cond:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)
  liveins: $x8, $x16, $x17, $x18
  renamable $w0 = LDURWi $fp, -36, debug-location !631 :: (dereferenceable load 4 from %ir.i); is.c:588:17
  dead $wzr = SUBSWri killed renamable $w0, 4, 0, implicit-def $nzcv, debug-location !634; is.c:588:5
  Bcc 12, %bb.9, implicit $nzcv, debug-location !634; is.c:588:5

bb.8.for.body:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x8, $x16, $x17, $x18
  renamable $x0 = LDURSWi $fp, -36, debug-location !635 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  renamable $x1 = UBFMXri renamable $x0, 62, 61, debug-location !641; is.c:604:34
  renamable $w2 = LDRWroX renamable $x8, renamable $x1, 0, 0, debug-location !636 :: (load 4 from %ir.arrayidx); is.c:603:35
  renamable $w3 = LDRWroX renamable $x17, renamable $x1, 0, 0, debug-location !641 :: (load 4 from %ir.arrayidx11); is.c:604:34
  STRWroX killed renamable $w2, renamable $x16, renamable $x1, 0, 0, debug-location !639 :: (store 4 into %ir.arrayidx9); is.c:603:33
  renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit killed $x0, debug-location !645; is.c:588:39
  STRWroX killed renamable $w3, renamable $x18, killed renamable $x1, 0, 0, debug-location !644 :: (store 4 into %ir.arrayidx13); is.c:604:32
  STURWi killed renamable $w0, $fp, -36, debug-location !645 :: (store 4 into %ir.i); is.c:588:39
  B %bb.7

bb.9.for.end:
; predecessors: %bb.7
  successors: %bb.10(0x50000000), %bb.11(0x30000000); %bb.10(62.50%), %bb.11(37.50%)

  $x0 = ADRP target-flags(aarch64-page) @is__str_4____NAS_Par, debug-location !649; is.c:617:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_4____NAS_Par, 0, debug-location !649; is.c:617:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !649; is.c:617:5
  PCN_STACKMAP 7, 0, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !650 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:618:5
  $x0 = ADRP target-flags(aarch64-page) @is__str_5__Size____l, debug-location !650; is.c:618:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_5__Size____l, 0, debug-location !650; is.c:618:5
  dead $w1 = MOVZWi 512, 16, implicit-def $x1, debug-location !650; is.c:618:5
  $w2 = MOVZWi 66, 0, debug-location !650; is.c:618:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp, implicit-def dead $w8, debug-location !650; is.c:618:5
  PCN_STACKMAP 8, 0, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !651 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:619:5
  $x0 = ADRP target-flags(aarch64-page) @is__str_6__Iteration, debug-location !651; is.c:619:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_6__Iteration, 0, debug-location !651; is.c:619:5
  $w1 = MOVZWi 10, 0, debug-location !651; is.c:619:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !651; is.c:619:5
  PCN_STACKMAP 9, 0, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !652 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:621:9
  renamable $w8 = LDURWi $fp, -44, debug-location !652 :: (dereferenceable load 4 from %ir.timer_on); is.c:621:9
  CBZW killed renamable $w8, %bb.11, debug-location !654; is.c:621:9

bb.10.if.then18:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  $w0 = MOVZWi 1, 0, debug-location !655; is.c:622:9
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !655; is.c:622:9
  PCN_STACKMAP 10, 0, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !655 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:622:9

bb.11.if.end19:
; predecessors: %bb.9, %bb.10
  successors: %bb.12(0x50000000), %bb.13(0x30000000); %bb.12(62.50%), %bb.13(37.50%)

  renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  renamable $d1 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  BL @create_seq, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, debug-location !656; is.c:625:5
  PCN_STACKMAP 11, 0, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !657 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:627:9
  renamable $w8 = LDURWi $fp, -44, debug-location !657 :: (dereferenceable load 4 from %ir.timer_on); is.c:627:9
  CBZW killed renamable $w8, %bb.13, debug-location !659; is.c:627:9

bb.12.if.then21:
; predecessors: %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  $w0 = MOVZWi 1, 0, debug-location !660; is.c:628:9
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !660; is.c:628:9
  PCN_STACKMAP 12, 0, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !660 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:628:9

bb.13.if.end22:
; predecessors: %bb.11, %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  $w0 = MOVZWi 1, 0, debug-location !661; is.c:632:5
  $w19 = MOVZWi 1, 0
  BL @rank, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !661; is.c:632:5
  PCN_STACKMAP 13, 0, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !662 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:635:25
  renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !662; is.c:635:25
  STRWui $wzr, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !662 :: (store 4 into @passed_verification); is.c:635:25
  $x0 = ADRP target-flags(aarch64-page) @is__str_7_____iterat, debug-location !663; is.c:638:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_7_____iterat, 0, debug-location !663; is.c:638:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !663; is.c:638:9
  PCN_STACKMAP 14, 0, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !665 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:641:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !665; is.c:641:5
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !665; is.c:641:5
  PCN_STACKMAP 15, 0, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !666 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:644:5
  STURWi killed renamable $w19, $fp, -40, debug-location !667 :: (store 4 into %ir.iteration); is.c:646:20

bb.14.for.cond28:
; predecessors: %bb.13, %bb.15
  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

  renamable $w8 = LDURWi $fp, -40, debug-location !670 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv, debug-location !673; is.c:646:5
  Bcc 12, %bb.16, implicit $nzcv, debug-location !673; is.c:646:5

bb.15.for.body30:
; predecessors: %bb.14
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  renamable $w19 = LDURWi $fp, -40, debug-location !674 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
  $x0 = ADRP target-flags(aarch64-page) @is__str_8__________d, debug-location !677; is.c:648:13
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_8__________d, 0, debug-location !677; is.c:648:13
  $w1 = ORRWrs $wzr, $w19, 0, debug-location !677; is.c:648:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !677; is.c:648:13
  PCN_STACKMAP 16, 0, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !678 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:650:14
  renamable $w19 = LDURWi $fp, -40, debug-location !678 :: (dereferenceable load 4 from %ir.iteration); is.c:650:14
  $w0 = ORRWrs $wzr, $w19, 0, debug-location !679; is.c:650:9
  BL @rank, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !679; is.c:650:9
  PCN_STACKMAP 17, 0, 0, $fp, -40, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !680 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:652:5
  renamable $w8 = LDURWi $fp, -40, debug-location !681 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !681; is.c:646:63
  STURWi killed renamable $w8, $fp, -40, debug-location !681 :: (store 4 into %ir.iteration); is.c:646:63
  B %bb.14

bb.16.do.end38:
; predecessors: %bb.14
  successors: %bb.17(0x50000000), %bb.18(0x30000000); %bb.17(62.50%), %bb.18(37.50%)

  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !685; is.c:657:5
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !685; is.c:657:5
  PCN_STACKMAP 18, 0, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !686 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:658:19
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !686; is.c:658:19
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !686; is.c:658:19
  PCN_STACKMAP 19, 0, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !687 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:658:17
  renamable $w8 = LDURWi $fp, -44, debug-location !688 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  STURDi killed renamable $d0, $fp, -56, debug-location !687 :: (store 8 into %ir.timecounter); is.c:658:17
  CBZW killed renamable $w8, %bb.18, debug-location !690; is.c:662:9

bb.17.if.then41:
; predecessors: %bb.16
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  $w0 = MOVZWi 2, 0, debug-location !691; is.c:663:9
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !691; is.c:663:9
  PCN_STACKMAP 20, 0, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !691 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:663:9

bb.18.if.end42:
; predecessors: %bb.16, %bb.17
  successors: %bb.19(0x50000000), %bb.20(0x30000000); %bb.19(62.50%), %bb.20(37.50%)

  BL @full_verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !692; is.c:664:5
  PCN_STACKMAP 21, 0, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !693 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:665:9
  renamable $w8 = LDURWi $fp, -44, debug-location !693 :: (dereferenceable load 4 from %ir.timer_on); is.c:665:9
  CBZW killed renamable $w8, %bb.20, debug-location !695; is.c:665:9

bb.19.if.then44:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  $w0 = MOVZWi 2, 0, debug-location !696; is.c:666:9
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !696; is.c:666:9
  PCN_STACKMAP 22, 0, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !696 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:666:9

bb.20.if.end45:
; predecessors: %bb.18, %bb.19
  successors: %bb.21(0x50000000), %bb.22(0x30000000); %bb.21(62.50%), %bb.22(37.50%)

  renamable $w8 = LDURWi $fp, -44, debug-location !697 :: (dereferenceable load 4 from %ir.timer_on); is.c:668:9
  CBZW killed renamable $w8, %bb.22, debug-location !699; is.c:668:9

bb.21.if.then47:
; predecessors: %bb.20
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  $w0 = MOVZWi 3, 0, debug-location !700; is.c:669:9
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !700; is.c:669:9
  PCN_STACKMAP 23, 0, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !700 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:669:9

bb.22.if.end48:
; predecessors: %bb.20, %bb.21
  successors: %bb.23(0x40000000), %bb.24(0x40000000); %bb.23(50.00%), %bb.24(50.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !701; is.c:672:9
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !701 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
  dead $wzr = SUBSWri killed renamable $w8, 51, 0, implicit-def $nzcv, debug-location !704; is.c:672:9
  Bcc 0, %bb.24, implicit $nzcv, debug-location !704; is.c:672:9

bb.23.if.then50:
; predecessors: %bb.22
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !705; is.c:673:29
  STRWui $wzr, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !705 :: (store 4 into @passed_verification); is.c:673:29

bb.24.if.end51:
; predecessors: %bb.22, %bb.23
  successors: %bb.25(0x50000000), %bb.28(0x30000000); %bb.25(62.50%), %bb.28(37.50%)

  renamable $d2 = LDURDi $fp, -56, debug-location !707 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !711; is.c:677:24
  renamable $w19 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !711 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  renamable $d0 = FDIVDrr killed renamable $d0, renamable $d2, debug-location !709; is.c:676:49
  STURDi renamable $d2, $fp, -88 :: (store 8 into %stack.10)
  renamable $d1 = FDIVDrr killed renamable $d0, killed renamable $d1, debug-location !710; is.c:676:63
  STRDui renamable $d1, $sp, 12 :: (store 8 into %stack.11)
  $x8 = ADRP target-flags(aarch64-page) @is__str_18__O3__mcmod, debug-location !712; is.c:674:5
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @is__str_18__O3__mcmod, 0, debug-location !712; is.c:674:5
  $x16 = ADRP target-flags(aarch64-page) @is__str_17__g__Wall__, debug-location !712; is.c:674:5
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @is__str_17__g__Wall__, 0, debug-location !712; is.c:674:5
  $x17 = ADRP target-flags(aarch64-page) @is__str_16__I___commo, debug-location !712; is.c:674:5
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @is__str_16__I___commo, 0, debug-location !712; is.c:674:5
  $x18 = ADRP target-flags(aarch64-page) @is__str_15__lm_, debug-location !712; is.c:674:5
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @is__str_15__lm_, 0, debug-location !712; is.c:674:5
  $x1 = ADRP target-flags(aarch64-page) @is__str_14___CC__, debug-location !712; is.c:674:5
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @is__str_14___CC__, 0, debug-location !712; is.c:674:5
  $x2 = ADRP target-flags(aarch64-page) @is__str_13_gcc_, debug-location !712; is.c:674:5
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @is__str_13_gcc_, 0, debug-location !712; is.c:674:5
  $x3 = ADRP target-flags(aarch64-page) @is__str_12_03_Nov_201, debug-location !712; is.c:674:5
  renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @is__str_12_03_Nov_201, 0, debug-location !712; is.c:674:5
  $x4 = ADRP target-flags(aarch64-page) @is__str_11_3_3_1_, debug-location !712; is.c:674:5
  renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @is__str_11_3_3_1_, 0, debug-location !712; is.c:674:5
  STRWui renamable $w19, $sp, 2, debug-location !712 :: (store 4 into stack + 8); is.c:674:5
  STPXi renamable $x16, renamable $x8, $sp, 8, debug-location !712 :: (store 8 into stack + 64), (store 8 into stack + 72); is.c:674:5
  $x8 = ADRP target-flags(aarch64-page) @is__str_10_keys_ranke, debug-location !712; is.c:674:5
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @is__str_10_keys_ranke, 0, debug-location !712; is.c:674:5
  STPXi renamable $x18, renamable $x17, $sp, 6, debug-location !712 :: (store 8 into stack + 48), (store 8 into stack + 56); is.c:674:5
  $x0 = ADRP target-flags(aarch64-page) @is__str_9_IS_, debug-location !712; is.c:674:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_9_IS_, 0, debug-location !712; is.c:674:5
  STPXi renamable $x2, renamable $x1, $sp, 4, debug-location !712 :: (store 8 into stack + 32), (store 8 into stack + 40); is.c:674:5
  STPXi renamable $x4, renamable $x3, $sp, 2, debug-location !712 :: (store 8 into stack + 16), (store 8 into stack + 24); is.c:674:5
  $w1 = MOVZWi 66, 0, debug-location !712; is.c:674:5
  $w2 = MOVZWi 8, 16, debug-location !712; is.c:674:5
  $w3 = MOVZWi 64, 0, debug-location !712; is.c:674:5
  $w5 = MOVZWi 10, 0, debug-location !712; is.c:674:5
  STRXui killed renamable $x8, $sp, 0, debug-location !712 :: (store 8 into stack); is.c:674:5
  $w4 = ORRWrs $wzr, $wzr, 0, debug-location !712; is.c:674:5
  $q0 = ORRv16i8 $q2, killed $q2, debug-location !712; is.c:674:5
  BL @c_print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit killed $w5, implicit $d0, implicit $d1, implicit-def $sp, debug-location !712; is.c:674:5
  PCN_STACKMAP 24, 0, 1, 8, $fp, -96, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 0, $fp, -44, 1, 8, $fp, -88, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !713 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4), (load 8 from %stack.10), (load 8 from %stack.11); is.c:681:9
  renamable $w8 = LDURWi $fp, -44, debug-location !713 :: (dereferenceable load 4 from %ir.timer_on); is.c:681:9
  CBZW killed renamable $w8, %bb.28, debug-location !715; is.c:681:9

bb.25.if.then54:
; predecessors: %bb.24
  successors: %bb.26(0x50000000), %bb.27(0x30000000); %bb.26(62.50%), %bb.27(37.50%)

  $w0 = MOVZWi 3, 0, debug-location !721; is.c:684:19
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !721; is.c:684:19
  PCN_STACKMAP 25, 0, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !722 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:684:17
  STURDi killed renamable $d0, $fp, -72, debug-location !722 :: (store 8 into %ir.t_total); is.c:684:17
  $x0 = ADRP target-flags(aarch64-page) @is__str_19__Additiona, debug-location !723; is.c:685:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_19__Additiona, 0, debug-location !723; is.c:685:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !723; is.c:685:9
  PCN_STACKMAP 26, 0, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !724 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:686:45
  renamable $d0 = LDURDi $fp, -72, debug-location !724 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
  STURDi renamable $d0, $fp, -88 :: (store 8 into %stack.10)
  $x0 = ADRP target-flags(aarch64-page) @is__str_20__Total_exe, debug-location !725; is.c:686:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_20__Total_exe, 0, debug-location !725; is.c:686:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !725; is.c:686:9
  PCN_STACKMAP 27, 0, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 1, 8, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !726 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.10); is.c:687:13
  renamable $d0 = LDURDi $fp, -72, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  FCMPDri killed renamable $d0, implicit-def $nzcv, debug-location !729; is.c:687:13
  Bcc 1, %bb.27, implicit $nzcv, debug-location !729; is.c:687:13

bb.26.if.then59:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  $x8 = MOVZXi 16368, 48
  STURXi killed renamable $x8, $fp, -72, debug-location !730 :: (store 8 into %ir.t_total); is.c:688:21

bb.27.if.end60:
; predecessors: %bb.25, %bb.26
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  $w0 = MOVZWi 1, 0, debug-location !732; is.c:689:23
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !732; is.c:689:23
  PCN_STACKMAP 28, 0, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !733 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:689:21
  STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
  renamable $d2 = LDURDi $fp, -72, debug-location !735 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
  renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  STURDi renamable $d1, $fp, -88 :: (store 8 into %stack.10)
  STURDi renamable $d0, $fp, -56, debug-location !733 :: (store 8 into %ir.timecounter); is.c:689:21
  renamable $d2 = FDIVDrr renamable $d0, killed renamable $d2, debug-location !736; is.c:690:33
  renamable $d1 = FMULDrr killed renamable $d2, killed renamable $d1, debug-location !737; is.c:690:43
  STRDui renamable $d1, $sp, 11 :: (store 8 into %stack.12)
  STURDi renamable $d1, $fp, -80, debug-location !738 :: (store 8 into %ir.t_percent); is.c:690:19
  $x0 = ADRP target-flags(aarch64-page) @is__str_21__Initializ, debug-location !741; is.c:691:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_21__Initializ, 0, debug-location !741; is.c:691:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !741; is.c:691:9
  PCN_STACKMAP 29, 0, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 1, 8, $fp, -96, 1, 8, $fp, -104, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !742 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.11), (load 8 from %stack.12); is.c:692:23
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !742; is.c:692:23
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !742; is.c:692:23
  PCN_STACKMAP 30, 0, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !743 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:692:21
  STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
  renamable $d1 = LDURDi $fp, -72, debug-location !745 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
  STURDi renamable $d0, $fp, -56, debug-location !743 :: (store 8 into %ir.timecounter); is.c:692:21
  renamable $d2 = FDIVDrr renamable $d0, killed renamable $d1, debug-location !746; is.c:693:33
  renamable $d1 = LDURDi $fp, -88 :: (load 8 from %stack.10)
  renamable $d1 = FMULDrr killed renamable $d2, killed renamable $d1, debug-location !747; is.c:693:43
  STRDui renamable $d1, $sp, 11 :: (store 8 into %stack.12)
  STURDi renamable $d1, $fp, -80, debug-location !748 :: (store 8 into %ir.t_percent); is.c:693:19
  $x0 = ADRP target-flags(aarch64-page) @is__str_22__Benchmark, debug-location !751; is.c:694:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_22__Benchmark, 0, debug-location !751; is.c:694:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !751; is.c:694:9
  PCN_STACKMAP 31, 0, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, 1, 8, $fp, -96, 1, 8, $fp, -104, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !752 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.11), (load 8 from %stack.12); is.c:695:23
  $w0 = MOVZWi 2, 0, debug-location !752; is.c:695:23
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !752; is.c:695:23
  PCN_STACKMAP 32, 0, 0, $fp, -80, 0, $fp, -72, 0, $fp, -56, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !753 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:695:21
  STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
  renamable $d1 = LDURDi $fp, -72, debug-location !755 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
  STURDi renamable $d0, $fp, -56, debug-location !753 :: (store 8 into %ir.timecounter); is.c:695:21
  renamable $d2 = FDIVDrr renamable $d0, killed renamable $d1, debug-location !756; is.c:696:33
  renamable $d1 = LDURDi $fp, -88 :: (load 8 from %stack.10)
  renamable $d1 = FMULDrr killed renamable $d2, killed renamable $d1, debug-location !757; is.c:696:43
  STPDi renamable $d1, renamable $d1, $fp, -11 :: (store 8 into %stack.10), (store 8 into %ir.t_percent)
  $x0 = ADRP target-flags(aarch64-page) @is__str_23__Sorting__, debug-location !761; is.c:697:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_23__Sorting__, 0, debug-location !761; is.c:697:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !761; is.c:697:9
  PCN_STACKMAP 33, 0, 1, 8, $fp, -96, 1, 8, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !762 :: (load 8 from %stack.11), (load 8 from %stack.10); is.c:698:5

bb.28.do.end76:
; predecessors: %bb.24, %bb.27

  $w8 = ORRWrs $wzr, $wzr, 0, debug-location !763; is.c:703:5
  $fp, $lr = frame-destroy LDPXi $sp, 24, debug-location !763 :: (load 8 from %stack.22), (load 8 from %stack.21); is.c:703:5
  $x19 = frame-destroy LDRXui $sp, 23, debug-location !763 :: (load 8 from %stack.23); is.c:703:5
  $sp = frame-destroy ADDXri $sp, 208, 0, debug-location !763; is.c:703:5
  RET undef $lr, implicit $w8, debug-location !763; is.c:703:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: STPWi renamable $w0, $wzr, $fp, -6 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !605; is.c:573:15
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STPWi renamable $w0, $wzr, $fp, -6 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Anti Latency=0
SU(1):   STURXi renamable $x1, $fp, -32 :: (store 8 into %ir.argv.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Anti Latency=0
SU(2):   STURWi $wzr, $fp, -44, debug-location !604 :: (store 4 into %ir.timer_on); is.c:572:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   $x0 = ADRP target-flags(aarch64-page) @is__str_2_timer_flag, debug-location !605; is.c:573:15
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_2_timer_flag, 0, debug-location !605; is.c:573:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x1 = ADRP target-flags(aarch64-page) @is__str_3_r_, debug-location !605; is.c:573:15
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(1): Anti Latency=0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x1
SU(6):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @is__str_3_r_, 0, debug-location !605; is.c:573:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !605; is.c:573:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) STPWi renamable $w0, $wzr, $fp, -6 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) STURXi renamable $x1, $fp, -32 :: (store 8 into %ir.argv.addr)
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @is__str_2_timer_flag, debug-location !605; is.c:573:15
  Ready @2c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x1 = ADRP target-flags(aarch64-page) @is__str_3_r_, debug-location !605; is.c:573:15
  Ready @3c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_2_timer_flag, 0, debug-location !605; is.c:573:15
  Ready @4c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @is__str_3_r_, 0, debug-location !605; is.c:573:15
  Ready @5c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi $wzr, $fp, -44, debug-location !604 :: (store 4 into %ir.timer_on); is.c:572:14
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   STPWi renamable $w0, $wzr, $fp, -6 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
SU(1):   STURXi renamable $x1, $fp, -32 :: (store 8 into %ir.argv.addr)
SU(3):   $x0 = ADRP target-flags(aarch64-page) @is__str_2_timer_flag, debug-location !605; is.c:573:15
SU(5):   $x1 = ADRP target-flags(aarch64-page) @is__str_3_r_, debug-location !605; is.c:573:15
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_2_timer_flag, 0, debug-location !605; is.c:573:15
SU(6):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @is__str_3_r_, 0, debug-location !605; is.c:573:15
SU(2):   STURWi $wzr, $fp, -44, debug-location !604 :: (store 4 into %ir.timer_on); is.c:572:14

********** MI Scheduling **********
main:%bb.0 entry
  From: frame-setup STRXui killed $x19, $sp, 23 :: (store 8 into %stack.23)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STRXui $x19, $sp, 23 :: (store 8 into %stack.23)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 24 :: (store 8 into %stack.22), (store 8 into %stack.21)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 192, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STRXui $x19, $sp, 23 :: (store 8 into %stack.23)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 24 :: (store 8 into %stack.22), (store 8 into %stack.21)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 192, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STRXui $x19, $sp, 23 :: (store 8 into %stack.23)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 24 :: (store 8 into %stack.22), (store 8 into %stack.21)
SU(2):   $fp = frame-setup ADDXri $sp, 192, 0

Fixup kills for %bb.0
********** MI Scheduling **********
main:%bb.1 if.then
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$w8
SU(1):   STURWi renamable $w8, $fp, -44, debug-location !613 :: (store 4 into %ir.timer_on); is.c:575:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi renamable $w8, $fp, -44, debug-location !613 :: (store 4 into %ir.timer_on); is.c:575:18
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   $w8 = MOVZWi 1, 0
SU(1):   STURWi renamable $w8, $fp, -44, debug-location !613 :: (store 4 into %ir.timer_on); is.c:575:18

********** MI Scheduling **********
main:%bb.1 if.then
  From: renamable $x19 = LDURXi $fp, -64, debug-location !610 :: (dereferenceable load 8 from %ir.fp); is.c:574:16
    To: BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !612; is.c:574:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDURXi $fp, -64, debug-location !610 :: (dereferenceable load 8 from %ir.fp); is.c:574:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$x19
SU(1):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !612; is.c:574:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !612; is.c:574:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x19 = LDURXi $fp, -64, debug-location !610 :: (dereferenceable load 8 from %ir.fp); is.c:574:16
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ORRXrs $xzr, $x19, 0, debug-location !612; is.c:574:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $x19 = LDURXi $fp, -64, debug-location !610 :: (dereferenceable load 8 from %ir.fp); is.c:574:16
SU(1):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !612; is.c:574:9

Fixup kills for %bb.1
Fixup kills for %bb.2
Fixup kills for %bb.3
Fixup kills for %bb.4
Fixup kills for %bb.5
********** MI Scheduling **********
main:%bb.6 if.end6
  From: STURWi $wzr, $fp, -36, debug-location !628 :: (store 4 into %ir.i); is.c:588:12
    To: End RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -36, debug-location !628 :: (store 4 into %ir.i); is.c:588:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x8 = ADRP target-flags(aarch64-page) @B_test_index_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x16 = ADRP target-flags(aarch64-page) @test_index_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
SU(4):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x17 = ADRP target-flags(aarch64-page) @B_test_rank_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x17
SU(6):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x18 = ADRP target-flags(aarch64-page) @test_rank_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x18
SU(8):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = ADRP target-flags(aarch64-page) @B_test_index_array
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 3 5 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x16 = ADRP target-flags(aarch64-page) @test_index_array
  Ready @1c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 2 5 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x17 = ADRP target-flags(aarch64-page) @B_test_rank_array
  Ready @2c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 2 4 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x18 = ADRP target-flags(aarch64-page) @test_rank_array
  Ready @3c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 2 4 8 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array, 0
  Ready @4c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 8 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
  Ready @5c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array, 0
  Ready @6c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -36, debug-location !628 :: (store 4 into %ir.i); is.c:588:12
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   $x8 = ADRP target-flags(aarch64-page) @B_test_index_array
SU(3):   $x16 = ADRP target-flags(aarch64-page) @test_index_array
SU(5):   $x17 = ADRP target-flags(aarch64-page) @B_test_rank_array
SU(7):   $x18 = ADRP target-flags(aarch64-page) @test_rank_array
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array, 0
SU(4):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
SU(6):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array, 0
SU(8):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
SU(0):   STURWi $wzr, $fp, -36, debug-location !628 :: (store 4 into %ir.i); is.c:588:12

Fixup kills for %bb.6
********** MI Scheduling **********
main:%bb.7 for.cond
  From: renamable $w0 = LDURWi $fp, -36, debug-location !631 :: (dereferenceable load 4 from %ir.i); is.c:588:17
    To: Bcc 12, %bb.9, implicit $nzcv, debug-location !634; is.c:588:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDURWi $fp, -36, debug-location !631 :: (dereferenceable load 4 from %ir.i); is.c:588:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w0
SU(1):   dead $wzr = SUBSWri renamable $w0, 4, 0, implicit-def $nzcv, debug-location !634; is.c:588:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.9, implicit $nzcv, debug-location !634; is.c:588:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w0 = LDURWi $fp, -36, debug-location !631 :: (dereferenceable load 4 from %ir.i); is.c:588:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w0, 4, 0, implicit-def $nzcv, debug-location !634; is.c:588:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w0 = LDURWi $fp, -36, debug-location !631 :: (dereferenceable load 4 from %ir.i); is.c:588:17
SU(1):   dead $wzr = SUBSWri renamable $w0, 4, 0, implicit-def $nzcv, debug-location !634; is.c:588:5

Fixup kills for %bb.7
********** MI Scheduling **********
main:%bb.8 for.body
  From: renamable $x0 = LDURSWi $fp, -36, debug-location !635 :: (dereferenceable load 4 from %ir.i); is.c:603:54
    To: B %bb.7
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDURSWi $fp, -36, debug-location !635 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w0
    SU(5): Data Latency=0 Reg=$x0
    SU(1): Data Latency=4 Reg=$x0
    SU(7): Ord  Latency=0 Memory
SU(1):   renamable $x1 = UBFMXri renamable $x0, 62, 61, debug-location !641; is.c:604:34
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=$x0
  Successors:
    SU(6): Data Latency=1 Reg=$x1
    SU(4): Data Latency=1 Reg=$x1
    SU(3): Data Latency=1 Reg=$x1
    SU(2): Data Latency=1 Reg=$x1
    SU(5): Anti Latency=0
SU(2):   renamable $w2 = LDRWroX renamable $x8, renamable $x1, 0, 0, debug-location !636 :: (load 4 from %ir.arrayidx); is.c:603:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    SU(4): Data Latency=4 Reg=$w2
SU(3):   renamable $w3 = LDRWroX renamable $x17, renamable $x1, 0, 0, debug-location !641 :: (load 4 from %ir.arrayidx11); is.c:604:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    SU(6): Data Latency=4 Reg=$w3
SU(4):   STRWroX renamable $w2, renamable $x16, renamable $x1, 0, 0, debug-location !639 :: (store 4 into %ir.arrayidx9); is.c:603:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$w2
    SU(1): Data Latency=1 Reg=$x1
SU(5):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0, debug-location !645; is.c:588:39
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w0
    SU(0): Data Latency=0 Reg=$x0
  Successors:
    SU(7): Data Latency=1 Reg=$w0
SU(6):   STRWroX renamable $w3, renamable $x18, renamable $x1, 0, 0, debug-location !644 :: (store 4 into %ir.arrayidx13); is.c:604:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w3
    SU(1): Data Latency=1 Reg=$x1
SU(7):   STURWi renamable $w0, $fp, -36, debug-location !645 :: (store 4 into %ir.i); is.c:588:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$w0
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x0 = LDURSWi $fp, -36, debug-location !635 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x1 = UBFMXri renamable $x0, 62, 61, debug-location !641; is.c:604:34
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 9
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w2 = LDRWroX renamable $x8, renamable $x1, 0, 0, debug-location !636 :: (load 4 from %ir.arrayidx); is.c:603:35
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 9
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w3 = LDRWroX renamable $x17, renamable $x1, 0, 0, debug-location !641 :: (load 4 from %ir.arrayidx11); is.c:604:34
  Ready @6c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0, debug-location !645; is.c:588:39
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 6 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STURWi renamable $w0, $fp, -36, debug-location !645 :: (store 4 into %ir.i); is.c:588:39
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRWroX renamable $w2, renamable $x16, renamable $x1, 0, 0, debug-location !639 :: (store 4 into %ir.arrayidx9); is.c:603:33
  Ready @9c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWroX renamable $w3, renamable $x18, renamable $x1, 0, 0, debug-location !644 :: (store 4 into %ir.arrayidx13); is.c:604:32
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x0 = LDURSWi $fp, -36, debug-location !635 :: (dereferenceable load 4 from %ir.i); is.c:603:54
SU(1):   renamable $x1 = UBFMXri renamable $x0, 62, 61, debug-location !641; is.c:604:34
SU(2):   renamable $w2 = LDRWroX renamable $x8, renamable $x1, 0, 0, debug-location !636 :: (load 4 from %ir.arrayidx); is.c:603:35
SU(3):   renamable $w3 = LDRWroX renamable $x17, renamable $x1, 0, 0, debug-location !641 :: (load 4 from %ir.arrayidx11); is.c:604:34
SU(5):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0, debug-location !645; is.c:588:39
SU(7):   STURWi renamable $w0, $fp, -36, debug-location !645 :: (store 4 into %ir.i); is.c:588:39
SU(4):   STRWroX renamable $w2, renamable $x16, renamable $x1, 0, 0, debug-location !639 :: (store 4 into %ir.arrayidx9); is.c:603:33
SU(6):   STRWroX renamable $w3, renamable $x18, renamable $x1, 0, 0, debug-location !644 :: (store 4 into %ir.arrayidx13); is.c:604:32

Fixup kills for %bb.8
********** MI Scheduling **********
main:%bb.9 for.end
  From: $x0 = ADRP target-flags(aarch64-page) @is__str_6__Iteration, debug-location !651; is.c:619:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !651; is.c:619:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @is__str_6__Iteration, debug-location !651; is.c:619:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_6__Iteration, 0, debug-location !651; is.c:619:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w1 = MOVZWi 10, 0, debug-location !651; is.c:619:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !651; is.c:619:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @is__str_6__Iteration, debug-location !651; is.c:619:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_6__Iteration, 0, debug-location !651; is.c:619:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w1 = MOVZWi 10, 0, debug-location !651; is.c:619:5
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @is__str_6__Iteration, debug-location !651; is.c:619:5
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_6__Iteration, 0, debug-location !651; is.c:619:5
SU(2):   $w1 = MOVZWi 10, 0, debug-location !651; is.c:619:5

********** MI Scheduling **********
main:%bb.9 for.end
  From: $x0 = ADRP target-flags(aarch64-page) @is__str_5__Size____l, debug-location !650; is.c:618:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp, implicit-def dead $w8, debug-location !650; is.c:618:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @is__str_5__Size____l, debug-location !650; is.c:618:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_5__Size____l, 0, debug-location !650; is.c:618:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   dead $w1 = MOVZWi 512, 16, implicit-def $x1, debug-location !650; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w2 = MOVZWi 66, 0, debug-location !650; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp, implicit-def dead $w8, debug-location !650; is.c:618:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @is__str_5__Size____l, debug-location !650; is.c:618:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_5__Size____l, 0, debug-location !650; is.c:618:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) dead $w1 = MOVZWi 512, 16, implicit-def $x1, debug-location !650; is.c:618:5
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w2 = MOVZWi 66, 0, debug-location !650; is.c:618:5
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @is__str_5__Size____l, debug-location !650; is.c:618:5
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_5__Size____l, 0, debug-location !650; is.c:618:5
SU(2):   dead $w1 = MOVZWi 512, 16, implicit-def $x1, debug-location !650; is.c:618:5
SU(3):   $w2 = MOVZWi 66, 0, debug-location !650; is.c:618:5

********** MI Scheduling **********
main:%bb.9 for.end
  From: $x0 = ADRP target-flags(aarch64-page) @is__str_4____NAS_Par, debug-location !649; is.c:617:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !649; is.c:617:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @is__str_4____NAS_Par, debug-location !649; is.c:617:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_4____NAS_Par, 0, debug-location !649; is.c:617:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !649; is.c:617:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @is__str_4____NAS_Par, debug-location !649; is.c:617:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_4____NAS_Par, 0, debug-location !649; is.c:617:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @is__str_4____NAS_Par, debug-location !649; is.c:617:5
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_4____NAS_Par, 0, debug-location !649; is.c:617:5

Fixup kills for %bb.9
Fixup kills for %bb.10
********** MI Scheduling **********
main:%bb.11 if.end19
  From: renamable $x8 = ADRP target-flags(aarch64-page) %const.0
    To: BL @create_seq, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, debug-location !656; is.c:625:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=$x16
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   BL @create_seq, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, debug-location !656; is.c:625:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @3c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.1
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(3):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)

Fixup kills for %bb.11
Fixup kills for %bb.12
********** MI Scheduling **********
main:%bb.13 if.end22
  From: renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !662; is.c:635:25
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !663; is.c:638:9
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !662; is.c:635:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !662 :: (store 4 into @passed_verification); is.c:635:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
SU(2):   $x0 = ADRP target-flags(aarch64-page) @is__str_7_____iterat, debug-location !663; is.c:638:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_7_____iterat, 0, debug-location !663; is.c:638:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !663; is.c:638:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @is__str_7_____iterat, debug-location !663; is.c:638:9
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !662; is.c:635:25
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_7_____iterat, 0, debug-location !663; is.c:638:9
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !662 :: (store 4 into @passed_verification); is.c:635:25
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(2):   $x0 = ADRP target-flags(aarch64-page) @is__str_7_____iterat, debug-location !663; is.c:638:9
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !662; is.c:635:25
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_7_____iterat, 0, debug-location !663; is.c:638:9
SU(1):   STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !662 :: (store 4 into @passed_verification); is.c:635:25

********** MI Scheduling **********
main:%bb.13 if.end22
  From: $w0 = MOVZWi 1, 0, debug-location !661; is.c:632:5
    To: BL @rank, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !661; is.c:632:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w0 = MOVZWi 1, 0, debug-location !661; is.c:632:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $w19 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @rank, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !661; is.c:632:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w0 = MOVZWi 1, 0, debug-location !661; is.c:632:5
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w19 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $w0 = MOVZWi 1, 0, debug-location !661; is.c:632:5
SU(1):   $w19 = MOVZWi 1, 0

Fixup kills for %bb.13
********** MI Scheduling **********
main:%bb.14 for.cond28
  From: renamable $w8 = LDURWi $fp, -40, debug-location !670 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
    To: Bcc 12, %bb.16, implicit $nzcv, debug-location !673; is.c:646:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -40, debug-location !670 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv, debug-location !673; is.c:646:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.16, implicit $nzcv, debug-location !673; is.c:646:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -40, debug-location !670 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv, debug-location !673; is.c:646:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   renamable $w8 = LDURWi $fp, -40, debug-location !670 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv, debug-location !673; is.c:646:5

Fixup kills for %bb.14
********** MI Scheduling **********
main:%bb.15 for.body30
  From: renamable $w8 = LDURWi $fp, -40, debug-location !681 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
    To: B %bb.14
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -40, debug-location !681 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !681; is.c:646:63
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -40, debug-location !681 :: (store 4 into %ir.iteration); is.c:646:63
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -40, debug-location !681 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !681; is.c:646:63
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -40, debug-location !681 :: (store 4 into %ir.iteration); is.c:646:63
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $w8 = LDURWi $fp, -40, debug-location !681 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !681; is.c:646:63
SU(2):   STURWi renamable $w8, $fp, -40, debug-location !681 :: (store 4 into %ir.iteration); is.c:646:63

********** MI Scheduling **********
main:%bb.15 for.body30
  From: renamable $w19 = LDURWi $fp, -40, debug-location !678 :: (dereferenceable load 4 from %ir.iteration); is.c:650:14
    To: BL @rank, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !679; is.c:650:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -40, debug-location !678 :: (dereferenceable load 4 from %ir.iteration); is.c:650:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w19
SU(1):   $w0 = ORRWrs $wzr, $w19, 0, debug-location !679; is.c:650:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @rank, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !679; is.c:650:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w19 = LDURWi $fp, -40, debug-location !678 :: (dereferenceable load 4 from %ir.iteration); is.c:650:14
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w0 = ORRWrs $wzr, $w19, 0, debug-location !679; is.c:650:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $w19 = LDURWi $fp, -40, debug-location !678 :: (dereferenceable load 4 from %ir.iteration); is.c:650:14
SU(1):   $w0 = ORRWrs $wzr, $w19, 0, debug-location !679; is.c:650:9

********** MI Scheduling **********
main:%bb.15 for.body30
  From: renamable $w19 = LDURWi $fp, -40, debug-location !674 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !677; is.c:648:13
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -40, debug-location !674 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w19
SU(1):   $x0 = ADRP target-flags(aarch64-page) @is__str_8__________d, debug-location !677; is.c:648:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_8__________d, 0, debug-location !677; is.c:648:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w1 = ORRWrs $wzr, $w19, 0, debug-location !677; is.c:648:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !677; is.c:648:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w19 = LDURWi $fp, -40, debug-location !674 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @is__str_8__________d, debug-location !677; is.c:648:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_8__________d, 0, debug-location !677; is.c:648:13
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w1 = ORRWrs $wzr, $w19, 0, debug-location !677; is.c:648:13
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $w19 = LDURWi $fp, -40, debug-location !674 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
SU(1):   $x0 = ADRP target-flags(aarch64-page) @is__str_8__________d, debug-location !677; is.c:648:13
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_8__________d, 0, debug-location !677; is.c:648:13
SU(3):   $w1 = ORRWrs $wzr, $w19, 0, debug-location !677; is.c:648:13

Fixup kills for %bb.15
********** MI Scheduling **********
main:%bb.16 do.end38
  From: renamable $w8 = LDURWi $fp, -44, debug-location !688 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
    To: CBZW killed renamable $w8, %bb.18, debug-location !690; is.c:662:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -44, debug-location !688 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   STURDi renamable $d0, $fp, -56, debug-location !687 :: (store 8 into %ir.timecounter); is.c:658:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   CBZW killed renamable $w8, %bb.18, debug-location !690; is.c:662:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -44, debug-location !688 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURDi renamable $d0, $fp, -56, debug-location !687 :: (store 8 into %ir.timecounter); is.c:658:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   renamable $w8 = LDURWi $fp, -44, debug-location !688 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
SU(1):   STURDi renamable $d0, $fp, -56, debug-location !687 :: (store 8 into %ir.timecounter); is.c:658:17

Fixup kills for %bb.16
Fixup kills for %bb.17
Fixup kills for %bb.18
Fixup kills for %bb.19
Fixup kills for %bb.20
Fixup kills for %bb.21
********** MI Scheduling **********
main:%bb.22 if.end48
  From: renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !701; is.c:672:9
    To: Bcc 0, %bb.24, implicit $nzcv, debug-location !704; is.c:672:9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !701; is.c:672:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !701 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(2):   dead $wzr = SUBSWri renamable $w8, 51, 0, implicit-def $nzcv, debug-location !704; is.c:672:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 0, %bb.24, implicit $nzcv, debug-location !704; is.c:672:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !701; is.c:672:9
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !701 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 51, 0, implicit-def $nzcv, debug-location !704; is.c:672:9
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !701; is.c:672:9
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !701 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
SU(2):   dead $wzr = SUBSWri renamable $w8, 51, 0, implicit-def $nzcv, debug-location !704; is.c:672:9

Fixup kills for %bb.22
********** MI Scheduling **********
main:%bb.23 if.then50
  From: renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !705; is.c:673:29
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !705; is.c:673:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !705 :: (store 4 into @passed_verification); is.c:673:29
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !705; is.c:673:29
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !705 :: (store 4 into @passed_verification); is.c:673:29
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !705; is.c:673:29
SU(1):   STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !705 :: (store 4 into @passed_verification); is.c:673:29

Fixup kills for %bb.23
********** MI Scheduling **********
main:%bb.24 if.end51
  From: renamable $d2 = LDURDi $fp, -56, debug-location !707 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
    To: BL @c_print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit killed $w5, implicit $d0, implicit $d1, implicit-def $sp, debug-location !712; is.c:674:5
 RegionInstrs: 43
ScheduleDAGMI::schedule starting
SU(0):   renamable $d2 = LDURDi $fp, -56, debug-location !707 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(8): Data Latency=4 Reg=$d2
    SU(7): Data Latency=4 Reg=$d2
    SU(42): Data Latency=4 Reg=$q2
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Out  Latency=1
    SU(42): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
    SU(3): Anti Latency=0
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
SU(4):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$d1
    SU(5): Anti Latency=0
SU(5):   renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !711; is.c:677:24
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(11): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x8
SU(6):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !711 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 3
  Height             : 4
  Predecessors:
    SU(5): Data Latency=1 Reg=$x8
  Successors:
    SU(27): Data Latency=4 Reg=$w19
    SU(11): Anti Latency=0
SU(7):   renamable $d0 = FDIVDrr renamable $d0, renamable $d2, debug-location !709; is.c:676:49
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d2
  Successors:
    SU(42): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
    SU(42): Anti Latency=0
SU(8):   STURDi renamable $d2, $fp, -88 :: (store 8 into %stack.10)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d2
SU(9):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !710; is.c:676:63
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=$d0
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(10): Data Latency=1 Reg=$d1
    SU(42): Anti Latency=0
SU(10):   STRDui renamable $d1, $sp, 12 :: (store 8 into %stack.11)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d1
SU(11):   $x8 = ADRP target-flags(aarch64-page) @is__str_18__O3__mcmod, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 4
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x8
SU(12):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @is__str_18__O3__mcmod, 0, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x8
  Successors:
    SU(29): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x8
SU(13):   $x16 = ADRP target-flags(aarch64-page) @is__str_17__g__Wall__, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x16
SU(14):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @is__str_17__g__Wall__, 0, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x16
  Successors:
    SU(28): Data Latency=1 Reg=$x16
SU(15):   $x17 = ADRP target-flags(aarch64-page) @is__str_16__I___commo, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x17
SU(16):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @is__str_16__I___commo, 0, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x17
  Successors:
    SU(31): Data Latency=1 Reg=$x17
SU(17):   $x18 = ADRP target-flags(aarch64-page) @is__str_15__lm_, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x18
SU(18):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @is__str_15__lm_, 0, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x18
  Successors:
    SU(31): Data Latency=1 Reg=$x18
SU(19):   $x1 = ADRP target-flags(aarch64-page) @is__str_14___CC__, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x1
SU(20):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @is__str_14___CC__, 0, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x1
  Successors:
    SU(36): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x1
SU(21):   $x2 = ADRP target-flags(aarch64-page) @is__str_13_gcc_, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x2
SU(22):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @is__str_13_gcc_, 0, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x2
  Successors:
    SU(37): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x2
SU(23):   $x3 = ADRP target-flags(aarch64-page) @is__str_12_03_Nov_201, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x3
SU(24):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @is__str_12_03_Nov_201, 0, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x3
  Successors:
    SU(38): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x3
SU(25):   $x4 = ADRP target-flags(aarch64-page) @is__str_11_3_3_1_, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x4
SU(26):   renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @is__str_11_3_3_1_, 0, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x4
  Successors:
    SU(41): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x4
SU(27):   STRWui renamable $w19, $sp, 2, debug-location !712 :: (store 4 into stack + 8); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=$w19
SU(28):   STPXi renamable $x16, renamable $x8, $sp, 8, debug-location !712 :: (store 8 into stack + 64), (store 8 into stack + 72); is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(12): Data Latency=1 Reg=$x8
    SU(14): Data Latency=1 Reg=$x16
  Successors:
    SU(29): Anti Latency=0
SU(29):   $x8 = ADRP target-flags(aarch64-page) @is__str_10_keys_ranke, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(28): Anti Latency=0
    SU(12): Out  Latency=1
  Successors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x8
SU(30):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @is__str_10_keys_ranke, 0, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x8
  Successors:
    SU(40): Data Latency=1 Reg=$x8
SU(31):   STPXi renamable $x18, renamable $x17, $sp, 6, debug-location !712 :: (store 8 into stack + 48), (store 8 into stack + 56); is.c:674:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=$x18
    SU(16): Data Latency=1 Reg=$x17
SU(32):   $x0 = ADRP target-flags(aarch64-page) @is__str_9_IS_, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(33): Out  Latency=1
    SU(33): Data Latency=1 Reg=$x0
SU(33):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_9_IS_, 0, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(34):   STPXi renamable $x2, renamable $x1, $sp, 4, debug-location !712 :: (store 8 into stack + 32), (store 8 into stack + 40); is.c:674:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(22): Data Latency=1 Reg=$x2
    SU(20): Data Latency=1 Reg=$x1
  Successors:
    SU(37): Anti Latency=0
    SU(36): Anti Latency=0
SU(35):   STPXi renamable $x4, renamable $x3, $sp, 2, debug-location !712 :: (store 8 into stack + 16), (store 8 into stack + 24); is.c:674:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(26): Data Latency=1 Reg=$x4
    SU(24): Data Latency=1 Reg=$x3
  Successors:
    SU(41): Anti Latency=0
    SU(38): Anti Latency=0
SU(36):   $w1 = MOVZWi 66, 0, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(34): Anti Latency=0
    SU(20): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(37):   $w2 = MOVZWi 8, 16, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(34): Anti Latency=0
    SU(22): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(38):   $w3 = MOVZWi 64, 0, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(35): Anti Latency=0
    SU(24): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(39):   $w5 = MOVZWi 10, 0, debug-location !712; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(40):   STRXui renamable $x8, $sp, 0, debug-location !712 :: (store 8 into stack); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(30): Data Latency=1 Reg=$x8
SU(41):   $w4 = ORRWrs $wzr, $wzr, 0, debug-location !712; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(35): Anti Latency=0
    SU(26): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(42):   $q0 = ORRv16i8 $q2, $q2, debug-location !712; is.c:674:5
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(9): Anti Latency=0
    SU(7): Out  Latency=1
    SU(7): Anti Latency=0
    SU(2): Out  Latency=1
    SU(0): Data Latency=4 Reg=$q2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @c_print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit killed $w5, implicit $d0, implicit $d1, implicit-def $sp, debug-location !712; is.c:674:5
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(42): Ord  Latency=1 Artificial
    SU(41): Ord  Latency=1 Artificial
    SU(39): Ord  Latency=1 Artificial
    SU(38): Ord  Latency=1 Artificial
    SU(37): Ord  Latency=1 Artificial
    SU(36): Ord  Latency=1 Artificial
    SU(33): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 13 15 17 19 21 23 25 32 39 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  Ready @0c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 39 13 15 17 19 21 23 25 32 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d2 = LDURDi $fp, -56, debug-location !707 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 2 39 13 15 17 19 21 23 25 32 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 7 
Queue TopQ.A: 32 39 13 15 17 19 21 23 25 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(13) TOP-PATH                  4 cycles 
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  Ready @3c
  TopQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 7 
Queue TopQ.A: 32 39 13 15 17 19 21 23 25 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(13) TOP-PATH                  4 cycles 
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  Ready @4c
  TopQ.A TopLatency SU(4) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 32 39 13 15 17 19 21 23 25 5 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(13) TOP-PATH                  4 cycles 
  Cand SU(5) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !711; is.c:677:24
  Ready @5c
  TopQ.A BotLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 13 15 17 19 21 23 25 8 6 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(13) TOP-PATH                  4 cycles 
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !711 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  Ready @6c
  TopQ.A TopLatency SU(6) 3c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 27 
Queue TopQ.A: 32 39 13 15 17 19 21 23 25 8 7 11 
  TopQ.A RemainingLatency 0 + 7c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(13) TOP-PATH                  4 cycles 
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) $x8 = ADRP target-flags(aarch64-page) @is__str_18__O3__mcmod, debug-location !712; is.c:674:5
  Ready @7c
  TopQ.A BotLatency SU(11) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 27 
Queue TopQ.A: 32 39 13 15 17 19 21 23 25 8 7 12 
  TopQ.A RemainingLatency 0 + 8c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(13) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x16 = ADRP target-flags(aarch64-page) @is__str_17__g__Wall__, debug-location !712; is.c:674:5
  Ready @8c
  TopQ.A BotLatency SU(13) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 27 
Queue TopQ.A: 32 39 12 15 17 19 21 23 25 8 7 14 
  TopQ.A RemainingLatency 0 + 9c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(12) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @is__str_18__O3__mcmod, 0, debug-location !712; is.c:674:5
  Ready @9c
  TopQ.A TopLatency SU(12) 4c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 14 15 17 19 21 23 25 8 7 27 
  TopQ.A RemainingLatency 0 + 10c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(14) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @is__str_17__g__Wall__, 0, debug-location !712; is.c:674:5
  Ready @10c
  TopQ.A BotLatency SU(14) 3c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 27 15 17 19 21 23 25 8 7 28 
  TopQ.A RemainingLatency 0 + 11c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(19) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) $x1 = ADRP target-flags(aarch64-page) @is__str_14___CC__, debug-location !712; is.c:674:5
  Ready @11c
  TopQ.A BotLatency SU(19) 3c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 27 15 17 28 21 23 25 8 7 20 
  TopQ.A RemainingLatency 0 + 12c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(21) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) $x2 = ADRP target-flags(aarch64-page) @is__str_13_gcc_, debug-location !712; is.c:674:5
  Ready @12c
  TopQ.A BotLatency SU(21) 3c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 27 15 17 28 20 23 25 8 7 22 
  TopQ.A RemainingLatency 0 + 13c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(23) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) $x3 = ADRP target-flags(aarch64-page) @is__str_12_03_Nov_201, debug-location !712; is.c:674:5
  Ready @13c
  TopQ.A BotLatency SU(23) 3c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 27 15 17 28 20 22 25 8 7 24 
  TopQ.A RemainingLatency 0 + 14c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(25) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) $x4 = ADRP target-flags(aarch64-page) @is__str_11_3_3_1_, debug-location !712; is.c:674:5
  Ready @14c
  TopQ.A BotLatency SU(25) 3c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 27 15 17 28 20 22 24 8 7 26 
  TopQ.A RemainingLatency 0 + 15c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) renamable $d0 = FDIVDrr renamable $d0, renamable $d2, debug-location !709; is.c:676:49
  Ready @15c
  TopQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 27 15 17 28 20 22 24 8 26 9 
  TopQ.A RemainingLatency 0 + 16c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) $x17 = ADRP target-flags(aarch64-page) @is__str_16__I___commo, debug-location !712; is.c:674:5
  Ready @16c
  TopQ.A BotLatency SU(15) 2c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 27 9 17 28 20 22 24 8 26 16 
  TopQ.A RemainingLatency 0 + 17c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) $x18 = ADRP target-flags(aarch64-page) @is__str_15__lm_, debug-location !712; is.c:674:5
  Ready @17c
  TopQ.A BotLatency SU(17) 2c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 27 9 16 28 20 22 24 8 26 18 
  TopQ.A RemainingLatency 0 + 18c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(20) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(20) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @is__str_14___CC__, 0, debug-location !712; is.c:674:5
  Ready @18c
  TopQ.A BotLatency SU(20) 2c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 27 9 16 28 18 22 24 8 26 
  TopQ.A RemainingLatency 0 + 19c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(22) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(22) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @is__str_13_gcc_, 0, debug-location !712; is.c:674:5
  Ready @19c
  TopQ.A BotLatency SU(22) 2c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 27 9 16 28 18 26 24 8 34 
  TopQ.A RemainingLatency 0 + 20c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(24) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(24) renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @is__str_12_03_Nov_201, 0, debug-location !712; is.c:674:5
  Ready @20c
  TopQ.A BotLatency SU(24) 2c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 27 9 16 28 18 26 34 8 
  TopQ.A RemainingLatency 0 + 21c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(26) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(26) renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @is__str_11_3_3_1_, 0, debug-location !712; is.c:674:5
  Ready @21c
  TopQ.A BotLatency SU(26) 2c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 27 9 16 28 18 8 34 35 
  TopQ.A RemainingLatency 0 + 22c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(28) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(28) STPXi renamable $x16, renamable $x8, $sp, 8, debug-location !712 :: (store 8 into stack + 64), (store 8 into stack + 72); is.c:674:5
  Ready @22c
  TopQ.A BotLatency SU(28) 2c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 27 9 16 35 18 8 34 29 
  TopQ.A RemainingLatency 0 + 23c > CritPath 7
  Cand SU(32) ORDER                              
  Cand SU(29) ORDER                              
Pick Top ORDER     
Scheduling SU(29) $x8 = ADRP target-flags(aarch64-page) @is__str_10_keys_ranke, debug-location !712; is.c:674:5
  Ready @23c
  TopQ.A BotLatency SU(29) 2c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 39 27 9 16 35 18 8 34 30 
  TopQ.A RemainingLatency 0 + 24c > CritPath 7
  Cand SU(32) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(32) $x0 = ADRP target-flags(aarch64-page) @is__str_9_IS_, debug-location !712; is.c:674:5
  Ready @24c
  TopQ.A BotLatency SU(32) 2c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 39 27 9 16 35 18 8 34 33 
  TopQ.A RemainingLatency 0 + 25c > CritPath 7
  Cand SU(30) ORDER                              
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !710; is.c:676:63
  Ready @25c
  TopQ.A TopLatency SU(9) 6c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 39 27 33 16 35 18 8 34 10 42 
  TopQ.A RemainingLatency 0 + 26c > CritPath 7
  Cand SU(30) ORDER                              
  Cand SU(16) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(16) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @is__str_16__I___commo, 0, debug-location !712; is.c:674:5
  Ready @26c
  TopQ.A BotLatency SU(16) 1c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 39 27 33 42 35 18 8 34 10 
  TopQ.A RemainingLatency 0 + 27c > CritPath 7
  Cand SU(30) ORDER                              
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @is__str_15__lm_, 0, debug-location !712; is.c:674:5
  Ready @27c
  TopQ.A BotLatency SU(18) 1c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 39 27 33 42 35 10 8 34 31 
  TopQ.A RemainingLatency 0 + 28c > CritPath 7
  Cand SU(30) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(30) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @is__str_10_keys_ranke, 0, debug-location !712; is.c:674:5
  Ready @28c
  TopQ.A BotLatency SU(30) 1c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 39 27 33 42 35 10 8 34 40 
  TopQ.A RemainingLatency 0 + 29c > CritPath 7
  Cand SU(31) ORDER                              
  Cand SU(39) TOP-PATH                  1 cycles 
  Cand SU(33) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(33) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_9_IS_, 0, debug-location !712; is.c:674:5
  Ready @29c
  TopQ.A BotLatency SU(33) 1c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 39 27 40 42 35 10 8 34 
  TopQ.A RemainingLatency 0 + 30c > CritPath 7
  Cand SU(31) ORDER                              
  Cand SU(39) TOP-PATH                  1 cycles 
  Cand SU(35) ORDER                              
  Cand SU(34) ORDER                              
Pick Top ORDER     
Scheduling SU(34) STPXi renamable $x2, renamable $x1, $sp, 4, debug-location !712 :: (store 8 into stack + 32), (store 8 into stack + 40); is.c:674:5
  Ready @30c
  TopQ.A BotLatency SU(34) 1c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 39 27 40 42 35 10 8 37 36 
  TopQ.A RemainingLatency 0 + 31c > CritPath 7
  Cand SU(31) ORDER                              
  Cand SU(39) TOP-PATH                  1 cycles 
  Cand SU(35) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(35) STPXi renamable $x4, renamable $x3, $sp, 2, debug-location !712 :: (store 8 into stack + 16), (store 8 into stack + 24); is.c:674:5
  Ready @31c
  TopQ.A BotLatency SU(35) 1c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 39 27 40 42 36 10 8 37 41 38 
  TopQ.A RemainingLatency 0 + 32c > CritPath 7
  Cand SU(31) ORDER                              
  Cand SU(39) TOP-PATH                  1 cycles 
  Cand SU(36) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(36) $w1 = MOVZWi 66, 0, debug-location !712; is.c:674:5
  Ready @32c
  TopQ.A BotLatency SU(36) 1c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 39 27 40 42 38 10 8 37 41 
  TopQ.A RemainingLatency 0 + 33c > CritPath 7
  Cand SU(31) ORDER                              
  Cand SU(39) TOP-PATH                  1 cycles 
  Cand SU(38) ORDER                              
  Cand SU(37) ORDER                              
Pick Top ORDER     
Scheduling SU(37) $w2 = MOVZWi 8, 16, debug-location !712; is.c:674:5
  Ready @33c
  TopQ.A BotLatency SU(37) 1c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 39 27 40 42 38 10 8 41 
  TopQ.A RemainingLatency 0 + 34c > CritPath 7
  Cand SU(31) ORDER                              
  Cand SU(39) TOP-PATH                  1 cycles 
  Cand SU(38) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(38) $w3 = MOVZWi 64, 0, debug-location !712; is.c:674:5
  Ready @34c
  TopQ.A BotLatency SU(38) 1c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 39 27 40 42 41 10 8 
  TopQ.A RemainingLatency 0 + 35c > CritPath 7
  Cand SU(31) ORDER                              
  Cand SU(39) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(39) $w5 = MOVZWi 10, 0, debug-location !712; is.c:674:5
  Ready @35c
  TopQ.A BotLatency SU(39) 1c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 8 27 40 42 41 10 
  TopQ.A RemainingLatency 0 + 36c > CritPath 7
  Cand SU(31) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(42) TOP-PATH                  1 cycles 
  Cand SU(41) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(41) $w4 = ORRWrs $wzr, $wzr, 0, debug-location !712; is.c:674:5
  Ready @36c
  TopQ.A BotLatency SU(41) 1c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 8 27 40 42 10 
  TopQ.A RemainingLatency 0 + 37c > CritPath 7
  Cand SU(31) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(42) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(42) $q0 = ORRv16i8 $q2, $q2, debug-location !712; is.c:674:5
  Ready @37c
  TopQ.A BotLatency SU(42) 1c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 8 27 40 10 
  TopQ.A RemainingLatency 0 + 38c > CritPath 7
  Cand SU(31) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) STURDi renamable $d2, $fp, -88 :: (store 8 into %stack.10)
  Ready @38c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 10 27 40 
  TopQ.A RemainingLatency 0 + 39c > CritPath 7
  Cand SU(31) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) STRDui renamable $d1, $sp, 12 :: (store 8 into %stack.11)
  Ready @39c
  TopQ.A TopLatency SU(10) 7c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 40 27 
  TopQ.A RemainingLatency 0 + 40c > CritPath 7
  Cand SU(31) ORDER                              
  Cand SU(27) ORDER                              
Pick Top ORDER     
Scheduling SU(27) STRWui renamable $w19, $sp, 2, debug-location !712 :: (store 4 into stack + 8); is.c:674:5
  Ready @40c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 40 
  TopQ.A RemainingLatency 0 + 41c > CritPath 7
  Cand SU(31) ORDER                              
Pick Top ORDER     
Scheduling SU(31) STPXi renamable $x18, renamable $x17, $sp, 6, debug-location !712 :: (store 8 into stack + 48), (store 8 into stack + 56); is.c:674:5
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 
Pick Top ONLY1     
Scheduling SU(40) STRXui renamable $x8, $sp, 0, debug-location !712 :: (store 8 into stack); is.c:674:5
  Ready @42c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
SU(0):   renamable $d2 = LDURDi $fp, -56, debug-location !707 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) %const.3
SU(4):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(5):   renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !711; is.c:677:24
SU(6):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !711 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
SU(11):   $x8 = ADRP target-flags(aarch64-page) @is__str_18__O3__mcmod, debug-location !712; is.c:674:5
SU(13):   $x16 = ADRP target-flags(aarch64-page) @is__str_17__g__Wall__, debug-location !712; is.c:674:5
SU(12):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @is__str_18__O3__mcmod, 0, debug-location !712; is.c:674:5
SU(14):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @is__str_17__g__Wall__, 0, debug-location !712; is.c:674:5
SU(19):   $x1 = ADRP target-flags(aarch64-page) @is__str_14___CC__, debug-location !712; is.c:674:5
SU(21):   $x2 = ADRP target-flags(aarch64-page) @is__str_13_gcc_, debug-location !712; is.c:674:5
SU(23):   $x3 = ADRP target-flags(aarch64-page) @is__str_12_03_Nov_201, debug-location !712; is.c:674:5
SU(25):   $x4 = ADRP target-flags(aarch64-page) @is__str_11_3_3_1_, debug-location !712; is.c:674:5
SU(7):   renamable $d0 = FDIVDrr renamable $d0, renamable $d2, debug-location !709; is.c:676:49
SU(15):   $x17 = ADRP target-flags(aarch64-page) @is__str_16__I___commo, debug-location !712; is.c:674:5
SU(17):   $x18 = ADRP target-flags(aarch64-page) @is__str_15__lm_, debug-location !712; is.c:674:5
SU(20):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @is__str_14___CC__, 0, debug-location !712; is.c:674:5
SU(22):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @is__str_13_gcc_, 0, debug-location !712; is.c:674:5
SU(24):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @is__str_12_03_Nov_201, 0, debug-location !712; is.c:674:5
SU(26):   renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @is__str_11_3_3_1_, 0, debug-location !712; is.c:674:5
SU(28):   STPXi renamable $x16, renamable $x8, $sp, 8, debug-location !712 :: (store 8 into stack + 64), (store 8 into stack + 72); is.c:674:5
SU(29):   $x8 = ADRP target-flags(aarch64-page) @is__str_10_keys_ranke, debug-location !712; is.c:674:5
SU(32):   $x0 = ADRP target-flags(aarch64-page) @is__str_9_IS_, debug-location !712; is.c:674:5
SU(9):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !710; is.c:676:63
SU(16):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @is__str_16__I___commo, 0, debug-location !712; is.c:674:5
SU(18):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @is__str_15__lm_, 0, debug-location !712; is.c:674:5
SU(30):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @is__str_10_keys_ranke, 0, debug-location !712; is.c:674:5
SU(33):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_9_IS_, 0, debug-location !712; is.c:674:5
SU(34):   STPXi renamable $x2, renamable $x1, $sp, 4, debug-location !712 :: (store 8 into stack + 32), (store 8 into stack + 40); is.c:674:5
SU(35):   STPXi renamable $x4, renamable $x3, $sp, 2, debug-location !712 :: (store 8 into stack + 16), (store 8 into stack + 24); is.c:674:5
SU(36):   $w1 = MOVZWi 66, 0, debug-location !712; is.c:674:5
SU(37):   $w2 = MOVZWi 8, 16, debug-location !712; is.c:674:5
SU(38):   $w3 = MOVZWi 64, 0, debug-location !712; is.c:674:5
SU(39):   $w5 = MOVZWi 10, 0, debug-location !712; is.c:674:5
SU(41):   $w4 = ORRWrs $wzr, $wzr, 0, debug-location !712; is.c:674:5
SU(42):   $q0 = ORRv16i8 $q2, $q2, debug-location !712; is.c:674:5
SU(8):   STURDi renamable $d2, $fp, -88 :: (store 8 into %stack.10)
SU(10):   STRDui renamable $d1, $sp, 12 :: (store 8 into %stack.11)
SU(27):   STRWui renamable $w19, $sp, 2, debug-location !712 :: (store 4 into stack + 8); is.c:674:5
SU(31):   STPXi renamable $x18, renamable $x17, $sp, 6, debug-location !712 :: (store 8 into stack + 48), (store 8 into stack + 56); is.c:674:5
SU(40):   STRXui renamable $x8, $sp, 0, debug-location !712 :: (store 8 into stack); is.c:674:5

Fixup kills for %bb.24
********** MI Scheduling **********
main:%bb.25 if.then54
  From: renamable $d0 = LDURDi $fp, -72, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
    To: Bcc 1, %bb.27, implicit $nzcv, debug-location !729; is.c:687:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -72, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d0
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !729; is.c:687:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.27, implicit $nzcv, debug-location !729; is.c:687:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d0 = LDURDi $fp, -72, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) FCMPDri renamable $d0, implicit-def $nzcv, debug-location !729; is.c:687:13
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $d0 = LDURDi $fp, -72, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !729; is.c:687:13

********** MI Scheduling **********
main:%bb.25 if.then54
  From: renamable $d0 = LDURDi $fp, -72, debug-location !724 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !725; is.c:686:9
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -72, debug-location !724 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STURDi renamable $d0, $fp, -88 :: (store 8 into %stack.10)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
SU(2):   $x0 = ADRP target-flags(aarch64-page) @is__str_20__Total_exe, debug-location !725; is.c:686:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_20__Total_exe, 0, debug-location !725; is.c:686:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !725; is.c:686:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -72, debug-location !724 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @is__str_20__Total_exe, debug-location !725; is.c:686:9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_20__Total_exe, 0, debug-location !725; is.c:686:9
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURDi renamable $d0, $fp, -88 :: (store 8 into %stack.10)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $d0 = LDURDi $fp, -72, debug-location !724 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
SU(2):   $x0 = ADRP target-flags(aarch64-page) @is__str_20__Total_exe, debug-location !725; is.c:686:9
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_20__Total_exe, 0, debug-location !725; is.c:686:9
SU(1):   STURDi renamable $d0, $fp, -88 :: (store 8 into %stack.10)

********** MI Scheduling **********
main:%bb.25 if.then54
  From: STURDi killed renamable $d0, $fp, -72, debug-location !722 :: (store 8 into %ir.t_total); is.c:684:17
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !723; is.c:685:9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURDi renamable $d0, $fp, -72, debug-location !722 :: (store 8 into %ir.t_total); is.c:684:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x0 = ADRP target-flags(aarch64-page) @is__str_19__Additiona, debug-location !723; is.c:685:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_19__Additiona, 0, debug-location !723; is.c:685:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !723; is.c:685:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @is__str_19__Additiona, debug-location !723; is.c:685:9
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_19__Additiona, 0, debug-location !723; is.c:685:9
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURDi renamable $d0, $fp, -72, debug-location !722 :: (store 8 into %ir.t_total); is.c:684:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(1):   $x0 = ADRP target-flags(aarch64-page) @is__str_19__Additiona, debug-location !723; is.c:685:9
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_19__Additiona, 0, debug-location !723; is.c:685:9
SU(0):   STURDi renamable $d0, $fp, -72, debug-location !722 :: (store 8 into %ir.t_total); is.c:684:17

Fixup kills for %bb.25
********** MI Scheduling **********
main:%bb.26 if.then59
  From: $x8 = MOVZXi 16368, 48
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STURXi renamable $x8, $fp, -72, debug-location !730 :: (store 8 into %ir.t_total); is.c:688:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x8 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURXi renamable $x8, $fp, -72, debug-location !730 :: (store 8 into %ir.t_total); is.c:688:21
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   $x8 = MOVZXi 16368, 48
SU(1):   STURXi renamable $x8, $fp, -72, debug-location !730 :: (store 8 into %ir.t_total); is.c:688:21

Fixup kills for %bb.26
********** MI Scheduling **********
main:%bb.27 if.end60
  From: STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !761; is.c:697:9
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $d1 = LDURDi $fp, -72, debug-location !755 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(2):   STURDi renamable $d0, $fp, -56, debug-location !753 :: (store 8 into %ir.timecounter); is.c:695:21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   renamable $d2 = FDIVDrr renamable $d0, renamable $d1, debug-location !756; is.c:696:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Data Latency=1 Reg=$d2
    SU(4): Anti Latency=0
SU(4):   renamable $d1 = LDURDi $fp, -88 :: (load 8 from %stack.10)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d1
    SU(6): Ord  Latency=0 Memory
SU(5):   renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !757; is.c:696:43
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
    SU(3): Data Latency=1 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(6): Data Latency=1 Reg=$d1
SU(6):   STPDi renamable $d1, renamable $d1, $fp, -11 :: (store 8 into %stack.10), (store 8 into %ir.t_percent)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d1
    SU(4): Ord  Latency=0 Memory
SU(7):   $x0 = ADRP target-flags(aarch64-page) @is__str_23__Sorting__, debug-location !761; is.c:697:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
SU(8):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_23__Sorting__, 0, debug-location !761; is.c:697:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !761; is.c:697:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1 = LDURDi $fp, -72, debug-location !755 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
  Ready @0c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 7 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x0 = ADRP target-flags(aarch64-page) @is__str_23__Sorting__, debug-location !761; is.c:697:9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 2 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_23__Sorting__, 0, debug-location !761; is.c:697:9
  Ready @2c
  TopQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 9
  Cand SU(2) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d2 = FDIVDrr renamable $d0, renamable $d1, debug-location !756; is.c:696:33
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 9
  Cand SU(2) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = LDURDi $fp, -88 :: (load 8 from %stack.10)
  Ready @5c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURDi renamable $d0, $fp, -56, debug-location !753 :: (store 8 into %ir.timecounter); is.c:695:21
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !757; is.c:696:43
  Ready @9c
  TopQ.A TopLatency SU(5) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STPDi renamable $d1, renamable $d1, $fp, -11 :: (store 8 into %stack.10), (store 8 into %ir.t_percent)
  Ready @10c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(1):   renamable $d1 = LDURDi $fp, -72, debug-location !755 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
SU(7):   $x0 = ADRP target-flags(aarch64-page) @is__str_23__Sorting__, debug-location !761; is.c:697:9
SU(8):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_23__Sorting__, 0, debug-location !761; is.c:697:9
SU(0):   STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
SU(3):   renamable $d2 = FDIVDrr renamable $d0, renamable $d1, debug-location !756; is.c:696:33
SU(4):   renamable $d1 = LDURDi $fp, -88 :: (load 8 from %stack.10)
SU(2):   STURDi renamable $d0, $fp, -56, debug-location !753 :: (store 8 into %ir.timecounter); is.c:695:21
SU(5):   renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !757; is.c:696:43
SU(6):   STPDi renamable $d1, renamable $d1, $fp, -11 :: (store 8 into %stack.10), (store 8 into %ir.t_percent)

********** MI Scheduling **********
main:%bb.27 if.end60
  From: STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !751; is.c:694:9
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $d1 = LDURDi $fp, -72, debug-location !745 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(2):   STURDi renamable $d0, $fp, -56, debug-location !743 :: (store 8 into %ir.timecounter); is.c:692:21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   renamable $d2 = FDIVDrr renamable $d0, renamable $d1, debug-location !746; is.c:693:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Data Latency=1 Reg=$d2
    SU(4): Anti Latency=0
SU(4):   renamable $d1 = LDURDi $fp, -88 :: (load 8 from %stack.10)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d1
SU(5):   renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !747; is.c:693:43
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
    SU(3): Data Latency=1 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(7): Data Latency=1 Reg=$d1
    SU(6): Data Latency=1 Reg=$d1
SU(6):   STRDui renamable $d1, $sp, 11 :: (store 8 into %stack.12)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d1
SU(7):   STURDi renamable $d1, $fp, -80, debug-location !748 :: (store 8 into %ir.t_percent); is.c:693:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d1
SU(8):   $x0 = ADRP target-flags(aarch64-page) @is__str_22__Benchmark, debug-location !751; is.c:694:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_22__Benchmark, 0, debug-location !751; is.c:694:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !751; is.c:694:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1 = LDURDi $fp, -72, debug-location !745 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
  Ready @0c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 8 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x0 = ADRP target-flags(aarch64-page) @is__str_22__Benchmark, debug-location !751; is.c:694:9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 2 9 
  TopQ.A RemainingLatency 0 + 2c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_22__Benchmark, 0, debug-location !751; is.c:694:9
  Ready @2c
  TopQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 9
  Cand SU(2) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d2 = FDIVDrr renamable $d0, renamable $d1, debug-location !746; is.c:693:33
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 9
  Cand SU(2) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = LDURDi $fp, -88 :: (load 8 from %stack.10)
  Ready @5c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURDi renamable $d0, $fp, -56, debug-location !743 :: (store 8 into %ir.timecounter); is.c:692:21
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !747; is.c:693:43
  Ready @9c
  TopQ.A TopLatency SU(5) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 10c > CritPath 9
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STRDui renamable $d1, $sp, 11 :: (store 8 into %stack.12)
  Ready @10c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STURDi renamable $d1, $fp, -80, debug-location !748 :: (store 8 into %ir.t_percent); is.c:693:19
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(1):   renamable $d1 = LDURDi $fp, -72, debug-location !745 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
SU(8):   $x0 = ADRP target-flags(aarch64-page) @is__str_22__Benchmark, debug-location !751; is.c:694:9
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_22__Benchmark, 0, debug-location !751; is.c:694:9
SU(0):   STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
SU(3):   renamable $d2 = FDIVDrr renamable $d0, renamable $d1, debug-location !746; is.c:693:33
SU(4):   renamable $d1 = LDURDi $fp, -88 :: (load 8 from %stack.10)
SU(2):   STURDi renamable $d0, $fp, -56, debug-location !743 :: (store 8 into %ir.timecounter); is.c:692:21
SU(5):   renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !747; is.c:693:43
SU(6):   STRDui renamable $d1, $sp, 11 :: (store 8 into %stack.12)
SU(7):   STURDi renamable $d1, $fp, -80, debug-location !748 :: (store 8 into %ir.t_percent); is.c:693:19

********** MI Scheduling **********
main:%bb.27 if.end60
  From: STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !741; is.c:691:9
 RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $d2 = LDURDi $fp, -72, debug-location !735 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d2
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d1
    SU(4): Data Latency=4 Reg=$d1
SU(4):   STURDi renamable $d1, $fp, -88 :: (store 8 into %stack.10)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    SU(7): Anti Latency=0
SU(5):   STURDi renamable $d0, $fp, -56, debug-location !733 :: (store 8 into %ir.timecounter); is.c:689:21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(6):   renamable $d2 = FDIVDrr renamable $d0, renamable $d2, debug-location !736; is.c:690:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    SU(7): Data Latency=1 Reg=$d2
SU(7):   renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !737; is.c:690:43
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=$d2
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(9): Data Latency=1 Reg=$d1
    SU(8): Data Latency=1 Reg=$d1
SU(8):   STRDui renamable $d1, $sp, 11 :: (store 8 into %stack.12)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$d1
SU(9):   STURDi renamable $d1, $fp, -80, debug-location !738 :: (store 8 into %ir.t_percent); is.c:690:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$d1
SU(10):   $x0 = ADRP target-flags(aarch64-page) @is__str_21__Initializ, debug-location !741; is.c:691:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
SU(11):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_21__Initializ, 0, debug-location !741; is.c:691:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !741; is.c:691:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 10 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDURDi $fp, -72, debug-location !735 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 0 10 2 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  2 cycles 
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  Ready @1c
  TopQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 0 10 5 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  2 cycles 
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 4 
Queue TopQ.A: 0 10 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x0 = ADRP target-flags(aarch64-page) @is__str_21__Initializ, debug-location !741; is.c:691:9
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 0 5 11 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(11) TOP-PATH                  1 cycles 
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d2 = FDIVDrr renamable $d0, renamable $d2, debug-location !736; is.c:690:33
  Ready @4c
  TopQ.A TopLatency SU(6) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 0 5 11 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(11) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_21__Initializ, 0, debug-location !741; is.c:691:9
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) STURDi renamable $d1, $fp, -88 :: (store 8 into %stack.10)
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !737; is.c:690:43
  Ready @7c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 9 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 5 9 
  TopQ.A RemainingLatency 0 + 9c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STURDi renamable $d0, $fp, -56, debug-location !733 :: (store 8 into %ir.timecounter); is.c:689:21
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 9 
  TopQ.A RemainingLatency 0 + 10c > CritPath 6
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) STRDui renamable $d1, $sp, 11 :: (store 8 into %stack.12)
  Ready @10c
  TopQ.A TopLatency SU(8) 6c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STURDi renamable $d1, $fp, -80, debug-location !738 :: (store 8 into %ir.t_percent); is.c:690:19
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(1):   renamable $d2 = LDURDi $fp, -72, debug-location !735 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) %const.4
SU(3):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(10):   $x0 = ADRP target-flags(aarch64-page) @is__str_21__Initializ, debug-location !741; is.c:691:9
SU(6):   renamable $d2 = FDIVDrr renamable $d0, renamable $d2, debug-location !736; is.c:690:33
SU(11):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @is__str_21__Initializ, 0, debug-location !741; is.c:691:9
SU(4):   STURDi renamable $d1, $fp, -88 :: (store 8 into %stack.10)
SU(7):   renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !737; is.c:690:43
SU(0):   STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.11)
SU(5):   STURDi renamable $d0, $fp, -56, debug-location !733 :: (store 8 into %ir.timecounter); is.c:689:21
SU(8):   STRDui renamable $d1, $sp, 11 :: (store 8 into %stack.12)
SU(9):   STURDi renamable $d1, $fp, -80, debug-location !738 :: (store 8 into %ir.t_percent); is.c:690:19

Fixup kills for %bb.27
********** MI Scheduling **********
main:%bb.28 do.end76
  From: $w8 = ORRWrs $wzr, $wzr, 0, debug-location !763; is.c:703:5
    To: $sp = frame-destroy ADDXri $sp, 208, 0, debug-location !763; is.c:703:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $w8 = ORRWrs $wzr, $wzr, 0, debug-location !763; is.c:703:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 24, debug-location !763 :: (load 8 from %stack.22), (load 8 from %stack.21); is.c:703:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x19 = frame-destroy LDRXui $sp, 23, debug-location !763 :: (load 8 from %stack.23); is.c:703:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 208, 0, debug-location !763; is.c:703:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $fp, $lr = frame-destroy LDPXi $sp, 24, debug-location !763 :: (load 8 from %stack.22), (load 8 from %stack.21); is.c:703:5
  Ready @0c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x19 = frame-destroy LDRXui $sp, 23, debug-location !763 :: (load 8 from %stack.23); is.c:703:5
  Ready @1c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w8 = ORRWrs $wzr, $wzr, 0, debug-location !763; is.c:703:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 24, debug-location !763 :: (load 8 from %stack.22), (load 8 from %stack.21); is.c:703:5
SU(2):   $x19 = frame-destroy LDRXui $sp, 23, debug-location !763 :: (load 8 from %stack.23); is.c:703:5
SU(0):   $w8 = ORRWrs $wzr, $wzr, 0, debug-location !763; is.c:703:5

Fixup kills for %bb.28
