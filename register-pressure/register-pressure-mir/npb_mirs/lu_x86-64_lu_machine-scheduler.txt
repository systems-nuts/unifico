Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=1, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=96, align=16, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=96, align=16, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 1.984770e+03, align=8
  cp#1: 3.000000e+00, align=8
  cp#2: 2.000000e+00, align=8
  cp#3: -1.092330e+04, align=8
  cp#4: 2.777090e+04, align=8
  cp#5: -1.440100e+05, align=8
  cp#6: 1.000000e+06, align=8
  cp#7: 1.000000e+02, align=8
Function Live Ins: $edi in %0, $rsi in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $edi, $rsi
  %1:gr64 = COPY $rsi
  %0:gr32 = COPY $edi
  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @lu__str_timer_flag, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @lu__str_1_r_, $noreg
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 0, 0, 0, %stack.3.Class, 0, 0, %stack.11.fp, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.11.fp), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = COPY killed $rax
  MOV64mr %stack.11.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  JCC_1 %bb.2, 4, implicit killed $eflags
  JMP_1 %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %5:gr32 = MOV32ri 1
  MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
  %6:gr64 = LEA64r $rip, 1, $noreg, @lu__str_2_total_, $noreg
  MOV64mr %stack.10.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
  %7:gr64 = LEA64r $rip, 1, $noreg, @lu__str_3_rhsx_, $noreg
  MOV64mr %stack.10.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
  %8:gr64 = LEA64r $rip, 1, $noreg, @lu__str_4_rhsy_, $noreg
  MOV64mr %stack.10.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
  %9:gr64 = LEA64r $rip, 1, $noreg, @lu__str_5_rhsz_, $noreg
  MOV64mr %stack.10.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
  %10:gr64 = LEA64r $rip, 1, $noreg, @lu__str_6_rhs_, $noreg
  MOV64mr %stack.10.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
  %11:gr64 = LEA64r $rip, 1, $noreg, @lu__str_7_jacld_, $noreg
  MOV64mr %stack.10.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
  %12:gr64 = LEA64r $rip, 1, $noreg, @lu__str_8_blts_, $noreg
  MOV64mr %stack.10.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
  %13:gr64 = LEA64r $rip, 1, $noreg, @lu__str_9_jacu_, $noreg
  MOV64mr %stack.10.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
  %14:gr64 = LEA64r $rip, 1, $noreg, @lu__str_10_buts_, $noreg
  MOV64mr %stack.10.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
  %15:gr64 = LEA64r $rip, 1, $noreg, @lu__str_11_add_, $noreg
  MOV64mr %stack.10.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
  %16:gr64 = LEA64r $rip, 1, $noreg, @lu__str_12_l2norm_, $noreg
  MOV64mr %stack.10.t_names, 1, $noreg, 88, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10)
  %17:gr64 = MOV64rm %stack.11.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 1, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, %17:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0 :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.14(0x30000000); %bb.4(62.50%), %bb.14(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @read_input, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 2, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @domain, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 3, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @setcoeff, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 4, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @setbv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 5, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @setiv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 6, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @erhs, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 7, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  CALL64pcrel32 @ssor, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 8, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @setbv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 9, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @setiv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 10, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %22:gr32 = MOV32rm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %22:gr32
  CALL64pcrel32 @ssor, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 11, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, %22:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @error, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 12, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @pintgr, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 13, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %23:fr64 = MOVSDrm_alt $rip, 1, $noreg, @frc, $noreg :: (dereferenceable load 8 from @frc)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @rsdnm, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @errnm, $noreg
  $xmm0 = COPY %23:fr64
  $rdx = LEA64r %stack.3.Class, 1, $noreg, 0, $noreg
  $rcx = LEA64r %stack.4.verified, 1, $noreg, 0, $noreg
  CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $rdx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 14, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, %23:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %28:fr64 = CVTSI2SDrm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
  %39:gr32 = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
  %31:fr64 = CVTSI2SDrr %39:gr32
  %31:fr64 = MULSDrm %31:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %32:gr32 = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
  %34:fr64 = CVTSI2SDrr %32:gr32
  %34:fr64 = MULSDrr %34:fr64(tied-def 0), %31:fr64
  %35:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
  %37:fr64 = CVTSI2SDrr %35:gr32
  %37:fr64 = MULSDrr %37:fr64(tied-def 0), %34:fr64
  %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %32:gr32, implicit-def dead $eflags
  %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %42:fr64 = CVTSI2SDrr %39:gr32
  %41:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %41:fr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %43:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  $xmm0 = COPY %42:fr64
  $xmm1 = COPY %43:fr64
  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 15, 0, 0, %stack.3.Class, 0, %28:fr64, %42:fr64, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, %37:fr64, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %46:fr64 = COPY killed $xmm0
  %46:fr64 = MULSDrm %46:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  %46:fr64 = ADDSDrr %46:fr64(tied-def 0), %37:fr64
  undef %126.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
  undef %127.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
  %51:gr32 = LEA64_32r %126:gr64_with_sub_8bit, 1, %127:gr64_nosp, 0, $noreg
  %50:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
  %51:gr32 = nsw ADD32rr %51:gr32(tied-def 0), %50:gr32, implicit-def dead $eflags
  %54:fr64 = CVTSI2SDrr %51:gr32
  %54:fr64 = MULSDrm %54:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  %54:fr64 = DIVSDrr %54:fr64(tied-def 0), %41:fr64
  %54:fr64 = ADDSDrr %54:fr64(tied-def 0), %46:fr64
  %54:fr64 = ADDSDrm %54:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  %54:fr64 = MULSDrr %54:fr64(tied-def 0), %28:fr64
  %58:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
  %59:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
  %59:fr64 = MULSDrr %59:fr64(tied-def 0), %58:fr64
  %54:fr64 = DIVSDrr %54:fr64(tied-def 0), %59:fr64
  MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %54:fr64 :: (store 8 into %ir.mflops)
  %61:gr32 = MOVSX32rm8 %stack.3.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
  %63:gr32 = MOV32rm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
  %64:gr32 = MOV32rm %stack.4.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
  ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %65:gr64 = LEA64r $rip, 1, $noreg, @lu__str_23__none__, $noreg
  MOV64mr $rsp, 1, $noreg, 80, $noreg, %65:gr64 :: (store 8 into stack + 80)
  %67:gr64 = LEA64r $rip, 1, $noreg, @lu__str_22__O3__mcmod, $noreg
  MOV64mr $rsp, 1, $noreg, 72, $noreg, %67:gr64 :: (store 8 into stack + 72)
  %68:gr64 = LEA64r $rip, 1, $noreg, @lu__str_21__g__Wall__, $noreg
  MOV64mr $rsp, 1, $noreg, 64, $noreg, %68:gr64 :: (store 8 into stack + 64)
  %69:gr64 = LEA64r $rip, 1, $noreg, @lu__str_20__I___commo, $noreg
  MOV64mr $rsp, 1, $noreg, 56, $noreg, %69:gr64 :: (store 8 into stack + 56)
  %70:gr64 = LEA64r $rip, 1, $noreg, @lu__str_19__lm_, $noreg
  MOV64mr $rsp, 1, $noreg, 48, $noreg, %70:gr64 :: (store 8 into stack + 48)
  %71:gr64 = LEA64r $rip, 1, $noreg, @lu__str_18___CC__, $noreg
  MOV64mr $rsp, 1, $noreg, 40, $noreg, %71:gr64 :: (store 8 into stack + 40)
  %72:gr64 = LEA64r $rip, 1, $noreg, @lu__str_17_gcc_, $noreg
  MOV64mr $rsp, 1, $noreg, 32, $noreg, %72:gr64 :: (store 8 into stack + 32)
  %73:gr64 = LEA64r $rip, 1, $noreg, @lu__str_16_03_Nov_201, $noreg
  MOV64mr $rsp, 1, $noreg, 24, $noreg, %73:gr64 :: (store 8 into stack + 24)
  %74:gr64 = LEA64r $rip, 1, $noreg, @lu__str_15_3_3_1_, $noreg
  MOV64mr $rsp, 1, $noreg, 16, $noreg, %74:gr64 :: (store 8 into stack + 16)
  MOV32mr $rsp, 1, $noreg, 8, $noreg, %64:gr32 :: (store 4 into stack + 8)
  %75:gr64 = LEA64r $rip, 1, $noreg, @lu__str_14___________, $noreg
  MOV64mr $rsp, 1, $noreg, 0, $noreg, %75:gr64 :: (store 8 into stack)
  $rdi = LEA64r $rip, 1, $noreg, @lu__str_13_LU_, $noreg
  $esi = COPY %61:gr32
  $edx = COPY %126.sub_32bit:gr64_with_sub_8bit
  $ecx = COPY %127.sub_32bit:gr64_nosp
  $r8d = COPY %50:gr32
  $r9d = COPY %63:gr32
  $xmm0 = COPY %58:fr64
  $xmm1 = COPY %54:fr64
  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 88, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 16, 0, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %61.sub_8bit:gr32, %126.sub_32bit:gr64_with_sub_8bit, %127.sub_32bit:gr64_nosp, %50:gr32, %63:gr32, %58:fr64, %54:fr64, %64:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.14, 4, implicit killed $eflags
  JMP_1 %bb.4

bb.4.if.then31:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %77:gr32 = MOV32ri 1
  MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %77:gr32 :: (store 4 into %ir.i)
  %124:gr64 = LEA64r %stack.8.trecs, 1, $noreg, 0, $noreg

bb.5.for.cond:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  CMP32mi8 %stack.9.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.7, 15, implicit killed $eflags
  JMP_1 %bb.6

bb.6.for.body:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %121:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %121:gr32
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 17, 0, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %121:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %122:fr64 = COPY killed $xmm0
  %123:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  MOVSDmr %124:gr64, 8, %123:gr64_nosp, 0, $noreg, %122:fr64 :: (store 8 into %ir.arrayidx35)
  INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.5

bb.7.for.end:
; predecessors: %bb.5
  successors: %bb.8(0x50000000), %bb.9(0x30000000); %bb.8(62.50%), %bb.9(37.50%)

  %80:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
  MOVSDmr %stack.7.tmax, 1, $noreg, 0, $noreg, %80:fr64 :: (store 8 into %ir.tmax)
  %81:fr64 = FsFLD0SD
  UCOMISDrr %80:fr64, %81:fr64, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit $eflags
  JCC_1 %bb.9, 10, implicit killed $eflags
  JMP_1 %bb.8

bb.8.if.then38:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %82:gr64 = MOV64ri 4607182418800017408
  MOV64mr %stack.7.tmax, 1, $noreg, 0, $noreg, %82:gr64 :: (store 8 into %ir.tmax)

bb.9.if.end39:
; predecessors: %bb.7, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @lu__str_24___SECTION_, $noreg
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 18, 0, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %87:gr32 = MOV32ri 1
  MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %87:gr32 :: (store 4 into %ir.i)
  %92:gr64 = LEA64r %stack.10.t_names, 1, $noreg, 0, $noreg
  %94:gr64 = LEA64r %stack.8.trecs, 1, $noreg, 0, $noreg
  %125:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)

bb.10.for.cond41:
; predecessors: %bb.9, %bb.13
  successors: %bb.11(0x7c000000), %bb.14(0x04000000); %bb.11(96.88%), %bb.14(3.12%)

  CMP32mi8 %stack.9.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.14, 15, implicit killed $eflags
  JMP_1 %bb.11

bb.11.for.body44:
; predecessors: %bb.10
  successors: %bb.12(0x40000000), %bb.13(0x40000000); %bb.12(50.00%), %bb.13(50.00%)

  %91:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %93:gr64 = MOV64rm %92:gr64, 8, %91:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx46)
  %95:fr64 = MOVSDrm_alt %94:gr64, 8, %91:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx50)
  %97:fr64 = COPY %95:fr64
  %97:fr64 = MULSDrr %97:fr64(tied-def 0), %125:fr64
  %97:fr64 = DIVSDrm %97:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @lu__str_25_____8s__9_, $noreg
  $rsi = COPY %93:gr64
  $xmm0 = COPY %95:fr64
  $xmm1 = COPY %97:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 19, 0, %97:fr64, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %93:gr64, %95:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.9.i, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.12

bb.12.if.then56:
; predecessors: %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %105:fr64 = MOVSDrm_alt %stack.8.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
  %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx58)
  %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %105:fr64 :: (store 8 into %ir.t)
  %108:fr64 = COPY %105:fr64
  %108:fr64 = MULSDrr %108:fr64(tied-def 0), %125:fr64
  %108:fr64 = DIVSDrm %108:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @lu__str_26___________, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @lu__str_27_sub_rhs_, $noreg
  $xmm0 = COPY %105:fr64
  $xmm1 = COPY %108:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 20, 0, %108:fr64, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %105:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %113:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %116:fr64 = MOVSDrm_alt %94:gr64, 8, %113:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx66)
  %116:fr64 = SUBSDrm %116:fr64(tied-def 0), %stack.6.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %116:fr64 :: (store 8 into %ir.t)
  %118:fr64 = COPY %116:fr64
  %118:fr64 = MULSDrr %118:fr64(tied-def 0), %125:fr64
  %118:fr64 = DIVSDrm %118:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = LEA64r $rip, 1, $noreg, @lu__str_26___________, $noreg
  $rsi = LEA64r $rip, 1, $noreg, @lu__str_28_rest_rhs_, $noreg
  $xmm0 = COPY %116:fr64
  $xmm1 = COPY %118:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 21, 0, %118:fr64, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %116:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.13.if.end71:
; predecessors: %bb.11, %bb.12
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.10

bb.14.if.end75:
; predecessors: %bb.3, %bb.10

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, killed $eax

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %4:gr64 = COPY killed $rax
    To: JCC_1 %bb.2, 4, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %4:gr64 = COPY killed $rax
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%4
    SU(1): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(1):   MOV64mr %stack.11.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(2):   TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.11.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %4:gr64 = COPY killed $rax
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %4:gr64 = COPY killed $rax
SU(1):   MOV64mr %stack.11.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
SU(2):   TEST64rr %4:gr64, %4:gr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.0 entry
  From: $rdi = LEA64r $rip, 1, $noreg, @lu__str_timer_flag, $noreg
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @lu__str_timer_flag, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @lu__str_1_r_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @lu__str_1_r_, $noreg
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @lu__str_timer_flag, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @lu__str_timer_flag, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @lu__str_1_r_, $noreg

********** MI Scheduling **********
main:%bb.0 entry
  From: %1:gr64 = COPY $rsi
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 0 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %0:gr32 = COPY $edi
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:gr64 = COPY $rsi
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gr64 = COPY $rsi
SU(1):   %0:gr32 = COPY $edi
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)

********** MI Scheduling **********
main:%bb.1 if.then
  From: %5:gr32 = MOV32ri 1
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 25
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=2
Live In: 
Live Out: %17 
Live Thru: 
  LiveReg: %17
Top Pressure:

Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   %5:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%5
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %6:gr64 = LEA64r $rip, 1, $noreg, @lu__str_2_total_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%6
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr %stack.10.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
  # preds left       : 1
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%6
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %7:gr64 = LEA64r $rip, 1, $noreg, @lu__str_3_rhsx_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%7
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr %stack.10.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%7
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %8:gr64 = LEA64r $rip, 1, $noreg, @lu__str_4_rhsy_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%8
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr %stack.10.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
  # preds left       : 3
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%8
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %9:gr64 = LEA64r $rip, 1, $noreg, @lu__str_5_rhsz_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%9
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV64mr %stack.10.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 4
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%9
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %10:gr64 = LEA64r $rip, 1, $noreg, @lu__str_6_rhs_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%10
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   MOV64mr %stack.10.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
  # preds left       : 5
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%10
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %11:gr64 = LEA64r $rip, 1, $noreg, @lu__str_7_jacld_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%11
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV64mr %stack.10.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%11
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %12:gr64 = LEA64r $rip, 1, $noreg, @lu__str_8_blts_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%12
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   MOV64mr %stack.10.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
  # preds left       : 7
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%12
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %13:gr64 = LEA64r $rip, 1, $noreg, @lu__str_9_jacu_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%13
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(17):   MOV64mr %stack.10.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 8
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%13
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   %14:gr64 = LEA64r $rip, 1, $noreg, @lu__str_10_buts_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(19): Data Latency=1 Reg=%14
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(19):   MOV64mr %stack.10.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
  # preds left       : 9
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%14
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(20):   %15:gr64 = LEA64r $rip, 1, $noreg, @lu__str_11_add_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(21): Data Latency=1 Reg=%15
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(21):   MOV64mr %stack.10.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 10
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(20): Data Latency=1 Reg=%15
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(22):   %16:gr64 = LEA64r $rip, 1, $noreg, @lu__str_12_l2norm_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(23): Data Latency=1 Reg=%16
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(23):   MOV64mr %stack.10.t_names, 1, $noreg, 88, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10)
  # preds left       : 11
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(22): Data Latency=1 Reg=%16
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %17:gr64 = MOV64rm %stack.11.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(24): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 1 24 
  Cand SU(23) ORDER                              
  Cand SU(24) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(24) %17:gr64 = MOV64rm %stack.11.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
Bottom Pressure:

  Ready @3c
  BotQ.A BotLatency SU(24) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 1 
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) MOV64mr %stack.10.t_names, 1, $noreg, 88, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10)
Bottom Pressure:
GR16=2
  LiveReg: %16
  UpdateRegP: SU(23) MOV64mr %stack.10.t_names, 1, $noreg, 88, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10)
              to 
  Ready @0c
  BotQ.A TopLatency SU(23) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 22 21 
  Cand SU(1) ORDER                              
  Cand SU(22) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(22) %16:gr64 = LEA64r $rip, 1, $noreg, @lu__str_12_l2norm_, $noreg
Bottom Pressure:

  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 21 
  Cand SU(1) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) MOV64mr %stack.10.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %15
  UpdateRegP: SU(21) MOV64mr %stack.10.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 20 19 
  Cand SU(1) ORDER                              
  Cand SU(20) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(20) %15:gr64 = LEA64r $rip, 1, $noreg, @lu__str_11_add_, $noreg
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 19 
  Cand SU(1) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) MOV64mr %stack.10.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
Bottom Pressure:
GR16=2
  LiveReg: %14
  UpdateRegP: SU(19) MOV64mr %stack.10.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
              to 
  Ready @1c
  BotQ.A TopLatency SU(19) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(18) %14:gr64 = LEA64r $rip, 1, $noreg, @lu__str_10_buts_, $noreg
Bottom Pressure:

  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 17 
  Cand SU(1) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) MOV64mr %stack.10.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %13
  UpdateRegP: SU(17) MOV64mr %stack.10.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 15 
  Cand SU(1) ORDER                              
  Cand SU(16) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(16) %13:gr64 = LEA64r $rip, 1, $noreg, @lu__str_9_jacu_, $noreg
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 15 
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV64mr %stack.10.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
Bottom Pressure:
GR16=2
  LiveReg: %12
  UpdateRegP: SU(15) MOV64mr %stack.10.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
              to 
  Ready @2c
  BotQ.A TopLatency SU(15) 1c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 14 13 
  Cand SU(1) ORDER                              
  Cand SU(14) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(14) %12:gr64 = LEA64r $rip, 1, $noreg, @lu__str_8_blts_, $noreg
Bottom Pressure:

  Ready @3c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 13 
  Cand SU(1) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mr %stack.10.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %11
  UpdateRegP: SU(13) MOV64mr %stack.10.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
              to 
  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 12 11 
  Cand SU(1) ORDER                              
  Cand SU(12) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(12) %11:gr64 = LEA64r $rip, 1, $noreg, @lu__str_7_jacld_, $noreg
Bottom Pressure:

  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 11 
  Cand SU(1) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr %stack.10.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
Bottom Pressure:
GR16=2
  LiveReg: %10
  UpdateRegP: SU(11) MOV64mr %stack.10.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
              to 
  Ready @3c
  BotQ.A TopLatency SU(11) 1c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 10 9 
  Cand SU(1) ORDER                              
  Cand SU(10) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(10) %10:gr64 = LEA64r $rip, 1, $noreg, @lu__str_6_rhs_, $noreg
Bottom Pressure:

  Ready @4c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 9 
  Cand SU(1) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mr %stack.10.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %9
  UpdateRegP: SU(9) MOV64mr %stack.10.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
              to 
  Ready @3c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 7 
  Cand SU(1) ORDER                              
  Cand SU(8) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(8) %9:gr64 = LEA64r $rip, 1, $noreg, @lu__str_5_rhsz_, $noreg
Bottom Pressure:

  Ready @4c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr %stack.10.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
Bottom Pressure:
GR16=2
  LiveReg: %8
  UpdateRegP: SU(7) MOV64mr %stack.10.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
              to 
  Ready @4c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 5 
  Cand SU(1) ORDER                              
  Cand SU(6) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(6) %8:gr64 = LEA64r $rip, 1, $noreg, @lu__str_4_rhsy_, $noreg
Bottom Pressure:

  Ready @5c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr %stack.10.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %7
  UpdateRegP: SU(5) MOV64mr %stack.10.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
              to 
  Ready @4c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(4) %7:gr64 = LEA64r $rip, 1, $noreg, @lu__str_3_rhsx_, $noreg
Bottom Pressure:

  Ready @5c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr %stack.10.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
Bottom Pressure:
GR16=2
  LiveReg: %6
  UpdateRegP: SU(3) MOV64mr %stack.10.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
              to 
  Ready @5c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(2) %6:gr64 = LEA64r $rip, 1, $noreg, @lu__str_2_total_, $noreg
Bottom Pressure:

  Ready @6c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
Bottom Pressure:
GR16=2
  LiveReg: %5
  UpdateRegP: SU(1) MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
              to 
  Ready @5c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:gr32 = MOV32ri 1
Bottom Pressure:

  Ready @6c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %5:gr32 = MOV32ri 1
SU(1):   MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
SU(2):   %6:gr64 = LEA64r $rip, 1, $noreg, @lu__str_2_total_, $noreg
SU(3):   MOV64mr %stack.10.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
SU(4):   %7:gr64 = LEA64r $rip, 1, $noreg, @lu__str_3_rhsx_, $noreg
SU(5):   MOV64mr %stack.10.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
SU(6):   %8:gr64 = LEA64r $rip, 1, $noreg, @lu__str_4_rhsy_, $noreg
SU(7):   MOV64mr %stack.10.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
SU(8):   %9:gr64 = LEA64r $rip, 1, $noreg, @lu__str_5_rhsz_, $noreg
SU(9):   MOV64mr %stack.10.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
SU(10):   %10:gr64 = LEA64r $rip, 1, $noreg, @lu__str_6_rhs_, $noreg
SU(11):   MOV64mr %stack.10.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
SU(12):   %11:gr64 = LEA64r $rip, 1, $noreg, @lu__str_7_jacld_, $noreg
SU(13):   MOV64mr %stack.10.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
SU(14):   %12:gr64 = LEA64r $rip, 1, $noreg, @lu__str_8_blts_, $noreg
SU(15):   MOV64mr %stack.10.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
SU(16):   %13:gr64 = LEA64r $rip, 1, $noreg, @lu__str_9_jacu_, $noreg
SU(17):   MOV64mr %stack.10.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
SU(18):   %14:gr64 = LEA64r $rip, 1, $noreg, @lu__str_10_buts_, $noreg
SU(19):   MOV64mr %stack.10.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
SU(20):   %15:gr64 = LEA64r $rip, 1, $noreg, @lu__str_11_add_, $noreg
SU(21):   MOV64mr %stack.10.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
SU(22):   %16:gr64 = LEA64r $rip, 1, $noreg, @lu__str_12_l2norm_, $noreg
SU(23):   MOV64mr %stack.10.t_names, 1, $noreg, 88, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10)
SU(24):   %17:gr64 = MOV64rm %stack.11.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %65:gr64 = LEA64r $rip, 1, $noreg, @lu__str_23__none__, $noreg
    To: CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 29
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=4
GR16=20
Live In: %54 %58 %63 %50 %127 %126 %61 %64 
Live Out: %54 %58 %63 %50 %127 %126 %61 %64 
Live Thru: FR32=2
FR32X=2
GR16=12
  LiveReg: %54
  UpdateRegP: SU(28) $xmm1 = COPY %54:fr64
              to FR32 -1    FR32X -1
  LiveReg: %58
  UpdateRegP: SU(27) $xmm0 = COPY %58:fr64
              to FR32 -1    FR32X -1
  LiveReg: %63
  UpdateRegP: SU(26) $r9d = COPY %63:gr32
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  LiveReg: %50
  UpdateRegP: SU(25) $r8d = COPY %50:gr32
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  LiveReg: %127
  UpdateRegP: SU(24) $ecx = COPY %127.sub_32bit:gr64_nosp
              to GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  LiveReg: %126
  UpdateRegP: SU(23) $edx = COPY %126.sub_32bit:gr64_with_sub_8bit
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  LiveReg: %61
  UpdateRegP: SU(22) $esi = COPY %61:gr32
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  LiveReg: %64
  UpdateRegP: SU(18) MOV32mr $rsp, 1, $noreg, 8, $noreg, %64:gr32 :: (store 4 into stack + 8)
              to 
Top Pressure:
FR32=2
FR32X=2
GR16=12
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=4
GR16=20
Excess PSets: 
SU(0):   %65:gr64 = LEA64r $rip, 1, $noreg, @lu__str_23__none__, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%65
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV64mr $rsp, 1, $noreg, 80, $noreg, %65:gr64 :: (store 8 into stack + 80)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%65
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %67:gr64 = LEA64r $rip, 1, $noreg, @lu__str_22__O3__mcmod, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%67
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr $rsp, 1, $noreg, 72, $noreg, %67:gr64 :: (store 8 into stack + 72)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%67
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %68:gr64 = LEA64r $rip, 1, $noreg, @lu__str_21__g__Wall__, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%68
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr $rsp, 1, $noreg, 64, $noreg, %68:gr64 :: (store 8 into stack + 64)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%68
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %69:gr64 = LEA64r $rip, 1, $noreg, @lu__str_20__I___commo, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%69
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr $rsp, 1, $noreg, 56, $noreg, %69:gr64 :: (store 8 into stack + 56)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%69
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %70:gr64 = LEA64r $rip, 1, $noreg, @lu__str_19__lm_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%70
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %70:gr64 :: (store 8 into stack + 48)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%70
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %71:gr64 = LEA64r $rip, 1, $noreg, @lu__str_18___CC__, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%71
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %71:gr64 :: (store 8 into stack + 40)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%71
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %72:gr64 = LEA64r $rip, 1, $noreg, @lu__str_17_gcc_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%72
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %72:gr64 :: (store 8 into stack + 32)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%72
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %73:gr64 = LEA64r $rip, 1, $noreg, @lu__str_16_03_Nov_201, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%73
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %73:gr64 :: (store 8 into stack + 24)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%73
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %74:gr64 = LEA64r $rip, 1, $noreg, @lu__str_15_3_3_1_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%74
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(17):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %74:gr64 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%74
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %64:gr32 :: (store 4 into stack + 8)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %75:gr64 = LEA64r $rip, 1, $noreg, @lu__str_14___________, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%75
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(20):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %75:gr64 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%75
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   $rdi = LEA64r $rip, 1, $noreg, @lu__str_13_LU_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(22):   $esi = COPY %61:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  Single Issue       : false;
SU(23):   $edx = COPY %126.sub_32bit:gr64_with_sub_8bit
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Single Issue       : false;
SU(24):   $ecx = COPY %127.sub_32bit:gr64_nosp
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  Single Issue       : false;
SU(25):   $r8d = COPY %50:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(26):   $r9d = COPY %63:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(27):   $xmm0 = COPY %58:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(28):   $xmm1 = COPY %54:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=0 Artificial
    SU(22): Ord  Latency=0 Artificial
    SU(21): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 28 27 26 25 24 23 22 21 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(28) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(28) $xmm1 = COPY %54:fr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=3
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=3
GR16=20
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 27 26 25 24 23 22 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(27) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(27) $xmm0 = COPY %58:fr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=20
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 26 25 24 23 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) $r9d = COPY %63:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
FR32X=2
GR16=19
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 25 24 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) $r8d = COPY %50:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
FR32X=2
GR16=18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 24 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) $ecx = COPY %127.sub_32bit:gr64_nosp
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
FR32X=2
GR16=16
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) $edx = COPY %126.sub_32bit:gr64_with_sub_8bit
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=2
GR16=14
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(22) $esi = COPY %61:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
FR32X=2
GR16=13
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) $rdi = LEA64r $rip, 1, $noreg, @lu__str_13_LU_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
  BotQ.A BotLatency SU(21) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) MOV64mr $rsp, 1, $noreg, 0, $noreg, %75:gr64 :: (store 8 into stack)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %75
  UpdateRegP: SU(20) MOV64mr $rsp, 1, $noreg, 0, $noreg, %75:gr64 :: (store 8 into stack)
              to 
  Ready @0c
  BotQ.A TopLatency SU(20) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 
  Cand SU(1) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %75:gr64 = LEA64r $rip, 1, $noreg, @lu__str_14___________, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 
  Cand SU(1) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) MOV32mr $rsp, 1, $noreg, 8, $noreg, %64:gr32 :: (store 4 into stack + 8)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 17 15 13 11 9 7 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) MOV64mr $rsp, 1, $noreg, 16, $noreg, %74:gr64 :: (store 8 into stack + 16)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %74
  UpdateRegP: SU(17) MOV64mr $rsp, 1, $noreg, 16, $noreg, %74:gr64 :: (store 8 into stack + 16)
              to 
  Ready @1c
  BotQ.A TopLatency SU(17) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 15 13 11 9 7 16 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %74:gr64 = LEA64r $rip, 1, $noreg, @lu__str_15_3_3_1_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 15 13 11 9 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV64mr $rsp, 1, $noreg, 24, $noreg, %73:gr64 :: (store 8 into stack + 24)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %73
  UpdateRegP: SU(15) MOV64mr $rsp, 1, $noreg, 24, $noreg, %73:gr64 :: (store 8 into stack + 24)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 13 11 9 14 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %73:gr64 = LEA64r $rip, 1, $noreg, @lu__str_16_03_Nov_201, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 13 11 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mr $rsp, 1, $noreg, 32, $noreg, %72:gr64 :: (store 8 into stack + 32)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %72
  UpdateRegP: SU(13) MOV64mr $rsp, 1, $noreg, 32, $noreg, %72:gr64 :: (store 8 into stack + 32)
              to 
  Ready @2c
  BotQ.A TopLatency SU(13) 1c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 11 12 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %72:gr64 = LEA64r $rip, 1, $noreg, @lu__str_17_gcc_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 11 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr $rsp, 1, $noreg, 40, $noreg, %71:gr64 :: (store 8 into stack + 40)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %71
  UpdateRegP: SU(11) MOV64mr $rsp, 1, $noreg, 40, $noreg, %71:gr64 :: (store 8 into stack + 40)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 10 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %71:gr64 = LEA64r $rip, 1, $noreg, @lu__str_18___CC__, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @3c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mr $rsp, 1, $noreg, 48, $noreg, %70:gr64 :: (store 8 into stack + 48)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %70
  UpdateRegP: SU(9) MOV64mr $rsp, 1, $noreg, 48, $noreg, %70:gr64 :: (store 8 into stack + 48)
              to 
  Ready @3c
  BotQ.A TopLatency SU(9) 1c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 8 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %70:gr64 = LEA64r $rip, 1, $noreg, @lu__str_19__lm_, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @4c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr $rsp, 1, $noreg, 56, $noreg, %69:gr64 :: (store 8 into stack + 56)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %69
  UpdateRegP: SU(7) MOV64mr $rsp, 1, $noreg, 56, $noreg, %69:gr64 :: (store 8 into stack + 56)
              to 
  Ready @3c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 6 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %69:gr64 = LEA64r $rip, 1, $noreg, @lu__str_20__I___commo, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @4c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr $rsp, 1, $noreg, 64, $noreg, %68:gr64 :: (store 8 into stack + 64)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %68
  UpdateRegP: SU(5) MOV64mr $rsp, 1, $noreg, 64, $noreg, %68:gr64 :: (store 8 into stack + 64)
              to 
  Ready @4c
  BotQ.A TopLatency SU(5) 1c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %68:gr64 = LEA64r $rip, 1, $noreg, @lu__str_21__g__Wall__, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @5c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr $rsp, 1, $noreg, 72, $noreg, %67:gr64 :: (store 8 into stack + 72)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %67
  UpdateRegP: SU(3) MOV64mr $rsp, 1, $noreg, 72, $noreg, %67:gr64 :: (store 8 into stack + 72)
              to 
  Ready @4c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %67:gr64 = LEA64r $rip, 1, $noreg, @lu__str_22__O3__mcmod, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @5c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $rsp, 1, $noreg, 80, $noreg, %65:gr64 :: (store 8 into stack + 80)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %65
  UpdateRegP: SU(1) MOV64mr $rsp, 1, $noreg, 80, $noreg, %65:gr64 :: (store 8 into stack + 80)
              to 
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %65:gr64 = LEA64r $rip, 1, $noreg, @lu__str_23__none__, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @6c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %65:gr64 = LEA64r $rip, 1, $noreg, @lu__str_23__none__, $noreg
SU(1):   MOV64mr $rsp, 1, $noreg, 80, $noreg, %65:gr64 :: (store 8 into stack + 80)
SU(2):   %67:gr64 = LEA64r $rip, 1, $noreg, @lu__str_22__O3__mcmod, $noreg
SU(3):   MOV64mr $rsp, 1, $noreg, 72, $noreg, %67:gr64 :: (store 8 into stack + 72)
SU(4):   %68:gr64 = LEA64r $rip, 1, $noreg, @lu__str_21__g__Wall__, $noreg
SU(5):   MOV64mr $rsp, 1, $noreg, 64, $noreg, %68:gr64 :: (store 8 into stack + 64)
SU(6):   %69:gr64 = LEA64r $rip, 1, $noreg, @lu__str_20__I___commo, $noreg
SU(7):   MOV64mr $rsp, 1, $noreg, 56, $noreg, %69:gr64 :: (store 8 into stack + 56)
SU(8):   %70:gr64 = LEA64r $rip, 1, $noreg, @lu__str_19__lm_, $noreg
SU(9):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %70:gr64 :: (store 8 into stack + 48)
SU(10):   %71:gr64 = LEA64r $rip, 1, $noreg, @lu__str_18___CC__, $noreg
SU(11):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %71:gr64 :: (store 8 into stack + 40)
SU(12):   %72:gr64 = LEA64r $rip, 1, $noreg, @lu__str_17_gcc_, $noreg
SU(13):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %72:gr64 :: (store 8 into stack + 32)
SU(14):   %73:gr64 = LEA64r $rip, 1, $noreg, @lu__str_16_03_Nov_201, $noreg
SU(15):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %73:gr64 :: (store 8 into stack + 24)
SU(16):   %74:gr64 = LEA64r $rip, 1, $noreg, @lu__str_15_3_3_1_, $noreg
SU(17):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %74:gr64 :: (store 8 into stack + 16)
SU(18):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %64:gr32 :: (store 4 into stack + 8)
SU(19):   %75:gr64 = LEA64r $rip, 1, $noreg, @lu__str_14___________, $noreg
SU(20):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %75:gr64 :: (store 8 into stack)
SU(21):   $rdi = LEA64r $rip, 1, $noreg, @lu__str_13_LU_, $noreg
SU(22):   $esi = COPY %61:gr32
SU(23):   $edx = COPY %126.sub_32bit:gr64_with_sub_8bit
SU(24):   $ecx = COPY %127.sub_32bit:gr64_nosp
SU(25):   $r8d = COPY %50:gr32
SU(26):   $r9d = COPY %63:gr32
SU(27):   $xmm0 = COPY %58:fr64
SU(28):   $xmm1 = COPY %54:fr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: %46:fr64 = COPY killed $xmm0
    To: ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 22
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=4
FR32X=4
GR16=12
Live In: %28 %41 %37 XMM0 
Live Out: %64 %63 %61 %54 %58 %50 %126 %127 
Live Thru: 
  LiveReg: %64
  LiveReg: %63
  LiveReg: %61
  LiveReg: %54
  UpdateRegP: SU(18) MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %54:fr64 :: (store 8 into %ir.mflops)
              to 
  LiveReg: %58
  UpdateRegP: SU(16) %59:fr64 = MULSDrr %59:fr64(tied-def 0), %58:fr64
              to 
  LiveReg: %50
  UpdateRegP: SU(7) %51:gr32 = nsw ADD32rr %51:gr32(tied-def 0), %50:gr32, implicit-def dead $eflags
              to 
  LiveReg: %126
  UpdateRegP: SU(5) %51:gr32 = LEA64_32r %126:gr64_with_sub_8bit, 1, %127:gr64_nosp, 0, $noreg
              to 
  LiveReg: %127
  UpdateRegP: SU(5) %51:gr32 = LEA64_32r %126:gr64_with_sub_8bit, 1, %127:gr64_nosp, 0, $noreg
              to GR16 -2
Top Pressure:
FR32=4
FR32X=4
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
Excess PSets: 
SU(0):   %46:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 21
  Successors:
    SU(1): Data Latency=0 Reg=%46
    SU(1): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %46:fr64 = MULSDrm %46:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Predecessors:
    SU(0): Data Latency=0 Reg=%46
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%46
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %46:fr64 = ADDSDrr %46:fr64(tied-def 0), %37:fr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(1): Data Latency=4 Reg=%46
    SU(1): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%46
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   undef %126.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Successors:
    SU(5): Data Latency=4 Reg=%126
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   undef %127.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Successors:
    SU(5): Data Latency=4 Reg=%127
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %51:gr32 = LEA64_32r %126:gr64_with_sub_8bit, 1, %127:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 33
  Predecessors:
    SU(4): Data Latency=4 Reg=%127
    SU(3): Data Latency=4 Reg=%126
  Successors:
    SU(7): Data Latency=1 Reg=%51
    SU(7): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %50:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
    SU(7): Data Latency=4 Reg=%50
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %51:gr32 = nsw ADD32rr %51:gr32(tied-def 0), %50:gr32, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 32
  Predecessors:
    SU(5): Data Latency=1 Reg=%51
    SU(6): Data Latency=4 Reg=%50
    SU(5): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%51
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %54:fr64 = CVTSI2SDrr %51:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 31
  Predecessors:
    SU(7): Data Latency=1 Reg=%51
  Successors:
    SU(9): Data Latency=1 Reg=%54
    SU(9): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(9):   %54:fr64 = MULSDrm %54:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 30
  Predecessors:
    SU(8): Data Latency=1 Reg=%54
    SU(8): Out  Latency=0
  Successors:
    SU(10): Data Latency=4 Reg=%54
    SU(10): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %54:fr64 = DIVSDrr %54:fr64(tied-def 0), %41:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 11
  Height             : 26
  Predecessors:
    SU(9): Data Latency=4 Reg=%54
    SU(9): Out  Latency=0
  Successors:
    SU(11): Data Latency=10 Reg=%54
    SU(11): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(11):   %54:fr64 = ADDSDrr %54:fr64(tied-def 0), %46:fr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 16
  Predecessors:
    SU(10): Data Latency=10 Reg=%54
    SU(10): Out  Latency=0
    SU(2): Data Latency=1 Reg=%46
  Successors:
    SU(12): Data Latency=1 Reg=%54
    SU(12): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(12):   %54:fr64 = ADDSDrm %54:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 15
  Predecessors:
    SU(11): Data Latency=1 Reg=%54
    SU(11): Out  Latency=0
  Successors:
    SU(13): Data Latency=4 Reg=%54
    SU(13): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %54:fr64 = MULSDrr %54:fr64(tied-def 0), %28:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 11
  Predecessors:
    SU(12): Data Latency=4 Reg=%54
    SU(12): Out  Latency=0
  Successors:
    SU(17): Data Latency=1 Reg=%54
    SU(17): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(14):   %58:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(16): Data Latency=4 Reg=%58
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(15):   %59:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(16): Data Latency=4 Reg=%59
    SU(16): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(16):   %59:fr64 = MULSDrr %59:fr64(tied-def 0), %58:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(15): Data Latency=4 Reg=%59
    SU(15): Out  Latency=0
    SU(14): Data Latency=4 Reg=%58
  Successors:
    SU(17): Data Latency=1 Reg=%59
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %54:fr64 = DIVSDrr %54:fr64(tied-def 0), %59:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 27
  Height             : 10
  Predecessors:
    SU(13): Data Latency=1 Reg=%54
    SU(16): Data Latency=1 Reg=%59
    SU(13): Out  Latency=0
  Successors:
    SU(18): Data Latency=10 Reg=%54
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(18):   MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %54:fr64 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 37
  Height             : 0
  Predecessors:
    SU(17): Data Latency=10 Reg=%54
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %61:gr32 = MOVSX32rm8 %stack.3.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(20):   %63:gr32 = MOV32rm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(21):   %64:gr32 = MOV32rm %stack.4.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(21): Ord  Latency=3 Artificial
    SU(20): Ord  Latency=3 Artificial
    SU(19): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 37
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 21 20 19 
  Cand SU(18) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %64:gr32 = MOV32rm %stack.4.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  Ready @3c
  BotQ.A BotLatency SU(21) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 19 20 
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %63:gr32 = MOV32rm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 19 
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %61:gr32 = MOVSX32rm8 %stack.3.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 
Scheduling SU(18) MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %54:fr64 :: (store 8 into %ir.mflops)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @0c
  BotQ.A TopLatency SU(18) 37c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 
Scheduling SU(17) %54:fr64 = DIVSDrr %54:fr64(tied-def 0), %59:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %54
  UpdateRegP: SU(17) %54:fr64 = DIVSDrr %54:fr64(tied-def 0), %59:fr64
              to 
  LiveReg: %59
  UpdateRegP: SU(17) %54:fr64 = DIVSDrr %54:fr64(tied-def 0), %59:fr64
              to FR32 -1    FR32X -1
  Ready @10c
  BotQ.A BotLatency SU(17) 10c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 13 
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %59:fr64 = MULSDrr %59:fr64(tied-def 0), %58:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %59
  UpdateRegP: SU(16) %59:fr64 = MULSDrr %59:fr64(tied-def 0), %58:fr64
              to FR32 -1    FR32X -1
  Ready @11c
  BotQ.A BotLatency SU(16) 11c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 15 14 
  Cand SU(13) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %59:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @15c
  BotQ.A BotLatency SU(15) 15c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %58:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @15c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) %54:fr64 = MULSDrr %54:fr64(tied-def 0), %28:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %54
  UpdateRegP: SU(13) %54:fr64 = MULSDrr %54:fr64(tied-def 0), %28:fr64
              to 
  LiveReg: %28
  UpdateRegP: SU(13) %54:fr64 = MULSDrr %54:fr64(tied-def 0), %28:fr64
              to FR32 -1    FR32X -1
  Ready @11c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %54:fr64 = ADDSDrm %54:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %54
  UpdateRegP: SU(12) %54:fr64 = ADDSDrm %54:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @15c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) %54:fr64 = ADDSDrr %54:fr64(tied-def 0), %46:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %54
  UpdateRegP: SU(11) %54:fr64 = ADDSDrr %54:fr64(tied-def 0), %46:fr64
              to 
  LiveReg: %46
  UpdateRegP: SU(11) %54:fr64 = ADDSDrr %54:fr64(tied-def 0), %46:fr64
              to FR32 -1    FR32X -1
  Ready @16c
  BotQ.A BotLatency SU(11) 16c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 2 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %54:fr64 = DIVSDrr %54:fr64(tied-def 0), %41:fr64
Bottom Pressure:
FR32=4
FR32X=4
GR16=6
  LiveReg: %54
  UpdateRegP: SU(10) %54:fr64 = DIVSDrr %54:fr64(tied-def 0), %41:fr64
              to 
  LiveReg: %41
  UpdateRegP: SU(10) %54:fr64 = DIVSDrr %54:fr64(tied-def 0), %41:fr64
              to FR32 -1    FR32X -1
  Ready @26c
  BotQ.A BotLatency SU(10) 26c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 9 
  Cand SU(2) ORDER                              
  Cand SU(9) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(9) %54:fr64 = MULSDrm %54:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=4
FR32X=4
GR16=6
  LiveReg: %54
  UpdateRegP: SU(9) %54:fr64 = MULSDrm %54:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @30c
  BotQ.A BotLatency SU(9) 30c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 8 
  Cand SU(2) ORDER                              
  Cand SU(8) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(8) %54:fr64 = CVTSI2SDrr %51:gr32
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %51
  UpdateRegP: SU(8) %54:fr64 = CVTSI2SDrr %51:gr32
              to FR32 -1    FR32X -1
  Ready @31c
  BotQ.A BotLatency SU(8) 31c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %51:gr32 = nsw ADD32rr %51:gr32(tied-def 0), %50:gr32, implicit-def dead $eflags
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %51
  UpdateRegP: SU(7) %51:gr32 = nsw ADD32rr %51:gr32(tied-def 0), %50:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @32c
  BotQ.A BotLatency SU(7) 32c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 5 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %50:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  Ready @36c
  BotQ.A BotLatency SU(6) 36c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %51:gr32 = LEA64_32r %126:gr64_with_sub_8bit, 1, %127:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=3
FR32X=3
GR16=4
  Ready @33c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) undef %127.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
Bottom Pressure:
FR32=3
FR32X=3
GR16=2
  Ready @37c
  BotQ.A BotLatency SU(4) 37c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) undef %126.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
Bottom Pressure:
FR32=3
FR32X=3
  Ready @37c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %46:fr64 = ADDSDrr %46:fr64(tied-def 0), %37:fr64
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %46
  UpdateRegP: SU(2) %46:fr64 = ADDSDrr %46:fr64(tied-def 0), %37:fr64
              to 
  LiveReg: %37
  UpdateRegP: SU(2) %46:fr64 = ADDSDrr %46:fr64(tied-def 0), %37:fr64
              to FR32 -1    FR32X -1
  Ready @17c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %46:fr64 = MULSDrm %46:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %46
  UpdateRegP: SU(1) %46:fr64 = MULSDrm %46:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @21c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %46:fr64 = COPY killed $xmm0
Bottom Pressure:
FR32=4
FR32X=4
  Ready @21c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %46:fr64 = COPY killed $xmm0
SU(1):   %46:fr64 = MULSDrm %46:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
SU(2):   %46:fr64 = ADDSDrr %46:fr64(tied-def 0), %37:fr64
SU(3):   undef %126.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
SU(4):   undef %127.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
SU(5):   %51:gr32 = LEA64_32r %126:gr64_with_sub_8bit, 1, %127:gr64_nosp, 0, $noreg
SU(6):   %50:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
SU(7):   %51:gr32 = nsw ADD32rr %51:gr32(tied-def 0), %50:gr32, implicit-def dead $eflags
SU(8):   %54:fr64 = CVTSI2SDrr %51:gr32
SU(9):   %54:fr64 = MULSDrm %54:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
SU(10):   %54:fr64 = DIVSDrr %54:fr64(tied-def 0), %41:fr64
SU(11):   %54:fr64 = ADDSDrr %54:fr64(tied-def 0), %46:fr64
SU(12):   %54:fr64 = ADDSDrm %54:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
SU(13):   %54:fr64 = MULSDrr %54:fr64(tied-def 0), %28:fr64
SU(14):   %58:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
SU(15):   %59:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
SU(16):   %59:fr64 = MULSDrr %59:fr64(tied-def 0), %58:fr64
SU(17):   %54:fr64 = DIVSDrr %54:fr64(tied-def 0), %59:fr64
SU(18):   MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %54:fr64 :: (store 8 into %ir.mflops)
SU(19):   %61:gr32 = MOVSX32rm8 %stack.3.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
SU(20):   %63:gr32 = MOV32rm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
SU(21):   %64:gr32 = MOV32rm %stack.4.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %43:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
    To: CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %43:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%43
  Single Issue       : false;
SU(1):   $xmm0 = COPY %42:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %43:fr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%43
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm1 = COPY %43:fr64
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %42:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %43:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %43:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(1):   $xmm0 = COPY %42:fr64
SU(2):   $xmm1 = COPY %43:fr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: %28:fr64 = CVTSI2SDrm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 15
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=4
FR32X=4
GR16=6
Live In: 
Live Out: %42 %41 %37 %28 
Live Thru: 
  LiveReg: %42
  LiveReg: %41
  UpdateRegP: SU(14) %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %41:fr64
              to 
  LiveReg: %37
  LiveReg: %28
Top Pressure:

Bottom Pressure:
FR32=4
FR32X=4
Excess PSets: 
SU(0):   %28:fr64 = CVTSI2SDrm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %39:gr32 = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(10): Data Latency=4 Reg=%39
    SU(2): Data Latency=4 Reg=%39
    SU(10): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %31:fr64 = CVTSI2SDrr %39:gr32
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%39
  Successors:
    SU(3): Data Latency=1 Reg=%31
    SU(3): Out  Latency=0
    SU(10): Anti Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(3):   %31:fr64 = MULSDrm %31:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%31
    SU(2): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%31
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %32:gr32 = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(10): Data Latency=4 Reg=%32
    SU(5): Data Latency=4 Reg=%32
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %34:fr64 = CVTSI2SDrr %32:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=%32
  Successors:
    SU(6): Data Latency=1 Reg=%34
    SU(6): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(6):   %34:fr64 = MULSDrr %34:fr64(tied-def 0), %31:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%31
    SU(5): Out  Latency=0
    SU(5): Data Latency=1 Reg=%34
  Successors:
    SU(9): Data Latency=1 Reg=%34
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(7):   %35:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(11): Data Latency=4 Reg=%35
    SU(8): Data Latency=4 Reg=%35
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %37:fr64 = CVTSI2SDrr %35:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=%35
  Successors:
    SU(9): Data Latency=1 Reg=%37
    SU(9): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(9):   %37:fr64 = MULSDrr %37:fr64(tied-def 0), %34:fr64
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%34
    SU(8): Out  Latency=0
    SU(8): Data Latency=1 Reg=%37
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(10):   %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %32:gr32, implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(4): Data Latency=4 Reg=%32
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=%39
    SU(1): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%39
    SU(11): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(10): Data Latency=1 Reg=%39
    SU(10): Out  Latency=0
    SU(7): Data Latency=4 Reg=%35
  Successors:
    SU(12): Data Latency=1 Reg=%39
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %42:fr64 = CVTSI2SDrr %39:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(11): Data Latency=1 Reg=%39
  Successors:
    SU(14): Data Latency=1 Reg=%42
    SU(14): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(13):   %41:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(14): Data Latency=4 Reg=%41
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(14):   %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %41:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(12): Data Latency=1 Reg=%42
    SU(13): Data Latency=4 Reg=%41
    SU(12): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=9 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(14): Ord  Latency=9 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 14 0 
  Cand SU(9) ORDER                              
  Cand SU(14) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(14) %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %41:fr64
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %42
  UpdateRegP: SU(14) %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %41:fr64
              to FR32 -1    FR32X -1
  Ready @9c
  BotQ.A TopLatency SU(14) 7c
  BotQ.A BotLatency SU(14) 9c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 13 12 
  Cand SU(9) ORDER                              
  Cand SU(0) REG-MAX                            
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %41:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=3
FR32X=3
  Ready @13c
  BotQ.A BotLatency SU(13) 13c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 12 
  Cand SU(9) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %42:fr64 = CVTSI2SDrr %39:gr32
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %39
  UpdateRegP: SU(12) %42:fr64 = CVTSI2SDrr %39:gr32
              to FR32 -1    FR32X -1
  Ready @10c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 11 
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %39
  UpdateRegP: SU(11) %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
              to 
  LiveReg: %35
  UpdateRegP: SU(8) %37:fr64 = CVTSI2SDrr %35:gr32
              to FR32 -1    FR32X -1
  UpdateRegP: SU(11) %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 10 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %32:gr32, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %39
  UpdateRegP: SU(2) %31:fr64 = CVTSI2SDrr %39:gr32
              to FR32 -1    FR32X -1
  UpdateRegP: SU(10) %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %32:gr32, implicit-def dead $eflags
              to 
  LiveReg: %32
  UpdateRegP: SU(5) %34:fr64 = CVTSI2SDrr %32:gr32
              to FR32 -1    FR32X -1
  UpdateRegP: SU(10) %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %32:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %37:fr64 = MULSDrr %37:fr64(tied-def 0), %34:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %37
  UpdateRegP: SU(9) %37:fr64 = MULSDrr %37:fr64(tied-def 0), %34:fr64
              to 
  LiveReg: %34
  UpdateRegP: SU(9) %37:fr64 = MULSDrr %37:fr64(tied-def 0), %34:fr64
              to FR32 -1    FR32X -1
  Ready @1c
  BotQ.A TopLatency SU(9) 10c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 8 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %37:fr64 = CVTSI2SDrr %35:gr32
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 7 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %35:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @15c
  BotQ.A BotLatency SU(7) 15c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %34:fr64 = MULSDrr %34:fr64(tied-def 0), %31:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=4
  LiveReg: %34
  UpdateRegP: SU(6) %34:fr64 = MULSDrr %34:fr64(tied-def 0), %31:fr64
              to 
  LiveReg: %31
  UpdateRegP: SU(6) %34:fr64 = MULSDrr %34:fr64(tied-def 0), %31:fr64
              to FR32 -1    FR32X -1
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 5 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %34:fr64 = CVTSI2SDrr %32:gr32
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 4 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %32:gr32 = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @16c
  BotQ.A BotLatency SU(4) 16c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %31:fr64 = MULSDrm %31:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %31
  UpdateRegP: SU(3) %31:fr64 = MULSDrm %31:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @6c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %31:fr64 = CVTSI2SDrr %39:gr32
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @12c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %39:gr32 = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @16c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %28:fr64 = CVTSI2SDrm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
Bottom Pressure:

  Ready @3c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %28:fr64 = CVTSI2SDrm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
SU(1):   %39:gr32 = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
SU(2):   %31:fr64 = CVTSI2SDrr %39:gr32
SU(3):   %31:fr64 = MULSDrm %31:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(4):   %32:gr32 = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
SU(5):   %34:fr64 = CVTSI2SDrr %32:gr32
SU(6):   %34:fr64 = MULSDrr %34:fr64(tied-def 0), %31:fr64
SU(7):   %35:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
SU(8):   %37:fr64 = CVTSI2SDrr %35:gr32
SU(9):   %37:fr64 = MULSDrr %37:fr64(tied-def 0), %34:fr64
SU(10):   %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %32:gr32, implicit-def dead $eflags
SU(11):   %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
SU(12):   %42:fr64 = CVTSI2SDrr %39:gr32
SU(13):   %41:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(14):   %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %41:fr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: $rdi = LEA64r $rip, 1, $noreg, @rsdnm, $noreg
    To: CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $rdx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @rsdnm, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @errnm, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %23:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $rdx = LEA64r %stack.3.Class, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(4):   $rcx = LEA64r %stack.4.verified, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $rdx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %23:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 0 1 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $rcx = LEA64r %stack.4.verified, 1, $noreg, 0, $noreg
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 0 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rdx = LEA64r %stack.3.Class, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @errnm, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @rsdnm, $noreg
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @rsdnm, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @errnm, $noreg
SU(3):   $rdx = LEA64r %stack.3.Class, 1, $noreg, 0, $noreg
SU(4):   $rcx = LEA64r %stack.4.verified, 1, $noreg, 0, $noreg
SU(2):   $xmm0 = COPY %23:fr64

********** MI Scheduling **********
main:%bb.4 if.then31
  From: %77:gr32 = MOV32ri 1
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %77:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%77
  Single Issue       : false;
SU(1):   MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %77:gr32 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%77
  Single Issue       : false;
SU(2):   %124:gr64 = LEA64r %stack.8.trecs, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %124:gr64 = LEA64r %stack.8.trecs, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %77:gr32 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %77:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %77:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %77:gr32 :: (store 4 into %ir.i)
SU(2):   %124:gr64 = LEA64r %stack.8.trecs, 1, $noreg, 0, $noreg

********** MI Scheduling **********
main:%bb.6 for.body
  From: %122:fr64 = COPY $xmm0
    To: JMP_1 %bb.5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %122:fr64 = COPY $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%122
  Single Issue       : false;
SU(1):   %123:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%123
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %124:gr64, 8, %123:gr64_nosp, 0, $noreg, %122:fr64 :: (store 8 into %ir.arrayidx35)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%123
    SU(0): Data Latency=0 Reg=%122
  Single Issue       : false;
SU(3):   INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %124:gr64, 8, %123:gr64_nosp, 0, $noreg, %122:fr64 :: (store 8 into %ir.arrayidx35)
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) %123:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %122:fr64 = COPY $xmm0
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %122:fr64 = COPY $xmm0
SU(1):   %123:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(2):   MOVSDmr %124:gr64, 8, %123:gr64_nosp, 0, $noreg, %122:fr64 :: (store 8 into %ir.arrayidx35)
SU(3):   INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
main:%bb.7 for.end
  From: %80:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
    To: JCC_1 %bb.9, 5, implicit $eflags
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %80:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%80
    SU(1): Data Latency=4 Reg=%80
  Single Issue       : false;
SU(1):   MOVSDmr %stack.7.tmax, 1, $noreg, 0, $noreg, %80:fr64 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%80
  Single Issue       : false;
SU(2):   %81:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=1 Reg=%81
  Single Issue       : false;
SU(3):   UCOMISDrr %80:fr64, %81:fr64, implicit-def $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%81
    SU(0): Data Latency=4 Reg=%80
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.9, 5, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) UCOMISDrr %80:fr64, %81:fr64, implicit-def $eflags
  Ready @1c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %81:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.7.tmax, 1, $noreg, 0, $noreg, %80:fr64 :: (store 8 into %ir.tmax)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %80:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %80:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
SU(1):   MOVSDmr %stack.7.tmax, 1, $noreg, 0, $noreg, %80:fr64 :: (store 8 into %ir.tmax)
SU(2):   %81:fr64 = FsFLD0SD
SU(3):   UCOMISDrr %80:fr64, %81:fr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.8 if.then38
  From: %82:gr64 = MOV64ri 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %82:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%82
  Single Issue       : false;
SU(1):   MOV64mr %stack.7.tmax, 1, $noreg, 0, $noreg, %82:gr64 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%82
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.7.tmax, 1, $noreg, 0, $noreg, %82:gr64 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %82:gr64 = MOV64ri 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %82:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr %stack.7.tmax, 1, $noreg, 0, $noreg, %82:gr64 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.9 if.end39
  From: %87:gr32 = MOV32ri 1
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %87:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%87
  Single Issue       : false;
SU(1):   MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %87:gr32 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%87
  Single Issue       : false;
SU(2):   %92:gr64 = LEA64r %stack.10.t_names, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %94:gr64 = LEA64r %stack.8.trecs, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %125:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %125:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %94:gr64 = LEA64r %stack.8.trecs, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %92:gr64 = LEA64r %stack.10.t_names, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %87:gr32 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %87:gr32 = MOV32ri 1
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %87:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %87:gr32 :: (store 4 into %ir.i)
SU(2):   %92:gr64 = LEA64r %stack.10.t_names, 1, $noreg, 0, $noreg
SU(3):   %94:gr64 = LEA64r %stack.8.trecs, 1, $noreg, 0, $noreg
SU(4):   %125:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
main:%bb.9 if.end39
  From: $rdi = LEA64r $rip, 1, $noreg, @lu__str_24___SECTION_, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @lu__str_24___SECTION_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @lu__str_24___SECTION_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @lu__str_24___SECTION_, $noreg
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.11 for.body44
  From: $rdi = LEA64r $rip, 1, $noreg, @lu__str_25_____8s__9_, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @lu__str_25_____8s__9_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %93:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %95:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %97:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %97:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm0 = COPY %95:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rsi = COPY %93:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @lu__str_25_____8s__9_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @lu__str_25_____8s__9_, $noreg
SU(1):   $rsi = COPY %93:gr64
SU(2):   $xmm0 = COPY %95:fr64
SU(3):   $xmm1 = COPY %97:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.11 for.body44
  From: %91:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %91:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%91
    SU(1): Data Latency=4 Reg=%91
  Single Issue       : false;
SU(1):   %93:gr64 = MOV64rm %92:gr64, 8, %91:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx46)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%91
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %95:fr64 = MOVSDrm_alt %94:gr64, 8, %91:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx50)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%91
  Successors:
    SU(3): Data Latency=4 Reg=%95
  Single Issue       : false;
SU(3):   %97:fr64 = COPY %95:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%95
  Successors:
    SU(4): Data Latency=0 Reg=%97
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %97:fr64 = MULSDrr %97:fr64(tied-def 0), %125:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%97
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%97
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %97:fr64 = DIVSDrm %97:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%97
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %97:fr64 = DIVSDrm %97:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %97:fr64 = MULSDrr %97:fr64(tied-def 0), %125:fr64
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %97:fr64 = COPY %95:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %95:fr64 = MOVSDrm_alt %94:gr64, 8, %91:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx50)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %93:gr64 = MOV64rm %92:gr64, 8, %91:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx46)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %91:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %91:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   %93:gr64 = MOV64rm %92:gr64, 8, %91:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx46)
SU(2):   %95:fr64 = MOVSDrm_alt %94:gr64, 8, %91:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx50)
SU(3):   %97:fr64 = COPY %95:fr64
SU(4):   %97:fr64 = MULSDrr %97:fr64(tied-def 0), %125:fr64
SU(5):   %97:fr64 = DIVSDrm %97:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.12 if.then56
  From: $rdi = LEA64r $rip, 1, $noreg, @lu__str_26___________, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @lu__str_26___________, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @lu__str_28_rest_rhs_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %116:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %118:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %118:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %116:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @lu__str_28_rest_rhs_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @lu__str_26___________, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @lu__str_26___________, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @lu__str_28_rest_rhs_, $noreg
SU(2):   $xmm0 = COPY %116:fr64
SU(3):   $xmm1 = COPY %118:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.12 if.then56
  From: %113:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %113:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%113
  Single Issue       : false;
SU(1):   %116:fr64 = MOVSDrm_alt %94:gr64, 8, %113:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx66)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%113
  Successors:
    SU(2): Data Latency=4 Reg=%116
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %116:fr64 = SUBSDrm %116:fr64(tied-def 0), %stack.6.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%116
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%116
    SU(3): Data Latency=4 Reg=%116
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %116:fr64 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%116
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %118:fr64 = COPY %116:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%116
  Successors:
    SU(5): Data Latency=0 Reg=%118
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %118:fr64 = MULSDrr %118:fr64(tied-def 0), %125:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(4): Data Latency=0 Reg=%118
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%118
    SU(6): Out  Latency=0
  Single Issue       : false;
SU(6):   %118:fr64 = DIVSDrm %118:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%118
    SU(5): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %118:fr64 = DIVSDrm %118:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(6) 13c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %118:fr64 = MULSDrr %118:fr64(tied-def 0), %125:fr64
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %118:fr64 = COPY %116:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %116:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %116:fr64 = SUBSDrm %116:fr64(tied-def 0), %stack.6.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %116:fr64 = MOVSDrm_alt %94:gr64, 8, %113:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx66)
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %113:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %113:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   %116:fr64 = MOVSDrm_alt %94:gr64, 8, %113:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx66)
SU(2):   %116:fr64 = SUBSDrm %116:fr64(tied-def 0), %stack.6.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
SU(3):   MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %116:fr64 :: (store 8 into %ir.t)
SU(4):   %118:fr64 = COPY %116:fr64
SU(5):   %118:fr64 = MULSDrr %118:fr64(tied-def 0), %125:fr64
SU(6):   %118:fr64 = DIVSDrm %118:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.12 if.then56
  From: $rdi = LEA64r $rip, 1, $noreg, @lu__str_26___________, $noreg
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @lu__str_26___________, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @lu__str_27_sub_rhs_, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %105:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %108:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %108:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %105:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @lu__str_27_sub_rhs_, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @lu__str_26___________, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @lu__str_26___________, $noreg
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @lu__str_27_sub_rhs_, $noreg
SU(2):   $xmm0 = COPY %105:fr64
SU(3):   $xmm1 = COPY %108:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.12 if.then56
  From: %105:fr64 = MOVSDrm_alt %stack.8.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %105:fr64 = MOVSDrm_alt %stack.8.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%105
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx58)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%105
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%105
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%105
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%105
    SU(3): Data Latency=4 Reg=%105
  Single Issue       : false;
SU(3):   MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %105:fr64 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%105
  Single Issue       : false;
SU(4):   %108:fr64 = COPY %105:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%105
  Successors:
    SU(5): Data Latency=0 Reg=%108
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %108:fr64 = MULSDrr %108:fr64(tied-def 0), %125:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(4): Data Latency=0 Reg=%108
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%108
    SU(6): Out  Latency=0
  Single Issue       : false;
SU(6):   %108:fr64 = DIVSDrm %108:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%108
    SU(5): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %108:fr64 = DIVSDrm %108:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(6) 13c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %108:fr64 = MULSDrr %108:fr64(tied-def 0), %125:fr64
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %108:fr64 = COPY %105:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %105:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx58)
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %105:fr64 = MOVSDrm_alt %stack.8.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %105:fr64 = MOVSDrm_alt %stack.8.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
SU(1):   %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx58)
SU(2):   %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
SU(3):   MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %105:fr64 :: (store 8 into %ir.t)
SU(4):   %108:fr64 = COPY %105:fr64
SU(5):   %108:fr64 = MULSDrr %108:fr64(tied-def 0), %125:fr64
SU(6):   %108:fr64 = DIVSDrm %108:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** INTERVALS **********
DIL [0B,32r:0)[144r,176r:11)[768r,784r:10)[1664r,1680r:3)[2016r,2032r:2)[2432r,2512r:9)[4016r,4144r:8)[4448r,4464r:1)[4880r,4912r:7)[5360r,5440r:6)[5760r,5840r:5)[6080r,6160r:4)  0@0B-phi 1@4448r 2@2016r 3@1664r 4@6080r 5@5760r 6@5360r 7@4880r 8@4016r 9@2432r 10@768r 11@144r
DIH [0B,32r:0)[144r,176r:11)[768r,784r:10)[1664r,1680r:3)[2016r,2032r:2)[2432r,2512r:9)[4016r,4144r:8)[4448r,4464r:1)[4880r,4912r:7)[5360r,5440r:6)[5760r,5840r:5)[6080r,6160r:4)  0@0B-phi 1@4448r 2@2016r 3@1664r 4@6080r 5@5760r 6@5360r 7@4880r 8@4016r 9@2432r 10@768r 11@144r
HDI [0B,32r:0)[144r,176r:11)[768r,784r:10)[1664r,1680r:3)[2016r,2032r:2)[2432r,2512r:9)[4016r,4144r:8)[4448r,4464r:1)[4880r,4912r:7)[5360r,5440r:6)[5760r,5840r:5)[6080r,6160r:4)  0@0B-phi 1@4448r 2@2016r 3@1664r 4@6080r 5@5760r 6@5360r 7@4880r 8@4016r 9@2432r 10@768r 11@144r
SIL [0B,16r:0)[160r,176r:6)[2448r,2512r:5)[4032r,4144r:1)[5376r,5440r:4)[5776r,5840r:3)[6096r,6160r:2)  0@0B-phi 1@4032r 2@6096r 3@5776r 4@5376r 5@2448r 6@160r
SIH [0B,16r:0)[160r,176r:6)[2448r,2512r:5)[4032r,4144r:1)[5376r,5440r:4)[5776r,5840r:3)[6096r,6160r:2)  0@0B-phi 1@4032r 2@6096r 3@5776r 4@5376r 5@2448r 6@160r
HSI [0B,16r:0)[160r,176r:6)[2448r,2512r:5)[4032r,4144r:1)[5376r,5440r:4)[5776r,5840r:3)[6096r,6160r:2)  0@0B-phi 1@4032r 2@6096r 3@5776r 4@5376r 5@2448r 6@160r
SPL [96r,96d:109)[176r,176d:108)[192r,192d:107)[208r,208d:106)[240r,240d:105)[752r,752d:104)[784r,784d:103)[800r,800d:102)[816r,816d:101)[848r,848d:100)[928r,928d:99)[992r,992d:98)[1008r,1008d:97)[1024r,1024d:96)[1056r,1056d:95)[1072r,1072d:94)[1104r,1104d:93)[1120r,1120d:92)[1136r,1136d:91)[1168r,1168d:90)[1184r,1184d:89)[1216r,1216d:88)[1232r,1232d:87)[1248r,1248d:86)[1280r,1280d:85)[1296r,1296d:84)[1328r,1328d:83)[1344r,1344d:82)[1360r,1360d:81)[1392r,1392d:80)[1408r,1408d:79)[1440r,1440d:78)[1456r,1456d:77)[1472r,1472d:76)[1504r,1504d:75)[1520r,1520d:74)[1552r,1552d:73)[1568r,1568d:72)[1584r,1584d:71)[1616r,1616d:70)[1632r,1632d:69)[1680r,1680d:68)[1696r,1696d:67)[1712r,1712d:66)[1744r,1744d:65)[1760r,1760d:64)[1792r,1792d:63)[1808r,1808d:62)[1824r,1824d:61)[1856r,1856d:60)[1872r,1872d:59)[1904r,1904d:58)[1920r,1920d:57)[1936r,1936d:56)[1968r,1968d:55)[2000r,2000d:54)[2032r,2032d:53)[2048r,2048d:52)[2064r,2064d:51)[2096r,2096d:50)[2112r,2112d:49)[2144r,2144d:48)[2160r,2160d:47)[2176r,2176d:46)[2208r,2208d:45)[2224r,2224d:44)[2256r,2256d:43)[2272r,2272d:42)[2288r,2288d:41)[2320r,2320d:40)[2352r,2352d:39)[2512r,2512d:38)[2528r,2528d:37)[2544r,2544d:36)[2576r,2576d:35)[2928r,2928d:34)[2992r,2992d:33)[3008r,3008d:32)[3024r,3024d:31)[3056r,3056d:30)[3632r,3632d:29)[4144r,4144d:28)[4160r,4160d:27)[4176r,4176d:26)[4208r,4208d:25)[4432r,4432d:4)[4464r,4464d:3)[4480r,4480d:2)[4496r,4496d:1)[4528r,4528d:0)[4816r,4816d:24)[4912r,4912d:23)[4928r,4928d:22)[4944r,4944d:21)[4976r,4976d:20)[5344r,5344d:19)[5440r,5440d:18)[5456r,5456d:17)[5472r,5472d:16)[5504r,5504d:15)[5744r,5744d:14)[5840r,5840d:13)[5856r,5856d:12)[5872r,5872d:11)[5904r,5904d:10)[6064r,6064d:9)[6160r,6160d:8)[6176r,6176d:7)[6192r,6192d:6)[6224r,6224d:5)  0@4528r 1@4496r 2@4480r 3@4464r 4@4432r 5@6224r 6@6192r 7@6176r 8@6160r 9@6064r 10@5904r 11@5872r 12@5856r 13@5840r 14@5744r 15@5504r 16@5472r 17@5456r 18@5440r 19@5344r 20@4976r 21@4944r 22@4928r 23@4912r 24@4816r 25@4208r 26@4176r 27@4160r 28@4144r 29@3632r 30@3056r 31@3024r 32@3008r 33@2992r 34@2928r 35@2576r 36@2544r 37@2528r 38@2512r 39@2352r 40@2320r 41@2288r 42@2272r 43@2256r 44@2224r 45@2208r 46@2176r 47@2160r 48@2144r 49@2112r 50@2096r 51@2064r 52@2048r 53@2032r 54@2000r 55@1968r 56@1936r 57@1920r 58@1904r 59@1872r 60@1856r 61@1824r 62@1808r 63@1792r 64@1760r 65@1744r 66@1712r 67@1696r 68@1680r 69@1632r 70@1616r 71@1584r 72@1568r 73@1552r 74@1520r 75@1504r 76@1472r 77@1456r 78@1440r 79@1408r 80@1392r 81@1360r 82@1344r 83@1328r 84@1296r 85@1280r 86@1248r 87@1232r 88@1216r 89@1184r 90@1168r 91@1136r 92@1120r 93@1104r 94@1072r 95@1056r 96@1024r 97@1008r 98@992r 99@928r 100@848r 101@816r 102@800r 103@784r 104@752r 105@240r 106@208r 107@192r 108@176r 109@96r
SPH [96r,96d:109)[176r,176d:108)[192r,192d:107)[208r,208d:106)[240r,240d:105)[752r,752d:104)[784r,784d:103)[800r,800d:102)[816r,816d:101)[848r,848d:100)[928r,928d:99)[992r,992d:98)[1008r,1008d:97)[1024r,1024d:96)[1056r,1056d:95)[1072r,1072d:94)[1104r,1104d:93)[1120r,1120d:92)[1136r,1136d:91)[1168r,1168d:90)[1184r,1184d:89)[1216r,1216d:88)[1232r,1232d:87)[1248r,1248d:86)[1280r,1280d:85)[1296r,1296d:84)[1328r,1328d:83)[1344r,1344d:82)[1360r,1360d:81)[1392r,1392d:80)[1408r,1408d:79)[1440r,1440d:78)[1456r,1456d:77)[1472r,1472d:76)[1504r,1504d:75)[1520r,1520d:74)[1552r,1552d:73)[1568r,1568d:72)[1584r,1584d:71)[1616r,1616d:70)[1632r,1632d:69)[1680r,1680d:68)[1696r,1696d:67)[1712r,1712d:66)[1744r,1744d:65)[1760r,1760d:64)[1792r,1792d:63)[1808r,1808d:62)[1824r,1824d:61)[1856r,1856d:60)[1872r,1872d:59)[1904r,1904d:58)[1920r,1920d:57)[1936r,1936d:56)[1968r,1968d:55)[2000r,2000d:54)[2032r,2032d:53)[2048r,2048d:52)[2064r,2064d:51)[2096r,2096d:50)[2112r,2112d:49)[2144r,2144d:48)[2160r,2160d:47)[2176r,2176d:46)[2208r,2208d:45)[2224r,2224d:44)[2256r,2256d:43)[2272r,2272d:42)[2288r,2288d:41)[2320r,2320d:40)[2352r,2352d:39)[2512r,2512d:38)[2528r,2528d:37)[2544r,2544d:36)[2576r,2576d:35)[2928r,2928d:34)[2992r,2992d:33)[3008r,3008d:32)[3024r,3024d:31)[3056r,3056d:30)[3632r,3632d:29)[4144r,4144d:28)[4160r,4160d:27)[4176r,4176d:26)[4208r,4208d:25)[4432r,4432d:4)[4464r,4464d:3)[4480r,4480d:2)[4496r,4496d:1)[4528r,4528d:0)[4816r,4816d:24)[4912r,4912d:23)[4928r,4928d:22)[4944r,4944d:21)[4976r,4976d:20)[5344r,5344d:19)[5440r,5440d:18)[5456r,5456d:17)[5472r,5472d:16)[5504r,5504d:15)[5744r,5744d:14)[5840r,5840d:13)[5856r,5856d:12)[5872r,5872d:11)[5904r,5904d:10)[6064r,6064d:9)[6160r,6160d:8)[6176r,6176d:7)[6192r,6192d:6)[6224r,6224d:5)  0@4528r 1@4496r 2@4480r 3@4464r 4@4432r 5@6224r 6@6192r 7@6176r 8@6160r 9@6064r 10@5904r 11@5872r 12@5856r 13@5840r 14@5744r 15@5504r 16@5472r 17@5456r 18@5440r 19@5344r 20@4976r 21@4944r 22@4928r 23@4912r 24@4816r 25@4208r 26@4176r 27@4160r 28@4144r 29@3632r 30@3056r 31@3024r 32@3008r 33@2992r 34@2928r 35@2576r 36@2544r 37@2528r 38@2512r 39@2352r 40@2320r 41@2288r 42@2272r 43@2256r 44@2224r 45@2208r 46@2176r 47@2160r 48@2144r 49@2112r 50@2096r 51@2064r 52@2048r 53@2032r 54@2000r 55@1968r 56@1936r 57@1920r 58@1904r 59@1872r 60@1856r 61@1824r 62@1808r 63@1792r 64@1760r 65@1744r 66@1712r 67@1696r 68@1680r 69@1632r 70@1616r 71@1584r 72@1568r 73@1552r 74@1520r 75@1504r 76@1472r 77@1456r 78@1440r 79@1408r 80@1392r 81@1360r 82@1344r 83@1328r 84@1296r 85@1280r 86@1248r 87@1232r 88@1216r 89@1184r 90@1168r 91@1136r 92@1120r 93@1104r 94@1072r 95@1056r 96@1024r 97@1008r 98@992r 99@928r 100@848r 101@816r 102@800r 103@784r 104@752r 105@240r 106@208r 107@192r 108@176r 109@96r
HSP [96r,96d:109)[176r,176d:108)[192r,192d:107)[208r,208d:106)[240r,240d:105)[752r,752d:104)[784r,784d:103)[800r,800d:102)[816r,816d:101)[848r,848d:100)[928r,928d:99)[992r,992d:98)[1008r,1008d:97)[1024r,1024d:96)[1056r,1056d:95)[1072r,1072d:94)[1104r,1104d:93)[1120r,1120d:92)[1136r,1136d:91)[1168r,1168d:90)[1184r,1184d:89)[1216r,1216d:88)[1232r,1232d:87)[1248r,1248d:86)[1280r,1280d:85)[1296r,1296d:84)[1328r,1328d:83)[1344r,1344d:82)[1360r,1360d:81)[1392r,1392d:80)[1408r,1408d:79)[1440r,1440d:78)[1456r,1456d:77)[1472r,1472d:76)[1504r,1504d:75)[1520r,1520d:74)[1552r,1552d:73)[1568r,1568d:72)[1584r,1584d:71)[1616r,1616d:70)[1632r,1632d:69)[1680r,1680d:68)[1696r,1696d:67)[1712r,1712d:66)[1744r,1744d:65)[1760r,1760d:64)[1792r,1792d:63)[1808r,1808d:62)[1824r,1824d:61)[1856r,1856d:60)[1872r,1872d:59)[1904r,1904d:58)[1920r,1920d:57)[1936r,1936d:56)[1968r,1968d:55)[2000r,2000d:54)[2032r,2032d:53)[2048r,2048d:52)[2064r,2064d:51)[2096r,2096d:50)[2112r,2112d:49)[2144r,2144d:48)[2160r,2160d:47)[2176r,2176d:46)[2208r,2208d:45)[2224r,2224d:44)[2256r,2256d:43)[2272r,2272d:42)[2288r,2288d:41)[2320r,2320d:40)[2352r,2352d:39)[2512r,2512d:38)[2528r,2528d:37)[2544r,2544d:36)[2576r,2576d:35)[2928r,2928d:34)[2992r,2992d:33)[3008r,3008d:32)[3024r,3024d:31)[3056r,3056d:30)[3632r,3632d:29)[4144r,4144d:28)[4160r,4160d:27)[4176r,4176d:26)[4208r,4208d:25)[4432r,4432d:4)[4464r,4464d:3)[4480r,4480d:2)[4496r,4496d:1)[4528r,4528d:0)[4816r,4816d:24)[4912r,4912d:23)[4928r,4928d:22)[4944r,4944d:21)[4976r,4976d:20)[5344r,5344d:19)[5440r,5440d:18)[5456r,5456d:17)[5472r,5472d:16)[5504r,5504d:15)[5744r,5744d:14)[5840r,5840d:13)[5856r,5856d:12)[5872r,5872d:11)[5904r,5904d:10)[6064r,6064d:9)[6160r,6160d:8)[6176r,6176d:7)[6192r,6192d:6)[6224r,6224d:5)  0@4528r 1@4496r 2@4480r 3@4464r 4@4432r 5@6224r 6@6192r 7@6176r 8@6160r 9@6064r 10@5904r 11@5872r 12@5856r 13@5840r 14@5744r 15@5504r 16@5472r 17@5456r 18@5440r 19@5344r 20@4976r 21@4944r 22@4928r 23@4912r 24@4816r 25@4208r 26@4176r 27@4160r 28@4144r 29@3632r 30@3056r 31@3024r 32@3008r 33@2992r 34@2928r 35@2576r 36@2544r 37@2528r 38@2512r 39@2352r 40@2320r 41@2288r 42@2272r 43@2256r 44@2224r 45@2208r 46@2176r 47@2160r 48@2144r 49@2112r 50@2096r 51@2064r 52@2048r 53@2032r 54@2000r 55@1968r 56@1936r 57@1920r 58@1904r 59@1872r 60@1856r 61@1824r 62@1808r 63@1792r 64@1760r 65@1744r 66@1712r 67@1696r 68@1680r 69@1632r 70@1616r 71@1584r 72@1568r 73@1552r 74@1520r 75@1504r 76@1472r 77@1456r 78@1440r 79@1408r 80@1392r 81@1360r 82@1344r 83@1328r 84@1296r 85@1280r 86@1248r 87@1232r 88@1216r 89@1184r 90@1168r 91@1136r 92@1120r 93@1104r 94@1072r 95@1056r 96@1024r 97@1008r 98@992r 99@928r 100@848r 101@816r 102@800r 103@784r 104@752r 105@240r 106@208r 107@192r 108@176r 109@96r
XMM0 [2504r,2512r:7)[2960r,2992r:6)[2992r,3072r:5)[4112r,4144r:4)[4464r,4544r:0)[5392r,5440r:3)[5792r,5840r:2)[6112r,6160r:1)  0@4464r 1@6112r 2@5792r 3@5392r 4@4112r 5@2992r 6@2960r 7@2504r
%0 [32r,64r:0)  0@32r weight:0.000000e+00
%1 [16r,80r:0)  0@16r weight:0.000000e+00
%4 [256r,288r:0)  0@256r weight:0.000000e+00
%5 [352r,368r:0)  0@352r weight:0.000000e+00
%6 [384r,400r:0)  0@384r weight:0.000000e+00
%7 [416r,432r:0)  0@416r weight:0.000000e+00
%8 [448r,464r:0)  0@448r weight:0.000000e+00
%9 [480r,496r:0)  0@480r weight:0.000000e+00
%10 [512r,528r:0)  0@512r weight:0.000000e+00
%11 [544r,560r:0)  0@544r weight:0.000000e+00
%12 [576r,592r:0)  0@576r weight:0.000000e+00
%13 [608r,624r:0)  0@608r weight:0.000000e+00
%14 [640r,656r:0)  0@640r weight:0.000000e+00
%15 [672r,688r:0)  0@672r weight:0.000000e+00
%16 [704r,720r:0)  0@704r weight:0.000000e+00
%17 [736r,832r:0)  0@736r weight:0.000000e+00
%22 [1984r,2080r:0)  0@1984r weight:0.000000e+00
%23 [2336r,2560r:0)  0@2336r weight:0.000000e+00
%28 [2592r,3440r:0)  0@2592r weight:0.000000e+00
%31 [2624r,2656r:0)[2656r,2720r:1)  0@2624r 1@2656r weight:0.000000e+00
%32 [2672r,2816r:0)  0@2672r weight:0.000000e+00
%34 [2688r,2720r:0)[2720r,2784r:1)  0@2688r 1@2720r weight:0.000000e+00
%35 [2736r,2848r:0)  0@2736r weight:0.000000e+00
%37 [2752r,2784r:0)[2784r,3136r:1)  0@2752r 1@2784r weight:0.000000e+00
%39 [2608r,2816r:2)[2816r,2848r:0)[2848r,2864r:1)  0@2816r 1@2848r 2@2608r weight:0.000000e+00
%41 [2880r,3344r:0)  0@2880r weight:0.000000e+00
%42 [2864r,2912r:0)[2912r,3040r:1)  0@2864r 1@2912r weight:0.000000e+00
%43 [2944r,2976r:0)  0@2944r weight:0.000000e+00
%46 [3072r,3104r:2)[3104r,3136r:0)[3136r,3376r:1)  0@3104r 1@3136r 2@3072r weight:0.000000e+00
%50 [3232r,4192r:0)  0@3232r weight:0.000000e+00
%51 [3216r,3264r:0)[3264r,3280r:1)  0@3216r 1@3264r weight:0.000000e+00
%54 [3280r,3312r:2)[3312r,3344r:0)[3344r,3376r:1)[3376r,3408r:3)[3408r,3440r:4)[3440r,3536r:5)[3536r,4192r:6)  0@3312r 1@3344r 2@3280r 3@3376r 4@3408r 5@3440r 6@3536r weight:0.000000e+00
%58 [3456r,4192r:0)  0@3456r weight:0.000000e+00
%59 [3472r,3504r:0)[3504r,3536r:1)  0@3472r 1@3504r weight:0.000000e+00
%61 [3568r,4192r:0)  0@3568r weight:0.000000e+00
%63 [3600r,4192r:0)  0@3600r weight:0.000000e+00
%64 [3616r,4192r:0)  0@3616r weight:0.000000e+00
%65 [3648r,3680r:0)  0@3648r weight:0.000000e+00
%67 [3696r,3712r:0)  0@3696r weight:0.000000e+00
%68 [3728r,3744r:0)  0@3728r weight:0.000000e+00
%69 [3760r,3776r:0)  0@3760r weight:0.000000e+00
%70 [3792r,3808r:0)  0@3792r weight:0.000000e+00
%71 [3824r,3840r:0)  0@3824r weight:0.000000e+00
%72 [3856r,3872r:0)  0@3856r weight:0.000000e+00
%73 [3888r,3904r:0)  0@3888r weight:0.000000e+00
%74 [3920r,3936r:0)  0@3920r weight:0.000000e+00
%75 [3968r,3984r:0)  0@3968r weight:0.000000e+00
%77 [4288r,4304r:0)  0@4288r weight:0.000000e+00
%80 [4640r,4688r:0)  0@4640r weight:0.000000e+00
%81 [4672r,4688r:0)  0@4672r weight:0.000000e+00
%82 [4768r,4784r:0)  0@4768r weight:0.000000e+00
%87 [4992r,5008r:0)  0@4992r weight:0.000000e+00
%91 [5232r,5264r:0)  0@5232r weight:0.000000e+00
%92 [5024r,6288B:0)  0@5024r weight:0.000000e+00
%93 [5248r,5488r:0)  0@5248r weight:0.000000e+00
%94 [5040r,6288B:0)  0@5040r weight:0.000000e+00
%95 [5264r,5488r:0)  0@5264r weight:0.000000e+00
%97 [5280r,5296r:2)[5296r,5328r:0)[5328r,5488r:1)  0@5296r 1@5328r 2@5280r weight:0.000000e+00
%105 [5584r,5616r:2)[5616r,5648r:0)[5648r,5888r:1)  0@5616r 1@5648r 2@5584r weight:0.000000e+00
%108 [5680r,5696r:2)[5696r,5728r:0)[5728r,5888r:1)  0@5696r 1@5728r 2@5680r weight:0.000000e+00
%113 [5920r,5936r:0)  0@5920r weight:0.000000e+00
%116 [5936r,5968r:0)[5968r,6208r:1)  0@5936r 1@5968r weight:0.000000e+00
%118 [6000r,6016r:2)[6016r,6048r:0)[6048r,6208r:1)  0@6016r 1@6048r 2@6000r weight:0.000000e+00
%121 [4416r,4512r:0)  0@4416r weight:0.000000e+00
%122 [4544r,4576r:0)  0@4544r weight:0.000000e+00
%123 [4560r,4576r:0)  0@4560r weight:0.000000e+00
%124 [4320r,4624B:0)  0@4320r weight:0.000000e+00
%125 [5056r,6288B:0)  0@5056r weight:0.000000e+00
%126 [3152r,4192r:0)  0@3152r weight:0.000000e+00
%127 [3168r,4192r:0)  0@3168r weight:0.000000e+00
RegMasks: 176r 784r 992r 1104r 1216r 1328r 1440r 1552r 1680r 1792r 1904r 2032r 2144r 2256r 2512r 2992r 4144r 4464r 4912r 5440r 5840r 6160r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=1, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=96, align=16, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=96, align=16, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 1.984770e+03, align=8
  cp#1: 3.000000e+00, align=8
  cp#2: 2.000000e+00, align=8
  cp#3: -1.092330e+04, align=8
  cp#4: 2.777090e+04, align=8
  cp#5: -1.440100e+05, align=8
  cp#6: 1.000000e+06, align=8
  cp#7: 1.000000e+02, align=8
Function Live Ins: $edi in %0, $rsi in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $edi, $rsi
16B	  %1:gr64 = COPY $rsi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
64B	  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
80B	  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
144B	  $rdi = LEA64r $rip, 1, $noreg, @lu__str_timer_flag, $noreg
160B	  $rsi = LEA64r $rip, 1, $noreg, @lu__str_1_r_, $noreg
176B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  PCN_STACKMAP 0, 0, 0, %stack.3.Class, 0, 0, %stack.11.fp, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.11.fp), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
240B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
256B	  %4:gr64 = COPY killed $rax
272B	  MOV64mr %stack.11.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
288B	  TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
304B	  JCC_1 %bb.2, 4, implicit killed $eflags
320B	  JMP_1 %bb.1

336B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

352B	  %5:gr32 = MOV32ri 1
368B	  MOV32mr $rip, 1, $noreg, @timeron, $noreg, %5:gr32 :: (store 4 into @timeron)
384B	  %6:gr64 = LEA64r $rip, 1, $noreg, @lu__str_2_total_, $noreg
400B	  MOV64mr %stack.10.t_names, 1, $noreg, 8, $noreg, %6:gr64 :: (store 8 into %ir.arrayidx)
416B	  %7:gr64 = LEA64r $rip, 1, $noreg, @lu__str_3_rhsx_, $noreg
432B	  MOV64mr %stack.10.t_names, 1, $noreg, 16, $noreg, %7:gr64 :: (store 8 into %ir.arrayidx1, align 16)
448B	  %8:gr64 = LEA64r $rip, 1, $noreg, @lu__str_4_rhsy_, $noreg
464B	  MOV64mr %stack.10.t_names, 1, $noreg, 24, $noreg, %8:gr64 :: (store 8 into %ir.arrayidx2)
480B	  %9:gr64 = LEA64r $rip, 1, $noreg, @lu__str_5_rhsz_, $noreg
496B	  MOV64mr %stack.10.t_names, 1, $noreg, 32, $noreg, %9:gr64 :: (store 8 into %ir.arrayidx3, align 16)
512B	  %10:gr64 = LEA64r $rip, 1, $noreg, @lu__str_6_rhs_, $noreg
528B	  MOV64mr %stack.10.t_names, 1, $noreg, 40, $noreg, %10:gr64 :: (store 8 into %ir.arrayidx4)
544B	  %11:gr64 = LEA64r $rip, 1, $noreg, @lu__str_7_jacld_, $noreg
560B	  MOV64mr %stack.10.t_names, 1, $noreg, 48, $noreg, %11:gr64 :: (store 8 into %ir.arrayidx5, align 16)
576B	  %12:gr64 = LEA64r $rip, 1, $noreg, @lu__str_8_blts_, $noreg
592B	  MOV64mr %stack.10.t_names, 1, $noreg, 56, $noreg, %12:gr64 :: (store 8 into %ir.arrayidx6)
608B	  %13:gr64 = LEA64r $rip, 1, $noreg, @lu__str_9_jacu_, $noreg
624B	  MOV64mr %stack.10.t_names, 1, $noreg, 64, $noreg, %13:gr64 :: (store 8 into %ir.arrayidx7, align 16)
640B	  %14:gr64 = LEA64r $rip, 1, $noreg, @lu__str_10_buts_, $noreg
656B	  MOV64mr %stack.10.t_names, 1, $noreg, 72, $noreg, %14:gr64 :: (store 8 into %ir.arrayidx8)
672B	  %15:gr64 = LEA64r $rip, 1, $noreg, @lu__str_11_add_, $noreg
688B	  MOV64mr %stack.10.t_names, 1, $noreg, 80, $noreg, %15:gr64 :: (store 8 into %ir.arrayidx9, align 16)
704B	  %16:gr64 = LEA64r $rip, 1, $noreg, @lu__str_12_l2norm_, $noreg
720B	  MOV64mr %stack.10.t_names, 1, $noreg, 88, $noreg, %16:gr64 :: (store 8 into %ir.arrayidx10)
736B	  %17:gr64 = MOV64rm %stack.11.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $rdi = COPY %17:gr64
784B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  PCN_STACKMAP 1, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, %17:gr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
848B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
864B	  JMP_1 %bb.3

880B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

896B	  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0 :: (store 4 into @timeron)

912B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x50000000), %bb.14(0x30000000); %bb.4(62.50%), %bb.14(37.50%)

928B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
976B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
992B	  CALL64pcrel32 @read_input, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1024B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  PCN_STACKMAP 2, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1056B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1072B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1088B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1104B	  CALL64pcrel32 @domain, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  PCN_STACKMAP 3, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1168B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1200B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1216B	  CALL64pcrel32 @setcoeff, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
1232B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1264B	  PCN_STACKMAP 4, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1280B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1312B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1328B	  CALL64pcrel32 @setbv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
1344B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1360B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  PCN_STACKMAP 5, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1408B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1424B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1440B	  CALL64pcrel32 @setiv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1472B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1488B	  PCN_STACKMAP 6, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1504B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1536B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1552B	  CALL64pcrel32 @erhs, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
1568B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  PCN_STACKMAP 7, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1616B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1632B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1664B	  $edi = MOV32ri 1
1680B	  CALL64pcrel32 @ssor, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
1696B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1712B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1728B	  PCN_STACKMAP 8, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1744B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1776B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1792B	  CALL64pcrel32 @setbv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
1808B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1824B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1840B	  PCN_STACKMAP 9, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1856B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1872B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1888B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1904B	  CALL64pcrel32 @setiv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
1920B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1936B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1952B	  PCN_STACKMAP 10, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1968B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1984B	  %22:gr32 = MOV32rm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
2000B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2016B	  $edi = COPY %22:gr32
2032B	  CALL64pcrel32 @ssor, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
2048B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2080B	  PCN_STACKMAP 11, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, %22:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
2096B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
2144B	  CALL64pcrel32 @error, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
2160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2192B	  PCN_STACKMAP 12, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
2208B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2224B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
2256B	  CALL64pcrel32 @pintgr, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
2272B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2304B	  PCN_STACKMAP 13, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
2320B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2336B	  %23:fr64 = MOVSDrm_alt $rip, 1, $noreg, @frc, $noreg :: (dereferenceable load 8 from @frc)
2352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2432B	  $rdi = LEA64r $rip, 1, $noreg, @rsdnm, $noreg
2448B	  $rsi = LEA64r $rip, 1, $noreg, @errnm, $noreg
2480B	  $rdx = LEA64r %stack.3.Class, 1, $noreg, 0, $noreg
2496B	  $rcx = LEA64r %stack.4.verified, 1, $noreg, 0, $noreg
2504B	  $xmm0 = COPY %23:fr64
2512B	  CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit killed $rdx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp
2528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
2560B	  PCN_STACKMAP 14, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, %23:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
2576B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2592B	  %28:fr64 = CVTSI2SDrm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
2608B	  %39:gr32 = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
2624B	  %31:fr64 = CVTSI2SDrr %39:gr32
2656B	  %31:fr64 = MULSDrm %31:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
2672B	  %32:gr32 = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
2688B	  %34:fr64 = CVTSI2SDrr %32:gr32
2720B	  %34:fr64 = MULSDrr %34:fr64(tied-def 0), %31:fr64
2736B	  %35:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
2752B	  %37:fr64 = CVTSI2SDrr %35:gr32
2784B	  %37:fr64 = MULSDrr %37:fr64(tied-def 0), %34:fr64
2816B	  %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %32:gr32, implicit-def dead $eflags
2848B	  %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
2864B	  %42:fr64 = CVTSI2SDrr %39:gr32
2880B	  %41:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
2912B	  %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %41:fr64
2928B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2944B	  %43:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
2960B	  $xmm0 = COPY %42:fr64
2976B	  $xmm1 = COPY %43:fr64
2992B	  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
3008B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3024B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
3040B	  PCN_STACKMAP 15, 0, 0, %stack.3.Class, 0, %28:fr64, %42:fr64, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, %37:fr64, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
3056B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3072B	  %46:fr64 = COPY $xmm0
3104B	  %46:fr64 = MULSDrm %46:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
3136B	  %46:fr64 = ADDSDrr %46:fr64(tied-def 0), %37:fr64
3152B	  undef %126.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
3168B	  undef %127.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
3216B	  %51:gr32 = LEA64_32r %126:gr64_with_sub_8bit, 1, %127:gr64_nosp, 0, $noreg
3232B	  %50:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
3264B	  %51:gr32 = nsw ADD32rr %51:gr32(tied-def 0), %50:gr32, implicit-def dead $eflags
3280B	  %54:fr64 = CVTSI2SDrr %51:gr32
3312B	  %54:fr64 = MULSDrm %54:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
3344B	  %54:fr64 = DIVSDrr %54:fr64(tied-def 0), %41:fr64
3376B	  %54:fr64 = ADDSDrr %54:fr64(tied-def 0), %46:fr64
3408B	  %54:fr64 = ADDSDrm %54:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
3440B	  %54:fr64 = MULSDrr %54:fr64(tied-def 0), %28:fr64
3456B	  %58:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
3472B	  %59:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
3504B	  %59:fr64 = MULSDrr %59:fr64(tied-def 0), %58:fr64
3536B	  %54:fr64 = DIVSDrr %54:fr64(tied-def 0), %59:fr64
3552B	  MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %54:fr64 :: (store 8 into %ir.mflops)
3568B	  %61:gr32 = MOVSX32rm8 %stack.3.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class, align 4)
3600B	  %63:gr32 = MOV32rm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
3616B	  %64:gr32 = MOV32rm %stack.4.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
3632B	  ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3648B	  %65:gr64 = LEA64r $rip, 1, $noreg, @lu__str_23__none__, $noreg
3680B	  MOV64mr $rsp, 1, $noreg, 80, $noreg, %65:gr64 :: (store 8 into stack + 80)
3696B	  %67:gr64 = LEA64r $rip, 1, $noreg, @lu__str_22__O3__mcmod, $noreg
3712B	  MOV64mr $rsp, 1, $noreg, 72, $noreg, %67:gr64 :: (store 8 into stack + 72)
3728B	  %68:gr64 = LEA64r $rip, 1, $noreg, @lu__str_21__g__Wall__, $noreg
3744B	  MOV64mr $rsp, 1, $noreg, 64, $noreg, %68:gr64 :: (store 8 into stack + 64)
3760B	  %69:gr64 = LEA64r $rip, 1, $noreg, @lu__str_20__I___commo, $noreg
3776B	  MOV64mr $rsp, 1, $noreg, 56, $noreg, %69:gr64 :: (store 8 into stack + 56)
3792B	  %70:gr64 = LEA64r $rip, 1, $noreg, @lu__str_19__lm_, $noreg
3808B	  MOV64mr $rsp, 1, $noreg, 48, $noreg, %70:gr64 :: (store 8 into stack + 48)
3824B	  %71:gr64 = LEA64r $rip, 1, $noreg, @lu__str_18___CC__, $noreg
3840B	  MOV64mr $rsp, 1, $noreg, 40, $noreg, %71:gr64 :: (store 8 into stack + 40)
3856B	  %72:gr64 = LEA64r $rip, 1, $noreg, @lu__str_17_gcc_, $noreg
3872B	  MOV64mr $rsp, 1, $noreg, 32, $noreg, %72:gr64 :: (store 8 into stack + 32)
3888B	  %73:gr64 = LEA64r $rip, 1, $noreg, @lu__str_16_03_Nov_201, $noreg
3904B	  MOV64mr $rsp, 1, $noreg, 24, $noreg, %73:gr64 :: (store 8 into stack + 24)
3920B	  %74:gr64 = LEA64r $rip, 1, $noreg, @lu__str_15_3_3_1_, $noreg
3936B	  MOV64mr $rsp, 1, $noreg, 16, $noreg, %74:gr64 :: (store 8 into stack + 16)
3952B	  MOV32mr $rsp, 1, $noreg, 8, $noreg, %64:gr32 :: (store 4 into stack + 8)
3968B	  %75:gr64 = LEA64r $rip, 1, $noreg, @lu__str_14___________, $noreg
3984B	  MOV64mr $rsp, 1, $noreg, 0, $noreg, %75:gr64 :: (store 8 into stack)
4016B	  $rdi = LEA64r $rip, 1, $noreg, @lu__str_13_LU_, $noreg
4032B	  $esi = COPY %61:gr32
4048B	  $edx = COPY %126.sub_32bit:gr64_with_sub_8bit
4064B	  $ecx = COPY %127.sub_32bit:gr64_nosp
4080B	  $r8d = COPY %50:gr32
4096B	  $r9d = COPY %63:gr32
4112B	  $xmm0 = COPY %58:fr64
4128B	  $xmm1 = COPY %54:fr64
4144B	  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
4160B	  ADJCALLSTACKUP64 88, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4192B	  PCN_STACKMAP 16, 0, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %61.sub_8bit:gr32, %126.sub_32bit:gr64_with_sub_8bit, %127.sub_32bit:gr64_nosp, %50:gr32, %63:gr32, %58:fr64, %54:fr64, %64:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
4208B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4224B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
4240B	  JCC_1 %bb.14, 4, implicit killed $eflags
4256B	  JMP_1 %bb.4

4272B	bb.4.if.then31:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

4288B	  %77:gr32 = MOV32ri 1
4304B	  MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %77:gr32 :: (store 4 into %ir.i)
4320B	  %124:gr64 = LEA64r %stack.8.trecs, 1, $noreg, 0, $noreg

4336B	bb.5.for.cond:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

4352B	  CMP32mi8 %stack.9.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
4368B	  JCC_1 %bb.7, 15, implicit killed $eflags
4384B	  JMP_1 %bb.6

4400B	bb.6.for.body:
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

4416B	  %121:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
4432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4448B	  $edi = COPY %121:gr32
4464B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
4480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4512B	  PCN_STACKMAP 17, 0, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %121:gr32, implicit-def dead early-clobber $r11 :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
4528B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4544B	  %122:fr64 = COPY $xmm0
4560B	  %123:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
4576B	  MOVSDmr %124:gr64, 8, %123:gr64_nosp, 0, $noreg, %122:fr64 :: (store 8 into %ir.arrayidx35)
4592B	  INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
4608B	  JMP_1 %bb.5

4624B	bb.7.for.end:
	; predecessors: %bb.5
	  successors: %bb.8(0x50000000), %bb.9(0x30000000); %bb.8(62.50%), %bb.9(37.50%)

4640B	  %80:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
4656B	  MOVSDmr %stack.7.tmax, 1, $noreg, 0, $noreg, %80:fr64 :: (store 8 into %ir.tmax)
4672B	  %81:fr64 = FsFLD0SD
4688B	  UCOMISDrr %80:fr64, %81:fr64, implicit-def $eflags
4704B	  JCC_1 %bb.9, 5, implicit $eflags
4720B	  JCC_1 %bb.9, 10, implicit killed $eflags
4736B	  JMP_1 %bb.8

4752B	bb.8.if.then38:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

4768B	  %82:gr64 = MOV64ri 4607182418800017408
4784B	  MOV64mr %stack.7.tmax, 1, $noreg, 0, $noreg, %82:gr64 :: (store 8 into %ir.tmax)

4800B	bb.9.if.end39:
	; predecessors: %bb.7, %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

4816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4880B	  $rdi = LEA64r $rip, 1, $noreg, @lu__str_24___SECTION_, $noreg
4896B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4912B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
4960B	  PCN_STACKMAP 18, 0, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
4976B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4992B	  %87:gr32 = MOV32ri 1
5008B	  MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %87:gr32 :: (store 4 into %ir.i)
5024B	  %92:gr64 = LEA64r %stack.10.t_names, 1, $noreg, 0, $noreg
5040B	  %94:gr64 = LEA64r %stack.8.trecs, 1, $noreg, 0, $noreg
5056B	  %125:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)

5152B	bb.10.for.cond41:
	; predecessors: %bb.9, %bb.13
	  successors: %bb.11(0x7c000000), %bb.14(0x04000000); %bb.11(96.88%), %bb.14(3.12%)

5168B	  CMP32mi8 %stack.9.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
5184B	  JCC_1 %bb.14, 15, implicit killed $eflags
5200B	  JMP_1 %bb.11

5216B	bb.11.for.body44:
	; predecessors: %bb.10
	  successors: %bb.12(0x40000000), %bb.13(0x40000000); %bb.12(50.00%), %bb.13(50.00%)

5232B	  %91:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
5248B	  %93:gr64 = MOV64rm %92:gr64, 8, %91:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx46)
5264B	  %95:fr64 = MOVSDrm_alt %94:gr64, 8, %91:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx50)
5280B	  %97:fr64 = COPY %95:fr64
5296B	  %97:fr64 = MULSDrr %97:fr64(tied-def 0), %125:fr64
5328B	  %97:fr64 = DIVSDrm %97:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
5344B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5360B	  $rdi = LEA64r $rip, 1, $noreg, @lu__str_25_____8s__9_, $noreg
5376B	  $rsi = COPY %93:gr64
5392B	  $xmm0 = COPY %95:fr64
5408B	  $xmm1 = COPY %97:fr64
5424B	  $al = MOV8ri 2
5440B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
5456B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5472B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5488B	  PCN_STACKMAP 19, 0, %97:fr64, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %93:gr64, %95:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
5504B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5520B	  CMP32mi8 %stack.9.i, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
5536B	  JCC_1 %bb.13, 5, implicit killed $eflags
5552B	  JMP_1 %bb.12

5568B	bb.12.if.then56:
	; predecessors: %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

5584B	  %105:fr64 = MOVSDrm_alt %stack.8.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
5616B	  %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx58)
5648B	  %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
5664B	  MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %105:fr64 :: (store 8 into %ir.t)
5680B	  %108:fr64 = COPY %105:fr64
5696B	  %108:fr64 = MULSDrr %108:fr64(tied-def 0), %125:fr64
5728B	  %108:fr64 = DIVSDrm %108:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
5744B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5760B	  $rdi = LEA64r $rip, 1, $noreg, @lu__str_26___________, $noreg
5776B	  $rsi = LEA64r $rip, 1, $noreg, @lu__str_27_sub_rhs_, $noreg
5792B	  $xmm0 = COPY %105:fr64
5808B	  $xmm1 = COPY %108:fr64
5824B	  $al = MOV8ri 2
5840B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
5856B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5872B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
5888B	  PCN_STACKMAP 20, 0, %108:fr64, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %105:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
5904B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5920B	  %113:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
5936B	  %116:fr64 = MOVSDrm_alt %94:gr64, 8, %113:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx66)
5968B	  %116:fr64 = SUBSDrm %116:fr64(tied-def 0), %stack.6.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
5984B	  MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %116:fr64 :: (store 8 into %ir.t)
6000B	  %118:fr64 = COPY %116:fr64
6016B	  %118:fr64 = MULSDrr %118:fr64(tied-def 0), %125:fr64
6048B	  %118:fr64 = DIVSDrm %118:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
6064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6080B	  $rdi = LEA64r $rip, 1, $noreg, @lu__str_26___________, $noreg
6096B	  $rsi = LEA64r $rip, 1, $noreg, @lu__str_28_rest_rhs_, $noreg
6112B	  $xmm0 = COPY %116:fr64
6128B	  $xmm1 = COPY %118:fr64
6144B	  $al = MOV8ri 2
6160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
6176B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
6208B	  PCN_STACKMAP 21, 0, %118:fr64, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %116:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
6224B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

6240B	bb.13.if.end71:
	; predecessors: %bb.11, %bb.12
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

6256B	  INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
6272B	  JMP_1 %bb.10

6288B	bb.14.if.end75:
	; predecessors: %bb.3, %bb.10

6320B	  $eax = MOV32r0 implicit-def dead $eflags
6336B	  RET 0, killed $eax

# End machine code for function main.

