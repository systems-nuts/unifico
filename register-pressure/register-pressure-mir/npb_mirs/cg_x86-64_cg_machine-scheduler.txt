Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
  fi#12: size=8, align=8, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=1, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=8, align=8, at location [SP+8]
  fi#17: size=8, align=8, at location [SP+8]
  fi#18: size=8, align=8, at location [SP+8]
  fi#19: size=24, align=16, at location [SP+8]
  fi#20: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x41D2309CE5400000, align=8
  cp#1: <double 0x7FFFFFFFFFFFFFFF, double 0x7FFFFFFFFFFFFFFF>, align=16
  cp#2: 0x422979CA8D600000, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
  cp#5: 1.000000e+00, align=8
  cp#6: 6.000000e+01, align=8
Function Live Ins: $edi in %9, $rsi in %10

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $rsi
  %10:gr64 = COPY $rsi
  %9:gr32 = COPY $edi
  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.argc.addr)
  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %10:gr64 :: (store 8 into %ir.argv.addr)
  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !137 :: (dereferenceable load 4 from %ir.i); cg.c:117:19
  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !138; cg.c:117:5
  JMP_1 %bb.2, debug-location !138; cg.c:117:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %324:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !139 :: (dereferenceable load 4 from %ir.i); cg.c:118:21
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; cg.c:118:9
  $edi = COPY %324:gr32, debug-location !141; cg.c:118:9
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !141; cg.c:118:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !141; cg.c:118:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !142; cg.c:119:5
  PCN_STACKMAP 0, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.20.fp, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %324:gr32, implicit-def dead early-clobber $r11, debug-location !142 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.20.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:119:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !142; cg.c:119:5
  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !143 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:117:30
  JMP_1 %bb.1, debug-location !144; cg.c:117:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x50000000), %bb.5(0x30000000); %bb.4(62.50%), %bb.5(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !153; cg.c:122:15
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_timer_flag, $noreg, debug-location !153; cg.c:122:15
  $rsi = LEA64r $rip, 1, $noreg, @cg__str_1_r_, $noreg, debug-location !153; cg.c:122:15
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !153; cg.c:122:15
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !153; cg.c:122:15
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !155; cg.c:122:13
  PCN_STACKMAP 1, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.20.fp, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !155 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.20.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:122:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !155; cg.c:122:13
  %15:gr64 = COPY killed $rax, debug-location !153; cg.c:122:15
  MOV64mr %stack.20.fp, 1, $noreg, 0, $noreg, %15:gr64, debug-location !155 :: (store 8 into %ir.fp); cg.c:122:13
  TEST64rr %15:gr64, %15:gr64, implicit-def $eflags, debug-location !156; cg.c:122:41
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !157; cg.c:122:9
  JMP_1 %bb.4, debug-location !157; cg.c:122:9

bb.4.if.then:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %16:gr32 = MOV32ri 1
  MOV32mr $rip, 1, $noreg, @timeron, $noreg, %16:gr32, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
  %17:gr64 = LEA64r $rip, 1, $noreg, @cg__str_2_init_, $noreg, debug-location !161; cg.c:124:25
  MOV64mr %stack.19.t_names, 1, $noreg, 0, $noreg, %17:gr64, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
  %18:gr64 = LEA64r $rip, 1, $noreg, @cg__str_3_benchmk_, $noreg, debug-location !163; cg.c:125:26
  MOV64mr %stack.19.t_names, 1, $noreg, 8, $noreg, %18:gr64, debug-location !163 :: (store 8 into %ir.arrayidx2); cg.c:125:26
  %19:gr64 = LEA64r $rip, 1, $noreg, @cg__str_4_conjgd_, $noreg, debug-location !165; cg.c:126:30
  MOV64mr %stack.19.t_names, 1, $noreg, 16, $noreg, %19:gr64, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  %20:gr64 = MOV64rm %stack.20.fp, 1, $noreg, 0, $noreg, debug-location !166 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !167; cg.c:127:9
  $rdi = COPY %20:gr64, debug-location !167; cg.c:127:9
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !167; cg.c:127:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !167; cg.c:127:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !168; cg.c:128:5
  PCN_STACKMAP 2, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %20:gr64, implicit-def dead early-clobber $r11, debug-location !168 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:128:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !168; cg.c:128:5
  JMP_1 %bb.6, debug-location !168; cg.c:128:5

bb.5.if.else:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0, debug-location !169 :: (store 4 into @timeron); cg.c:130:17

bb.6.if.end:
; predecessors: %bb.5, %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  undef %338.sub_32bit:gr64_nosp = MOV32ri 75000
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !172; cg.c:133:5
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !172; cg.c:133:5
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !172; cg.c:133:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !172; cg.c:133:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !173; cg.c:135:14
  PCN_STACKMAP 3, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !173 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:135:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !173; cg.c:135:14
  MOV32mi $rip, 1, $noreg, @firstrow, $noreg, 0, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
  %23:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !174; cg.c:136:13
  MOV32mr $rip, 1, $noreg, @lastrow, $noreg, %23:gr32, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
  MOV32mi $rip, 1, $noreg, @firstcol, $noreg, 0, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
  MOV32mr $rip, 1, $noreg, @lastcol, $noreg, %23:gr32, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
  MOV8mi %stack.14.Class, 1, $noreg, 0, $noreg, 66, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
  %24:gr64 = MOV64ri 4627086287187887514
  MOV64mr %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, %24:gr64, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !184; cg.c:172:5
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_5____NAS_Par, $noreg, debug-location !184; cg.c:172:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !184; cg.c:172:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !184; cg.c:172:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !184; cg.c:172:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !185; cg.c:173:5
  PCN_STACKMAP 4, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !185 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:173:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !185; cg.c:173:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !185; cg.c:173:5
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_6__Size___11, $noreg, debug-location !185; cg.c:173:5
  $esi = MOV32ri 75000, debug-location !185; cg.c:173:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !185; cg.c:173:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !185; cg.c:173:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !185; cg.c:173:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !186; cg.c:174:5
  PCN_STACKMAP 5, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !186 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:174:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !186; cg.c:174:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !186; cg.c:174:5
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_7__Iteration, $noreg, debug-location !186; cg.c:174:5
  $esi = MOV32ri 75, debug-location !186; cg.c:174:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !186; cg.c:174:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !186; cg.c:174:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !186; cg.c:174:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !187; cg.c:175:5
  PCN_STACKMAP 6, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !187 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:175:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !187; cg.c:175:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !187; cg.c:175:5
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_8___, $noreg, debug-location !187; cg.c:175:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !187; cg.c:175:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !187; cg.c:175:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !187; cg.c:175:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !188; cg.c:177:9
  PCN_STACKMAP 7, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !188 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:177:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !188; cg.c:177:9
  MOV32mr $rip, 1, $noreg, @naa, $noreg, %338.sub_32bit:gr64_nosp, debug-location !188 :: (store 4 into @naa); cg.c:177:9
  %35:gr32 = MOV32ri 14700000
  MOV32mr $rip, 1, $noreg, @nzz, $noreg, %35:gr32, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
  %36:gr64 = MOV64ri 4734050326586327040
  MOV64mr $rip, 1, $noreg, @tran, $noreg, %36:gr64, debug-location !190 :: (store 8 into @tran); cg.c:183:10
  %38:gr64 = MOV64ri 4742906807993761792
  MOV64mr $rip, 1, $noreg, @amult, $noreg, %38:gr64, debug-location !191 :: (store 8 into @amult); cg.c:184:11
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !193; cg.c:185:12
  %39:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !193; cg.c:185:12
  $xmm0 = COPY %39:fr64, debug-location !193; cg.c:185:12
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !193; cg.c:185:12
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !193; cg.c:185:12
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !194; cg.c:185:10
  PCN_STACKMAP 8, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %39:fr64, implicit-def dead early-clobber $r11, debug-location !194 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:185:10
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !194; cg.c:185:10
  %40:fr64 = COPY killed $xmm0, debug-location !193; cg.c:185:12
  MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %40:fr64, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
  %41:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
  %42:gr32 = MOV32rm $rip, 1, $noreg, @nzz, $noreg, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  %43:gr32 = MOV32rm $rip, 1, $noreg, @firstrow, $noreg, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  %44:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  %45:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  %46:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  ADJCALLSTACKDOWN64 56, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !201; cg.c:190:5
  %47:gr64 = LEA64r $rip, 1, $noreg, @iv, $noreg, debug-location !201; cg.c:190:5
  MOV64mr $rsp, 1, $noreg, 48, $noreg, %47:gr64, debug-location !201 :: (store 8 into stack + 48); cg.c:190:5
  %49:gr64 = LEA64r $rip, 1, $noreg, @aelt, $noreg, debug-location !201; cg.c:190:5
  MOV64mr $rsp, 1, $noreg, 40, $noreg, %49:gr64, debug-location !201 :: (store 8 into stack + 40); cg.c:190:5
  %50:gr64 = LEA64r $rip, 1, $noreg, @acol, $noreg, debug-location !201; cg.c:190:5
  MOV64mr $rsp, 1, $noreg, 32, $noreg, %50:gr64, debug-location !201 :: (store 8 into stack + 32); cg.c:190:5
  %51:gr64 = LEA64r $rip, 1, $noreg, @arow, $noreg, debug-location !201; cg.c:190:5
  MOV64mr $rsp, 1, $noreg, 24, $noreg, %51:gr64, debug-location !201 :: (store 8 into stack + 24); cg.c:190:5
  MOV32mr $rsp, 1, $noreg, 16, $noreg, %46:gr32, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
  MOV32mr $rsp, 1, $noreg, 8, $noreg, %45:gr32, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
  MOV32mr $rsp, 1, $noreg, 0, $noreg, %44:gr32, debug-location !201 :: (store 4 into stack); cg.c:190:5
  %53:gr64 = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !201; cg.c:190:5
  %54:gr64 = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !201; cg.c:190:5
  $edi = COPY %41:gr32, debug-location !201; cg.c:190:5
  $esi = COPY %42:gr32, debug-location !201; cg.c:190:5
  $rdx = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !201; cg.c:190:5
  $rcx = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !201; cg.c:190:5
  $r8 = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !201; cg.c:190:5
  $r9d = COPY %43:gr32, debug-location !201; cg.c:190:5
  CALL64pcrel32 @makea, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp, debug-location !201; cg.c:190:5
  ADJCALLSTACKUP64 56, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !201; cg.c:190:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !202; cg.c:202:12
  PCN_STACKMAP 9, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %41:gr32, %42:gr32, %43:gr32, %44:gr32, %45:gr32, %46:gr32, implicit-def dead early-clobber $r11, debug-location !202 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:202:12
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !202; cg.c:202:12
  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !202 :: (store 4 into %ir.j); cg.c:202:12

bb.7.for.cond10:
; predecessors: %bb.6, %bb.11
  successors: %bb.8(0x7c000000), %bb.12(0x04000000); %bb.8(96.88%), %bb.12(3.12%)

  %58:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  %58:gr32 = nsw SUB32rm %58:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !209 :: (dereferenceable load 4 from @firstrow); cg.c:202:29
  %58:gr32 = nsw INC32r %58:gr32(tied-def 0), implicit-def dead $eflags, debug-location !210; cg.c:202:40
  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %58:gr32, implicit-def $eflags, debug-location !211 :: (dereferenceable load 4 from %ir.j); cg.c:202:19
  JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !212; cg.c:202:5
  JMP_1 %bb.8, debug-location !212; cg.c:202:5

bb.8.for.body12:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %312:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  %314:gr32 = MOV32rm %54:gr64, 4, %312:gr64_nosp, 0, $noreg, debug-location !216 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %314:gr32, debug-location !217 :: (store 4 into %ir.k); cg.c:203:16

bb.9.for.cond14:
; predecessors: %bb.8, %bb.10
  successors: %bb.10(0x7c000000), %bb.11(0x04000000); %bb.10(96.88%), %bb.11(3.12%)

  %315:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
  %316:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !221 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
  CMP32rm %315:gr32, %54:gr64, 4, %316:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !224 :: (load 4 from %ir.arrayidx17); cg.c:203:31
  JCC_1 %bb.11, 13, implicit killed $eflags, debug-location !225; cg.c:203:9
  JMP_1 %bb.10, debug-location !225; cg.c:203:9

bb.10.for.body19:
; predecessors: %bb.9
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %331:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  %322:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  SUB32mr %53:gr64, 4, %331:gr64_nosp, 0, $noreg, %322:gr32, implicit-def dead $eflags, debug-location !233 :: (store 4 into %ir.arrayidx24), (load 4 from %ir.arrayidx21); cg.c:204:23
  %323:gr32 = LEA64_32r %331:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !234; cg.c:203:49
  MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %323:gr32, debug-location !234 :: (store 4 into %ir.k); cg.c:203:49
  JMP_1 %bb.9, debug-location !235; cg.c:203:9

bb.11.for.end27:
; predecessors: %bb.9
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  INC32m %stack.4.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !238 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:202:46
  JMP_1 %bb.7, debug-location !239; cg.c:202:5

bb.12.for.end30:
; predecessors: %bb.7
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
  %61:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, 1, $noreg
  %309:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
  %310:gr64 = MOV64ri 4607182418800017408

bb.13.for.cond31:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

  CMP32mr %stack.3.i, 1, $noreg, 0, $noreg, %61:gr32, implicit-def $eflags, debug-location !247 :: (dereferenceable load 4 from %ir.i); cg.c:211:19
  JCC_1 %bb.15, 13, implicit killed $eflags, debug-location !248; cg.c:211:5
  JMP_1 %bb.14, debug-location !248; cg.c:211:5

bb.14.for.body33:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %333:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  MOV64mr %309:gr64, 8, %333:gr64_nosp, 0, $noreg, %310:gr64, debug-location !252 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  %311:gr32 = LEA64_32r %333:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !253; cg.c:211:30
  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %311:gr32, debug-location !253 :: (store 4 into %ir.i); cg.c:211:30
  JMP_1 %bb.13, debug-location !254; cg.c:211:5

bb.15.for.end38:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
  %300:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
  %301:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
  undef %303.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
  %304:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
  %305:gr64 = LEA64r $rip, 1, $noreg, @p, $noreg

bb.16.for.cond39:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

  %66:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  %66:gr32 = nsw SUB32rm %66:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !264 :: (dereferenceable load 4 from @firstcol); cg.c:214:29
  %66:gr32 = nsw INC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !265; cg.c:214:40
  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !266 :: (dereferenceable load 4 from %ir.j); cg.c:214:19
  JCC_1 %bb.18, 13, implicit killed $eflags, debug-location !267; cg.c:214:5
  JMP_1 %bb.17, debug-location !267; cg.c:214:5

bb.17.for.body43:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %334:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  MOV64mi32 %300:gr64, 8, %334:gr64_nosp, 0, $noreg, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  MOV64mr %301:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  MOV64mr %304:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  MOV64mr %305:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  %306:gr32 = LEA64_32r %334:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !281; cg.c:214:46
  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %306:gr32, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46
  JMP_1 %bb.16, debug-location !282; cg.c:214:5

bb.18.for.end54:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
  %68:gr32 = MOV32ri 1
  MOV32mr %stack.6.it, 1, $noreg, 0, $noreg, %68:gr32, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
  %256:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
  %257:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
  %258:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
  %261:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
  %262:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
  undef %266.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
  %272:fr64 = FsFLD0SD
  %274:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)

bb.19.for.cond55:
; predecessors: %bb.18, %bb.29
  successors: %bb.20(0x7c000000), %bb.30(0x04000000); %bb.20(96.88%), %bb.30(3.12%)

  CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !291 :: (dereferenceable load 4 from %ir.it); cg.c:228:21
  JCC_1 %bb.30, 15, implicit killed $eflags, debug-location !292; cg.c:228:5
  JMP_1 %bb.20, debug-location !292; cg.c:228:5

bb.20.for.body57:
; predecessors: %bb.19
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  ADJCALLSTACKDOWN64 24, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !293; cg.c:232:9
  MOV64mr $rsp, 1, $noreg, 16, $noreg, %256:gr64, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
  MOV64mr $rsp, 1, $noreg, 8, $noreg, %257:gr64, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9
  MOV64mr $rsp, 1, $noreg, 0, $noreg, %258:gr64, debug-location !293 :: (store 8 into stack); cg.c:232:9
  $rdi = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !293; cg.c:232:9
  $rsi = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !293; cg.c:232:9
  $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !293; cg.c:232:9
  $rcx = LEA64r $rip, 1, $noreg, @z, $noreg, debug-location !293; cg.c:232:9
  $r8 = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !293; cg.c:232:9
  $r9 = LEA64r $rip, 1, $noreg, @p, $noreg, debug-location !293; cg.c:232:9
  CALL64pcrel32 @conj_grad, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !293; cg.c:232:9
  ADJCALLSTACKUP64 24, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !293; cg.c:232:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !295; cg.c:240:20
  PCN_STACKMAP 10, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !295 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:240:20
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !295; cg.c:240:20
  MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !295 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  MOV64mr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %266:gr64_with_sub_32bit_in_gr32temp, debug-location !296 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !297 :: (store 4 into %ir.j); cg.c:242:16

bb.21.for.cond58:
; predecessors: %bb.20, %bb.22
  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

  %270:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  %270:gr32 = nsw SUB32rm %270:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !304 :: (dereferenceable load 4 from @firstcol); cg.c:242:33
  %270:gr32 = nsw INC32r %270:gr32(tied-def 0), implicit-def dead $eflags, debug-location !305; cg.c:242:44
  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %270:gr32, implicit-def $eflags, debug-location !306 :: (dereferenceable load 4 from %ir.j); cg.c:242:23
  JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !307; cg.c:242:9
  JMP_1 %bb.22, debug-location !307; cg.c:242:9

bb.22.for.body62:
; predecessors: %bb.21
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %336:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  %296:fr64 = MOVSDrm_alt %262:gr64, 8, %336:gr64_nosp, 0, $noreg, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  %294:fr64 = MOVSDrm_alt %261:gr64, 8, %336:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx64)
  %294:fr64 = MULSDrr %294:fr64(tied-def 0), %296:fr64, debug-location !314; cg.c:243:44
  %294:fr64 = ADDSDrm %294:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !315 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:37
  MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %294:fr64, debug-location !316 :: (store 8 into %ir.norm_temp1); cg.c:243:24
  %296:fr64 = MULSDrr %296:fr64(tied-def 0), %296:fr64, debug-location !322; cg.c:244:44
  %296:fr64 = ADDSDrm %296:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:37
  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %296:fr64, debug-location !324 :: (store 8 into %ir.norm_temp2); cg.c:244:24
  %297:gr32 = LEA64_32r %336:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !325; cg.c:242:50
  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %297:gr32, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50
  JMP_1 %bb.21, debug-location !326; cg.c:242:9

bb.23.for.end76:
; predecessors: %bb.21
  successors: %bb.24(0x40000000), %bb.25(0x40000000); %bb.24(50.00%), %bb.25(50.00%)

  %1:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  UCOMISDrr %1:fr64, %272:fr64, implicit-def $eflags, debug-location !331; cg.c:247:26
  JCC_1 %bb.25, 2, implicit killed $eflags, debug-location !331; cg.c:247:26

bb.24:
; predecessors: %bb.23
  successors: %bb.26(0x80000000); %bb.26(100.00%)

  %328:fr64 = SQRTSDr %1:fr64
  JMP_1 %bb.26

bb.25.call.sqrt:
; predecessors: %bb.23
  successors: %bb.26(0x80000000); %bb.26(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !331; cg.c:247:26
  $xmm0 = COPY %1:fr64, debug-location !331; cg.c:247:26
  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !331; cg.c:247:26
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !331; cg.c:247:26
  %328:fr64 = COPY killed $xmm0, debug-location !331; cg.c:247:26

bb.26.for.end76.split:
; predecessors: %bb.25, %bb.24
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !331; cg.c:247:26
  PCN_STACKMAP 11, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %1:fr64, implicit-def dead early-clobber $r11, debug-location !331 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:247:26
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !331; cg.c:247:26
  %275:fr64 = COPY %274:fr64, debug-location !331; cg.c:247:26
  %275:fr64 = DIVSDrr %275:fr64(tied-def 0), %328:fr64, debug-location !331; cg.c:247:26
  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %275:fr64, debug-location !332 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !333 :: (store 4 into %ir.j); cg.c:252:16

bb.27.for.cond78:
; predecessors: %bb.26, %bb.28
  successors: %bb.28(0x7c000000), %bb.29(0x04000000); %bb.28(96.88%), %bb.29(3.12%)

  %279:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  %279:gr32 = nsw SUB32rm %279:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !340 :: (dereferenceable load 4 from @firstcol); cg.c:252:33
  %279:gr32 = nsw INC32r %279:gr32(tied-def 0), implicit-def dead $eflags, debug-location !341; cg.c:252:44
  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %279:gr32, implicit-def $eflags, debug-location !342 :: (dereferenceable load 4 from %ir.j); cg.c:252:23
  JCC_1 %bb.29, 13, implicit killed $eflags, debug-location !343; cg.c:252:9
  JMP_1 %bb.28, debug-location !343; cg.c:252:9

bb.28.for.body82:
; predecessors: %bb.27
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  %285:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  %337:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  %285:fr64 = MULSDrm %285:fr64(tied-def 0), %262:gr64, 8, %337:gr64_nosp, 0, $noreg, debug-location !348 :: (load 8 from %ir.arrayidx84); cg.c:253:31
  MOVSDmr %261:gr64, 8, %337:gr64_nosp, 0, $noreg, %285:fr64, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  %287:gr32 = LEA64_32r %337:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !352; cg.c:252:50
  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %287:gr32, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50
  JMP_1 %bb.27, debug-location !353; cg.c:252:9

bb.29.for.end90:
; predecessors: %bb.27
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  INC32m %stack.6.it, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !356 :: (store 4 into %ir.it), (dereferenceable load 4 from %ir.it); cg.c:228:29
  JMP_1 %bb.19, debug-location !357; cg.c:228:5

bb.30.for.end93:
; predecessors: %bb.19
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
  %72:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, 1, $noreg
  %252:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
  %253:gr64 = MOV64ri 4607182418800017408

bb.31.for.cond94:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

  CMP32mr %stack.3.i, 1, $noreg, 0, $noreg, %72:gr32, implicit-def $eflags, debug-location !365 :: (dereferenceable load 4 from %ir.i); cg.c:260:19
  JCC_1 %bb.33, 13, implicit killed $eflags, debug-location !366; cg.c:260:5
  JMP_1 %bb.32, debug-location !366; cg.c:260:5

bb.32.for.body96:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %339:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  MOV64mr %252:gr64, 8, %339:gr64_nosp, 0, $noreg, %253:gr64, debug-location !370 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  %254:gr32 = LEA64_32r %339:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !371; cg.c:260:30
  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %254:gr32, debug-location !371 :: (store 4 into %ir.i); cg.c:260:30
  JMP_1 %bb.31, debug-location !372; cg.c:260:5

bb.33.for.end101:
; predecessors: %bb.31
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !375 :: (store 8 into %ir.zeta); cg.c:264:10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !376; cg.c:266:5
  undef %204.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !376; cg.c:266:5
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !376; cg.c:266:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !376; cg.c:266:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !377; cg.c:268:55
  PCN_STACKMAP 12, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !377 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:268:55
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !377; cg.c:268:55
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !377; cg.c:268:55
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !377; cg.c:268:55
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !377; cg.c:268:55
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !377; cg.c:268:55
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !378; cg.c:268:5
  PCN_STACKMAP 13, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !378 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:268:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !378; cg.c:268:5
  %75:fr64 = COPY killed $xmm0, debug-location !377; cg.c:268:55
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !378; cg.c:268:5
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_9__Initializ, $noreg, debug-location !378; cg.c:268:5
  $xmm0 = COPY %75:fr64, debug-location !378; cg.c:268:5
  $al = MOV8ri 1, debug-location !378; cg.c:268:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !378; cg.c:268:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !378; cg.c:268:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !379; cg.c:270:5
  PCN_STACKMAP 14, 0, 0, %stack.14.Class, 0, %75:fr64, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !379 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:270:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !379; cg.c:270:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !379; cg.c:270:5
  %79:gr32 = MOV32ri 1
  $edi = MOV32ri 1, debug-location !379; cg.c:270:5
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !379; cg.c:270:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !379; cg.c:270:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !380; cg.c:277:5
  PCN_STACKMAP 15, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !380 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:277:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !380; cg.c:277:5
  MOV32mr %stack.6.it, 1, $noreg, 0, $noreg, %79:gr32, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
  %193:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
  %194:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
  %195:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
  %198:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
  %199:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
  %210:fr64 = FsFLD0SD
  %212:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  %325:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)

bb.34.for.cond108:
; predecessors: %bb.33, %bb.50
  successors: %bb.35(0x7c000000), %bb.51(0x04000000); %bb.35(96.88%), %bb.51(3.12%)

  CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 75, implicit-def $eflags, debug-location !386 :: (dereferenceable load 4 from %ir.it); cg.c:279:21
  JCC_1 %bb.51, 15, implicit killed $eflags, debug-location !387; cg.c:279:5
  JMP_1 %bb.35, debug-location !387; cg.c:279:5

bb.35.for.body110:
; predecessors: %bb.34
  successors: %bb.36(0x50000000), %bb.37(0x30000000); %bb.36(62.50%), %bb.37(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags, debug-location !388 :: (dereferenceable load 4 from @timeron); cg.c:284:13
  JCC_1 %bb.37, 4, implicit killed $eflags, debug-location !391; cg.c:284:13
  JMP_1 %bb.36, debug-location !391; cg.c:284:13

bb.36.if.then111:
; predecessors: %bb.35
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !392; cg.c:285:13
  $edi = MOV32ri 2, debug-location !392; cg.c:285:13
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !392; cg.c:285:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !392; cg.c:285:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !392; cg.c:285:13
  PCN_STACKMAP 16, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !392 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:285:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !392; cg.c:285:13

bb.37.if.end112:
; predecessors: %bb.35, %bb.36
  successors: %bb.38(0x50000000), %bb.39(0x30000000); %bb.38(62.50%), %bb.39(37.50%)

  ADJCALLSTACKDOWN64 24, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !393; cg.c:286:9
  MOV64mr $rsp, 1, $noreg, 16, $noreg, %193:gr64, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
  MOV64mr $rsp, 1, $noreg, 8, $noreg, %194:gr64, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9
  MOV64mr $rsp, 1, $noreg, 0, $noreg, %195:gr64, debug-location !393 :: (store 8 into stack); cg.c:286:9
  $rdi = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !393; cg.c:286:9
  $rsi = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !393; cg.c:286:9
  $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !393; cg.c:286:9
  $rcx = LEA64r $rip, 1, $noreg, @z, $noreg, debug-location !393; cg.c:286:9
  $r8 = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !393; cg.c:286:9
  $r9 = LEA64r $rip, 1, $noreg, @p, $noreg, debug-location !393; cg.c:286:9
  CALL64pcrel32 @conj_grad, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !393; cg.c:286:9
  ADJCALLSTACKUP64 24, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !393; cg.c:286:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !394; cg.c:287:13
  PCN_STACKMAP 17, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !394 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:287:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !394; cg.c:287:13
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags, debug-location !394 :: (dereferenceable load 4 from @timeron); cg.c:287:13
  JCC_1 %bb.39, 4, implicit killed $eflags, debug-location !396; cg.c:287:13
  JMP_1 %bb.38, debug-location !396; cg.c:287:13

bb.38.if.then114:
; predecessors: %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !397; cg.c:288:13
  $edi = MOV32ri 2, debug-location !397; cg.c:288:13
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !397; cg.c:288:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !397; cg.c:288:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !397; cg.c:288:13
  PCN_STACKMAP 18, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !397 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:288:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !397; cg.c:288:13

bb.39.if.end115:
; predecessors: %bb.37, %bb.38
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !398 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  MOV64mr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %204:gr64_with_sub_32bit_in_gr32temp, debug-location !399 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !400 :: (store 4 into %ir.j); cg.c:299:16

bb.40.for.cond116:
; predecessors: %bb.39, %bb.41
  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)

  %208:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  %208:gr32 = nsw SUB32rm %208:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !407 :: (dereferenceable load 4 from @firstcol); cg.c:299:33
  %208:gr32 = nsw INC32r %208:gr32(tied-def 0), implicit-def dead $eflags, debug-location !408; cg.c:299:44
  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %208:gr32, implicit-def $eflags, debug-location !409 :: (dereferenceable load 4 from %ir.j); cg.c:299:23
  JCC_1 %bb.42, 13, implicit killed $eflags, debug-location !410; cg.c:299:9
  JMP_1 %bb.41, debug-location !410; cg.c:299:9

bb.41.for.body120:
; predecessors: %bb.40
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  %341:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  %248:fr64 = MOVSDrm_alt %199:gr64, 8, %341:gr64_nosp, 0, $noreg, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  %246:fr64 = MOVSDrm_alt %198:gr64, 8, %341:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx122)
  %246:fr64 = MULSDrr %246:fr64(tied-def 0), %248:fr64, debug-location !417; cg.c:300:44
  %246:fr64 = ADDSDrm %246:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:37
  MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %246:fr64, debug-location !419 :: (store 8 into %ir.norm_temp1); cg.c:300:24
  %248:fr64 = MULSDrr %248:fr64(tied-def 0), %248:fr64, debug-location !425; cg.c:301:44
  %248:fr64 = ADDSDrm %248:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !426 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:37
  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %248:fr64, debug-location !427 :: (store 8 into %ir.norm_temp2); cg.c:301:24
  %249:gr32 = LEA64_32r %341:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !428; cg.c:299:50
  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %249:gr32, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50
  JMP_1 %bb.40, debug-location !429; cg.c:299:9

bb.42.for.end135:
; predecessors: %bb.40
  successors: %bb.43(0x40000000), %bb.44(0x40000000); %bb.43(50.00%), %bb.44(50.00%)

  %5:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  UCOMISDrr %5:fr64, %210:fr64, implicit-def $eflags, debug-location !434; cg.c:304:26
  JCC_1 %bb.44, 2, implicit killed $eflags, debug-location !434; cg.c:304:26

bb.43:
; predecessors: %bb.42
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  %329:fr64 = SQRTSDr %5:fr64
  JMP_1 %bb.45

bb.44.call.sqrt4:
; predecessors: %bb.42
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !434; cg.c:304:26
  $xmm0 = COPY %5:fr64, debug-location !434; cg.c:304:26
  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !434; cg.c:304:26
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !434; cg.c:304:26
  %329:fr64 = COPY killed $xmm0, debug-location !434; cg.c:304:26

bb.45.for.end135.split:
; predecessors: %bb.44, %bb.43
  successors: %bb.46(0x40000000), %bb.47(0x40000000); %bb.46(50.00%), %bb.47(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !434; cg.c:304:26
  PCN_STACKMAP 19, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %5:fr64, implicit-def dead early-clobber $r11, debug-location !434 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:304:26
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !434; cg.c:304:26
  %213:fr64 = COPY %212:fr64, debug-location !434; cg.c:304:26
  %213:fr64 = DIVSDrr %213:fr64(tied-def 0), %329:fr64, debug-location !434; cg.c:304:26
  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %213:fr64, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  %215:fr64 = COPY %212:fr64, debug-location !437; cg.c:306:28
  %215:fr64 = DIVSDrm %215:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !437 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:28
  %215:fr64 = ADDSDrr %215:fr64(tied-def 0), %325:fr64, debug-location !438; cg.c:306:22
  MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %215:fr64, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14
  CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !442 :: (dereferenceable load 4 from %ir.it); cg.c:307:16
  JCC_1 %bb.47, 5, implicit killed $eflags, debug-location !443; cg.c:307:13
  JMP_1 %bb.46, debug-location !443; cg.c:307:13

bb.46.if.then141:
; predecessors: %bb.45
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !444; cg.c:308:13
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_10_____iterat, $noreg, debug-location !444; cg.c:308:13
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !444; cg.c:308:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !444; cg.c:308:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !444; cg.c:308:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !444; cg.c:308:13
  PCN_STACKMAP 20, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !444 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:308:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !444; cg.c:308:13

bb.47.if.end143:
; predecessors: %bb.45, %bb.46
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  %222:gr32 = MOV32rm %stack.6.it, 1, $noreg, 0, $noreg, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  %223:fr64 = MOVSDrm_alt %stack.8.rnorm, 1, $noreg, 0, $noreg, debug-location !446 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
  %224:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !447 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !448; cg.c:309:9
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_11______5d___, $noreg, debug-location !448; cg.c:309:9
  $esi = COPY %222:gr32, debug-location !448; cg.c:309:9
  $xmm0 = COPY %223:fr64, debug-location !448; cg.c:309:9
  $xmm1 = COPY %224:fr64, debug-location !448; cg.c:309:9
  $al = MOV8ri 2, debug-location !448; cg.c:309:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !448; cg.c:309:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !448; cg.c:309:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !449; cg.c:314:16
  PCN_STACKMAP 21, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %222:gr32, %223:fr64, %224:fr64, implicit-def dead early-clobber $r11, debug-location !449 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:314:16
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !449; cg.c:314:16
  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !449 :: (store 4 into %ir.j); cg.c:314:16

bb.48.for.cond145:
; predecessors: %bb.47, %bb.49
  successors: %bb.49(0x7c000000), %bb.50(0x04000000); %bb.49(96.88%), %bb.50(3.12%)

  %231:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  %231:gr32 = nsw SUB32rm %231:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !456 :: (dereferenceable load 4 from @firstcol); cg.c:314:33
  %231:gr32 = nsw INC32r %231:gr32(tied-def 0), implicit-def dead $eflags, debug-location !457; cg.c:314:44
  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %231:gr32, implicit-def $eflags, debug-location !458 :: (dereferenceable load 4 from %ir.j); cg.c:314:23
  JCC_1 %bb.50, 13, implicit killed $eflags, debug-location !459; cg.c:314:9
  JMP_1 %bb.49, debug-location !459; cg.c:314:9

bb.49.for.body149:
; predecessors: %bb.48
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  %237:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  %343:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  %237:fr64 = MULSDrm %237:fr64(tied-def 0), %199:gr64, 8, %343:gr64_nosp, 0, $noreg, debug-location !464 :: (load 8 from %ir.arrayidx151); cg.c:315:31
  MOVSDmr %198:gr64, 8, %343:gr64_nosp, 0, $noreg, %237:fr64, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  %239:gr32 = LEA64_32r %343:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !468; cg.c:314:50
  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %239:gr32, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50
  JMP_1 %bb.48, debug-location !469; cg.c:314:9

bb.50.for.end157:
; predecessors: %bb.48
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  INC32m %stack.6.it, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !472 :: (store 4 into %ir.it), (dereferenceable load 4 from %ir.it); cg.c:279:33
  JMP_1 %bb.34, debug-location !473; cg.c:279:5

bb.51.for.end160:
; predecessors: %bb.34
  successors: %bb.52(0x40000000), %bb.55(0x40000000); %bb.52(50.00%), %bb.55(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !476; cg.c:321:5
  $edi = MOV32ri 1, debug-location !476; cg.c:321:5
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !476; cg.c:321:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !476; cg.c:321:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !477; cg.c:327:9
  PCN_STACKMAP 22, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !477 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:327:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !477; cg.c:327:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !477; cg.c:327:9
  $edi = MOV32ri 1, debug-location !477; cg.c:327:9
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !477; cg.c:327:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !477; cg.c:327:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !478; cg.c:327:7
  PCN_STACKMAP 23, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !478 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:327:7
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !478; cg.c:327:7
  %83:fr64 = COPY killed $xmm0, debug-location !477; cg.c:327:9
  MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %83:fr64, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !479; cg.c:329:5
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_12__Benchmark, $noreg, debug-location !479; cg.c:329:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !479; cg.c:329:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !479; cg.c:329:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !479; cg.c:329:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !480; cg.c:331:13
  PCN_STACKMAP 24, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !480 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:331:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !480; cg.c:331:13
  %88:gr64 = MOV64ri 4457293557087583675
  MOV64mr %stack.17.epsilon, 1, $noreg, 0, $noreg, %88:gr64, debug-location !480 :: (store 8 into %ir.epsilon); cg.c:331:13
  CMP8mi %stack.14.Class, 1, $noreg, 0, $noreg, 85, implicit-def $eflags, debug-location !483 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:15
  JCC_1 %bb.55, 4, implicit killed $eflags, debug-location !484; cg.c:332:9
  JMP_1 %bb.52, debug-location !484; cg.c:332:9

bb.52.if.then169:
; predecessors: %bb.51
  successors: %bb.53(0x40000000), %bb.54(0x40000000); %bb.53(50.00%), %bb.54(50.00%)

  %101:vr128 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  %98:fr64 = MOVSDrm_alt %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, debug-location !487 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
  %101:vr128 = SUBSDrr %101:vr128(tied-def 0), %98:fr64, debug-location !488; cg.c:333:25
  %101:vr128 = PANDrm %101:vr128(tied-def 0), $rip, 1, $noreg, %const.1, $noreg, debug-location !489 :: (load 16 from constant-pool); cg.c:333:15
  %101:vr128 = DIVSDrr %101:vr128(tied-def 0), %98:fr64, debug-location !491; cg.c:333:46
  MOVSDmr %stack.18.err, 1, $noreg, 0, $noreg, %101:vr128, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13
  %104:fr64 = MOVSDrm_alt %stack.17.epsilon, 1, $noreg, 0, $noreg, debug-location !495 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
  UCOMISDrr %104:fr64, %101:vr128, implicit-def $eflags, debug-location !496; cg.c:334:17
  JCC_1 %bb.54, 2, implicit killed $eflags, debug-location !497; cg.c:334:13
  JMP_1 %bb.53, debug-location !497; cg.c:334:13

bb.53.if.then174:
; predecessors: %bb.52
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  %116:gr32 = MOV32ri 1
  MOV32mr %stack.15.verified, 1, $noreg, 0, $noreg, %116:gr32, debug-location !498 :: (store 4 into %ir.verified); cg.c:335:22
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !500; cg.c:336:13
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_13__VERIFICAT, $noreg, debug-location !500; cg.c:336:13
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !500; cg.c:336:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !500; cg.c:336:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !500; cg.c:336:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !501; cg.c:337:45
  PCN_STACKMAP 25, 0, 0, %stack.14.Class, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, implicit-def dead early-clobber $r11, debug-location !501 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta); cg.c:337:45
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !501; cg.c:337:45
  %121:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !501 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !502; cg.c:337:13
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_14__Zeta_is__, $noreg, debug-location !502; cg.c:337:13
  $xmm0 = COPY %121:fr64, debug-location !502; cg.c:337:13
  $al = MOV8ri 1, debug-location !502; cg.c:337:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !502; cg.c:337:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !502; cg.c:337:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !503; cg.c:338:45
  PCN_STACKMAP 26, 0, 0, %stack.14.Class, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, %121:fr64, implicit-def dead early-clobber $r11, debug-location !503 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4); cg.c:338:45
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !503; cg.c:338:45
  %125:fr64 = MOVSDrm_alt %stack.18.err, 1, $noreg, 0, $noreg, debug-location !503 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !504; cg.c:338:13
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_15__Error_is_, $noreg, debug-location !504; cg.c:338:13
  $xmm0 = COPY %125:fr64, debug-location !504; cg.c:338:13
  $al = MOV8ri 1, debug-location !504; cg.c:338:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !504; cg.c:338:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !504; cg.c:338:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !505; cg.c:339:9
  PCN_STACKMAP 27, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, %125:fr64, implicit-def dead early-clobber $r11, debug-location !505 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4); cg.c:339:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !505; cg.c:339:9
  JMP_1 %bb.56, debug-location !505; cg.c:339:9

bb.54.if.else178:
; predecessors: %bb.52
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  MOV32mi %stack.15.verified, 1, $noreg, 0, $noreg, 0, debug-location !506 :: (store 4 into %ir.verified); cg.c:341:22
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !508; cg.c:342:13
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_16__VERIFICAT, $noreg, debug-location !508; cg.c:342:13
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !508; cg.c:342:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !508; cg.c:342:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !508; cg.c:342:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !509; cg.c:343:54
  PCN_STACKMAP 28, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !509 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:343:54
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !509; cg.c:343:54
  %109:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !509 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !510; cg.c:343:13
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_17__Zeta_____, $noreg, debug-location !510; cg.c:343:13
  $xmm0 = COPY %109:fr64, debug-location !510; cg.c:343:13
  $al = MOV8ri 1, debug-location !510; cg.c:343:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !510; cg.c:343:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !510; cg.c:343:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !511; cg.c:344:54
  PCN_STACKMAP 29, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.16.zeta_verify_value, 0, %109:fr64, implicit-def dead early-clobber $r11, debug-location !511 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.16.zeta_verify_value); cg.c:344:54
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !511; cg.c:344:54
  %113:fr64 = MOVSDrm_alt %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, debug-location !511 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !512; cg.c:344:13
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_18__The_corre, $noreg, debug-location !512; cg.c:344:13
  $xmm0 = COPY %113:fr64, debug-location !512; cg.c:344:13
  $al = MOV8ri 1, debug-location !512; cg.c:344:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !512; cg.c:344:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !512; cg.c:344:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 30, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, %113:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.56

bb.55.if.else183:
; predecessors: %bb.51
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  MOV32mi %stack.15.verified, 1, $noreg, 0, $noreg, 0, debug-location !513 :: (store 4 into %ir.verified); cg.c:348:18
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !515; cg.c:349:9
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_19__Problem_s, $noreg, debug-location !515; cg.c:349:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !515; cg.c:349:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !515; cg.c:349:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !515; cg.c:349:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !516; cg.c:350:9
  PCN_STACKMAP 31, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, implicit-def dead early-clobber $r11, debug-location !516 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4); cg.c:350:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !516; cg.c:350:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !516; cg.c:350:9
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_20__NO_VERIFI, $noreg, debug-location !516; cg.c:350:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !516; cg.c:350:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !516; cg.c:350:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !516; cg.c:350:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  PCN_STACKMAP 32, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.56.if.end186:
; predecessors: %bb.55, %bb.54, %bb.53
  successors: %bb.57(0x50000000), %bb.58(0x30000000); %bb.57(62.50%), %bb.58(37.50%)

  %128:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  %129:fr64 = FsFLD0SD
  UCOMISDrr %128:fr64, %129:fr64, implicit-def $eflags, debug-location !520; cg.c:353:9
  JCC_1 %bb.57, 5, implicit $eflags, debug-location !520; cg.c:353:9
  JCC_1 %bb.57, 10, implicit killed $eflags, debug-location !520; cg.c:353:9
  JMP_1 %bb.58, debug-location !520; cg.c:353:9

bb.57.if.then189:
; predecessors: %bb.56
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  %132:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  %132:fr64 = DIVSDrm %132:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !523 :: (dereferenceable load 8 from %ir.t); cg.c:356:73
  %132:fr64 = DIVSDrm %132:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !524 :: (load 8 from constant-pool); cg.c:357:20
  MOVSDmr %stack.12.mflops, 1, $noreg, 0, $noreg, %132:fr64, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16
  JMP_1 %bb.59, debug-location !526; cg.c:358:5

bb.58.if.else192:
; predecessors: %bb.56
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  MOV64mi32 %stack.12.mflops, 1, $noreg, 0, $noreg, 0, debug-location !527 :: (store 8 into %ir.mflops); cg.c:360:16

bb.59.if.end193:
; predecessors: %bb.58, %bb.57
  successors: %bb.60(0x50000000), %bb.69(0x30000000); %bb.60(62.50%), %bb.69(37.50%)

  %133:gr32 = MOVSX32rm8 %stack.14.Class, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  %135:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !530 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
  %136:fr64 = MOVSDrm_alt %stack.12.mflops, 1, $noreg, 0, $noreg, debug-location !531 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
  %137:gr32 = MOV32rm %stack.15.verified, 1, $noreg, 0, $noreg, debug-location !532 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !533; cg.c:363:5
  %138:gr64 = LEA64r $rip, 1, $noreg, @cg__str_31_randdp_, $noreg, debug-location !533; cg.c:363:5
  MOV64mr $rsp, 1, $noreg, 80, $noreg, %138:gr64, debug-location !533 :: (store 8 into stack + 80); cg.c:363:5
  %140:gr64 = LEA64r $rip, 1, $noreg, @cg__str_30__O3__mcmod, $noreg, debug-location !533; cg.c:363:5
  MOV64mr $rsp, 1, $noreg, 72, $noreg, %140:gr64, debug-location !533 :: (store 8 into stack + 72); cg.c:363:5
  %141:gr64 = LEA64r $rip, 1, $noreg, @cg__str_29__g__Wall__, $noreg, debug-location !533; cg.c:363:5
  MOV64mr $rsp, 1, $noreg, 64, $noreg, %141:gr64, debug-location !533 :: (store 8 into stack + 64); cg.c:363:5
  %142:gr64 = LEA64r $rip, 1, $noreg, @cg__str_28__I___commo, $noreg, debug-location !533; cg.c:363:5
  MOV64mr $rsp, 1, $noreg, 56, $noreg, %142:gr64, debug-location !533 :: (store 8 into stack + 56); cg.c:363:5
  %143:gr64 = LEA64r $rip, 1, $noreg, @cg__str_27__lm_, $noreg, debug-location !533; cg.c:363:5
  MOV64mr $rsp, 1, $noreg, 48, $noreg, %143:gr64, debug-location !533 :: (store 8 into stack + 48); cg.c:363:5
  %144:gr64 = LEA64r $rip, 1, $noreg, @cg__str_26___CC__, $noreg, debug-location !533; cg.c:363:5
  MOV64mr $rsp, 1, $noreg, 40, $noreg, %144:gr64, debug-location !533 :: (store 8 into stack + 40); cg.c:363:5
  %145:gr64 = LEA64r $rip, 1, $noreg, @cg__str_25_gcc_, $noreg, debug-location !533; cg.c:363:5
  MOV64mr $rsp, 1, $noreg, 32, $noreg, %145:gr64, debug-location !533 :: (store 8 into stack + 32); cg.c:363:5
  %146:gr64 = LEA64r $rip, 1, $noreg, @cg__str_24_03_Nov_201, $noreg, debug-location !533; cg.c:363:5
  MOV64mr $rsp, 1, $noreg, 24, $noreg, %146:gr64, debug-location !533 :: (store 8 into stack + 24); cg.c:363:5
  %147:gr64 = LEA64r $rip, 1, $noreg, @cg__str_23_3_3_1_, $noreg, debug-location !533; cg.c:363:5
  MOV64mr $rsp, 1, $noreg, 16, $noreg, %147:gr64, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
  MOV32mr $rsp, 1, $noreg, 8, $noreg, %137:gr32, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
  %148:gr64 = LEA64r $rip, 1, $noreg, @cg__str_22___________, $noreg, debug-location !533; cg.c:363:5
  MOV64mr $rsp, 1, $noreg, 0, $noreg, %148:gr64, debug-location !533 :: (store 8 into stack); cg.c:363:5
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_21_CG_, $noreg, debug-location !533; cg.c:363:5
  $esi = COPY %133:gr32, debug-location !533; cg.c:363:5
  $edx = MOV32ri 75000, debug-location !533; cg.c:363:5
  $ecx = MOV32ri 0, debug-location !533; cg.c:363:5
  $r8d = MOV32r0 implicit-def dead $eflags, debug-location !533; cg.c:363:5
  $r9d = MOV32ri 75, debug-location !533; cg.c:363:5
  $xmm0 = COPY %135:fr64, debug-location !533; cg.c:363:5
  $xmm1 = COPY %136:fr64, debug-location !533; cg.c:363:5
  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !533; cg.c:363:5
  ADJCALLSTACKUP64 88, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !533; cg.c:363:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !534; cg.c:370:9
  PCN_STACKMAP 33, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %133.sub_8bit:gr32, %135:fr64, %136:fr64, %137:gr32, implicit-def dead early-clobber $r11, debug-location !534 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:370:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !534; cg.c:370:9
  CMP32mi $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags, debug-location !534 :: (dereferenceable load 4 from @timeron); cg.c:370:9
  JCC_1 %bb.69, 4, implicit killed $eflags, debug-location !536; cg.c:370:9
  JMP_1 %bb.60, debug-location !536; cg.c:370:9

bb.60.if.then195:
; predecessors: %bb.59
  successors: %bb.61(0x50000000), %bb.62(0x30000000); %bb.61(62.50%), %bb.62(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !537; cg.c:371:16
  $edi = MOV32ri 1, debug-location !537; cg.c:371:16
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !537; cg.c:371:16
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !537; cg.c:371:16
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !539; cg.c:371:14
  PCN_STACKMAP 34, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, implicit-def dead early-clobber $r11, debug-location !539 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:371:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !539; cg.c:371:14
  %153:fr64 = COPY killed $xmm0, debug-location !537; cg.c:371:16
  MOVSDmr %stack.13.tmax, 1, $noreg, 0, $noreg, %153:fr64, debug-location !539 :: (store 8 into %ir.tmax); cg.c:371:14
  %154:fr64 = FsFLD0SD
  UCOMISDrr %153:fr64, %154:fr64, implicit-def $eflags, debug-location !543; cg.c:372:13
  JCC_1 %bb.62, 5, implicit $eflags, debug-location !543; cg.c:372:13
  JCC_1 %bb.62, 10, implicit killed $eflags, debug-location !543; cg.c:372:13
  JMP_1 %bb.61, debug-location !543; cg.c:372:13

bb.61.if.then199:
; predecessors: %bb.60
  successors: %bb.62(0x80000000); %bb.62(100.00%)

  %155:gr64 = MOV64ri 4607182418800017408
  MOV64mr %stack.13.tmax, 1, $noreg, 0, $noreg, %155:gr64, debug-location !544 :: (store 8 into %ir.tmax); cg.c:373:18

bb.62.if.end200:
; predecessors: %bb.60, %bb.61
  successors: %bb.63(0x80000000); %bb.63(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !546; cg.c:374:9
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_32___SECTION_, $noreg, debug-location !546; cg.c:374:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !546; cg.c:374:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !546; cg.c:374:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !546; cg.c:374:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !547; cg.c:375:16
  PCN_STACKMAP 35, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, implicit-def dead early-clobber $r11, debug-location !547 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:375:16
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !547; cg.c:375:16
  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
  %185:gr64 = LEA64r %stack.19.t_names, 1, $noreg, 0, $noreg
  %326:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)

bb.63.for.cond202:
; predecessors: %bb.62, %bb.68
  successors: %bb.64(0x7c000000), %bb.69(0x04000000); %bb.64(96.88%), %bb.69(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !552 :: (dereferenceable load 4 from %ir.i); cg.c:375:23
  JCC_1 %bb.69, 15, implicit killed $eflags, debug-location !553; cg.c:375:9
  JMP_1 %bb.64, debug-location !553; cg.c:375:9

bb.64.for.body205:
; predecessors: %bb.63
  successors: %bb.65(0x30000000), %bb.66(0x50000000); %bb.65(37.50%), %bb.66(62.50%)

  %163:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !554 :: (dereferenceable load 4 from %ir.i); cg.c:376:28
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !556; cg.c:376:17
  $edi = COPY %163:gr32, debug-location !556; cg.c:376:17
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !556; cg.c:376:17
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !556; cg.c:376:17
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !557; cg.c:376:15
  PCN_STACKMAP 36, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %163:gr32, implicit-def dead early-clobber $r11, debug-location !557 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:376:15
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !557; cg.c:376:15
  %164:fr64 = COPY killed $xmm0, debug-location !556; cg.c:376:17
  MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %164:fr64, debug-location !557 :: (store 8 into %ir.t); cg.c:376:15
  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !560 :: (dereferenceable load 4 from %ir.i); cg.c:377:19
  JCC_1 %bb.66, 5, implicit killed $eflags, debug-location !561; cg.c:377:17
  JMP_1 %bb.65, debug-location !561; cg.c:377:17

bb.65.if.then209:
; predecessors: %bb.64
  successors: %bb.68(0x80000000); %bb.68(100.00%)

  %184:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
  %186:gr64 = MOV64rm %185:gr64, 8, %184:gr64_nosp, 0, $noreg, debug-location !564 :: (load 8 from %ir.arrayidx211); cg.c:378:41
  %187:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !565 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !566; cg.c:378:17
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_33____8s__9_3, $noreg, debug-location !566; cg.c:378:17
  $rsi = COPY %186:gr64, debug-location !566; cg.c:378:17
  $xmm0 = COPY %187:fr64, debug-location !566; cg.c:378:17
  $al = MOV8ri 1, debug-location !566; cg.c:378:17
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !566; cg.c:378:17
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !566; cg.c:378:17
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !567; cg.c:379:13
  PCN_STACKMAP 37, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %186:gr64, %187:fr64, implicit-def dead early-clobber $r11, debug-location !567 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:379:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !567; cg.c:379:13
  JMP_1 %bb.68, debug-location !567; cg.c:379:13

bb.66.if.else213:
; predecessors: %bb.64
  successors: %bb.67(0x40000000), %bb.68(0x40000000); %bb.67(50.00%), %bb.68(50.00%)

  %165:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
  %167:gr64 = MOV64rm %185:gr64, 8, %165:gr64_nosp, 0, $noreg, debug-location !570 :: (load 8 from %ir.arrayidx215); cg.c:381:52
  %168:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
  %170:fr64 = COPY %168:fr64, debug-location !573; cg.c:382:26
  %170:fr64 = MULSDrr %170:fr64(tied-def 0), %326:fr64, debug-location !573; cg.c:382:26
  %170:fr64 = DIVSDrm %170:fr64(tied-def 0), %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !575 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:34
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !576; cg.c:381:17
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_34____8s__9_3, $noreg, debug-location !576; cg.c:381:17
  $rsi = COPY %167:gr64, debug-location !576; cg.c:381:17
  $xmm0 = COPY %168:fr64, debug-location !576; cg.c:381:17
  $xmm1 = COPY %170:fr64, debug-location !576; cg.c:381:17
  $al = MOV8ri 2, debug-location !576; cg.c:381:17
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !576; cg.c:381:17
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !576; cg.c:381:17
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !577; cg.c:383:21
  PCN_STACKMAP 38, 0, %170:fr64, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %167:gr64, %168:fr64, implicit-def dead early-clobber $r11, debug-location !577 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:383:21
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !577; cg.c:383:21
  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !579 :: (dereferenceable load 4 from %ir.i); cg.c:383:23
  JCC_1 %bb.68, 5, implicit killed $eflags, debug-location !580; cg.c:383:21
  JMP_1 %bb.67, debug-location !580; cg.c:383:21

bb.67.if.then221:
; predecessors: %bb.66
  successors: %bb.68(0x80000000); %bb.68(100.00%)

  %176:fr64 = MOVSDrm_alt %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  %177:fr64 = COPY %176:fr64, debug-location !584; cg.c:384:30
  %177:fr64 = SUBSDrm %177:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !584 :: (dereferenceable load 8 from %ir.t); cg.c:384:30
  MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %177:fr64, debug-location !585 :: (store 8 into %ir.t); cg.c:384:23
  %179:fr64 = COPY %177:fr64, debug-location !588; cg.c:386:30
  %179:fr64 = MULSDrr %179:fr64(tied-def 0), %326:fr64, debug-location !588; cg.c:386:30
  %179:fr64 = DIVSDrr %179:fr64(tied-def 0), %176:fr64, debug-location !590; cg.c:386:38
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !591; cg.c:385:21
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_35__________8, $noreg, debug-location !591; cg.c:385:21
  $rsi = LEA64r $rip, 1, $noreg, @cg__str_36_rest_, $noreg, debug-location !591; cg.c:385:21
  $xmm0 = COPY %177:fr64, debug-location !591; cg.c:385:21
  $xmm1 = COPY %179:fr64, debug-location !591; cg.c:385:21
  $al = MOV8ri 2, debug-location !591; cg.c:385:21
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !591; cg.c:385:21
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !591; cg.c:385:21
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !592; cg.c:387:17
  PCN_STACKMAP 39, 0, %179:fr64, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %177:fr64, implicit-def dead early-clobber $r11, debug-location !592 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:387:17
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !592; cg.c:387:17

bb.68.if.end227:
; predecessors: %bb.66, %bb.67, %bb.65
  successors: %bb.63(0x80000000); %bb.63(100.00%)

  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !593 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:375:34
  JMP_1 %bb.63, debug-location !594; cg.c:375:9

bb.69.if.end231:
; predecessors: %bb.59, %bb.63

  $eax = MOV32r0 implicit-def dead $eflags, debug-location !597; cg.c:394:5
  RET 0, killed $eax, debug-location !597; cg.c:394:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %10:gr64 = COPY $rsi
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %10:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%10
  Single Issue       : false;
SU(1):   %9:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%9
  Single Issue       : false;
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%9
  Single Issue       : false;
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %10:gr64 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%10
  Single Issue       : false;
SU(5):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %10:gr64 :: (store 8 into %ir.argv.addr)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 0 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.argc.addr)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %9:gr32 = COPY $edi
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %10:gr64 = COPY $rsi
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %10:gr64 = COPY $rsi
SU(1):   %9:gr32 = COPY $edi
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.argc.addr)
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %10:gr64 :: (store 8 into %ir.argv.addr)
SU(5):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

********** MI Scheduling **********
main:%bb.3 for.end
  From: %15:gr64 = COPY killed $rax, debug-location !153; cg.c:122:15
    To: JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !157; cg.c:122:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %15:gr64 = COPY killed $rax, debug-location !153; cg.c:122:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%15
    SU(1): Data Latency=0 Reg=%15
  Single Issue       : false;
SU(1):   MOV64mr %stack.20.fp, 1, $noreg, 0, $noreg, %15:gr64, debug-location !155 :: (store 8 into %ir.fp); cg.c:122:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%15
  Single Issue       : false;
SU(2):   TEST64rr %15:gr64, %15:gr64, implicit-def $eflags, debug-location !156; cg.c:122:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%15
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !157; cg.c:122:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %15:gr64, %15:gr64, implicit-def $eflags, debug-location !156; cg.c:122:41
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.20.fp, 1, $noreg, 0, $noreg, %15:gr64, debug-location !155 :: (store 8 into %ir.fp); cg.c:122:13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %15:gr64 = COPY killed $rax, debug-location !153; cg.c:122:15
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %15:gr64 = COPY killed $rax, debug-location !153; cg.c:122:15
SU(1):   MOV64mr %stack.20.fp, 1, $noreg, 0, $noreg, %15:gr64, debug-location !155 :: (store 8 into %ir.fp); cg.c:122:13
SU(2):   TEST64rr %15:gr64, %15:gr64, implicit-def $eflags, debug-location !156; cg.c:122:41

********** MI Scheduling **********
main:%bb.3 for.end
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_timer_flag, $noreg, debug-location !153; cg.c:122:15
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !153; cg.c:122:15
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_timer_flag, $noreg, debug-location !153; cg.c:122:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @cg__str_1_r_, $noreg, debug-location !153; cg.c:122:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !153; cg.c:122:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @cg__str_1_r_, $noreg, debug-location !153; cg.c:122:15
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_timer_flag, $noreg, debug-location !153; cg.c:122:15
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_timer_flag, $noreg, debug-location !153; cg.c:122:15
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @cg__str_1_r_, $noreg, debug-location !153; cg.c:122:15

********** MI Scheduling **********
main:%bb.4 if.then
  From: %16:gr32 = MOV32ri 1
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !167; cg.c:127:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=2
Live In: 
Live Out: %20 
Live Thru: 
  LiveReg: %20
Top Pressure:

Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   %16:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%16
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr $rip, 1, $noreg, @timeron, $noreg, %16:gr32, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%16
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %17:gr64 = LEA64r $rip, 1, $noreg, @cg__str_2_init_, $noreg, debug-location !161; cg.c:124:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%17
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr %stack.19.t_names, 1, $noreg, 0, $noreg, %17:gr64, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%17
  Successors:
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %18:gr64 = LEA64r $rip, 1, $noreg, @cg__str_3_benchmk_, $noreg, debug-location !163; cg.c:125:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%18
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr %stack.19.t_names, 1, $noreg, 8, $noreg, %18:gr64, debug-location !163 :: (store 8 into %ir.arrayidx2); cg.c:125:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%18
    SU(3): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %19:gr64 = LEA64r $rip, 1, $noreg, @cg__str_4_conjgd_, $noreg, debug-location !165; cg.c:126:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%19
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr %stack.19.t_names, 1, $noreg, 16, $noreg, %19:gr64, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%19
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %20:gr64 = MOV64rm %stack.20.fp, 1, $noreg, 0, $noreg, debug-location !166 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !167; cg.c:127:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 1 8 
  Cand SU(7) ORDER                              
  Cand SU(8) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(8) %20:gr64 = MOV64rm %stack.20.fp, 1, $noreg, 0, $noreg, debug-location !166 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
Bottom Pressure:

  Ready @3c
  BotQ.A BotLatency SU(8) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 1 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr %stack.19.t_names, 1, $noreg, 16, $noreg, %19:gr64, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
Bottom Pressure:
GR16=2
  LiveReg: %19
  UpdateRegP: SU(7) MOV64mr %stack.19.t_names, 1, $noreg, 16, $noreg, %19:gr64, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 5 
  Cand SU(1) ORDER                              
  Cand SU(6) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(6) %19:gr64 = LEA64r $rip, 1, $noreg, @cg__str_4_conjgd_, $noreg, debug-location !165; cg.c:126:30
Bottom Pressure:

  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr %stack.19.t_names, 1, $noreg, 8, $noreg, %18:gr64, debug-location !163 :: (store 8 into %ir.arrayidx2); cg.c:125:26
Bottom Pressure:
GR16=2
  LiveReg: %18
  UpdateRegP: SU(5) MOV64mr %stack.19.t_names, 1, $noreg, 8, $noreg, %18:gr64, debug-location !163 :: (store 8 into %ir.arrayidx2); cg.c:125:26
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(4) %18:gr64 = LEA64r $rip, 1, $noreg, @cg__str_3_benchmk_, $noreg, debug-location !163; cg.c:125:26
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr %stack.19.t_names, 1, $noreg, 0, $noreg, %17:gr64, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
Bottom Pressure:
GR16=2
  LiveReg: %17
  UpdateRegP: SU(3) MOV64mr %stack.19.t_names, 1, $noreg, 0, $noreg, %17:gr64, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
              to 
  Ready @1c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(2) %17:gr64 = LEA64r $rip, 1, $noreg, @cg__str_2_init_, $noreg, debug-location !161; cg.c:124:25
Bottom Pressure:

  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr $rip, 1, $noreg, @timeron, $noreg, %16:gr32, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
Bottom Pressure:
GR16=2
  LiveReg: %16
  UpdateRegP: SU(1) MOV32mr $rip, 1, $noreg, @timeron, $noreg, %16:gr32, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %16:gr32 = MOV32ri 1
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %16:gr32 = MOV32ri 1
SU(1):   MOV32mr $rip, 1, $noreg, @timeron, $noreg, %16:gr32, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
SU(2):   %17:gr64 = LEA64r $rip, 1, $noreg, @cg__str_2_init_, $noreg, debug-location !161; cg.c:124:25
SU(3):   MOV64mr %stack.19.t_names, 1, $noreg, 0, $noreg, %17:gr64, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
SU(4):   %18:gr64 = LEA64r $rip, 1, $noreg, @cg__str_3_benchmk_, $noreg, debug-location !163; cg.c:125:26
SU(5):   MOV64mr %stack.19.t_names, 1, $noreg, 8, $noreg, %18:gr64, debug-location !163 :: (store 8 into %ir.arrayidx2); cg.c:125:26
SU(6):   %19:gr64 = LEA64r $rip, 1, $noreg, @cg__str_4_conjgd_, $noreg, debug-location !165; cg.c:126:30
SU(7):   MOV64mr %stack.19.t_names, 1, $noreg, 16, $noreg, %19:gr64, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
SU(8):   %20:gr64 = MOV64rm %stack.20.fp, 1, $noreg, 0, $noreg, debug-location !166 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16

********** MI Scheduling **********
main:%bb.6 if.end
  From: %47:gr64 = LEA64r $rip, 1, $noreg, @iv, $noreg, debug-location !201; cg.c:190:5
    To: CALL64pcrel32 @makea, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp, debug-location !201; cg.c:190:5
 RegionInstrs: 19
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
GR16=24
Live In: %43 %42 %41 %44 %45 %46 
Live Out: %43 %42 %41 %54 %53 %44 %45 %46 
Live Thru: GR16=12
  LiveReg: %43
  UpdateRegP: SU(18) $r9d = COPY %43:gr32, debug-location !201; cg.c:190:5
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  LiveReg: %42
  UpdateRegP: SU(14) $esi = COPY %42:gr32, debug-location !201; cg.c:190:5
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  LiveReg: %41
  UpdateRegP: SU(13) $edi = COPY %41:gr32, debug-location !201; cg.c:190:5
              to GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  LiveReg: %54
  LiveReg: %53
  LiveReg: %44
  UpdateRegP: SU(10) MOV32mr $rsp, 1, $noreg, 0, $noreg, %44:gr32, debug-location !201 :: (store 4 into stack); cg.c:190:5
              to 
  LiveReg: %45
  UpdateRegP: SU(9) MOV32mr $rsp, 1, $noreg, 8, $noreg, %45:gr32, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
              to 
  LiveReg: %46
  UpdateRegP: SU(8) MOV32mr $rsp, 1, $noreg, 16, $noreg, %46:gr32, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
              to 
Top Pressure:
GR16=12
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
GR16=24
Excess PSets: 
SU(0):   %47:gr64 = LEA64r $rip, 1, $noreg, @iv, $noreg, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%47
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %47:gr64, debug-location !201 :: (store 8 into stack + 48); cg.c:190:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%47
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %49:gr64 = LEA64r $rip, 1, $noreg, @aelt, $noreg, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%49
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %49:gr64, debug-location !201 :: (store 8 into stack + 40); cg.c:190:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%49
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %50:gr64 = LEA64r $rip, 1, $noreg, @acol, $noreg, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%50
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %50:gr64, debug-location !201 :: (store 8 into stack + 32); cg.c:190:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%50
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %51:gr64 = LEA64r $rip, 1, $noreg, @arow, $noreg, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%51
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %51:gr64, debug-location !201 :: (store 8 into stack + 24); cg.c:190:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%51
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV32mr $rsp, 1, $noreg, 16, $noreg, %46:gr32, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %45:gr32, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV32mr $rsp, 1, $noreg, 0, $noreg, %44:gr32, debug-location !201 :: (store 4 into stack); cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %53:gr64 = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(12):   %54:gr64 = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   $edi = COPY %41:gr32, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(14):   $esi = COPY %42:gr32, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  Single Issue       : false;
SU(15):   $rdx = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Single Issue       : false;
SU(16):   $rcx = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  Single Issue       : false;
SU(17):   $r8 = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(18):   $r9d = COPY %43:gr32, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @makea, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp, debug-location !201; cg.c:190:5
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(18): Ord  Latency=0 Artificial
    SU(17): Ord  Latency=1 Artificial
    SU(16): Ord  Latency=1 Artificial
    SU(15): Ord  Latency=1 Artificial
    SU(14): Ord  Latency=0 Artificial
    SU(13): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 5 3 1 18 17 16 15 14 13 
  Cand SU(12) ORDER                              
  Cand SU(18) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(18) $r9d = COPY %43:gr32, debug-location !201; cg.c:190:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
GR16=23
  GR16: 24 <= 26(+ 12 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 5 3 1 13 17 16 15 14 
  Cand SU(12) ORDER                              
  Cand SU(13) PHYS-REG                           
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) $esi = COPY %42:gr32, debug-location !201; cg.c:190:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=2
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=4
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=5
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
GR16=22
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 5 3 1 13 17 16 15 
  Cand SU(12) ORDER                              
  Cand SU(13) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(13) $edi = COPY %41:gr32, debug-location !201; cg.c:190:5
Bottom Pressure:
GR32_BSI=2
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=4
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=4
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=5
GR8+GR32_DIBP=5
GR8+GR32_BSI=5
GR64_TC+GR64_TCW64=5
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=5
GR8+GR64_NOREX=5
GR32temp=5
GR32temp+GR32_DIBP=5
GR64_TC=5
GR8+GR64_TCW64=5
GR8+GR64_TC=5
GR32temp+GR64_TC=5
GR8+GR32temp=5
GR16=21
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 5 3 1 15 17 16 
  Cand SU(12) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) $r8 = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !201; cg.c:190:5
Bottom Pressure:
GR32_BSI=2
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=4
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=4
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
GR16=20
  GR16: 24 <= 26(+ 12 livethru)
  Ready @1c
  BotQ.A BotLatency SU(17) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 5 3 1 15 16 
  Cand SU(12) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) $rcx = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !201; cg.c:190:5
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=18
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 5 3 1 15 
  Cand SU(12) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) $rdx = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !201; cg.c:190:5
Bottom Pressure:
GR16=16
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 5 3 1 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %54:gr64 = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !201; cg.c:190:5
Bottom Pressure:
GR16=14
  GR16: 24 <= 26(+ 12 livethru)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 11 10 9 8 7 5 3 
  Cand SU(1) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %53:gr64 = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !201; cg.c:190:5
Bottom Pressure:
GR16=12
  GR16: 24 <= 26(+ 12 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 10 9 8 7 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr $rsp, 1, $noreg, 0, $noreg, %44:gr32, debug-location !201 :: (store 4 into stack); cg.c:190:5
Bottom Pressure:
GR16=12
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 9 8 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV32mr $rsp, 1, $noreg, 8, $noreg, %45:gr32, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
Bottom Pressure:
GR16=12
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 8 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV32mr $rsp, 1, $noreg, 16, $noreg, %46:gr32, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
Bottom Pressure:
GR16=12
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr $rsp, 1, $noreg, 24, $noreg, %51:gr64, debug-location !201 :: (store 8 into stack + 24); cg.c:190:5
Bottom Pressure:
GR16=14
  GR16: 24 <= 26(+ 12 livethru)
  LiveReg: %51
  UpdateRegP: SU(7) MOV64mr $rsp, 1, $noreg, 24, $noreg, %51:gr64, debug-location !201 :: (store 8 into stack + 24); cg.c:190:5
              to 
  Ready @2c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 6 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %51:gr64 = LEA64r $rip, 1, $noreg, @arow, $noreg, debug-location !201; cg.c:190:5
Bottom Pressure:
GR16=12
  GR16: 24 <= 26(+ 12 livethru)
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr $rsp, 1, $noreg, 32, $noreg, %50:gr64, debug-location !201 :: (store 8 into stack + 32); cg.c:190:5
Bottom Pressure:
GR16=14
  GR16: 24 <= 26(+ 12 livethru)
  LiveReg: %50
  UpdateRegP: SU(5) MOV64mr $rsp, 1, $noreg, 32, $noreg, %50:gr64, debug-location !201 :: (store 8 into stack + 32); cg.c:190:5
              to 
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %50:gr64 = LEA64r $rip, 1, $noreg, @acol, $noreg, debug-location !201; cg.c:190:5
Bottom Pressure:
GR16=12
  GR16: 24 <= 26(+ 12 livethru)
  Ready @3c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr $rsp, 1, $noreg, 40, $noreg, %49:gr64, debug-location !201 :: (store 8 into stack + 40); cg.c:190:5
Bottom Pressure:
GR16=14
  GR16: 24 <= 26(+ 12 livethru)
  LiveReg: %49
  UpdateRegP: SU(3) MOV64mr $rsp, 1, $noreg, 40, $noreg, %49:gr64, debug-location !201 :: (store 8 into stack + 40); cg.c:190:5
              to 
  Ready @3c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %49:gr64 = LEA64r $rip, 1, $noreg, @aelt, $noreg, debug-location !201; cg.c:190:5
Bottom Pressure:
GR16=12
  GR16: 24 <= 26(+ 12 livethru)
  Ready @4c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $rsp, 1, $noreg, 48, $noreg, %47:gr64, debug-location !201 :: (store 8 into stack + 48); cg.c:190:5
Bottom Pressure:
GR16=14
  GR16: 24 <= 26(+ 12 livethru)
  LiveReg: %47
  UpdateRegP: SU(1) MOV64mr $rsp, 1, $noreg, 48, $noreg, %47:gr64, debug-location !201 :: (store 8 into stack + 48); cg.c:190:5
              to 
  Ready @3c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %47:gr64 = LEA64r $rip, 1, $noreg, @iv, $noreg, debug-location !201; cg.c:190:5
Bottom Pressure:
GR16=12
  GR16: 24 <= 26(+ 12 livethru)
  Ready @4c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %47:gr64 = LEA64r $rip, 1, $noreg, @iv, $noreg, debug-location !201; cg.c:190:5
SU(1):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %47:gr64, debug-location !201 :: (store 8 into stack + 48); cg.c:190:5
SU(2):   %49:gr64 = LEA64r $rip, 1, $noreg, @aelt, $noreg, debug-location !201; cg.c:190:5
SU(3):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %49:gr64, debug-location !201 :: (store 8 into stack + 40); cg.c:190:5
SU(4):   %50:gr64 = LEA64r $rip, 1, $noreg, @acol, $noreg, debug-location !201; cg.c:190:5
SU(5):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %50:gr64, debug-location !201 :: (store 8 into stack + 32); cg.c:190:5
SU(6):   %51:gr64 = LEA64r $rip, 1, $noreg, @arow, $noreg, debug-location !201; cg.c:190:5
SU(7):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %51:gr64, debug-location !201 :: (store 8 into stack + 24); cg.c:190:5
SU(8):   MOV32mr $rsp, 1, $noreg, 16, $noreg, %46:gr32, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
SU(9):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %45:gr32, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
SU(10):   MOV32mr $rsp, 1, $noreg, 0, $noreg, %44:gr32, debug-location !201 :: (store 4 into stack); cg.c:190:5
SU(11):   %53:gr64 = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !201; cg.c:190:5
SU(12):   %54:gr64 = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !201; cg.c:190:5
SU(15):   $rdx = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !201; cg.c:190:5
SU(16):   $rcx = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !201; cg.c:190:5
SU(17):   $r8 = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !201; cg.c:190:5
SU(13):   $edi = COPY %41:gr32, debug-location !201; cg.c:190:5
SU(14):   $esi = COPY %42:gr32, debug-location !201; cg.c:190:5
SU(18):   $r9d = COPY %43:gr32, debug-location !201; cg.c:190:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: %40:fr64 = COPY killed $xmm0, debug-location !193; cg.c:185:12
    To: ADJCALLSTACKDOWN64 56, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !201; cg.c:190:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=12
Live In: XMM0 
Live Out: %46 %45 %44 %43 %42 %41 
Live Thru: 
  LiveReg: %46
  LiveReg: %45
  LiveReg: %44
  LiveReg: %43
  LiveReg: %42
  LiveReg: %41
Top Pressure:
FR32=1
FR32X=1
Bottom Pressure:
GR16=12
Excess PSets: 
SU(0):   %40:fr64 = COPY killed $xmm0, debug-location !193; cg.c:185:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%40
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %40:fr64, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%40
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(2):   %41:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %42:gr32 = MOV32rm $rip, 1, $noreg, @nzz, $noreg, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %43:gr32 = MOV32rm $rip, 1, $noreg, @firstrow, $noreg, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %44:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %45:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %46:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 56, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !201; cg.c:190:5
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 6 5 4 3 2 
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %46:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
Bottom Pressure:
GR16=10
  Ready @3c
  BotQ.A BotLatency SU(7) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 6 5 4 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %45:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
Bottom Pressure:
GR16=8
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 5 4 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %44:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
Bottom Pressure:
GR16=6
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 4 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %43:gr32 = MOV32rm $rip, 1, $noreg, @firstrow, $noreg, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
Bottom Pressure:
GR16=4
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %42:gr32 = MOV32rm $rip, 1, $noreg, @nzz, $noreg, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
Bottom Pressure:
GR16=2
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %41:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
Bottom Pressure:

  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %40:fr64, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %40
  UpdateRegP: SU(1) MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %40:fr64, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %40:fr64 = COPY killed $xmm0, debug-location !193; cg.c:185:12
Bottom Pressure:
FR32=1
FR32X=1
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %40:fr64 = COPY killed $xmm0, debug-location !193; cg.c:185:12
SU(1):   MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %40:fr64, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
SU(2):   %41:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
SU(3):   %42:gr32 = MOV32rm $rip, 1, $noreg, @nzz, $noreg, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
SU(4):   %43:gr32 = MOV32rm $rip, 1, $noreg, @firstrow, $noreg, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
SU(5):   %44:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
SU(6):   %45:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
SU(7):   %46:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69

********** MI Scheduling **********
main:%bb.6 if.end
  From: %39:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !193; cg.c:185:12
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %39:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%39
  Single Issue       : false;
SU(1):   $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !193; cg.c:185:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %39:fr64, debug-location !193; cg.c:185:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%39
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !193; cg.c:185:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %39:fr64, debug-location !193; cg.c:185:12
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !193; cg.c:185:12
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %39:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %39:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(1):   $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !193; cg.c:185:12
SU(2):   $xmm0 = COPY %39:fr64, debug-location !193; cg.c:185:12

********** MI Scheduling **********
main:%bb.6 if.end
  From: MOV32mr $rip, 1, $noreg, @naa, $noreg, %338.sub_32bit:gr64_nosp, debug-location !188 :: (store 4 into @naa); cg.c:177:9
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !193; cg.c:185:12
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mr $rip, 1, $noreg, @naa, $noreg, %338.sub_32bit:gr64_nosp, debug-location !188 :: (store 4 into @naa); cg.c:177:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %35:gr32 = MOV32ri 14700000
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%35
  Single Issue       : false;
SU(2):   MOV32mr $rip, 1, $noreg, @nzz, $noreg, %35:gr32, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%35
  Single Issue       : false;
SU(3):   %36:gr64 = MOV64ri 4734050326586327040
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%36
  Single Issue       : false;
SU(4):   MOV64mr $rip, 1, $noreg, @tran, $noreg, %36:gr64, debug-location !190 :: (store 8 into @tran); cg.c:183:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%36
  Single Issue       : false;
SU(5):   %38:gr64 = MOV64ri 4742906807993761792
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%38
  Single Issue       : false;
SU(6):   MOV64mr $rip, 1, $noreg, @amult, $noreg, %38:gr64, debug-location !191 :: (store 8 into @amult); cg.c:184:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%38
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !193; cg.c:185:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 2 0 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV64mr $rip, 1, $noreg, @amult, $noreg, %38:gr64, debug-location !191 :: (store 8 into @amult); cg.c:184:11
  Ready @0c
  BotQ.A TopLatency SU(6) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 2 5 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %38:gr64 = MOV64ri 4742906807993761792
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 2 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr $rip, 1, $noreg, @tran, $noreg, %36:gr64, debug-location !190 :: (store 8 into @tran); cg.c:183:10
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %36:gr64 = MOV64ri 4734050326586327040
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mr $rip, 1, $noreg, @nzz, $noreg, %35:gr32, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
  Ready @1c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %35:gr32 = MOV32ri 14700000
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mr $rip, 1, $noreg, @naa, $noreg, %338.sub_32bit:gr64_nosp, debug-location !188 :: (store 4 into @naa); cg.c:177:9
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   MOV32mr $rip, 1, $noreg, @naa, $noreg, %338.sub_32bit:gr64_nosp, debug-location !188 :: (store 4 into @naa); cg.c:177:9
SU(1):   %35:gr32 = MOV32ri 14700000
SU(2):   MOV32mr $rip, 1, $noreg, @nzz, $noreg, %35:gr32, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
SU(3):   %36:gr64 = MOV64ri 4734050326586327040
SU(4):   MOV64mr $rip, 1, $noreg, @tran, $noreg, %36:gr64, debug-location !190 :: (store 8 into @tran); cg.c:183:10
SU(5):   %38:gr64 = MOV64ri 4742906807993761792
SU(6):   MOV64mr $rip, 1, $noreg, @amult, $noreg, %38:gr64, debug-location !191 :: (store 8 into @amult); cg.c:184:11

********** MI Scheduling **********
main:%bb.6 if.end
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_8___, $noreg, debug-location !187; cg.c:175:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !187; cg.c:175:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_8___, $noreg, debug-location !187; cg.c:175:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !187; cg.c:175:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !187; cg.c:175:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !187; cg.c:175:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_8___, $noreg, debug-location !187; cg.c:175:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_8___, $noreg, debug-location !187; cg.c:175:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !187; cg.c:175:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_7__Iteration, $noreg, debug-location !186; cg.c:174:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !186; cg.c:174:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_7__Iteration, $noreg, debug-location !186; cg.c:174:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 75, debug-location !186; cg.c:174:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !186; cg.c:174:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !186; cg.c:174:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !186; cg.c:174:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = MOV32ri 75, debug-location !186; cg.c:174:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_7__Iteration, $noreg, debug-location !186; cg.c:174:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_7__Iteration, $noreg, debug-location !186; cg.c:174:5
SU(1):   $esi = MOV32ri 75, debug-location !186; cg.c:174:5
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !186; cg.c:174:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_6__Size___11, $noreg, debug-location !185; cg.c:173:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !185; cg.c:173:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_6__Size___11, $noreg, debug-location !185; cg.c:173:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 75000, debug-location !185; cg.c:173:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !185; cg.c:173:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !185; cg.c:173:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !185; cg.c:173:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = MOV32ri 75000, debug-location !185; cg.c:173:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_6__Size___11, $noreg, debug-location !185; cg.c:173:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_6__Size___11, $noreg, debug-location !185; cg.c:173:5
SU(1):   $esi = MOV32ri 75000, debug-location !185; cg.c:173:5
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !185; cg.c:173:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_5____NAS_Par, $noreg, debug-location !184; cg.c:172:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !184; cg.c:172:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_5____NAS_Par, $noreg, debug-location !184; cg.c:172:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !184; cg.c:172:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !184; cg.c:172:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !184; cg.c:172:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_5____NAS_Par, $noreg, debug-location !184; cg.c:172:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_5____NAS_Par, $noreg, debug-location !184; cg.c:172:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !184; cg.c:172:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: MOV32mi $rip, 1, $noreg, @firstrow, $noreg, 0, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !184; cg.c:172:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=4
Live In: %338 
Live Out: %338 
Live Thru: GR16=2
  LiveReg: %338
  UpdateRegP: SU(1) %23:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !174; cg.c:136:13
              to GR16 -2
Top Pressure:
GR16=2
Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   MOV32mi $rip, 1, $noreg, @firstrow, $noreg, 0, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %23:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !174; cg.c:136:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%23
    SU(2): Data Latency=1 Reg=%23
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   MOV32mr $rip, 1, $noreg, @lastrow, $noreg, %23:gr32, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%23
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(3):   MOV32mi $rip, 1, $noreg, @firstcol, $noreg, 0, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   MOV32mr $rip, 1, $noreg, @lastcol, $noreg, %23:gr32, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%23
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   MOV8mi %stack.14.Class, 1, $noreg, 0, $noreg, 66, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %24:gr64 = MOV64ri 4627086287187887514
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%24
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, %24:gr64, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%24
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !184; cg.c:172:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 4 3 2 0 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, %24:gr64, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
Bottom Pressure:
GR16=4
  LiveReg: %24
  UpdateRegP: SU(7) MOV64mr %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, %24:gr64, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 3 2 6 
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %24:gr64 = MOV64ri 4627086287187887514
Bottom Pressure:
GR16=2
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV8mi %stack.14.Class, 1, $noreg, 0, $noreg, 66, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
Bottom Pressure:
GR16=2
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 4 3 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mr $rip, 1, $noreg, @lastcol, $noreg, %23:gr32, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
Bottom Pressure:
GR16=4
  LiveReg: %23
  UpdateRegP: SU(2) MOV32mr $rip, 1, $noreg, @lastrow, $noreg, %23:gr32, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
              to 
  UpdateRegP: SU(4) MOV32mr $rip, 1, $noreg, @lastcol, $noreg, %23:gr32, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mi $rip, 1, $noreg, @firstcol, $noreg, 0, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
Bottom Pressure:
GR16=4
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mr $rip, 1, $noreg, @lastrow, $noreg, %23:gr32, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
Bottom Pressure:
GR16=4
  Ready @1c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %23:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !174; cg.c:136:13
Bottom Pressure:
GR16=2
  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi $rip, 1, $noreg, @firstrow, $noreg, 0, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
Bottom Pressure:
GR16=2
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   MOV32mi $rip, 1, $noreg, @firstrow, $noreg, 0, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
SU(1):   %23:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !174; cg.c:136:13
SU(2):   MOV32mr $rip, 1, $noreg, @lastrow, $noreg, %23:gr32, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
SU(3):   MOV32mi $rip, 1, $noreg, @firstcol, $noreg, 0, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
SU(4):   MOV32mr $rip, 1, $noreg, @lastcol, $noreg, %23:gr32, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
SU(5):   MOV8mi %stack.14.Class, 1, $noreg, 0, $noreg, 66, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
SU(6):   %24:gr64 = MOV64ri 4627086287187887514
SU(7):   MOV64mr %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, %24:gr64, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27

********** MI Scheduling **********
main:%bb.7 for.cond10
  From: %58:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
    To: JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !212; cg.c:202:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %58:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%58
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %58:gr32 = nsw SUB32rm %58:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !209 :: (dereferenceable load 4 from @firstrow); cg.c:202:29
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%58
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%58
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %58:gr32 = nsw INC32r %58:gr32(tied-def 0), implicit-def dead $eflags, debug-location !210; cg.c:202:40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%58
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%58
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %58:gr32, implicit-def $eflags, debug-location !211 :: (dereferenceable load 4 from %ir.j); cg.c:202:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%58
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !212; cg.c:202:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %58:gr32, implicit-def $eflags, debug-location !211 :: (dereferenceable load 4 from %ir.j); cg.c:202:19
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %58:gr32 = nsw INC32r %58:gr32(tied-def 0), implicit-def dead $eflags, debug-location !210; cg.c:202:40
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %58:gr32 = nsw SUB32rm %58:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !209 :: (dereferenceable load 4 from @firstrow); cg.c:202:29
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %58:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %58:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
SU(1):   %58:gr32 = nsw SUB32rm %58:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !209 :: (dereferenceable load 4 from @firstrow); cg.c:202:29
SU(2):   %58:gr32 = nsw INC32r %58:gr32(tied-def 0), implicit-def dead $eflags, debug-location !210; cg.c:202:40
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %58:gr32, implicit-def $eflags, debug-location !211 :: (dereferenceable load 4 from %ir.j); cg.c:202:19

********** MI Scheduling **********
main:%bb.8 for.body12
  From: %312:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %312:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%312
  Single Issue       : false;
SU(1):   %314:gr32 = MOV32rm %54:gr64, 4, %312:gr64_nosp, 0, $noreg, debug-location !216 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%312
  Successors:
    SU(2): Data Latency=4 Reg=%314
  Single Issue       : false;
SU(2):   MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %314:gr32, debug-location !217 :: (store 4 into %ir.k); cg.c:203:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%314
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %314:gr32, debug-location !217 :: (store 4 into %ir.k); cg.c:203:16
  Ready @0c
  BotQ.A TopLatency SU(2) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %314:gr32 = MOV32rm %54:gr64, 4, %312:gr64_nosp, 0, $noreg, debug-location !216 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %312:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %312:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
SU(1):   %314:gr32 = MOV32rm %54:gr64, 4, %312:gr64_nosp, 0, $noreg, debug-location !216 :: (load 4 from %ir.arrayidx13); cg.c:203:18
SU(2):   MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %314:gr32, debug-location !217 :: (store 4 into %ir.k); cg.c:203:16

********** MI Scheduling **********
main:%bb.9 for.cond14
  From: %315:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
    To: JCC_1 %bb.11, 13, implicit killed $eflags, debug-location !225; cg.c:203:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %315:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%315
  Single Issue       : false;
SU(1):   %316:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !221 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%316
  Single Issue       : false;
SU(2):   CMP32rm %315:gr32, %54:gr64, 4, %316:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !224 :: (load 4 from %ir.arrayidx17); cg.c:203:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%316
    SU(0): Data Latency=4 Reg=%315
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.11, 13, implicit killed $eflags, debug-location !225; cg.c:203:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32rm %315:gr32, %54:gr64, 4, %316:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !224 :: (load 4 from %ir.arrayidx17); cg.c:203:31
  Ready @4c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %316:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !221 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %315:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %315:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
SU(1):   %316:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !221 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
SU(2):   CMP32rm %315:gr32, %54:gr64, 4, %316:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !224 :: (load 4 from %ir.arrayidx17); cg.c:203:31

********** MI Scheduling **********
main:%bb.10 for.body19
  From: %331:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
    To: JMP_1 %bb.9, debug-location !235; cg.c:203:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %331:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%331
    SU(2): Data Latency=4 Reg=%331
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %322:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%322
  Single Issue       : false;
SU(2):   SUB32mr %53:gr64, 4, %331:gr64_nosp, 0, $noreg, %322:gr32, implicit-def dead $eflags, debug-location !233 :: (store 4 into %ir.arrayidx24), (load 4 from %ir.arrayidx21); cg.c:204:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%322
    SU(0): Data Latency=4 Reg=%331
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %323:gr32 = LEA64_32r %331:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !234; cg.c:203:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%331
  Successors:
    SU(4): Data Latency=1 Reg=%323
  Single Issue       : false;
SU(4):   MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %323:gr32, debug-location !234 :: (store 4 into %ir.k); cg.c:203:49
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%323
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.9, debug-location !235; cg.c:203:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %323:gr32, debug-location !234 :: (store 4 into %ir.k); cg.c:203:49
  Ready @0c
  BotQ.A TopLatency SU(4) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %323:gr32 = LEA64_32r %331:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !234; cg.c:203:49
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) SUB32mr %53:gr64, 4, %331:gr64_nosp, 0, $noreg, %322:gr32, implicit-def dead $eflags, debug-location !233 :: (store 4 into %ir.arrayidx24), (load 4 from %ir.arrayidx21); cg.c:204:23
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %322:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %331:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %331:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
SU(1):   %322:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
SU(2):   SUB32mr %53:gr64, 4, %331:gr64_nosp, 0, $noreg, %322:gr32, implicit-def dead $eflags, debug-location !233 :: (store 4 into %ir.arrayidx24), (load 4 from %ir.arrayidx21); cg.c:204:23
SU(3):   %323:gr32 = LEA64_32r %331:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !234; cg.c:203:49
SU(4):   MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %323:gr32, debug-location !234 :: (store 4 into %ir.k); cg.c:203:49

********** MI Scheduling **********
main:%bb.12 for.end30
  From: MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %61:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, 1, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %309:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %310:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %310:gr64 = MOV64ri 4607182418800017408
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %309:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %61:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, 1, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
SU(1):   %61:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, 1, $noreg
SU(2):   %309:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
SU(3):   %310:gr64 = MOV64ri 4607182418800017408

********** MI Scheduling **********
main:%bb.14 for.body33
  From: %333:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
    To: JMP_1 %bb.13, debug-location !254; cg.c:211:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %333:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%333
    SU(1): Data Latency=4 Reg=%333
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV64mr %309:gr64, 8, %333:gr64_nosp, 0, $noreg, %310:gr64, debug-location !252 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%333
  Single Issue       : false;
SU(2):   %311:gr32 = LEA64_32r %333:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !253; cg.c:211:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%333
  Successors:
    SU(3): Data Latency=1 Reg=%311
  Single Issue       : false;
SU(3):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %311:gr32, debug-location !253 :: (store 4 into %ir.i); cg.c:211:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%311
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.13, debug-location !254; cg.c:211:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %311:gr32, debug-location !253 :: (store 4 into %ir.i); cg.c:211:30
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %311:gr32 = LEA64_32r %333:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !253; cg.c:211:30
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %309:gr64, 8, %333:gr64_nosp, 0, $noreg, %310:gr64, debug-location !252 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %333:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %333:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
SU(1):   MOV64mr %309:gr64, 8, %333:gr64_nosp, 0, $noreg, %310:gr64, debug-location !252 :: (store 8 into %ir.arrayidx35); cg.c:212:14
SU(2):   %311:gr32 = LEA64_32r %333:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !253; cg.c:211:30
SU(3):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %311:gr32, debug-location !253 :: (store 4 into %ir.i); cg.c:211:30

********** MI Scheduling **********
main:%bb.15 for.end38
  From: MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %300:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %301:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   undef %303.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %304:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %305:gr64 = LEA64r $rip, 1, $noreg, @p, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %305:gr64 = LEA64r $rip, 1, $noreg, @p, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %304:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) undef %303.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %301:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %300:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
SU(1):   %300:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
SU(2):   %301:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
SU(3):   undef %303.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
SU(4):   %304:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
SU(5):   %305:gr64 = LEA64r $rip, 1, $noreg, @p, $noreg

********** MI Scheduling **********
main:%bb.16 for.cond39
  From: %66:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
    To: JCC_1 %bb.18, 13, implicit killed $eflags, debug-location !267; cg.c:214:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %66:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%66
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %66:gr32 = nsw SUB32rm %66:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !264 :: (dereferenceable load 4 from @firstcol); cg.c:214:29
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%66
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%66
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %66:gr32 = nsw INC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !265; cg.c:214:40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%66
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%66
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !266 :: (dereferenceable load 4 from %ir.j); cg.c:214:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%66
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.18, 13, implicit killed $eflags, debug-location !267; cg.c:214:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !266 :: (dereferenceable load 4 from %ir.j); cg.c:214:19
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %66:gr32 = nsw INC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !265; cg.c:214:40
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %66:gr32 = nsw SUB32rm %66:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !264 :: (dereferenceable load 4 from @firstcol); cg.c:214:29
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %66:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %66:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
SU(1):   %66:gr32 = nsw SUB32rm %66:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !264 :: (dereferenceable load 4 from @firstcol); cg.c:214:29
SU(2):   %66:gr32 = nsw INC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !265; cg.c:214:40
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !266 :: (dereferenceable load 4 from %ir.j); cg.c:214:19

********** MI Scheduling **********
main:%bb.17 for.body43
  From: %334:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
    To: JMP_1 %bb.16, debug-location !282; cg.c:214:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %334:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%334
    SU(4): Data Latency=4 Reg=%334
    SU(3): Data Latency=4 Reg=%334
    SU(2): Data Latency=4 Reg=%334
    SU(1): Data Latency=4 Reg=%334
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV64mi32 %300:gr64, 8, %334:gr64_nosp, 0, $noreg, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%334
  Single Issue       : false;
SU(2):   MOV64mr %301:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%334
  Single Issue       : false;
SU(3):   MOV64mr %304:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%334
  Single Issue       : false;
SU(4):   MOV64mr %305:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%334
  Single Issue       : false;
SU(5):   %306:gr32 = LEA64_32r %334:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !281; cg.c:214:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%334
  Successors:
    SU(6): Data Latency=1 Reg=%306
  Single Issue       : false;
SU(6):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %306:gr32, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%306
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.16, debug-location !282; cg.c:214:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 3 2 1 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %306:gr32, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 2 5 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %306:gr32 = LEA64_32r %334:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !281; cg.c:214:46
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 2 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr %305:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr %304:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV64mr %301:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mi32 %300:gr64, 8, %334:gr64_nosp, 0, $noreg, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %334:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %334:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
SU(1):   MOV64mi32 %300:gr64, 8, %334:gr64_nosp, 0, $noreg, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
SU(2):   MOV64mr %301:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
SU(3):   MOV64mr %304:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
SU(4):   MOV64mr %305:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
SU(5):   %306:gr32 = LEA64_32r %334:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !281; cg.c:214:46
SU(6):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %306:gr32, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46

********** MI Scheduling **********
main:%bb.18 for.end54
  From: MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
    To: End RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=2
GR16=12
Live In: 
Live Out: %274 %272 %266 %262 %261 %258 %257 %256 
Live Thru: 
  LiveReg: %274
  LiveReg: %272
  LiveReg: %266
  LiveReg: %262
  LiveReg: %261
  LiveReg: %258
  LiveReg: %257
  LiveReg: %256
Top Pressure:

Bottom Pressure:
FR32=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=2
GR16=12
Excess PSets: 
SU(0):   MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %68:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%68
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   MOV32mr %stack.6.it, 1, $noreg, 0, $noreg, %68:gr32, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%68
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(3):   %256:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %257:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %258:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %261:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %262:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   undef %266.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32temp -2    GR32temp+GR32_DIBP -2    GR32temp+GR64_TC -2    GR8+GR32temp -2    GR16 -2
  Single Issue       : false;
SU(9):   %272:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(10):   %274:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 8 7 6 5 4 3 2 0 10 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %274:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=1
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=1
GR16=12
  Ready @3c
  BotQ.A BotLatency SU(10) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 8 7 6 5 4 3 2 0 
  Cand SU(9) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(9) %272:fr64 = FsFLD0SD
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 8 7 6 5 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(8) undef %266.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
Bottom Pressure:
GR16=10
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 7 6 5 4 3 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %262:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
Bottom Pressure:
GR16=8
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 6 5 4 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %261:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
Bottom Pressure:
GR16=6
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 4 5 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %258:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
Bottom Pressure:
GR16=4
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 4 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %257:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
Bottom Pressure:
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %256:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
Bottom Pressure:

  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mr %stack.6.it, 1, $noreg, 0, $noreg, %68:gr32, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
Bottom Pressure:
GR16=2
  LiveReg: %68
  UpdateRegP: SU(2) MOV32mr %stack.6.it, 1, $noreg, 0, $noreg, %68:gr32, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
              to 
  Ready @2c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %68:gr32 = MOV32ri 1
Bottom Pressure:

  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
SU(1):   %68:gr32 = MOV32ri 1
SU(2):   MOV32mr %stack.6.it, 1, $noreg, 0, $noreg, %68:gr32, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
SU(3):   %256:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
SU(4):   %257:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
SU(5):   %258:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
SU(6):   %261:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
SU(7):   %262:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
SU(8):   undef %266.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
SU(9):   %272:fr64 = FsFLD0SD
SU(10):   %274:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
main:%bb.20 for.body57
  From: MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !295 :: (store 8 into %ir.norm_temp1); cg.c:240:20
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !295 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV64mr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %266:gr64_with_sub_32bit_in_gr32temp, debug-location !296 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !297 :: (store 4 into %ir.j); cg.c:242:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !297 :: (store 4 into %ir.j); cg.c:242:16
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV64mr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %266:gr64_with_sub_32bit_in_gr32temp, debug-location !296 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !295 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !295 :: (store 8 into %ir.norm_temp1); cg.c:240:20
SU(1):   MOV64mr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %266:gr64_with_sub_32bit_in_gr32temp, debug-location !296 :: (store 8 into %ir.norm_temp2); cg.c:241:20
SU(2):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !297 :: (store 4 into %ir.j); cg.c:242:16

********** MI Scheduling **********
main:%bb.20 for.body57
  From: MOV64mr $rsp, 1, $noreg, 16, $noreg, %256:gr64, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
    To: CALL64pcrel32 @conj_grad, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !293; cg.c:232:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
GR16=14
Live In: %258 %257 %256 
Live Out: %258 %257 %256 
Live Thru: GR16=6
  LiveReg: %258
  UpdateRegP: SU(2) MOV64mr $rsp, 1, $noreg, 0, $noreg, %258:gr64, debug-location !293 :: (store 8 into stack); cg.c:232:9
              to 
  LiveReg: %257
  UpdateRegP: SU(1) MOV64mr $rsp, 1, $noreg, 8, $noreg, %257:gr64, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9
              to 
  LiveReg: %256
  UpdateRegP: SU(0) MOV64mr $rsp, 1, $noreg, 16, $noreg, %256:gr64, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
              to 
Top Pressure:
GR16=6
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
GR16=14
Excess PSets: 
SU(0):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %256:gr64, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   MOV64mr $rsp, 1, $noreg, 8, $noreg, %257:gr64, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %258:gr64, debug-location !293 :: (store 8 into stack); cg.c:232:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   $rdi = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(4):   $rsi = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  Single Issue       : false;
SU(5):   $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Single Issue       : false;
SU(6):   $rcx = LEA64r $rip, 1, $noreg, @z, $noreg, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  Single Issue       : false;
SU(7):   $r8 = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(8):   $r9 = LEA64r $rip, 1, $noreg, @p, $noreg, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @conj_grad, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !293; cg.c:232:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 8 7 6 5 4 3 
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) $r9 = LEA64r $rip, 1, $noreg, @p, $noreg, debug-location !293; cg.c:232:9
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
GR16=13
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 7 6 5 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) $r8 = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !293; cg.c:232:9
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
GR16=12
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 4 6 5 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) $rcx = LEA64r $rip, 1, $noreg, @z, $noreg, debug-location !293; cg.c:232:9
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 4 5 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !293; cg.c:232:9
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=8
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $rsi = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !293; cg.c:232:9
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
GR16=7
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rdi = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !293; cg.c:232:9
Bottom Pressure:
GR16=6
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV64mr $rsp, 1, $noreg, 0, $noreg, %258:gr64, debug-location !293 :: (store 8 into stack); cg.c:232:9
Bottom Pressure:
GR16=6
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV64mr $rsp, 1, $noreg, 8, $noreg, %257:gr64, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9
Bottom Pressure:
GR16=6
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mr $rsp, 1, $noreg, 16, $noreg, %256:gr64, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
Bottom Pressure:
GR16=6
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %256:gr64, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
SU(1):   MOV64mr $rsp, 1, $noreg, 8, $noreg, %257:gr64, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9
SU(2):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %258:gr64, debug-location !293 :: (store 8 into stack); cg.c:232:9
SU(3):   $rdi = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !293; cg.c:232:9
SU(4):   $rsi = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !293; cg.c:232:9
SU(5):   $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !293; cg.c:232:9
SU(6):   $rcx = LEA64r $rip, 1, $noreg, @z, $noreg, debug-location !293; cg.c:232:9
SU(7):   $r8 = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !293; cg.c:232:9
SU(8):   $r9 = LEA64r $rip, 1, $noreg, @p, $noreg, debug-location !293; cg.c:232:9

********** MI Scheduling **********
main:%bb.21 for.cond58
  From: %270:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
    To: JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !307; cg.c:242:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %270:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%270
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %270:gr32 = nsw SUB32rm %270:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !304 :: (dereferenceable load 4 from @firstcol); cg.c:242:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%270
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%270
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %270:gr32 = nsw INC32r %270:gr32(tied-def 0), implicit-def dead $eflags, debug-location !305; cg.c:242:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%270
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%270
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %270:gr32, implicit-def $eflags, debug-location !306 :: (dereferenceable load 4 from %ir.j); cg.c:242:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%270
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !307; cg.c:242:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %270:gr32, implicit-def $eflags, debug-location !306 :: (dereferenceable load 4 from %ir.j); cg.c:242:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %270:gr32 = nsw INC32r %270:gr32(tied-def 0), implicit-def dead $eflags, debug-location !305; cg.c:242:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %270:gr32 = nsw SUB32rm %270:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !304 :: (dereferenceable load 4 from @firstcol); cg.c:242:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %270:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %270:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
SU(1):   %270:gr32 = nsw SUB32rm %270:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !304 :: (dereferenceable load 4 from @firstcol); cg.c:242:33
SU(2):   %270:gr32 = nsw INC32r %270:gr32(tied-def 0), implicit-def dead $eflags, debug-location !305; cg.c:242:44
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %270:gr32, implicit-def $eflags, debug-location !306 :: (dereferenceable load 4 from %ir.j); cg.c:242:23

********** MI Scheduling **********
main:%bb.22 for.body62
  From: %336:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
    To: JMP_1 %bb.21, debug-location !326; cg.c:242:9
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=6
Live In: %261 %262 
Live Out: %261 %262 
Live Thru: GR16=4
  LiveReg: %261
  UpdateRegP: SU(2) %294:fr64 = MOVSDrm_alt %261:gr64, 8, %336:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx64)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %262
  UpdateRegP: SU(1) %296:fr64 = MOVSDrm_alt %262:gr64, 8, %336:gr64_nosp, 0, $noreg, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
              to FR32 -1    FR32X -1    GR16 2
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %336:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(9): Data Latency=4 Reg=%336
    SU(2): Data Latency=4 Reg=%336
    SU(1): Data Latency=4 Reg=%336
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %296:fr64 = MOVSDrm_alt %262:gr64, 8, %336:gr64_nosp, 0, $noreg, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%336
  Successors:
    SU(6): Data Latency=4 Reg=%296
    SU(3): Data Latency=4 Reg=%296
    SU(6): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(2):   %294:fr64 = MOVSDrm_alt %261:gr64, 8, %336:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx64)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%336
  Successors:
    SU(3): Data Latency=4 Reg=%294
    SU(3): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(3):   %294:fr64 = MULSDrr %294:fr64(tied-def 0), %296:fr64, debug-location !314; cg.c:243:44
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%294
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%296
  Successors:
    SU(4): Data Latency=1 Reg=%294
    SU(4): Out  Latency=0
    SU(6): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(4):   %294:fr64 = ADDSDrm %294:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !315 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:37
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%294
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%294
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %294:fr64, debug-location !316 :: (store 8 into %ir.norm_temp1); cg.c:243:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%294
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %296:fr64 = MULSDrr %296:fr64(tied-def 0), %296:fr64, debug-location !322; cg.c:244:44
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Data Latency=4 Reg=%296
    SU(1): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%296
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %296:fr64 = ADDSDrm %296:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:37
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(6): Data Latency=1 Reg=%296
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%296
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %296:fr64, debug-location !324 :: (store 8 into %ir.norm_temp2); cg.c:244:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%296
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %297:gr32 = LEA64_32r %336:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !325; cg.c:242:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%336
  Successors:
    SU(10): Data Latency=1 Reg=%297
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %297:gr32, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%297
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.21, debug-location !326; cg.c:242:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 5 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %297:gr32, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50
Bottom Pressure:
GR16=6
  LiveReg: %297
  UpdateRegP: SU(10) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %297:gr32, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 9 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %297:gr32 = LEA64_32r %336:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !325; cg.c:242:50
Bottom Pressure:
GR16=6
  LiveReg: %336
  UpdateRegP: SU(1) %296:fr64 = MOVSDrm_alt %262:gr64, 8, %336:gr64_nosp, 0, $noreg, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
              to FR32 -1    FR32X -1
  UpdateRegP: SU(2) %294:fr64 = MOVSDrm_alt %261:gr64, 8, %336:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx64)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(9) %297:gr32 = LEA64_32r %336:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !325; cg.c:242:50
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %296:fr64, debug-location !324 :: (store 8 into %ir.norm_temp2); cg.c:244:24
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %296
  UpdateRegP: SU(8) MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %296:fr64, debug-location !324 :: (store 8 into %ir.norm_temp2); cg.c:244:24
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 13c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %296:fr64 = ADDSDrm %296:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:37
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %296
  UpdateRegP: SU(7) %296:fr64 = ADDSDrm %296:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:37
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %296:fr64 = MULSDrr %296:fr64(tied-def 0), %296:fr64, debug-location !322; cg.c:244:44
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %296
  UpdateRegP: SU(3) %294:fr64 = MULSDrr %294:fr64(tied-def 0), %296:fr64, debug-location !314; cg.c:243:44
              to 
  UpdateRegP: SU(6) %296:fr64 = MULSDrr %296:fr64(tied-def 0), %296:fr64, debug-location !322; cg.c:244:44
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %294:fr64, debug-location !316 :: (store 8 into %ir.norm_temp1); cg.c:243:24
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %294
  UpdateRegP: SU(5) MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %294:fr64, debug-location !316 :: (store 8 into %ir.norm_temp1); cg.c:243:24
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %294:fr64 = ADDSDrm %294:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !315 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:37
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %294
  UpdateRegP: SU(4) %294:fr64 = ADDSDrm %294:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !315 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:37
              to FR32 -1    FR32X -1
  Ready @5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %294:fr64 = MULSDrr %294:fr64(tied-def 0), %296:fr64, debug-location !314; cg.c:243:44
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %294
  UpdateRegP: SU(3) %294:fr64 = MULSDrr %294:fr64(tied-def 0), %296:fr64, debug-location !314; cg.c:243:44
              to FR32 -1    FR32X -1
  Ready @6c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %294:fr64 = MOVSDrm_alt %261:gr64, 8, %336:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx64)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @10c
  BotQ.A BotLatency SU(2) 9c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %296:fr64 = MOVSDrm_alt %262:gr64, 8, %336:gr64_nosp, 0, $noreg, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
Bottom Pressure:
GR16=6
  Ready @10c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %336:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
Bottom Pressure:
GR16=4
  Ready @14c
  BotQ.A BotLatency SU(0) 13c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %336:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
SU(1):   %296:fr64 = MOVSDrm_alt %262:gr64, 8, %336:gr64_nosp, 0, $noreg, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
SU(2):   %294:fr64 = MOVSDrm_alt %261:gr64, 8, %336:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx64)
SU(3):   %294:fr64 = MULSDrr %294:fr64(tied-def 0), %296:fr64, debug-location !314; cg.c:243:44
SU(4):   %294:fr64 = ADDSDrm %294:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !315 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:37
SU(5):   MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %294:fr64, debug-location !316 :: (store 8 into %ir.norm_temp1); cg.c:243:24
SU(6):   %296:fr64 = MULSDrr %296:fr64(tied-def 0), %296:fr64, debug-location !322; cg.c:244:44
SU(7):   %296:fr64 = ADDSDrm %296:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:37
SU(8):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %296:fr64, debug-location !324 :: (store 8 into %ir.norm_temp2); cg.c:244:24
SU(9):   %297:gr32 = LEA64_32r %336:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !325; cg.c:242:50
SU(10):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %297:gr32, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50

********** MI Scheduling **********
main:%bb.23 for.end76
  From: %1:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
    To: JCC_1 %bb.25, 2, implicit killed $eflags, debug-location !331; cg.c:247:26
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %1:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%1
  Single Issue       : false;
SU(1):   UCOMISDrr %1:fr64, %272:fr64, implicit-def $eflags, debug-location !331; cg.c:247:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.25, 2, implicit killed $eflags, debug-location !331; cg.c:247:26
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) UCOMISDrr %1:fr64, %272:fr64, implicit-def $eflags, debug-location !331; cg.c:247:26
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %1:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
SU(1):   UCOMISDrr %1:fr64, %272:fr64, implicit-def $eflags, debug-location !331; cg.c:247:26

********** MI Scheduling **********
main:%bb.26 for.end76.split
  From: %275:fr64 = COPY %274:fr64, debug-location !331; cg.c:247:26
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %275:fr64 = COPY %274:fr64, debug-location !331; cg.c:247:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=0 Reg=%275
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %275:fr64 = DIVSDrr %275:fr64(tied-def 0), %328:fr64, debug-location !331; cg.c:247:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 10
  Predecessors:
    SU(0): Data Latency=0 Reg=%275
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=10 Reg=%275
  Single Issue       : false;
SU(2):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %275:fr64, debug-location !332 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(1): Data Latency=10 Reg=%275
  Single Issue       : false;
SU(3):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !333 :: (store 4 into %ir.j); cg.c:252:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !333 :: (store 4 into %ir.j); cg.c:252:16
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %275:fr64, debug-location !332 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  Ready @0c
  BotQ.A TopLatency SU(2) 10c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %275:fr64 = DIVSDrr %275:fr64(tied-def 0), %328:fr64, debug-location !331; cg.c:247:26
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %275:fr64 = COPY %274:fr64, debug-location !331; cg.c:247:26
  Ready @10c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %275:fr64 = COPY %274:fr64, debug-location !331; cg.c:247:26
SU(1):   %275:fr64 = DIVSDrr %275:fr64(tied-def 0), %328:fr64, debug-location !331; cg.c:247:26
SU(2):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %275:fr64, debug-location !332 :: (store 8 into %ir.norm_temp2); cg.c:247:20
SU(3):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !333 :: (store 4 into %ir.j); cg.c:252:16

********** MI Scheduling **********
main:%bb.27 for.cond78
  From: %279:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
    To: JCC_1 %bb.29, 13, implicit killed $eflags, debug-location !343; cg.c:252:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %279:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%279
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %279:gr32 = nsw SUB32rm %279:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !340 :: (dereferenceable load 4 from @firstcol); cg.c:252:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%279
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%279
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %279:gr32 = nsw INC32r %279:gr32(tied-def 0), implicit-def dead $eflags, debug-location !341; cg.c:252:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%279
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%279
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %279:gr32, implicit-def $eflags, debug-location !342 :: (dereferenceable load 4 from %ir.j); cg.c:252:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%279
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.29, 13, implicit killed $eflags, debug-location !343; cg.c:252:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %279:gr32, implicit-def $eflags, debug-location !342 :: (dereferenceable load 4 from %ir.j); cg.c:252:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %279:gr32 = nsw INC32r %279:gr32(tied-def 0), implicit-def dead $eflags, debug-location !341; cg.c:252:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %279:gr32 = nsw SUB32rm %279:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !340 :: (dereferenceable load 4 from @firstcol); cg.c:252:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %279:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %279:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
SU(1):   %279:gr32 = nsw SUB32rm %279:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !340 :: (dereferenceable load 4 from @firstcol); cg.c:252:33
SU(2):   %279:gr32 = nsw INC32r %279:gr32(tied-def 0), implicit-def dead $eflags, debug-location !341; cg.c:252:44
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %279:gr32, implicit-def $eflags, debug-location !342 :: (dereferenceable load 4 from %ir.j); cg.c:252:23

********** MI Scheduling **********
main:%bb.28 for.body82
  From: %285:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
    To: JMP_1 %bb.27, debug-location !353; cg.c:252:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %285:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%285
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(1):   %337:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=4 Reg=%337
    SU(3): Data Latency=4 Reg=%337
    SU(2): Data Latency=4 Reg=%337
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %285:fr64 = MULSDrm %285:fr64(tied-def 0), %262:gr64, 8, %337:gr64_nosp, 0, $noreg, debug-location !348 :: (load 8 from %ir.arrayidx84); cg.c:253:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%337
    SU(0): Data Latency=4 Reg=%285
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%285
  Single Issue       : false;
SU(3):   MOVSDmr %261:gr64, 8, %337:gr64_nosp, 0, $noreg, %285:fr64, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%285
    SU(1): Data Latency=4 Reg=%337
  Single Issue       : false;
SU(4):   %287:gr32 = LEA64_32r %337:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !352; cg.c:252:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%337
  Successors:
    SU(5): Data Latency=1 Reg=%287
  Single Issue       : false;
SU(5):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %287:gr32, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%287
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.27, debug-location !353; cg.c:252:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %287:gr32, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %287:gr32 = LEA64_32r %337:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !352; cg.c:252:50
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %261:gr64, 8, %337:gr64_nosp, 0, $noreg, %285:fr64, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %285:fr64 = MULSDrm %285:fr64(tied-def 0), %262:gr64, 8, %337:gr64_nosp, 0, $noreg, debug-location !348 :: (load 8 from %ir.arrayidx84); cg.c:253:31
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %337:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %285:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %285:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
SU(1):   %337:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
SU(2):   %285:fr64 = MULSDrm %285:fr64(tied-def 0), %262:gr64, 8, %337:gr64_nosp, 0, $noreg, debug-location !348 :: (load 8 from %ir.arrayidx84); cg.c:253:31
SU(3):   MOVSDmr %261:gr64, 8, %337:gr64_nosp, 0, $noreg, %285:fr64, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
SU(4):   %287:gr32 = LEA64_32r %337:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !352; cg.c:252:50
SU(5):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %287:gr32, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50

********** MI Scheduling **********
main:%bb.30 for.end93
  From: MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %72:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, 1, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %252:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %253:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %253:gr64 = MOV64ri 4607182418800017408
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %252:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %72:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, 1, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
SU(1):   %72:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, 1, $noreg
SU(2):   %252:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
SU(3):   %253:gr64 = MOV64ri 4607182418800017408

********** MI Scheduling **********
main:%bb.32 for.body96
  From: %339:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
    To: JMP_1 %bb.31, debug-location !372; cg.c:260:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %339:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%339
    SU(1): Data Latency=4 Reg=%339
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV64mr %252:gr64, 8, %339:gr64_nosp, 0, $noreg, %253:gr64, debug-location !370 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%339
  Single Issue       : false;
SU(2):   %254:gr32 = LEA64_32r %339:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !371; cg.c:260:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%339
  Successors:
    SU(3): Data Latency=1 Reg=%254
  Single Issue       : false;
SU(3):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %254:gr32, debug-location !371 :: (store 4 into %ir.i); cg.c:260:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%254
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.31, debug-location !372; cg.c:260:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %254:gr32, debug-location !371 :: (store 4 into %ir.i); cg.c:260:30
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %254:gr32 = LEA64_32r %339:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !371; cg.c:260:30
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %252:gr64, 8, %339:gr64_nosp, 0, $noreg, %253:gr64, debug-location !370 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %339:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %339:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
SU(1):   MOV64mr %252:gr64, 8, %339:gr64_nosp, 0, $noreg, %253:gr64, debug-location !370 :: (store 8 into %ir.arrayidx98); cg.c:261:14
SU(2):   %254:gr32 = LEA64_32r %339:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !371; cg.c:260:30
SU(3):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %254:gr32, debug-location !371 :: (store 4 into %ir.i); cg.c:260:30

********** MI Scheduling **********
main:%bb.33 for.end101
  From: MOV32mr %stack.6.it, 1, $noreg, 0, $noreg, %79:gr32, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
    To: End RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
GR16=10
Live In: %79 
Live Out: %325 %212 %210 %199 %198 %195 %194 %193 
Live Thru: 
  LiveReg: %325
  LiveReg: %212
  LiveReg: %210
  LiveReg: %199
  LiveReg: %198
  LiveReg: %195
  LiveReg: %194
  LiveReg: %193
Top Pressure:
GR16=2
Bottom Pressure:
FR32=3
FR32X=3
GR16=10
Excess PSets: 
SU(0):   MOV32mr %stack.6.it, 1, $noreg, 0, $noreg, %79:gr32, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(1):   %193:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %194:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %195:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %198:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %199:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %210:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(7):   %212:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(8):   %325:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 1 0 8 7 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %325:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  Ready @3c
  BotQ.A BotLatency SU(8) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 1 0 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %212:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 1 0 
  Cand SU(6) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(6) %210:fr64 = FsFLD0SD
Bottom Pressure:
GR16=10
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(5) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(5) %199:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
Bottom Pressure:
GR16=8
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %198:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
Bottom Pressure:
GR16=6
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %195:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
Bottom Pressure:
GR16=4
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %194:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
Bottom Pressure:
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %193:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
Bottom Pressure:

  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mr %stack.6.it, 1, $noreg, 0, $noreg, %79:gr32, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
Bottom Pressure:
GR16=2
  LiveReg: %79
  UpdateRegP: SU(0) MOV32mr %stack.6.it, 1, $noreg, 0, $noreg, %79:gr32, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
              to 
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   MOV32mr %stack.6.it, 1, $noreg, 0, $noreg, %79:gr32, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
SU(1):   %193:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
SU(2):   %194:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
SU(3):   %195:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
SU(4):   %198:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
SU(5):   %199:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
SU(6):   %210:fr64 = FsFLD0SD
SU(7):   %212:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
SU(8):   %325:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
main:%bb.33 for.end101
  From: %79:gr32 = MOV32ri 1
    To: CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !379; cg.c:270:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %79:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $edi = MOV32ri 1, debug-location !379; cg.c:270:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !379; cg.c:270:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32ri 1, debug-location !379; cg.c:270:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %79:gr32 = MOV32ri 1
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %79:gr32 = MOV32ri 1
SU(1):   $edi = MOV32ri 1, debug-location !379; cg.c:270:5

********** MI Scheduling **********
main:%bb.33 for.end101
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_9__Initializ, $noreg, debug-location !378; cg.c:268:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !378; cg.c:268:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_9__Initializ, $noreg, debug-location !378; cg.c:268:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %75:fr64, debug-location !378; cg.c:268:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !378; cg.c:268:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !378; cg.c:268:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !378; cg.c:268:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %75:fr64, debug-location !378; cg.c:268:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_9__Initializ, $noreg, debug-location !378; cg.c:268:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_9__Initializ, $noreg, debug-location !378; cg.c:268:5
SU(1):   $xmm0 = COPY %75:fr64, debug-location !378; cg.c:268:5
SU(2):   $al = MOV8ri 1, debug-location !378; cg.c:268:5

********** MI Scheduling **********
main:%bb.33 for.end101
  From: undef %204.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
    To: CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !376; cg.c:266:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   undef %204.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $edi = MOV32r0 implicit-def dead $eflags, debug-location !376; cg.c:266:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !376; cg.c:266:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32r0 implicit-def dead $eflags, debug-location !376; cg.c:266:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) undef %204.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   undef %204.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
SU(1):   $edi = MOV32r0 implicit-def dead $eflags, debug-location !376; cg.c:266:5

********** MI Scheduling **********
main:%bb.37 if.end112
  From: MOV64mr $rsp, 1, $noreg, 16, $noreg, %193:gr64, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
    To: CALL64pcrel32 @conj_grad, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !393; cg.c:286:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
GR16=14
Live In: %195 %194 %193 
Live Out: %195 %194 %193 
Live Thru: GR16=6
  LiveReg: %195
  UpdateRegP: SU(2) MOV64mr $rsp, 1, $noreg, 0, $noreg, %195:gr64, debug-location !393 :: (store 8 into stack); cg.c:286:9
              to 
  LiveReg: %194
  UpdateRegP: SU(1) MOV64mr $rsp, 1, $noreg, 8, $noreg, %194:gr64, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9
              to 
  LiveReg: %193
  UpdateRegP: SU(0) MOV64mr $rsp, 1, $noreg, 16, $noreg, %193:gr64, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
              to 
Top Pressure:
GR16=6
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
GR16=14
Excess PSets: 
SU(0):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %193:gr64, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   MOV64mr $rsp, 1, $noreg, 8, $noreg, %194:gr64, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %195:gr64, debug-location !393 :: (store 8 into stack); cg.c:286:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   $rdi = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(4):   $rsi = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  Single Issue       : false;
SU(5):   $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Single Issue       : false;
SU(6):   $rcx = LEA64r $rip, 1, $noreg, @z, $noreg, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  Single Issue       : false;
SU(7):   $r8 = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(8):   $r9 = LEA64r $rip, 1, $noreg, @p, $noreg, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @conj_grad, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !393; cg.c:286:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 8 7 6 5 4 3 
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) $r9 = LEA64r $rip, 1, $noreg, @p, $noreg, debug-location !393; cg.c:286:9
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
GR16=13
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 7 6 5 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) $r8 = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !393; cg.c:286:9
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
GR16=12
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 4 6 5 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) $rcx = LEA64r $rip, 1, $noreg, @z, $noreg, debug-location !393; cg.c:286:9
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 4 5 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !393; cg.c:286:9
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=8
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $rsi = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !393; cg.c:286:9
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
GR16=7
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rdi = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !393; cg.c:286:9
Bottom Pressure:
GR16=6
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV64mr $rsp, 1, $noreg, 0, $noreg, %195:gr64, debug-location !393 :: (store 8 into stack); cg.c:286:9
Bottom Pressure:
GR16=6
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV64mr $rsp, 1, $noreg, 8, $noreg, %194:gr64, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9
Bottom Pressure:
GR16=6
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mr $rsp, 1, $noreg, 16, $noreg, %193:gr64, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
Bottom Pressure:
GR16=6
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %193:gr64, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
SU(1):   MOV64mr $rsp, 1, $noreg, 8, $noreg, %194:gr64, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9
SU(2):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %195:gr64, debug-location !393 :: (store 8 into stack); cg.c:286:9
SU(3):   $rdi = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !393; cg.c:286:9
SU(4):   $rsi = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !393; cg.c:286:9
SU(5):   $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !393; cg.c:286:9
SU(6):   $rcx = LEA64r $rip, 1, $noreg, @z, $noreg, debug-location !393; cg.c:286:9
SU(7):   $r8 = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !393; cg.c:286:9
SU(8):   $r9 = LEA64r $rip, 1, $noreg, @p, $noreg, debug-location !393; cg.c:286:9

********** MI Scheduling **********
main:%bb.39 if.end115
  From: MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !398 :: (store 8 into %ir.norm_temp1); cg.c:297:20
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !398 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV64mr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %204:gr64_with_sub_32bit_in_gr32temp, debug-location !399 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !400 :: (store 4 into %ir.j); cg.c:299:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !400 :: (store 4 into %ir.j); cg.c:299:16
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV64mr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %204:gr64_with_sub_32bit_in_gr32temp, debug-location !399 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !398 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !398 :: (store 8 into %ir.norm_temp1); cg.c:297:20
SU(1):   MOV64mr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %204:gr64_with_sub_32bit_in_gr32temp, debug-location !399 :: (store 8 into %ir.norm_temp2); cg.c:298:20
SU(2):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !400 :: (store 4 into %ir.j); cg.c:299:16

********** MI Scheduling **********
main:%bb.40 for.cond116
  From: %208:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
    To: JCC_1 %bb.42, 13, implicit killed $eflags, debug-location !410; cg.c:299:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %208:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%208
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %208:gr32 = nsw SUB32rm %208:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !407 :: (dereferenceable load 4 from @firstcol); cg.c:299:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%208
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%208
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %208:gr32 = nsw INC32r %208:gr32(tied-def 0), implicit-def dead $eflags, debug-location !408; cg.c:299:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%208
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%208
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %208:gr32, implicit-def $eflags, debug-location !409 :: (dereferenceable load 4 from %ir.j); cg.c:299:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%208
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.42, 13, implicit killed $eflags, debug-location !410; cg.c:299:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %208:gr32, implicit-def $eflags, debug-location !409 :: (dereferenceable load 4 from %ir.j); cg.c:299:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %208:gr32 = nsw INC32r %208:gr32(tied-def 0), implicit-def dead $eflags, debug-location !408; cg.c:299:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %208:gr32 = nsw SUB32rm %208:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !407 :: (dereferenceable load 4 from @firstcol); cg.c:299:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %208:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %208:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
SU(1):   %208:gr32 = nsw SUB32rm %208:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !407 :: (dereferenceable load 4 from @firstcol); cg.c:299:33
SU(2):   %208:gr32 = nsw INC32r %208:gr32(tied-def 0), implicit-def dead $eflags, debug-location !408; cg.c:299:44
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %208:gr32, implicit-def $eflags, debug-location !409 :: (dereferenceable load 4 from %ir.j); cg.c:299:23

********** MI Scheduling **********
main:%bb.41 for.body120
  From: %341:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
    To: JMP_1 %bb.40, debug-location !429; cg.c:299:9
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=6
Live In: %198 %199 
Live Out: %198 %199 
Live Thru: GR16=4
  LiveReg: %198
  UpdateRegP: SU(2) %246:fr64 = MOVSDrm_alt %198:gr64, 8, %341:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx122)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %199
  UpdateRegP: SU(1) %248:fr64 = MOVSDrm_alt %199:gr64, 8, %341:gr64_nosp, 0, $noreg, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
              to FR32 -1    FR32X -1    GR16 2
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %341:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(9): Data Latency=4 Reg=%341
    SU(2): Data Latency=4 Reg=%341
    SU(1): Data Latency=4 Reg=%341
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %248:fr64 = MOVSDrm_alt %199:gr64, 8, %341:gr64_nosp, 0, $noreg, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%341
  Successors:
    SU(6): Data Latency=4 Reg=%248
    SU(3): Data Latency=4 Reg=%248
    SU(6): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(2):   %246:fr64 = MOVSDrm_alt %198:gr64, 8, %341:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx122)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%341
  Successors:
    SU(3): Data Latency=4 Reg=%246
    SU(3): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(3):   %246:fr64 = MULSDrr %246:fr64(tied-def 0), %248:fr64, debug-location !417; cg.c:300:44
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%246
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%248
  Successors:
    SU(4): Data Latency=1 Reg=%246
    SU(4): Out  Latency=0
    SU(6): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(4):   %246:fr64 = ADDSDrm %246:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:37
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%246
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%246
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %246:fr64, debug-location !419 :: (store 8 into %ir.norm_temp1); cg.c:300:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%246
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %248:fr64 = MULSDrr %248:fr64(tied-def 0), %248:fr64, debug-location !425; cg.c:301:44
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Data Latency=4 Reg=%248
    SU(1): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%248
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %248:fr64 = ADDSDrm %248:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !426 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:37
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(6): Data Latency=1 Reg=%248
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%248
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %248:fr64, debug-location !427 :: (store 8 into %ir.norm_temp2); cg.c:301:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%248
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %249:gr32 = LEA64_32r %341:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !428; cg.c:299:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%341
  Successors:
    SU(10): Data Latency=1 Reg=%249
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %249:gr32, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%249
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.40, debug-location !429; cg.c:299:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 5 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %249:gr32, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50
Bottom Pressure:
GR16=6
  LiveReg: %249
  UpdateRegP: SU(10) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %249:gr32, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 9 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %249:gr32 = LEA64_32r %341:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !428; cg.c:299:50
Bottom Pressure:
GR16=6
  LiveReg: %341
  UpdateRegP: SU(1) %248:fr64 = MOVSDrm_alt %199:gr64, 8, %341:gr64_nosp, 0, $noreg, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
              to FR32 -1    FR32X -1
  UpdateRegP: SU(2) %246:fr64 = MOVSDrm_alt %198:gr64, 8, %341:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx122)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(9) %249:gr32 = LEA64_32r %341:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !428; cg.c:299:50
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %248:fr64, debug-location !427 :: (store 8 into %ir.norm_temp2); cg.c:301:24
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %248
  UpdateRegP: SU(8) MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %248:fr64, debug-location !427 :: (store 8 into %ir.norm_temp2); cg.c:301:24
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 13c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %248:fr64 = ADDSDrm %248:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !426 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:37
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %248
  UpdateRegP: SU(7) %248:fr64 = ADDSDrm %248:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !426 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:37
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %248:fr64 = MULSDrr %248:fr64(tied-def 0), %248:fr64, debug-location !425; cg.c:301:44
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %248
  UpdateRegP: SU(3) %246:fr64 = MULSDrr %246:fr64(tied-def 0), %248:fr64, debug-location !417; cg.c:300:44
              to 
  UpdateRegP: SU(6) %248:fr64 = MULSDrr %248:fr64(tied-def 0), %248:fr64, debug-location !425; cg.c:301:44
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %246:fr64, debug-location !419 :: (store 8 into %ir.norm_temp1); cg.c:300:24
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %246
  UpdateRegP: SU(5) MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %246:fr64, debug-location !419 :: (store 8 into %ir.norm_temp1); cg.c:300:24
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %246:fr64 = ADDSDrm %246:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:37
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %246
  UpdateRegP: SU(4) %246:fr64 = ADDSDrm %246:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:37
              to FR32 -1    FR32X -1
  Ready @5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %246:fr64 = MULSDrr %246:fr64(tied-def 0), %248:fr64, debug-location !417; cg.c:300:44
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %246
  UpdateRegP: SU(3) %246:fr64 = MULSDrr %246:fr64(tied-def 0), %248:fr64, debug-location !417; cg.c:300:44
              to FR32 -1    FR32X -1
  Ready @6c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %246:fr64 = MOVSDrm_alt %198:gr64, 8, %341:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx122)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @10c
  BotQ.A BotLatency SU(2) 9c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %248:fr64 = MOVSDrm_alt %199:gr64, 8, %341:gr64_nosp, 0, $noreg, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
Bottom Pressure:
GR16=6
  Ready @10c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %341:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
Bottom Pressure:
GR16=4
  Ready @14c
  BotQ.A BotLatency SU(0) 13c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %341:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
SU(1):   %248:fr64 = MOVSDrm_alt %199:gr64, 8, %341:gr64_nosp, 0, $noreg, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
SU(2):   %246:fr64 = MOVSDrm_alt %198:gr64, 8, %341:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx122)
SU(3):   %246:fr64 = MULSDrr %246:fr64(tied-def 0), %248:fr64, debug-location !417; cg.c:300:44
SU(4):   %246:fr64 = ADDSDrm %246:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:37
SU(5):   MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %246:fr64, debug-location !419 :: (store 8 into %ir.norm_temp1); cg.c:300:24
SU(6):   %248:fr64 = MULSDrr %248:fr64(tied-def 0), %248:fr64, debug-location !425; cg.c:301:44
SU(7):   %248:fr64 = ADDSDrm %248:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !426 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:37
SU(8):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %248:fr64, debug-location !427 :: (store 8 into %ir.norm_temp2); cg.c:301:24
SU(9):   %249:gr32 = LEA64_32r %341:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !428; cg.c:299:50
SU(10):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %249:gr32, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50

********** MI Scheduling **********
main:%bb.42 for.end135
  From: %5:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
    To: JCC_1 %bb.44, 2, implicit killed $eflags, debug-location !434; cg.c:304:26
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %5:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%5
  Single Issue       : false;
SU(1):   UCOMISDrr %5:fr64, %210:fr64, implicit-def $eflags, debug-location !434; cg.c:304:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%5
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.44, 2, implicit killed $eflags, debug-location !434; cg.c:304:26
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) UCOMISDrr %5:fr64, %210:fr64, implicit-def $eflags, debug-location !434; cg.c:304:26
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   %5:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
SU(1):   UCOMISDrr %5:fr64, %210:fr64, implicit-def $eflags, debug-location !434; cg.c:304:26

********** MI Scheduling **********
main:%bb.45 for.end135.split
  From: %213:fr64 = COPY %212:fr64, debug-location !434; cg.c:304:26
    To: JCC_1 %bb.47, 5, implicit killed $eflags, debug-location !443; cg.c:307:13
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=4
FR32X=4
Live In: %325 %212 %329 
Live Out: %325 %212 
Live Thru: FR32=2
FR32X=2
  LiveReg: %325
  UpdateRegP: SU(5) %215:fr64 = ADDSDrr %215:fr64(tied-def 0), %325:fr64, debug-location !438; cg.c:306:22
              to 
  LiveReg: %212
  UpdateRegP: SU(0) %213:fr64 = COPY %212:fr64, debug-location !434; cg.c:304:26
              to FR32 -1    FR32X -1
  UpdateRegP: SU(3) %215:fr64 = COPY %212:fr64, debug-location !437; cg.c:306:28
              to FR32 -1    FR32X -1
Top Pressure:
FR32=3
FR32X=3
Bottom Pressure:
FR32=2
FR32X=2
Excess PSets: 
SU(0):   %213:fr64 = COPY %212:fr64, debug-location !434; cg.c:304:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=0 Reg=%213
    SU(1): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %213:fr64 = DIVSDrr %213:fr64(tied-def 0), %329:fr64, debug-location !434; cg.c:304:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 10
  Predecessors:
    SU(0): Data Latency=0 Reg=%213
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=10 Reg=%213
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(2):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %213:fr64, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(1): Data Latency=10 Reg=%213
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   %215:fr64 = COPY %212:fr64, debug-location !437; cg.c:306:28
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=0 Reg=%215
    SU(4): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(4):   %215:fr64 = DIVSDrm %215:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !437 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:28
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(3): Data Latency=0 Reg=%215
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%215
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %215:fr64 = ADDSDrr %215:fr64(tied-def 0), %325:fr64, debug-location !438; cg.c:306:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%215
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%215
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %215:fr64, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%215
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(7):   CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !442 :: (dereferenceable load 4 from %ir.it); cg.c:307:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JCC_1 %bb.47, 5, implicit killed $eflags, debug-location !443; cg.c:307:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 2 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !442 :: (dereferenceable load 4 from %ir.it); cg.c:307:16
Bottom Pressure:
FR32=2
FR32X=2
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 2 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %215:fr64, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %215
  UpdateRegP: SU(6) MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %215:fr64, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14
              to 
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %215:fr64 = ADDSDrr %215:fr64(tied-def 0), %325:fr64, debug-location !438; cg.c:306:22
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %215
  UpdateRegP: SU(5) %215:fr64 = ADDSDrr %215:fr64(tied-def 0), %325:fr64, debug-location !438; cg.c:306:22
              to FR32 -1    FR32X -1
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %215:fr64 = DIVSDrm %215:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !437 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:28
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %215
  UpdateRegP: SU(4) %215:fr64 = DIVSDrm %215:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !437 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:28
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %215:fr64 = COPY %212:fr64, debug-location !437; cg.c:306:28
Bottom Pressure:
FR32=2
FR32X=2
  Ready @5c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %213:fr64, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %213
  UpdateRegP: SU(2) MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %213:fr64, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
              to 
  Ready @1c
  BotQ.A TopLatency SU(2) 10c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %213:fr64 = DIVSDrr %213:fr64(tied-def 0), %329:fr64, debug-location !434; cg.c:304:26
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %213
  UpdateRegP: SU(1) %213:fr64 = DIVSDrr %213:fr64(tied-def 0), %329:fr64, debug-location !434; cg.c:304:26
              to 
  LiveReg: %329
  UpdateRegP: SU(1) %213:fr64 = DIVSDrr %213:fr64(tied-def 0), %329:fr64, debug-location !434; cg.c:304:26
              to FR32 -1    FR32X -1
  Ready @11c
  BotQ.A BotLatency SU(1) 10c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %213:fr64 = COPY %212:fr64, debug-location !434; cg.c:304:26
Bottom Pressure:
FR32=3
FR32X=3
  Ready @11c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %213:fr64 = COPY %212:fr64, debug-location !434; cg.c:304:26
SU(1):   %213:fr64 = DIVSDrr %213:fr64(tied-def 0), %329:fr64, debug-location !434; cg.c:304:26
SU(2):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %213:fr64, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
SU(3):   %215:fr64 = COPY %212:fr64, debug-location !437; cg.c:306:28
SU(4):   %215:fr64 = DIVSDrm %215:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !437 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:28
SU(5):   %215:fr64 = ADDSDrr %215:fr64(tied-def 0), %325:fr64, debug-location !438; cg.c:306:22
SU(6):   MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %215:fr64, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14
SU(7):   CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !442 :: (dereferenceable load 4 from %ir.it); cg.c:307:16

********** MI Scheduling **********
main:%bb.46 if.then141
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_10_____iterat, $noreg, debug-location !444; cg.c:308:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !444; cg.c:308:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_10_____iterat, $noreg, debug-location !444; cg.c:308:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !444; cg.c:308:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !444; cg.c:308:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !444; cg.c:308:13
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_10_____iterat, $noreg, debug-location !444; cg.c:308:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.46 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_10_____iterat, $noreg, debug-location !444; cg.c:308:13
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !444; cg.c:308:13

********** MI Scheduling **********
main:%bb.47 if.end143
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_11______5d___, $noreg, debug-location !448; cg.c:309:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !448; cg.c:309:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_11______5d___, $noreg, debug-location !448; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %222:gr32, debug-location !448; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %223:fr64, debug-location !448; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %224:fr64, debug-location !448; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2, debug-location !448; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !448; cg.c:309:9
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2, debug-location !448; cg.c:309:9
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %224:fr64, debug-location !448; cg.c:309:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm0 = COPY %223:fr64, debug-location !448; cg.c:309:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %222:gr32, debug-location !448; cg.c:309:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_11______5d___, $noreg, debug-location !448; cg.c:309:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_11______5d___, $noreg, debug-location !448; cg.c:309:9
SU(1):   $esi = COPY %222:gr32, debug-location !448; cg.c:309:9
SU(2):   $xmm0 = COPY %223:fr64, debug-location !448; cg.c:309:9
SU(3):   $xmm1 = COPY %224:fr64, debug-location !448; cg.c:309:9
SU(4):   $al = MOV8ri 2, debug-location !448; cg.c:309:9

********** MI Scheduling **********
main:%bb.47 if.end143
  From: %222:gr32 = MOV32rm %stack.6.it, 1, $noreg, 0, $noreg, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !448; cg.c:309:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %222:gr32 = MOV32rm %stack.6.it, 1, $noreg, 0, $noreg, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %223:fr64 = MOVSDrm_alt %stack.8.rnorm, 1, $noreg, 0, $noreg, debug-location !446 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %224:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !447 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !448; cg.c:309:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %224:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !447 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %223:fr64 = MOVSDrm_alt %stack.8.rnorm, 1, $noreg, 0, $noreg, debug-location !446 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %222:gr32 = MOV32rm %stack.6.it, 1, $noreg, 0, $noreg, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   %222:gr32 = MOV32rm %stack.6.it, 1, $noreg, 0, $noreg, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
SU(1):   %223:fr64 = MOVSDrm_alt %stack.8.rnorm, 1, $noreg, 0, $noreg, debug-location !446 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
SU(2):   %224:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !447 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61

********** MI Scheduling **********
main:%bb.48 for.cond145
  From: %231:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
    To: JCC_1 %bb.50, 13, implicit killed $eflags, debug-location !459; cg.c:314:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %231:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%231
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %231:gr32 = nsw SUB32rm %231:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !456 :: (dereferenceable load 4 from @firstcol); cg.c:314:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%231
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%231
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %231:gr32 = nsw INC32r %231:gr32(tied-def 0), implicit-def dead $eflags, debug-location !457; cg.c:314:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%231
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%231
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %231:gr32, implicit-def $eflags, debug-location !458 :: (dereferenceable load 4 from %ir.j); cg.c:314:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%231
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.50, 13, implicit killed $eflags, debug-location !459; cg.c:314:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %231:gr32, implicit-def $eflags, debug-location !458 :: (dereferenceable load 4 from %ir.j); cg.c:314:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %231:gr32 = nsw INC32r %231:gr32(tied-def 0), implicit-def dead $eflags, debug-location !457; cg.c:314:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %231:gr32 = nsw SUB32rm %231:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !456 :: (dereferenceable load 4 from @firstcol); cg.c:314:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %231:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %231:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
SU(1):   %231:gr32 = nsw SUB32rm %231:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !456 :: (dereferenceable load 4 from @firstcol); cg.c:314:33
SU(2):   %231:gr32 = nsw INC32r %231:gr32(tied-def 0), implicit-def dead $eflags, debug-location !457; cg.c:314:44
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %231:gr32, implicit-def $eflags, debug-location !458 :: (dereferenceable load 4 from %ir.j); cg.c:314:23

********** MI Scheduling **********
main:%bb.49 for.body149
  From: %237:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
    To: JMP_1 %bb.48, debug-location !469; cg.c:314:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %237:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%237
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(1):   %343:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=4 Reg=%343
    SU(3): Data Latency=4 Reg=%343
    SU(2): Data Latency=4 Reg=%343
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %237:fr64 = MULSDrm %237:fr64(tied-def 0), %199:gr64, 8, %343:gr64_nosp, 0, $noreg, debug-location !464 :: (load 8 from %ir.arrayidx151); cg.c:315:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%343
    SU(0): Data Latency=4 Reg=%237
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%237
  Single Issue       : false;
SU(3):   MOVSDmr %198:gr64, 8, %343:gr64_nosp, 0, $noreg, %237:fr64, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%237
    SU(1): Data Latency=4 Reg=%343
  Single Issue       : false;
SU(4):   %239:gr32 = LEA64_32r %343:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !468; cg.c:314:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%343
  Successors:
    SU(5): Data Latency=1 Reg=%239
  Single Issue       : false;
SU(5):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %239:gr32, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%239
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.48, debug-location !469; cg.c:314:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %239:gr32, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %239:gr32 = LEA64_32r %343:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !468; cg.c:314:50
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %198:gr64, 8, %343:gr64_nosp, 0, $noreg, %237:fr64, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %237:fr64 = MULSDrm %237:fr64(tied-def 0), %199:gr64, 8, %343:gr64_nosp, 0, $noreg, debug-location !464 :: (load 8 from %ir.arrayidx151); cg.c:315:31
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %343:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %237:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %237:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
SU(1):   %343:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
SU(2):   %237:fr64 = MULSDrm %237:fr64(tied-def 0), %199:gr64, 8, %343:gr64_nosp, 0, $noreg, debug-location !464 :: (load 8 from %ir.arrayidx151); cg.c:315:31
SU(3):   MOVSDmr %198:gr64, 8, %343:gr64_nosp, 0, $noreg, %237:fr64, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
SU(4):   %239:gr32 = LEA64_32r %343:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !468; cg.c:314:50
SU(5):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %239:gr32, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50

********** MI Scheduling **********
main:%bb.51 for.end160
  From: %88:gr64 = MOV64ri 4457293557087583675
    To: JCC_1 %bb.55, 4, implicit killed $eflags, debug-location !484; cg.c:332:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %88:gr64 = MOV64ri 4457293557087583675
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%88
  Single Issue       : false;
SU(1):   MOV64mr %stack.17.epsilon, 1, $noreg, 0, $noreg, %88:gr64, debug-location !480 :: (store 8 into %ir.epsilon); cg.c:331:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%88
  Single Issue       : false;
SU(2):   CMP8mi %stack.14.Class, 1, $noreg, 0, $noreg, 85, implicit-def $eflags, debug-location !483 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.55, 4, implicit killed $eflags, debug-location !484; cg.c:332:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) CMP8mi %stack.14.Class, 1, $noreg, 0, $noreg, 85, implicit-def $eflags, debug-location !483 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:15
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.17.epsilon, 1, $noreg, 0, $noreg, %88:gr64, debug-location !480 :: (store 8 into %ir.epsilon); cg.c:331:13
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %88:gr64 = MOV64ri 4457293557087583675
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %88:gr64 = MOV64ri 4457293557087583675
SU(1):   MOV64mr %stack.17.epsilon, 1, $noreg, 0, $noreg, %88:gr64, debug-location !480 :: (store 8 into %ir.epsilon); cg.c:331:13
SU(2):   CMP8mi %stack.14.Class, 1, $noreg, 0, $noreg, 85, implicit-def $eflags, debug-location !483 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:15

********** MI Scheduling **********
main:%bb.51 for.end160
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_12__Benchmark, $noreg, debug-location !479; cg.c:329:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !479; cg.c:329:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_12__Benchmark, $noreg, debug-location !479; cg.c:329:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !479; cg.c:329:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !479; cg.c:329:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !479; cg.c:329:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_12__Benchmark, $noreg, debug-location !479; cg.c:329:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_12__Benchmark, $noreg, debug-location !479; cg.c:329:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !479; cg.c:329:5

********** MI Scheduling **********
main:%bb.51 for.end160
  From: %83:fr64 = COPY killed $xmm0, debug-location !477; cg.c:327:9
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !479; cg.c:329:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %83:fr64 = COPY killed $xmm0, debug-location !477; cg.c:327:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%83
  Single Issue       : false;
SU(1):   MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %83:fr64, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%83
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !479; cg.c:329:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %83:fr64, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %83:fr64 = COPY killed $xmm0, debug-location !477; cg.c:327:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %83:fr64 = COPY killed $xmm0, debug-location !477; cg.c:327:9
SU(1):   MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %83:fr64, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7

********** MI Scheduling **********
main:%bb.52 if.then169
  From: %101:vr128 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
    To: JCC_1 %bb.54, 2, implicit killed $eflags, debug-location !497; cg.c:334:13
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %101:vr128 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(2): Data Latency=4 Reg=%101
    SU(2): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %98:fr64 = MOVSDrm_alt %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, debug-location !487 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(4): Data Latency=4 Reg=%98
    SU(2): Data Latency=4 Reg=%98
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(2):   %101:vr128 = SUBSDrr %101:vr128(tied-def 0), %98:fr64, debug-location !488; cg.c:333:25
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(1): Data Latency=4 Reg=%98
    SU(0): Data Latency=4 Reg=%101
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%101
    SU(3): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   %101:vr128 = PANDrm %101:vr128(tied-def 0), $rip, 1, $noreg, %const.1, $noreg, debug-location !489 :: (load 16 from constant-pool); cg.c:333:15
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(2): Data Latency=1 Reg=%101
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%101
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %101:vr128 = DIVSDrr %101:vr128(tied-def 0), %98:fr64, debug-location !491; cg.c:333:46
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(3): Data Latency=4 Reg=%101
    SU(3): Out  Latency=0
    SU(1): Data Latency=4 Reg=%98
  Successors:
    SU(7): Data Latency=10 Reg=%101
    SU(5): Data Latency=10 Reg=%101
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(5):   MOVSDmr %stack.18.err, 1, $noreg, 0, $noreg, %101:vr128, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(4): Data Latency=10 Reg=%101
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %104:fr64 = MOVSDrm_alt %stack.17.epsilon, 1, $noreg, 0, $noreg, debug-location !495 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=%104
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(7):   UCOMISDrr %104:fr64, %101:vr128, implicit-def $eflags, debug-location !496; cg.c:334:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 1
  Predecessors:
    SU(4): Data Latency=10 Reg=%101
    SU(6): Data Latency=4 Reg=%104
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : FR32 2    FR32X 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.54, 2, implicit killed $eflags, debug-location !497; cg.c:334:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 20
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) UCOMISDrr %104:fr64, %101:vr128, implicit-def $eflags, debug-location !496; cg.c:334:17
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %104
  UpdateRegP: SU(7) UCOMISDrr %104:fr64, %101:vr128, implicit-def $eflags, debug-location !496; cg.c:334:17
              to FR32 1    FR32X 1
  LiveReg: %101
  UpdateRegP: SU(5) MOVSDmr %stack.18.err, 1, $noreg, 0, $noreg, %101:vr128, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13
              to 
  UpdateRegP: SU(7) UCOMISDrr %104:fr64, %101:vr128, implicit-def $eflags, debug-location !496; cg.c:334:17
              to 
  Ready @1c
  BotQ.A TopLatency SU(7) 19c
  BotQ.A BotLatency SU(7) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %104:fr64 = MOVSDrm_alt %stack.17.epsilon, 1, $noreg, 0, $noreg, debug-location !495 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
Bottom Pressure:
FR32=1
FR32X=1
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.18.err, 1, $noreg, 0, $noreg, %101:vr128, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13
Bottom Pressure:
FR32=1
FR32X=1
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %101:vr128 = DIVSDrr %101:vr128(tied-def 0), %98:fr64, debug-location !491; cg.c:333:46
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %101
  UpdateRegP: SU(4) %101:vr128 = DIVSDrr %101:vr128(tied-def 0), %98:fr64, debug-location !491; cg.c:333:46
              to 
  LiveReg: %98
  UpdateRegP: SU(2) %101:vr128 = SUBSDrr %101:vr128(tied-def 0), %98:fr64, debug-location !488; cg.c:333:25
              to 
  UpdateRegP: SU(4) %101:vr128 = DIVSDrr %101:vr128(tied-def 0), %98:fr64, debug-location !491; cg.c:333:46
              to FR32 -1    FR32X -1
  Ready @11c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %101:vr128 = PANDrm %101:vr128(tied-def 0), $rip, 1, $noreg, %const.1, $noreg, debug-location !489 :: (load 16 from constant-pool); cg.c:333:15
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %101
  UpdateRegP: SU(3) %101:vr128 = PANDrm %101:vr128(tied-def 0), $rip, 1, $noreg, %const.1, $noreg, debug-location !489 :: (load 16 from constant-pool); cg.c:333:15
              to FR32 -1    FR32X -1
  Ready @15c
  BotQ.A BotLatency SU(3) 15c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %101:vr128 = SUBSDrr %101:vr128(tied-def 0), %98:fr64, debug-location !488; cg.c:333:25
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %101
  UpdateRegP: SU(2) %101:vr128 = SUBSDrr %101:vr128(tied-def 0), %98:fr64, debug-location !488; cg.c:333:25
              to FR32 -1    FR32X -1
  Ready @16c
  BotQ.A BotLatency SU(2) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %98:fr64 = MOVSDrm_alt %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, debug-location !487 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
Bottom Pressure:
FR32=1
FR32X=1
  Ready @20c
  BotQ.A BotLatency SU(1) 20c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %101:vr128 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
Bottom Pressure:

  Ready @20c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %101:vr128 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
SU(1):   %98:fr64 = MOVSDrm_alt %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, debug-location !487 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
SU(2):   %101:vr128 = SUBSDrr %101:vr128(tied-def 0), %98:fr64, debug-location !488; cg.c:333:25
SU(3):   %101:vr128 = PANDrm %101:vr128(tied-def 0), $rip, 1, $noreg, %const.1, $noreg, debug-location !489 :: (load 16 from constant-pool); cg.c:333:15
SU(4):   %101:vr128 = DIVSDrr %101:vr128(tied-def 0), %98:fr64, debug-location !491; cg.c:333:46
SU(5):   MOVSDmr %stack.18.err, 1, $noreg, 0, $noreg, %101:vr128, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13
SU(6):   %104:fr64 = MOVSDrm_alt %stack.17.epsilon, 1, $noreg, 0, $noreg, debug-location !495 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
SU(7):   UCOMISDrr %104:fr64, %101:vr128, implicit-def $eflags, debug-location !496; cg.c:334:17

********** MI Scheduling **********
main:%bb.53 if.then174
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_15__Error_is_, $noreg, debug-location !504; cg.c:338:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !504; cg.c:338:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_15__Error_is_, $noreg, debug-location !504; cg.c:338:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %125:fr64, debug-location !504; cg.c:338:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !504; cg.c:338:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !504; cg.c:338:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !504; cg.c:338:13
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %125:fr64, debug-location !504; cg.c:338:13
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_15__Error_is_, $noreg, debug-location !504; cg.c:338:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_15__Error_is_, $noreg, debug-location !504; cg.c:338:13
SU(1):   $xmm0 = COPY %125:fr64, debug-location !504; cg.c:338:13
SU(2):   $al = MOV8ri 1, debug-location !504; cg.c:338:13

********** MI Scheduling **********
main:%bb.53 if.then174
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_14__Zeta_is__, $noreg, debug-location !502; cg.c:337:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !502; cg.c:337:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_14__Zeta_is__, $noreg, debug-location !502; cg.c:337:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %121:fr64, debug-location !502; cg.c:337:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !502; cg.c:337:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !502; cg.c:337:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !502; cg.c:337:13
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %121:fr64, debug-location !502; cg.c:337:13
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_14__Zeta_is__, $noreg, debug-location !502; cg.c:337:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_14__Zeta_is__, $noreg, debug-location !502; cg.c:337:13
SU(1):   $xmm0 = COPY %121:fr64, debug-location !502; cg.c:337:13
SU(2):   $al = MOV8ri 1, debug-location !502; cg.c:337:13

********** MI Scheduling **********
main:%bb.53 if.then174
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_13__VERIFICAT, $noreg, debug-location !500; cg.c:336:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !500; cg.c:336:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_13__VERIFICAT, $noreg, debug-location !500; cg.c:336:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !500; cg.c:336:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !500; cg.c:336:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !500; cg.c:336:13
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_13__VERIFICAT, $noreg, debug-location !500; cg.c:336:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_13__VERIFICAT, $noreg, debug-location !500; cg.c:336:13
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !500; cg.c:336:13

********** MI Scheduling **********
main:%bb.53 if.then174
  From: %116:gr32 = MOV32ri 1
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !500; cg.c:336:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %116:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%116
  Single Issue       : false;
SU(1):   MOV32mr %stack.15.verified, 1, $noreg, 0, $noreg, %116:gr32, debug-location !498 :: (store 4 into %ir.verified); cg.c:335:22
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%116
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !500; cg.c:336:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.15.verified, 1, $noreg, 0, $noreg, %116:gr32, debug-location !498 :: (store 4 into %ir.verified); cg.c:335:22
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %116:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %116:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.15.verified, 1, $noreg, 0, $noreg, %116:gr32, debug-location !498 :: (store 4 into %ir.verified); cg.c:335:22

********** MI Scheduling **********
main:%bb.54 if.else178
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_18__The_corre, $noreg, debug-location !512; cg.c:344:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !512; cg.c:344:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_18__The_corre, $noreg, debug-location !512; cg.c:344:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %113:fr64, debug-location !512; cg.c:344:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !512; cg.c:344:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !512; cg.c:344:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !512; cg.c:344:13
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %113:fr64, debug-location !512; cg.c:344:13
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_18__The_corre, $noreg, debug-location !512; cg.c:344:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_18__The_corre, $noreg, debug-location !512; cg.c:344:13
SU(1):   $xmm0 = COPY %113:fr64, debug-location !512; cg.c:344:13
SU(2):   $al = MOV8ri 1, debug-location !512; cg.c:344:13

********** MI Scheduling **********
main:%bb.54 if.else178
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_17__Zeta_____, $noreg, debug-location !510; cg.c:343:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !510; cg.c:343:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_17__Zeta_____, $noreg, debug-location !510; cg.c:343:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %109:fr64, debug-location !510; cg.c:343:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !510; cg.c:343:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !510; cg.c:343:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !510; cg.c:343:13
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %109:fr64, debug-location !510; cg.c:343:13
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_17__Zeta_____, $noreg, debug-location !510; cg.c:343:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_17__Zeta_____, $noreg, debug-location !510; cg.c:343:13
SU(1):   $xmm0 = COPY %109:fr64, debug-location !510; cg.c:343:13
SU(2):   $al = MOV8ri 1, debug-location !510; cg.c:343:13

********** MI Scheduling **********
main:%bb.54 if.else178
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_16__VERIFICAT, $noreg, debug-location !508; cg.c:342:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !508; cg.c:342:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_16__VERIFICAT, $noreg, debug-location !508; cg.c:342:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !508; cg.c:342:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !508; cg.c:342:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !508; cg.c:342:13
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_16__VERIFICAT, $noreg, debug-location !508; cg.c:342:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_16__VERIFICAT, $noreg, debug-location !508; cg.c:342:13
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !508; cg.c:342:13

********** MI Scheduling **********
main:%bb.55 if.else183
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_20__NO_VERIFI, $noreg, debug-location !516; cg.c:350:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !516; cg.c:350:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_20__NO_VERIFI, $noreg, debug-location !516; cg.c:350:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !516; cg.c:350:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !516; cg.c:350:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !516; cg.c:350:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_20__NO_VERIFI, $noreg, debug-location !516; cg.c:350:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_20__NO_VERIFI, $noreg, debug-location !516; cg.c:350:9
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !516; cg.c:350:9

********** MI Scheduling **********
main:%bb.55 if.else183
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_19__Problem_s, $noreg, debug-location !515; cg.c:349:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !515; cg.c:349:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_19__Problem_s, $noreg, debug-location !515; cg.c:349:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !515; cg.c:349:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !515; cg.c:349:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !515; cg.c:349:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_19__Problem_s, $noreg, debug-location !515; cg.c:349:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_19__Problem_s, $noreg, debug-location !515; cg.c:349:9
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !515; cg.c:349:9

********** MI Scheduling **********
main:%bb.56 if.end186
  From: %128:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
    To: JCC_1 %bb.57, 5, implicit $eflags, debug-location !520; cg.c:353:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %128:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%128
  Single Issue       : false;
SU(1):   %129:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%129
  Single Issue       : false;
SU(2):   UCOMISDrr %128:fr64, %129:fr64, implicit-def $eflags, debug-location !520; cg.c:353:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%129
    SU(0): Data Latency=4 Reg=%128
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.57, 5, implicit $eflags, debug-location !520; cg.c:353:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) UCOMISDrr %128:fr64, %129:fr64, implicit-def $eflags, debug-location !520; cg.c:353:9
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %129:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %128:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.56 ***
SU(0):   %128:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
SU(1):   %129:fr64 = FsFLD0SD
SU(2):   UCOMISDrr %128:fr64, %129:fr64, implicit-def $eflags, debug-location !520; cg.c:353:9

********** MI Scheduling **********
main:%bb.57 if.then189
  From: %132:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
    To: JMP_1 %bb.59, debug-location !526; cg.c:358:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %132:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(1): Data Latency=4 Reg=%132
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %132:fr64 = DIVSDrm %132:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !523 :: (dereferenceable load 8 from %ir.t); cg.c:356:73
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%132
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%132
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %132:fr64 = DIVSDrm %132:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !524 :: (load 8 from constant-pool); cg.c:357:20
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%132
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%132
  Single Issue       : false;
SU(3):   MOVSDmr %stack.12.mflops, 1, $noreg, 0, $noreg, %132:fr64, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%132
  Single Issue       : false;
ExitSU:   JMP_1 %bb.59, debug-location !526; cg.c:358:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.12.mflops, 1, $noreg, 0, $noreg, %132:fr64, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16
  Ready @0c
  BotQ.A TopLatency SU(3) 12c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %132:fr64 = DIVSDrm %132:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !524 :: (load 8 from constant-pool); cg.c:357:20
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %132:fr64 = DIVSDrm %132:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !523 :: (dereferenceable load 8 from %ir.t); cg.c:356:73
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %132:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %132:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(1):   %132:fr64 = DIVSDrm %132:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !523 :: (dereferenceable load 8 from %ir.t); cg.c:356:73
SU(2):   %132:fr64 = DIVSDrm %132:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !524 :: (load 8 from constant-pool); cg.c:357:20
SU(3):   MOVSDmr %stack.12.mflops, 1, $noreg, 0, $noreg, %132:fr64, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16

********** MI Scheduling **********
main:%bb.59 if.end193
  From: %138:gr64 = LEA64r $rip, 1, $noreg, @cg__str_31_randdp_, $noreg, debug-location !533; cg.c:363:5
    To: CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !533; cg.c:363:5
 RegionInstrs: 29
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=4
GR16=12
Live In: %136 %135 %133 %137 
Live Out: %136 %135 %133 %137 
Live Thru: FR32=2
FR32X=2
GR16=4
  LiveReg: %136
  UpdateRegP: SU(28) $xmm1 = COPY %136:fr64, debug-location !533; cg.c:363:5
              to FR32 -1    FR32X -1
  LiveReg: %135
  UpdateRegP: SU(27) $xmm0 = COPY %135:fr64, debug-location !533; cg.c:363:5
              to FR32 -1    FR32X -1
  LiveReg: %133
  UpdateRegP: SU(22) $esi = COPY %133:gr32, debug-location !533; cg.c:363:5
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  LiveReg: %137
  UpdateRegP: SU(18) MOV32mr $rsp, 1, $noreg, 8, $noreg, %137:gr32, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
              to 
Top Pressure:
FR32=2
FR32X=2
GR16=4
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=4
GR16=12
Excess PSets: 
SU(0):   %138:gr64 = LEA64r $rip, 1, $noreg, @cg__str_31_randdp_, $noreg, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%138
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV64mr $rsp, 1, $noreg, 80, $noreg, %138:gr64, debug-location !533 :: (store 8 into stack + 80); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%138
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %140:gr64 = LEA64r $rip, 1, $noreg, @cg__str_30__O3__mcmod, $noreg, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%140
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr $rsp, 1, $noreg, 72, $noreg, %140:gr64, debug-location !533 :: (store 8 into stack + 72); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%140
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %141:gr64 = LEA64r $rip, 1, $noreg, @cg__str_29__g__Wall__, $noreg, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%141
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr $rsp, 1, $noreg, 64, $noreg, %141:gr64, debug-location !533 :: (store 8 into stack + 64); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%141
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %142:gr64 = LEA64r $rip, 1, $noreg, @cg__str_28__I___commo, $noreg, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%142
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr $rsp, 1, $noreg, 56, $noreg, %142:gr64, debug-location !533 :: (store 8 into stack + 56); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%142
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %143:gr64 = LEA64r $rip, 1, $noreg, @cg__str_27__lm_, $noreg, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%143
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %143:gr64, debug-location !533 :: (store 8 into stack + 48); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%143
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %144:gr64 = LEA64r $rip, 1, $noreg, @cg__str_26___CC__, $noreg, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%144
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %144:gr64, debug-location !533 :: (store 8 into stack + 40); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%144
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %145:gr64 = LEA64r $rip, 1, $noreg, @cg__str_25_gcc_, $noreg, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%145
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %145:gr64, debug-location !533 :: (store 8 into stack + 32); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%145
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %146:gr64 = LEA64r $rip, 1, $noreg, @cg__str_24_03_Nov_201, $noreg, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%146
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %146:gr64, debug-location !533 :: (store 8 into stack + 24); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%146
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %147:gr64 = LEA64r $rip, 1, $noreg, @cg__str_23_3_3_1_, $noreg, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%147
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(17):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %147:gr64, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%147
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %137:gr32, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %148:gr64 = LEA64r $rip, 1, $noreg, @cg__str_22___________, $noreg, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%148
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(20):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %148:gr64, debug-location !533 :: (store 8 into stack); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%148
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_21_CG_, $noreg, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(22):   $esi = COPY %133:gr32, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  Single Issue       : false;
SU(23):   $edx = MOV32ri 75000, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Single Issue       : false;
SU(24):   $ecx = MOV32ri 0, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  Single Issue       : false;
SU(25):   $r8d = MOV32r0 implicit-def dead $eflags, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(26):   $r9d = MOV32ri 75, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(27):   $xmm0 = COPY %135:fr64, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(28):   $xmm1 = COPY %136:fr64, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !533; cg.c:363:5
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=1 Artificial
    SU(25): Ord  Latency=1 Artificial
    SU(24): Ord  Latency=1 Artificial
    SU(23): Ord  Latency=1 Artificial
    SU(22): Ord  Latency=0 Artificial
    SU(21): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 28 27 26 25 24 23 22 21 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(28) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(28) $xmm1 = COPY %136:fr64, debug-location !533; cg.c:363:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=3
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=3
GR16=12
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 27 26 25 24 23 22 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(27) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(27) $xmm0 = COPY %135:fr64, debug-location !533; cg.c:363:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=12
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 26 25 24 23 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) $r9d = MOV32ri 75, debug-location !533; cg.c:363:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
FR32X=2
GR16=11
  Ready @1c
  BotQ.A BotLatency SU(26) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 25 24 
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) $r8d = MOV32r0 implicit-def dead $eflags, debug-location !533; cg.c:363:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
FR32X=2
GR16=10
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 24 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) $ecx = MOV32ri 0, debug-location !533; cg.c:363:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
FR32X=2
GR16=8
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 23 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) $edx = MOV32ri 75000, debug-location !533; cg.c:363:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=2
GR16=6
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 22 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(22) $esi = COPY %133:gr32, debug-location !533; cg.c:363:5
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
FR32X=2
GR16=5
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 21 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) $rdi = LEA64r $rip, 1, $noreg, @cg__str_21_CG_, $noreg, debug-location !533; cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) MOV64mr $rsp, 1, $noreg, 0, $noreg, %148:gr64, debug-location !533 :: (store 8 into stack); cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %148
  UpdateRegP: SU(20) MOV64mr $rsp, 1, $noreg, 0, $noreg, %148:gr64, debug-location !533 :: (store 8 into stack); cg.c:363:5
              to 
  Ready @1c
  BotQ.A TopLatency SU(20) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 
  Cand SU(1) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %148:gr64 = LEA64r $rip, 1, $noreg, @cg__str_22___________, $noreg, debug-location !533; cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 
  Cand SU(1) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) MOV32mr $rsp, 1, $noreg, 8, $noreg, %137:gr32, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 17 15 13 11 9 7 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) MOV64mr $rsp, 1, $noreg, 16, $noreg, %147:gr64, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %147
  UpdateRegP: SU(17) MOV64mr $rsp, 1, $noreg, 16, $noreg, %147:gr64, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
              to 
  Ready @2c
  BotQ.A TopLatency SU(17) 1c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 15 13 11 9 7 16 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %147:gr64 = LEA64r $rip, 1, $noreg, @cg__str_23_3_3_1_, $noreg, debug-location !533; cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 15 13 11 9 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV64mr $rsp, 1, $noreg, 24, $noreg, %146:gr64, debug-location !533 :: (store 8 into stack + 24); cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %146
  UpdateRegP: SU(15) MOV64mr $rsp, 1, $noreg, 24, $noreg, %146:gr64, debug-location !533 :: (store 8 into stack + 24); cg.c:363:5
              to 
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 13 11 9 14 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %146:gr64 = LEA64r $rip, 1, $noreg, @cg__str_24_03_Nov_201, $noreg, debug-location !533; cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @3c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 13 11 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mr $rsp, 1, $noreg, 32, $noreg, %145:gr64, debug-location !533 :: (store 8 into stack + 32); cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %145
  UpdateRegP: SU(13) MOV64mr $rsp, 1, $noreg, 32, $noreg, %145:gr64, debug-location !533 :: (store 8 into stack + 32); cg.c:363:5
              to 
  Ready @3c
  BotQ.A TopLatency SU(13) 1c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 11 12 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %145:gr64 = LEA64r $rip, 1, $noreg, @cg__str_25_gcc_, $noreg, debug-location !533; cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @4c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 11 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr $rsp, 1, $noreg, 40, $noreg, %144:gr64, debug-location !533 :: (store 8 into stack + 40); cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %144
  UpdateRegP: SU(11) MOV64mr $rsp, 1, $noreg, 40, $noreg, %144:gr64, debug-location !533 :: (store 8 into stack + 40); cg.c:363:5
              to 
  Ready @3c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 10 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %144:gr64 = LEA64r $rip, 1, $noreg, @cg__str_26___CC__, $noreg, debug-location !533; cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @4c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mr $rsp, 1, $noreg, 48, $noreg, %143:gr64, debug-location !533 :: (store 8 into stack + 48); cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %143
  UpdateRegP: SU(9) MOV64mr $rsp, 1, $noreg, 48, $noreg, %143:gr64, debug-location !533 :: (store 8 into stack + 48); cg.c:363:5
              to 
  Ready @4c
  BotQ.A TopLatency SU(9) 1c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 8 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %143:gr64 = LEA64r $rip, 1, $noreg, @cg__str_27__lm_, $noreg, debug-location !533; cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @5c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr $rsp, 1, $noreg, 56, $noreg, %142:gr64, debug-location !533 :: (store 8 into stack + 56); cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %142
  UpdateRegP: SU(7) MOV64mr $rsp, 1, $noreg, 56, $noreg, %142:gr64, debug-location !533 :: (store 8 into stack + 56); cg.c:363:5
              to 
  Ready @4c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 6 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %142:gr64 = LEA64r $rip, 1, $noreg, @cg__str_28__I___commo, $noreg, debug-location !533; cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @5c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr $rsp, 1, $noreg, 64, $noreg, %141:gr64, debug-location !533 :: (store 8 into stack + 64); cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %141
  UpdateRegP: SU(5) MOV64mr $rsp, 1, $noreg, 64, $noreg, %141:gr64, debug-location !533 :: (store 8 into stack + 64); cg.c:363:5
              to 
  Ready @5c
  BotQ.A TopLatency SU(5) 1c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %141:gr64 = LEA64r $rip, 1, $noreg, @cg__str_29__g__Wall__, $noreg, debug-location !533; cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @6c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr $rsp, 1, $noreg, 72, $noreg, %140:gr64, debug-location !533 :: (store 8 into stack + 72); cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %140
  UpdateRegP: SU(3) MOV64mr $rsp, 1, $noreg, 72, $noreg, %140:gr64, debug-location !533 :: (store 8 into stack + 72); cg.c:363:5
              to 
  Ready @5c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %140:gr64 = LEA64r $rip, 1, $noreg, @cg__str_30__O3__mcmod, $noreg, debug-location !533; cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @6c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $rsp, 1, $noreg, 80, $noreg, %138:gr64, debug-location !533 :: (store 8 into stack + 80); cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %138
  UpdateRegP: SU(1) MOV64mr $rsp, 1, $noreg, 80, $noreg, %138:gr64, debug-location !533 :: (store 8 into stack + 80); cg.c:363:5
              to 
  Ready @6c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %138:gr64 = LEA64r $rip, 1, $noreg, @cg__str_31_randdp_, $noreg, debug-location !533; cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @7c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %138:gr64 = LEA64r $rip, 1, $noreg, @cg__str_31_randdp_, $noreg, debug-location !533; cg.c:363:5
SU(1):   MOV64mr $rsp, 1, $noreg, 80, $noreg, %138:gr64, debug-location !533 :: (store 8 into stack + 80); cg.c:363:5
SU(2):   %140:gr64 = LEA64r $rip, 1, $noreg, @cg__str_30__O3__mcmod, $noreg, debug-location !533; cg.c:363:5
SU(3):   MOV64mr $rsp, 1, $noreg, 72, $noreg, %140:gr64, debug-location !533 :: (store 8 into stack + 72); cg.c:363:5
SU(4):   %141:gr64 = LEA64r $rip, 1, $noreg, @cg__str_29__g__Wall__, $noreg, debug-location !533; cg.c:363:5
SU(5):   MOV64mr $rsp, 1, $noreg, 64, $noreg, %141:gr64, debug-location !533 :: (store 8 into stack + 64); cg.c:363:5
SU(6):   %142:gr64 = LEA64r $rip, 1, $noreg, @cg__str_28__I___commo, $noreg, debug-location !533; cg.c:363:5
SU(7):   MOV64mr $rsp, 1, $noreg, 56, $noreg, %142:gr64, debug-location !533 :: (store 8 into stack + 56); cg.c:363:5
SU(8):   %143:gr64 = LEA64r $rip, 1, $noreg, @cg__str_27__lm_, $noreg, debug-location !533; cg.c:363:5
SU(9):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %143:gr64, debug-location !533 :: (store 8 into stack + 48); cg.c:363:5
SU(10):   %144:gr64 = LEA64r $rip, 1, $noreg, @cg__str_26___CC__, $noreg, debug-location !533; cg.c:363:5
SU(11):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %144:gr64, debug-location !533 :: (store 8 into stack + 40); cg.c:363:5
SU(12):   %145:gr64 = LEA64r $rip, 1, $noreg, @cg__str_25_gcc_, $noreg, debug-location !533; cg.c:363:5
SU(13):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %145:gr64, debug-location !533 :: (store 8 into stack + 32); cg.c:363:5
SU(14):   %146:gr64 = LEA64r $rip, 1, $noreg, @cg__str_24_03_Nov_201, $noreg, debug-location !533; cg.c:363:5
SU(15):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %146:gr64, debug-location !533 :: (store 8 into stack + 24); cg.c:363:5
SU(16):   %147:gr64 = LEA64r $rip, 1, $noreg, @cg__str_23_3_3_1_, $noreg, debug-location !533; cg.c:363:5
SU(17):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %147:gr64, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
SU(18):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %137:gr32, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
SU(19):   %148:gr64 = LEA64r $rip, 1, $noreg, @cg__str_22___________, $noreg, debug-location !533; cg.c:363:5
SU(20):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %148:gr64, debug-location !533 :: (store 8 into stack); cg.c:363:5
SU(21):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_21_CG_, $noreg, debug-location !533; cg.c:363:5
SU(22):   $esi = COPY %133:gr32, debug-location !533; cg.c:363:5
SU(23):   $edx = MOV32ri 75000, debug-location !533; cg.c:363:5
SU(24):   $ecx = MOV32ri 0, debug-location !533; cg.c:363:5
SU(25):   $r8d = MOV32r0 implicit-def dead $eflags, debug-location !533; cg.c:363:5
SU(26):   $r9d = MOV32ri 75, debug-location !533; cg.c:363:5
SU(27):   $xmm0 = COPY %135:fr64, debug-location !533; cg.c:363:5
SU(28):   $xmm1 = COPY %136:fr64, debug-location !533; cg.c:363:5

********** MI Scheduling **********
main:%bb.59 if.end193
  From: %133:gr32 = MOVSX32rm8 %stack.14.Class, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
    To: ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !533; cg.c:363:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %133:gr32 = MOVSX32rm8 %stack.14.Class, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %135:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !530 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %136:fr64 = MOVSDrm_alt %stack.12.mflops, 1, $noreg, 0, $noreg, debug-location !531 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %137:gr32 = MOV32rm %stack.15.verified, 1, $noreg, 0, $noreg, debug-location !532 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !533; cg.c:363:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %137:gr32 = MOV32rm %stack.15.verified, 1, $noreg, 0, $noreg, debug-location !532 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %136:fr64 = MOVSDrm_alt %stack.12.mflops, 1, $noreg, 0, $noreg, debug-location !531 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %135:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !530 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %133:gr32 = MOVSX32rm8 %stack.14.Class, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %133:gr32 = MOVSX32rm8 %stack.14.Class, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
SU(1):   %135:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !530 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
SU(2):   %136:fr64 = MOVSDrm_alt %stack.12.mflops, 1, $noreg, 0, $noreg, debug-location !531 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
SU(3):   %137:gr32 = MOV32rm %stack.15.verified, 1, $noreg, 0, $noreg, debug-location !532 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47

********** MI Scheduling **********
main:%bb.60 if.then195
  From: %153:fr64 = COPY killed $xmm0, debug-location !537; cg.c:371:16
    To: JCC_1 %bb.62, 5, implicit $eflags, debug-location !543; cg.c:372:13
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %153:fr64 = COPY killed $xmm0, debug-location !537; cg.c:371:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=0 Reg=%153
    SU(1): Data Latency=0 Reg=%153
  Single Issue       : false;
SU(1):   MOVSDmr %stack.13.tmax, 1, $noreg, 0, $noreg, %153:fr64, debug-location !539 :: (store 8 into %ir.tmax); cg.c:371:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%153
  Single Issue       : false;
SU(2):   %154:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=1 Reg=%154
  Single Issue       : false;
SU(3):   UCOMISDrr %153:fr64, %154:fr64, implicit-def $eflags, debug-location !543; cg.c:372:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%154
    SU(0): Data Latency=0 Reg=%153
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.62, 5, implicit $eflags, debug-location !543; cg.c:372:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 2
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) UCOMISDrr %153:fr64, %154:fr64, implicit-def $eflags, debug-location !543; cg.c:372:13
  Ready @1c
  BotQ.A TopLatency SU(3) 1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %154:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.13.tmax, 1, $noreg, 0, $noreg, %153:fr64, debug-location !539 :: (store 8 into %ir.tmax); cg.c:371:14
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %153:fr64 = COPY killed $xmm0, debug-location !537; cg.c:371:16
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   %153:fr64 = COPY killed $xmm0, debug-location !537; cg.c:371:16
SU(1):   MOVSDmr %stack.13.tmax, 1, $noreg, 0, $noreg, %153:fr64, debug-location !539 :: (store 8 into %ir.tmax); cg.c:371:14
SU(2):   %154:fr64 = FsFLD0SD
SU(3):   UCOMISDrr %153:fr64, %154:fr64, implicit-def $eflags, debug-location !543; cg.c:372:13

********** MI Scheduling **********
main:%bb.61 if.then199
  From: %155:gr64 = MOV64ri 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %155:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%155
  Single Issue       : false;
SU(1):   MOV64mr %stack.13.tmax, 1, $noreg, 0, $noreg, %155:gr64, debug-location !544 :: (store 8 into %ir.tmax); cg.c:373:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%155
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.13.tmax, 1, $noreg, 0, $noreg, %155:gr64, debug-location !544 :: (store 8 into %ir.tmax); cg.c:373:18
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %155:gr64 = MOV64ri 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.61 ***
SU(0):   %155:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr %stack.13.tmax, 1, $noreg, 0, $noreg, %155:gr64, debug-location !544 :: (store 8 into %ir.tmax); cg.c:373:18

********** MI Scheduling **********
main:%bb.62 if.end200
  From: MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %185:gr64 = LEA64r %stack.19.t_names, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %326:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %326:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %185:gr64 = LEA64r %stack.19.t_names, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
SU(1):   %185:gr64 = LEA64r %stack.19.t_names, 1, $noreg, 0, $noreg
SU(2):   %326:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
main:%bb.62 if.end200
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_32___SECTION_, $noreg, debug-location !546; cg.c:374:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !546; cg.c:374:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_32___SECTION_, $noreg, debug-location !546; cg.c:374:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !546; cg.c:374:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !546; cg.c:374:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !546; cg.c:374:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_32___SECTION_, $noreg, debug-location !546; cg.c:374:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_32___SECTION_, $noreg, debug-location !546; cg.c:374:9
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !546; cg.c:374:9

********** MI Scheduling **********
main:%bb.64 for.body205
  From: %164:fr64 = COPY killed $xmm0, debug-location !556; cg.c:376:17
    To: JCC_1 %bb.66, 5, implicit killed $eflags, debug-location !561; cg.c:377:17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %164:fr64 = COPY killed $xmm0, debug-location !556; cg.c:376:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%164
  Single Issue       : false;
SU(1):   MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %164:fr64, debug-location !557 :: (store 8 into %ir.t); cg.c:376:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%164
  Single Issue       : false;
SU(2):   CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !560 :: (dereferenceable load 4 from %ir.i); cg.c:377:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.66, 5, implicit killed $eflags, debug-location !561; cg.c:377:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !560 :: (dereferenceable load 4 from %ir.i); cg.c:377:19
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %164:fr64, debug-location !557 :: (store 8 into %ir.t); cg.c:376:15
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %164:fr64 = COPY killed $xmm0, debug-location !556; cg.c:376:17
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   %164:fr64 = COPY killed $xmm0, debug-location !556; cg.c:376:17
SU(1):   MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %164:fr64, debug-location !557 :: (store 8 into %ir.t); cg.c:376:15
SU(2):   CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !560 :: (dereferenceable load 4 from %ir.i); cg.c:377:19

********** MI Scheduling **********
main:%bb.65 if.then209
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_33____8s__9_3, $noreg, debug-location !566; cg.c:378:17
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !566; cg.c:378:17
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_33____8s__9_3, $noreg, debug-location !566; cg.c:378:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %186:gr64, debug-location !566; cg.c:378:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %187:fr64, debug-location !566; cg.c:378:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !566; cg.c:378:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !566; cg.c:378:17
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !566; cg.c:378:17
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %187:fr64, debug-location !566; cg.c:378:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rsi = COPY %186:gr64, debug-location !566; cg.c:378:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_33____8s__9_3, $noreg, debug-location !566; cg.c:378:17
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_33____8s__9_3, $noreg, debug-location !566; cg.c:378:17
SU(1):   $rsi = COPY %186:gr64, debug-location !566; cg.c:378:17
SU(2):   $xmm0 = COPY %187:fr64, debug-location !566; cg.c:378:17
SU(3):   $al = MOV8ri 1, debug-location !566; cg.c:378:17

********** MI Scheduling **********
main:%bb.65 if.then209
  From: %184:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !566; cg.c:378:17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %184:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%184
  Single Issue       : false;
SU(1):   %186:gr64 = MOV64rm %185:gr64, 8, %184:gr64_nosp, 0, $noreg, debug-location !564 :: (load 8 from %ir.arrayidx211); cg.c:378:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%184
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %187:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !565 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !566; cg.c:378:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %187:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !565 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %186:gr64 = MOV64rm %185:gr64, 8, %184:gr64_nosp, 0, $noreg, debug-location !564 :: (load 8 from %ir.arrayidx211); cg.c:378:41
  Ready @3c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %184:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
  Ready @7c
  BotQ.A BotLatency SU(0) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   %184:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
SU(1):   %186:gr64 = MOV64rm %185:gr64, 8, %184:gr64_nosp, 0, $noreg, debug-location !564 :: (load 8 from %ir.arrayidx211); cg.c:378:41
SU(2):   %187:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !565 :: (dereferenceable load 8 from %ir.t); cg.c:378:53

********** MI Scheduling **********
main:%bb.66 if.else213
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_34____8s__9_3, $noreg, debug-location !576; cg.c:381:17
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !576; cg.c:381:17
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_34____8s__9_3, $noreg, debug-location !576; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %167:gr64, debug-location !576; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %168:fr64, debug-location !576; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %170:fr64, debug-location !576; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2, debug-location !576; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !576; cg.c:381:17
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2, debug-location !576; cg.c:381:17
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %170:fr64, debug-location !576; cg.c:381:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm0 = COPY %168:fr64, debug-location !576; cg.c:381:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rsi = COPY %167:gr64, debug-location !576; cg.c:381:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_34____8s__9_3, $noreg, debug-location !576; cg.c:381:17
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_34____8s__9_3, $noreg, debug-location !576; cg.c:381:17
SU(1):   $rsi = COPY %167:gr64, debug-location !576; cg.c:381:17
SU(2):   $xmm0 = COPY %168:fr64, debug-location !576; cg.c:381:17
SU(3):   $xmm1 = COPY %170:fr64, debug-location !576; cg.c:381:17
SU(4):   $al = MOV8ri 2, debug-location !576; cg.c:381:17

********** MI Scheduling **********
main:%bb.66 if.else213
  From: %165:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !576; cg.c:381:17
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %165:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%165
  Single Issue       : false;
SU(1):   %167:gr64 = MOV64rm %185:gr64, 8, %165:gr64_nosp, 0, $noreg, debug-location !570 :: (load 8 from %ir.arrayidx215); cg.c:381:52
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%165
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %168:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%168
  Single Issue       : false;
SU(3):   %170:fr64 = COPY %168:fr64, debug-location !573; cg.c:382:26
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%168
  Successors:
    SU(4): Data Latency=0 Reg=%170
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %170:fr64 = MULSDrr %170:fr64(tied-def 0), %326:fr64, debug-location !573; cg.c:382:26
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%170
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%170
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %170:fr64 = DIVSDrm %170:fr64(tied-def 0), %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !575 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%170
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !576; cg.c:381:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %170:fr64 = DIVSDrm %170:fr64(tied-def 0), %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !575 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:34
  Ready @3c
  BotQ.A TopLatency SU(5) 5c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %170:fr64 = MULSDrr %170:fr64(tied-def 0), %326:fr64, debug-location !573; cg.c:382:26
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %170:fr64 = COPY %168:fr64, debug-location !573; cg.c:382:26
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %168:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %167:gr64 = MOV64rm %185:gr64, 8, %165:gr64_nosp, 0, $noreg, debug-location !570 :: (load 8 from %ir.arrayidx215); cg.c:381:52
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %165:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   %165:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
SU(1):   %167:gr64 = MOV64rm %185:gr64, 8, %165:gr64_nosp, 0, $noreg, debug-location !570 :: (load 8 from %ir.arrayidx215); cg.c:381:52
SU(2):   %168:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
SU(3):   %170:fr64 = COPY %168:fr64, debug-location !573; cg.c:382:26
SU(4):   %170:fr64 = MULSDrr %170:fr64(tied-def 0), %326:fr64, debug-location !573; cg.c:382:26
SU(5):   %170:fr64 = DIVSDrm %170:fr64(tied-def 0), %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !575 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:34

********** MI Scheduling **********
main:%bb.67 if.then221
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_35__________8, $noreg, debug-location !591; cg.c:385:21
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !591; cg.c:385:21
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_35__________8, $noreg, debug-location !591; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @cg__str_36_rest_, $noreg, debug-location !591; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %177:fr64, debug-location !591; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %179:fr64, debug-location !591; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2, debug-location !591; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !591; cg.c:385:21
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2, debug-location !591; cg.c:385:21
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %179:fr64, debug-location !591; cg.c:385:21
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %177:fr64, debug-location !591; cg.c:385:21
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @cg__str_36_rest_, $noreg, debug-location !591; cg.c:385:21
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_35__________8, $noreg, debug-location !591; cg.c:385:21
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.67 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_35__________8, $noreg, debug-location !591; cg.c:385:21
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @cg__str_36_rest_, $noreg, debug-location !591; cg.c:385:21
SU(2):   $xmm0 = COPY %177:fr64, debug-location !591; cg.c:385:21
SU(3):   $xmm1 = COPY %179:fr64, debug-location !591; cg.c:385:21
SU(4):   $al = MOV8ri 2, debug-location !591; cg.c:385:21

********** MI Scheduling **********
main:%bb.67 if.then221
  From: %176:fr64 = MOVSDrm_alt %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !591; cg.c:385:21
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %176:fr64 = MOVSDrm_alt %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(6): Data Latency=4 Reg=%176
    SU(1): Data Latency=4 Reg=%176
  Single Issue       : false;
SU(1):   %177:fr64 = COPY %176:fr64, debug-location !584; cg.c:384:30
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(0): Data Latency=4 Reg=%176
  Successors:
    SU(2): Data Latency=0 Reg=%177
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %177:fr64 = SUBSDrm %177:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !584 :: (dereferenceable load 8 from %ir.t); cg.c:384:30
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(1): Data Latency=0 Reg=%177
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%177
    SU(3): Data Latency=4 Reg=%177
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %177:fr64, debug-location !585 :: (store 8 into %ir.t); cg.c:384:23
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%177
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %179:fr64 = COPY %177:fr64, debug-location !588; cg.c:386:30
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 10
  Predecessors:
    SU(2): Data Latency=4 Reg=%177
  Successors:
    SU(5): Data Latency=0 Reg=%179
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %179:fr64 = MULSDrr %179:fr64(tied-def 0), %326:fr64, debug-location !588; cg.c:386:30
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 10
  Predecessors:
    SU(4): Data Latency=0 Reg=%179
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%179
    SU(6): Out  Latency=0
  Single Issue       : false;
SU(6):   %179:fr64 = DIVSDrr %179:fr64(tied-def 0), %176:fr64, debug-location !590; cg.c:386:38
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 9
  Height             : 9
  Predecessors:
    SU(5): Data Latency=1 Reg=%179
    SU(5): Out  Latency=0
    SU(0): Data Latency=4 Reg=%176
  Successors:
    ExitSU: Ord  Latency=9 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !591; cg.c:385:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 18
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=9 Artificial
Critical Path(GS-RR ): 18
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %179:fr64 = DIVSDrr %179:fr64(tied-def 0), %176:fr64, debug-location !590; cg.c:386:38
  Ready @9c
  BotQ.A TopLatency SU(6) 9c
  BotQ.A BotLatency SU(6) 9c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %179:fr64 = MULSDrr %179:fr64(tied-def 0), %326:fr64, debug-location !588; cg.c:386:30
  Ready @10c
  BotQ.A BotLatency SU(5) 10c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %179:fr64 = COPY %177:fr64, debug-location !588; cg.c:386:30
  Ready @10c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %177:fr64, debug-location !585 :: (store 8 into %ir.t); cg.c:384:23
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %177:fr64 = SUBSDrm %177:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !584 :: (dereferenceable load 8 from %ir.t); cg.c:384:30
  Ready @14c
  BotQ.A BotLatency SU(2) 14c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %177:fr64 = COPY %176:fr64, debug-location !584; cg.c:384:30
  Ready @14c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %176:fr64 = MOVSDrm_alt %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  Ready @18c
  BotQ.A BotLatency SU(0) 18c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.67 ***
SU(0):   %176:fr64 = MOVSDrm_alt %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
SU(1):   %177:fr64 = COPY %176:fr64, debug-location !584; cg.c:384:30
SU(2):   %177:fr64 = SUBSDrm %177:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !584 :: (dereferenceable load 8 from %ir.t); cg.c:384:30
SU(3):   MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %177:fr64, debug-location !585 :: (store 8 into %ir.t); cg.c:384:23
SU(4):   %179:fr64 = COPY %177:fr64, debug-location !588; cg.c:386:30
SU(5):   %179:fr64 = MULSDrr %179:fr64(tied-def 0), %326:fr64, debug-location !588; cg.c:386:30
SU(6):   %179:fr64 = DIVSDrr %179:fr64(tied-def 0), %176:fr64, debug-location !590; cg.c:386:38

********** INTERVALS **********
DIL [0B,32r:0)[224r,240r:1)[416r,448r:38)[784r,800r:37)[992r,1008r:12)[1280r,1312r:36)[1424r,1472r:35)[1600r,1648r:34)[1760r,1792r:33)[2032r,2064r:32)[2596r,2624r:11)[4384r,4480r:13)[6176r,6192r:10)[6288r,6304r:9)[6448r,6496r:31)[6608r,6624r:8)[7136r,7152r:3)[7328r,7424r:16)[7584r,7600r:2)[8768r,8800r:15)[8960r,9040r:14)[9552r,9568r:7)[9664r,9680r:6)[9856r,9888r:30)[10416r,10448r:24)[10592r,10640r:23)[10768r,10816r:22)[11008r,11040r:27)[11184r,11232r:26)[11360r,11408r:25)[11600r,11632r:29)[11744r,11776r:28)[12640r,12768r:21)[12944r,12960r:5)[13280r,13312r:20)[13648r,13664r:4)[13904r,13968r:17)[14208r,14288r:19)[14576r,14656r:18)  0@0B-phi 1@224r 2@7584r 3@7136r 4@13648r 5@12944r 6@9664r 7@9552r 8@6608r 9@6288r 10@6176r 11@2596r 12@992r 13@4384r 14@8960r 15@8768r 16@7328r 17@13904r 18@14576r 19@14208r 20@13280r 21@12640r 22@10768r 23@10592r 24@10416r 25@11360r 26@11184r 27@11008r 28@11744r 29@11600r 30@9856r 31@6448r 32@2032r 33@1760r 34@1600r 35@1424r 36@1280r 37@784r 38@416r
DIH [0B,32r:0)[224r,240r:1)[416r,448r:38)[784r,800r:37)[992r,1008r:12)[1280r,1312r:36)[1424r,1472r:35)[1600r,1648r:34)[1760r,1792r:33)[2032r,2064r:32)[2596r,2624r:11)[4384r,4480r:13)[6176r,6192r:10)[6288r,6304r:9)[6448r,6496r:31)[6608r,6624r:8)[7136r,7152r:3)[7328r,7424r:16)[7584r,7600r:2)[8768r,8800r:15)[8960r,9040r:14)[9552r,9568r:7)[9664r,9680r:6)[9856r,9888r:30)[10416r,10448r:24)[10592r,10640r:23)[10768r,10816r:22)[11008r,11040r:27)[11184r,11232r:26)[11360r,11408r:25)[11600r,11632r:29)[11744r,11776r:28)[12640r,12768r:21)[12944r,12960r:5)[13280r,13312r:20)[13648r,13664r:4)[13904r,13968r:17)[14208r,14288r:19)[14576r,14656r:18)  0@0B-phi 1@224r 2@7584r 3@7136r 4@13648r 5@12944r 6@9664r 7@9552r 8@6608r 9@6288r 10@6176r 11@2596r 12@992r 13@4384r 14@8960r 15@8768r 16@7328r 17@13904r 18@14576r 19@14208r 20@13280r 21@12640r 22@10768r 23@10592r 24@10416r 25@11360r 26@11184r 27@11008r 28@11744r 29@11600r 30@9856r 31@6448r 32@2032r 33@1760r 34@1600r 35@1424r 36@1280r 37@784r 38@416r
HDI [0B,32r:0)[224r,240r:1)[416r,448r:38)[784r,800r:37)[992r,1008r:12)[1280r,1312r:36)[1424r,1472r:35)[1600r,1648r:34)[1760r,1792r:33)[2032r,2064r:32)[2596r,2624r:11)[4384r,4480r:13)[6176r,6192r:10)[6288r,6304r:9)[6448r,6496r:31)[6608r,6624r:8)[7136r,7152r:3)[7328r,7424r:16)[7584r,7600r:2)[8768r,8800r:15)[8960r,9040r:14)[9552r,9568r:7)[9664r,9680r:6)[9856r,9888r:30)[10416r,10448r:24)[10592r,10640r:23)[10768r,10816r:22)[11008r,11040r:27)[11184r,11232r:26)[11360r,11408r:25)[11600r,11632r:29)[11744r,11776r:28)[12640r,12768r:21)[12944r,12960r:5)[13280r,13312r:20)[13648r,13664r:4)[13904r,13968r:17)[14208r,14288r:19)[14576r,14656r:18)  0@0B-phi 1@224r 2@7584r 3@7136r 4@13648r 5@12944r 6@9664r 7@9552r 8@6608r 9@6288r 10@6176r 11@2596r 12@992r 13@4384r 14@8960r 15@8768r 16@7328r 17@13904r 18@14576r 19@14208r 20@13280r 21@12640r 22@10768r 23@10592r 24@10416r 25@11360r 26@11184r 27@11008r 28@11744r 29@11600r 30@9856r 31@6448r 32@2032r 33@1760r 34@1600r 35@1424r 36@1280r 37@784r 38@416r
SIL [0B,16r:0)[432r,448r:11)[1440r,1472r:5)[1616r,1648r:4)[2600r,2624r:3)[4400r,4480r:6)[7344r,7424r:7)[8976r,9040r:1)[12656r,12768r:2)[13920r,13968r:8)[14224r,14288r:10)[14592r,14656r:9)  0@0B-phi 1@8976r 2@12656r 3@2600r 4@1616r 5@1440r 6@4400r 7@7344r 8@13920r 9@14592r 10@14224r 11@432r
SIH [0B,16r:0)[432r,448r:11)[1440r,1472r:5)[1616r,1648r:4)[2600r,2624r:3)[4400r,4480r:6)[7344r,7424r:7)[8976r,9040r:1)[12656r,12768r:2)[13920r,13968r:8)[14224r,14288r:10)[14592r,14656r:9)  0@0B-phi 1@8976r 2@12656r 3@2600r 4@1616r 5@1440r 6@4400r 7@7344r 8@13920r 9@14592r 10@14224r 11@432r
HSI [0B,16r:0)[432r,448r:11)[1440r,1472r:5)[1616r,1648r:4)[2600r,2624r:3)[4400r,4480r:6)[7344r,7424r:7)[8976r,9040r:1)[12656r,12768r:2)[13920r,13968r:8)[14224r,14288r:10)[14592r,14656r:9)  0@0B-phi 1@8976r 2@12656r 3@2600r 4@1616r 5@1440r 6@4400r 7@7344r 8@13920r 9@14592r 10@14224r 11@432r
SPL [208r,208d:4)[240r,240d:3)[256r,256d:2)[272r,272d:1)[304r,304d:0)[368r,368d:199)[448r,448d:198)[464r,464d:197)[480r,480d:196)[512r,512d:195)[768r,768d:194)[800r,800d:193)[816r,816d:192)[832r,832d:191)[864r,864d:190)[960r,960d:189)[1008r,1008d:188)[1024r,1024d:187)[1040r,1040d:186)[1072r,1072d:185)[1232r,1232d:184)[1312r,1312d:183)[1328r,1328d:182)[1344r,1344d:181)[1376r,1376d:180)[1392r,1392d:179)[1472r,1472d:178)[1488r,1488d:177)[1504r,1504d:176)[1536r,1536d:175)[1552r,1552d:174)[1648r,1648d:173)[1664r,1664d:172)[1680r,1680d:171)[1712r,1712d:170)[1728r,1728d:169)[1792r,1792d:168)[1808r,1808d:167)[1824r,1824d:166)[1856r,1856d:165)[2000r,2000d:164)[2064r,2064d:163)[2080r,2080d:162)[2096r,2096d:161)[2128r,2128d:160)[2272r,2272d:159)[2624r,2624d:158)[2640r,2640d:157)[2656r,2656d:156)[2688r,2688d:155)[4304r,4304d:14)[4480r,4480d:13)[4496r,4496d:12)[4512r,4512d:11)[4544r,4544d:10)[5200r,5200d:9)[5232r,5232d:8)[5248r,5248d:7)[5344r,5344d:6)[5376r,5376d:5)[6144r,6144d:154)[6192r,6192d:153)[6208r,6208d:152)[6224r,6224d:151)[6256r,6256d:150)[6272r,6272d:149)[6304r,6304d:148)[6320r,6320d:147)[6336r,6336d:146)[6368r,6368d:145)[6400r,6400d:144)[6496r,6496d:143)[6512r,6512d:142)[6528r,6528d:141)[6560r,6560d:140)[6576r,6576d:139)[6624r,6624d:138)[6640r,6640d:137)[6656r,6656d:136)[6688r,6688d:135)[7120r,7120d:44)[7152r,7152d:43)[7168r,7168d:42)[7184r,7184d:41)[7216r,7216d:40)[7248r,7248d:39)[7424r,7424d:38)[7440r,7440d:37)[7456r,7456d:36)[7488r,7488d:35)[7568r,7568d:34)[7600r,7600d:33)[7616r,7616d:32)[7632r,7632d:31)[7664r,7664d:30)[8352r,8352d:29)[8384r,8384d:28)[8400r,8400d:27)[8496r,8496d:26)[8528r,8528d:25)[8736r,8736d:24)[8800r,8800d:23)[8816r,8816d:22)[8832r,8832d:21)[8864r,8864d:20)[8944r,8944d:19)[9040r,9040d:18)[9056r,9056d:17)[9072r,9072d:16)[9104r,9104d:15)[9520r,9520d:134)[9568r,9568d:133)[9584r,9584d:132)[9600r,9600d:131)[9632r,9632d:130)[9648r,9648d:129)[9680r,9680d:128)[9696r,9696d:127)[9712r,9712d:126)[9744r,9744d:125)[9792r,9792d:124)[9888r,9888d:123)[9904r,9904d:122)[9920r,9920d:121)[9952r,9952d:120)[10352r,10352d:94)[10448r,10448d:93)[10464r,10464d:92)[10480r,10480d:91)[10512r,10512d:90)[10544r,10544d:89)[10640r,10640d:88)[10656r,10656d:87)[10672r,10672d:86)[10704r,10704d:85)[10736r,10736d:84)[10816r,10816d:83)[10832r,10832d:82)[10848r,10848d:81)[10880r,10880d:80)[10944r,10944d:109)[11040r,11040d:108)[11056r,11056d:107)[11072r,11072d:106)[11104r,11104d:105)[11136r,11136d:104)[11232r,11232d:103)[11248r,11248d:102)[11264r,11264d:101)[11296r,11296d:100)[11328r,11328d:99)[11408r,11408d:98)[11424r,11424d:97)[11440r,11440d:96)[11472r,11472d:95)[11536r,11536d:119)[11632r,11632d:118)[11648r,11648d:117)[11664r,11664d:116)[11696r,11696d:115)[11712r,11712d:114)[11776r,11776d:113)[11792r,11792d:112)[11808r,11808d:111)[11840r,11840d:110)[12224r,12224d:79)[12768r,12768d:78)[12784r,12784d:77)[12800r,12800d:76)[12832r,12832d:75)[12912r,12912d:74)[12960r,12960d:73)[12976r,12976d:72)[12992r,12992d:71)[13024r,13024d:70)[13216r,13216d:69)[13312r,13312d:68)[13328r,13328d:67)[13344r,13344d:66)[13376r,13376d:65)[13632r,13632d:64)[13664r,13664d:63)[13680r,13680d:62)[13696r,13696d:61)[13728r,13728d:60)[13888r,13888d:49)[13968r,13968d:48)[13984r,13984d:47)[14000r,14000d:46)[14032r,14032d:45)[14192r,14192d:59)[14288r,14288d:58)[14304r,14304d:57)[14320r,14320d:56)[14352r,14352d:55)[14560r,14560d:54)[14656r,14656d:53)[14672r,14672d:52)[14688r,14688d:51)[14720r,14720d:50)  0@304r 1@272r 2@256r 3@240r 4@208r 5@5376r 6@5344r 7@5248r 8@5232r 9@5200r 10@4544r 11@4512r 12@4496r 13@4480r 14@4304r 15@9104r 16@9072r 17@9056r 18@9040r 19@8944r 20@8864r 21@8832r 22@8816r 23@8800r 24@8736r 25@8528r 26@8496r 27@8400r 28@8384r 29@8352r 30@7664r 31@7632r 32@7616r 33@7600r 34@7568r 35@7488r 36@7456r 37@7440r 38@7424r 39@7248r 40@7216r 41@7184r 42@7168r 43@7152r 44@7120r 45@14032r 46@14000r 47@13984r 48@13968r 49@13888r 50@14720r 51@14688r 52@14672r 53@14656r 54@14560r 55@14352r 56@14320r 57@14304r 58@14288r 59@14192r 60@13728r 61@13696r 62@13680r 63@13664r 64@13632r 65@13376r 66@13344r 67@13328r 68@13312r 69@13216r 70@13024r 71@12992r 72@12976r 73@12960r 74@12912r 75@12832r 76@12800r 77@12784r 78@12768r 79@12224r 80@10880r 81@10848r 82@10832r 83@10816r 84@10736r 85@10704r 86@10672r 87@10656r 88@10640r 89@10544r 90@10512r 91@10480r 92@10464r 93@10448r 94@10352r 95@11472r 96@11440r 97@11424r 98@11408r 99@11328r 100@11296r 101@11264r 102@11248r 103@11232r 104@11136r 105@11104r 106@11072r 107@11056r 108@11040r 109@10944r 110@11840r 111@11808r 112@11792r 113@11776r 114@11712r 115@11696r 116@11664r 117@11648r 118@11632r 119@11536r 120@9952r 121@9920r 122@9904r 123@9888r 124@9792r 125@9744r 126@9712r 127@9696r 128@9680r 129@9648r 130@9632r 131@9600r 132@9584r 133@9568r 134@9520r 135@6688r 136@6656r 137@6640r 138@6624r 139@6576r 140@6560r 141@6528r 142@6512r 143@6496r 144@6400r 145@6368r 146@6336r 147@6320r 148@6304r 149@6272r 150@6256r 151@6224r 152@6208r 153@6192r 154@6144r 155@2688r 156@2656r 157@2640r 158@2624r 159@2272r 160@2128r 161@2096r 162@2080r 163@2064r 164@2000r 165@1856r 166@1824r 167@1808r 168@1792r 169@1728r 170@1712r 171@1680r 172@1664r 173@1648r 174@1552r 175@1536r 176@1504r 177@1488r 178@1472r 179@1392r 180@1376r 181@1344r 182@1328r 183@1312r 184@1232r 185@1072r 186@1040r 187@1024r 188@1008r 189@960r 190@864r 191@832r 192@816r 193@800r 194@768r 195@512r 196@480r 197@464r 198@448r 199@368r
SPH [208r,208d:4)[240r,240d:3)[256r,256d:2)[272r,272d:1)[304r,304d:0)[368r,368d:199)[448r,448d:198)[464r,464d:197)[480r,480d:196)[512r,512d:195)[768r,768d:194)[800r,800d:193)[816r,816d:192)[832r,832d:191)[864r,864d:190)[960r,960d:189)[1008r,1008d:188)[1024r,1024d:187)[1040r,1040d:186)[1072r,1072d:185)[1232r,1232d:184)[1312r,1312d:183)[1328r,1328d:182)[1344r,1344d:181)[1376r,1376d:180)[1392r,1392d:179)[1472r,1472d:178)[1488r,1488d:177)[1504r,1504d:176)[1536r,1536d:175)[1552r,1552d:174)[1648r,1648d:173)[1664r,1664d:172)[1680r,1680d:171)[1712r,1712d:170)[1728r,1728d:169)[1792r,1792d:168)[1808r,1808d:167)[1824r,1824d:166)[1856r,1856d:165)[2000r,2000d:164)[2064r,2064d:163)[2080r,2080d:162)[2096r,2096d:161)[2128r,2128d:160)[2272r,2272d:159)[2624r,2624d:158)[2640r,2640d:157)[2656r,2656d:156)[2688r,2688d:155)[4304r,4304d:14)[4480r,4480d:13)[4496r,4496d:12)[4512r,4512d:11)[4544r,4544d:10)[5200r,5200d:9)[5232r,5232d:8)[5248r,5248d:7)[5344r,5344d:6)[5376r,5376d:5)[6144r,6144d:154)[6192r,6192d:153)[6208r,6208d:152)[6224r,6224d:151)[6256r,6256d:150)[6272r,6272d:149)[6304r,6304d:148)[6320r,6320d:147)[6336r,6336d:146)[6368r,6368d:145)[6400r,6400d:144)[6496r,6496d:143)[6512r,6512d:142)[6528r,6528d:141)[6560r,6560d:140)[6576r,6576d:139)[6624r,6624d:138)[6640r,6640d:137)[6656r,6656d:136)[6688r,6688d:135)[7120r,7120d:44)[7152r,7152d:43)[7168r,7168d:42)[7184r,7184d:41)[7216r,7216d:40)[7248r,7248d:39)[7424r,7424d:38)[7440r,7440d:37)[7456r,7456d:36)[7488r,7488d:35)[7568r,7568d:34)[7600r,7600d:33)[7616r,7616d:32)[7632r,7632d:31)[7664r,7664d:30)[8352r,8352d:29)[8384r,8384d:28)[8400r,8400d:27)[8496r,8496d:26)[8528r,8528d:25)[8736r,8736d:24)[8800r,8800d:23)[8816r,8816d:22)[8832r,8832d:21)[8864r,8864d:20)[8944r,8944d:19)[9040r,9040d:18)[9056r,9056d:17)[9072r,9072d:16)[9104r,9104d:15)[9520r,9520d:134)[9568r,9568d:133)[9584r,9584d:132)[9600r,9600d:131)[9632r,9632d:130)[9648r,9648d:129)[9680r,9680d:128)[9696r,9696d:127)[9712r,9712d:126)[9744r,9744d:125)[9792r,9792d:124)[9888r,9888d:123)[9904r,9904d:122)[9920r,9920d:121)[9952r,9952d:120)[10352r,10352d:94)[10448r,10448d:93)[10464r,10464d:92)[10480r,10480d:91)[10512r,10512d:90)[10544r,10544d:89)[10640r,10640d:88)[10656r,10656d:87)[10672r,10672d:86)[10704r,10704d:85)[10736r,10736d:84)[10816r,10816d:83)[10832r,10832d:82)[10848r,10848d:81)[10880r,10880d:80)[10944r,10944d:109)[11040r,11040d:108)[11056r,11056d:107)[11072r,11072d:106)[11104r,11104d:105)[11136r,11136d:104)[11232r,11232d:103)[11248r,11248d:102)[11264r,11264d:101)[11296r,11296d:100)[11328r,11328d:99)[11408r,11408d:98)[11424r,11424d:97)[11440r,11440d:96)[11472r,11472d:95)[11536r,11536d:119)[11632r,11632d:118)[11648r,11648d:117)[11664r,11664d:116)[11696r,11696d:115)[11712r,11712d:114)[11776r,11776d:113)[11792r,11792d:112)[11808r,11808d:111)[11840r,11840d:110)[12224r,12224d:79)[12768r,12768d:78)[12784r,12784d:77)[12800r,12800d:76)[12832r,12832d:75)[12912r,12912d:74)[12960r,12960d:73)[12976r,12976d:72)[12992r,12992d:71)[13024r,13024d:70)[13216r,13216d:69)[13312r,13312d:68)[13328r,13328d:67)[13344r,13344d:66)[13376r,13376d:65)[13632r,13632d:64)[13664r,13664d:63)[13680r,13680d:62)[13696r,13696d:61)[13728r,13728d:60)[13888r,13888d:49)[13968r,13968d:48)[13984r,13984d:47)[14000r,14000d:46)[14032r,14032d:45)[14192r,14192d:59)[14288r,14288d:58)[14304r,14304d:57)[14320r,14320d:56)[14352r,14352d:55)[14560r,14560d:54)[14656r,14656d:53)[14672r,14672d:52)[14688r,14688d:51)[14720r,14720d:50)  0@304r 1@272r 2@256r 3@240r 4@208r 5@5376r 6@5344r 7@5248r 8@5232r 9@5200r 10@4544r 11@4512r 12@4496r 13@4480r 14@4304r 15@9104r 16@9072r 17@9056r 18@9040r 19@8944r 20@8864r 21@8832r 22@8816r 23@8800r 24@8736r 25@8528r 26@8496r 27@8400r 28@8384r 29@8352r 30@7664r 31@7632r 32@7616r 33@7600r 34@7568r 35@7488r 36@7456r 37@7440r 38@7424r 39@7248r 40@7216r 41@7184r 42@7168r 43@7152r 44@7120r 45@14032r 46@14000r 47@13984r 48@13968r 49@13888r 50@14720r 51@14688r 52@14672r 53@14656r 54@14560r 55@14352r 56@14320r 57@14304r 58@14288r 59@14192r 60@13728r 61@13696r 62@13680r 63@13664r 64@13632r 65@13376r 66@13344r 67@13328r 68@13312r 69@13216r 70@13024r 71@12992r 72@12976r 73@12960r 74@12912r 75@12832r 76@12800r 77@12784r 78@12768r 79@12224r 80@10880r 81@10848r 82@10832r 83@10816r 84@10736r 85@10704r 86@10672r 87@10656r 88@10640r 89@10544r 90@10512r 91@10480r 92@10464r 93@10448r 94@10352r 95@11472r 96@11440r 97@11424r 98@11408r 99@11328r 100@11296r 101@11264r 102@11248r 103@11232r 104@11136r 105@11104r 106@11072r 107@11056r 108@11040r 109@10944r 110@11840r 111@11808r 112@11792r 113@11776r 114@11712r 115@11696r 116@11664r 117@11648r 118@11632r 119@11536r 120@9952r 121@9920r 122@9904r 123@9888r 124@9792r 125@9744r 126@9712r 127@9696r 128@9680r 129@9648r 130@9632r 131@9600r 132@9584r 133@9568r 134@9520r 135@6688r 136@6656r 137@6640r 138@6624r 139@6576r 140@6560r 141@6528r 142@6512r 143@6496r 144@6400r 145@6368r 146@6336r 147@6320r 148@6304r 149@6272r 150@6256r 151@6224r 152@6208r 153@6192r 154@6144r 155@2688r 156@2656r 157@2640r 158@2624r 159@2272r 160@2128r 161@2096r 162@2080r 163@2064r 164@2000r 165@1856r 166@1824r 167@1808r 168@1792r 169@1728r 170@1712r 171@1680r 172@1664r 173@1648r 174@1552r 175@1536r 176@1504r 177@1488r 178@1472r 179@1392r 180@1376r 181@1344r 182@1328r 183@1312r 184@1232r 185@1072r 186@1040r 187@1024r 188@1008r 189@960r 190@864r 191@832r 192@816r 193@800r 194@768r 195@512r 196@480r 197@464r 198@448r 199@368r
HSP [208r,208d:4)[240r,240d:3)[256r,256d:2)[272r,272d:1)[304r,304d:0)[368r,368d:199)[448r,448d:198)[464r,464d:197)[480r,480d:196)[512r,512d:195)[768r,768d:194)[800r,800d:193)[816r,816d:192)[832r,832d:191)[864r,864d:190)[960r,960d:189)[1008r,1008d:188)[1024r,1024d:187)[1040r,1040d:186)[1072r,1072d:185)[1232r,1232d:184)[1312r,1312d:183)[1328r,1328d:182)[1344r,1344d:181)[1376r,1376d:180)[1392r,1392d:179)[1472r,1472d:178)[1488r,1488d:177)[1504r,1504d:176)[1536r,1536d:175)[1552r,1552d:174)[1648r,1648d:173)[1664r,1664d:172)[1680r,1680d:171)[1712r,1712d:170)[1728r,1728d:169)[1792r,1792d:168)[1808r,1808d:167)[1824r,1824d:166)[1856r,1856d:165)[2000r,2000d:164)[2064r,2064d:163)[2080r,2080d:162)[2096r,2096d:161)[2128r,2128d:160)[2272r,2272d:159)[2624r,2624d:158)[2640r,2640d:157)[2656r,2656d:156)[2688r,2688d:155)[4304r,4304d:14)[4480r,4480d:13)[4496r,4496d:12)[4512r,4512d:11)[4544r,4544d:10)[5200r,5200d:9)[5232r,5232d:8)[5248r,5248d:7)[5344r,5344d:6)[5376r,5376d:5)[6144r,6144d:154)[6192r,6192d:153)[6208r,6208d:152)[6224r,6224d:151)[6256r,6256d:150)[6272r,6272d:149)[6304r,6304d:148)[6320r,6320d:147)[6336r,6336d:146)[6368r,6368d:145)[6400r,6400d:144)[6496r,6496d:143)[6512r,6512d:142)[6528r,6528d:141)[6560r,6560d:140)[6576r,6576d:139)[6624r,6624d:138)[6640r,6640d:137)[6656r,6656d:136)[6688r,6688d:135)[7120r,7120d:44)[7152r,7152d:43)[7168r,7168d:42)[7184r,7184d:41)[7216r,7216d:40)[7248r,7248d:39)[7424r,7424d:38)[7440r,7440d:37)[7456r,7456d:36)[7488r,7488d:35)[7568r,7568d:34)[7600r,7600d:33)[7616r,7616d:32)[7632r,7632d:31)[7664r,7664d:30)[8352r,8352d:29)[8384r,8384d:28)[8400r,8400d:27)[8496r,8496d:26)[8528r,8528d:25)[8736r,8736d:24)[8800r,8800d:23)[8816r,8816d:22)[8832r,8832d:21)[8864r,8864d:20)[8944r,8944d:19)[9040r,9040d:18)[9056r,9056d:17)[9072r,9072d:16)[9104r,9104d:15)[9520r,9520d:134)[9568r,9568d:133)[9584r,9584d:132)[9600r,9600d:131)[9632r,9632d:130)[9648r,9648d:129)[9680r,9680d:128)[9696r,9696d:127)[9712r,9712d:126)[9744r,9744d:125)[9792r,9792d:124)[9888r,9888d:123)[9904r,9904d:122)[9920r,9920d:121)[9952r,9952d:120)[10352r,10352d:94)[10448r,10448d:93)[10464r,10464d:92)[10480r,10480d:91)[10512r,10512d:90)[10544r,10544d:89)[10640r,10640d:88)[10656r,10656d:87)[10672r,10672d:86)[10704r,10704d:85)[10736r,10736d:84)[10816r,10816d:83)[10832r,10832d:82)[10848r,10848d:81)[10880r,10880d:80)[10944r,10944d:109)[11040r,11040d:108)[11056r,11056d:107)[11072r,11072d:106)[11104r,11104d:105)[11136r,11136d:104)[11232r,11232d:103)[11248r,11248d:102)[11264r,11264d:101)[11296r,11296d:100)[11328r,11328d:99)[11408r,11408d:98)[11424r,11424d:97)[11440r,11440d:96)[11472r,11472d:95)[11536r,11536d:119)[11632r,11632d:118)[11648r,11648d:117)[11664r,11664d:116)[11696r,11696d:115)[11712r,11712d:114)[11776r,11776d:113)[11792r,11792d:112)[11808r,11808d:111)[11840r,11840d:110)[12224r,12224d:79)[12768r,12768d:78)[12784r,12784d:77)[12800r,12800d:76)[12832r,12832d:75)[12912r,12912d:74)[12960r,12960d:73)[12976r,12976d:72)[12992r,12992d:71)[13024r,13024d:70)[13216r,13216d:69)[13312r,13312d:68)[13328r,13328d:67)[13344r,13344d:66)[13376r,13376d:65)[13632r,13632d:64)[13664r,13664d:63)[13680r,13680d:62)[13696r,13696d:61)[13728r,13728d:60)[13888r,13888d:49)[13968r,13968d:48)[13984r,13984d:47)[14000r,14000d:46)[14032r,14032d:45)[14192r,14192d:59)[14288r,14288d:58)[14304r,14304d:57)[14320r,14320d:56)[14352r,14352d:55)[14560r,14560d:54)[14656r,14656d:53)[14672r,14672d:52)[14688r,14688d:51)[14720r,14720d:50)  0@304r 1@272r 2@256r 3@240r 4@208r 5@5376r 6@5344r 7@5248r 8@5232r 9@5200r 10@4544r 11@4512r 12@4496r 13@4480r 14@4304r 15@9104r 16@9072r 17@9056r 18@9040r 19@8944r 20@8864r 21@8832r 22@8816r 23@8800r 24@8736r 25@8528r 26@8496r 27@8400r 28@8384r 29@8352r 30@7664r 31@7632r 32@7616r 33@7600r 34@7568r 35@7488r 36@7456r 37@7440r 38@7424r 39@7248r 40@7216r 41@7184r 42@7168r 43@7152r 44@7120r 45@14032r 46@14000r 47@13984r 48@13968r 49@13888r 50@14720r 51@14688r 52@14672r 53@14656r 54@14560r 55@14352r 56@14320r 57@14304r 58@14288r 59@14192r 60@13728r 61@13696r 62@13680r 63@13664r 64@13632r 65@13376r 66@13344r 67@13328r 68@13312r 69@13216r 70@13024r 71@12992r 72@12976r 73@12960r 74@12912r 75@12832r 76@12800r 77@12784r 78@12768r 79@12224r 80@10880r 81@10848r 82@10832r 83@10816r 84@10736r 85@10704r 86@10672r 87@10656r 88@10640r 89@10544r 90@10512r 91@10480r 92@10464r 93@10448r 94@10352r 95@11472r 96@11440r 97@11424r 98@11408r 99@11328r 100@11296r 101@11264r 102@11248r 103@11232r 104@11136r 105@11104r 106@11072r 107@11056r 108@11040r 109@10944r 110@11840r 111@11808r 112@11792r 113@11776r 114@11712r 115@11696r 116@11664r 117@11648r 118@11632r 119@11536r 120@9952r 121@9920r 122@9904r 123@9888r 124@9792r 125@9744r 126@9712r 127@9696r 128@9680r 129@9648r 130@9632r 131@9600r 132@9584r 133@9568r 134@9520r 135@6688r 136@6656r 137@6640r 138@6624r 139@6576r 140@6560r 141@6528r 142@6512r 143@6496r 144@6400r 145@6368r 146@6336r 147@6320r 148@6304r 149@6272r 150@6256r 151@6224r 152@6208r 153@6192r 154@6144r 155@2688r 156@2656r 157@2640r 158@2624r 159@2272r 160@2128r 161@2096r 162@2080r 163@2064r 164@2000r 165@1856r 166@1824r 167@1808r 168@1792r 169@1728r 170@1712r 171@1680r 172@1664r 173@1648r 174@1552r 175@1536r 176@1504r 177@1488r 178@1472r 179@1392r 180@1376r 181@1344r 182@1328r 183@1312r 184@1232r 185@1072r 186@1040r 187@1024r 188@1008r 189@960r 190@864r 191@832r 192@816r 193@800r 194@768r 195@512r 196@480r 197@464r 198@448r 199@368r
%1 [5072r,5360r:0)  0@5072r weight:0.000000e+00
%5 [8224r,8512r:0)  0@8224r weight:0.000000e+00
%9 [32r,64r:0)  0@32r weight:0.000000e+00
%10 [16r,80r:0)  0@16r weight:0.000000e+00
%15 [528r,560r:0)  0@528r weight:0.000000e+00
%16 [624r,640r:0)  0@624r weight:0.000000e+00
%17 [656r,672r:0)  0@656r weight:0.000000e+00
%18 [688r,704r:0)  0@688r weight:0.000000e+00
%19 [720r,736r:0)  0@720r weight:0.000000e+00
%20 [752r,848r:0)  0@752r weight:0.000000e+00
%23 [1120r,1168r:0)  0@1120r weight:0.000000e+00
%24 [1200r,1216r:0)  0@1200r weight:0.000000e+00
%35 [1888r,1904r:0)  0@1888r weight:0.000000e+00
%36 [1920r,1936r:0)  0@1920r weight:0.000000e+00
%38 [1968r,1984r:0)  0@1968r weight:0.000000e+00
%39 [2016r,2112r:0)  0@2016r weight:0.000000e+00
%40 [2144r,2160r:0)  0@2144r weight:0.000000e+00
%41 [2176r,2672r:0)  0@2176r weight:0.000000e+00
%42 [2192r,2672r:0)  0@2192r weight:0.000000e+00
%43 [2208r,2672r:0)  0@2208r weight:0.000000e+00
%44 [2224r,2672r:0)  0@2224r weight:0.000000e+00
%45 [2240r,2672r:0)  0@2240r weight:0.000000e+00
%46 [2256r,2672r:0)  0@2256r weight:0.000000e+00
%47 [2288r,2320r:0)  0@2288r weight:0.000000e+00
%49 [2336r,2352r:0)  0@2336r weight:0.000000e+00
%50 [2368r,2384r:0)  0@2368r weight:0.000000e+00
%51 [2400r,2416r:0)  0@2400r weight:0.000000e+00
%53 [2496r,3216B:0)  0@2496r weight:0.000000e+00
%54 [2512r,3216B:0)  0@2512r weight:0.000000e+00
%58 [2736r,2768r:2)[2768r,2800r:0)[2800r,2816r:1)  0@2768r 1@2800r 2@2736r weight:0.000000e+00
%61 [3264r,3504B:0)  0@3264r weight:0.000000e+00
%66 [3648r,3680r:2)[3680r,3712r:0)[3712r,3728r:1)  0@3680r 1@3712r 2@3648r weight:0.000000e+00
%68 [3984r,4000r:0)  0@3984r weight:0.000000e+00
%72 [5872r,6112B:0)  0@5872r weight:0.000000e+00
%75 [6384r,6544r:0)  0@6384r weight:0.000000e+00
%79 [6592r,6704r:0)  0@6592r weight:0.000000e+00
%83 [9760r,9776r:0)  0@9760r weight:0.000000e+00
%88 [9968r,9984r:0)  0@9968r weight:0.000000e+00
%98 [10080r,10208r:0)  0@10080r weight:0.000000e+00
%101 [10064r,10112r:2)[10112r,10160r:0)[10160r,10208r:1)[10208r,10256r:3)  0@10112r 1@10160r 2@10064r 3@10208r weight:0.000000e+00
%104 [10240r,10256r:0)  0@10240r weight:0.000000e+00
%109 [11120r,11280r:0)  0@11120r weight:0.000000e+00
%113 [11312r,11456r:0)  0@11312r weight:0.000000e+00
%116 [10320r,10336r:0)  0@10320r weight:0.000000e+00
%121 [10528r,10688r:0)  0@10528r weight:0.000000e+00
%125 [10720r,10864r:0)  0@10720r weight:0.000000e+00
%128 [11872r,11904r:0)  0@11872r weight:0.000000e+00
%129 [11888r,11904r:0)  0@11888r weight:0.000000e+00
%132 [11984r,12016r:2)[12016r,12048r:0)[12048r,12064r:1)  0@12016r 1@12048r 2@11984r weight:0.000000e+00
%133 [12144r,12816r:0)  0@12144r weight:0.000000e+00
%135 [12176r,12816r:0)  0@12176r weight:0.000000e+00
%136 [12192r,12816r:0)  0@12192r weight:0.000000e+00
%137 [12208r,12816r:0)  0@12208r weight:0.000000e+00
%138 [12240r,12272r:0)  0@12240r weight:0.000000e+00
%140 [12288r,12304r:0)  0@12288r weight:0.000000e+00
%141 [12320r,12336r:0)  0@12320r weight:0.000000e+00
%142 [12352r,12368r:0)  0@12352r weight:0.000000e+00
%143 [12384r,12400r:0)  0@12384r weight:0.000000e+00
%144 [12416r,12432r:0)  0@12416r weight:0.000000e+00
%145 [12448r,12464r:0)  0@12448r weight:0.000000e+00
%146 [12480r,12496r:0)  0@12480r weight:0.000000e+00
%147 [12512r,12528r:0)  0@12512r weight:0.000000e+00
%148 [12560r,12576r:0)  0@12560r weight:0.000000e+00
%153 [13040r,13088r:0)  0@13040r weight:0.000000e+00
%154 [13072r,13088r:0)  0@13072r weight:0.000000e+00
%155 [13168r,13184r:0)  0@13168r weight:0.000000e+00
%163 [13616r,13712r:0)  0@13616r weight:0.000000e+00
%164 [13744r,13760r:0)  0@13744r weight:0.000000e+00
%165 [14080r,14096r:0)  0@14080r weight:0.000000e+00
%167 [14096r,14336r:0)  0@14096r weight:0.000000e+00
%168 [14112r,14336r:0)  0@14112r weight:0.000000e+00
%170 [14128r,14144r:2)[14144r,14176r:0)[14176r,14336r:1)  0@14144r 1@14176r 2@14128r weight:0.000000e+00
%176 [14432r,14544r:0)  0@14432r weight:0.000000e+00
%177 [14448r,14464r:0)[14464r,14704r:1)  0@14448r 1@14464r weight:0.000000e+00
%179 [14496r,14512r:2)[14512r,14544r:0)[14544r,14704r:1)  0@14512r 1@14544r 2@14496r weight:0.000000e+00
%184 [13840r,13856r:0)  0@13840r weight:0.000000e+00
%185 [13408r,14784B:0)  0@13408r weight:0.000000e+00
%186 [13856r,14016r:0)  0@13856r weight:0.000000e+00
%187 [13872r,14016r:0)  0@13872r weight:0.000000e+00
%193 [6736r,9504B:0)  0@6736r weight:0.000000e+00
%194 [6752r,9504B:0)  0@6752r weight:0.000000e+00
%195 [6768r,9504B:0)  0@6768r weight:0.000000e+00
%198 [6816r,9504B:0)  0@6816r weight:0.000000e+00
%199 [6832r,9504B:0)  0@6832r weight:0.000000e+00
%204 [6160r,9504B:0)  0@6160r weight:0.000000e+00
%208 [7776r,7808r:2)[7808r,7840r:0)[7840r,7856r:1)  0@7808r 1@7840r 2@7776r weight:0.000000e+00
%210 [6880r,9504B:0)  0@6880r weight:0.000000e+00
%212 [6896r,9504B:0)  0@6896r weight:0.000000e+00
%213 [8544r,8560r:0)[8560r,8576r:1)  0@8544r 1@8560r weight:0.000000e+00
%215 [8592r,8608r:2)[8608r,8640r:0)[8640r,8656r:1)  0@8608r 1@8640r 2@8592r weight:0.000000e+00
%222 [8896r,9088r:0)  0@8896r weight:0.000000e+00
%223 [8912r,9088r:0)  0@8912r weight:0.000000e+00
%224 [8928r,9088r:0)  0@8928r weight:0.000000e+00
%231 [9152r,9184r:2)[9184r,9216r:0)[9216r,9232r:1)  0@9184r 1@9216r 2@9152r weight:0.000000e+00
%237 [9296r,9360r:0)[9360r,9376r:1)  0@9296r 1@9360r weight:0.000000e+00
%239 [9408r,9424r:0)  0@9408r weight:0.000000e+00
%246 [7968r,8000r:2)[8000r,8032r:0)[8032r,8048r:1)  0@8000r 1@8032r 2@7968r weight:0.000000e+00
%248 [7952r,8080r:2)[8080r,8112r:0)[8112r,8128r:1)  0@8080r 1@8112r 2@7952r weight:0.000000e+00
%249 [8160r,8176r:0)  0@8160r weight:0.000000e+00
%252 [5888r,6112B:0)  0@5888r weight:0.000000e+00
%253 [5904r,6112B:0)  0@5904r weight:0.000000e+00
%254 [6064r,6080r:0)  0@6064r weight:0.000000e+00
%256 [4016r,5824B:0)  0@4016r weight:0.000000e+00
%257 [4032r,5824B:0)  0@4032r weight:0.000000e+00
%258 [4048r,5824B:0)  0@4048r weight:0.000000e+00
%261 [4096r,5824B:0)  0@4096r weight:0.000000e+00
%262 [4112r,5824B:0)  0@4112r weight:0.000000e+00
%266 [4160r,5824B:0)  0@4160r weight:0.000000e+00
%270 [4624r,4656r:2)[4656r,4688r:0)[4688r,4704r:1)  0@4656r 1@4688r 2@4624r weight:0.000000e+00
%272 [4192r,5824B:0)  0@4192r weight:0.000000e+00
%274 [4208r,5824B:0)  0@4208r weight:0.000000e+00
%275 [5392r,5408r:0)[5408r,5424r:1)  0@5392r 1@5408r weight:0.000000e+00
%279 [5472r,5504r:2)[5504r,5536r:0)[5536r,5552r:1)  0@5504r 1@5536r 2@5472r weight:0.000000e+00
%285 [5616r,5680r:0)[5680r,5696r:1)  0@5616r 1@5680r weight:0.000000e+00
%287 [5728r,5744r:0)  0@5728r weight:0.000000e+00
%294 [4816r,4848r:2)[4848r,4880r:0)[4880r,4896r:1)  0@4848r 1@4880r 2@4816r weight:0.000000e+00
%296 [4800r,4928r:2)[4928r,4960r:0)[4960r,4976r:1)  0@4928r 1@4960r 2@4800r weight:0.000000e+00
%297 [5008r,5024r:0)  0@5008r weight:0.000000e+00
%300 [3536r,3952B:0)  0@3536r weight:0.000000e+00
%301 [3552r,3952B:0)  0@3552r weight:0.000000e+00
%303 [3568r,3952B:0)  0@3568r weight:0.000000e+00
%304 [3600r,3952B:0)  0@3600r weight:0.000000e+00
%305 [3616r,3952B:0)  0@3616r weight:0.000000e+00
%306 [3904r,3920r:0)  0@3904r weight:0.000000e+00
%309 [3280r,3504B:0)  0@3280r weight:0.000000e+00
%310 [3296r,3504B:0)  0@3296r weight:0.000000e+00
%311 [3456r,3472r:0)  0@3456r weight:0.000000e+00
%312 [2880r,2896r:0)  0@2880r weight:0.000000e+00
%314 [2896r,2912r:0)  0@2896r weight:0.000000e+00
%315 [2944r,2976r:0)  0@2944r weight:0.000000e+00
%316 [2960r,2976r:0)  0@2960r weight:0.000000e+00
%322 [3072r,3088r:0)  0@3072r weight:0.000000e+00
%323 [3120r,3136r:0)  0@3120r weight:0.000000e+00
%324 [192r,288r:0)  0@192r weight:0.000000e+00
%325 [6912r,9504B:0)  0@6912r weight:0.000000e+00
%326 [13456r,14784B:0)  0@13456r weight:0.000000e+00
%328 [5136r,5184B:0)[5264r,5312B:1)[5312B,5408r:2)  0@5136r 1@5264r 2@5312B-phi weight:0.000000e+00
%329 [8288r,8336B:0)[8416r,8464B:1)[8464B,8560r:2)  0@8288r 1@8416r 2@8464B-phi weight:0.000000e+00
%331 [3040r,3120r:0)  0@3040r weight:0.000000e+00
%333 [3392r,3456r:0)  0@3392r weight:0.000000e+00
%334 [3792r,3904r:0)  0@3792r weight:0.000000e+00
%336 [4768r,5008r:0)  0@4768r weight:0.000000e+00
%337 [5632r,5728r:0)  0@5632r weight:0.000000e+00
%338 [944r,5872r:0)  0@944r weight:0.000000e+00
%339 [6000r,6064r:0)  0@6000r weight:0.000000e+00
%341 [7920r,8160r:0)  0@7920r weight:0.000000e+00
%343 [9312r,9408r:0)  0@9312r weight:0.000000e+00
RegMasks: 240r 448r 800r 1008r 1312r 1472r 1648r 1792r 2064r 2624r 4480r 5232r 6192r 6304r 6496r 6624r 7152r 7424r 7600r 8384r 8800r 9040r 9568r 9680r 9888r 10448r 10640r 10816r 11040r 11232r 11408r 11632r 11776r 12768r 12960r 13312r 13664r 13968r 14288r 14656r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
  fi#12: size=8, align=8, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=1, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=8, align=8, at location [SP+8]
  fi#17: size=8, align=8, at location [SP+8]
  fi#18: size=8, align=8, at location [SP+8]
  fi#19: size=24, align=16, at location [SP+8]
  fi#20: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x41D2309CE5400000, align=8
  cp#1: <double 0x7FFFFFFFFFFFFFFF, double 0x7FFFFFFFFFFFFFFF>, align=16
  cp#2: 0x422979CA8D600000, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
  cp#5: 1.000000e+00, align=8
  cp#6: 6.000000e+01, align=8
Function Live Ins: $edi in %9, $rsi in %10

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $rsi
16B	  %10:gr64 = COPY $rsi
32B	  %9:gr32 = COPY $edi
48B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
64B	  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.argc.addr)
80B	  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %10:gr64 :: (store 8 into %ir.argv.addr)
96B	  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

112B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !137 :: (dereferenceable load 4 from %ir.i); cg.c:117:19
144B	  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !138; cg.c:117:5
160B	  JMP_1 %bb.2, debug-location !138; cg.c:117:5

176B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

192B	  %324:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !139 :: (dereferenceable load 4 from %ir.i); cg.c:118:21
208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; cg.c:118:9
224B	  $edi = COPY %324:gr32, debug-location !141; cg.c:118:9
240B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !141; cg.c:118:9
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !141; cg.c:118:9
272B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !142; cg.c:119:5
288B	  PCN_STACKMAP 0, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.20.fp, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %324:gr32, implicit-def dead early-clobber $r11, debug-location !142 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.20.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:119:5
304B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !142; cg.c:119:5
320B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !143 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:117:30
336B	  JMP_1 %bb.1, debug-location !144; cg.c:117:5

352B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x50000000), %bb.5(0x30000000); %bb.4(62.50%), %bb.5(37.50%)

368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !153; cg.c:122:15
416B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_timer_flag, $noreg, debug-location !153; cg.c:122:15
432B	  $rsi = LEA64r $rip, 1, $noreg, @cg__str_1_r_, $noreg, debug-location !153; cg.c:122:15
448B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !153; cg.c:122:15
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !153; cg.c:122:15
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !155; cg.c:122:13
496B	  PCN_STACKMAP 1, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.20.fp, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !155 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.20.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:122:13
512B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !155; cg.c:122:13
528B	  %15:gr64 = COPY killed $rax, debug-location !153; cg.c:122:15
544B	  MOV64mr %stack.20.fp, 1, $noreg, 0, $noreg, %15:gr64, debug-location !155 :: (store 8 into %ir.fp); cg.c:122:13
560B	  TEST64rr %15:gr64, %15:gr64, implicit-def $eflags, debug-location !156; cg.c:122:41
576B	  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !157; cg.c:122:9
592B	  JMP_1 %bb.4, debug-location !157; cg.c:122:9

608B	bb.4.if.then:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

624B	  %16:gr32 = MOV32ri 1
640B	  MOV32mr $rip, 1, $noreg, @timeron, $noreg, %16:gr32, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
656B	  %17:gr64 = LEA64r $rip, 1, $noreg, @cg__str_2_init_, $noreg, debug-location !161; cg.c:124:25
672B	  MOV64mr %stack.19.t_names, 1, $noreg, 0, $noreg, %17:gr64, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
688B	  %18:gr64 = LEA64r $rip, 1, $noreg, @cg__str_3_benchmk_, $noreg, debug-location !163; cg.c:125:26
704B	  MOV64mr %stack.19.t_names, 1, $noreg, 8, $noreg, %18:gr64, debug-location !163 :: (store 8 into %ir.arrayidx2); cg.c:125:26
720B	  %19:gr64 = LEA64r $rip, 1, $noreg, @cg__str_4_conjgd_, $noreg, debug-location !165; cg.c:126:30
736B	  MOV64mr %stack.19.t_names, 1, $noreg, 16, $noreg, %19:gr64, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
752B	  %20:gr64 = MOV64rm %stack.20.fp, 1, $noreg, 0, $noreg, debug-location !166 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !167; cg.c:127:9
784B	  $rdi = COPY %20:gr64, debug-location !167; cg.c:127:9
800B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !167; cg.c:127:9
816B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !167; cg.c:127:9
832B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !168; cg.c:128:5
848B	  PCN_STACKMAP 2, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %20:gr64, implicit-def dead early-clobber $r11, debug-location !168 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:128:5
864B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !168; cg.c:128:5
880B	  JMP_1 %bb.6, debug-location !168; cg.c:128:5

896B	bb.5.if.else:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

912B	  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0, debug-location !169 :: (store 4 into @timeron); cg.c:130:17

928B	bb.6.if.end:
	; predecessors: %bb.5, %bb.4
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

944B	  undef %338.sub_32bit:gr64_nosp = MOV32ri 75000
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !172; cg.c:133:5
992B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !172; cg.c:133:5
1008B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !172; cg.c:133:5
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !172; cg.c:133:5
1040B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !173; cg.c:135:14
1056B	  PCN_STACKMAP 3, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !173 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:135:14
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !173; cg.c:135:14
1088B	  MOV32mi $rip, 1, $noreg, @firstrow, $noreg, 0, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
1120B	  %23:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !174; cg.c:136:13
1136B	  MOV32mr $rip, 1, $noreg, @lastrow, $noreg, %23:gr32, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
1152B	  MOV32mi $rip, 1, $noreg, @firstcol, $noreg, 0, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
1168B	  MOV32mr $rip, 1, $noreg, @lastcol, $noreg, %23:gr32, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
1184B	  MOV8mi %stack.14.Class, 1, $noreg, 0, $noreg, 66, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
1200B	  %24:gr64 = MOV64ri 4627086287187887514
1216B	  MOV64mr %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, %24:gr64, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !184; cg.c:172:5
1280B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_5____NAS_Par, $noreg, debug-location !184; cg.c:172:5
1296B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !184; cg.c:172:5
1312B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !184; cg.c:172:5
1328B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !184; cg.c:172:5
1344B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !185; cg.c:173:5
1360B	  PCN_STACKMAP 4, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !185 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:173:5
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !185; cg.c:173:5
1392B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !185; cg.c:173:5
1424B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_6__Size___11, $noreg, debug-location !185; cg.c:173:5
1440B	  $esi = MOV32ri 75000, debug-location !185; cg.c:173:5
1456B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !185; cg.c:173:5
1472B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !185; cg.c:173:5
1488B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !185; cg.c:173:5
1504B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !186; cg.c:174:5
1520B	  PCN_STACKMAP 5, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !186 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:174:5
1536B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !186; cg.c:174:5
1552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !186; cg.c:174:5
1600B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_7__Iteration, $noreg, debug-location !186; cg.c:174:5
1616B	  $esi = MOV32ri 75, debug-location !186; cg.c:174:5
1632B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !186; cg.c:174:5
1648B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !186; cg.c:174:5
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !186; cg.c:174:5
1680B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !187; cg.c:175:5
1696B	  PCN_STACKMAP 6, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !187 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:175:5
1712B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !187; cg.c:175:5
1728B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !187; cg.c:175:5
1760B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_8___, $noreg, debug-location !187; cg.c:175:5
1776B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !187; cg.c:175:5
1792B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !187; cg.c:175:5
1808B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !187; cg.c:175:5
1824B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !188; cg.c:177:9
1840B	  PCN_STACKMAP 7, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !188 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:177:9
1856B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !188; cg.c:177:9
1872B	  MOV32mr $rip, 1, $noreg, @naa, $noreg, %338.sub_32bit:gr64_nosp, debug-location !188 :: (store 4 into @naa); cg.c:177:9
1888B	  %35:gr32 = MOV32ri 14700000
1904B	  MOV32mr $rip, 1, $noreg, @nzz, $noreg, %35:gr32, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
1920B	  %36:gr64 = MOV64ri 4734050326586327040
1936B	  MOV64mr $rip, 1, $noreg, @tran, $noreg, %36:gr64, debug-location !190 :: (store 8 into @tran); cg.c:183:10
1968B	  %38:gr64 = MOV64ri 4742906807993761792
1984B	  MOV64mr $rip, 1, $noreg, @amult, $noreg, %38:gr64, debug-location !191 :: (store 8 into @amult); cg.c:184:11
2000B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !193; cg.c:185:12
2016B	  %39:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
2032B	  $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !193; cg.c:185:12
2048B	  $xmm0 = COPY %39:fr64, debug-location !193; cg.c:185:12
2064B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !193; cg.c:185:12
2080B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !193; cg.c:185:12
2096B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !194; cg.c:185:10
2112B	  PCN_STACKMAP 8, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %39:fr64, implicit-def dead early-clobber $r11, debug-location !194 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:185:10
2128B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !194; cg.c:185:10
2144B	  %40:fr64 = COPY killed $xmm0, debug-location !193; cg.c:185:12
2160B	  MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %40:fr64, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
2176B	  %41:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
2192B	  %42:gr32 = MOV32rm $rip, 1, $noreg, @nzz, $noreg, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
2208B	  %43:gr32 = MOV32rm $rip, 1, $noreg, @firstrow, $noreg, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
2224B	  %44:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
2240B	  %45:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
2256B	  %46:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
2272B	  ADJCALLSTACKDOWN64 56, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !201; cg.c:190:5
2288B	  %47:gr64 = LEA64r $rip, 1, $noreg, @iv, $noreg, debug-location !201; cg.c:190:5
2320B	  MOV64mr $rsp, 1, $noreg, 48, $noreg, %47:gr64, debug-location !201 :: (store 8 into stack + 48); cg.c:190:5
2336B	  %49:gr64 = LEA64r $rip, 1, $noreg, @aelt, $noreg, debug-location !201; cg.c:190:5
2352B	  MOV64mr $rsp, 1, $noreg, 40, $noreg, %49:gr64, debug-location !201 :: (store 8 into stack + 40); cg.c:190:5
2368B	  %50:gr64 = LEA64r $rip, 1, $noreg, @acol, $noreg, debug-location !201; cg.c:190:5
2384B	  MOV64mr $rsp, 1, $noreg, 32, $noreg, %50:gr64, debug-location !201 :: (store 8 into stack + 32); cg.c:190:5
2400B	  %51:gr64 = LEA64r $rip, 1, $noreg, @arow, $noreg, debug-location !201; cg.c:190:5
2416B	  MOV64mr $rsp, 1, $noreg, 24, $noreg, %51:gr64, debug-location !201 :: (store 8 into stack + 24); cg.c:190:5
2432B	  MOV32mr $rsp, 1, $noreg, 16, $noreg, %46:gr32, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
2448B	  MOV32mr $rsp, 1, $noreg, 8, $noreg, %45:gr32, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
2464B	  MOV32mr $rsp, 1, $noreg, 0, $noreg, %44:gr32, debug-location !201 :: (store 4 into stack); cg.c:190:5
2496B	  %53:gr64 = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !201; cg.c:190:5
2512B	  %54:gr64 = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !201; cg.c:190:5
2560B	  $rdx = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !201; cg.c:190:5
2576B	  $rcx = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !201; cg.c:190:5
2592B	  $r8 = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !201; cg.c:190:5
2596B	  $edi = COPY %41:gr32, debug-location !201; cg.c:190:5
2600B	  $esi = COPY %42:gr32, debug-location !201; cg.c:190:5
2608B	  $r9d = COPY %43:gr32, debug-location !201; cg.c:190:5
2624B	  CALL64pcrel32 @makea, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp, debug-location !201; cg.c:190:5
2640B	  ADJCALLSTACKUP64 56, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !201; cg.c:190:5
2656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !202; cg.c:202:12
2672B	  PCN_STACKMAP 9, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %41:gr32, %42:gr32, %43:gr32, %44:gr32, %45:gr32, %46:gr32, implicit-def dead early-clobber $r11, debug-location !202 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:202:12
2688B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !202; cg.c:202:12
2704B	  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !202 :: (store 4 into %ir.j); cg.c:202:12

2720B	bb.7.for.cond10:
	; predecessors: %bb.6, %bb.11
	  successors: %bb.8(0x7c000000), %bb.12(0x04000000); %bb.8(96.88%), %bb.12(3.12%)

2736B	  %58:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
2768B	  %58:gr32 = nsw SUB32rm %58:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !209 :: (dereferenceable load 4 from @firstrow); cg.c:202:29
2800B	  %58:gr32 = nsw INC32r %58:gr32(tied-def 0), implicit-def dead $eflags, debug-location !210; cg.c:202:40
2816B	  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %58:gr32, implicit-def $eflags, debug-location !211 :: (dereferenceable load 4 from %ir.j); cg.c:202:19
2832B	  JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !212; cg.c:202:5
2848B	  JMP_1 %bb.8, debug-location !212; cg.c:202:5

2864B	bb.8.for.body12:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2880B	  %312:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
2896B	  %314:gr32 = MOV32rm %54:gr64, 4, %312:gr64_nosp, 0, $noreg, debug-location !216 :: (load 4 from %ir.arrayidx13); cg.c:203:18
2912B	  MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %314:gr32, debug-location !217 :: (store 4 into %ir.k); cg.c:203:16

2928B	bb.9.for.cond14:
	; predecessors: %bb.8, %bb.10
	  successors: %bb.10(0x7c000000), %bb.11(0x04000000); %bb.10(96.88%), %bb.11(3.12%)

2944B	  %315:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
2960B	  %316:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !221 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
2976B	  CMP32rm %315:gr32, %54:gr64, 4, %316:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !224 :: (load 4 from %ir.arrayidx17); cg.c:203:31
2992B	  JCC_1 %bb.11, 13, implicit killed $eflags, debug-location !225; cg.c:203:9
3008B	  JMP_1 %bb.10, debug-location !225; cg.c:203:9

3024B	bb.10.for.body19:
	; predecessors: %bb.9
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

3040B	  %331:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
3072B	  %322:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
3088B	  SUB32mr %53:gr64, 4, %331:gr64_nosp, 0, $noreg, %322:gr32, implicit-def dead $eflags, debug-location !233 :: (store 4 into %ir.arrayidx24), (load 4 from %ir.arrayidx21); cg.c:204:23
3120B	  %323:gr32 = LEA64_32r %331:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !234; cg.c:203:49
3136B	  MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %323:gr32, debug-location !234 :: (store 4 into %ir.k); cg.c:203:49
3152B	  JMP_1 %bb.9, debug-location !235; cg.c:203:9

3168B	bb.11.for.end27:
	; predecessors: %bb.9
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

3184B	  INC32m %stack.4.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !238 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:202:46
3200B	  JMP_1 %bb.7, debug-location !239; cg.c:202:5

3216B	bb.12.for.end30:
	; predecessors: %bb.7
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3232B	  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
3264B	  %61:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, 1, $noreg
3280B	  %309:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
3296B	  %310:gr64 = MOV64ri 4607182418800017408

3312B	bb.13.for.cond31:
	; predecessors: %bb.12, %bb.14
	  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

3328B	  CMP32mr %stack.3.i, 1, $noreg, 0, $noreg, %61:gr32, implicit-def $eflags, debug-location !247 :: (dereferenceable load 4 from %ir.i); cg.c:211:19
3344B	  JCC_1 %bb.15, 13, implicit killed $eflags, debug-location !248; cg.c:211:5
3360B	  JMP_1 %bb.14, debug-location !248; cg.c:211:5

3376B	bb.14.for.body33:
	; predecessors: %bb.13
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3392B	  %333:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
3424B	  MOV64mr %309:gr64, 8, %333:gr64_nosp, 0, $noreg, %310:gr64, debug-location !252 :: (store 8 into %ir.arrayidx35); cg.c:212:14
3456B	  %311:gr32 = LEA64_32r %333:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !253; cg.c:211:30
3472B	  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %311:gr32, debug-location !253 :: (store 4 into %ir.i); cg.c:211:30
3488B	  JMP_1 %bb.13, debug-location !254; cg.c:211:5

3504B	bb.15.for.end38:
	; predecessors: %bb.13
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

3520B	  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
3536B	  %300:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
3552B	  %301:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
3568B	  undef %303.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
3600B	  %304:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
3616B	  %305:gr64 = LEA64r $rip, 1, $noreg, @p, $noreg

3632B	bb.16.for.cond39:
	; predecessors: %bb.15, %bb.17
	  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

3648B	  %66:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
3680B	  %66:gr32 = nsw SUB32rm %66:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !264 :: (dereferenceable load 4 from @firstcol); cg.c:214:29
3712B	  %66:gr32 = nsw INC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !265; cg.c:214:40
3728B	  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !266 :: (dereferenceable load 4 from %ir.j); cg.c:214:19
3744B	  JCC_1 %bb.18, 13, implicit killed $eflags, debug-location !267; cg.c:214:5
3760B	  JMP_1 %bb.17, debug-location !267; cg.c:214:5

3776B	bb.17.for.body43:
	; predecessors: %bb.16
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

3792B	  %334:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
3824B	  MOV64mi32 %300:gr64, 8, %334:gr64_nosp, 0, $noreg, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
3840B	  MOV64mr %301:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
3856B	  MOV64mr %304:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
3872B	  MOV64mr %305:gr64, 8, %334:gr64_nosp, 0, $noreg, %303:gr64_with_sub_32bit_in_gr32temp, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
3904B	  %306:gr32 = LEA64_32r %334:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !281; cg.c:214:46
3920B	  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %306:gr32, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46
3936B	  JMP_1 %bb.16, debug-location !282; cg.c:214:5

3952B	bb.18.for.end54:
	; predecessors: %bb.16
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

3968B	  MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
3984B	  %68:gr32 = MOV32ri 1
4000B	  MOV32mr %stack.6.it, 1, $noreg, 0, $noreg, %68:gr32, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
4016B	  %256:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
4032B	  %257:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
4048B	  %258:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
4096B	  %261:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
4112B	  %262:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
4160B	  undef %266.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
4192B	  %272:fr64 = FsFLD0SD
4208B	  %274:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)

4224B	bb.19.for.cond55:
	; predecessors: %bb.18, %bb.29
	  successors: %bb.20(0x7c000000), %bb.30(0x04000000); %bb.20(96.88%), %bb.30(3.12%)

4240B	  CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !291 :: (dereferenceable load 4 from %ir.it); cg.c:228:21
4256B	  JCC_1 %bb.30, 15, implicit killed $eflags, debug-location !292; cg.c:228:5
4272B	  JMP_1 %bb.20, debug-location !292; cg.c:228:5

4288B	bb.20.for.body57:
	; predecessors: %bb.19
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

4304B	  ADJCALLSTACKDOWN64 24, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !293; cg.c:232:9
4336B	  MOV64mr $rsp, 1, $noreg, 16, $noreg, %256:gr64, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
4352B	  MOV64mr $rsp, 1, $noreg, 8, $noreg, %257:gr64, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9
4368B	  MOV64mr $rsp, 1, $noreg, 0, $noreg, %258:gr64, debug-location !293 :: (store 8 into stack); cg.c:232:9
4384B	  $rdi = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !293; cg.c:232:9
4400B	  $rsi = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !293; cg.c:232:9
4416B	  $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !293; cg.c:232:9
4432B	  $rcx = LEA64r $rip, 1, $noreg, @z, $noreg, debug-location !293; cg.c:232:9
4448B	  $r8 = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !293; cg.c:232:9
4464B	  $r9 = LEA64r $rip, 1, $noreg, @p, $noreg, debug-location !293; cg.c:232:9
4480B	  CALL64pcrel32 @conj_grad, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !293; cg.c:232:9
4496B	  ADJCALLSTACKUP64 24, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !293; cg.c:232:9
4512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !295; cg.c:240:20
4528B	  PCN_STACKMAP 10, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !295 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:240:20
4544B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !295; cg.c:240:20
4560B	  MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !295 :: (store 8 into %ir.norm_temp1); cg.c:240:20
4576B	  MOV64mr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %266:gr64_with_sub_32bit_in_gr32temp, debug-location !296 :: (store 8 into %ir.norm_temp2); cg.c:241:20
4592B	  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !297 :: (store 4 into %ir.j); cg.c:242:16

4608B	bb.21.for.cond58:
	; predecessors: %bb.20, %bb.22
	  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

4624B	  %270:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
4656B	  %270:gr32 = nsw SUB32rm %270:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !304 :: (dereferenceable load 4 from @firstcol); cg.c:242:33
4688B	  %270:gr32 = nsw INC32r %270:gr32(tied-def 0), implicit-def dead $eflags, debug-location !305; cg.c:242:44
4704B	  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %270:gr32, implicit-def $eflags, debug-location !306 :: (dereferenceable load 4 from %ir.j); cg.c:242:23
4720B	  JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !307; cg.c:242:9
4736B	  JMP_1 %bb.22, debug-location !307; cg.c:242:9

4752B	bb.22.for.body62:
	; predecessors: %bb.21
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

4768B	  %336:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
4800B	  %296:fr64 = MOVSDrm_alt %262:gr64, 8, %336:gr64_nosp, 0, $noreg, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
4816B	  %294:fr64 = MOVSDrm_alt %261:gr64, 8, %336:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx64)
4848B	  %294:fr64 = MULSDrr %294:fr64(tied-def 0), %296:fr64, debug-location !314; cg.c:243:44
4880B	  %294:fr64 = ADDSDrm %294:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !315 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:37
4896B	  MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %294:fr64, debug-location !316 :: (store 8 into %ir.norm_temp1); cg.c:243:24
4928B	  %296:fr64 = MULSDrr %296:fr64(tied-def 0), %296:fr64, debug-location !322; cg.c:244:44
4960B	  %296:fr64 = ADDSDrm %296:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !323 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:37
4976B	  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %296:fr64, debug-location !324 :: (store 8 into %ir.norm_temp2); cg.c:244:24
5008B	  %297:gr32 = LEA64_32r %336:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !325; cg.c:242:50
5024B	  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %297:gr32, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50
5040B	  JMP_1 %bb.21, debug-location !326; cg.c:242:9

5056B	bb.23.for.end76:
	; predecessors: %bb.21
	  successors: %bb.24(0x40000000), %bb.25(0x40000000); %bb.24(50.00%), %bb.25(50.00%)

5072B	  %1:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
5088B	  UCOMISDrr %1:fr64, %272:fr64, implicit-def $eflags, debug-location !331; cg.c:247:26
5104B	  JCC_1 %bb.25, 2, implicit killed $eflags, debug-location !331; cg.c:247:26

5120B	bb.24:
	; predecessors: %bb.23
	  successors: %bb.26(0x80000000); %bb.26(100.00%)

5136B	  %328:fr64 = SQRTSDr %1:fr64
5168B	  JMP_1 %bb.26

5184B	bb.25.call.sqrt:
	; predecessors: %bb.23
	  successors: %bb.26(0x80000000); %bb.26(100.00%)

5200B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !331; cg.c:247:26
5216B	  $xmm0 = COPY %1:fr64, debug-location !331; cg.c:247:26
5232B	  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !331; cg.c:247:26
5248B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !331; cg.c:247:26
5264B	  %328:fr64 = COPY killed $xmm0, debug-location !331; cg.c:247:26

5312B	bb.26.for.end76.split:
	; predecessors: %bb.25, %bb.24
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

5344B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !331; cg.c:247:26
5360B	  PCN_STACKMAP 11, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %1:fr64, implicit-def dead early-clobber $r11, debug-location !331 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:247:26
5376B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !331; cg.c:247:26
5392B	  %275:fr64 = COPY %274:fr64, debug-location !331; cg.c:247:26
5408B	  %275:fr64 = DIVSDrr %275:fr64(tied-def 0), %328:fr64, debug-location !331; cg.c:247:26
5424B	  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %275:fr64, debug-location !332 :: (store 8 into %ir.norm_temp2); cg.c:247:20
5440B	  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !333 :: (store 4 into %ir.j); cg.c:252:16

5456B	bb.27.for.cond78:
	; predecessors: %bb.26, %bb.28
	  successors: %bb.28(0x7c000000), %bb.29(0x04000000); %bb.28(96.88%), %bb.29(3.12%)

5472B	  %279:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
5504B	  %279:gr32 = nsw SUB32rm %279:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !340 :: (dereferenceable load 4 from @firstcol); cg.c:252:33
5536B	  %279:gr32 = nsw INC32r %279:gr32(tied-def 0), implicit-def dead $eflags, debug-location !341; cg.c:252:44
5552B	  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %279:gr32, implicit-def $eflags, debug-location !342 :: (dereferenceable load 4 from %ir.j); cg.c:252:23
5568B	  JCC_1 %bb.29, 13, implicit killed $eflags, debug-location !343; cg.c:252:9
5584B	  JMP_1 %bb.28, debug-location !343; cg.c:252:9

5600B	bb.28.for.body82:
	; predecessors: %bb.27
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

5616B	  %285:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
5632B	  %337:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
5680B	  %285:fr64 = MULSDrm %285:fr64(tied-def 0), %262:gr64, 8, %337:gr64_nosp, 0, $noreg, debug-location !348 :: (load 8 from %ir.arrayidx84); cg.c:253:31
5696B	  MOVSDmr %261:gr64, 8, %337:gr64_nosp, 0, $noreg, %285:fr64, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
5728B	  %287:gr32 = LEA64_32r %337:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !352; cg.c:252:50
5744B	  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %287:gr32, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50
5760B	  JMP_1 %bb.27, debug-location !353; cg.c:252:9

5776B	bb.29.for.end90:
	; predecessors: %bb.27
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

5792B	  INC32m %stack.6.it, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !356 :: (store 4 into %ir.it), (dereferenceable load 4 from %ir.it); cg.c:228:29
5808B	  JMP_1 %bb.19, debug-location !357; cg.c:228:5

5824B	bb.30.for.end93:
	; predecessors: %bb.19
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

5840B	  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
5872B	  %72:gr32 = LEA64_32r %338:gr64_nosp, 1, $noreg, 1, $noreg
5888B	  %252:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
5904B	  %253:gr64 = MOV64ri 4607182418800017408

5920B	bb.31.for.cond94:
	; predecessors: %bb.30, %bb.32
	  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

5936B	  CMP32mr %stack.3.i, 1, $noreg, 0, $noreg, %72:gr32, implicit-def $eflags, debug-location !365 :: (dereferenceable load 4 from %ir.i); cg.c:260:19
5952B	  JCC_1 %bb.33, 13, implicit killed $eflags, debug-location !366; cg.c:260:5
5968B	  JMP_1 %bb.32, debug-location !366; cg.c:260:5

5984B	bb.32.for.body96:
	; predecessors: %bb.31
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

6000B	  %339:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
6032B	  MOV64mr %252:gr64, 8, %339:gr64_nosp, 0, $noreg, %253:gr64, debug-location !370 :: (store 8 into %ir.arrayidx98); cg.c:261:14
6064B	  %254:gr32 = LEA64_32r %339:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !371; cg.c:260:30
6080B	  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %254:gr32, debug-location !371 :: (store 4 into %ir.i); cg.c:260:30
6096B	  JMP_1 %bb.31, debug-location !372; cg.c:260:5

6112B	bb.33.for.end101:
	; predecessors: %bb.31
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

6128B	  MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !375 :: (store 8 into %ir.zeta); cg.c:264:10
6144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !376; cg.c:266:5
6160B	  undef %204.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
6176B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !376; cg.c:266:5
6192B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !376; cg.c:266:5
6208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !376; cg.c:266:5
6224B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !377; cg.c:268:55
6240B	  PCN_STACKMAP 12, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !377 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:268:55
6256B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !377; cg.c:268:55
6272B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !377; cg.c:268:55
6288B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !377; cg.c:268:55
6304B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !377; cg.c:268:55
6320B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !377; cg.c:268:55
6336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !378; cg.c:268:5
6352B	  PCN_STACKMAP 13, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !378 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:268:5
6368B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !378; cg.c:268:5
6384B	  %75:fr64 = COPY killed $xmm0, debug-location !377; cg.c:268:55
6400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !378; cg.c:268:5
6448B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_9__Initializ, $noreg, debug-location !378; cg.c:268:5
6464B	  $xmm0 = COPY %75:fr64, debug-location !378; cg.c:268:5
6480B	  $al = MOV8ri 1, debug-location !378; cg.c:268:5
6496B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !378; cg.c:268:5
6512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !378; cg.c:268:5
6528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !379; cg.c:270:5
6544B	  PCN_STACKMAP 14, 0, 0, %stack.14.Class, 0, %75:fr64, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !379 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:270:5
6560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !379; cg.c:270:5
6576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !379; cg.c:270:5
6592B	  %79:gr32 = MOV32ri 1
6608B	  $edi = MOV32ri 1, debug-location !379; cg.c:270:5
6624B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !379; cg.c:270:5
6640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !379; cg.c:270:5
6656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !380; cg.c:277:5
6672B	  PCN_STACKMAP 15, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !380 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:277:5
6688B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !380; cg.c:277:5
6704B	  MOV32mr %stack.6.it, 1, $noreg, 0, $noreg, %79:gr32, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
6736B	  %193:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
6752B	  %194:gr64 = LEA64r $rip, 1, $noreg, @r, $noreg
6768B	  %195:gr64 = LEA64r $rip, 1, $noreg, @q, $noreg
6816B	  %198:gr64 = LEA64r $rip, 1, $noreg, @x, $noreg
6832B	  %199:gr64 = LEA64r $rip, 1, $noreg, @z, $noreg
6880B	  %210:fr64 = FsFLD0SD
6896B	  %212:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
6912B	  %325:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)

6976B	bb.34.for.cond108:
	; predecessors: %bb.33, %bb.50
	  successors: %bb.35(0x7c000000), %bb.51(0x04000000); %bb.35(96.88%), %bb.51(3.12%)

6992B	  CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 75, implicit-def $eflags, debug-location !386 :: (dereferenceable load 4 from %ir.it); cg.c:279:21
7008B	  JCC_1 %bb.51, 15, implicit killed $eflags, debug-location !387; cg.c:279:5
7024B	  JMP_1 %bb.35, debug-location !387; cg.c:279:5

7040B	bb.35.for.body110:
	; predecessors: %bb.34
	  successors: %bb.36(0x50000000), %bb.37(0x30000000); %bb.36(62.50%), %bb.37(37.50%)

7056B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags, debug-location !388 :: (dereferenceable load 4 from @timeron); cg.c:284:13
7072B	  JCC_1 %bb.37, 4, implicit killed $eflags, debug-location !391; cg.c:284:13
7088B	  JMP_1 %bb.36, debug-location !391; cg.c:284:13

7104B	bb.36.if.then111:
	; predecessors: %bb.35
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

7120B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !392; cg.c:285:13
7136B	  $edi = MOV32ri 2, debug-location !392; cg.c:285:13
7152B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !392; cg.c:285:13
7168B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !392; cg.c:285:13
7184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !392; cg.c:285:13
7200B	  PCN_STACKMAP 16, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !392 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:285:13
7216B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !392; cg.c:285:13

7232B	bb.37.if.end112:
	; predecessors: %bb.35, %bb.36
	  successors: %bb.38(0x50000000), %bb.39(0x30000000); %bb.38(62.50%), %bb.39(37.50%)

7248B	  ADJCALLSTACKDOWN64 24, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !393; cg.c:286:9
7280B	  MOV64mr $rsp, 1, $noreg, 16, $noreg, %193:gr64, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
7296B	  MOV64mr $rsp, 1, $noreg, 8, $noreg, %194:gr64, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9
7312B	  MOV64mr $rsp, 1, $noreg, 0, $noreg, %195:gr64, debug-location !393 :: (store 8 into stack); cg.c:286:9
7328B	  $rdi = LEA64r $rip, 1, $noreg, @colidx, $noreg, debug-location !393; cg.c:286:9
7344B	  $rsi = LEA64r $rip, 1, $noreg, @rowstr, $noreg, debug-location !393; cg.c:286:9
7360B	  $rdx = LEA64r $rip, 1, $noreg, @x, $noreg, debug-location !393; cg.c:286:9
7376B	  $rcx = LEA64r $rip, 1, $noreg, @z, $noreg, debug-location !393; cg.c:286:9
7392B	  $r8 = LEA64r $rip, 1, $noreg, @a, $noreg, debug-location !393; cg.c:286:9
7408B	  $r9 = LEA64r $rip, 1, $noreg, @p, $noreg, debug-location !393; cg.c:286:9
7424B	  CALL64pcrel32 @conj_grad, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !393; cg.c:286:9
7440B	  ADJCALLSTACKUP64 24, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !393; cg.c:286:9
7456B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !394; cg.c:287:13
7472B	  PCN_STACKMAP 17, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !394 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:287:13
7488B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !394; cg.c:287:13
7504B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags, debug-location !394 :: (dereferenceable load 4 from @timeron); cg.c:287:13
7520B	  JCC_1 %bb.39, 4, implicit killed $eflags, debug-location !396; cg.c:287:13
7536B	  JMP_1 %bb.38, debug-location !396; cg.c:287:13

7552B	bb.38.if.then114:
	; predecessors: %bb.37
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

7568B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !397; cg.c:288:13
7584B	  $edi = MOV32ri 2, debug-location !397; cg.c:288:13
7600B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !397; cg.c:288:13
7616B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !397; cg.c:288:13
7632B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !397; cg.c:288:13
7648B	  PCN_STACKMAP 18, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !397 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:288:13
7664B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !397; cg.c:288:13

7680B	bb.39.if.end115:
	; predecessors: %bb.37, %bb.38
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

7696B	  MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !398 :: (store 8 into %ir.norm_temp1); cg.c:297:20
7728B	  MOV64mr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %204:gr64_with_sub_32bit_in_gr32temp, debug-location !399 :: (store 8 into %ir.norm_temp2); cg.c:298:20
7744B	  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !400 :: (store 4 into %ir.j); cg.c:299:16

7760B	bb.40.for.cond116:
	; predecessors: %bb.39, %bb.41
	  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)

7776B	  %208:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
7808B	  %208:gr32 = nsw SUB32rm %208:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !407 :: (dereferenceable load 4 from @firstcol); cg.c:299:33
7840B	  %208:gr32 = nsw INC32r %208:gr32(tied-def 0), implicit-def dead $eflags, debug-location !408; cg.c:299:44
7856B	  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %208:gr32, implicit-def $eflags, debug-location !409 :: (dereferenceable load 4 from %ir.j); cg.c:299:23
7872B	  JCC_1 %bb.42, 13, implicit killed $eflags, debug-location !410; cg.c:299:9
7888B	  JMP_1 %bb.41, debug-location !410; cg.c:299:9

7904B	bb.41.for.body120:
	; predecessors: %bb.40
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

7920B	  %341:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
7952B	  %248:fr64 = MOVSDrm_alt %199:gr64, 8, %341:gr64_nosp, 0, $noreg, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
7968B	  %246:fr64 = MOVSDrm_alt %198:gr64, 8, %341:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx122)
8000B	  %246:fr64 = MULSDrr %246:fr64(tied-def 0), %248:fr64, debug-location !417; cg.c:300:44
8032B	  %246:fr64 = ADDSDrm %246:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:37
8048B	  MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %246:fr64, debug-location !419 :: (store 8 into %ir.norm_temp1); cg.c:300:24
8080B	  %248:fr64 = MULSDrr %248:fr64(tied-def 0), %248:fr64, debug-location !425; cg.c:301:44
8112B	  %248:fr64 = ADDSDrm %248:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !426 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:37
8128B	  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %248:fr64, debug-location !427 :: (store 8 into %ir.norm_temp2); cg.c:301:24
8160B	  %249:gr32 = LEA64_32r %341:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !428; cg.c:299:50
8176B	  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %249:gr32, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50
8192B	  JMP_1 %bb.40, debug-location !429; cg.c:299:9

8208B	bb.42.for.end135:
	; predecessors: %bb.40
	  successors: %bb.43(0x40000000), %bb.44(0x40000000); %bb.43(50.00%), %bb.44(50.00%)

8224B	  %5:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
8240B	  UCOMISDrr %5:fr64, %210:fr64, implicit-def $eflags, debug-location !434; cg.c:304:26
8256B	  JCC_1 %bb.44, 2, implicit killed $eflags, debug-location !434; cg.c:304:26

8272B	bb.43:
	; predecessors: %bb.42
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

8288B	  %329:fr64 = SQRTSDr %5:fr64
8320B	  JMP_1 %bb.45

8336B	bb.44.call.sqrt4:
	; predecessors: %bb.42
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

8352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !434; cg.c:304:26
8368B	  $xmm0 = COPY %5:fr64, debug-location !434; cg.c:304:26
8384B	  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !434; cg.c:304:26
8400B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !434; cg.c:304:26
8416B	  %329:fr64 = COPY killed $xmm0, debug-location !434; cg.c:304:26

8464B	bb.45.for.end135.split:
	; predecessors: %bb.44, %bb.43
	  successors: %bb.46(0x40000000), %bb.47(0x40000000); %bb.46(50.00%), %bb.47(50.00%)

8496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !434; cg.c:304:26
8512B	  PCN_STACKMAP 19, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %5:fr64, implicit-def dead early-clobber $r11, debug-location !434 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:304:26
8528B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !434; cg.c:304:26
8544B	  %213:fr64 = COPY %212:fr64, debug-location !434; cg.c:304:26
8560B	  %213:fr64 = DIVSDrr %213:fr64(tied-def 0), %329:fr64, debug-location !434; cg.c:304:26
8576B	  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %213:fr64, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
8592B	  %215:fr64 = COPY %212:fr64, debug-location !437; cg.c:306:28
8608B	  %215:fr64 = DIVSDrm %215:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !437 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:28
8640B	  %215:fr64 = ADDSDrr %215:fr64(tied-def 0), %325:fr64, debug-location !438; cg.c:306:22
8656B	  MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %215:fr64, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14
8672B	  CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !442 :: (dereferenceable load 4 from %ir.it); cg.c:307:16
8688B	  JCC_1 %bb.47, 5, implicit killed $eflags, debug-location !443; cg.c:307:13
8704B	  JMP_1 %bb.46, debug-location !443; cg.c:307:13

8720B	bb.46.if.then141:
	; predecessors: %bb.45
	  successors: %bb.47(0x80000000); %bb.47(100.00%)

8736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !444; cg.c:308:13
8768B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_10_____iterat, $noreg, debug-location !444; cg.c:308:13
8784B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !444; cg.c:308:13
8800B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !444; cg.c:308:13
8816B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !444; cg.c:308:13
8832B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !444; cg.c:308:13
8848B	  PCN_STACKMAP 20, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !444 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:308:13
8864B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !444; cg.c:308:13

8880B	bb.47.if.end143:
	; predecessors: %bb.45, %bb.46
	  successors: %bb.48(0x80000000); %bb.48(100.00%)

8896B	  %222:gr32 = MOV32rm %stack.6.it, 1, $noreg, 0, $noreg, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
8912B	  %223:fr64 = MOVSDrm_alt %stack.8.rnorm, 1, $noreg, 0, $noreg, debug-location !446 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
8928B	  %224:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !447 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
8944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !448; cg.c:309:9
8960B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_11______5d___, $noreg, debug-location !448; cg.c:309:9
8976B	  $esi = COPY %222:gr32, debug-location !448; cg.c:309:9
8992B	  $xmm0 = COPY %223:fr64, debug-location !448; cg.c:309:9
9008B	  $xmm1 = COPY %224:fr64, debug-location !448; cg.c:309:9
9024B	  $al = MOV8ri 2, debug-location !448; cg.c:309:9
9040B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !448; cg.c:309:9
9056B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !448; cg.c:309:9
9072B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !449; cg.c:314:16
9088B	  PCN_STACKMAP 21, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %222:gr32, %223:fr64, %224:fr64, implicit-def dead early-clobber $r11, debug-location !449 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:314:16
9104B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !449; cg.c:314:16
9120B	  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !449 :: (store 4 into %ir.j); cg.c:314:16

9136B	bb.48.for.cond145:
	; predecessors: %bb.47, %bb.49
	  successors: %bb.49(0x7c000000), %bb.50(0x04000000); %bb.49(96.88%), %bb.50(3.12%)

9152B	  %231:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
9184B	  %231:gr32 = nsw SUB32rm %231:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !456 :: (dereferenceable load 4 from @firstcol); cg.c:314:33
9216B	  %231:gr32 = nsw INC32r %231:gr32(tied-def 0), implicit-def dead $eflags, debug-location !457; cg.c:314:44
9232B	  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %231:gr32, implicit-def $eflags, debug-location !458 :: (dereferenceable load 4 from %ir.j); cg.c:314:23
9248B	  JCC_1 %bb.50, 13, implicit killed $eflags, debug-location !459; cg.c:314:9
9264B	  JMP_1 %bb.49, debug-location !459; cg.c:314:9

9280B	bb.49.for.body149:
	; predecessors: %bb.48
	  successors: %bb.48(0x80000000); %bb.48(100.00%)

9296B	  %237:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
9312B	  %343:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
9360B	  %237:fr64 = MULSDrm %237:fr64(tied-def 0), %199:gr64, 8, %343:gr64_nosp, 0, $noreg, debug-location !464 :: (load 8 from %ir.arrayidx151); cg.c:315:31
9376B	  MOVSDmr %198:gr64, 8, %343:gr64_nosp, 0, $noreg, %237:fr64, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
9408B	  %239:gr32 = LEA64_32r %343:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !468; cg.c:314:50
9424B	  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %239:gr32, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50
9440B	  JMP_1 %bb.48, debug-location !469; cg.c:314:9

9456B	bb.50.for.end157:
	; predecessors: %bb.48
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

9472B	  INC32m %stack.6.it, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !472 :: (store 4 into %ir.it), (dereferenceable load 4 from %ir.it); cg.c:279:33
9488B	  JMP_1 %bb.34, debug-location !473; cg.c:279:5

9504B	bb.51.for.end160:
	; predecessors: %bb.34
	  successors: %bb.52(0x40000000), %bb.55(0x40000000); %bb.52(50.00%), %bb.55(50.00%)

9520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !476; cg.c:321:5
9552B	  $edi = MOV32ri 1, debug-location !476; cg.c:321:5
9568B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !476; cg.c:321:5
9584B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !476; cg.c:321:5
9600B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !477; cg.c:327:9
9616B	  PCN_STACKMAP 22, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !477 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:327:9
9632B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !477; cg.c:327:9
9648B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !477; cg.c:327:9
9664B	  $edi = MOV32ri 1, debug-location !477; cg.c:327:9
9680B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !477; cg.c:327:9
9696B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !477; cg.c:327:9
9712B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !478; cg.c:327:7
9728B	  PCN_STACKMAP 23, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !478 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:327:7
9744B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !478; cg.c:327:7
9760B	  %83:fr64 = COPY killed $xmm0, debug-location !477; cg.c:327:9
9776B	  MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %83:fr64, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7
9792B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !479; cg.c:329:5
9856B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_12__Benchmark, $noreg, debug-location !479; cg.c:329:5
9872B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !479; cg.c:329:5
9888B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !479; cg.c:329:5
9904B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !479; cg.c:329:5
9920B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !480; cg.c:331:13
9936B	  PCN_STACKMAP 24, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !480 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:331:13
9952B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !480; cg.c:331:13
9968B	  %88:gr64 = MOV64ri 4457293557087583675
9984B	  MOV64mr %stack.17.epsilon, 1, $noreg, 0, $noreg, %88:gr64, debug-location !480 :: (store 8 into %ir.epsilon); cg.c:331:13
10000B	  CMP8mi %stack.14.Class, 1, $noreg, 0, $noreg, 85, implicit-def $eflags, debug-location !483 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:15
10016B	  JCC_1 %bb.55, 4, implicit killed $eflags, debug-location !484; cg.c:332:9
10032B	  JMP_1 %bb.52, debug-location !484; cg.c:332:9

10048B	bb.52.if.then169:
	; predecessors: %bb.51
	  successors: %bb.53(0x40000000), %bb.54(0x40000000); %bb.53(50.00%), %bb.54(50.00%)

10064B	  %101:vr128 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
10080B	  %98:fr64 = MOVSDrm_alt %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, debug-location !487 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
10112B	  %101:vr128 = SUBSDrr %101:vr128(tied-def 0), %98:fr64, debug-location !488; cg.c:333:25
10160B	  %101:vr128 = PANDrm %101:vr128(tied-def 0), $rip, 1, $noreg, %const.1, $noreg, debug-location !489 :: (load 16 from constant-pool); cg.c:333:15
10208B	  %101:vr128 = DIVSDrr %101:vr128(tied-def 0), %98:fr64, debug-location !491; cg.c:333:46
10224B	  MOVSDmr %stack.18.err, 1, $noreg, 0, $noreg, %101:vr128, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13
10240B	  %104:fr64 = MOVSDrm_alt %stack.17.epsilon, 1, $noreg, 0, $noreg, debug-location !495 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
10256B	  UCOMISDrr %104:fr64, %101:vr128, implicit-def $eflags, debug-location !496; cg.c:334:17
10272B	  JCC_1 %bb.54, 2, implicit killed $eflags, debug-location !497; cg.c:334:13
10288B	  JMP_1 %bb.53, debug-location !497; cg.c:334:13

10304B	bb.53.if.then174:
	; predecessors: %bb.52
	  successors: %bb.56(0x80000000); %bb.56(100.00%)

10320B	  %116:gr32 = MOV32ri 1
10336B	  MOV32mr %stack.15.verified, 1, $noreg, 0, $noreg, %116:gr32, debug-location !498 :: (store 4 into %ir.verified); cg.c:335:22
10352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !500; cg.c:336:13
10416B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_13__VERIFICAT, $noreg, debug-location !500; cg.c:336:13
10432B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !500; cg.c:336:13
10448B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !500; cg.c:336:13
10464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !500; cg.c:336:13
10480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !501; cg.c:337:45
10496B	  PCN_STACKMAP 25, 0, 0, %stack.14.Class, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, implicit-def dead early-clobber $r11, debug-location !501 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta); cg.c:337:45
10512B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !501; cg.c:337:45
10528B	  %121:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !501 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
10544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !502; cg.c:337:13
10592B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_14__Zeta_is__, $noreg, debug-location !502; cg.c:337:13
10608B	  $xmm0 = COPY %121:fr64, debug-location !502; cg.c:337:13
10624B	  $al = MOV8ri 1, debug-location !502; cg.c:337:13
10640B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !502; cg.c:337:13
10656B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !502; cg.c:337:13
10672B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !503; cg.c:338:45
10688B	  PCN_STACKMAP 26, 0, 0, %stack.14.Class, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, %121:fr64, implicit-def dead early-clobber $r11, debug-location !503 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4); cg.c:338:45
10704B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !503; cg.c:338:45
10720B	  %125:fr64 = MOVSDrm_alt %stack.18.err, 1, $noreg, 0, $noreg, debug-location !503 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
10736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !504; cg.c:338:13
10768B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_15__Error_is_, $noreg, debug-location !504; cg.c:338:13
10784B	  $xmm0 = COPY %125:fr64, debug-location !504; cg.c:338:13
10800B	  $al = MOV8ri 1, debug-location !504; cg.c:338:13
10816B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !504; cg.c:338:13
10832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !504; cg.c:338:13
10848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !505; cg.c:339:9
10864B	  PCN_STACKMAP 27, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, %125:fr64, implicit-def dead early-clobber $r11, debug-location !505 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4); cg.c:339:9
10880B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !505; cg.c:339:9
10896B	  JMP_1 %bb.56, debug-location !505; cg.c:339:9

10912B	bb.54.if.else178:
	; predecessors: %bb.52
	  successors: %bb.56(0x80000000); %bb.56(100.00%)

10928B	  MOV32mi %stack.15.verified, 1, $noreg, 0, $noreg, 0, debug-location !506 :: (store 4 into %ir.verified); cg.c:341:22
10944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !508; cg.c:342:13
11008B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_16__VERIFICAT, $noreg, debug-location !508; cg.c:342:13
11024B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !508; cg.c:342:13
11040B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !508; cg.c:342:13
11056B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !508; cg.c:342:13
11072B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !509; cg.c:343:54
11088B	  PCN_STACKMAP 28, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $r11, debug-location !509 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:343:54
11104B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !509; cg.c:343:54
11120B	  %109:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !509 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
11136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !510; cg.c:343:13
11184B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_17__Zeta_____, $noreg, debug-location !510; cg.c:343:13
11200B	  $xmm0 = COPY %109:fr64, debug-location !510; cg.c:343:13
11216B	  $al = MOV8ri 1, debug-location !510; cg.c:343:13
11232B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !510; cg.c:343:13
11248B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !510; cg.c:343:13
11264B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !511; cg.c:344:54
11280B	  PCN_STACKMAP 29, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.16.zeta_verify_value, 0, %109:fr64, implicit-def dead early-clobber $r11, debug-location !511 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.16.zeta_verify_value); cg.c:344:54
11296B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !511; cg.c:344:54
11312B	  %113:fr64 = MOVSDrm_alt %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, debug-location !511 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
11328B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !512; cg.c:344:13
11360B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_18__The_corre, $noreg, debug-location !512; cg.c:344:13
11376B	  $xmm0 = COPY %113:fr64, debug-location !512; cg.c:344:13
11392B	  $al = MOV8ri 1, debug-location !512; cg.c:344:13
11408B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !512; cg.c:344:13
11424B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !512; cg.c:344:13
11440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11456B	  PCN_STACKMAP 30, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, %113:fr64, implicit-def dead early-clobber $r11 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4)
11472B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11488B	  JMP_1 %bb.56

11504B	bb.55.if.else183:
	; predecessors: %bb.51
	  successors: %bb.56(0x80000000); %bb.56(100.00%)

11520B	  MOV32mi %stack.15.verified, 1, $noreg, 0, $noreg, 0, debug-location !513 :: (store 4 into %ir.verified); cg.c:348:18
11536B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !515; cg.c:349:9
11600B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_19__Problem_s, $noreg, debug-location !515; cg.c:349:9
11616B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !515; cg.c:349:9
11632B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !515; cg.c:349:9
11648B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !515; cg.c:349:9
11664B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !516; cg.c:350:9
11680B	  PCN_STACKMAP 31, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, implicit-def dead early-clobber $r11, debug-location !516 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4); cg.c:350:9
11696B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !516; cg.c:350:9
11712B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !516; cg.c:350:9
11744B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_20__NO_VERIFI, $noreg, debug-location !516; cg.c:350:9
11760B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !516; cg.c:350:9
11776B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !516; cg.c:350:9
11792B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !516; cg.c:350:9
11808B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
11824B	  PCN_STACKMAP 32, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, implicit-def dead early-clobber $r11 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4)
11840B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

11856B	bb.56.if.end186:
	; predecessors: %bb.55, %bb.54, %bb.53
	  successors: %bb.57(0x50000000), %bb.58(0x30000000); %bb.57(62.50%), %bb.58(37.50%)

11872B	  %128:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
11888B	  %129:fr64 = FsFLD0SD
11904B	  UCOMISDrr %128:fr64, %129:fr64, implicit-def $eflags, debug-location !520; cg.c:353:9
11920B	  JCC_1 %bb.57, 5, implicit $eflags, debug-location !520; cg.c:353:9
11936B	  JCC_1 %bb.57, 10, implicit killed $eflags, debug-location !520; cg.c:353:9
11952B	  JMP_1 %bb.58, debug-location !520; cg.c:353:9

11968B	bb.57.if.then189:
	; predecessors: %bb.56
	  successors: %bb.59(0x80000000); %bb.59(100.00%)

11984B	  %132:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
12016B	  %132:fr64 = DIVSDrm %132:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !523 :: (dereferenceable load 8 from %ir.t); cg.c:356:73
12048B	  %132:fr64 = DIVSDrm %132:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !524 :: (load 8 from constant-pool); cg.c:357:20
12064B	  MOVSDmr %stack.12.mflops, 1, $noreg, 0, $noreg, %132:fr64, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16
12080B	  JMP_1 %bb.59, debug-location !526; cg.c:358:5

12096B	bb.58.if.else192:
	; predecessors: %bb.56
	  successors: %bb.59(0x80000000); %bb.59(100.00%)

12112B	  MOV64mi32 %stack.12.mflops, 1, $noreg, 0, $noreg, 0, debug-location !527 :: (store 8 into %ir.mflops); cg.c:360:16

12128B	bb.59.if.end193:
	; predecessors: %bb.58, %bb.57
	  successors: %bb.60(0x50000000), %bb.69(0x30000000); %bb.60(62.50%), %bb.69(37.50%)

12144B	  %133:gr32 = MOVSX32rm8 %stack.14.Class, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
12176B	  %135:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !530 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
12192B	  %136:fr64 = MOVSDrm_alt %stack.12.mflops, 1, $noreg, 0, $noreg, debug-location !531 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
12208B	  %137:gr32 = MOV32rm %stack.15.verified, 1, $noreg, 0, $noreg, debug-location !532 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
12224B	  ADJCALLSTACKDOWN64 88, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !533; cg.c:363:5
12240B	  %138:gr64 = LEA64r $rip, 1, $noreg, @cg__str_31_randdp_, $noreg, debug-location !533; cg.c:363:5
12272B	  MOV64mr $rsp, 1, $noreg, 80, $noreg, %138:gr64, debug-location !533 :: (store 8 into stack + 80); cg.c:363:5
12288B	  %140:gr64 = LEA64r $rip, 1, $noreg, @cg__str_30__O3__mcmod, $noreg, debug-location !533; cg.c:363:5
12304B	  MOV64mr $rsp, 1, $noreg, 72, $noreg, %140:gr64, debug-location !533 :: (store 8 into stack + 72); cg.c:363:5
12320B	  %141:gr64 = LEA64r $rip, 1, $noreg, @cg__str_29__g__Wall__, $noreg, debug-location !533; cg.c:363:5
12336B	  MOV64mr $rsp, 1, $noreg, 64, $noreg, %141:gr64, debug-location !533 :: (store 8 into stack + 64); cg.c:363:5
12352B	  %142:gr64 = LEA64r $rip, 1, $noreg, @cg__str_28__I___commo, $noreg, debug-location !533; cg.c:363:5
12368B	  MOV64mr $rsp, 1, $noreg, 56, $noreg, %142:gr64, debug-location !533 :: (store 8 into stack + 56); cg.c:363:5
12384B	  %143:gr64 = LEA64r $rip, 1, $noreg, @cg__str_27__lm_, $noreg, debug-location !533; cg.c:363:5
12400B	  MOV64mr $rsp, 1, $noreg, 48, $noreg, %143:gr64, debug-location !533 :: (store 8 into stack + 48); cg.c:363:5
12416B	  %144:gr64 = LEA64r $rip, 1, $noreg, @cg__str_26___CC__, $noreg, debug-location !533; cg.c:363:5
12432B	  MOV64mr $rsp, 1, $noreg, 40, $noreg, %144:gr64, debug-location !533 :: (store 8 into stack + 40); cg.c:363:5
12448B	  %145:gr64 = LEA64r $rip, 1, $noreg, @cg__str_25_gcc_, $noreg, debug-location !533; cg.c:363:5
12464B	  MOV64mr $rsp, 1, $noreg, 32, $noreg, %145:gr64, debug-location !533 :: (store 8 into stack + 32); cg.c:363:5
12480B	  %146:gr64 = LEA64r $rip, 1, $noreg, @cg__str_24_03_Nov_201, $noreg, debug-location !533; cg.c:363:5
12496B	  MOV64mr $rsp, 1, $noreg, 24, $noreg, %146:gr64, debug-location !533 :: (store 8 into stack + 24); cg.c:363:5
12512B	  %147:gr64 = LEA64r $rip, 1, $noreg, @cg__str_23_3_3_1_, $noreg, debug-location !533; cg.c:363:5
12528B	  MOV64mr $rsp, 1, $noreg, 16, $noreg, %147:gr64, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
12544B	  MOV32mr $rsp, 1, $noreg, 8, $noreg, %137:gr32, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
12560B	  %148:gr64 = LEA64r $rip, 1, $noreg, @cg__str_22___________, $noreg, debug-location !533; cg.c:363:5
12576B	  MOV64mr $rsp, 1, $noreg, 0, $noreg, %148:gr64, debug-location !533 :: (store 8 into stack); cg.c:363:5
12640B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_21_CG_, $noreg, debug-location !533; cg.c:363:5
12656B	  $esi = COPY %133:gr32, debug-location !533; cg.c:363:5
12672B	  $edx = MOV32ri 75000, debug-location !533; cg.c:363:5
12688B	  $ecx = MOV32ri 0, debug-location !533; cg.c:363:5
12704B	  $r8d = MOV32r0 implicit-def dead $eflags, debug-location !533; cg.c:363:5
12720B	  $r9d = MOV32ri 75, debug-location !533; cg.c:363:5
12736B	  $xmm0 = COPY %135:fr64, debug-location !533; cg.c:363:5
12752B	  $xmm1 = COPY %136:fr64, debug-location !533; cg.c:363:5
12768B	  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !533; cg.c:363:5
12784B	  ADJCALLSTACKUP64 88, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !533; cg.c:363:5
12800B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !534; cg.c:370:9
12816B	  PCN_STACKMAP 33, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %133.sub_8bit:gr32, %135:fr64, %136:fr64, %137:gr32, implicit-def dead early-clobber $r11, debug-location !534 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:370:9
12832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !534; cg.c:370:9
12848B	  CMP32mi $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags, debug-location !534 :: (dereferenceable load 4 from @timeron); cg.c:370:9
12864B	  JCC_1 %bb.69, 4, implicit killed $eflags, debug-location !536; cg.c:370:9
12880B	  JMP_1 %bb.60, debug-location !536; cg.c:370:9

12896B	bb.60.if.then195:
	; predecessors: %bb.59
	  successors: %bb.61(0x50000000), %bb.62(0x30000000); %bb.61(62.50%), %bb.62(37.50%)

12912B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !537; cg.c:371:16
12944B	  $edi = MOV32ri 1, debug-location !537; cg.c:371:16
12960B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !537; cg.c:371:16
12976B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !537; cg.c:371:16
12992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !539; cg.c:371:14
13008B	  PCN_STACKMAP 34, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, implicit-def dead early-clobber $r11, debug-location !539 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:371:14
13024B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !539; cg.c:371:14
13040B	  %153:fr64 = COPY killed $xmm0, debug-location !537; cg.c:371:16
13056B	  MOVSDmr %stack.13.tmax, 1, $noreg, 0, $noreg, %153:fr64, debug-location !539 :: (store 8 into %ir.tmax); cg.c:371:14
13072B	  %154:fr64 = FsFLD0SD
13088B	  UCOMISDrr %153:fr64, %154:fr64, implicit-def $eflags, debug-location !543; cg.c:372:13
13104B	  JCC_1 %bb.62, 5, implicit $eflags, debug-location !543; cg.c:372:13
13120B	  JCC_1 %bb.62, 10, implicit killed $eflags, debug-location !543; cg.c:372:13
13136B	  JMP_1 %bb.61, debug-location !543; cg.c:372:13

13152B	bb.61.if.then199:
	; predecessors: %bb.60
	  successors: %bb.62(0x80000000); %bb.62(100.00%)

13168B	  %155:gr64 = MOV64ri 4607182418800017408
13184B	  MOV64mr %stack.13.tmax, 1, $noreg, 0, $noreg, %155:gr64, debug-location !544 :: (store 8 into %ir.tmax); cg.c:373:18

13200B	bb.62.if.end200:
	; predecessors: %bb.60, %bb.61
	  successors: %bb.63(0x80000000); %bb.63(100.00%)

13216B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !546; cg.c:374:9
13280B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_32___SECTION_, $noreg, debug-location !546; cg.c:374:9
13296B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !546; cg.c:374:9
13312B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !546; cg.c:374:9
13328B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !546; cg.c:374:9
13344B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !547; cg.c:375:16
13360B	  PCN_STACKMAP 35, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, implicit-def dead early-clobber $r11, debug-location !547 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:375:16
13376B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !547; cg.c:375:16
13392B	  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
13408B	  %185:gr64 = LEA64r %stack.19.t_names, 1, $noreg, 0, $noreg
13456B	  %326:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)

13536B	bb.63.for.cond202:
	; predecessors: %bb.62, %bb.68
	  successors: %bb.64(0x7c000000), %bb.69(0x04000000); %bb.64(96.88%), %bb.69(3.12%)

13552B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !552 :: (dereferenceable load 4 from %ir.i); cg.c:375:23
13568B	  JCC_1 %bb.69, 15, implicit killed $eflags, debug-location !553; cg.c:375:9
13584B	  JMP_1 %bb.64, debug-location !553; cg.c:375:9

13600B	bb.64.for.body205:
	; predecessors: %bb.63
	  successors: %bb.65(0x30000000), %bb.66(0x50000000); %bb.65(37.50%), %bb.66(62.50%)

13616B	  %163:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !554 :: (dereferenceable load 4 from %ir.i); cg.c:376:28
13632B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !556; cg.c:376:17
13648B	  $edi = COPY %163:gr32, debug-location !556; cg.c:376:17
13664B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !556; cg.c:376:17
13680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !556; cg.c:376:17
13696B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !557; cg.c:376:15
13712B	  PCN_STACKMAP 36, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %163:gr32, implicit-def dead early-clobber $r11, debug-location !557 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:376:15
13728B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !557; cg.c:376:15
13744B	  %164:fr64 = COPY killed $xmm0, debug-location !556; cg.c:376:17
13760B	  MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %164:fr64, debug-location !557 :: (store 8 into %ir.t); cg.c:376:15
13776B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !560 :: (dereferenceable load 4 from %ir.i); cg.c:377:19
13792B	  JCC_1 %bb.66, 5, implicit killed $eflags, debug-location !561; cg.c:377:17
13808B	  JMP_1 %bb.65, debug-location !561; cg.c:377:17

13824B	bb.65.if.then209:
	; predecessors: %bb.64
	  successors: %bb.68(0x80000000); %bb.68(100.00%)

13840B	  %184:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
13856B	  %186:gr64 = MOV64rm %185:gr64, 8, %184:gr64_nosp, 0, $noreg, debug-location !564 :: (load 8 from %ir.arrayidx211); cg.c:378:41
13872B	  %187:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !565 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
13888B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !566; cg.c:378:17
13904B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_33____8s__9_3, $noreg, debug-location !566; cg.c:378:17
13920B	  $rsi = COPY %186:gr64, debug-location !566; cg.c:378:17
13936B	  $xmm0 = COPY %187:fr64, debug-location !566; cg.c:378:17
13952B	  $al = MOV8ri 1, debug-location !566; cg.c:378:17
13968B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !566; cg.c:378:17
13984B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !566; cg.c:378:17
14000B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !567; cg.c:379:13
14016B	  PCN_STACKMAP 37, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %186:gr64, %187:fr64, implicit-def dead early-clobber $r11, debug-location !567 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:379:13
14032B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !567; cg.c:379:13
14048B	  JMP_1 %bb.68, debug-location !567; cg.c:379:13

14064B	bb.66.if.else213:
	; predecessors: %bb.64
	  successors: %bb.67(0x40000000), %bb.68(0x40000000); %bb.67(50.00%), %bb.68(50.00%)

14080B	  %165:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
14096B	  %167:gr64 = MOV64rm %185:gr64, 8, %165:gr64_nosp, 0, $noreg, debug-location !570 :: (load 8 from %ir.arrayidx215); cg.c:381:52
14112B	  %168:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
14128B	  %170:fr64 = COPY %168:fr64, debug-location !573; cg.c:382:26
14144B	  %170:fr64 = MULSDrr %170:fr64(tied-def 0), %326:fr64, debug-location !573; cg.c:382:26
14176B	  %170:fr64 = DIVSDrm %170:fr64(tied-def 0), %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !575 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:34
14192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !576; cg.c:381:17
14208B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_34____8s__9_3, $noreg, debug-location !576; cg.c:381:17
14224B	  $rsi = COPY %167:gr64, debug-location !576; cg.c:381:17
14240B	  $xmm0 = COPY %168:fr64, debug-location !576; cg.c:381:17
14256B	  $xmm1 = COPY %170:fr64, debug-location !576; cg.c:381:17
14272B	  $al = MOV8ri 2, debug-location !576; cg.c:381:17
14288B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !576; cg.c:381:17
14304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !576; cg.c:381:17
14320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !577; cg.c:383:21
14336B	  PCN_STACKMAP 38, 0, %170:fr64, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %167:gr64, %168:fr64, implicit-def dead early-clobber $r11, debug-location !577 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:383:21
14352B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !577; cg.c:383:21
14368B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !579 :: (dereferenceable load 4 from %ir.i); cg.c:383:23
14384B	  JCC_1 %bb.68, 5, implicit killed $eflags, debug-location !580; cg.c:383:21
14400B	  JMP_1 %bb.67, debug-location !580; cg.c:383:21

14416B	bb.67.if.then221:
	; predecessors: %bb.66
	  successors: %bb.68(0x80000000); %bb.68(100.00%)

14432B	  %176:fr64 = MOVSDrm_alt %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
14448B	  %177:fr64 = COPY %176:fr64, debug-location !584; cg.c:384:30
14464B	  %177:fr64 = SUBSDrm %177:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !584 :: (dereferenceable load 8 from %ir.t); cg.c:384:30
14480B	  MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %177:fr64, debug-location !585 :: (store 8 into %ir.t); cg.c:384:23
14496B	  %179:fr64 = COPY %177:fr64, debug-location !588; cg.c:386:30
14512B	  %179:fr64 = MULSDrr %179:fr64(tied-def 0), %326:fr64, debug-location !588; cg.c:386:30
14544B	  %179:fr64 = DIVSDrr %179:fr64(tied-def 0), %176:fr64, debug-location !590; cg.c:386:38
14560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !591; cg.c:385:21
14576B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_35__________8, $noreg, debug-location !591; cg.c:385:21
14592B	  $rsi = LEA64r $rip, 1, $noreg, @cg__str_36_rest_, $noreg, debug-location !591; cg.c:385:21
14608B	  $xmm0 = COPY %177:fr64, debug-location !591; cg.c:385:21
14624B	  $xmm1 = COPY %179:fr64, debug-location !591; cg.c:385:21
14640B	  $al = MOV8ri 2, debug-location !591; cg.c:385:21
14656B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !591; cg.c:385:21
14672B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !591; cg.c:385:21
14688B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !592; cg.c:387:17
14704B	  PCN_STACKMAP 39, 0, %179:fr64, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %177:fr64, implicit-def dead early-clobber $r11, debug-location !592 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:387:17
14720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !592; cg.c:387:17

14736B	bb.68.if.end227:
	; predecessors: %bb.66, %bb.67, %bb.65
	  successors: %bb.63(0x80000000); %bb.63(100.00%)

14752B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !593 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:375:34
14768B	  JMP_1 %bb.63, debug-location !594; cg.c:375:9

14784B	bb.69.if.end231:
	; predecessors: %bb.59, %bb.63

14816B	  $eax = MOV32r0 implicit-def dead $eflags, debug-location !597; cg.c:394:5
14832B	  RET 0, killed $eax, debug-location !597; cg.c:394:5

# End machine code for function main.

Before MISched:
# Machine code for function makea: NoPHIs, TracksLiveness
Frame Objects:
  fi#-7: size=8, align=16, fixed, at location [SP+56]
  fi#-6: size=8, align=8, fixed, at location [SP+48]
  fi#-5: size=8, align=16, fixed, at location [SP+40]
  fi#-4: size=8, align=8, fixed, at location [SP+32]
  fi#-3: size=4, align=16, fixed, at location [SP+24]
  fi#-2: size=4, align=8, fixed, at location [SP+16]
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: dead
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=56, align=16, at location [SP+8]
  fi#18: size=112, align=16, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e-01, align=8
  cp#1: 6.000000e+01, align=8
  cp#2: 5.000000e-01, align=8
Function Live Ins: $edi in %0, $esi in %1, $rdx in %2, $rcx in %3, $r8 in %4, $r9d in %5

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi, $rdx, $rcx, $r8, $r9d
  %5:gr32 = COPY $r9d
  %4:gr64 = COPY $r8
  %3:gr64 = COPY $rcx
  %2:gr64 = COPY $rdx
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
  MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
  MOV64mr %stack.2.a.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.a.addr)
  MOV64mr %stack.3.colidx.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.colidx.addr)
  MOV64mr %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.rowstr.addr)
  MOV32mr %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.firstrow.addr)
  %6:gr32 = MOV32ri 1
  MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %6:gr32, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9

bb.1.do.body:
; predecessors: %bb.0, %bb.1
  successors: %bb.1(0x7c000000), %bb.2(0x04000000); %bb.1(96.88%), %bb.2(3.12%)

  %8:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  %8:gr32 = ADD32rr %8:gr32(tied-def 0), %8:gr32, implicit-def dead $eflags, debug-location !645; cg.c:611:17
  MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %8:gr32, debug-location !646 :: (store 4 into %ir.nn1); cg.c:611:13
  CMP32rm %8:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !649 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:18
  JCC_1 %bb.1, 12, implicit killed $eflags, debug-location !650; cg.c:612:5
  JMP_1 %bb.2, debug-location !650; cg.c:612:5

bb.2.do.end:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi %stack.13.iouter, 1, $noreg, 0, $noreg, 0, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
  %27:gr32 = MOV32ri 13
  %30:gr64 = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg
  %31:gr64 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg
  %36:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  %47:gr64 = MOV32ri64 56
  %54:gr64 = MOV32ri64 112

bb.3.for.cond:
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %10:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  CMP32rm %10:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !659 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:29
  JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !660; cg.c:617:5
  JMP_1 %bb.4, debug-location !660; cg.c:617:5

bb.4.for.body:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mr %stack.15.nzv, 1, $noreg, 0, $noreg, %27:gr32, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13
  %28:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  %29:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !665 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !668; cg.c:619:9
  $edi = COPY %28:gr32, debug-location !668; cg.c:619:9
  $esi = MOV32ri 13, debug-location !668; cg.c:619:9
  $edx = COPY %29:gr32, debug-location !668; cg.c:619:9
  $rcx = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg, debug-location !668; cg.c:619:9
  $r8 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg, debug-location !668; cg.c:619:9
  CALL64pcrel32 @sprnvc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, debug-location !668; cg.c:619:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !668; cg.c:619:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !669; cg.c:620:16
  PCN_STACKMAP 0, 0, 0, %stack.2.a.addr, 0, 0, %fixed-stack.2, 0, 0, %fixed-stack.1, 0, 0, %fixed-stack.3, 0, 0, %stack.18.vc, 0, 0, %stack.17.ivc, 0, 0, %stack.3.colidx.addr, 0, 0, %stack.5.firstrow.addr, 0, 0, %stack.13.iouter, 0, 0, %fixed-stack.0, 0, 0, %stack.17.ivc, 0, 0, %stack.14.ivelt, 0, 0, %fixed-stack.6, 0, 0, %stack.0.n.addr, 0, 0, %stack.16.nn1, 0, 0, %stack.1.nz.addr, 0, 0, %stack.15.nzv, 0, 0, %stack.4.rowstr.addr, 0, 0, %stack.18.vc, 0, %28:gr32, %27:gr32, %29:gr32, implicit-def dead early-clobber $r11, debug-location !669 :: (load 8 from %stack.2.a.addr), (load 8 from %fixed-stack.2, align 16), (load 8 from %fixed-stack.1), (load 8 from %fixed-stack.3), (load 8 from %stack.18.vc, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.3.colidx.addr), (load 8 from %stack.5.firstrow.addr, align 4), (load 8 from %stack.13.iouter, align 4), (load 8 from %fixed-stack.0, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.14.ivelt, align 4), (load 8 from %fixed-stack.6, align 16), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.16.nn1, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.15.nzv, align 4), (load 8 from %stack.4.rowstr.addr), (load 8 from %stack.18.vc, align 16); cg.c:620:16
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !669; cg.c:620:16
  %32:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  %34:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  %34:gr32 = nsw INC32r %34:gr32(tied-def 0), implicit-def dead $eflags, debug-location !673; cg.c:620:41
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !674; cg.c:620:9
  $edi = COPY %32:gr32, debug-location !674; cg.c:620:9
  $rsi = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
  $rdx = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
  $rcx = LEA64r %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
  $r8d = COPY %34:gr32, debug-location !674; cg.c:620:9
  $xmm0 = COPY %36:fr64, debug-location !674; cg.c:620:9
  CALL64pcrel32 @vecset, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, debug-location !674; cg.c:620:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !674; cg.c:620:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !675; cg.c:621:24
  PCN_STACKMAP 1, 0, 0, %stack.2.a.addr, 0, 0, %fixed-stack.2, 0, %34:gr32, 0, %fixed-stack.1, 0, 0, %fixed-stack.3, 0, 0, %stack.18.vc, 0, 0, %stack.17.ivc, 0, 0, %stack.3.colidx.addr, 0, 0, %stack.5.firstrow.addr, 0, 0, %stack.13.iouter, 0, 0, %fixed-stack.0, 0, 0, %stack.17.ivc, 0, 0, %stack.14.ivelt, 0, 0, %fixed-stack.6, 0, 0, %stack.0.n.addr, 0, 0, %stack.16.nn1, 0, 0, %stack.1.nz.addr, 0, 0, %stack.15.nzv, 0, 0, %stack.4.rowstr.addr, 0, 0, %stack.18.vc, 0, %32:gr32, implicit-def dead early-clobber $r11, debug-location !675 :: (load 8 from %stack.2.a.addr), (load 8 from %fixed-stack.2, align 16), (load 8 from %fixed-stack.1), (load 8 from %fixed-stack.3), (load 8 from %stack.18.vc, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.3.colidx.addr), (load 8 from %stack.5.firstrow.addr, align 4), (load 8 from %stack.13.iouter, align 4), (load 8 from %fixed-stack.0, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.14.ivelt, align 4), (load 8 from %fixed-stack.6, align 16), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.16.nn1, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.15.nzv, align 4), (load 8 from %stack.4.rowstr.addr), (load 8 from %stack.18.vc, align 16); cg.c:621:24
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !675; cg.c:621:24
  %37:gr32 = MOV32rm %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  %38:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !676 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  %39:gr64_nosp = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !677 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  MOV32mr %38:gr64, 4, %39:gr64_nosp, 0, $noreg, %37:gr32, debug-location !678 :: (store 4 into %ir.arrayidx); cg.c:621:22
  MOV32mi %stack.14.ivelt, 1, $noreg, 0, $noreg, 0, debug-location !679 :: (store 4 into %ir.ivelt); cg.c:623:20

bb.5.for.cond5:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %40:gr32 = MOV32rm %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
  CMP32rm %40:gr32, %stack.15.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !685 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:31
  JCC_1 %bb.7, 13, implicit killed $eflags, debug-location !686; cg.c:623:9
  JMP_1 %bb.6, debug-location !686; cg.c:623:9

bb.6.for.body7:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %42:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
  %45:gr32 = MOV32rm %31:gr64, 4, %42:gr64_nosp, 0, $noreg, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
  %45:gr32 = DEC32r %45:gr32(tied-def 0), implicit-def dead $eflags, debug-location !690; cg.c:624:46
  %49:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !692 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
  %49:gr64 = IMUL64rr %49:gr64(tied-def 0), %47:gr64, implicit-def dead $eflags, debug-location !691; cg.c:624:13
  %49:gr64 = ADD64rm %49:gr64(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
  MOV32mr %49:gr64, 4, %42:gr64_nosp, 0, $noreg, %45:gr32, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
  %50:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !695 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
  %52:fr64 = MOVSDrm_alt %30:gr64, 8, %50:gr64_nosp, 0, $noreg, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
  %56:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
  %56:gr64 = IMUL64rr %56:gr64(tied-def 0), %54:gr64, implicit-def dead $eflags, debug-location !697; cg.c:625:13
  %56:gr64 = ADD64rm %56:gr64(tied-def 0), %fixed-stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
  MOVSDmr %56:gr64, 8, %50:gr64_nosp, 0, $noreg, %52:fr64, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
  INC32m %stack.14.ivelt, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !701 :: (store 4 into %ir.ivelt), (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
  JMP_1 %bb.5, debug-location !702; cg.c:623:9

bb.7.for.end:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  INC32m %stack.13.iouter, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !705 :: (store 4 into %ir.iouter), (dereferenceable load 4 from %ir.iouter); cg.c:617:40
  JMP_1 %bb.3, debug-location !706; cg.c:617:5

bb.8.for.end22:
; predecessors: %bb.3

  %12:gr64 = MOV64rm %stack.2.a.addr, 1, $noreg, 0, $noreg, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
  %13:gr64 = MOV64rm %stack.3.colidx.addr, 1, $noreg, 0, $noreg, debug-location !710 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
  %14:gr64 = MOV64rm %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  %15:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !712 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
  %16:gr32 = MOV32rm %stack.1.nz.addr, 1, $noreg, 0, $noreg, debug-location !713 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
  %17:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !714 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
  %18:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !715 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
  %19:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !716 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
  %20:gr32 = MOV32rm %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, debug-location !717 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
  %21:gr32 = MOV32rm %fixed-stack.6, 1, $noreg, 0, $noreg, debug-location !718 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
  %22:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !719 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21
  ADJCALLSTACKDOWN64 48, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !720; cg.c:633:5
  MOV64mr $rsp, 1, $noreg, 40, $noreg, %22:gr64, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
  MOV32mr $rsp, 1, $noreg, 32, $noreg, %21:gr32, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
  MOV32mr $rsp, 1, $noreg, 24, $noreg, %20:gr32, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
  MOV64mr $rsp, 1, $noreg, 16, $noreg, %19:gr64, debug-location !720 :: (store 8 into stack + 16); cg.c:633:5
  MOV64mr $rsp, 1, $noreg, 8, $noreg, %18:gr64, debug-location !720 :: (store 8 into stack + 8); cg.c:633:5
  MOV64mr $rsp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !720 :: (store 8 into stack); cg.c:633:5
  %25:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  $rdi = COPY %12:gr64, debug-location !720; cg.c:633:5
  $rsi = COPY %13:gr64, debug-location !720; cg.c:633:5
  $rdx = COPY %14:gr64, debug-location !720; cg.c:633:5
  $ecx = COPY %15:gr32, debug-location !720; cg.c:633:5
  $r8d = COPY %16:gr32, debug-location !720; cg.c:633:5
  $r9d = MOV32ri 13, debug-location !720; cg.c:633:5
  $xmm0 = COPY %25:fr64, debug-location !720; cg.c:633:5
  $xmm1 = COPY %26:fr64, debug-location !720; cg.c:633:5
  CALL64pcrel32 @sparse, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, implicit $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !720; cg.c:633:5
  ADJCALLSTACKUP64 48, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !720; cg.c:633:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !721; cg.c:635:1
  PCN_STACKMAP 2, 0, %12:gr64, %13:gr64, %14:gr64, %15:gr32, %16:gr32, %17:gr64, %18:gr64, %19:gr64, %20:gr32, %21:gr32, %22:gr64, implicit-def dead early-clobber $r11, debug-location !721; cg.c:635:1
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !721; cg.c:635:1
  RET 0, debug-location !721; cg.c:635:1

# End machine code for function makea.

********** MI Scheduling **********
makea:%bb.0 entry
  From: %5:gr32 = COPY $r9d
    To: End RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: 
Live Thru: 
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
GR16=8
Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:gr32 = COPY $r9d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%5
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR32temp+GR64_TC 1    GR8+GR32temp 1    GR16 -1
  Single Issue       : false;
SU(1):   %4:gr64 = COPY $r8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%4
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR32temp+GR64_TC 1    GR8+GR32temp 1    GR16 -1
  Single Issue       : false;
SU(2):   %3:gr64 = COPY $rcx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%3
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR32temp 2
  Single Issue       : false;
SU(3):   %2:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%2
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR32temp 2    GR32temp+GR32_DIBP 2
  Single Issue       : false;
SU(4):   %1:gr32 = COPY $esi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1
  Single Issue       : false;
SU(5):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%0
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(6):   MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV64mr %stack.2.a.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV64mr %stack.3.colidx.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.colidx.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV64mr %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mr %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.firstrow.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %6:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%6
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %6:gr32, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 10 9 8 7 6 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %6:gr32, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9
Bottom Pressure:
GR16=2
  LiveReg: %6
  UpdateRegP: SU(13) MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %6:gr32, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 10 9 8 7 12 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %6:gr32 = MOV32ri 1
Bottom Pressure:

  Ready @1c
  BotQ.A BotLatency SU(12) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 10 9 8 7 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mr %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.firstrow.addr)
Bottom Pressure:
GR16=2
  LiveReg: %5
  UpdateRegP: SU(11) MOV32mr %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.firstrow.addr)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 10 9 8 0 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV64mr %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.rowstr.addr)
Bottom Pressure:
GR16=4
  LiveReg: %4
  UpdateRegP: SU(10) MOV64mr %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.rowstr.addr)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 0 9 8 1 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV64mr %stack.3.colidx.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.colidx.addr)
Bottom Pressure:
GR16=6
  LiveReg: %3
  UpdateRegP: SU(9) MOV64mr %stack.3.colidx.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.colidx.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 0 1 8 2 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV64mr %stack.2.a.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.a.addr)
Bottom Pressure:
GR16=8
  LiveReg: %2
  UpdateRegP: SU(8) MOV64mr %stack.2.a.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.a.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 0 1 2 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
Bottom Pressure:
GR16=10
  LiveReg: %1
  UpdateRegP: SU(7) MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 0 1 2 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
Bottom Pressure:
GR16=12
  LiveReg: %0
  UpdateRegP: SU(6) MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 0 1 2 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %0:gr32 = COPY $edi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 0 1 2 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %1:gr32 = COPY $esi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 0 1 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %2:gr64 = COPY $rdx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
GR16=10
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %3:gr64 = COPY $rcx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %4:gr64 = COPY $r8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
GR16=9
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:gr32 = COPY $r9d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
GR16=8
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gr32 = COPY $r9d
SU(1):   %4:gr64 = COPY $r8
SU(2):   %3:gr64 = COPY $rcx
SU(3):   %2:gr64 = COPY $rdx
SU(4):   %1:gr32 = COPY $esi
SU(5):   %0:gr32 = COPY $edi
SU(6):   MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
SU(7):   MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
SU(8):   MOV64mr %stack.2.a.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.a.addr)
SU(9):   MOV64mr %stack.3.colidx.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.colidx.addr)
SU(10):   MOV64mr %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.rowstr.addr)
SU(11):   MOV32mr %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.firstrow.addr)
SU(12):   %6:gr32 = MOV32ri 1
SU(13):   MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %6:gr32, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9

********** MI Scheduling **********
makea:%bb.1 do.body
  From: %8:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
    To: JCC_1 %bb.1, 12, implicit killed $eflags, debug-location !650; cg.c:612:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %8:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%8
    SU(1): Out  Latency=0
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %8:gr32 = ADD32rr %8:gr32(tied-def 0), %8:gr32, implicit-def dead $eflags, debug-location !645; cg.c:611:17
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%8
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%8
    SU(2): Data Latency=1 Reg=%8
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %8:gr32, debug-location !646 :: (store 4 into %ir.nn1); cg.c:611:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%8
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   CMP32rm %8:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !649 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:18
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%8
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.1, 12, implicit killed $eflags, debug-location !650; cg.c:612:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
Cyclic Critical Path: 0c
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) CMP32rm %8:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !649 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:18
  Ready @4c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %8:gr32, debug-location !646 :: (store 4 into %ir.nn1); cg.c:611:13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %8:gr32 = ADD32rr %8:gr32(tied-def 0), %8:gr32, implicit-def dead $eflags, debug-location !645; cg.c:611:17
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %8:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %8:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
SU(1):   %8:gr32 = ADD32rr %8:gr32(tied-def 0), %8:gr32, implicit-def dead $eflags, debug-location !645; cg.c:611:17
SU(2):   MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %8:gr32, debug-location !646 :: (store 4 into %ir.nn1); cg.c:611:13
SU(3):   CMP32rm %8:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !649 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:18

********** MI Scheduling **********
makea:%bb.2 do.end
  From: MOV32mi %stack.13.iouter, 1, $noreg, 0, $noreg, 0, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.13.iouter, 1, $noreg, 0, $noreg, 0, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %27:gr32 = MOV32ri 13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %30:gr64 = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %31:gr64 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %36:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %47:gr64 = MOV32ri64 56
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   %54:gr64 = MOV32ri64 112
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 3 2 1 0 4 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %54:gr64 = MOV32ri64 112
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 3 2 1 0 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %47:gr64 = MOV32ri64 56
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 3 2 1 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %36:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 3 2 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %31:gr64 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %30:gr64 = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %27:gr32 = MOV32ri 13
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.13.iouter, 1, $noreg, 0, $noreg, 0, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   MOV32mi %stack.13.iouter, 1, $noreg, 0, $noreg, 0, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
SU(1):   %27:gr32 = MOV32ri 13
SU(2):   %30:gr64 = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg
SU(3):   %31:gr64 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg
SU(4):   %36:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(5):   %47:gr64 = MOV32ri64 56
SU(6):   %54:gr64 = MOV32ri64 112

********** MI Scheduling **********
makea:%bb.3 for.cond
  From: %10:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
    To: JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !660; cg.c:617:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %10:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%10
  Single Issue       : false;
SU(1):   CMP32rm %10:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !659 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%10
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !660; cg.c:617:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %10:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !659 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:29
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %10:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %10:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
SU(1):   CMP32rm %10:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !659 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:29

********** MI Scheduling **********
makea:%bb.4 for.body
  From: %37:gr32 = MOV32rm %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %37:gr32 = MOV32rm %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%37
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %38:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !676 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%38
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %39:gr64_nosp = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !677 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%39
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOV32mr %38:gr64, 4, %39:gr64_nosp, 0, $noreg, %37:gr32, debug-location !678 :: (store 4 into %ir.arrayidx); cg.c:621:22
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%39
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%38
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%37
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mi %stack.14.ivelt, 1, $noreg, 0, $noreg, 0, debug-location !679 :: (store 4 into %ir.ivelt); cg.c:623:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mi %stack.14.ivelt, 1, $noreg, 0, $noreg, 0, debug-location !679 :: (store 4 into %ir.ivelt); cg.c:623:20
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %38:gr64, 4, %39:gr64_nosp, 0, $noreg, %37:gr32, debug-location !678 :: (store 4 into %ir.arrayidx); cg.c:621:22
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %39:gr64_nosp = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !677 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %38:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !676 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %37:gr32 = MOV32rm %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %37:gr32 = MOV32rm %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
SU(1):   %38:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !676 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
SU(2):   %39:gr64_nosp = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !677 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
SU(3):   MOV32mr %38:gr64, 4, %39:gr64_nosp, 0, $noreg, %37:gr32, debug-location !678 :: (store 4 into %ir.arrayidx); cg.c:621:22
SU(4):   MOV32mi %stack.14.ivelt, 1, $noreg, 0, $noreg, 0, debug-location !679 :: (store 4 into %ir.ivelt); cg.c:623:20

********** MI Scheduling **********
makea:%bb.4 for.body
  From: $edi = COPY %32:gr32, debug-location !674; cg.c:620:9
    To: CALL64pcrel32 @vecset, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, debug-location !674; cg.c:620:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = COPY %32:gr32, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $rcx = LEA64r %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(4):   $r8d = COPY %34:gr32, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $xmm0 = COPY %36:fr64, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @vecset, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, debug-location !674; cg.c:620:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $xmm0 = COPY %36:fr64, debug-location !674; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $r8d = COPY %34:gr32, debug-location !674; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = COPY %32:gr32, debug-location !674; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rcx = LEA64r %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   $rsi = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
SU(2):   $rdx = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
SU(3):   $rcx = LEA64r %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
SU(0):   $edi = COPY %32:gr32, debug-location !674; cg.c:620:9
SU(4):   $r8d = COPY %34:gr32, debug-location !674; cg.c:620:9
SU(5):   $xmm0 = COPY %36:fr64, debug-location !674; cg.c:620:9

********** MI Scheduling **********
makea:%bb.4 for.body
  From: %32:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !674; cg.c:620:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %32:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %34:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%34
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %34:gr32 = nsw INC32r %34:gr32(tied-def 0), implicit-def dead $eflags, debug-location !673; cg.c:620:41
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%34
    SU(1): Out  Latency=0
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !674; cg.c:620:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %34:gr32 = nsw INC32r %34:gr32(tied-def 0), implicit-def dead $eflags, debug-location !673; cg.c:620:41
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %34:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %32:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %32:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
SU(1):   %34:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
SU(2):   %34:gr32 = nsw INC32r %34:gr32(tied-def 0), implicit-def dead $eflags, debug-location !673; cg.c:620:41

********** MI Scheduling **********
makea:%bb.4 for.body
  From: $edi = COPY %28:gr32, debug-location !668; cg.c:619:9
    To: CALL64pcrel32 @sprnvc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, debug-location !668; cg.c:619:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = COPY %28:gr32, debug-location !668; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 13, debug-location !668; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %29:gr32, debug-location !668; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $rcx = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg, debug-location !668; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(4):   $r8 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg, debug-location !668; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @sprnvc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, debug-location !668; cg.c:619:9
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = COPY %29:gr32, debug-location !668; cg.c:619:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 0 1 
  Cand SU(4) ORDER                              
  Cand SU(0) PHYS-REG                           
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = MOV32ri 13, debug-location !668; cg.c:619:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 0 
  Cand SU(4) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = COPY %28:gr32, debug-location !668; cg.c:619:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg, debug-location !668; cg.c:619:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) $rcx = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg, debug-location !668; cg.c:619:9
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(3):   $rcx = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg, debug-location !668; cg.c:619:9
SU(4):   $r8 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg, debug-location !668; cg.c:619:9
SU(0):   $edi = COPY %28:gr32, debug-location !668; cg.c:619:9
SU(1):   $esi = MOV32ri 13, debug-location !668; cg.c:619:9
SU(2):   $edx = COPY %29:gr32, debug-location !668; cg.c:619:9

********** MI Scheduling **********
makea:%bb.4 for.body
  From: MOV32mr %stack.15.nzv, 1, $noreg, 0, $noreg, %27:gr32, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !668; cg.c:619:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mr %stack.15.nzv, 1, $noreg, 0, $noreg, %27:gr32, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %28:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %29:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !665 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !668; cg.c:619:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %29:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !665 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %28:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mr %stack.15.nzv, 1, $noreg, 0, $noreg, %27:gr32, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   MOV32mr %stack.15.nzv, 1, $noreg, 0, $noreg, %27:gr32, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13
SU(1):   %28:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
SU(2):   %29:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !665 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24

********** MI Scheduling **********
makea:%bb.5 for.cond5
  From: %40:gr32 = MOV32rm %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
    To: JCC_1 %bb.7, 13, implicit killed $eflags, debug-location !686; cg.c:623:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %40:gr32 = MOV32rm %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%40
  Single Issue       : false;
SU(1):   CMP32rm %40:gr32, %stack.15.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !685 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%40
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.7, 13, implicit killed $eflags, debug-location !686; cg.c:623:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %40:gr32, %stack.15.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !685 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:31
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %40:gr32 = MOV32rm %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %40:gr32 = MOV32rm %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
SU(1):   CMP32rm %40:gr32, %stack.15.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !685 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:31

********** MI Scheduling **********
makea:%bb.6 for.body7
  From: %42:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
    To: JMP_1 %bb.5, debug-location !702; cg.c:623:9
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=14
Live In: %54 %30 %47 %31 
Live Out: %54 %30 %47 %31 
Live Thru: GR16=8
  LiveReg: %54
  UpdateRegP: SU(10) %56:gr64 = IMUL64rr %56:gr64(tied-def 0), %54:gr64, implicit-def dead $eflags, debug-location !697; cg.c:625:13
              to 
  LiveReg: %30
  UpdateRegP: SU(8) %52:fr64 = MOVSDrm_alt %30:gr64, 8, %50:gr64_nosp, 0, $noreg, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %47
  UpdateRegP: SU(4) %49:gr64 = IMUL64rr %49:gr64(tied-def 0), %47:gr64, implicit-def dead $eflags, debug-location !691; cg.c:624:13
              to 
  LiveReg: %31
  UpdateRegP: SU(1) %45:gr32 = MOV32rm %31:gr64, 4, %42:gr64_nosp, 0, $noreg, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
              to 
Top Pressure:
GR16=8
Bottom Pressure:
GR16=8
Excess PSets: 
SU(0):   %42:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(6): Data Latency=4 Reg=%42
    SU(1): Data Latency=4 Reg=%42
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %45:gr32 = MOV32rm %31:gr64, 4, %42:gr64_nosp, 0, $noreg, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(0): Data Latency=4 Reg=%42
  Successors:
    SU(2): Data Latency=4 Reg=%45
    SU(2): Out  Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %45:gr32 = DEC32r %45:gr32(tied-def 0), implicit-def dead $eflags, debug-location !690; cg.c:624:46
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 14
  Predecessors:
    SU(1): Data Latency=4 Reg=%45
    SU(1): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%45
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %49:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !692 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(4): Data Latency=4 Reg=%49
    SU(4): Out  Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %49:gr64 = IMUL64rr %49:gr64(tied-def 0), %47:gr64, implicit-def dead $eflags, debug-location !691; cg.c:624:13
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(3): Data Latency=4 Reg=%49
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%49
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %49:gr64 = ADD64rm %49:gr64(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(4): Data Latency=1 Reg=%49
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%49
    SU(12): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOV32mr %49:gr64, 4, %42:gr64_nosp, 0, $noreg, %45:gr32, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
  # preds left       : 7
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 13
  Predecessors:
    SU(2): Data Latency=1 Reg=%45
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%49
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%42
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(7):   %50:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !695 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 11
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%50
    SU(8): Data Latency=4 Reg=%50
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %52:fr64 = MOVSDrm_alt %30:gr64, 8, %50:gr64_nosp, 0, $noreg, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 7
  Predecessors:
    SU(7): Data Latency=4 Reg=%50
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%52
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(9):   %56:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 12
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(10): Data Latency=4 Reg=%56
    SU(10): Out  Latency=0
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %56:gr64 = IMUL64rr %56:gr64(tied-def 0), %54:gr64, implicit-def dead $eflags, debug-location !697; cg.c:625:13
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 8
  Predecessors:
    SU(9): Data Latency=4 Reg=%56
    SU(9): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%56
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %56:gr64 = ADD64rm %56:gr64(tied-def 0), %fixed-stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 7
  Predecessors:
    SU(10): Data Latency=1 Reg=%56
    SU(10): Out  Latency=0
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%56
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   MOVSDmr %56:gr64, 8, %50:gr64_nosp, 0, $noreg, %52:fr64, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
  # preds left       : 12
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 3
  Predecessors:
    SU(11): Data Latency=4 Reg=%56
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%52
    SU(8): Ord  Latency=0 Memory
    SU(7): Data Latency=4 Reg=%50
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(13):   INC32m %stack.14.ivelt, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !701 :: (store 4 into %ir.ivelt), (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 3
  Predecessors:
    SU(12): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.5, debug-location !702; cg.c:623:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 22
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) INC32m %stack.14.ivelt, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !701 :: (store 4 into %ir.ivelt), (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
Bottom Pressure:
GR16=8
  Ready @3c
  BotQ.A TopLatency SU(13) 19c
  BotQ.A BotLatency SU(13) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) MOVSDmr %56:gr64, 8, %50:gr64_nosp, 0, $noreg, %52:fr64, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %56
  UpdateRegP: SU(12) MOVSDmr %56:gr64, 8, %50:gr64_nosp, 0, $noreg, %52:fr64, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %50
  UpdateRegP: SU(8) %52:fr64 = MOVSDrm_alt %30:gr64, 8, %50:gr64_nosp, 0, $noreg, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
              to FR32 -1    FR32X -1
  UpdateRegP: SU(12) MOVSDmr %56:gr64, 8, %50:gr64_nosp, 0, $noreg, %52:fr64, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
              to FR32 1    FR32X 1
  LiveReg: %52
  UpdateRegP: SU(12) MOVSDmr %56:gr64, 8, %50:gr64_nosp, 0, $noreg, %52:fr64, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 8 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %56:gr64 = ADD64rm %56:gr64(tied-def 0), %fixed-stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %56
  UpdateRegP: SU(11) %56:gr64 = ADD64rm %56:gr64(tied-def 0), %fixed-stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(11) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 10 
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %56:gr64 = IMUL64rr %56:gr64(tied-def 0), %54:gr64, implicit-def dead $eflags, debug-location !697; cg.c:625:13
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %56
  UpdateRegP: SU(10) %56:gr64 = IMUL64rr %56:gr64(tied-def 0), %54:gr64, implicit-def dead $eflags, debug-location !697; cg.c:625:13
              to GR16 -2
  Ready @8c
  BotQ.A BotLatency SU(10) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %56:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @12c
  BotQ.A BotLatency SU(9) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %52:fr64 = MOVSDrm_alt %30:gr64, 8, %50:gr64_nosp, 0, $noreg, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
Bottom Pressure:
GR16=10
  Ready @7c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %50:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !695 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
Bottom Pressure:
GR16=8
  Ready @11c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV32mr %49:gr64, 4, %42:gr64_nosp, 0, $noreg, %45:gr32, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
Bottom Pressure:
GR16=14
  LiveReg: %49
  UpdateRegP: SU(6) MOV32mr %49:gr64, 4, %42:gr64_nosp, 0, $noreg, %45:gr32, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
              to GR16 4
  LiveReg: %42
  UpdateRegP: SU(1) %45:gr32 = MOV32rm %31:gr64, 4, %42:gr64_nosp, 0, $noreg, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
              to GR16 -2
  UpdateRegP: SU(6) MOV32mr %49:gr64, 4, %42:gr64_nosp, 0, $noreg, %45:gr32, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
              to GR16 2
  LiveReg: %45
  UpdateRegP: SU(6) MOV32mr %49:gr64, 4, %42:gr64_nosp, 0, $noreg, %45:gr32, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
              to 
  Ready @13c
  BotQ.A BotLatency SU(6) 13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %49:gr64 = ADD64rm %49:gr64(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
Bottom Pressure:
GR16=14
  LiveReg: %49
  UpdateRegP: SU(5) %49:gr64 = ADD64rm %49:gr64(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
              to GR16 -2
  Ready @17c
  BotQ.A BotLatency SU(5) 17c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %49:gr64 = IMUL64rr %49:gr64(tied-def 0), %47:gr64, implicit-def dead $eflags, debug-location !691; cg.c:624:13
Bottom Pressure:
GR16=14
  LiveReg: %49
  UpdateRegP: SU(4) %49:gr64 = IMUL64rr %49:gr64(tied-def 0), %47:gr64, implicit-def dead $eflags, debug-location !691; cg.c:624:13
              to GR16 -2
  Ready @18c
  BotQ.A BotLatency SU(4) 18c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %49:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !692 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
Bottom Pressure:
GR16=12
  Ready @22c
  BotQ.A BotLatency SU(3) 22c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %45:gr32 = DEC32r %45:gr32(tied-def 0), implicit-def dead $eflags, debug-location !690; cg.c:624:46
Bottom Pressure:
GR16=12
  LiveReg: %45
  UpdateRegP: SU(2) %45:gr32 = DEC32r %45:gr32(tied-def 0), implicit-def dead $eflags, debug-location !690; cg.c:624:46
              to GR16 -2
  Ready @14c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %45:gr32 = MOV32rm %31:gr64, 4, %42:gr64_nosp, 0, $noreg, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
Bottom Pressure:
GR16=10
  Ready @18c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %42:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
Bottom Pressure:
GR16=8
  Ready @22c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %42:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
SU(1):   %45:gr32 = MOV32rm %31:gr64, 4, %42:gr64_nosp, 0, $noreg, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
SU(2):   %45:gr32 = DEC32r %45:gr32(tied-def 0), implicit-def dead $eflags, debug-location !690; cg.c:624:46
SU(3):   %49:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !692 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
SU(4):   %49:gr64 = IMUL64rr %49:gr64(tied-def 0), %47:gr64, implicit-def dead $eflags, debug-location !691; cg.c:624:13
SU(5):   %49:gr64 = ADD64rm %49:gr64(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
SU(6):   MOV32mr %49:gr64, 4, %42:gr64_nosp, 0, $noreg, %45:gr32, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
SU(7):   %50:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !695 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
SU(8):   %52:fr64 = MOVSDrm_alt %30:gr64, 8, %50:gr64_nosp, 0, $noreg, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
SU(9):   %56:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
SU(10):   %56:gr64 = IMUL64rr %56:gr64(tied-def 0), %54:gr64, implicit-def dead $eflags, debug-location !697; cg.c:625:13
SU(11):   %56:gr64 = ADD64rm %56:gr64(tied-def 0), %fixed-stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
SU(12):   MOVSDmr %56:gr64, 8, %50:gr64_nosp, 0, $noreg, %52:fr64, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
SU(13):   INC32m %stack.14.ivelt, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !701 :: (store 4 into %ir.ivelt), (dereferenceable load 4 from %ir.ivelt); cg.c:623:43

********** MI Scheduling **********
makea:%bb.8 for.end22
  From: MOV64mr $rsp, 1, $noreg, 40, $noreg, %22:gr64, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
    To: CALL64pcrel32 @sparse, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, implicit $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !720; cg.c:633:5
 RegionInstrs: 16
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=30
Live In: %16 %15 %14 %13 %12 %17 %18 %19 %20 %21 %22 
Live Out: %16 %15 %14 %13 %12 %17 %18 %19 %20 %21 %22 
Live Thru: GR16=22
  LiveReg: %16
  UpdateRegP: SU(12) $r8d = COPY %16:gr32, debug-location !720; cg.c:633:5
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  LiveReg: %15
  UpdateRegP: SU(11) $ecx = COPY %15:gr32, debug-location !720; cg.c:633:5
              to GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  LiveReg: %14
  UpdateRegP: SU(10) $rdx = COPY %14:gr64, debug-location !720; cg.c:633:5
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  LiveReg: %13
  UpdateRegP: SU(9) $rsi = COPY %13:gr64, debug-location !720; cg.c:633:5
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  LiveReg: %12
  UpdateRegP: SU(8) $rdi = COPY %12:gr64, debug-location !720; cg.c:633:5
              to GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  LiveReg: %17
  UpdateRegP: SU(5) MOV64mr $rsp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !720 :: (store 8 into stack); cg.c:633:5
              to 
  LiveReg: %18
  UpdateRegP: SU(4) MOV64mr $rsp, 1, $noreg, 8, $noreg, %18:gr64, debug-location !720 :: (store 8 into stack + 8); cg.c:633:5
              to 
  LiveReg: %19
  UpdateRegP: SU(3) MOV64mr $rsp, 1, $noreg, 16, $noreg, %19:gr64, debug-location !720 :: (store 8 into stack + 16); cg.c:633:5
              to 
  LiveReg: %20
  UpdateRegP: SU(2) MOV32mr $rsp, 1, $noreg, 24, $noreg, %20:gr32, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
              to 
  LiveReg: %21
  UpdateRegP: SU(1) MOV32mr $rsp, 1, $noreg, 32, $noreg, %21:gr32, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
              to 
  LiveReg: %22
  UpdateRegP: SU(0) MOV64mr $rsp, 1, $noreg, 40, $noreg, %22:gr64, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
              to 
Top Pressure:
GR16=22
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=30
GR16 Limit 26 Actual 30
Excess PSets: GR16 
SU(0):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %22:gr64, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   MOV32mr $rsp, 1, $noreg, 32, $noreg, %21:gr32, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOV32mr $rsp, 1, $noreg, 24, $noreg, %20:gr32, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %19:gr64, debug-location !720 :: (store 8 into stack + 16); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   MOV64mr $rsp, 1, $noreg, 8, $noreg, %18:gr64, debug-location !720 :: (store 8 into stack + 8); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !720 :: (store 8 into stack); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %25:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(14): Data Latency=4 Reg=%25
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(7):   %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(15): Data Latency=4 Reg=%26
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(8):   $rdi = COPY %12:gr64, debug-location !720; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(9):   $rsi = COPY %13:gr64, debug-location !720; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  Single Issue       : false;
SU(10):   $rdx = COPY %14:gr64, debug-location !720; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Single Issue       : false;
SU(11):   $ecx = COPY %15:gr32, debug-location !720; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  Single Issue       : false;
SU(12):   $r8d = COPY %16:gr32, debug-location !720; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(13):   $r9d = MOV32ri 13, debug-location !720; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(14):   $xmm0 = COPY %25:fr64, debug-location !720; cg.c:633:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=%25
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   $xmm1 = COPY %26:fr64, debug-location !720; cg.c:633:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%26
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @sparse, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, implicit $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !720; cg.c:633:5
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(15): Ord  Latency=0 Artificial
    SU(14): Ord  Latency=0 Artificial
    SU(13): Ord  Latency=1 Artificial
    SU(12): Ord  Latency=0 Artificial
    SU(11): Ord  Latency=0 Artificial
    SU(10): Ord  Latency=0 Artificial
    SU(9): Ord  Latency=0 Artificial
    SU(8): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 15 14 13 12 11 10 9 8 
  Cand SU(5) ORDER                              
  Cand SU(15) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(15) $xmm1 = COPY %26:fr64, debug-location !720; cg.c:633:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=30
  LiveReg: %26
  UpdateRegP: SU(15) $xmm1 = COPY %26:fr64, debug-location !720; cg.c:633:5
              to FR32 -1    FR32X -1
  Ready @0c
  BotQ.A TopLatency SU(15) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 8 14 13 12 11 10 9 7 
  Cand SU(5) ORDER                              
  Cand SU(8) PHYS-REG                           
  Cand SU(14) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(14) $xmm0 = COPY %25:fr64, debug-location !720; cg.c:633:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=30
  LiveReg: %25
  UpdateRegP: SU(14) $xmm0 = COPY %25:fr64, debug-location !720; cg.c:633:5
              to FR32 -1    FR32X -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 8 7 13 12 11 10 9 6 
  Cand SU(5) ORDER                              
  Cand SU(8) PHYS-REG                           
  Cand SU(13) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(13) $r9d = MOV32ri 13, debug-location !720; cg.c:633:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
FR32X=2
GR16=29
  GR16: 30 > 26(+ 22 livethru)
  Ready @1c
  BotQ.A BotLatency SU(13) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 8 7 6 12 11 10 9 
  Cand SU(5) ORDER                              
  Cand SU(8) PHYS-REG                           
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) $r8d = COPY %16:gr32, debug-location !720; cg.c:633:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
FR32X=2
GR16=28
  GR16: 30 > 26(+ 22 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 8 7 6 9 11 10 
  Cand SU(5) ORDER                              
  Cand SU(8) PHYS-REG                           
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) $ecx = COPY %15:gr32, debug-location !720; cg.c:633:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
FR32X=2
GR16=26
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 8 7 6 9 10 
  Cand SU(5) ORDER                              
  Cand SU(8) PHYS-REG                           
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) $rdx = COPY %14:gr64, debug-location !720; cg.c:633:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=2
GR16=24
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 8 7 6 9 
  Cand SU(5) ORDER                              
  Cand SU(8) PHYS-REG                           
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) $rsi = COPY %13:gr64, debug-location !720; cg.c:633:5
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
FR32X=2
GR16=23
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 8 7 6 
  Cand SU(5) ORDER                              
  Cand SU(8) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(8) $rdi = COPY %12:gr64, debug-location !720; cg.c:633:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=22
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 6 7 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %25:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
GR16=22
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr $rsp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !720 :: (store 8 into stack); cg.c:633:5
Bottom Pressure:
GR16=22
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr $rsp, 1, $noreg, 8, $noreg, %18:gr64, debug-location !720 :: (store 8 into stack + 8); cg.c:633:5
Bottom Pressure:
GR16=22
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr $rsp, 1, $noreg, 16, $noreg, %19:gr64, debug-location !720 :: (store 8 into stack + 16); cg.c:633:5
Bottom Pressure:
GR16=22
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mr $rsp, 1, $noreg, 24, $noreg, %20:gr32, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
Bottom Pressure:
GR16=22
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mr $rsp, 1, $noreg, 32, $noreg, %21:gr32, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
Bottom Pressure:
GR16=22
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mr $rsp, 1, $noreg, 40, $noreg, %22:gr64, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
Bottom Pressure:
GR16=22
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %22:gr64, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
SU(1):   MOV32mr $rsp, 1, $noreg, 32, $noreg, %21:gr32, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
SU(2):   MOV32mr $rsp, 1, $noreg, 24, $noreg, %20:gr32, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
SU(3):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %19:gr64, debug-location !720 :: (store 8 into stack + 16); cg.c:633:5
SU(4):   MOV64mr $rsp, 1, $noreg, 8, $noreg, %18:gr64, debug-location !720 :: (store 8 into stack + 8); cg.c:633:5
SU(5):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !720 :: (store 8 into stack); cg.c:633:5
SU(6):   %25:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(7):   %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(8):   $rdi = COPY %12:gr64, debug-location !720; cg.c:633:5
SU(9):   $rsi = COPY %13:gr64, debug-location !720; cg.c:633:5
SU(10):   $rdx = COPY %14:gr64, debug-location !720; cg.c:633:5
SU(11):   $ecx = COPY %15:gr32, debug-location !720; cg.c:633:5
SU(12):   $r8d = COPY %16:gr32, debug-location !720; cg.c:633:5
SU(13):   $r9d = MOV32ri 13, debug-location !720; cg.c:633:5
SU(14):   $xmm0 = COPY %25:fr64, debug-location !720; cg.c:633:5
SU(15):   $xmm1 = COPY %26:fr64, debug-location !720; cg.c:633:5

********** MI Scheduling **********
makea:%bb.8 for.end22
  From: %12:gr64 = MOV64rm %stack.2.a.addr, 1, $noreg, 0, $noreg, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
    To: ADJCALLSTACKDOWN64 48, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !720; cg.c:633:5
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=22
Live In: 
Live Out: %22 %21 %20 %19 %18 %17 %16 %15 %14 %13 %12 
Live Thru: 
  LiveReg: %22
  LiveReg: %21
  LiveReg: %20
  LiveReg: %19
  LiveReg: %18
  LiveReg: %17
  LiveReg: %16
  LiveReg: %15
  LiveReg: %14
  LiveReg: %13
  LiveReg: %12
Top Pressure:

Bottom Pressure:
GR16=22
Excess PSets: 
SU(0):   %12:gr64 = MOV64rm %stack.2.a.addr, 1, $noreg, 0, $noreg, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %13:gr64 = MOV64rm %stack.3.colidx.addr, 1, $noreg, 0, $noreg, debug-location !710 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %14:gr64 = MOV64rm %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %15:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !712 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %16:gr32 = MOV32rm %stack.1.nz.addr, 1, $noreg, 0, $noreg, debug-location !713 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %17:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !714 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %18:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !715 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %19:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !716 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %20:gr32 = MOV32rm %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, debug-location !717 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %21:gr32 = MOV32rm %fixed-stack.6, 1, $noreg, 0, $noreg, debug-location !718 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %22:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !719 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 48, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !720; cg.c:633:5
  # preds left       : 11
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=3 Artificial
    SU(9): Ord  Latency=3 Artificial
    SU(8): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 8 7 6 5 4 3 2 1 0 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %22:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !719 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21
Bottom Pressure:
GR16=20
  Ready @3c
  BotQ.A BotLatency SU(10) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 9 8 7 6 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %21:gr32 = MOV32rm %fixed-stack.6, 1, $noreg, 0, $noreg, debug-location !718 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
Bottom Pressure:
GR16=18
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 8 7 6 5 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %20:gr32 = MOV32rm %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, debug-location !717 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
Bottom Pressure:
GR16=16
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 7 6 5 4 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %19:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !716 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
Bottom Pressure:
GR16=14
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 6 5 4 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %18:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !715 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
Bottom Pressure:
GR16=12
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 5 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %17:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !714 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
Bottom Pressure:
GR16=10
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %16:gr32 = MOV32rm %stack.1.nz.addr, 1, $noreg, 0, $noreg, debug-location !713 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
Bottom Pressure:
GR16=8
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %15:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !712 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
Bottom Pressure:
GR16=6
  Ready @3c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %14:gr64 = MOV64rm %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
Bottom Pressure:
GR16=4
  Ready @3c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %13:gr64 = MOV64rm %stack.3.colidx.addr, 1, $noreg, 0, $noreg, debug-location !710 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
Bottom Pressure:
GR16=2
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %12:gr64 = MOV64rm %stack.2.a.addr, 1, $noreg, 0, $noreg, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
Bottom Pressure:

  Ready @3c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %12:gr64 = MOV64rm %stack.2.a.addr, 1, $noreg, 0, $noreg, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
SU(1):   %13:gr64 = MOV64rm %stack.3.colidx.addr, 1, $noreg, 0, $noreg, debug-location !710 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
SU(2):   %14:gr64 = MOV64rm %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
SU(3):   %15:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !712 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
SU(4):   %16:gr32 = MOV32rm %stack.1.nz.addr, 1, $noreg, 0, $noreg, debug-location !713 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
SU(5):   %17:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !714 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
SU(6):   %18:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !715 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
SU(7):   %19:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !716 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
SU(8):   %20:gr32 = MOV32rm %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, debug-location !717 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
SU(9):   %21:gr32 = MOV32rm %fixed-stack.6, 1, $noreg, 0, $noreg, debug-location !718 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
SU(10):   %22:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !719 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21

********** INTERVALS **********
CH [0B,48r:0)[720r,768r:3)[960r,1008r:2)[2048r,2128r:1)  0@0B-phi 1@2048r 2@960r 3@720r
CL [0B,48r:0)[720r,768r:3)[960r,1008r:2)[2048r,2128r:1)  0@0B-phi 1@2048r 2@960r 3@720r
DH [0B,64r:0)[760r,768r:1)[944r,1008r:2)[2032r,2128r:3)  0@0B-phi 1@760r 2@944r 3@2032r
DIL [0B,96r:0)[744r,768r:2)[968r,1008r:1)[2000r,2128r:3)  0@0B-phi 1@968r 2@744r 3@2000r
DIH [0B,96r:0)[744r,768r:2)[968r,1008r:1)[2000r,2128r:3)  0@0B-phi 1@968r 2@744r 3@2000r
DL [0B,64r:0)[760r,768r:1)[944r,1008r:2)[2032r,2128r:3)  0@0B-phi 1@760r 2@944r 3@2032r
HCX [0B,48r:0)[720r,768r:3)[960r,1008r:2)[2048r,2128r:1)  0@0B-phi 1@2048r 2@960r 3@720r
HDI [0B,96r:0)[744r,768r:2)[968r,1008r:1)[2000r,2128r:3)  0@0B-phi 1@968r 2@744r 3@2000r
HDX [0B,64r:0)[760r,768r:1)[944r,1008r:2)[2032r,2128r:3)  0@0B-phi 1@760r 2@944r 3@2032r
SIL [0B,80r:0)[752r,768r:1)[928r,1008r:2)[2016r,2128r:3)  0@0B-phi 1@752r 2@928r 3@2016r
SIH [0B,80r:0)[752r,768r:1)[928r,1008r:2)[2016r,2128r:3)  0@0B-phi 1@752r 2@928r 3@2016r
HSI [0B,80r:0)[752r,768r:1)[928r,1008r:2)[2016r,2128r:3)  0@0B-phi 1@752r 2@928r 3@2016r
SPL [656r,656d:9)[768r,768d:8)[776r,776d:7)[784r,784d:6)[816r,816d:5)[896r,896d:4)[1008r,1008d:3)[1024r,1024d:2)[1040r,1040d:1)[1072r,1072d:0)[1824r,1824d:14)[2128r,2128d:13)[2144r,2144d:12)[2160r,2160d:11)[2192r,2192d:10)  0@1072r 1@1040r 2@1024r 3@1008r 4@896r 5@816r 6@784r 7@776r 8@768r 9@656r 10@2192r 11@2160r 12@2144r 13@2128r 14@1824r
SPH [656r,656d:9)[768r,768d:8)[776r,776d:7)[784r,784d:6)[816r,816d:5)[896r,896d:4)[1008r,1008d:3)[1024r,1024d:2)[1040r,1040d:1)[1072r,1072d:0)[1824r,1824d:14)[2128r,2128d:13)[2144r,2144d:12)[2160r,2160d:11)[2192r,2192d:10)  0@1072r 1@1040r 2@1024r 3@1008r 4@896r 5@816r 6@784r 7@776r 8@768r 9@656r 10@2192r 11@2160r 12@2144r 13@2128r 14@1824r
HSP [656r,656d:9)[768r,768d:8)[776r,776d:7)[784r,784d:6)[816r,816d:5)[896r,896d:4)[1008r,1008d:3)[1024r,1024d:2)[1040r,1040d:1)[1072r,1072d:0)[1824r,1824d:14)[2128r,2128d:13)[2144r,2144d:12)[2160r,2160d:11)[2192r,2192d:10)  0@1072r 1@1040r 2@1024r 3@1008r 4@896r 5@816r 6@784r 7@776r 8@768r 9@656r 10@2192r 11@2160r 12@2144r 13@2128r 14@1824r
R8B [0B,32r:0)[736r,768r:3)[976r,1008r:1)[2064r,2128r:2)  0@0B-phi 1@976r 2@2064r 3@736r
R8BH [0B,32r:0)[736r,768r:3)[976r,1008r:1)[2064r,2128r:2)  0@0B-phi 1@976r 2@2064r 3@736r
R8WH [0B,32r:0)[736r,768r:3)[976r,1008r:1)[2064r,2128r:2)  0@0B-phi 1@976r 2@2064r 3@736r
R9B [0B,16r:0)[2080r,2128r:1)  0@0B-phi 1@2080r
R9BH [0B,16r:0)[2080r,2128r:1)  0@0B-phi 1@2080r
R9WH [0B,16r:0)[2080r,2128r:1)  0@0B-phi 1@2080r
%0 [96r,112r:0)  0@96r weight:0.000000e+00
%1 [80r,128r:0)  0@80r weight:0.000000e+00
%2 [64r,144r:0)  0@64r weight:0.000000e+00
%3 [48r,160r:0)  0@48r weight:0.000000e+00
%4 [32r,176r:0)  0@32r weight:0.000000e+00
%5 [16r,192r:0)  0@16r weight:0.000000e+00
%6 [208r,224r:0)  0@208r weight:0.000000e+00
%8 [256r,288r:0)[288r,320r:1)  0@256r 1@288r weight:0.000000e+00
%10 [528r,544r:0)  0@528r weight:0.000000e+00
%12 [1648r,2176r:0)  0@1648r weight:0.000000e+00
%13 [1664r,2176r:0)  0@1664r weight:0.000000e+00
%14 [1680r,2176r:0)  0@1680r weight:0.000000e+00
%15 [1696r,2176r:0)  0@1696r weight:0.000000e+00
%16 [1712r,2176r:0)  0@1712r weight:0.000000e+00
%17 [1728r,2176r:0)  0@1728r weight:0.000000e+00
%18 [1744r,2176r:0)  0@1744r weight:0.000000e+00
%19 [1760r,2176r:0)  0@1760r weight:0.000000e+00
%20 [1776r,2176r:0)  0@1776r weight:0.000000e+00
%21 [1792r,2176r:0)  0@1792r weight:0.000000e+00
%22 [1808r,2176r:0)  0@1808r weight:0.000000e+00
%25 [1968r,2096r:0)  0@1968r weight:0.000000e+00
%26 [1984r,2112r:0)  0@1984r weight:0.000000e+00
%27 [400r,1632B:0)  0@400r weight:0.000000e+00
%28 [624r,800r:0)  0@624r weight:0.000000e+00
%29 [640r,800r:0)  0@640r weight:0.000000e+00
%30 [416r,1632B:0)  0@416r weight:0.000000e+00
%31 [432r,1632B:0)  0@432r weight:0.000000e+00
%32 [832r,1056r:0)  0@832r weight:0.000000e+00
%34 [848r,880r:0)[880r,1056r:1)  0@848r 1@880r weight:0.000000e+00
%36 [464r,1632B:0)  0@464r weight:0.000000e+00
%37 [1088r,1136r:0)  0@1088r weight:0.000000e+00
%38 [1104r,1136r:0)  0@1104r weight:0.000000e+00
%39 [1120r,1136r:0)  0@1120r weight:0.000000e+00
%40 [1184r,1200r:0)  0@1184r weight:0.000000e+00
%42 [1264r,1408r:0)  0@1264r weight:0.000000e+00
%45 [1280r,1312r:0)[1312r,1408r:1)  0@1280r 1@1312r weight:0.000000e+00
%47 [480r,1632B:0)  0@480r weight:0.000000e+00
%49 [1328r,1360r:2)[1360r,1392r:0)[1392r,1408r:1)  0@1360r 1@1392r 2@1328r weight:0.000000e+00
%50 [1424r,1536r:0)  0@1424r weight:0.000000e+00
%52 [1440r,1536r:0)  0@1440r weight:0.000000e+00
%54 [496r,1632B:0)  0@496r weight:0.000000e+00
%56 [1456r,1488r:2)[1488r,1520r:0)[1520r,1536r:1)  0@1488r 1@1520r 2@1456r weight:0.000000e+00
RegMasks: 768r 1008r 2128r
********** MACHINEINSTRS **********
# Machine code for function makea: NoPHIs, TracksLiveness
Frame Objects:
  fi#-7: size=8, align=16, fixed, at location [SP+56]
  fi#-6: size=8, align=8, fixed, at location [SP+48]
  fi#-5: size=8, align=16, fixed, at location [SP+40]
  fi#-4: size=8, align=8, fixed, at location [SP+32]
  fi#-3: size=4, align=16, fixed, at location [SP+24]
  fi#-2: size=4, align=8, fixed, at location [SP+16]
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: dead
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=56, align=16, at location [SP+8]
  fi#18: size=112, align=16, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e-01, align=8
  cp#1: 6.000000e+01, align=8
  cp#2: 5.000000e-01, align=8
Function Live Ins: $edi in %0, $esi in %1, $rdx in %2, $rcx in %3, $r8 in %4, $r9d in %5

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi, $rdx, $rcx, $r8, $r9d
16B	  %5:gr32 = COPY $r9d
32B	  %4:gr64 = COPY $r8
48B	  %3:gr64 = COPY $rcx
64B	  %2:gr64 = COPY $rdx
80B	  %1:gr32 = COPY $esi
96B	  %0:gr32 = COPY $edi
112B	  MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
128B	  MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
144B	  MOV64mr %stack.2.a.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.a.addr)
160B	  MOV64mr %stack.3.colidx.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.colidx.addr)
176B	  MOV64mr %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.rowstr.addr)
192B	  MOV32mr %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.firstrow.addr)
208B	  %6:gr32 = MOV32ri 1
224B	  MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %6:gr32, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9

240B	bb.1.do.body:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.1(0x7c000000), %bb.2(0x04000000); %bb.1(96.88%), %bb.2(3.12%)

256B	  %8:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
288B	  %8:gr32 = ADD32rr %8:gr32(tied-def 0), %8:gr32, implicit-def dead $eflags, debug-location !645; cg.c:611:17
304B	  MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %8:gr32, debug-location !646 :: (store 4 into %ir.nn1); cg.c:611:13
320B	  CMP32rm %8:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !649 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:18
336B	  JCC_1 %bb.1, 12, implicit killed $eflags, debug-location !650; cg.c:612:5
352B	  JMP_1 %bb.2, debug-location !650; cg.c:612:5

368B	bb.2.do.end:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

384B	  MOV32mi %stack.13.iouter, 1, $noreg, 0, $noreg, 0, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
400B	  %27:gr32 = MOV32ri 13
416B	  %30:gr64 = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg
432B	  %31:gr64 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg
464B	  %36:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
480B	  %47:gr64 = MOV32ri64 56
496B	  %54:gr64 = MOV32ri64 112

512B	bb.3.for.cond:
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

528B	  %10:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
544B	  CMP32rm %10:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !659 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:29
560B	  JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !660; cg.c:617:5
576B	  JMP_1 %bb.4, debug-location !660; cg.c:617:5

592B	bb.4.for.body:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

608B	  MOV32mr %stack.15.nzv, 1, $noreg, 0, $noreg, %27:gr32, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13
624B	  %28:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
640B	  %29:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !665 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !668; cg.c:619:9
720B	  $rcx = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg, debug-location !668; cg.c:619:9
736B	  $r8 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg, debug-location !668; cg.c:619:9
744B	  $edi = COPY %28:gr32, debug-location !668; cg.c:619:9
752B	  $esi = MOV32ri 13, debug-location !668; cg.c:619:9
760B	  $edx = COPY %29:gr32, debug-location !668; cg.c:619:9
768B	  CALL64pcrel32 @sprnvc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, debug-location !668; cg.c:619:9
776B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !668; cg.c:619:9
784B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !669; cg.c:620:16
800B	  PCN_STACKMAP 0, 0, 0, %stack.2.a.addr, 0, 0, %fixed-stack.2, 0, 0, %fixed-stack.1, 0, 0, %fixed-stack.3, 0, 0, %stack.18.vc, 0, 0, %stack.17.ivc, 0, 0, %stack.3.colidx.addr, 0, 0, %stack.5.firstrow.addr, 0, 0, %stack.13.iouter, 0, 0, %fixed-stack.0, 0, 0, %stack.17.ivc, 0, 0, %stack.14.ivelt, 0, 0, %fixed-stack.6, 0, 0, %stack.0.n.addr, 0, 0, %stack.16.nn1, 0, 0, %stack.1.nz.addr, 0, 0, %stack.15.nzv, 0, 0, %stack.4.rowstr.addr, 0, 0, %stack.18.vc, 0, %28:gr32, %27:gr32, %29:gr32, implicit-def dead early-clobber $r11, debug-location !669 :: (load 8 from %stack.2.a.addr), (load 8 from %fixed-stack.2, align 16), (load 8 from %fixed-stack.1), (load 8 from %fixed-stack.3), (load 8 from %stack.18.vc, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.3.colidx.addr), (load 8 from %stack.5.firstrow.addr, align 4), (load 8 from %stack.13.iouter, align 4), (load 8 from %fixed-stack.0, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.14.ivelt, align 4), (load 8 from %fixed-stack.6, align 16), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.16.nn1, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.15.nzv, align 4), (load 8 from %stack.4.rowstr.addr), (load 8 from %stack.18.vc, align 16); cg.c:620:16
816B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !669; cg.c:620:16
832B	  %32:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
848B	  %34:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
880B	  %34:gr32 = nsw INC32r %34:gr32(tied-def 0), implicit-def dead $eflags, debug-location !673; cg.c:620:41
896B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !674; cg.c:620:9
928B	  $rsi = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
944B	  $rdx = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
960B	  $rcx = LEA64r %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !674; cg.c:620:9
968B	  $edi = COPY %32:gr32, debug-location !674; cg.c:620:9
976B	  $r8d = COPY %34:gr32, debug-location !674; cg.c:620:9
992B	  $xmm0 = COPY %36:fr64, debug-location !674; cg.c:620:9
1008B	  CALL64pcrel32 @vecset, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, debug-location !674; cg.c:620:9
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !674; cg.c:620:9
1040B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !675; cg.c:621:24
1056B	  PCN_STACKMAP 1, 0, 0, %stack.2.a.addr, 0, 0, %fixed-stack.2, 0, %34:gr32, 0, %fixed-stack.1, 0, 0, %fixed-stack.3, 0, 0, %stack.18.vc, 0, 0, %stack.17.ivc, 0, 0, %stack.3.colidx.addr, 0, 0, %stack.5.firstrow.addr, 0, 0, %stack.13.iouter, 0, 0, %fixed-stack.0, 0, 0, %stack.17.ivc, 0, 0, %stack.14.ivelt, 0, 0, %fixed-stack.6, 0, 0, %stack.0.n.addr, 0, 0, %stack.16.nn1, 0, 0, %stack.1.nz.addr, 0, 0, %stack.15.nzv, 0, 0, %stack.4.rowstr.addr, 0, 0, %stack.18.vc, 0, %32:gr32, implicit-def dead early-clobber $r11, debug-location !675 :: (load 8 from %stack.2.a.addr), (load 8 from %fixed-stack.2, align 16), (load 8 from %fixed-stack.1), (load 8 from %fixed-stack.3), (load 8 from %stack.18.vc, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.3.colidx.addr), (load 8 from %stack.5.firstrow.addr, align 4), (load 8 from %stack.13.iouter, align 4), (load 8 from %fixed-stack.0, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.14.ivelt, align 4), (load 8 from %fixed-stack.6, align 16), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.16.nn1, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.15.nzv, align 4), (load 8 from %stack.4.rowstr.addr), (load 8 from %stack.18.vc, align 16); cg.c:621:24
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !675; cg.c:621:24
1088B	  %37:gr32 = MOV32rm %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
1104B	  %38:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !676 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
1120B	  %39:gr64_nosp = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !677 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
1136B	  MOV32mr %38:gr64, 4, %39:gr64_nosp, 0, $noreg, %37:gr32, debug-location !678 :: (store 4 into %ir.arrayidx); cg.c:621:22
1152B	  MOV32mi %stack.14.ivelt, 1, $noreg, 0, $noreg, 0, debug-location !679 :: (store 4 into %ir.ivelt); cg.c:623:20

1168B	bb.5.for.cond5:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

1184B	  %40:gr32 = MOV32rm %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
1200B	  CMP32rm %40:gr32, %stack.15.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !685 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:31
1216B	  JCC_1 %bb.7, 13, implicit killed $eflags, debug-location !686; cg.c:623:9
1232B	  JMP_1 %bb.6, debug-location !686; cg.c:623:9

1248B	bb.6.for.body7:
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1264B	  %42:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
1280B	  %45:gr32 = MOV32rm %31:gr64, 4, %42:gr64_nosp, 0, $noreg, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
1312B	  %45:gr32 = DEC32r %45:gr32(tied-def 0), implicit-def dead $eflags, debug-location !690; cg.c:624:46
1328B	  %49:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !692 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
1360B	  %49:gr64 = IMUL64rr %49:gr64(tied-def 0), %47:gr64, implicit-def dead $eflags, debug-location !691; cg.c:624:13
1392B	  %49:gr64 = ADD64rm %49:gr64(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
1408B	  MOV32mr %49:gr64, 4, %42:gr64_nosp, 0, $noreg, %45:gr32, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
1424B	  %50:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !695 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
1440B	  %52:fr64 = MOVSDrm_alt %30:gr64, 8, %50:gr64_nosp, 0, $noreg, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
1456B	  %56:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
1488B	  %56:gr64 = IMUL64rr %56:gr64(tied-def 0), %54:gr64, implicit-def dead $eflags, debug-location !697; cg.c:625:13
1520B	  %56:gr64 = ADD64rm %56:gr64(tied-def 0), %fixed-stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
1536B	  MOVSDmr %56:gr64, 8, %50:gr64_nosp, 0, $noreg, %52:fr64, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
1552B	  INC32m %stack.14.ivelt, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !701 :: (store 4 into %ir.ivelt), (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
1568B	  JMP_1 %bb.5, debug-location !702; cg.c:623:9

1584B	bb.7.for.end:
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1600B	  INC32m %stack.13.iouter, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !705 :: (store 4 into %ir.iouter), (dereferenceable load 4 from %ir.iouter); cg.c:617:40
1616B	  JMP_1 %bb.3, debug-location !706; cg.c:617:5

1632B	bb.8.for.end22:
	; predecessors: %bb.3

1648B	  %12:gr64 = MOV64rm %stack.2.a.addr, 1, $noreg, 0, $noreg, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
1664B	  %13:gr64 = MOV64rm %stack.3.colidx.addr, 1, $noreg, 0, $noreg, debug-location !710 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
1680B	  %14:gr64 = MOV64rm %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
1696B	  %15:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !712 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
1712B	  %16:gr32 = MOV32rm %stack.1.nz.addr, 1, $noreg, 0, $noreg, debug-location !713 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
1728B	  %17:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !714 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
1744B	  %18:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !715 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
1760B	  %19:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !716 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
1776B	  %20:gr32 = MOV32rm %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, debug-location !717 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
1792B	  %21:gr32 = MOV32rm %fixed-stack.6, 1, $noreg, 0, $noreg, debug-location !718 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
1808B	  %22:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !719 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21
1824B	  ADJCALLSTACKDOWN64 48, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !720; cg.c:633:5
1856B	  MOV64mr $rsp, 1, $noreg, 40, $noreg, %22:gr64, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
1872B	  MOV32mr $rsp, 1, $noreg, 32, $noreg, %21:gr32, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
1888B	  MOV32mr $rsp, 1, $noreg, 24, $noreg, %20:gr32, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
1904B	  MOV64mr $rsp, 1, $noreg, 16, $noreg, %19:gr64, debug-location !720 :: (store 8 into stack + 16); cg.c:633:5
1920B	  MOV64mr $rsp, 1, $noreg, 8, $noreg, %18:gr64, debug-location !720 :: (store 8 into stack + 8); cg.c:633:5
1936B	  MOV64mr $rsp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !720 :: (store 8 into stack); cg.c:633:5
1968B	  %25:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
1984B	  %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
2000B	  $rdi = COPY %12:gr64, debug-location !720; cg.c:633:5
2016B	  $rsi = COPY %13:gr64, debug-location !720; cg.c:633:5
2032B	  $rdx = COPY %14:gr64, debug-location !720; cg.c:633:5
2048B	  $ecx = COPY %15:gr32, debug-location !720; cg.c:633:5
2064B	  $r8d = COPY %16:gr32, debug-location !720; cg.c:633:5
2080B	  $r9d = MOV32ri 13, debug-location !720; cg.c:633:5
2096B	  $xmm0 = COPY %25:fr64, debug-location !720; cg.c:633:5
2112B	  $xmm1 = COPY %26:fr64, debug-location !720; cg.c:633:5
2128B	  CALL64pcrel32 @sparse, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, implicit $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !720; cg.c:633:5
2144B	  ADJCALLSTACKUP64 48, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !720; cg.c:633:5
2160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !721; cg.c:635:1
2176B	  PCN_STACKMAP 2, 0, %12:gr64, %13:gr64, %14:gr64, %15:gr32, %16:gr32, %17:gr64, %18:gr64, %19:gr64, %20:gr32, %21:gr32, %22:gr64, implicit-def dead early-clobber $r11, debug-location !721; cg.c:635:1
2192B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !721; cg.c:635:1
2208B	  RET 0, debug-location !721; cg.c:635:1

# End machine code for function makea.

Before MISched:
# Machine code for function conj_grad: NoPHIs, TracksLiveness
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP+24]
  fi#-2: size=8, align=8, fixed, at location [SP+16]
  fi#-1: size=8, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=8, align=8, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
  fi#16: size=8, align=8, at location [SP+8]
  fi#17: size=8, align=8, at location [SP+8]
  fi#18: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %4, $rsi in %5, $rdx in %6, $rcx in %7, $r8 in %8, $r9 in %9

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
  %9:gr64 = COPY $r9
  %8:gr64 = COPY $r8
  %7:gr64 = COPY $rcx
  %6:gr64 = COPY $rdx
  %5:gr64 = COPY $rsi
  %4:gr64 = COPY $rdi
  MOV64mr %stack.0.colidx.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.colidx.addr)
  MOV64mr %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.rowstr.addr)
  MOV64mr %stack.2.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
  MOV64mr %stack.3.z.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.z.addr)
  MOV64mr %stack.4.a.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.a.addr)
  MOV64mr %stack.5.p.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.p.addr)
  %10:gr32 = MOV32ri 25
  MOV32mr %stack.12.cgitmax, 1, $noreg, 0, $noreg, %10:gr32, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
  MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !763 :: (store 8 into %ir.rho); cg.c:409:9
  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !764 :: (store 4 into %ir.j); cg.c:414:12
  undef %160.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %13:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
  %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !770; cg.c:414:25
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !771 :: (dereferenceable load 4 from %ir.j); cg.c:414:19
  JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !772; cg.c:414:5
  JMP_1 %bb.2, debug-location !772; cg.c:414:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %155:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
  %156:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
  MOV64mi32 %155:gr64, 8, %156:gr64_nosp, 0, $noreg, 0, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
  %157:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !777 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
  %158:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
  MOV64mr %157:gr64, 8, %158:gr64_nosp, 0, $noreg, %160:gr64_with_sub_32bit_in_gr32temp, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
  %161:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !780 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
  %162:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !781 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
  %163:fr64 = MOVSDrm_alt %161:gr64, 8, %162:gr64_nosp, 0, $noreg, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
  %164:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
  MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
  %165:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !785 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
  %166:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !786 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
  %167:fr64 = MOVSDrm_alt %165:gr64, 8, %166:gr64_nosp, 0, $noreg, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
  %168:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !787 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
  MOVSDmr %168:gr64, 8, %166:gr64_nosp, 0, $noreg, %167:fr64, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !790 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:414:31
  JMP_1 %bb.1, debug-location !791; cg.c:414:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !794 :: (store 4 into %ir.j); cg.c:425:12

bb.4.for.cond11:
; predecessors: %bb.3, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %18:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  %18:gr32 = nsw SUB32rm %18:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !801 :: (dereferenceable load 4 from @firstcol); cg.c:425:29
  %18:gr32 = nsw INC32r %18:gr32(tied-def 0), implicit-def dead $eflags, debug-location !802; cg.c:425:40
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %18:gr32, implicit-def $eflags, debug-location !803 :: (dereferenceable load 4 from %ir.j); cg.c:425:19
  JCC_1 %bb.6, 13, implicit killed $eflags, debug-location !804; cg.c:425:5
  JMP_1 %bb.5, debug-location !804; cg.c:425:5

bb.5.for.body14:
; predecessors: %bb.4
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %148:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  %170:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !808 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  %153:fr64 = MOVSDrm_alt %148:gr64, 8, %170:gr64_nosp, 0, $noreg, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  %153:fr64 = MULSDrr %153:fr64(tied-def 0), %153:fr64, debug-location !811; cg.c:426:26
  %153:fr64 = ADDSDrm %153:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !812 :: (dereferenceable load 8 from %ir.rho); cg.c:426:19
  MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %153:fr64, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
  %154:gr32 = LEA64_32r %170:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !814; cg.c:425:46
  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %154:gr32, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46
  JMP_1 %bb.4, debug-location !815; cg.c:425:5

bb.6.for.end22:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %20:gr32 = MOV32ri 1
  MOV32mr %stack.11.cgit, 1, $noreg, 0, $noreg, %20:gr32, debug-location !818 :: (store 4 into %ir.cgit); cg.c:434:15

bb.7.for.cond23:
; predecessors: %bb.6, %bb.26
  successors: %bb.8(0x7c000000), %bb.27(0x04000000); %bb.8(96.88%), %bb.27(3.12%)

  %21:gr32 = MOV32rm %stack.11.cgit, 1, $noreg, 0, $noreg, debug-location !821 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
  CMP32rm %21:gr32, %stack.12.cgitmax, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !824 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:25
  JCC_1 %bb.27, 15, implicit killed $eflags, debug-location !825; cg.c:434:5
  JMP_1 %bb.8, debug-location !825; cg.c:434:5

bb.8.for.body25:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !826 :: (store 4 into %ir.j); cg.c:447:16

bb.9.for.cond26:
; predecessors: %bb.8, %bb.13
  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

  %68:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  %68:gr32 = nsw SUB32rm %68:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !834 :: (dereferenceable load 4 from @firstrow); cg.c:447:33
  %68:gr32 = nsw INC32r %68:gr32(tied-def 0), implicit-def dead $eflags, debug-location !835; cg.c:447:44
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %68:gr32, implicit-def $eflags, debug-location !836 :: (dereferenceable load 4 from %ir.j); cg.c:447:23
  JCC_1 %bb.14, 13, implicit killed $eflags, debug-location !837; cg.c:447:9
  JMP_1 %bb.10, debug-location !837; cg.c:447:9

bb.10.for.body30:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
  %128:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  %129:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !842 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  %130:gr32 = MOV32rm %128:gr64, 4, %129:gr64_nosp, 0, $noreg, debug-location !840 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %130:gr32, debug-location !843 :: (store 4 into %ir.k); cg.c:449:20

bb.11.for.cond33:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

  %131:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  %132:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !847 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  %133:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !848 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  CMP32rm %131:gr32, %132:gr64, 4, %133:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !850 :: (load 4 from %ir.arrayidx36); cg.c:449:35
  JCC_1 %bb.13, 13, implicit killed $eflags, debug-location !851; cg.c:449:13
  JMP_1 %bb.12, debug-location !851; cg.c:449:13

bb.12.for.body38:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %138:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
  %171:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  %146:fr64 = MOVSDrm_alt %138:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  %142:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !856 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
  %143:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !857 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  %144:gr64_nosp = MOVSX64rm32 %143:gr64, 4, %171:gr64_nosp, 0, $noreg, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  %146:fr64 = MULSDrm %146:fr64(tied-def 0), %142:gr64, 8, %144:gr64_nosp, 0, $noreg, debug-location !859 :: (load 8 from %ir.arrayidx44); cg.c:450:34
  %146:fr64 = ADDSDrm %146:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !860 :: (dereferenceable load 8 from %ir.sum); cg.c:450:27
  MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %146:fr64, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
  %147:gr32 = LEA64_32r %171:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !862; cg.c:449:53
  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %147:gr32, debug-location !862 :: (store 4 into %ir.k); cg.c:449:53
  JMP_1 %bb.11, debug-location !863; cg.c:449:13

bb.13.for.end49:
; predecessors: %bb.11
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %135:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
  %136:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !867 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
  %137:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !868 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  MOVSDmr %136:gr64, 8, %137:gr64_nosp, 0, $noreg, %135:fr64, debug-location !869 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !870 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:447:50
  JMP_1 %bb.9, debug-location !871; cg.c:447:9

bb.14.for.end54:
; predecessors: %bb.9
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !875 :: (store 4 into %ir.j); cg.c:497:16

bb.15.for.cond55:
; predecessors: %bb.14, %bb.16
  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

  %73:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  %73:gr32 = nsw SUB32rm %73:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !882 :: (dereferenceable load 4 from @firstcol); cg.c:497:33
  %73:gr32 = nsw INC32r %73:gr32(tied-def 0), implicit-def dead $eflags, debug-location !883; cg.c:497:44
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %73:gr32, implicit-def $eflags, debug-location !884 :: (dereferenceable load 4 from %ir.j); cg.c:497:23
  JCC_1 %bb.17, 13, implicit killed $eflags, debug-location !885; cg.c:497:9
  JMP_1 %bb.16, debug-location !885; cg.c:497:9

bb.16.for.body59:
; predecessors: %bb.15
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %120:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
  %172:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  %126:fr64 = MOVSDrm_alt %120:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  %124:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !890 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
  %126:fr64 = MULSDrm %126:fr64(tied-def 0), %124:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !892 :: (load 8 from %ir.arrayidx63); cg.c:498:26
  %126:fr64 = ADDSDrm %126:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !893 :: (dereferenceable load 8 from %ir.d); cg.c:498:19
  MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %126:fr64, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
  %127:gr32 = LEA64_32r %172:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !895; cg.c:497:50
  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %127:gr32, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50
  JMP_1 %bb.15, debug-location !896; cg.c:497:9

bb.17.for.end68:
; predecessors: %bb.15
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %75:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  %76:fr64 = COPY %75:fr64, debug-location !901; cg.c:504:21
  %76:fr64 = DIVSDrm %76:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !901 :: (dereferenceable load 8 from %ir.d); cg.c:504:21
  MOVSDmr %stack.17.alpha, 1, $noreg, 0, $noreg, %76:fr64, debug-location !902 :: (store 8 into %ir.alpha); cg.c:504:15
  MOVSDmr %stack.16.rho0, 1, $noreg, 0, $noreg, %75:fr64, debug-location !904 :: (store 8 into %ir.rho0); cg.c:509:14
  MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !905 :: (store 8 into %ir.rho); cg.c:515:13
  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !906 :: (store 4 into %ir.j); cg.c:516:16

bb.18.for.cond69:
; predecessors: %bb.17, %bb.19
  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

  %80:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  %80:gr32 = nsw SUB32rm %80:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !913 :: (dereferenceable load 4 from @firstcol); cg.c:516:33
  %80:gr32 = nsw INC32r %80:gr32(tied-def 0), implicit-def dead $eflags, debug-location !914; cg.c:516:44
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %80:gr32, implicit-def $eflags, debug-location !915 :: (dereferenceable load 4 from %ir.j); cg.c:516:23
  JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !916; cg.c:516:9
  JMP_1 %bb.19, debug-location !916; cg.c:516:9

bb.19.for.body73:
; predecessors: %bb.18
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %107:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
  %108:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
  %112:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !920 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
  %110:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !921 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
  %112:fr64 = MULSDrm %112:fr64(tied-def 0), %110:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !923 :: (load 8 from %ir.arrayidx77); cg.c:517:33
  %112:fr64 = ADDSDrm %112:fr64(tied-def 0), %107:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !924 :: (load 8 from %ir.arrayidx75); cg.c:517:25
  MOVSDmr %107:gr64, 8, %108:gr64_nosp, 0, $noreg, %112:fr64, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
  %113:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !928 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
  %114:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !929 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
  %119:fr64 = MOVSDrm_alt %113:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
  %118:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !930 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
  %117:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !931 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
  %118:fr64 = MULSDrm %118:fr64(tied-def 0), %117:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !933 :: (load 8 from %ir.arrayidx85); cg.c:518:33
  %119:fr64 = SUBSDrr %119:fr64(tied-def 0), %118:fr64, debug-location !934; cg.c:518:25
  MOVSDmr %113:gr64, 8, %114:gr64_nosp, 0, $noreg, %119:fr64, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !938 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:516:50
  JMP_1 %bb.18, debug-location !939; cg.c:516:9

bb.20.for.end92:
; predecessors: %bb.18
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !942 :: (store 4 into %ir.j); cg.c:526:16

bb.21.for.cond93:
; predecessors: %bb.20, %bb.22
  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

  %85:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  %85:gr32 = nsw SUB32rm %85:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !949 :: (dereferenceable load 4 from @firstcol); cg.c:526:33
  %85:gr32 = nsw INC32r %85:gr32(tied-def 0), implicit-def dead $eflags, debug-location !950; cg.c:526:44
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %85:gr32, implicit-def $eflags, debug-location !951 :: (dereferenceable load 4 from %ir.j); cg.c:526:23
  JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !952; cg.c:526:9
  JMP_1 %bb.22, debug-location !952; cg.c:526:9

bb.22.for.body97:
; predecessors: %bb.21
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %100:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  %174:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !956 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  %105:fr64 = MOVSDrm_alt %100:gr64, 8, %174:gr64_nosp, 0, $noreg, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  %105:fr64 = MULSDrr %105:fr64(tied-def 0), %105:fr64, debug-location !959; cg.c:527:30
  %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !960 :: (dereferenceable load 8 from %ir.rho); cg.c:527:23
  MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %105:fr64, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
  %106:gr32 = LEA64_32r %174:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !962; cg.c:526:50
  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %106:gr32, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50
  JMP_1 %bb.21, debug-location !963; cg.c:526:9

bb.23.for.end106:
; predecessors: %bb.21
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  %88:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !966 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
  %88:fr64 = DIVSDrm %88:fr64(tied-def 0), %stack.16.rho0, 1, $noreg, 0, $noreg, debug-location !968 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:20
  MOVSDmr %stack.18.beta, 1, $noreg, 0, $noreg, %88:fr64, debug-location !969 :: (store 8 into %ir.beta); cg.c:533:14
  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !970 :: (store 4 into %ir.j); cg.c:538:16

bb.24.for.cond108:
; predecessors: %bb.23, %bb.25
  successors: %bb.25(0x7c000000), %bb.26(0x04000000); %bb.25(96.88%), %bb.26(3.12%)

  %92:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  %92:gr32 = nsw SUB32rm %92:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !977 :: (dereferenceable load 4 from @firstcol); cg.c:538:33
  %92:gr32 = nsw INC32r %92:gr32(tied-def 0), implicit-def dead $eflags, debug-location !978; cg.c:538:44
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %92:gr32, implicit-def $eflags, debug-location !979 :: (dereferenceable load 4 from %ir.j); cg.c:538:23
  JCC_1 %bb.26, 13, implicit killed $eflags, debug-location !980; cg.c:538:9
  JMP_1 %bb.25, debug-location !980; cg.c:538:9

bb.25.for.body112:
; predecessors: %bb.24
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  %94:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  %95:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  %99:fr64 = MOVSDrm_alt %stack.18.beta, 1, $noreg, 0, $noreg, debug-location !984 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  %97:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !985 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  %99:fr64 = MULSDrm %99:fr64(tied-def 0), %97:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !987 :: (load 8 from %ir.arrayidx116); cg.c:539:32
  %99:fr64 = ADDSDrm %99:fr64(tied-def 0), %94:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !988 :: (load 8 from %ir.arrayidx114); cg.c:539:25
  MOVSDmr %97:gr64, 8, %95:gr64_nosp, 0, $noreg, %99:fr64, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !992 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:538:50
  JMP_1 %bb.24, debug-location !993; cg.c:538:9

bb.26.for.end123:
; predecessors: %bb.24
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  INC32m %stack.11.cgit, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !996 :: (store 4 into %ir.cgit), (dereferenceable load 4 from %ir.cgit); cg.c:434:41
  JMP_1 %bb.7, debug-location !997; cg.c:434:5

bb.27.for.end126:
; predecessors: %bb.7
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !1001 :: (store 4 into %ir.j); cg.c:549:12

bb.28.for.cond127:
; predecessors: %bb.27, %bb.32
  successors: %bb.29(0x7c000000), %bb.33(0x04000000); %bb.29(96.88%), %bb.33(3.12%)

  %26:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  %26:gr32 = nsw SUB32rm %26:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !1008 :: (dereferenceable load 4 from @firstrow); cg.c:549:29
  %26:gr32 = nsw INC32r %26:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1009; cg.c:549:40
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %26:gr32, implicit-def $eflags, debug-location !1010 :: (dereferenceable load 4 from %ir.j); cg.c:549:19
  JCC_1 %bb.33, 13, implicit killed $eflags, debug-location !1011; cg.c:549:5
  JMP_1 %bb.29, debug-location !1011; cg.c:549:5

bb.29.for.body131:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
  %45:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  %46:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1016 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  %47:gr32 = MOV32rm %45:gr64, 4, %46:gr64_nosp, 0, $noreg, debug-location !1014 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %47:gr32, debug-location !1017 :: (store 4 into %ir.k); cg.c:551:16

bb.30.for.cond134:
; predecessors: %bb.29, %bb.31
  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)

  %48:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  %49:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1021 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  %50:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1022 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  CMP32rm %48:gr32, %49:gr64, 4, %50:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1024 :: (load 4 from %ir.arrayidx137); cg.c:551:31
  JCC_1 %bb.32, 13, implicit killed $eflags, debug-location !1025; cg.c:551:9
  JMP_1 %bb.31, debug-location !1025; cg.c:551:9

bb.31.for.body139:
; predecessors: %bb.30
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  %55:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
  %175:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  %63:fr64 = MOVSDrm_alt %55:gr64, 8, %175:gr64_nosp, 0, $noreg, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  %59:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !1030 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
  %60:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1031 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  %61:gr64_nosp = MOVSX64rm32 %60:gr64, 4, %175:gr64_nosp, 0, $noreg, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  %63:fr64 = MULSDrm %63:fr64(tied-def 0), %59:gr64, 8, %61:gr64_nosp, 0, $noreg, debug-location !1033 :: (load 8 from %ir.arrayidx145); cg.c:552:26
  %63:fr64 = ADDSDrm %63:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1034 :: (dereferenceable load 8 from %ir.d); cg.c:552:19
  MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %63:fr64, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
  %64:gr32 = LEA64_32r %175:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1036; cg.c:551:49
  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %64:gr32, debug-location !1036 :: (store 4 into %ir.k); cg.c:551:49
  JMP_1 %bb.30, debug-location !1037; cg.c:551:9

bb.32.for.end150:
; predecessors: %bb.30
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  %52:fr64 = MOVSDrm_alt %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
  %53:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1041 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  %54:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1042 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  MOVSDmr %53:gr64, 8, %54:gr64_nosp, 0, $noreg, %52:fr64, debug-location !1043 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1044 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:549:46
  JMP_1 %bb.28, debug-location !1045; cg.c:549:5

bb.33.for.end155:
; predecessors: %bb.28
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !1048 :: (store 4 into %ir.j); cg.c:560:12

bb.34.for.cond156:
; predecessors: %bb.33, %bb.35
  successors: %bb.35(0x7c000000), %bb.36(0x04000000); %bb.35(96.88%), %bb.36(3.12%)

  %31:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  %31:gr32 = nsw SUB32rm %31:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !1055 :: (dereferenceable load 4 from @firstcol); cg.c:560:29
  %31:gr32 = nsw INC32r %31:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1056; cg.c:560:40
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %31:gr32, implicit-def $eflags, debug-location !1057 :: (dereferenceable load 4 from %ir.j); cg.c:560:19
  JCC_1 %bb.36, 13, implicit killed $eflags, debug-location !1058; cg.c:560:5
  JMP_1 %bb.35, debug-location !1058; cg.c:560:5

bb.35.for.body160:
; predecessors: %bb.34
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  %36:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  %176:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  %42:fr64 = MOVSDrm_alt %36:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  %40:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1062 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  %42:fr64 = SUBSDrm %42:fr64(tied-def 0), %40:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1064 :: (load 8 from %ir.arrayidx164); cg.c:561:18
  MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
  %42:fr64 = MULSDrr %42:fr64(tied-def 0), %42:fr64, debug-location !1069; cg.c:562:23
  %42:fr64 = ADDSDrm %42:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1070 :: (dereferenceable load 8 from %ir.sum); cg.c:562:19
  MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
  %44:gr32 = LEA64_32r %176:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1072; cg.c:560:46
  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %44:gr32, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46
  JMP_1 %bb.34, debug-location !1073; cg.c:560:5

bb.36.for.end170:
; predecessors: %bb.34
  successors: %bb.37(0x40000000), %bb.38(0x40000000); %bb.37(50.00%), %bb.38(50.00%)

  %0:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  %33:fr64 = FsFLD0SD
  UCOMISDrr %0:fr64, %33:fr64, implicit-def $eflags, debug-location !1078; cg.c:565:6
  JCC_1 %bb.38, 2, implicit killed $eflags, debug-location !1078; cg.c:565:6

bb.37:
; predecessors: %bb.36
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  %169:fr64 = SQRTSDr %0:fr64
  JMP_1 %bb.39

bb.38.call.sqrt:
; predecessors: %bb.36
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1078; cg.c:565:6
  $xmm0 = COPY %0:fr64, debug-location !1078; cg.c:565:6
  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1078; cg.c:565:6
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1078; cg.c:565:6
  %169:fr64 = COPY killed $xmm0, debug-location !1078; cg.c:565:6

bb.39.for.end170.split:
; predecessors: %bb.38, %bb.37

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1078; cg.c:565:6
  PCN_STACKMAP 0, 0, 0, %fixed-stack.0, 0, %0:fr64, implicit-def dead early-clobber $r11, debug-location !1078 :: (load 8 from %fixed-stack.0, align 16); cg.c:565:6
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1078; cg.c:565:6
  %35:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  MOVSDmr %35:gr64, 1, $noreg, 0, $noreg, %169:fr64, debug-location !1079 :: (store 8 into %ir.158); cg.c:565:12
  RET 0, debug-location !1080; cg.c:566:1

# End machine code for function conj_grad.

********** MI Scheduling **********
conj_grad:%bb.0 entry
  From: %9:gr64 = COPY $r9
    To: End RegionInstrs: 17
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: %160 
Live Thru: 
  LiveReg: %160
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
GR16=8
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %9:gr64 = COPY $r9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%9
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR32temp+GR64_TC 1    GR8+GR32temp 1    GR16 -1
  Single Issue       : false;
SU(1):   %8:gr64 = COPY $r8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%8
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR32temp+GR64_TC 1    GR8+GR32temp 1    GR16 -1
  Single Issue       : false;
SU(2):   %7:gr64 = COPY $rcx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%7
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR32temp 2
  Single Issue       : false;
SU(3):   %6:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%6
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR32temp 2    GR32temp+GR32_DIBP 2
  Single Issue       : false;
SU(4):   %5:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%5
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1
  Single Issue       : false;
SU(5):   %4:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%4
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(6):   MOV64mr %stack.0.colidx.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.colidx.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV64mr %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV64mr %stack.2.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV64mr %stack.3.z.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.z.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%7
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV64mr %stack.4.a.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%8
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV64mr %stack.5.p.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.p.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%9
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %10:gr32 = MOV32ri 25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%10
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV32mr %stack.12.cgitmax, 1, $noreg, 0, $noreg, %10:gr32, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%10
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !763 :: (store 8 into %ir.rho); cg.c:409:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !764 :: (store 4 into %ir.j); cg.c:414:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   undef %160.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32temp -2    GR32temp+GR32_DIBP -2    GR32temp+GR64_TC -2    GR8+GR32temp -2    GR16 -2
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 15 14 13 11 10 9 8 7 6 
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) undef %160.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 15 14 13 11 10 9 8 7 
  Cand SU(6) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !764 :: (store 4 into %ir.j); cg.c:414:12
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 14 13 11 10 9 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !763 :: (store 8 into %ir.rho); cg.c:409:9
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 13 11 10 9 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV32mr %stack.12.cgitmax, 1, $noreg, 0, $noreg, %10:gr32, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
Bottom Pressure:
GR16=2
  LiveReg: %10
  UpdateRegP: SU(13) MOV32mr %stack.12.cgitmax, 1, $noreg, 0, $noreg, %10:gr32, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 11 10 12 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %10:gr32 = MOV32ri 25
Bottom Pressure:

  Ready @1c
  BotQ.A BotLatency SU(12) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 11 10 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr %stack.5.p.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.p.addr)
Bottom Pressure:
GR16=2
  LiveReg: %9
  UpdateRegP: SU(11) MOV64mr %stack.5.p.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.p.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 10 0 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV64mr %stack.4.a.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.a.addr)
Bottom Pressure:
GR16=4
  LiveReg: %8
  UpdateRegP: SU(10) MOV64mr %stack.4.a.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.a.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 0 1 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV64mr %stack.3.z.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.z.addr)
Bottom Pressure:
GR16=6
  LiveReg: %7
  UpdateRegP: SU(9) MOV64mr %stack.3.z.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.z.addr)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 1 0 2 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV64mr %stack.2.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
Bottom Pressure:
GR16=8
  LiveReg: %6
  UpdateRegP: SU(8) MOV64mr %stack.2.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 2 1 0 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV64mr %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.rowstr.addr)
Bottom Pressure:
GR16=10
  LiveReg: %5
  UpdateRegP: SU(7) MOV64mr %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.rowstr.addr)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 2 1 0 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV64mr %stack.0.colidx.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.colidx.addr)
Bottom Pressure:
GR16=12
  LiveReg: %4
  UpdateRegP: SU(6) MOV64mr %stack.0.colidx.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.colidx.addr)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %4:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %5:gr64 = COPY $rsi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %6:gr64 = COPY $rdx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
GR16=10
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %7:gr64 = COPY $rcx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %8:gr64 = COPY $r8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
GR16=9
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:gr64 = COPY $r9
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
GR16=8
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %9:gr64 = COPY $r9
SU(1):   %8:gr64 = COPY $r8
SU(2):   %7:gr64 = COPY $rcx
SU(3):   %6:gr64 = COPY $rdx
SU(4):   %5:gr64 = COPY $rsi
SU(5):   %4:gr64 = COPY $rdi
SU(6):   MOV64mr %stack.0.colidx.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.colidx.addr)
SU(7):   MOV64mr %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.rowstr.addr)
SU(8):   MOV64mr %stack.2.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
SU(9):   MOV64mr %stack.3.z.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.z.addr)
SU(10):   MOV64mr %stack.4.a.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.a.addr)
SU(11):   MOV64mr %stack.5.p.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.p.addr)
SU(12):   %10:gr32 = MOV32ri 25
SU(13):   MOV32mr %stack.12.cgitmax, 1, $noreg, 0, $noreg, %10:gr32, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
SU(14):   MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !763 :: (store 8 into %ir.rho); cg.c:409:9
SU(15):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !764 :: (store 4 into %ir.j); cg.c:414:12
SU(16):   undef %160.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags

********** MI Scheduling **********
conj_grad:%bb.1 for.cond
  From: %13:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
    To: JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !772; cg.c:414:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %13:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%13
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !770; cg.c:414:25
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%13
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%13
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !771 :: (dereferenceable load 4 from %ir.j); cg.c:414:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%13
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !772; cg.c:414:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !771 :: (dereferenceable load 4 from %ir.j); cg.c:414:19
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !770; cg.c:414:25
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %13:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %13:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
SU(1):   %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !770; cg.c:414:25
SU(2):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !771 :: (dereferenceable load 4 from %ir.j); cg.c:414:19

********** MI Scheduling **********
conj_grad:%bb.2 for.body
  From: %155:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
    To: JMP_1 %bb.1, debug-location !791; cg.c:414:5
 RegionInstrs: 17
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=1
GR16=6
Live In: %160 
Live Out: %160 
Live Thru: GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
  LiveReg: %160
  UpdateRegP: SU(5) MOV64mr %157:gr64, 8, %158:gr64_nosp, 0, $noreg, %160:gr64_with_sub_32bit_in_gr32temp, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
              to GR16 4
Top Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
Excess PSets: 
SU(0):   %155:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
    SU(2): Data Latency=4 Reg=%155
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %156:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
    SU(2): Data Latency=4 Reg=%156
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   MOV64mi32 %155:gr64, 8, %156:gr64_nosp, 0, $noreg, 0, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
  # preds left       : 4
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 26
  Predecessors:
    SU(1): Data Latency=4 Reg=%156
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%155
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(14): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(3): Ord  Latency=1 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(3):   %157:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !777 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 25
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%157
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %158:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 25
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%158
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr %157:gr64, 8, %158:gr64_nosp, 0, $noreg, %160:gr64_with_sub_32bit_in_gr32temp, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
  # preds left       : 7
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 21
  Predecessors:
    SU(4): Data Latency=4 Reg=%158
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%157
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(14): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(6):   %161:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !780 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 20
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%161
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %162:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !781 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 20
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(10): Data Latency=4 Reg=%162
    SU(8): Data Latency=4 Reg=%162
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %163:fr64 = MOVSDrm_alt %161:gr64, 8, %162:gr64_nosp, 0, $noreg, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 16
  Predecessors:
    SU(7): Data Latency=4 Reg=%162
    SU(6): Data Latency=4 Reg=%161
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(10): Data Latency=4 Reg=%163
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(9):   %164:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 16
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(10): Data Latency=4 Reg=%164
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
  # preds left       : 13
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 12
  Predecessors:
    SU(8): Data Latency=4 Reg=%163
    SU(9): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=%164
    SU(8): Ord  Latency=0 Memory
    SU(7): Data Latency=4 Reg=%162
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(11):   %165:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !785 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 11
  Predecessors:
    SU(10): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%165
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(12):   %166:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !786 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 11
  Predecessors:
    SU(10): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%166
    SU(13): Data Latency=4 Reg=%166
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   %167:fr64 = MOVSDrm_alt %165:gr64, 8, %166:gr64_nosp, 0, $noreg, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 23
  Height             : 7
  Predecessors:
    SU(12): Data Latency=4 Reg=%166
    SU(11): Data Latency=4 Reg=%165
    SU(10): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%167
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(14):   %168:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !787 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 7
  Predecessors:
    SU(10): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%168
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   MOVSDmr %168:gr64, 8, %166:gr64_nosp, 0, $noreg, %167:fr64, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
  # preds left       : 18
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 3
  Predecessors:
    SU(13): Data Latency=4 Reg=%167
    SU(14): Ord  Latency=0 Memory
    SU(14): Data Latency=4 Reg=%168
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=4 Reg=%166
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(16): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(16):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !790 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:414:31
  # preds left       : 10
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 27
  Height             : 3
  Predecessors:
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1, debug-location !791; cg.c:414:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 30
  Height             : 0
  Predecessors:
    SU(16): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 30
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Scheduling SU(16) INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !790 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:414:31
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
  Ready @3c
  BotQ.A TopLatency SU(16) 27c
  BotQ.A BotLatency SU(16) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) MOVSDmr %168:gr64, 8, %166:gr64_nosp, 0, $noreg, %167:fr64, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
Bottom Pressure:
FR32=1
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=1
GR16=6
  LiveReg: %168
  UpdateRegP: SU(15) MOVSDmr %168:gr64, 8, %166:gr64_nosp, 0, $noreg, %167:fr64, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %166
  UpdateRegP: SU(13) %167:fr64 = MOVSDrm_alt %165:gr64, 8, %166:gr64_nosp, 0, $noreg, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(15) MOVSDmr %168:gr64, 8, %166:gr64_nosp, 0, $noreg, %167:fr64, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
              to FR32 1    FR32X 1
  LiveReg: %167
  UpdateRegP: SU(15) MOVSDmr %168:gr64, 8, %166:gr64_nosp, 0, $noreg, %167:fr64, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 
  Cand SU(14) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(14) %168:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !787 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
Bottom Pressure:
FR32=1
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=1
GR16=4
  Ready @7c
  BotQ.A BotLatency SU(14) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) %167:fr64 = MOVSDrm_alt %165:gr64, 8, %166:gr64_nosp, 0, $noreg, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=6
  LiveReg: %165
  UpdateRegP: SU(13) %167:fr64 = MOVSDrm_alt %165:gr64, 8, %166:gr64_nosp, 0, $noreg, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
              to FR32 -1    FR32X -1
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %166:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !786 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=4
  Ready @11c
  BotQ.A BotLatency SU(12) 11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) %165:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !785 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
  Ready @11c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
Bottom Pressure:
FR32=1
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=1
GR16=6
  LiveReg: %164
  UpdateRegP: SU(10) MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %162
  UpdateRegP: SU(8) %163:fr64 = MOVSDrm_alt %161:gr64, 8, %162:gr64_nosp, 0, $noreg, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(10) MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
              to FR32 1    FR32X 1
  LiveReg: %163
  UpdateRegP: SU(10) MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
              to 
  Ready @12c
  BotQ.A BotLatency SU(10) 12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 8 
  Cand SU(9) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(9) %164:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
Bottom Pressure:
FR32=1
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=1
GR16=4
  Ready @16c
  BotQ.A BotLatency SU(9) 16c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %163:fr64 = MOVSDrm_alt %161:gr64, 8, %162:gr64_nosp, 0, $noreg, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=6
  LiveReg: %161
  UpdateRegP: SU(8) %163:fr64 = MOVSDrm_alt %161:gr64, 8, %162:gr64_nosp, 0, $noreg, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
              to FR32 -1    FR32X -1
  Ready @16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %162:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !781 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=4
  Ready @20c
  BotQ.A BotLatency SU(7) 20c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %161:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !780 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
  Ready @20c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV64mr %157:gr64, 8, %158:gr64_nosp, 0, $noreg, %160:gr64_with_sub_32bit_in_gr32temp, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=6
  LiveReg: %157
  UpdateRegP: SU(5) MOV64mr %157:gr64, 8, %158:gr64_nosp, 0, $noreg, %160:gr64_with_sub_32bit_in_gr32temp, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
              to GR16 2
  LiveReg: %158
  UpdateRegP: SU(5) MOV64mr %157:gr64, 8, %158:gr64_nosp, 0, $noreg, %160:gr64_with_sub_32bit_in_gr32temp, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
              to 
  Ready @21c
  BotQ.A BotLatency SU(5) 21c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %158:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=4
  Ready @25c
  BotQ.A BotLatency SU(4) 25c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %157:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !777 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
  Ready @25c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV64mi32 %155:gr64, 8, %156:gr64_nosp, 0, $noreg, 0, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=6
  LiveReg: %155
  UpdateRegP: SU(2) MOV64mi32 %155:gr64, 8, %156:gr64_nosp, 0, $noreg, 0, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
              to GR16 2
  LiveReg: %156
  UpdateRegP: SU(2) MOV64mi32 %155:gr64, 8, %156:gr64_nosp, 0, $noreg, 0, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
              to 
  Ready @26c
  BotQ.A BotLatency SU(2) 26c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %156:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=4
  Ready @30c
  BotQ.A BotLatency SU(1) 30c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %155:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
Bottom Pressure:
GR32temp=2
GR32temp+GR32_DIBP=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
  Ready @30c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %155:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
SU(1):   %156:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
SU(2):   MOV64mi32 %155:gr64, 8, %156:gr64_nosp, 0, $noreg, 0, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
SU(3):   %157:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !777 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
SU(4):   %158:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
SU(5):   MOV64mr %157:gr64, 8, %158:gr64_nosp, 0, $noreg, %160:gr64_with_sub_32bit_in_gr32temp, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
SU(6):   %161:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !780 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
SU(7):   %162:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !781 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
SU(8):   %163:fr64 = MOVSDrm_alt %161:gr64, 8, %162:gr64_nosp, 0, $noreg, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
SU(9):   %164:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
SU(10):   MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
SU(11):   %165:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !785 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
SU(12):   %166:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !786 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
SU(13):   %167:fr64 = MOVSDrm_alt %165:gr64, 8, %166:gr64_nosp, 0, $noreg, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
SU(14):   %168:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !787 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
SU(15):   MOVSDmr %168:gr64, 8, %166:gr64_nosp, 0, $noreg, %167:fr64, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
SU(16):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !790 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:414:31

********** MI Scheduling **********
conj_grad:%bb.4 for.cond11
  From: %18:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
    To: JCC_1 %bb.6, 13, implicit killed $eflags, debug-location !804; cg.c:425:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %18:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%18
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %18:gr32 = nsw SUB32rm %18:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !801 :: (dereferenceable load 4 from @firstcol); cg.c:425:29
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%18
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%18
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %18:gr32 = nsw INC32r %18:gr32(tied-def 0), implicit-def dead $eflags, debug-location !802; cg.c:425:40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%18
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%18
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %18:gr32, implicit-def $eflags, debug-location !803 :: (dereferenceable load 4 from %ir.j); cg.c:425:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%18
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.6, 13, implicit killed $eflags, debug-location !804; cg.c:425:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %18:gr32, implicit-def $eflags, debug-location !803 :: (dereferenceable load 4 from %ir.j); cg.c:425:19
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %18:gr32 = nsw INC32r %18:gr32(tied-def 0), implicit-def dead $eflags, debug-location !802; cg.c:425:40
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %18:gr32 = nsw SUB32rm %18:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !801 :: (dereferenceable load 4 from @firstcol); cg.c:425:29
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %18:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %18:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
SU(1):   %18:gr32 = nsw SUB32rm %18:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !801 :: (dereferenceable load 4 from @firstcol); cg.c:425:29
SU(2):   %18:gr32 = nsw INC32r %18:gr32(tied-def 0), implicit-def dead $eflags, debug-location !802; cg.c:425:40
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %18:gr32, implicit-def $eflags, debug-location !803 :: (dereferenceable load 4 from %ir.j); cg.c:425:19

********** MI Scheduling **********
conj_grad:%bb.5 for.body14
  From: %148:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
    To: JMP_1 %bb.4, debug-location !815; cg.c:425:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %148:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(2): Data Latency=4 Reg=%148
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %170:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !808 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(6): Data Latency=4 Reg=%170
    SU(2): Data Latency=4 Reg=%170
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %153:fr64 = MOVSDrm_alt %148:gr64, 8, %170:gr64_nosp, 0, $noreg, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(1): Data Latency=4 Reg=%170
    SU(0): Data Latency=4 Reg=%148
  Successors:
    SU(3): Data Latency=4 Reg=%153
    SU(3): Out  Latency=0
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   %153:fr64 = MULSDrr %153:fr64(tied-def 0), %153:fr64, debug-location !811; cg.c:426:26
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%153
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%153
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %153:fr64 = ADDSDrm %153:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !812 :: (dereferenceable load 8 from %ir.rho); cg.c:426:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%153
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%153
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %153:fr64, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%153
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %154:gr32 = LEA64_32r %170:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !814; cg.c:425:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%170
  Successors:
    SU(7): Data Latency=1 Reg=%154
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %154:gr32, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%154
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.4, debug-location !815; cg.c:425:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %154:gr32, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46
Bottom Pressure:
GR16=2
  LiveReg: %154
  UpdateRegP: SU(7) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %154:gr32, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %154:gr32 = LEA64_32r %170:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !814; cg.c:425:46
Bottom Pressure:
GR16=2
  LiveReg: %170
  UpdateRegP: SU(2) %153:fr64 = MOVSDrm_alt %148:gr64, 8, %170:gr64_nosp, 0, $noreg, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(6) %154:gr32 = LEA64_32r %170:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !814; cg.c:425:46
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %153:fr64, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %153
  UpdateRegP: SU(5) MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %153:fr64, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
              to 
  Ready @0c
  BotQ.A TopLatency SU(5) 13c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %153:fr64 = ADDSDrm %153:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !812 :: (dereferenceable load 8 from %ir.rho); cg.c:426:19
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %153
  UpdateRegP: SU(4) %153:fr64 = ADDSDrm %153:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !812 :: (dereferenceable load 8 from %ir.rho); cg.c:426:19
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %153:fr64 = MULSDrr %153:fr64(tied-def 0), %153:fr64, debug-location !811; cg.c:426:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %153
  UpdateRegP: SU(3) %153:fr64 = MULSDrr %153:fr64(tied-def 0), %153:fr64, debug-location !811; cg.c:426:26
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %153:fr64 = MOVSDrm_alt %148:gr64, 8, %170:gr64_nosp, 0, $noreg, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
Bottom Pressure:
GR16=4
  LiveReg: %148
  UpdateRegP: SU(2) %153:fr64 = MOVSDrm_alt %148:gr64, 8, %170:gr64_nosp, 0, $noreg, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
              to FR32 -1    FR32X -1
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %170:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !808 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
Bottom Pressure:
GR16=2
  Ready @13c
  BotQ.A BotLatency SU(1) 13c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %148:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
Bottom Pressure:

  Ready @13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %148:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
SU(1):   %170:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !808 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
SU(2):   %153:fr64 = MOVSDrm_alt %148:gr64, 8, %170:gr64_nosp, 0, $noreg, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
SU(3):   %153:fr64 = MULSDrr %153:fr64(tied-def 0), %153:fr64, debug-location !811; cg.c:426:26
SU(4):   %153:fr64 = ADDSDrm %153:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !812 :: (dereferenceable load 8 from %ir.rho); cg.c:426:19
SU(5):   MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %153:fr64, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
SU(6):   %154:gr32 = LEA64_32r %170:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !814; cg.c:425:46
SU(7):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %154:gr32, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46

********** MI Scheduling **********
conj_grad:%bb.6 for.end22
  From: %20:gr32 = MOV32ri 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %20:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%20
  Single Issue       : false;
SU(1):   MOV32mr %stack.11.cgit, 1, $noreg, 0, $noreg, %20:gr32, debug-location !818 :: (store 4 into %ir.cgit); cg.c:434:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%20
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.11.cgit, 1, $noreg, 0, $noreg, %20:gr32, debug-location !818 :: (store 4 into %ir.cgit); cg.c:434:15
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %20:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %20:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.11.cgit, 1, $noreg, 0, $noreg, %20:gr32, debug-location !818 :: (store 4 into %ir.cgit); cg.c:434:15

********** MI Scheduling **********
conj_grad:%bb.7 for.cond23
  From: %21:gr32 = MOV32rm %stack.11.cgit, 1, $noreg, 0, $noreg, debug-location !821 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
    To: JCC_1 %bb.27, 15, implicit killed $eflags, debug-location !825; cg.c:434:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %21:gr32 = MOV32rm %stack.11.cgit, 1, $noreg, 0, $noreg, debug-location !821 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%21
  Single Issue       : false;
SU(1):   CMP32rm %21:gr32, %stack.12.cgitmax, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !824 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%21
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.27, 15, implicit killed $eflags, debug-location !825; cg.c:434:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %21:gr32, %stack.12.cgitmax, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !824 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:25
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %21:gr32 = MOV32rm %stack.11.cgit, 1, $noreg, 0, $noreg, debug-location !821 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %21:gr32 = MOV32rm %stack.11.cgit, 1, $noreg, 0, $noreg, debug-location !821 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
SU(1):   CMP32rm %21:gr32, %stack.12.cgitmax, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !824 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:25

********** MI Scheduling **********
conj_grad:%bb.9 for.cond26
  From: %68:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
    To: JCC_1 %bb.14, 13, implicit killed $eflags, debug-location !837; cg.c:447:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %68:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%68
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %68:gr32 = nsw SUB32rm %68:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !834 :: (dereferenceable load 4 from @firstrow); cg.c:447:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%68
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%68
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %68:gr32 = nsw INC32r %68:gr32(tied-def 0), implicit-def dead $eflags, debug-location !835; cg.c:447:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%68
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%68
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %68:gr32, implicit-def $eflags, debug-location !836 :: (dereferenceable load 4 from %ir.j); cg.c:447:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%68
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.14, 13, implicit killed $eflags, debug-location !837; cg.c:447:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %68:gr32, implicit-def $eflags, debug-location !836 :: (dereferenceable load 4 from %ir.j); cg.c:447:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %68:gr32 = nsw INC32r %68:gr32(tied-def 0), implicit-def dead $eflags, debug-location !835; cg.c:447:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %68:gr32 = nsw SUB32rm %68:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !834 :: (dereferenceable load 4 from @firstrow); cg.c:447:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %68:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %68:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
SU(1):   %68:gr32 = nsw SUB32rm %68:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !834 :: (dereferenceable load 4 from @firstrow); cg.c:447:33
SU(2):   %68:gr32 = nsw INC32r %68:gr32(tied-def 0), implicit-def dead $eflags, debug-location !835; cg.c:447:44
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %68:gr32, implicit-def $eflags, debug-location !836 :: (dereferenceable load 4 from %ir.j); cg.c:447:23

********** MI Scheduling **********
conj_grad:%bb.10 for.body30
  From: MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(1):   %128:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%128
  Single Issue       : false;
SU(2):   %129:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !842 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%129
  Single Issue       : false;
SU(3):   %130:gr32 = MOV32rm %128:gr64, 4, %129:gr64_nosp, 0, $noreg, debug-location !840 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%129
    SU(1): Data Latency=4 Reg=%128
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%130
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %130:gr32, debug-location !843 :: (store 4 into %ir.k); cg.c:449:20
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%130
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %130:gr32, debug-location !843 :: (store 4 into %ir.k); cg.c:449:20
  Ready @0c
  BotQ.A TopLatency SU(4) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %130:gr32 = MOV32rm %128:gr64, 4, %129:gr64_nosp, 0, $noreg, debug-location !840 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %129:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !842 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %128:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
SU(1):   %128:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
SU(2):   %129:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !842 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
SU(3):   %130:gr32 = MOV32rm %128:gr64, 4, %129:gr64_nosp, 0, $noreg, debug-location !840 :: (load 4 from %ir.arrayidx32); cg.c:449:22
SU(4):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %130:gr32, debug-location !843 :: (store 4 into %ir.k); cg.c:449:20

********** MI Scheduling **********
conj_grad:%bb.11 for.cond33
  From: %131:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
    To: JCC_1 %bb.13, 13, implicit killed $eflags, debug-location !851; cg.c:449:13
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %131:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%131
  Single Issue       : false;
SU(1):   %132:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !847 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%132
  Single Issue       : false;
SU(2):   %133:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !848 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%133
  Single Issue       : false;
SU(3):   CMP32rm %131:gr32, %132:gr64, 4, %133:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !850 :: (load 4 from %ir.arrayidx36); cg.c:449:35
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%133
    SU(1): Data Latency=4 Reg=%132
    SU(0): Data Latency=4 Reg=%131
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.13, 13, implicit killed $eflags, debug-location !851; cg.c:449:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %131:gr32, %132:gr64, 4, %133:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !850 :: (load 4 from %ir.arrayidx36); cg.c:449:35
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %133:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !848 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %132:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !847 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %131:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %131:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
SU(1):   %132:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !847 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
SU(2):   %133:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !848 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
SU(3):   CMP32rm %131:gr32, %132:gr64, 4, %133:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !850 :: (load 4 from %ir.arrayidx36); cg.c:449:35

********** MI Scheduling **********
conj_grad:%bb.12 for.body38
  From: %138:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
    To: JMP_1 %bb.11, debug-location !863; cg.c:449:13
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %138:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%138
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %171:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(9): Data Latency=4 Reg=%171
    SU(5): Data Latency=4 Reg=%171
    SU(2): Data Latency=4 Reg=%171
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %146:fr64 = MOVSDrm_alt %138:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%171
    SU(0): Data Latency=4 Reg=%138
  Successors:
    SU(6): Data Latency=4 Reg=%146
    SU(6): Out  Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   %142:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !856 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(6): Data Latency=4 Reg=%142
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %143:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !857 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(5): Data Latency=4 Reg=%143
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %144:gr64_nosp = MOVSX64rm32 %143:gr64, 4, %171:gr64_nosp, 0, $noreg, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(4): Data Latency=4 Reg=%143
    SU(1): Data Latency=4 Reg=%171
  Successors:
    SU(6): Data Latency=4 Reg=%144
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %146:fr64 = MULSDrm %146:fr64(tied-def 0), %142:gr64, 8, %144:gr64_nosp, 0, $noreg, debug-location !859 :: (load 8 from %ir.arrayidx44); cg.c:450:34
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(5): Data Latency=4 Reg=%144
    SU(3): Data Latency=4 Reg=%142
    SU(2): Data Latency=4 Reg=%146
    SU(2): Out  Latency=0
  Successors:
    SU(7): Data Latency=4 Reg=%146
    SU(7): Out  Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(7):   %146:fr64 = ADDSDrm %146:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !860 :: (dereferenceable load 8 from %ir.sum); cg.c:450:27
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(6): Data Latency=4 Reg=%146
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%146
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %146:fr64, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%146
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %147:gr32 = LEA64_32r %171:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !862; cg.c:449:53
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%171
  Successors:
    SU(10): Data Latency=1 Reg=%147
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %147:gr32, debug-location !862 :: (store 4 into %ir.k); cg.c:449:53
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%147
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.11, debug-location !863; cg.c:449:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %147:gr32, debug-location !862 :: (store 4 into %ir.k); cg.c:449:53
Bottom Pressure:
GR16=2
  LiveReg: %147
  UpdateRegP: SU(10) MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %147:gr32, debug-location !862 :: (store 4 into %ir.k); cg.c:449:53
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %147:gr32 = LEA64_32r %171:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !862; cg.c:449:53
Bottom Pressure:
GR16=2
  LiveReg: %171
  UpdateRegP: SU(2) %146:fr64 = MOVSDrm_alt %138:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(5) %144:gr64_nosp = MOVSX64rm32 %143:gr64, 4, %171:gr64_nosp, 0, $noreg, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
              to 
  UpdateRegP: SU(9) %147:gr32 = LEA64_32r %171:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !862; cg.c:449:53
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %146:fr64, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %146
  UpdateRegP: SU(8) MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %146:fr64, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 16c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %146:fr64 = ADDSDrm %146:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !860 :: (dereferenceable load 8 from %ir.sum); cg.c:450:27
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %146
  UpdateRegP: SU(7) %146:fr64 = ADDSDrm %146:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !860 :: (dereferenceable load 8 from %ir.sum); cg.c:450:27
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %146:fr64 = MULSDrm %146:fr64(tied-def 0), %142:gr64, 8, %144:gr64_nosp, 0, $noreg, debug-location !859 :: (load 8 from %ir.arrayidx44); cg.c:450:34
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %146
  UpdateRegP: SU(6) %146:fr64 = MULSDrm %146:fr64(tied-def 0), %142:gr64, 8, %144:gr64_nosp, 0, $noreg, debug-location !859 :: (load 8 from %ir.arrayidx44); cg.c:450:34
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %142
  UpdateRegP: SU(6) %146:fr64 = MULSDrm %146:fr64(tied-def 0), %142:gr64, 8, %144:gr64_nosp, 0, $noreg, debug-location !859 :: (load 8 from %ir.arrayidx44); cg.c:450:34
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %144
  UpdateRegP: SU(6) %146:fr64 = MULSDrm %146:fr64(tied-def 0), %142:gr64, 8, %144:gr64_nosp, 0, $noreg, debug-location !859 :: (load 8 from %ir.arrayidx44); cg.c:450:34
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(6) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 2 
  Cand SU(5) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(5) %144:gr64_nosp = MOVSX64rm32 %143:gr64, 4, %171:gr64_nosp, 0, $noreg, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %143
  UpdateRegP: SU(5) %144:gr64_nosp = MOVSX64rm32 %143:gr64, 4, %171:gr64_nosp, 0, $noreg, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
              to GR16 -2
  Ready @12c
  BotQ.A BotLatency SU(5) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) REG-MAX                            
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %143:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !857 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @16c
  BotQ.A BotLatency SU(4) 16c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %142:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !856 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %146:fr64 = MOVSDrm_alt %138:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
Bottom Pressure:
GR16=4
  LiveReg: %138
  UpdateRegP: SU(2) %146:fr64 = MOVSDrm_alt %138:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
              to FR32 -1    FR32X -1
  Ready @12c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %171:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
Bottom Pressure:
GR16=2
  Ready @16c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %138:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
Bottom Pressure:

  Ready @16c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %138:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
SU(1):   %171:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
SU(2):   %146:fr64 = MOVSDrm_alt %138:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
SU(3):   %142:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !856 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
SU(4):   %143:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !857 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
SU(5):   %144:gr64_nosp = MOVSX64rm32 %143:gr64, 4, %171:gr64_nosp, 0, $noreg, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
SU(6):   %146:fr64 = MULSDrm %146:fr64(tied-def 0), %142:gr64, 8, %144:gr64_nosp, 0, $noreg, debug-location !859 :: (load 8 from %ir.arrayidx44); cg.c:450:34
SU(7):   %146:fr64 = ADDSDrm %146:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !860 :: (dereferenceable load 8 from %ir.sum); cg.c:450:27
SU(8):   MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %146:fr64, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
SU(9):   %147:gr32 = LEA64_32r %171:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !862; cg.c:449:53
SU(10):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %147:gr32, debug-location !862 :: (store 4 into %ir.k); cg.c:449:53

********** MI Scheduling **********
conj_grad:%bb.13 for.end49
  From: %135:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
    To: JMP_1 %bb.9, debug-location !871; cg.c:447:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %135:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%135
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %136:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !867 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%136
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %137:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !868 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%137
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOVSDmr %136:gr64, 8, %137:gr64_nosp, 0, $noreg, %135:fr64, debug-location !869 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%137
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%136
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%135
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !870 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:447:50
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.9, debug-location !871; cg.c:447:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !870 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:447:50
  Ready @3c
  BotQ.A TopLatency SU(4) 4c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %136:gr64, 8, %137:gr64_nosp, 0, $noreg, %135:fr64, debug-location !869 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %137:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !868 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %136:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !867 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %135:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %135:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
SU(1):   %136:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !867 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
SU(2):   %137:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !868 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
SU(3):   MOVSDmr %136:gr64, 8, %137:gr64_nosp, 0, $noreg, %135:fr64, debug-location !869 :: (store 8 into %ir.arrayidx51); cg.c:452:18
SU(4):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !870 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:447:50

********** MI Scheduling **********
conj_grad:%bb.14 for.end54
  From: MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !875 :: (store 4 into %ir.j); cg.c:497:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !875 :: (store 4 into %ir.j); cg.c:497:16
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
SU(1):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !875 :: (store 4 into %ir.j); cg.c:497:16

********** MI Scheduling **********
conj_grad:%bb.15 for.cond55
  From: %73:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
    To: JCC_1 %bb.17, 13, implicit killed $eflags, debug-location !885; cg.c:497:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %73:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%73
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %73:gr32 = nsw SUB32rm %73:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !882 :: (dereferenceable load 4 from @firstcol); cg.c:497:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%73
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%73
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %73:gr32 = nsw INC32r %73:gr32(tied-def 0), implicit-def dead $eflags, debug-location !883; cg.c:497:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%73
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%73
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %73:gr32, implicit-def $eflags, debug-location !884 :: (dereferenceable load 4 from %ir.j); cg.c:497:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%73
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.17, 13, implicit killed $eflags, debug-location !885; cg.c:497:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %73:gr32, implicit-def $eflags, debug-location !884 :: (dereferenceable load 4 from %ir.j); cg.c:497:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %73:gr32 = nsw INC32r %73:gr32(tied-def 0), implicit-def dead $eflags, debug-location !883; cg.c:497:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %73:gr32 = nsw SUB32rm %73:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !882 :: (dereferenceable load 4 from @firstcol); cg.c:497:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %73:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %73:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
SU(1):   %73:gr32 = nsw SUB32rm %73:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !882 :: (dereferenceable load 4 from @firstcol); cg.c:497:33
SU(2):   %73:gr32 = nsw INC32r %73:gr32(tied-def 0), implicit-def dead $eflags, debug-location !883; cg.c:497:44
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %73:gr32, implicit-def $eflags, debug-location !884 :: (dereferenceable load 4 from %ir.j); cg.c:497:23

********** MI Scheduling **********
conj_grad:%bb.16 for.body59
  From: %120:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
    To: JMP_1 %bb.15, debug-location !896; cg.c:497:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %120:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%120
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %172:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(7): Data Latency=4 Reg=%172
    SU(4): Data Latency=4 Reg=%172
    SU(2): Data Latency=4 Reg=%172
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %126:fr64 = MOVSDrm_alt %120:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%172
    SU(0): Data Latency=4 Reg=%120
  Successors:
    SU(4): Data Latency=4 Reg=%126
    SU(4): Out  Latency=0
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   %124:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !890 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(4): Data Latency=4 Reg=%124
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %126:fr64 = MULSDrm %126:fr64(tied-def 0), %124:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !892 :: (load 8 from %ir.arrayidx63); cg.c:498:26
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(2): Data Latency=4 Reg=%126
    SU(3): Data Latency=4 Reg=%124
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%172
  Successors:
    SU(5): Data Latency=4 Reg=%126
    SU(5): Out  Latency=0
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(5):   %126:fr64 = ADDSDrm %126:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !893 :: (dereferenceable load 8 from %ir.d); cg.c:498:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(4): Data Latency=4 Reg=%126
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%126
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %126:fr64, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=%126
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(7):   %127:gr32 = LEA64_32r %172:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !895; cg.c:497:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%172
  Successors:
    SU(8): Data Latency=1 Reg=%127
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %127:gr32, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%127
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.15, debug-location !896; cg.c:497:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %127:gr32, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50
Bottom Pressure:
GR16=2
  LiveReg: %127
  UpdateRegP: SU(8) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %127:gr32, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %127:gr32 = LEA64_32r %172:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !895; cg.c:497:50
Bottom Pressure:
GR16=2
  LiveReg: %172
  UpdateRegP: SU(2) %126:fr64 = MOVSDrm_alt %120:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(4) %126:fr64 = MULSDrm %126:fr64(tied-def 0), %124:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !892 :: (load 8 from %ir.arrayidx63); cg.c:498:26
              to GR16 2
  UpdateRegP: SU(7) %127:gr32 = LEA64_32r %172:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !895; cg.c:497:50
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(7) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %126:fr64, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %126
  UpdateRegP: SU(6) MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %126:fr64, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
              to 
  Ready @0c
  BotQ.A TopLatency SU(6) 16c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %126:fr64 = ADDSDrm %126:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !893 :: (dereferenceable load 8 from %ir.d); cg.c:498:19
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %126
  UpdateRegP: SU(5) %126:fr64 = ADDSDrm %126:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !893 :: (dereferenceable load 8 from %ir.d); cg.c:498:19
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %126:fr64 = MULSDrm %126:fr64(tied-def 0), %124:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !892 :: (load 8 from %ir.arrayidx63); cg.c:498:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %126
  UpdateRegP: SU(4) %126:fr64 = MULSDrm %126:fr64(tied-def 0), %124:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !892 :: (load 8 from %ir.arrayidx63); cg.c:498:26
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %124
  UpdateRegP: SU(4) %126:fr64 = MULSDrm %126:fr64(tied-def 0), %124:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !892 :: (load 8 from %ir.arrayidx63); cg.c:498:26
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(4) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(3) %124:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !890 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @12c
  BotQ.A BotLatency SU(3) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %126:fr64 = MOVSDrm_alt %120:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
Bottom Pressure:
GR16=4
  LiveReg: %120
  UpdateRegP: SU(2) %126:fr64 = MOVSDrm_alt %120:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
              to FR32 -1    FR32X -1
  Ready @12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %172:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
Bottom Pressure:
GR16=2
  Ready @16c
  BotQ.A BotLatency SU(1) 16c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %120:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
Bottom Pressure:

  Ready @16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %120:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
SU(1):   %172:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
SU(2):   %126:fr64 = MOVSDrm_alt %120:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
SU(3):   %124:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !890 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
SU(4):   %126:fr64 = MULSDrm %126:fr64(tied-def 0), %124:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !892 :: (load 8 from %ir.arrayidx63); cg.c:498:26
SU(5):   %126:fr64 = ADDSDrm %126:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !893 :: (dereferenceable load 8 from %ir.d); cg.c:498:19
SU(6):   MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %126:fr64, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
SU(7):   %127:gr32 = LEA64_32r %172:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !895; cg.c:497:50
SU(8):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %127:gr32, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50

********** MI Scheduling **********
conj_grad:%bb.17 for.end68
  From: %75:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Constraining copy SU(1)
  Local use SU(4) -> SU(1)
SU(0):   %75:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=4 Reg=%75
    SU(1): Data Latency=4 Reg=%75
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %76:fr64 = COPY %75:fr64, debug-location !901; cg.c:504:21
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%75
    SU(4): Ord  Latency=0 Weak
  Successors:
    SU(2): Data Latency=0 Reg=%76
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %76:fr64 = DIVSDrm %76:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !901 :: (dereferenceable load 8 from %ir.d); cg.c:504:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=0 Reg=%76
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%76
  Single Issue       : false;
SU(3):   MOVSDmr %stack.17.alpha, 1, $noreg, 0, $noreg, %76:fr64, debug-location !902 :: (store 8 into %ir.alpha); cg.c:504:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%76
  Single Issue       : false;
SU(4):   MOVSDmr %stack.16.rho0, 1, $noreg, 0, $noreg, %75:fr64, debug-location !904 :: (store 8 into %ir.rho0); cg.c:509:14
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%75
  Successors:
    SU(1): Ord  Latency=0 Weak
  Single Issue       : false;
SU(5):   MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !905 :: (store 8 into %ir.rho); cg.c:515:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !906 :: (store 4 into %ir.j); cg.c:516:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 
  Cand SU(6) ORDER                              
Pick Bot WEAK      
Scheduling SU(6) MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !906 :: (store 4 into %ir.j); cg.c:516:16
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 4 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot WEAK      
Scheduling SU(5) MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !905 :: (store 8 into %ir.rho); cg.c:515:13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
Pick Bot WEAK      
Scheduling SU(3) MOVSDmr %stack.17.alpha, 1, $noreg, 0, $noreg, %76:fr64, debug-location !902 :: (store 8 into %ir.alpha); cg.c:504:15
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 
  Cand SU(4) ORDER                              
  Cand SU(2) WEAK                               
Pick Bot WEAK      
Scheduling SU(2) %76:fr64 = DIVSDrm %76:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !901 :: (dereferenceable load 8 from %ir.d); cg.c:504:21
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
  Cand SU(4) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot WEAK      
Scheduling SU(1) %76:fr64 = COPY %75:fr64, debug-location !901; cg.c:504:21
  Ready @4c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOVSDmr %stack.16.rho0, 1, $noreg, 0, $noreg, %75:fr64, debug-location !904 :: (store 8 into %ir.rho0); cg.c:509:14
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %75:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %75:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
SU(4):   MOVSDmr %stack.16.rho0, 1, $noreg, 0, $noreg, %75:fr64, debug-location !904 :: (store 8 into %ir.rho0); cg.c:509:14
SU(1):   %76:fr64 = COPY %75:fr64, debug-location !901; cg.c:504:21
SU(2):   %76:fr64 = DIVSDrm %76:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !901 :: (dereferenceable load 8 from %ir.d); cg.c:504:21
SU(3):   MOVSDmr %stack.17.alpha, 1, $noreg, 0, $noreg, %76:fr64, debug-location !902 :: (store 8 into %ir.alpha); cg.c:504:15
SU(5):   MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !905 :: (store 8 into %ir.rho); cg.c:515:13
SU(6):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !906 :: (store 4 into %ir.j); cg.c:516:16

********** MI Scheduling **********
conj_grad:%bb.18 for.cond69
  From: %80:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
    To: JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !916; cg.c:516:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %80:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%80
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %80:gr32 = nsw SUB32rm %80:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !913 :: (dereferenceable load 4 from @firstcol); cg.c:516:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%80
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%80
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %80:gr32 = nsw INC32r %80:gr32(tied-def 0), implicit-def dead $eflags, debug-location !914; cg.c:516:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%80
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%80
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %80:gr32, implicit-def $eflags, debug-location !915 :: (dereferenceable load 4 from %ir.j); cg.c:516:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%80
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !916; cg.c:516:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %80:gr32, implicit-def $eflags, debug-location !915 :: (dereferenceable load 4 from %ir.j); cg.c:516:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %80:gr32 = nsw INC32r %80:gr32(tied-def 0), implicit-def dead $eflags, debug-location !914; cg.c:516:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %80:gr32 = nsw SUB32rm %80:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !913 :: (dereferenceable load 4 from @firstcol); cg.c:516:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %80:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %80:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
SU(1):   %80:gr32 = nsw SUB32rm %80:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !913 :: (dereferenceable load 4 from @firstcol); cg.c:516:33
SU(2):   %80:gr32 = nsw INC32r %80:gr32(tied-def 0), implicit-def dead $eflags, debug-location !914; cg.c:516:44
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %80:gr32, implicit-def $eflags, debug-location !915 :: (dereferenceable load 4 from %ir.j); cg.c:516:23

********** MI Scheduling **********
conj_grad:%bb.19 for.body73
  From: %107:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
    To: JMP_1 %bb.18, debug-location !939; cg.c:516:9
 RegionInstrs: 16
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %107:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(6): Data Latency=4 Reg=%107
    SU(5): Data Latency=4 Reg=%107
    SU(14): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %108:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
    SU(6): Data Latency=4 Reg=%108
    SU(5): Data Latency=4 Reg=%108
    SU(4): Data Latency=4 Reg=%108
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %112:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !920 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
    SU(4): Data Latency=4 Reg=%112
    SU(4): Out  Latency=0
    SU(14): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(3):   %110:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !921 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
    SU(4): Data Latency=4 Reg=%110
    SU(14): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %112:fr64 = MULSDrm %112:fr64(tied-def 0), %110:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !923 :: (load 8 from %ir.arrayidx77); cg.c:517:33
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 21
  Predecessors:
    SU(3): Data Latency=4 Reg=%110
    SU(2): Data Latency=4 Reg=%112
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%108
  Successors:
    SU(5): Data Latency=4 Reg=%112
    SU(5): Out  Latency=0
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(5):   %112:fr64 = ADDSDrm %112:fr64(tied-def 0), %107:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !924 :: (load 8 from %ir.arrayidx75); cg.c:517:25
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 17
  Predecessors:
    SU(4): Data Latency=4 Reg=%112
    SU(4): Out  Latency=0
    SU(1): Data Latency=4 Reg=%108
    SU(0): Data Latency=4 Reg=%107
  Successors:
    SU(6): Data Latency=4 Reg=%112
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(6):   MOVSDmr %107:gr64, 8, %108:gr64_nosp, 0, $noreg, %112:fr64, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
  # preds left       : 9
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 13
  Predecessors:
    SU(5): Data Latency=4 Reg=%112
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%108
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%107
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(12): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(7):   %113:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !928 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 12
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(14): Data Latency=4 Reg=%113
    SU(9): Data Latency=4 Reg=%113
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %114:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !929 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 12
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(14): Data Latency=4 Reg=%114
    SU(12): Data Latency=4 Reg=%114
    SU(9): Data Latency=4 Reg=%114
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %119:fr64 = MOVSDrm_alt %113:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 8
  Predecessors:
    SU(8): Data Latency=4 Reg=%114
    SU(7): Data Latency=4 Reg=%113
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%119
    SU(13): Out  Latency=0
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(10):   %118:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !930 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 12
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%118
    SU(12): Out  Latency=0
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(11):   %117:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !931 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 12
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%117
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(12):   %118:fr64 = MULSDrm %118:fr64(tied-def 0), %117:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !933 :: (load 8 from %ir.arrayidx85); cg.c:518:33
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 8
  Predecessors:
    SU(11): Data Latency=4 Reg=%117
    SU(10): Data Latency=4 Reg=%118
    SU(10): Out  Latency=0
    SU(8): Data Latency=4 Reg=%114
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%118
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(13):   %119:fr64 = SUBSDrr %119:fr64(tied-def 0), %118:fr64, debug-location !934; cg.c:518:25
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 4
  Predecessors:
    SU(12): Data Latency=4 Reg=%118
    SU(9): Data Latency=4 Reg=%119
    SU(9): Out  Latency=0
  Successors:
    SU(14): Data Latency=1 Reg=%119
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(14):   MOVSDmr %113:gr64, 8, %114:gr64_nosp, 0, $noreg, %119:fr64, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
  # preds left       : 16
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 3
  Predecessors:
    SU(13): Data Latency=1 Reg=%119
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%114
    SU(8): Ord  Latency=0 Memory
    SU(7): Data Latency=4 Reg=%113
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(15):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !938 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:516:50
  # preds left       : 8
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 3
  Predecessors:
    SU(14): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.18, debug-location !939; cg.c:516:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 25
  Height             : 0
  Predecessors:
    SU(15): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 25
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !938 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:516:50
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(15) 22c
  BotQ.A BotLatency SU(15) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) MOVSDmr %113:gr64, 8, %114:gr64_nosp, 0, $noreg, %119:fr64, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %113
  UpdateRegP: SU(9) %119:fr64 = MOVSDrm_alt %113:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(14) MOVSDmr %113:gr64, 8, %114:gr64_nosp, 0, $noreg, %119:fr64, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %114
  UpdateRegP: SU(9) %119:fr64 = MOVSDrm_alt %113:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
              to FR32 -1    FR32X -1
  UpdateRegP: SU(12) %118:fr64 = MULSDrm %118:fr64(tied-def 0), %117:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !933 :: (load 8 from %ir.arrayidx85); cg.c:518:33
              to GR16 2
  UpdateRegP: SU(14) MOVSDmr %113:gr64, 8, %114:gr64_nosp, 0, $noreg, %119:fr64, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
              to FR32 1    FR32X 1
  LiveReg: %119
  UpdateRegP: SU(14) MOVSDmr %113:gr64, 8, %114:gr64_nosp, 0, $noreg, %119:fr64, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) %119:fr64 = SUBSDrr %119:fr64(tied-def 0), %118:fr64, debug-location !934; cg.c:518:25
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %119
  UpdateRegP: SU(13) %119:fr64 = SUBSDrr %119:fr64(tied-def 0), %118:fr64, debug-location !934; cg.c:518:25
              to 
  LiveReg: %118
  UpdateRegP: SU(13) %119:fr64 = SUBSDrr %119:fr64(tied-def 0), %118:fr64, debug-location !934; cg.c:518:25
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(13) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 9 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %118:fr64 = MULSDrm %118:fr64(tied-def 0), %117:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !933 :: (load 8 from %ir.arrayidx85); cg.c:518:33
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %118
  UpdateRegP: SU(12) %118:fr64 = MULSDrm %118:fr64(tied-def 0), %117:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !933 :: (load 8 from %ir.arrayidx85); cg.c:518:33
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %117
  UpdateRegP: SU(12) %118:fr64 = MULSDrm %118:fr64(tied-def 0), %117:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !933 :: (load 8 from %ir.arrayidx85); cg.c:518:33
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(12) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 11 10 
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %117:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !931 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @12c
  BotQ.A BotLatency SU(11) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 10 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %118:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !930 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %119:fr64 = MOVSDrm_alt %113:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
Bottom Pressure:
GR16=4
  Ready @8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %114:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !929 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
Bottom Pressure:
GR16=2
  Ready @12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %113:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !928 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
Bottom Pressure:

  Ready @12c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOVSDmr %107:gr64, 8, %108:gr64_nosp, 0, $noreg, %112:fr64, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %107
  UpdateRegP: SU(5) %112:fr64 = ADDSDrm %112:fr64(tied-def 0), %107:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !924 :: (load 8 from %ir.arrayidx75); cg.c:517:25
              to GR16 2
  UpdateRegP: SU(6) MOVSDmr %107:gr64, 8, %108:gr64_nosp, 0, $noreg, %112:fr64, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %108
  UpdateRegP: SU(4) %112:fr64 = MULSDrm %112:fr64(tied-def 0), %110:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !923 :: (load 8 from %ir.arrayidx77); cg.c:517:33
              to GR16 2
  UpdateRegP: SU(5) %112:fr64 = ADDSDrm %112:fr64(tied-def 0), %107:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !924 :: (load 8 from %ir.arrayidx75); cg.c:517:25
              to 
  UpdateRegP: SU(6) MOVSDmr %107:gr64, 8, %108:gr64_nosp, 0, $noreg, %112:fr64, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
              to FR32 1    FR32X 1
  LiveReg: %112
  UpdateRegP: SU(6) MOVSDmr %107:gr64, 8, %108:gr64_nosp, 0, $noreg, %112:fr64, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
              to 
  Ready @13c
  BotQ.A BotLatency SU(6) 13c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %112:fr64 = ADDSDrm %112:fr64(tied-def 0), %107:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !924 :: (load 8 from %ir.arrayidx75); cg.c:517:25
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %112
  UpdateRegP: SU(5) %112:fr64 = ADDSDrm %112:fr64(tied-def 0), %107:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !924 :: (load 8 from %ir.arrayidx75); cg.c:517:25
              to FR32 -1    FR32X -1
  Ready @17c
  BotQ.A BotLatency SU(5) 17c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %112:fr64 = MULSDrm %112:fr64(tied-def 0), %110:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !923 :: (load 8 from %ir.arrayidx77); cg.c:517:33
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %112
  UpdateRegP: SU(4) %112:fr64 = MULSDrm %112:fr64(tied-def 0), %110:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !923 :: (load 8 from %ir.arrayidx77); cg.c:517:33
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %110
  UpdateRegP: SU(4) %112:fr64 = MULSDrm %112:fr64(tied-def 0), %110:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !923 :: (load 8 from %ir.arrayidx77); cg.c:517:33
              to FR32 -1    FR32X -1
  Ready @21c
  BotQ.A BotLatency SU(4) 21c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %110:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !921 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @25c
  BotQ.A BotLatency SU(3) 25c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %112:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !920 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
Bottom Pressure:
GR16=4
  Ready @25c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %108:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
Bottom Pressure:
GR16=2
  Ready @25c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %107:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
Bottom Pressure:

  Ready @21c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %107:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
SU(1):   %108:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
SU(2):   %112:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !920 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
SU(3):   %110:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !921 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
SU(4):   %112:fr64 = MULSDrm %112:fr64(tied-def 0), %110:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !923 :: (load 8 from %ir.arrayidx77); cg.c:517:33
SU(5):   %112:fr64 = ADDSDrm %112:fr64(tied-def 0), %107:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !924 :: (load 8 from %ir.arrayidx75); cg.c:517:25
SU(6):   MOVSDmr %107:gr64, 8, %108:gr64_nosp, 0, $noreg, %112:fr64, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
SU(7):   %113:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !928 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
SU(8):   %114:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !929 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
SU(9):   %119:fr64 = MOVSDrm_alt %113:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
SU(10):   %118:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !930 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
SU(11):   %117:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !931 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
SU(12):   %118:fr64 = MULSDrm %118:fr64(tied-def 0), %117:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !933 :: (load 8 from %ir.arrayidx85); cg.c:518:33
SU(13):   %119:fr64 = SUBSDrr %119:fr64(tied-def 0), %118:fr64, debug-location !934; cg.c:518:25
SU(14):   MOVSDmr %113:gr64, 8, %114:gr64_nosp, 0, $noreg, %119:fr64, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
SU(15):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !938 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:516:50

********** MI Scheduling **********
conj_grad:%bb.21 for.cond93
  From: %85:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
    To: JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !952; cg.c:526:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %85:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%85
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %85:gr32 = nsw SUB32rm %85:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !949 :: (dereferenceable load 4 from @firstcol); cg.c:526:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%85
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%85
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %85:gr32 = nsw INC32r %85:gr32(tied-def 0), implicit-def dead $eflags, debug-location !950; cg.c:526:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%85
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%85
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %85:gr32, implicit-def $eflags, debug-location !951 :: (dereferenceable load 4 from %ir.j); cg.c:526:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%85
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !952; cg.c:526:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %85:gr32, implicit-def $eflags, debug-location !951 :: (dereferenceable load 4 from %ir.j); cg.c:526:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %85:gr32 = nsw INC32r %85:gr32(tied-def 0), implicit-def dead $eflags, debug-location !950; cg.c:526:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %85:gr32 = nsw SUB32rm %85:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !949 :: (dereferenceable load 4 from @firstcol); cg.c:526:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %85:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %85:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
SU(1):   %85:gr32 = nsw SUB32rm %85:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !949 :: (dereferenceable load 4 from @firstcol); cg.c:526:33
SU(2):   %85:gr32 = nsw INC32r %85:gr32(tied-def 0), implicit-def dead $eflags, debug-location !950; cg.c:526:44
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %85:gr32, implicit-def $eflags, debug-location !951 :: (dereferenceable load 4 from %ir.j); cg.c:526:23

********** MI Scheduling **********
conj_grad:%bb.22 for.body97
  From: %100:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
    To: JMP_1 %bb.21, debug-location !963; cg.c:526:9
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %100:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(2): Data Latency=4 Reg=%100
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %174:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !956 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(6): Data Latency=4 Reg=%174
    SU(2): Data Latency=4 Reg=%174
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %105:fr64 = MOVSDrm_alt %100:gr64, 8, %174:gr64_nosp, 0, $noreg, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(1): Data Latency=4 Reg=%174
    SU(0): Data Latency=4 Reg=%100
  Successors:
    SU(3): Data Latency=4 Reg=%105
    SU(3): Out  Latency=0
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   %105:fr64 = MULSDrr %105:fr64(tied-def 0), %105:fr64, debug-location !959; cg.c:527:30
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%105
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%105
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !960 :: (dereferenceable load 8 from %ir.rho); cg.c:527:23
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%105
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%105
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %105:fr64, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%105
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %106:gr32 = LEA64_32r %174:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !962; cg.c:526:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%174
  Successors:
    SU(7): Data Latency=1 Reg=%106
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %106:gr32, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%106
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.21, debug-location !963; cg.c:526:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %106:gr32, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50
Bottom Pressure:
GR16=2
  LiveReg: %106
  UpdateRegP: SU(7) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %106:gr32, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %106:gr32 = LEA64_32r %174:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !962; cg.c:526:50
Bottom Pressure:
GR16=2
  LiveReg: %174
  UpdateRegP: SU(2) %105:fr64 = MOVSDrm_alt %100:gr64, 8, %174:gr64_nosp, 0, $noreg, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(6) %106:gr32 = LEA64_32r %174:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !962; cg.c:526:50
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %105:fr64, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %105
  UpdateRegP: SU(5) MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %105:fr64, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
              to 
  Ready @0c
  BotQ.A TopLatency SU(5) 13c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !960 :: (dereferenceable load 8 from %ir.rho); cg.c:527:23
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %105
  UpdateRegP: SU(4) %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !960 :: (dereferenceable load 8 from %ir.rho); cg.c:527:23
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %105:fr64 = MULSDrr %105:fr64(tied-def 0), %105:fr64, debug-location !959; cg.c:527:30
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %105
  UpdateRegP: SU(3) %105:fr64 = MULSDrr %105:fr64(tied-def 0), %105:fr64, debug-location !959; cg.c:527:30
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %105:fr64 = MOVSDrm_alt %100:gr64, 8, %174:gr64_nosp, 0, $noreg, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
Bottom Pressure:
GR16=4
  LiveReg: %100
  UpdateRegP: SU(2) %105:fr64 = MOVSDrm_alt %100:gr64, 8, %174:gr64_nosp, 0, $noreg, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
              to FR32 -1    FR32X -1
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %174:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !956 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
Bottom Pressure:
GR16=2
  Ready @13c
  BotQ.A BotLatency SU(1) 13c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %100:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
Bottom Pressure:

  Ready @13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %100:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
SU(1):   %174:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !956 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
SU(2):   %105:fr64 = MOVSDrm_alt %100:gr64, 8, %174:gr64_nosp, 0, $noreg, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
SU(3):   %105:fr64 = MULSDrr %105:fr64(tied-def 0), %105:fr64, debug-location !959; cg.c:527:30
SU(4):   %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !960 :: (dereferenceable load 8 from %ir.rho); cg.c:527:23
SU(5):   MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %105:fr64, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
SU(6):   %106:gr32 = LEA64_32r %174:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !962; cg.c:526:50
SU(7):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %106:gr32, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50

********** MI Scheduling **********
conj_grad:%bb.23 for.end106
  From: %88:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !966 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %88:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !966 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%88
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %88:fr64 = DIVSDrm %88:fr64(tied-def 0), %stack.16.rho0, 1, $noreg, 0, $noreg, debug-location !968 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:20
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%88
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%88
  Single Issue       : false;
SU(2):   MOVSDmr %stack.18.beta, 1, $noreg, 0, $noreg, %88:fr64, debug-location !969 :: (store 8 into %ir.beta); cg.c:533:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%88
  Single Issue       : false;
SU(3):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !970 :: (store 4 into %ir.j); cg.c:538:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !970 :: (store 4 into %ir.j); cg.c:538:16
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.18.beta, 1, $noreg, 0, $noreg, %88:fr64, debug-location !969 :: (store 8 into %ir.beta); cg.c:533:14
  Ready @0c
  BotQ.A TopLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %88:fr64 = DIVSDrm %88:fr64(tied-def 0), %stack.16.rho0, 1, $noreg, 0, $noreg, debug-location !968 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:20
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %88:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !966 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %88:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !966 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
SU(1):   %88:fr64 = DIVSDrm %88:fr64(tied-def 0), %stack.16.rho0, 1, $noreg, 0, $noreg, debug-location !968 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:20
SU(2):   MOVSDmr %stack.18.beta, 1, $noreg, 0, $noreg, %88:fr64, debug-location !969 :: (store 8 into %ir.beta); cg.c:533:14
SU(3):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !970 :: (store 4 into %ir.j); cg.c:538:16

********** MI Scheduling **********
conj_grad:%bb.24 for.cond108
  From: %92:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
    To: JCC_1 %bb.26, 13, implicit killed $eflags, debug-location !980; cg.c:538:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %92:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%92
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %92:gr32 = nsw SUB32rm %92:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !977 :: (dereferenceable load 4 from @firstcol); cg.c:538:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%92
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%92
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %92:gr32 = nsw INC32r %92:gr32(tied-def 0), implicit-def dead $eflags, debug-location !978; cg.c:538:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%92
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%92
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %92:gr32, implicit-def $eflags, debug-location !979 :: (dereferenceable load 4 from %ir.j); cg.c:538:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%92
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.26, 13, implicit killed $eflags, debug-location !980; cg.c:538:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %92:gr32, implicit-def $eflags, debug-location !979 :: (dereferenceable load 4 from %ir.j); cg.c:538:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %92:gr32 = nsw INC32r %92:gr32(tied-def 0), implicit-def dead $eflags, debug-location !978; cg.c:538:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %92:gr32 = nsw SUB32rm %92:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !977 :: (dereferenceable load 4 from @firstcol); cg.c:538:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %92:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %92:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
SU(1):   %92:gr32 = nsw SUB32rm %92:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !977 :: (dereferenceable load 4 from @firstcol); cg.c:538:33
SU(2):   %92:gr32 = nsw INC32r %92:gr32(tied-def 0), implicit-def dead $eflags, debug-location !978; cg.c:538:44
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %92:gr32, implicit-def $eflags, debug-location !979 :: (dereferenceable load 4 from %ir.j); cg.c:538:23

********** MI Scheduling **********
conj_grad:%bb.25 for.body112
  From: %94:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
    To: JMP_1 %bb.24, debug-location !993; cg.c:538:9
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %94:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(5): Data Latency=4 Reg=%94
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %95:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=%95
    SU(5): Data Latency=4 Reg=%95
    SU(4): Data Latency=4 Reg=%95
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %99:fr64 = MOVSDrm_alt %stack.18.beta, 1, $noreg, 0, $noreg, debug-location !984 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Data Latency=4 Reg=%99
    SU(4): Out  Latency=0
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(3):   %97:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !985 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=%97
    SU(4): Data Latency=4 Reg=%97
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %99:fr64 = MULSDrm %99:fr64(tied-def 0), %97:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !987 :: (load 8 from %ir.arrayidx116); cg.c:539:32
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(3): Data Latency=4 Reg=%97
    SU(2): Data Latency=4 Reg=%99
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%95
  Successors:
    SU(5): Data Latency=4 Reg=%99
    SU(5): Out  Latency=0
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(5):   %99:fr64 = ADDSDrm %99:fr64(tied-def 0), %94:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !988 :: (load 8 from %ir.arrayidx114); cg.c:539:25
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(4): Data Latency=4 Reg=%99
    SU(4): Out  Latency=0
    SU(1): Data Latency=4 Reg=%95
    SU(0): Data Latency=4 Reg=%94
  Successors:
    SU(6): Data Latency=4 Reg=%99
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(6):   MOVSDmr %97:gr64, 8, %95:gr64_nosp, 0, $noreg, %99:fr64, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  # preds left       : 9
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(5): Data Latency=4 Reg=%99
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%97
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%95
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(7):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !992 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:538:50
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.24, debug-location !993; cg.c:538:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !992 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:538:50
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(7) 12c
  BotQ.A BotLatency SU(7) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOVSDmr %97:gr64, 8, %95:gr64_nosp, 0, $noreg, %99:fr64, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %97
  UpdateRegP: SU(4) %99:fr64 = MULSDrm %99:fr64(tied-def 0), %97:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !987 :: (load 8 from %ir.arrayidx116); cg.c:539:32
              to GR16 2
  UpdateRegP: SU(6) MOVSDmr %97:gr64, 8, %95:gr64_nosp, 0, $noreg, %99:fr64, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %95
  UpdateRegP: SU(4) %99:fr64 = MULSDrm %99:fr64(tied-def 0), %97:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !987 :: (load 8 from %ir.arrayidx116); cg.c:539:32
              to 
  UpdateRegP: SU(5) %99:fr64 = ADDSDrm %99:fr64(tied-def 0), %94:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !988 :: (load 8 from %ir.arrayidx114); cg.c:539:25
              to GR16 2
  UpdateRegP: SU(6) MOVSDmr %97:gr64, 8, %95:gr64_nosp, 0, $noreg, %99:fr64, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
              to FR32 1    FR32X 1
  LiveReg: %99
  UpdateRegP: SU(6) MOVSDmr %97:gr64, 8, %95:gr64_nosp, 0, $noreg, %99:fr64, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %99:fr64 = ADDSDrm %99:fr64(tied-def 0), %94:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !988 :: (load 8 from %ir.arrayidx114); cg.c:539:25
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %99
  UpdateRegP: SU(5) %99:fr64 = ADDSDrm %99:fr64(tied-def 0), %94:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !988 :: (load 8 from %ir.arrayidx114); cg.c:539:25
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %94
  UpdateRegP: SU(5) %99:fr64 = ADDSDrm %99:fr64(tied-def 0), %94:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !988 :: (load 8 from %ir.arrayidx114); cg.c:539:25
              to FR32 -1    FR32X -1
  Ready @7c
  BotQ.A BotLatency SU(5) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %99:fr64 = MULSDrm %99:fr64(tied-def 0), %97:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !987 :: (load 8 from %ir.arrayidx116); cg.c:539:32
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %99
  UpdateRegP: SU(4) %99:fr64 = MULSDrm %99:fr64(tied-def 0), %97:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !987 :: (load 8 from %ir.arrayidx116); cg.c:539:32
              to FR32 -1    FR32X -1
  Ready @11c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %97:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !985 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @15c
  BotQ.A BotLatency SU(3) 15c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %99:fr64 = MOVSDrm_alt %stack.18.beta, 1, $noreg, 0, $noreg, debug-location !984 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
Bottom Pressure:
GR16=4
  Ready @15c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %95:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
Bottom Pressure:
GR16=2
  Ready @15c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %94:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
Bottom Pressure:

  Ready @11c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %94:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
SU(1):   %95:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
SU(2):   %99:fr64 = MOVSDrm_alt %stack.18.beta, 1, $noreg, 0, $noreg, debug-location !984 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
SU(3):   %97:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !985 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
SU(4):   %99:fr64 = MULSDrm %99:fr64(tied-def 0), %97:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !987 :: (load 8 from %ir.arrayidx116); cg.c:539:32
SU(5):   %99:fr64 = ADDSDrm %99:fr64(tied-def 0), %94:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !988 :: (load 8 from %ir.arrayidx114); cg.c:539:25
SU(6):   MOVSDmr %97:gr64, 8, %95:gr64_nosp, 0, $noreg, %99:fr64, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
SU(7):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !992 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:538:50

********** MI Scheduling **********
conj_grad:%bb.27 for.end126
  From: MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !1001 :: (store 4 into %ir.j); cg.c:549:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !1001 :: (store 4 into %ir.j); cg.c:549:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
SU(1):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !1001 :: (store 4 into %ir.j); cg.c:549:12

********** MI Scheduling **********
conj_grad:%bb.28 for.cond127
  From: %26:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
    To: JCC_1 %bb.33, 13, implicit killed $eflags, debug-location !1011; cg.c:549:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %26:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%26
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %26:gr32 = nsw SUB32rm %26:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !1008 :: (dereferenceable load 4 from @firstrow); cg.c:549:29
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%26
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%26
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %26:gr32 = nsw INC32r %26:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1009; cg.c:549:40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%26
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%26
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %26:gr32, implicit-def $eflags, debug-location !1010 :: (dereferenceable load 4 from %ir.j); cg.c:549:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%26
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.33, 13, implicit killed $eflags, debug-location !1011; cg.c:549:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %26:gr32, implicit-def $eflags, debug-location !1010 :: (dereferenceable load 4 from %ir.j); cg.c:549:19
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %26:gr32 = nsw INC32r %26:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1009; cg.c:549:40
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %26:gr32 = nsw SUB32rm %26:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !1008 :: (dereferenceable load 4 from @firstrow); cg.c:549:29
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %26:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %26:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
SU(1):   %26:gr32 = nsw SUB32rm %26:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !1008 :: (dereferenceable load 4 from @firstrow); cg.c:549:29
SU(2):   %26:gr32 = nsw INC32r %26:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1009; cg.c:549:40
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %26:gr32, implicit-def $eflags, debug-location !1010 :: (dereferenceable load 4 from %ir.j); cg.c:549:19

********** MI Scheduling **********
conj_grad:%bb.29 for.body131
  From: MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(1):   %45:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%45
  Single Issue       : false;
SU(2):   %46:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1016 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%46
  Single Issue       : false;
SU(3):   %47:gr32 = MOV32rm %45:gr64, 4, %46:gr64_nosp, 0, $noreg, debug-location !1014 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%46
    SU(1): Data Latency=4 Reg=%45
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%47
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %47:gr32, debug-location !1017 :: (store 4 into %ir.k); cg.c:551:16
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%47
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %47:gr32, debug-location !1017 :: (store 4 into %ir.k); cg.c:551:16
  Ready @0c
  BotQ.A TopLatency SU(4) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %47:gr32 = MOV32rm %45:gr64, 4, %46:gr64_nosp, 0, $noreg, debug-location !1014 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %46:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1016 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %45:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
SU(1):   %45:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
SU(2):   %46:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1016 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
SU(3):   %47:gr32 = MOV32rm %45:gr64, 4, %46:gr64_nosp, 0, $noreg, debug-location !1014 :: (load 4 from %ir.arrayidx133); cg.c:551:18
SU(4):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %47:gr32, debug-location !1017 :: (store 4 into %ir.k); cg.c:551:16

********** MI Scheduling **********
conj_grad:%bb.30 for.cond134
  From: %48:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
    To: JCC_1 %bb.32, 13, implicit killed $eflags, debug-location !1025; cg.c:551:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %48:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%48
  Single Issue       : false;
SU(1):   %49:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1021 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%49
  Single Issue       : false;
SU(2):   %50:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1022 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%50
  Single Issue       : false;
SU(3):   CMP32rm %48:gr32, %49:gr64, 4, %50:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1024 :: (load 4 from %ir.arrayidx137); cg.c:551:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%50
    SU(1): Data Latency=4 Reg=%49
    SU(0): Data Latency=4 Reg=%48
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.32, 13, implicit killed $eflags, debug-location !1025; cg.c:551:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %48:gr32, %49:gr64, 4, %50:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1024 :: (load 4 from %ir.arrayidx137); cg.c:551:31
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %50:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1022 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %49:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1021 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %48:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %48:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
SU(1):   %49:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1021 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
SU(2):   %50:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1022 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
SU(3):   CMP32rm %48:gr32, %49:gr64, 4, %50:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1024 :: (load 4 from %ir.arrayidx137); cg.c:551:31

********** MI Scheduling **********
conj_grad:%bb.31 for.body139
  From: %55:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
    To: JMP_1 %bb.30, debug-location !1037; cg.c:551:9
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %55:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%55
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %175:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(9): Data Latency=4 Reg=%175
    SU(5): Data Latency=4 Reg=%175
    SU(2): Data Latency=4 Reg=%175
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %63:fr64 = MOVSDrm_alt %55:gr64, 8, %175:gr64_nosp, 0, $noreg, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%175
    SU(0): Data Latency=4 Reg=%55
  Successors:
    SU(6): Data Latency=4 Reg=%63
    SU(6): Out  Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   %59:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !1030 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(6): Data Latency=4 Reg=%59
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %60:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1031 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(5): Data Latency=4 Reg=%60
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %61:gr64_nosp = MOVSX64rm32 %60:gr64, 4, %175:gr64_nosp, 0, $noreg, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(4): Data Latency=4 Reg=%60
    SU(1): Data Latency=4 Reg=%175
  Successors:
    SU(6): Data Latency=4 Reg=%61
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %63:fr64 = MULSDrm %63:fr64(tied-def 0), %59:gr64, 8, %61:gr64_nosp, 0, $noreg, debug-location !1033 :: (load 8 from %ir.arrayidx145); cg.c:552:26
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(5): Data Latency=4 Reg=%61
    SU(3): Data Latency=4 Reg=%59
    SU(2): Data Latency=4 Reg=%63
    SU(2): Out  Latency=0
  Successors:
    SU(7): Data Latency=4 Reg=%63
    SU(7): Out  Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(7):   %63:fr64 = ADDSDrm %63:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1034 :: (dereferenceable load 8 from %ir.d); cg.c:552:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(6): Data Latency=4 Reg=%63
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%63
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %63:fr64, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%63
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %64:gr32 = LEA64_32r %175:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1036; cg.c:551:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%175
  Successors:
    SU(10): Data Latency=1 Reg=%64
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %64:gr32, debug-location !1036 :: (store 4 into %ir.k); cg.c:551:49
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%64
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.30, debug-location !1037; cg.c:551:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %64:gr32, debug-location !1036 :: (store 4 into %ir.k); cg.c:551:49
Bottom Pressure:
GR16=2
  LiveReg: %64
  UpdateRegP: SU(10) MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %64:gr32, debug-location !1036 :: (store 4 into %ir.k); cg.c:551:49
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %64:gr32 = LEA64_32r %175:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1036; cg.c:551:49
Bottom Pressure:
GR16=2
  LiveReg: %175
  UpdateRegP: SU(2) %63:fr64 = MOVSDrm_alt %55:gr64, 8, %175:gr64_nosp, 0, $noreg, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(5) %61:gr64_nosp = MOVSX64rm32 %60:gr64, 4, %175:gr64_nosp, 0, $noreg, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
              to 
  UpdateRegP: SU(9) %64:gr32 = LEA64_32r %175:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1036; cg.c:551:49
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %63:fr64, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %63
  UpdateRegP: SU(8) MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %63:fr64, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 16c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %63:fr64 = ADDSDrm %63:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1034 :: (dereferenceable load 8 from %ir.d); cg.c:552:19
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %63
  UpdateRegP: SU(7) %63:fr64 = ADDSDrm %63:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1034 :: (dereferenceable load 8 from %ir.d); cg.c:552:19
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %63:fr64 = MULSDrm %63:fr64(tied-def 0), %59:gr64, 8, %61:gr64_nosp, 0, $noreg, debug-location !1033 :: (load 8 from %ir.arrayidx145); cg.c:552:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %63
  UpdateRegP: SU(6) %63:fr64 = MULSDrm %63:fr64(tied-def 0), %59:gr64, 8, %61:gr64_nosp, 0, $noreg, debug-location !1033 :: (load 8 from %ir.arrayidx145); cg.c:552:26
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %59
  UpdateRegP: SU(6) %63:fr64 = MULSDrm %63:fr64(tied-def 0), %59:gr64, 8, %61:gr64_nosp, 0, $noreg, debug-location !1033 :: (load 8 from %ir.arrayidx145); cg.c:552:26
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %61
  UpdateRegP: SU(6) %63:fr64 = MULSDrm %63:fr64(tied-def 0), %59:gr64, 8, %61:gr64_nosp, 0, $noreg, debug-location !1033 :: (load 8 from %ir.arrayidx145); cg.c:552:26
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(6) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 2 
  Cand SU(5) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(5) %61:gr64_nosp = MOVSX64rm32 %60:gr64, 4, %175:gr64_nosp, 0, $noreg, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %60
  UpdateRegP: SU(5) %61:gr64_nosp = MOVSX64rm32 %60:gr64, 4, %175:gr64_nosp, 0, $noreg, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
              to GR16 -2
  Ready @12c
  BotQ.A BotLatency SU(5) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) REG-MAX                            
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %60:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1031 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @16c
  BotQ.A BotLatency SU(4) 16c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %59:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !1030 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %63:fr64 = MOVSDrm_alt %55:gr64, 8, %175:gr64_nosp, 0, $noreg, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
Bottom Pressure:
GR16=4
  LiveReg: %55
  UpdateRegP: SU(2) %63:fr64 = MOVSDrm_alt %55:gr64, 8, %175:gr64_nosp, 0, $noreg, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
              to FR32 -1    FR32X -1
  Ready @12c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %175:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
Bottom Pressure:
GR16=2
  Ready @16c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %55:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
Bottom Pressure:

  Ready @16c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %55:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
SU(1):   %175:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
SU(2):   %63:fr64 = MOVSDrm_alt %55:gr64, 8, %175:gr64_nosp, 0, $noreg, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
SU(3):   %59:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !1030 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
SU(4):   %60:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1031 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
SU(5):   %61:gr64_nosp = MOVSX64rm32 %60:gr64, 4, %175:gr64_nosp, 0, $noreg, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
SU(6):   %63:fr64 = MULSDrm %63:fr64(tied-def 0), %59:gr64, 8, %61:gr64_nosp, 0, $noreg, debug-location !1033 :: (load 8 from %ir.arrayidx145); cg.c:552:26
SU(7):   %63:fr64 = ADDSDrm %63:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1034 :: (dereferenceable load 8 from %ir.d); cg.c:552:19
SU(8):   MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %63:fr64, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
SU(9):   %64:gr32 = LEA64_32r %175:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1036; cg.c:551:49
SU(10):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %64:gr32, debug-location !1036 :: (store 4 into %ir.k); cg.c:551:49

********** MI Scheduling **********
conj_grad:%bb.32 for.end150
  From: %52:fr64 = MOVSDrm_alt %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
    To: JMP_1 %bb.28, debug-location !1045; cg.c:549:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %52:fr64 = MOVSDrm_alt %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%52
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %53:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1041 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%53
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %54:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1042 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%54
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOVSDmr %53:gr64, 8, %54:gr64_nosp, 0, $noreg, %52:fr64, debug-location !1043 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%54
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%53
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%52
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1044 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:549:46
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.28, debug-location !1045; cg.c:549:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1044 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:549:46
  Ready @3c
  BotQ.A TopLatency SU(4) 4c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %53:gr64, 8, %54:gr64_nosp, 0, $noreg, %52:fr64, debug-location !1043 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %54:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1042 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %53:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1041 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %52:fr64 = MOVSDrm_alt %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %52:fr64 = MOVSDrm_alt %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
SU(1):   %53:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1041 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
SU(2):   %54:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1042 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
SU(3):   MOVSDmr %53:gr64, 8, %54:gr64_nosp, 0, $noreg, %52:fr64, debug-location !1043 :: (store 8 into %ir.arrayidx152); cg.c:554:14
SU(4):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1044 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:549:46

********** MI Scheduling **********
conj_grad:%bb.34 for.cond156
  From: %31:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
    To: JCC_1 %bb.36, 13, implicit killed $eflags, debug-location !1058; cg.c:560:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %31:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%31
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %31:gr32 = nsw SUB32rm %31:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !1055 :: (dereferenceable load 4 from @firstcol); cg.c:560:29
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%31
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%31
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %31:gr32 = nsw INC32r %31:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1056; cg.c:560:40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%31
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%31
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %31:gr32, implicit-def $eflags, debug-location !1057 :: (dereferenceable load 4 from %ir.j); cg.c:560:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%31
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.36, 13, implicit killed $eflags, debug-location !1058; cg.c:560:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %31:gr32, implicit-def $eflags, debug-location !1057 :: (dereferenceable load 4 from %ir.j); cg.c:560:19
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %31:gr32 = nsw INC32r %31:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1056; cg.c:560:40
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %31:gr32 = nsw SUB32rm %31:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !1055 :: (dereferenceable load 4 from @firstcol); cg.c:560:29
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %31:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %31:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
SU(1):   %31:gr32 = nsw SUB32rm %31:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !1055 :: (dereferenceable load 4 from @firstcol); cg.c:560:29
SU(2):   %31:gr32 = nsw INC32r %31:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1056; cg.c:560:40
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %31:gr32, implicit-def $eflags, debug-location !1057 :: (dereferenceable load 4 from %ir.j); cg.c:560:19

********** MI Scheduling **********
conj_grad:%bb.35 for.body160
  From: %36:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
    To: JMP_1 %bb.34, debug-location !1073; cg.c:560:5
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %36:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(2): Data Latency=4 Reg=%36
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %176:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(9): Data Latency=4 Reg=%176
    SU(4): Data Latency=4 Reg=%176
    SU(2): Data Latency=4 Reg=%176
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %42:fr64 = MOVSDrm_alt %36:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%176
    SU(0): Data Latency=4 Reg=%36
  Successors:
    SU(4): Data Latency=4 Reg=%42
    SU(4): Out  Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   %40:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1062 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(4): Data Latency=4 Reg=%40
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %42:fr64 = SUBSDrm %42:fr64(tied-def 0), %40:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1064 :: (load 8 from %ir.arrayidx164); cg.c:561:18
  # preds left       : 4
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 9
  Predecessors:
    SU(2): Data Latency=4 Reg=%42
    SU(3): Data Latency=4 Reg=%40
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%176
  Successors:
    SU(6): Data Latency=4 Reg=%42
    SU(5): Data Latency=4 Reg=%42
    SU(6): Out  Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(5):   MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 5
  Predecessors:
    SU(4): Data Latency=4 Reg=%42
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(6): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %42:fr64 = MULSDrr %42:fr64(tied-def 0), %42:fr64, debug-location !1069; cg.c:562:23
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 5
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Data Latency=4 Reg=%42
    SU(4): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%42
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %42:fr64 = ADDSDrm %42:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1070 :: (dereferenceable load 8 from %ir.sum); cg.c:562:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 4
  Predecessors:
    SU(6): Data Latency=1 Reg=%42
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%42
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%42
    SU(7): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %44:gr32 = LEA64_32r %176:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1072; cg.c:560:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%176
  Successors:
    SU(10): Data Latency=1 Reg=%44
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %44:gr32, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%44
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.34, debug-location !1073; cg.c:560:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %44:gr32, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46
Bottom Pressure:
GR16=2
  LiveReg: %44
  UpdateRegP: SU(10) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %44:gr32, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %44:gr32 = LEA64_32r %176:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1072; cg.c:560:46
Bottom Pressure:
GR16=2
  LiveReg: %176
  UpdateRegP: SU(2) %42:fr64 = MOVSDrm_alt %36:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(4) %42:fr64 = SUBSDrm %42:fr64(tied-def 0), %40:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1064 :: (load 8 from %ir.arrayidx164); cg.c:561:18
              to GR16 2
  UpdateRegP: SU(9) %44:gr32 = LEA64_32r %176:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1072; cg.c:560:46
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %42
  UpdateRegP: SU(8) MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 17c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %42:fr64 = ADDSDrm %42:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1070 :: (dereferenceable load 8 from %ir.sum); cg.c:562:19
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %42
  UpdateRegP: SU(7) %42:fr64 = ADDSDrm %42:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1070 :: (dereferenceable load 8 from %ir.sum); cg.c:562:19
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %42:fr64 = MULSDrr %42:fr64(tied-def 0), %42:fr64, debug-location !1069; cg.c:562:23
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %42
  UpdateRegP: SU(5) MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
              to 
  UpdateRegP: SU(6) %42:fr64 = MULSDrr %42:fr64(tied-def 0), %42:fr64, debug-location !1069; cg.c:562:23
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %42:fr64 = SUBSDrm %42:fr64(tied-def 0), %40:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1064 :: (load 8 from %ir.arrayidx164); cg.c:561:18
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %42
  UpdateRegP: SU(4) %42:fr64 = SUBSDrm %42:fr64(tied-def 0), %40:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1064 :: (load 8 from %ir.arrayidx164); cg.c:561:18
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %40
  UpdateRegP: SU(4) %42:fr64 = SUBSDrm %42:fr64(tied-def 0), %40:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1064 :: (load 8 from %ir.arrayidx164); cg.c:561:18
              to FR32 -1    FR32X -1
  Ready @9c
  BotQ.A BotLatency SU(4) 9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(3) %40:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1062 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @13c
  BotQ.A BotLatency SU(3) 13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %42:fr64 = MOVSDrm_alt %36:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
Bottom Pressure:
GR16=4
  LiveReg: %36
  UpdateRegP: SU(2) %42:fr64 = MOVSDrm_alt %36:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
              to FR32 -1    FR32X -1
  Ready @13c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %176:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
Bottom Pressure:
GR16=2
  Ready @17c
  BotQ.A BotLatency SU(1) 17c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %36:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
Bottom Pressure:

  Ready @17c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %36:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
SU(1):   %176:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
SU(2):   %42:fr64 = MOVSDrm_alt %36:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
SU(3):   %40:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1062 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
SU(4):   %42:fr64 = SUBSDrm %42:fr64(tied-def 0), %40:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1064 :: (load 8 from %ir.arrayidx164); cg.c:561:18
SU(5):   MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
SU(6):   %42:fr64 = MULSDrr %42:fr64(tied-def 0), %42:fr64, debug-location !1069; cg.c:562:23
SU(7):   %42:fr64 = ADDSDrm %42:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1070 :: (dereferenceable load 8 from %ir.sum); cg.c:562:19
SU(8):   MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
SU(9):   %44:gr32 = LEA64_32r %176:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1072; cg.c:560:46
SU(10):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %44:gr32, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46

********** MI Scheduling **********
conj_grad:%bb.36 for.end170
  From: %0:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
    To: JCC_1 %bb.38, 2, implicit killed $eflags, debug-location !1078; cg.c:565:6
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %0:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%0
  Single Issue       : false;
SU(1):   %33:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(2):   UCOMISDrr %0:fr64, %33:fr64, implicit-def $eflags, debug-location !1078; cg.c:565:6
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%33
    SU(0): Data Latency=4 Reg=%0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.38, 2, implicit killed $eflags, debug-location !1078; cg.c:565:6
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) UCOMISDrr %0:fr64, %33:fr64, implicit-def $eflags, debug-location !1078; cg.c:565:6
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %33:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %0:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
SU(1):   %33:fr64 = FsFLD0SD
SU(2):   UCOMISDrr %0:fr64, %33:fr64, implicit-def $eflags, debug-location !1078; cg.c:565:6

********** MI Scheduling **********
conj_grad:%bb.39 for.end170.split
  From: %35:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
    To: RET 0, debug-location !1080; cg.c:566:1
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %35:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%35
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOVSDmr %35:gr64, 1, $noreg, 0, $noreg, %169:fr64, debug-location !1079 :: (store 8 into %ir.158); cg.c:565:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%35
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   RET 0, debug-location !1080; cg.c:566:1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %35:gr64, 1, $noreg, 0, $noreg, %169:fr64, debug-location !1079 :: (store 8 into %ir.158); cg.c:565:12
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %35:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %35:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
SU(1):   MOVSDmr %35:gr64, 1, $noreg, 0, $noreg, %169:fr64, debug-location !1079 :: (store 8 into %ir.158); cg.c:565:12

********** INTERVALS **********
CH [0B,48r:0)  0@0B-phi
CL [0B,48r:0)  0@0B-phi
DH [0B,64r:0)  0@0B-phi
DIL [0B,96r:0)  0@0B-phi
DIH [0B,96r:0)  0@0B-phi
DL [0B,64r:0)  0@0B-phi
HCX [0B,48r:0)  0@0B-phi
HDI [0B,96r:0)  0@0B-phi
HDX [0B,64r:0)  0@0B-phi
SIL [0B,80r:0)  0@0B-phi
SIH [0B,80r:0)  0@0B-phi
HSI [0B,80r:0)  0@0B-phi
R8B [0B,32r:0)  0@0B-phi
R8BH [0B,32r:0)  0@0B-phi
R8WH [0B,32r:0)  0@0B-phi
R9B [0B,16r:0)  0@0B-phi
R9BH [0B,16r:0)  0@0B-phi
R9WH [0B,16r:0)  0@0B-phi
%0 [5216r,5520r:0)  0@5216r weight:0.000000e+00
%4 [96r,112r:0)  0@96r weight:0.000000e+00
%5 [80r,128r:0)  0@80r weight:0.000000e+00
%6 [64r,144r:0)  0@64r weight:0.000000e+00
%7 [48r,160r:0)  0@48r weight:0.000000e+00
%8 [32r,176r:0)  0@32r weight:0.000000e+00
%9 [16r,192r:0)  0@16r weight:0.000000e+00
%10 [208r,224r:0)  0@208r weight:0.000000e+00
%13 [320r,352r:0)[352r,368r:1)  0@320r 1@352r weight:0.000000e+00
%18 [768r,800r:2)[800r,832r:0)[832r,848r:1)  0@800r 1@832r 2@768r weight:0.000000e+00
%20 [1136r,1152r:0)  0@1136r weight:0.000000e+00
%21 [1184r,1200r:0)  0@1184r weight:0.000000e+00
%26 [4016r,4048r:2)[4048r,4080r:0)[4080r,4096r:1)  0@4048r 1@4080r 2@4016r weight:0.000000e+00
%31 [4784r,4816r:2)[4816r,4848r:0)[4848r,4864r:1)  0@4816r 1@4848r 2@4784r weight:0.000000e+00
%33 [5232r,5248r:0)  0@5232r weight:0.000000e+00
%35 [5552r,5568r:0)  0@5552r weight:0.000000e+00
%36 [4928r,4976r:0)  0@4928r weight:0.000000e+00
%40 [4992r,5024r:0)  0@4992r weight:0.000000e+00
%42 [4976r,5024r:2)[5024r,5072r:0)[5072r,5104r:1)[5104r,5120r:3)  0@5024r 1@5072r 2@4976r 3@5104r weight:0.000000e+00
%44 [5152r,5168r:0)  0@5152r weight:0.000000e+00
%45 [4176r,4208r:0)  0@4176r weight:0.000000e+00
%46 [4192r,4208r:0)  0@4192r weight:0.000000e+00
%47 [4208r,4224r:0)  0@4208r weight:0.000000e+00
%48 [4256r,4304r:0)  0@4256r weight:0.000000e+00
%49 [4272r,4304r:0)  0@4272r weight:0.000000e+00
%50 [4288r,4304r:0)  0@4288r weight:0.000000e+00
%52 [4640r,4688r:0)  0@4640r weight:0.000000e+00
%53 [4656r,4688r:0)  0@4656r weight:0.000000e+00
%54 [4672r,4688r:0)  0@4672r weight:0.000000e+00
%55 [4368r,4416r:0)  0@4368r weight:0.000000e+00
%59 [4432r,4496r:0)  0@4432r weight:0.000000e+00
%60 [4448r,4464r:0)  0@4448r weight:0.000000e+00
%61 [4464r,4496r:0)  0@4464r weight:0.000000e+00
%63 [4416r,4496r:2)[4496r,4528r:0)[4528r,4544r:1)  0@4496r 1@4528r 2@4416r weight:0.000000e+00
%64 [4576r,4592r:0)  0@4576r weight:0.000000e+00
%68 [1296r,1328r:2)[1328r,1360r:0)[1360r,1376r:1)  0@1328r 1@1360r 2@1296r weight:0.000000e+00
%73 [2080r,2112r:2)[2112r,2144r:0)[2144r,2160r:1)  0@2112r 1@2144r 2@2080r weight:0.000000e+00
%75 [2464r,2536r:0)  0@2464r weight:0.000000e+00
%76 [2536r,2544r:0)[2544r,2552r:1)  0@2536r 1@2544r weight:0.000000e+00
%80 [2592r,2624r:2)[2624r,2656r:0)[2656r,2672r:1)  0@2624r 1@2656r 2@2592r weight:0.000000e+00
%85 [3120r,3152r:2)[3152r,3184r:0)[3184r,3200r:1)  0@3152r 1@3184r 2@3120r weight:0.000000e+00
%88 [3488r,3520r:0)[3520r,3536r:1)  0@3488r 1@3520r weight:0.000000e+00
%92 [3584r,3616r:2)[3616r,3648r:0)[3648r,3664r:1)  0@3616r 1@3648r 2@3584r weight:0.000000e+00
%94 [3728r,3840r:0)  0@3728r weight:0.000000e+00
%95 [3744r,3856r:0)  0@3744r weight:0.000000e+00
%97 [3776r,3856r:0)  0@3776r weight:0.000000e+00
%99 [3760r,3808r:2)[3808r,3840r:0)[3840r,3856r:1)  0@3808r 1@3840r 2@3760r weight:0.000000e+00
%100 [3264r,3312r:0)  0@3264r weight:0.000000e+00
%105 [3312r,3344r:2)[3344r,3376r:0)[3376r,3392r:1)  0@3344r 1@3376r 2@3312r weight:0.000000e+00
%106 [3424r,3440r:0)  0@3424r weight:0.000000e+00
%107 [2736r,2864r:0)  0@2736r weight:0.000000e+00
%108 [2752r,2864r:0)  0@2752r weight:0.000000e+00
%110 [2784r,2816r:0)  0@2784r weight:0.000000e+00
%112 [2768r,2816r:2)[2816r,2848r:0)[2848r,2864r:1)  0@2816r 1@2848r 2@2768r weight:0.000000e+00
%113 [2880r,3024r:0)  0@2880r weight:0.000000e+00
%114 [2896r,3024r:0)  0@2896r weight:0.000000e+00
%117 [2944r,2976r:0)  0@2944r weight:0.000000e+00
%118 [2928r,2976r:0)[2976r,3008r:1)  0@2928r 1@2976r weight:0.000000e+00
%119 [2912r,3008r:0)[3008r,3024r:1)  0@2912r 1@3008r weight:0.000000e+00
%120 [2224r,2272r:0)  0@2224r weight:0.000000e+00
%124 [2288r,2320r:0)  0@2288r weight:0.000000e+00
%126 [2272r,2320r:2)[2320r,2352r:0)[2352r,2368r:1)  0@2320r 1@2352r 2@2272r weight:0.000000e+00
%127 [2400r,2416r:0)  0@2400r weight:0.000000e+00
%128 [1456r,1488r:0)  0@1456r weight:0.000000e+00
%129 [1472r,1488r:0)  0@1472r weight:0.000000e+00
%130 [1488r,1504r:0)  0@1488r weight:0.000000e+00
%131 [1536r,1584r:0)  0@1536r weight:0.000000e+00
%132 [1552r,1584r:0)  0@1552r weight:0.000000e+00
%133 [1568r,1584r:0)  0@1568r weight:0.000000e+00
%135 [1920r,1968r:0)  0@1920r weight:0.000000e+00
%136 [1936r,1968r:0)  0@1936r weight:0.000000e+00
%137 [1952r,1968r:0)  0@1952r weight:0.000000e+00
%138 [1648r,1696r:0)  0@1648r weight:0.000000e+00
%142 [1712r,1776r:0)  0@1712r weight:0.000000e+00
%143 [1728r,1744r:0)  0@1728r weight:0.000000e+00
%144 [1744r,1776r:0)  0@1744r weight:0.000000e+00
%146 [1696r,1776r:2)[1776r,1808r:0)[1808r,1824r:1)  0@1776r 1@1808r 2@1696r weight:0.000000e+00
%147 [1856r,1872r:0)  0@1856r weight:0.000000e+00
%148 [912r,960r:0)  0@912r weight:0.000000e+00
%153 [960r,992r:2)[992r,1024r:0)[1024r,1040r:1)  0@992r 1@1024r 2@960r weight:0.000000e+00
%154 [1072r,1088r:0)  0@1072r weight:0.000000e+00
%155 [432r,464r:0)  0@432r weight:0.000000e+00
%156 [448r,464r:0)  0@448r weight:0.000000e+00
%157 [480r,512r:0)  0@480r weight:0.000000e+00
%158 [496r,512r:0)  0@496r weight:0.000000e+00
%160 [272r,720B:0)  0@272r weight:0.000000e+00
%161 [528r,560r:0)  0@528r weight:0.000000e+00
%162 [544r,592r:0)  0@544r weight:0.000000e+00
%163 [560r,592r:0)  0@560r weight:0.000000e+00
%164 [576r,592r:0)  0@576r weight:0.000000e+00
%165 [608r,640r:0)  0@608r weight:0.000000e+00
%166 [624r,672r:0)  0@624r weight:0.000000e+00
%167 [640r,672r:0)  0@640r weight:0.000000e+00
%168 [656r,672r:0)  0@656r weight:0.000000e+00
%169 [5296r,5344B:0)[5424r,5472B:1)[5472B,5568r:2)  0@5296r 1@5424r 2@5472B-phi weight:0.000000e+00
%170 [928r,1072r:0)  0@928r weight:0.000000e+00
%171 [1664r,1856r:0)  0@1664r weight:0.000000e+00
%172 [2240r,2400r:0)  0@2240r weight:0.000000e+00
%174 [3280r,3424r:0)  0@3280r weight:0.000000e+00
%175 [4384r,4576r:0)  0@4384r weight:0.000000e+00
%176 [4944r,5152r:0)  0@4944r weight:0.000000e+00
RegMasks: 5392r
********** MACHINEINSTRS **********
# Machine code for function conj_grad: NoPHIs, TracksLiveness
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP+24]
  fi#-2: size=8, align=8, fixed, at location [SP+16]
  fi#-1: size=8, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=8, align=8, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
  fi#16: size=8, align=8, at location [SP+8]
  fi#17: size=8, align=8, at location [SP+8]
  fi#18: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %4, $rsi in %5, $rdx in %6, $rcx in %7, $r8 in %8, $r9 in %9

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
16B	  %9:gr64 = COPY $r9
32B	  %8:gr64 = COPY $r8
48B	  %7:gr64 = COPY $rcx
64B	  %6:gr64 = COPY $rdx
80B	  %5:gr64 = COPY $rsi
96B	  %4:gr64 = COPY $rdi
112B	  MOV64mr %stack.0.colidx.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.colidx.addr)
128B	  MOV64mr %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.rowstr.addr)
144B	  MOV64mr %stack.2.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
160B	  MOV64mr %stack.3.z.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.z.addr)
176B	  MOV64mr %stack.4.a.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.a.addr)
192B	  MOV64mr %stack.5.p.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.p.addr)
208B	  %10:gr32 = MOV32ri 25
224B	  MOV32mr %stack.12.cgitmax, 1, $noreg, 0, $noreg, %10:gr32, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
240B	  MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !763 :: (store 8 into %ir.rho); cg.c:409:9
256B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !764 :: (store 4 into %ir.j); cg.c:414:12
272B	  undef %160.sub_32bit:gr64_with_sub_32bit_in_gr32temp = MOV32r0 implicit-def dead $eflags

304B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

320B	  %13:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
352B	  %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !770; cg.c:414:25
368B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !771 :: (dereferenceable load 4 from %ir.j); cg.c:414:19
384B	  JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !772; cg.c:414:5
400B	  JMP_1 %bb.2, debug-location !772; cg.c:414:5

416B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

432B	  %155:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
448B	  %156:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
464B	  MOV64mi32 %155:gr64, 8, %156:gr64_nosp, 0, $noreg, 0, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
480B	  %157:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !777 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
496B	  %158:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
512B	  MOV64mr %157:gr64, 8, %158:gr64_nosp, 0, $noreg, %160:gr64_with_sub_32bit_in_gr32temp, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
528B	  %161:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !780 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
544B	  %162:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !781 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
560B	  %163:fr64 = MOVSDrm_alt %161:gr64, 8, %162:gr64_nosp, 0, $noreg, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
576B	  %164:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
592B	  MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
608B	  %165:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !785 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
624B	  %166:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !786 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
640B	  %167:fr64 = MOVSDrm_alt %165:gr64, 8, %166:gr64_nosp, 0, $noreg, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
656B	  %168:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !787 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
672B	  MOVSDmr %168:gr64, 8, %166:gr64_nosp, 0, $noreg, %167:fr64, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
688B	  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !790 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:414:31
704B	  JMP_1 %bb.1, debug-location !791; cg.c:414:5

720B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

736B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !794 :: (store 4 into %ir.j); cg.c:425:12

752B	bb.4.for.cond11:
	; predecessors: %bb.3, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

768B	  %18:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
800B	  %18:gr32 = nsw SUB32rm %18:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !801 :: (dereferenceable load 4 from @firstcol); cg.c:425:29
832B	  %18:gr32 = nsw INC32r %18:gr32(tied-def 0), implicit-def dead $eflags, debug-location !802; cg.c:425:40
848B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %18:gr32, implicit-def $eflags, debug-location !803 :: (dereferenceable load 4 from %ir.j); cg.c:425:19
864B	  JCC_1 %bb.6, 13, implicit killed $eflags, debug-location !804; cg.c:425:5
880B	  JMP_1 %bb.5, debug-location !804; cg.c:425:5

896B	bb.5.for.body14:
	; predecessors: %bb.4
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

912B	  %148:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
928B	  %170:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !808 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
960B	  %153:fr64 = MOVSDrm_alt %148:gr64, 8, %170:gr64_nosp, 0, $noreg, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
992B	  %153:fr64 = MULSDrr %153:fr64(tied-def 0), %153:fr64, debug-location !811; cg.c:426:26
1024B	  %153:fr64 = ADDSDrm %153:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !812 :: (dereferenceable load 8 from %ir.rho); cg.c:426:19
1040B	  MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %153:fr64, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
1072B	  %154:gr32 = LEA64_32r %170:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !814; cg.c:425:46
1088B	  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %154:gr32, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46
1104B	  JMP_1 %bb.4, debug-location !815; cg.c:425:5

1120B	bb.6.for.end22:
	; predecessors: %bb.4
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1136B	  %20:gr32 = MOV32ri 1
1152B	  MOV32mr %stack.11.cgit, 1, $noreg, 0, $noreg, %20:gr32, debug-location !818 :: (store 4 into %ir.cgit); cg.c:434:15

1168B	bb.7.for.cond23:
	; predecessors: %bb.6, %bb.26
	  successors: %bb.8(0x7c000000), %bb.27(0x04000000); %bb.8(96.88%), %bb.27(3.12%)

1184B	  %21:gr32 = MOV32rm %stack.11.cgit, 1, $noreg, 0, $noreg, debug-location !821 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
1200B	  CMP32rm %21:gr32, %stack.12.cgitmax, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !824 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:25
1216B	  JCC_1 %bb.27, 15, implicit killed $eflags, debug-location !825; cg.c:434:5
1232B	  JMP_1 %bb.8, debug-location !825; cg.c:434:5

1248B	bb.8.for.body25:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

1264B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !826 :: (store 4 into %ir.j); cg.c:447:16

1280B	bb.9.for.cond26:
	; predecessors: %bb.8, %bb.13
	  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

1296B	  %68:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
1328B	  %68:gr32 = nsw SUB32rm %68:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !834 :: (dereferenceable load 4 from @firstrow); cg.c:447:33
1360B	  %68:gr32 = nsw INC32r %68:gr32(tied-def 0), implicit-def dead $eflags, debug-location !835; cg.c:447:44
1376B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %68:gr32, implicit-def $eflags, debug-location !836 :: (dereferenceable load 4 from %ir.j); cg.c:447:23
1392B	  JCC_1 %bb.14, 13, implicit killed $eflags, debug-location !837; cg.c:447:9
1408B	  JMP_1 %bb.10, debug-location !837; cg.c:447:9

1424B	bb.10.for.body30:
	; predecessors: %bb.9
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1440B	  MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
1456B	  %128:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
1472B	  %129:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !842 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
1488B	  %130:gr32 = MOV32rm %128:gr64, 4, %129:gr64_nosp, 0, $noreg, debug-location !840 :: (load 4 from %ir.arrayidx32); cg.c:449:22
1504B	  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %130:gr32, debug-location !843 :: (store 4 into %ir.k); cg.c:449:20

1520B	bb.11.for.cond33:
	; predecessors: %bb.10, %bb.12
	  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

1536B	  %131:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
1552B	  %132:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !847 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
1568B	  %133:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !848 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
1584B	  CMP32rm %131:gr32, %132:gr64, 4, %133:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !850 :: (load 4 from %ir.arrayidx36); cg.c:449:35
1600B	  JCC_1 %bb.13, 13, implicit killed $eflags, debug-location !851; cg.c:449:13
1616B	  JMP_1 %bb.12, debug-location !851; cg.c:449:13

1632B	bb.12.for.body38:
	; predecessors: %bb.11
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1648B	  %138:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
1664B	  %171:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
1696B	  %146:fr64 = MOVSDrm_alt %138:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
1712B	  %142:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !856 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
1728B	  %143:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !857 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
1744B	  %144:gr64_nosp = MOVSX64rm32 %143:gr64, 4, %171:gr64_nosp, 0, $noreg, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
1776B	  %146:fr64 = MULSDrm %146:fr64(tied-def 0), %142:gr64, 8, %144:gr64_nosp, 0, $noreg, debug-location !859 :: (load 8 from %ir.arrayidx44); cg.c:450:34
1808B	  %146:fr64 = ADDSDrm %146:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !860 :: (dereferenceable load 8 from %ir.sum); cg.c:450:27
1824B	  MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %146:fr64, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
1856B	  %147:gr32 = LEA64_32r %171:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !862; cg.c:449:53
1872B	  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %147:gr32, debug-location !862 :: (store 4 into %ir.k); cg.c:449:53
1888B	  JMP_1 %bb.11, debug-location !863; cg.c:449:13

1904B	bb.13.for.end49:
	; predecessors: %bb.11
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

1920B	  %135:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
1936B	  %136:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !867 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
1952B	  %137:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !868 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
1968B	  MOVSDmr %136:gr64, 8, %137:gr64_nosp, 0, $noreg, %135:fr64, debug-location !869 :: (store 8 into %ir.arrayidx51); cg.c:452:18
1984B	  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !870 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:447:50
2000B	  JMP_1 %bb.9, debug-location !871; cg.c:447:9

2016B	bb.14.for.end54:
	; predecessors: %bb.9
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2032B	  MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
2048B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !875 :: (store 4 into %ir.j); cg.c:497:16

2064B	bb.15.for.cond55:
	; predecessors: %bb.14, %bb.16
	  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

2080B	  %73:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
2112B	  %73:gr32 = nsw SUB32rm %73:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !882 :: (dereferenceable load 4 from @firstcol); cg.c:497:33
2144B	  %73:gr32 = nsw INC32r %73:gr32(tied-def 0), implicit-def dead $eflags, debug-location !883; cg.c:497:44
2160B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %73:gr32, implicit-def $eflags, debug-location !884 :: (dereferenceable load 4 from %ir.j); cg.c:497:23
2176B	  JCC_1 %bb.17, 13, implicit killed $eflags, debug-location !885; cg.c:497:9
2192B	  JMP_1 %bb.16, debug-location !885; cg.c:497:9

2208B	bb.16.for.body59:
	; predecessors: %bb.15
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2224B	  %120:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
2240B	  %172:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
2272B	  %126:fr64 = MOVSDrm_alt %120:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
2288B	  %124:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !890 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
2320B	  %126:fr64 = MULSDrm %126:fr64(tied-def 0), %124:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !892 :: (load 8 from %ir.arrayidx63); cg.c:498:26
2352B	  %126:fr64 = ADDSDrm %126:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !893 :: (dereferenceable load 8 from %ir.d); cg.c:498:19
2368B	  MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %126:fr64, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
2400B	  %127:gr32 = LEA64_32r %172:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !895; cg.c:497:50
2416B	  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %127:gr32, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50
2432B	  JMP_1 %bb.15, debug-location !896; cg.c:497:9

2448B	bb.17.for.end68:
	; predecessors: %bb.15
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

2464B	  %75:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
2528B	  MOVSDmr %stack.16.rho0, 1, $noreg, 0, $noreg, %75:fr64, debug-location !904 :: (store 8 into %ir.rho0); cg.c:509:14
2536B	  %76:fr64 = COPY %75:fr64, debug-location !901; cg.c:504:21
2544B	  %76:fr64 = DIVSDrm %76:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !901 :: (dereferenceable load 8 from %ir.d); cg.c:504:21
2552B	  MOVSDmr %stack.17.alpha, 1, $noreg, 0, $noreg, %76:fr64, debug-location !902 :: (store 8 into %ir.alpha); cg.c:504:15
2560B	  MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !905 :: (store 8 into %ir.rho); cg.c:515:13
2568B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !906 :: (store 4 into %ir.j); cg.c:516:16

2576B	bb.18.for.cond69:
	; predecessors: %bb.17, %bb.19
	  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

2592B	  %80:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
2624B	  %80:gr32 = nsw SUB32rm %80:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !913 :: (dereferenceable load 4 from @firstcol); cg.c:516:33
2656B	  %80:gr32 = nsw INC32r %80:gr32(tied-def 0), implicit-def dead $eflags, debug-location !914; cg.c:516:44
2672B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %80:gr32, implicit-def $eflags, debug-location !915 :: (dereferenceable load 4 from %ir.j); cg.c:516:23
2688B	  JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !916; cg.c:516:9
2704B	  JMP_1 %bb.19, debug-location !916; cg.c:516:9

2720B	bb.19.for.body73:
	; predecessors: %bb.18
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

2736B	  %107:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
2752B	  %108:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
2768B	  %112:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !920 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
2784B	  %110:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !921 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
2816B	  %112:fr64 = MULSDrm %112:fr64(tied-def 0), %110:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !923 :: (load 8 from %ir.arrayidx77); cg.c:517:33
2848B	  %112:fr64 = ADDSDrm %112:fr64(tied-def 0), %107:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !924 :: (load 8 from %ir.arrayidx75); cg.c:517:25
2864B	  MOVSDmr %107:gr64, 8, %108:gr64_nosp, 0, $noreg, %112:fr64, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
2880B	  %113:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !928 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
2896B	  %114:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !929 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
2912B	  %119:fr64 = MOVSDrm_alt %113:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
2928B	  %118:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !930 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
2944B	  %117:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !931 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
2976B	  %118:fr64 = MULSDrm %118:fr64(tied-def 0), %117:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !933 :: (load 8 from %ir.arrayidx85); cg.c:518:33
3008B	  %119:fr64 = SUBSDrr %119:fr64(tied-def 0), %118:fr64, debug-location !934; cg.c:518:25
3024B	  MOVSDmr %113:gr64, 8, %114:gr64_nosp, 0, $noreg, %119:fr64, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
3040B	  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !938 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:516:50
3056B	  JMP_1 %bb.18, debug-location !939; cg.c:516:9

3072B	bb.20.for.end92:
	; predecessors: %bb.18
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

3088B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !942 :: (store 4 into %ir.j); cg.c:526:16

3104B	bb.21.for.cond93:
	; predecessors: %bb.20, %bb.22
	  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

3120B	  %85:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
3152B	  %85:gr32 = nsw SUB32rm %85:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !949 :: (dereferenceable load 4 from @firstcol); cg.c:526:33
3184B	  %85:gr32 = nsw INC32r %85:gr32(tied-def 0), implicit-def dead $eflags, debug-location !950; cg.c:526:44
3200B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %85:gr32, implicit-def $eflags, debug-location !951 :: (dereferenceable load 4 from %ir.j); cg.c:526:23
3216B	  JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !952; cg.c:526:9
3232B	  JMP_1 %bb.22, debug-location !952; cg.c:526:9

3248B	bb.22.for.body97:
	; predecessors: %bb.21
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

3264B	  %100:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
3280B	  %174:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !956 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
3312B	  %105:fr64 = MOVSDrm_alt %100:gr64, 8, %174:gr64_nosp, 0, $noreg, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
3344B	  %105:fr64 = MULSDrr %105:fr64(tied-def 0), %105:fr64, debug-location !959; cg.c:527:30
3376B	  %105:fr64 = ADDSDrm %105:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !960 :: (dereferenceable load 8 from %ir.rho); cg.c:527:23
3392B	  MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %105:fr64, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
3424B	  %106:gr32 = LEA64_32r %174:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !962; cg.c:526:50
3440B	  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %106:gr32, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50
3456B	  JMP_1 %bb.21, debug-location !963; cg.c:526:9

3472B	bb.23.for.end106:
	; predecessors: %bb.21
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

3488B	  %88:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !966 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
3520B	  %88:fr64 = DIVSDrm %88:fr64(tied-def 0), %stack.16.rho0, 1, $noreg, 0, $noreg, debug-location !968 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:20
3536B	  MOVSDmr %stack.18.beta, 1, $noreg, 0, $noreg, %88:fr64, debug-location !969 :: (store 8 into %ir.beta); cg.c:533:14
3552B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !970 :: (store 4 into %ir.j); cg.c:538:16

3568B	bb.24.for.cond108:
	; predecessors: %bb.23, %bb.25
	  successors: %bb.25(0x7c000000), %bb.26(0x04000000); %bb.25(96.88%), %bb.26(3.12%)

3584B	  %92:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
3616B	  %92:gr32 = nsw SUB32rm %92:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !977 :: (dereferenceable load 4 from @firstcol); cg.c:538:33
3648B	  %92:gr32 = nsw INC32r %92:gr32(tied-def 0), implicit-def dead $eflags, debug-location !978; cg.c:538:44
3664B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %92:gr32, implicit-def $eflags, debug-location !979 :: (dereferenceable load 4 from %ir.j); cg.c:538:23
3680B	  JCC_1 %bb.26, 13, implicit killed $eflags, debug-location !980; cg.c:538:9
3696B	  JMP_1 %bb.25, debug-location !980; cg.c:538:9

3712B	bb.25.for.body112:
	; predecessors: %bb.24
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

3728B	  %94:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
3744B	  %95:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
3760B	  %99:fr64 = MOVSDrm_alt %stack.18.beta, 1, $noreg, 0, $noreg, debug-location !984 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
3776B	  %97:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !985 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
3808B	  %99:fr64 = MULSDrm %99:fr64(tied-def 0), %97:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !987 :: (load 8 from %ir.arrayidx116); cg.c:539:32
3840B	  %99:fr64 = ADDSDrm %99:fr64(tied-def 0), %94:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !988 :: (load 8 from %ir.arrayidx114); cg.c:539:25
3856B	  MOVSDmr %97:gr64, 8, %95:gr64_nosp, 0, $noreg, %99:fr64, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
3872B	  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !992 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:538:50
3888B	  JMP_1 %bb.24, debug-location !993; cg.c:538:9

3904B	bb.26.for.end123:
	; predecessors: %bb.24
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

3920B	  INC32m %stack.11.cgit, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !996 :: (store 4 into %ir.cgit), (dereferenceable load 4 from %ir.cgit); cg.c:434:41
3936B	  JMP_1 %bb.7, debug-location !997; cg.c:434:5

3952B	bb.27.for.end126:
	; predecessors: %bb.7
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

3968B	  MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
3984B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !1001 :: (store 4 into %ir.j); cg.c:549:12

4000B	bb.28.for.cond127:
	; predecessors: %bb.27, %bb.32
	  successors: %bb.29(0x7c000000), %bb.33(0x04000000); %bb.29(96.88%), %bb.33(3.12%)

4016B	  %26:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
4048B	  %26:gr32 = nsw SUB32rm %26:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !1008 :: (dereferenceable load 4 from @firstrow); cg.c:549:29
4080B	  %26:gr32 = nsw INC32r %26:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1009; cg.c:549:40
4096B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %26:gr32, implicit-def $eflags, debug-location !1010 :: (dereferenceable load 4 from %ir.j); cg.c:549:19
4112B	  JCC_1 %bb.33, 13, implicit killed $eflags, debug-location !1011; cg.c:549:5
4128B	  JMP_1 %bb.29, debug-location !1011; cg.c:549:5

4144B	bb.29.for.body131:
	; predecessors: %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

4160B	  MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
4176B	  %45:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
4192B	  %46:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1016 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
4208B	  %47:gr32 = MOV32rm %45:gr64, 4, %46:gr64_nosp, 0, $noreg, debug-location !1014 :: (load 4 from %ir.arrayidx133); cg.c:551:18
4224B	  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %47:gr32, debug-location !1017 :: (store 4 into %ir.k); cg.c:551:16

4240B	bb.30.for.cond134:
	; predecessors: %bb.29, %bb.31
	  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)

4256B	  %48:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
4272B	  %49:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1021 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
4288B	  %50:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1022 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
4304B	  CMP32rm %48:gr32, %49:gr64, 4, %50:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1024 :: (load 4 from %ir.arrayidx137); cg.c:551:31
4320B	  JCC_1 %bb.32, 13, implicit killed $eflags, debug-location !1025; cg.c:551:9
4336B	  JMP_1 %bb.31, debug-location !1025; cg.c:551:9

4352B	bb.31.for.body139:
	; predecessors: %bb.30
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

4368B	  %55:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
4384B	  %175:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
4416B	  %63:fr64 = MOVSDrm_alt %55:gr64, 8, %175:gr64_nosp, 0, $noreg, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
4432B	  %59:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !1030 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
4448B	  %60:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1031 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
4464B	  %61:gr64_nosp = MOVSX64rm32 %60:gr64, 4, %175:gr64_nosp, 0, $noreg, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
4496B	  %63:fr64 = MULSDrm %63:fr64(tied-def 0), %59:gr64, 8, %61:gr64_nosp, 0, $noreg, debug-location !1033 :: (load 8 from %ir.arrayidx145); cg.c:552:26
4528B	  %63:fr64 = ADDSDrm %63:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1034 :: (dereferenceable load 8 from %ir.d); cg.c:552:19
4544B	  MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %63:fr64, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
4576B	  %64:gr32 = LEA64_32r %175:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1036; cg.c:551:49
4592B	  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %64:gr32, debug-location !1036 :: (store 4 into %ir.k); cg.c:551:49
4608B	  JMP_1 %bb.30, debug-location !1037; cg.c:551:9

4624B	bb.32.for.end150:
	; predecessors: %bb.30
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

4640B	  %52:fr64 = MOVSDrm_alt %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
4656B	  %53:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1041 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
4672B	  %54:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1042 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
4688B	  MOVSDmr %53:gr64, 8, %54:gr64_nosp, 0, $noreg, %52:fr64, debug-location !1043 :: (store 8 into %ir.arrayidx152); cg.c:554:14
4704B	  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1044 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:549:46
4720B	  JMP_1 %bb.28, debug-location !1045; cg.c:549:5

4736B	bb.33.for.end155:
	; predecessors: %bb.28
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

4752B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !1048 :: (store 4 into %ir.j); cg.c:560:12

4768B	bb.34.for.cond156:
	; predecessors: %bb.33, %bb.35
	  successors: %bb.35(0x7c000000), %bb.36(0x04000000); %bb.35(96.88%), %bb.36(3.12%)

4784B	  %31:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
4816B	  %31:gr32 = nsw SUB32rm %31:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !1055 :: (dereferenceable load 4 from @firstcol); cg.c:560:29
4848B	  %31:gr32 = nsw INC32r %31:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1056; cg.c:560:40
4864B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %31:gr32, implicit-def $eflags, debug-location !1057 :: (dereferenceable load 4 from %ir.j); cg.c:560:19
4880B	  JCC_1 %bb.36, 13, implicit killed $eflags, debug-location !1058; cg.c:560:5
4896B	  JMP_1 %bb.35, debug-location !1058; cg.c:560:5

4912B	bb.35.for.body160:
	; predecessors: %bb.34
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

4928B	  %36:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
4944B	  %176:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
4976B	  %42:fr64 = MOVSDrm_alt %36:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
4992B	  %40:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1062 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
5024B	  %42:fr64 = SUBSDrm %42:fr64(tied-def 0), %40:gr64, 8, %176:gr64_nosp, 0, $noreg, debug-location !1064 :: (load 8 from %ir.arrayidx164); cg.c:561:18
5040B	  MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
5072B	  %42:fr64 = MULSDrr %42:fr64(tied-def 0), %42:fr64, debug-location !1069; cg.c:562:23
5104B	  %42:fr64 = ADDSDrm %42:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1070 :: (dereferenceable load 8 from %ir.sum); cg.c:562:19
5120B	  MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
5152B	  %44:gr32 = LEA64_32r %176:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1072; cg.c:560:46
5168B	  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %44:gr32, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46
5184B	  JMP_1 %bb.34, debug-location !1073; cg.c:560:5

5200B	bb.36.for.end170:
	; predecessors: %bb.34
	  successors: %bb.37(0x40000000), %bb.38(0x40000000); %bb.37(50.00%), %bb.38(50.00%)

5216B	  %0:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
5232B	  %33:fr64 = FsFLD0SD
5248B	  UCOMISDrr %0:fr64, %33:fr64, implicit-def $eflags, debug-location !1078; cg.c:565:6
5264B	  JCC_1 %bb.38, 2, implicit killed $eflags, debug-location !1078; cg.c:565:6

5280B	bb.37:
	; predecessors: %bb.36
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

5296B	  %169:fr64 = SQRTSDr %0:fr64
5328B	  JMP_1 %bb.39

5344B	bb.38.call.sqrt:
	; predecessors: %bb.36
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

5360B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1078; cg.c:565:6
5376B	  $xmm0 = COPY %0:fr64, debug-location !1078; cg.c:565:6
5392B	  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1078; cg.c:565:6
5408B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1078; cg.c:565:6
5424B	  %169:fr64 = COPY killed $xmm0, debug-location !1078; cg.c:565:6

5472B	bb.39.for.end170.split:
	; predecessors: %bb.38, %bb.37

5504B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1078; cg.c:565:6
5520B	  PCN_STACKMAP 0, 0, 0, %fixed-stack.0, 0, %0:fr64, implicit-def dead early-clobber $r11, debug-location !1078 :: (load 8 from %fixed-stack.0, align 16); cg.c:565:6
5536B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1078; cg.c:565:6
5552B	  %35:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
5568B	  MOVSDmr %35:gr64, 1, $noreg, 0, $noreg, %169:fr64, debug-location !1079 :: (store 8 into %ir.158); cg.c:565:12
5584B	  RET 0, debug-location !1080; cg.c:566:1

# End machine code for function conj_grad.

Before MISched:
# Machine code for function sprnvc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1, $edx in %2, $rcx in %3, $r8 in %4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi, $edx, $rcx, $r8
  %4:gr64 = COPY $r8
  %3:gr64 = COPY $rcx
  %2:gr32 = COPY $edx
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
  MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
  MOV32mr %stack.2.nn1.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.nn1.addr)
  MOV64mr %stack.3.v.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.v.addr)
  MOV64mr %stack.4.iv.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.iv.addr)
  MOV32mi %stack.5.nzv, 1, $noreg, 0, $noreg, 0, debug-location !1104 :: (store 4 into %ir.nzv); cg.c:809:9
  %22:gr32 = MOV32ri 1

bb.1.while.cond:
; predecessors: %bb.0, %bb.2, %bb.8, %bb.9
  successors: %bb.2(0x7c000000), %bb.10(0x04000000); %bb.2(96.88%), %bb.10(3.12%)

  %5:gr32 = MOV32rm %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  CMP32rm %5:gr32, %stack.1.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1108 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:16
  JCC_1 %bb.10, 13, implicit killed $eflags, debug-location !1105; cg.c:811:5
  JMP_1 %bb.2, debug-location !1105; cg.c:811:5

bb.2.while.body:
; predecessors: %bb.1
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, @amult, $noreg, debug-location !1109 :: (dereferenceable load 8 from @amult); cg.c:812:32
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1111; cg.c:812:18
  $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !1111; cg.c:812:18
  $xmm0 = COPY %7:fr64, debug-location !1111; cg.c:812:18
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1111; cg.c:812:18
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1111; cg.c:812:18
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1112; cg.c:812:16
  PCN_STACKMAP 0, 0, 0, %stack.7.i, 0, 0, %stack.6.ii, 0, 0, %stack.4.iv.addr, 0, 0, %stack.0.n.addr, 0, 0, %stack.2.nn1.addr, 0, 0, %stack.1.nz.addr, 0, 0, %stack.5.nzv, 0, 0, %stack.3.v.addr, 0, 0, %stack.8.vecelt, 0, 0, %stack.9.vecloc, 0, 0, %stack.10.was_gen, 0, %7:fr64, implicit-def dead early-clobber $r11, debug-location !1112 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4); cg.c:812:16
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1112; cg.c:812:16
  %9:fr64 = COPY killed $xmm0, debug-location !1111; cg.c:812:18
  MOVSDmr %stack.8.vecelt, 1, $noreg, 0, $noreg, %9:fr64, debug-location !1112 :: (store 8 into %ir.vecelt); cg.c:812:16
  %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, @amult, $noreg, debug-location !1113 :: (dereferenceable load 8 from @amult); cg.c:817:32
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1114; cg.c:817:18
  $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !1114; cg.c:817:18
  $xmm0 = COPY %10:fr64, debug-location !1114; cg.c:817:18
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1114; cg.c:817:18
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1114; cg.c:817:18
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1115; cg.c:817:16
  PCN_STACKMAP 1, 0, 0, %stack.7.i, 0, 0, %stack.6.ii, 0, 0, %stack.4.iv.addr, 0, 0, %stack.0.n.addr, 0, 0, %stack.2.nn1.addr, 0, 0, %stack.1.nz.addr, 0, 0, %stack.5.nzv, 0, 0, %stack.3.v.addr, 0, 0, %stack.8.vecelt, 0, 0, %stack.9.vecloc, 0, 0, %stack.10.was_gen, 0, %10:fr64, implicit-def dead early-clobber $r11, debug-location !1115 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4); cg.c:817:16
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1115; cg.c:817:16
  %11:fr64 = COPY killed $xmm0, debug-location !1114; cg.c:817:18
  MOVSDmr %stack.9.vecloc, 1, $noreg, 0, $noreg, %11:fr64, debug-location !1115 :: (store 8 into %ir.vecloc); cg.c:817:16
  %12:gr32 = MOV32rm %stack.2.nn1.addr, 1, $noreg, 0, $noreg, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1118; cg.c:818:13
  $xmm0 = COPY %11:fr64, debug-location !1118; cg.c:818:13
  $edi = COPY %12:gr32, debug-location !1118; cg.c:818:13
  CALL64pcrel32 @icnvrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !1118; cg.c:818:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1118; cg.c:818:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1119; cg.c:818:33
  PCN_STACKMAP 2, 0, 0, %stack.7.i, 0, 0, %stack.6.ii, 0, 0, %stack.4.iv.addr, 0, 0, %stack.0.n.addr, 0, 0, %stack.2.nn1.addr, 0, 0, %stack.1.nz.addr, 0, 0, %stack.5.nzv, 0, 0, %stack.3.v.addr, 0, 0, %stack.8.vecelt, 0, 0, %stack.9.vecloc, 0, 0, %stack.10.was_gen, 0, %11:fr64, %12:gr32, implicit-def dead early-clobber $r11, debug-location !1119 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4); cg.c:818:33
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1119; cg.c:818:33
  %14:gr32 = COPY killed $eax, debug-location !1118; cg.c:818:13
  %14:gr32 = nsw INC32r %14:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1119; cg.c:818:33
  MOV32mr %stack.7.i, 1, $noreg, 0, $noreg, %14:gr32, debug-location !1120 :: (store 4 into %ir.i); cg.c:818:11
  CMP32rm %14:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1124 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:15
  JCC_1 %bb.1, 15, implicit killed $eflags, debug-location !1125; cg.c:819:13
  JMP_1 %bb.3, debug-location !1125; cg.c:819:13

bb.3.if.end:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  MOV32mi %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
  MOV32mi %stack.6.ii, 1, $noreg, 0, $noreg, 0, debug-location !1128 :: (store 4 into %ir.ii); cg.c:826:17

bb.4.for.cond:
; predecessors: %bb.3, %bb.7
  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

  %16:gr32 = MOV32rm %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1131 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
  CMP32rm %16:gr32, %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1134 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:25
  JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1135; cg.c:826:9
  JMP_1 %bb.5, debug-location !1135; cg.c:826:9

bb.5.for.body:
; predecessors: %bb.4
  successors: %bb.6(0x04000000), %bb.7(0x7c000000); %bb.6(3.12%), %bb.7(96.88%)

  %18:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  %19:gr64_nosp = MOVSX64rm32 %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1139 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1136 :: (load 4 from %ir.arrayidx); cg.c:827:17
  CMP32rm %20:gr32, %stack.7.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1141 :: (dereferenceable load 4 from %ir.i); cg.c:827:24
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !1142; cg.c:827:17
  JMP_1 %bb.6, debug-location !1142; cg.c:827:17

bb.6.if.then6:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  MOV32mr %stack.10.was_gen, 1, $noreg, 0, $noreg, %22:gr32, debug-location !1143 :: (store 4 into %ir.was_gen); cg.c:828:25
  JMP_1 %bb.8, debug-location !1145; cg.c:829:17

bb.7.if.end7:
; predecessors: %bb.5
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  INC32m %stack.6.ii, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1146 :: (store 4 into %ir.ii), (dereferenceable load 4 from %ir.ii); cg.c:826:34
  JMP_1 %bb.4, debug-location !1147; cg.c:826:9

bb.8.for.end:
; predecessors: %bb.4, %bb.6
  successors: %bb.1(0x40000000), %bb.9(0x40000000); %bb.1(50.00%), %bb.9(50.00%)

  CMP32mi8 %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1150 :: (dereferenceable load 4 from %ir.was_gen); cg.c:832:13
  JCC_1 %bb.1, 5, implicit killed $eflags, debug-location !1152; cg.c:832:13
  JMP_1 %bb.9, debug-location !1152; cg.c:832:13

bb.9.if.end9:
; predecessors: %bb.8
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %23:fr64 = MOVSDrm_alt %stack.8.vecelt, 1, $noreg, 0, $noreg, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  %24:gr64 = MOV64rm %stack.3.v.addr, 1, $noreg, 0, $noreg, debug-location !1154 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  %25:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1155 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  MOVSDmr %24:gr64, 8, %25:gr64_nosp, 0, $noreg, %23:fr64, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  %26:gr32 = MOV32rm %stack.7.i, 1, $noreg, 0, $noreg, debug-location !1157 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  %27:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1158 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  %28:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1159 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  MOV32mr %27:gr64, 4, %28:gr64_nosp, 0, $noreg, %26:gr32, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  INC32m %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1163 :: (store 4 into %ir.nzv), (dereferenceable load 4 from %ir.nzv); cg.c:836:13
  JMP_1 %bb.1, debug-location !1105; cg.c:811:5

bb.10.while.end:
; predecessors: %bb.1

  RET 0, debug-location !1164; cg.c:838:1

# End machine code for function sprnvc.

********** MI Scheduling **********
sprnvc:%bb.0 entry
  From: %4:gr64 = COPY $r8
    To: End RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
GR16=10
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH 
Live Out: %22 
Live Thru: 
  LiveReg: %22
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
GR16=7
Bottom Pressure:
GR16=2
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %4:gr64 = COPY $r8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%4
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR32temp+GR64_TC 1    GR8+GR32temp 1    GR16 -1
  Single Issue       : false;
SU(1):   %3:gr64 = COPY $rcx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%3
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR32temp 2
  Single Issue       : false;
SU(2):   %2:gr32 = COPY $edx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%2
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR32temp 2    GR32temp+GR32_DIBP 2
  Single Issue       : false;
SU(3):   %1:gr32 = COPY $esi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1
  Single Issue       : false;
SU(4):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Data Latency=0 Reg=%0
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.2.nn1.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.nn1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV64mr %stack.3.v.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.v.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV64mr %stack.4.iv.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.iv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mi %stack.5.nzv, 1, $noreg, 0, $noreg, 0, debug-location !1104 :: (store 4 into %ir.nzv); cg.c:809:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %22:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 9 8 7 6 5 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %22:gr32 = MOV32ri 1
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 10 9 8 7 6 
  Cand SU(5) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mi %stack.5.nzv, 1, $noreg, 0, $noreg, 0, debug-location !1104 :: (store 4 into %ir.nzv); cg.c:809:9
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 9 8 7 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mr %stack.4.iv.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.iv.addr)
Bottom Pressure:
GR16=2
  LiveReg: %4
  UpdateRegP: SU(9) MOV64mr %stack.4.iv.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.iv.addr)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 8 0 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV64mr %stack.3.v.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.v.addr)
Bottom Pressure:
GR16=4
  LiveReg: %3
  UpdateRegP: SU(8) MOV64mr %stack.3.v.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.v.addr)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 0 1 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV32mr %stack.2.nn1.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.nn1.addr)
Bottom Pressure:
GR16=6
  LiveReg: %2
  UpdateRegP: SU(7) MOV32mr %stack.2.nn1.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.nn1.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 1 0 2 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
Bottom Pressure:
GR16=8
  LiveReg: %1
  UpdateRegP: SU(6) MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 1 0 3 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
Bottom Pressure:
GR16=10
  LiveReg: %0
  UpdateRegP: SU(5) MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %0:gr32 = COPY $edi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
GR16=9
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %1:gr32 = COPY $esi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=8
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %2:gr32 = COPY $edx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
GR16=8
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %3:gr64 = COPY $rcx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
GR16=8
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %4:gr64 = COPY $r8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
GR16=7
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %4:gr64 = COPY $r8
SU(1):   %3:gr64 = COPY $rcx
SU(2):   %2:gr32 = COPY $edx
SU(3):   %1:gr32 = COPY $esi
SU(4):   %0:gr32 = COPY $edi
SU(5):   MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
SU(6):   MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
SU(7):   MOV32mr %stack.2.nn1.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.nn1.addr)
SU(8):   MOV64mr %stack.3.v.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.v.addr)
SU(9):   MOV64mr %stack.4.iv.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.iv.addr)
SU(10):   MOV32mi %stack.5.nzv, 1, $noreg, 0, $noreg, 0, debug-location !1104 :: (store 4 into %ir.nzv); cg.c:809:9
SU(11):   %22:gr32 = MOV32ri 1

********** MI Scheduling **********
sprnvc:%bb.1 while.cond
  From: %5:gr32 = MOV32rm %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
    To: JCC_1 %bb.10, 13, implicit killed $eflags, debug-location !1105; cg.c:811:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %5:gr32 = MOV32rm %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%5
  Single Issue       : false;
SU(1):   CMP32rm %5:gr32, %stack.1.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1108 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%5
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.10, 13, implicit killed $eflags, debug-location !1105; cg.c:811:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %5:gr32, %stack.1.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1108 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:16
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:gr32 = MOV32rm %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %5:gr32 = MOV32rm %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
SU(1):   CMP32rm %5:gr32, %stack.1.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1108 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:16

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: %14:gr32 = COPY killed $eax, debug-location !1118; cg.c:818:13
    To: JCC_1 %bb.1, 15, implicit killed $eflags, debug-location !1125; cg.c:819:13
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %14:gr32 = COPY killed $eax, debug-location !1118; cg.c:818:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=0 Reg=%14
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %14:gr32 = nsw INC32r %14:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1119; cg.c:818:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(0): Data Latency=0 Reg=%14
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%14
    SU(2): Data Latency=1 Reg=%14
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   MOV32mr %stack.7.i, 1, $noreg, 0, $noreg, %14:gr32, debug-location !1120 :: (store 4 into %ir.i); cg.c:818:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%14
  Single Issue       : false;
SU(3):   CMP32rm %14:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1124 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%14
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.1, 15, implicit killed $eflags, debug-location !1125; cg.c:819:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) CMP32rm %14:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1124 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:15
  Ready @4c
  BotQ.A TopLatency SU(3) 1c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.7.i, 1, $noreg, 0, $noreg, %14:gr32, debug-location !1120 :: (store 4 into %ir.i); cg.c:818:11
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %14:gr32 = nsw INC32r %14:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1119; cg.c:818:33
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %14:gr32 = COPY killed $eax, debug-location !1118; cg.c:818:13
  Ready @5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %14:gr32 = COPY killed $eax, debug-location !1118; cg.c:818:13
SU(1):   %14:gr32 = nsw INC32r %14:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1119; cg.c:818:33
SU(2):   MOV32mr %stack.7.i, 1, $noreg, 0, $noreg, %14:gr32, debug-location !1120 :: (store 4 into %ir.i); cg.c:818:11
SU(3):   CMP32rm %14:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1124 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:15

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: $xmm0 = COPY %11:fr64, debug-location !1118; cg.c:818:13
    To: CALL64pcrel32 @icnvrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !1118; cg.c:818:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $xmm0 = COPY %11:fr64, debug-location !1118; cg.c:818:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $edi = COPY %12:gr32, debug-location !1118; cg.c:818:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @icnvrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !1118; cg.c:818:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $edi = COPY %12:gr32, debug-location !1118; cg.c:818:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $xmm0 = COPY %11:fr64, debug-location !1118; cg.c:818:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $xmm0 = COPY %11:fr64, debug-location !1118; cg.c:818:13
SU(1):   $edi = COPY %12:gr32, debug-location !1118; cg.c:818:13

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: %11:fr64 = COPY killed $xmm0, debug-location !1114; cg.c:817:18
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1118; cg.c:818:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %11:fr64 = COPY killed $xmm0, debug-location !1114; cg.c:817:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%11
  Single Issue       : false;
SU(1):   MOVSDmr %stack.9.vecloc, 1, $noreg, 0, $noreg, %11:fr64, debug-location !1115 :: (store 8 into %ir.vecloc); cg.c:817:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%11
  Single Issue       : false;
SU(2):   %12:gr32 = MOV32rm %stack.2.nn1.addr, 1, $noreg, 0, $noreg, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1118; cg.c:818:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %12:gr32 = MOV32rm %stack.2.nn1.addr, 1, $noreg, 0, $noreg, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.9.vecloc, 1, $noreg, 0, $noreg, %11:fr64, debug-location !1115 :: (store 8 into %ir.vecloc); cg.c:817:16
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %11:fr64 = COPY killed $xmm0, debug-location !1114; cg.c:817:18
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %11:fr64 = COPY killed $xmm0, debug-location !1114; cg.c:817:18
SU(1):   MOVSDmr %stack.9.vecloc, 1, $noreg, 0, $noreg, %11:fr64, debug-location !1115 :: (store 8 into %ir.vecloc); cg.c:817:16
SU(2):   %12:gr32 = MOV32rm %stack.2.nn1.addr, 1, $noreg, 0, $noreg, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !1114; cg.c:817:18
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1114; cg.c:817:18
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !1114; cg.c:817:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %10:fr64, debug-location !1114; cg.c:817:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1114; cg.c:817:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %10:fr64, debug-location !1114; cg.c:817:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !1114; cg.c:817:18
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !1114; cg.c:817:18
SU(1):   $xmm0 = COPY %10:fr64, debug-location !1114; cg.c:817:18

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: %9:fr64 = COPY killed $xmm0, debug-location !1111; cg.c:812:18
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1114; cg.c:817:18
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %9:fr64 = COPY killed $xmm0, debug-location !1111; cg.c:812:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%9
  Single Issue       : false;
SU(1):   MOVSDmr %stack.8.vecelt, 1, $noreg, 0, $noreg, %9:fr64, debug-location !1112 :: (store 8 into %ir.vecelt); cg.c:812:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%9
  Single Issue       : false;
SU(2):   %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, @amult, $noreg, debug-location !1113 :: (dereferenceable load 8 from @amult); cg.c:817:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1114; cg.c:817:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, @amult, $noreg, debug-location !1113 :: (dereferenceable load 8 from @amult); cg.c:817:32
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.8.vecelt, 1, $noreg, 0, $noreg, %9:fr64, debug-location !1112 :: (store 8 into %ir.vecelt); cg.c:812:16
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:fr64 = COPY killed $xmm0, debug-location !1111; cg.c:812:18
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %9:fr64 = COPY killed $xmm0, debug-location !1111; cg.c:812:18
SU(1):   MOVSDmr %stack.8.vecelt, 1, $noreg, 0, $noreg, %9:fr64, debug-location !1112 :: (store 8 into %ir.vecelt); cg.c:812:16
SU(2):   %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, @amult, $noreg, debug-location !1113 :: (dereferenceable load 8 from @amult); cg.c:817:32

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !1111; cg.c:812:18
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1111; cg.c:812:18
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !1111; cg.c:812:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %7:fr64, debug-location !1111; cg.c:812:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1111; cg.c:812:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %7:fr64, debug-location !1111; cg.c:812:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !1111; cg.c:812:18
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !1111; cg.c:812:18
SU(1):   $xmm0 = COPY %7:fr64, debug-location !1111; cg.c:812:18

********** MI Scheduling **********
sprnvc:%bb.3 if.end
  From: MOV32mi %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.6.ii, 1, $noreg, 0, $noreg, 0, debug-location !1128 :: (store 4 into %ir.ii); cg.c:826:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.6.ii, 1, $noreg, 0, $noreg, 0, debug-location !1128 :: (store 4 into %ir.ii); cg.c:826:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   MOV32mi %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
SU(1):   MOV32mi %stack.6.ii, 1, $noreg, 0, $noreg, 0, debug-location !1128 :: (store 4 into %ir.ii); cg.c:826:17

********** MI Scheduling **********
sprnvc:%bb.4 for.cond
  From: %16:gr32 = MOV32rm %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1131 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
    To: JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1135; cg.c:826:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %16:gr32 = MOV32rm %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1131 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%16
  Single Issue       : false;
SU(1):   CMP32rm %16:gr32, %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1134 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1135; cg.c:826:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %16:gr32, %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1134 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:25
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %16:gr32 = MOV32rm %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1131 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %16:gr32 = MOV32rm %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1131 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
SU(1):   CMP32rm %16:gr32, %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1134 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:25

********** MI Scheduling **********
sprnvc:%bb.5 for.body
  From: %18:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
    To: JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !1142; cg.c:827:17
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %18:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%18
  Single Issue       : false;
SU(1):   %19:gr64_nosp = MOVSX64rm32 %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1139 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%19
  Single Issue       : false;
SU(2):   %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1136 :: (load 4 from %ir.arrayidx); cg.c:827:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%19
    SU(0): Data Latency=4 Reg=%18
  Successors:
    SU(3): Data Latency=4 Reg=%20
  Single Issue       : false;
SU(3):   CMP32rm %20:gr32, %stack.7.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1141 :: (dereferenceable load 4 from %ir.i); cg.c:827:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%20
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !1142; cg.c:827:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %20:gr32, %stack.7.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1141 :: (dereferenceable load 4 from %ir.i); cg.c:827:24
  Ready @4c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1136 :: (load 4 from %ir.arrayidx); cg.c:827:17
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %19:gr64_nosp = MOVSX64rm32 %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1139 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %18:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  Ready @12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %18:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
SU(1):   %19:gr64_nosp = MOVSX64rm32 %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1139 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
SU(2):   %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1136 :: (load 4 from %ir.arrayidx); cg.c:827:17
SU(3):   CMP32rm %20:gr32, %stack.7.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1141 :: (dereferenceable load 4 from %ir.i); cg.c:827:24

********** MI Scheduling **********
sprnvc:%bb.9 if.end9
  From: %23:fr64 = MOVSDrm_alt %stack.8.vecelt, 1, $noreg, 0, $noreg, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
    To: JMP_1 %bb.1, debug-location !1105; cg.c:811:5
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %23:fr64 = MOVSDrm_alt %stack.8.vecelt, 1, $noreg, 0, $noreg, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(3): Data Latency=4 Reg=%23
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %24:gr64 = MOV64rm %stack.3.v.addr, 1, $noreg, 0, $noreg, debug-location !1154 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(3): Data Latency=4 Reg=%24
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %25:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1155 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(3): Data Latency=4 Reg=%25
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOVSDmr %24:gr64, 8, %25:gr64_nosp, 0, $noreg, %23:fr64, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(2): Data Latency=4 Reg=%25
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%24
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%23
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(4):   %26:gr32 = MOV32rm %stack.7.i, 1, $noreg, 0, $noreg, debug-location !1157 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%26
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %27:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1158 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%27
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %28:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1159 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%28
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV32mr %27:gr64, 4, %28:gr64_nosp, 0, $noreg, %26:gr32, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  # preds left       : 10
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(6): Data Latency=4 Reg=%28
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%27
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=%26
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(8):   INC32m %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1163 :: (store 4 into %ir.nzv), (dereferenceable load 4 from %ir.nzv); cg.c:836:13
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1, debug-location !1105; cg.c:811:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) INC32m %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1163 :: (store 4 into %ir.nzv), (dereferenceable load 4 from %ir.nzv); cg.c:836:13
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(8) 9c
  BotQ.A BotLatency SU(8) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV32mr %27:gr64, 4, %28:gr64_nosp, 0, $noreg, %26:gr32, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
Bottom Pressure:
GR16=6
  LiveReg: %27
  UpdateRegP: SU(7) MOV32mr %27:gr64, 4, %28:gr64_nosp, 0, $noreg, %26:gr32, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
              to GR16 4
  LiveReg: %28
  UpdateRegP: SU(7) MOV32mr %27:gr64, 4, %28:gr64_nosp, 0, $noreg, %26:gr32, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
              to GR16 2
  LiveReg: %26
  UpdateRegP: SU(7) MOV32mr %27:gr64, 4, %28:gr64_nosp, 0, $noreg, %26:gr32, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %28:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1159 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
Bottom Pressure:
GR16=4
  Ready @7c
  BotQ.A BotLatency SU(6) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %27:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1158 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
Bottom Pressure:
GR16=2
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %26:gr32 = MOV32rm %stack.7.i, 1, $noreg, 0, $noreg, debug-location !1157 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
Bottom Pressure:

  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %24:gr64, 8, %25:gr64_nosp, 0, $noreg, %23:fr64, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %24
  UpdateRegP: SU(3) MOVSDmr %24:gr64, 8, %25:gr64_nosp, 0, $noreg, %23:fr64, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %25
  UpdateRegP: SU(3) MOVSDmr %24:gr64, 8, %25:gr64_nosp, 0, $noreg, %23:fr64, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
              to FR32 1    FR32X 1
  LiveReg: %23
  UpdateRegP: SU(3) MOVSDmr %24:gr64, 8, %25:gr64_nosp, 0, $noreg, %23:fr64, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
              to 
  Ready @8c
  BotQ.A BotLatency SU(3) 8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %25:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1155 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @12c
  BotQ.A BotLatency SU(2) 12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %24:gr64 = MOV64rm %stack.3.v.addr, 1, $noreg, 0, $noreg, debug-location !1154 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
Bottom Pressure:
FR32=1
FR32X=1
  Ready @12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %23:fr64 = MOVSDrm_alt %stack.8.vecelt, 1, $noreg, 0, $noreg, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
Bottom Pressure:

  Ready @12c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %23:fr64 = MOVSDrm_alt %stack.8.vecelt, 1, $noreg, 0, $noreg, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
SU(1):   %24:gr64 = MOV64rm %stack.3.v.addr, 1, $noreg, 0, $noreg, debug-location !1154 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
SU(2):   %25:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1155 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
SU(3):   MOVSDmr %24:gr64, 8, %25:gr64_nosp, 0, $noreg, %23:fr64, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
SU(4):   %26:gr32 = MOV32rm %stack.7.i, 1, $noreg, 0, $noreg, debug-location !1157 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
SU(5):   %27:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1158 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
SU(6):   %28:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1159 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
SU(7):   MOV32mr %27:gr64, 4, %28:gr64_nosp, 0, $noreg, %26:gr32, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
SU(8):   INC32m %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1163 :: (store 4 into %ir.nzv), (dereferenceable load 4 from %ir.nzv); cg.c:836:13

********** INTERVALS **********
CH [0B,32r:0)  0@0B-phi
CL [0B,32r:0)  0@0B-phi
DH [0B,48r:0)  0@0B-phi
DIL [0B,80r:0)[352r,384r:3)[528r,560r:2)[720r,736r:1)  0@0B-phi 1@720r 2@528r 3@352r
DIH [0B,80r:0)[352r,384r:3)[528r,560r:2)[720r,736r:1)  0@0B-phi 1@720r 2@528r 3@352r
DL [0B,48r:0)  0@0B-phi
HCX [0B,32r:0)  0@0B-phi
HDI [0B,80r:0)[352r,384r:3)[528r,560r:2)[720r,736r:1)  0@0B-phi 1@720r 2@528r 3@352r
HDX [0B,48r:0)  0@0B-phi
SIL [0B,64r:0)  0@0B-phi
SIH [0B,64r:0)  0@0B-phi
HSI [0B,64r:0)  0@0B-phi
R8B [0B,16r:0)  0@0B-phi
R8BH [0B,16r:0)  0@0B-phi
R8WH [0B,16r:0)  0@0B-phi
%0 [80r,96r:0)  0@80r weight:0.000000e+00
%1 [64r,112r:0)  0@64r weight:0.000000e+00
%2 [48r,128r:0)  0@48r weight:0.000000e+00
%3 [32r,144r:0)  0@32r weight:0.000000e+00
%4 [16r,160r:0)  0@16r weight:0.000000e+00
%5 [240r,256r:0)  0@240r weight:0.000000e+00
%7 [320r,432r:0)  0@320r weight:0.000000e+00
%9 [464r,480r:0)  0@464r weight:0.000000e+00
%10 [496r,608r:0)  0@496r weight:0.000000e+00
%11 [640r,784r:0)  0@640r weight:0.000000e+00
%12 [672r,784r:0)  0@672r weight:0.000000e+00
%14 [816r,848r:0)[848r,880r:1)  0@816r 1@848r weight:0.000000e+00
%16 [992r,1008r:0)  0@992r weight:0.000000e+00
%18 [1072r,1104r:0)  0@1072r weight:0.000000e+00
%19 [1088r,1104r:0)  0@1088r weight:0.000000e+00
%20 [1104r,1120r:0)  0@1104r weight:0.000000e+00
%22 [208r,1504B:0)  0@208r weight:0.000000e+00
%23 [1344r,1392r:0)  0@1344r weight:0.000000e+00
%24 [1360r,1392r:0)  0@1360r weight:0.000000e+00
%25 [1376r,1392r:0)  0@1376r weight:0.000000e+00
%26 [1408r,1456r:0)  0@1408r weight:0.000000e+00
%27 [1424r,1456r:0)  0@1424r weight:0.000000e+00
%28 [1440r,1456r:0)  0@1440r weight:0.000000e+00
RegMasks: 384r 560r 736r
********** MACHINEINSTRS **********
# Machine code for function sprnvc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1, $edx in %2, $rcx in %3, $r8 in %4

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi, $edx, $rcx, $r8
16B	  %4:gr64 = COPY $r8
32B	  %3:gr64 = COPY $rcx
48B	  %2:gr32 = COPY $edx
64B	  %1:gr32 = COPY $esi
80B	  %0:gr32 = COPY $edi
96B	  MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
112B	  MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
128B	  MOV32mr %stack.2.nn1.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.nn1.addr)
144B	  MOV64mr %stack.3.v.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.v.addr)
160B	  MOV64mr %stack.4.iv.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.iv.addr)
176B	  MOV32mi %stack.5.nzv, 1, $noreg, 0, $noreg, 0, debug-location !1104 :: (store 4 into %ir.nzv); cg.c:809:9
208B	  %22:gr32 = MOV32ri 1

224B	bb.1.while.cond:
	; predecessors: %bb.0, %bb.2, %bb.8, %bb.9
	  successors: %bb.2(0x7c000000), %bb.10(0x04000000); %bb.2(96.88%), %bb.10(3.12%)

240B	  %5:gr32 = MOV32rm %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
256B	  CMP32rm %5:gr32, %stack.1.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1108 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:16
272B	  JCC_1 %bb.10, 13, implicit killed $eflags, debug-location !1105; cg.c:811:5
288B	  JMP_1 %bb.2, debug-location !1105; cg.c:811:5

304B	bb.2.while.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

320B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, @amult, $noreg, debug-location !1109 :: (dereferenceable load 8 from @amult); cg.c:812:32
336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1111; cg.c:812:18
352B	  $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !1111; cg.c:812:18
368B	  $xmm0 = COPY %7:fr64, debug-location !1111; cg.c:812:18
384B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1111; cg.c:812:18
400B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1111; cg.c:812:18
416B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1112; cg.c:812:16
432B	  PCN_STACKMAP 0, 0, 0, %stack.7.i, 0, 0, %stack.6.ii, 0, 0, %stack.4.iv.addr, 0, 0, %stack.0.n.addr, 0, 0, %stack.2.nn1.addr, 0, 0, %stack.1.nz.addr, 0, 0, %stack.5.nzv, 0, 0, %stack.3.v.addr, 0, 0, %stack.8.vecelt, 0, 0, %stack.9.vecloc, 0, 0, %stack.10.was_gen, 0, %7:fr64, implicit-def dead early-clobber $r11, debug-location !1112 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4); cg.c:812:16
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1112; cg.c:812:16
464B	  %9:fr64 = COPY killed $xmm0, debug-location !1111; cg.c:812:18
480B	  MOVSDmr %stack.8.vecelt, 1, $noreg, 0, $noreg, %9:fr64, debug-location !1112 :: (store 8 into %ir.vecelt); cg.c:812:16
496B	  %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, @amult, $noreg, debug-location !1113 :: (dereferenceable load 8 from @amult); cg.c:817:32
512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1114; cg.c:817:18
528B	  $rdi = LEA64r $rip, 1, $noreg, @tran, $noreg, debug-location !1114; cg.c:817:18
544B	  $xmm0 = COPY %10:fr64, debug-location !1114; cg.c:817:18
560B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1114; cg.c:817:18
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1114; cg.c:817:18
592B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1115; cg.c:817:16
608B	  PCN_STACKMAP 1, 0, 0, %stack.7.i, 0, 0, %stack.6.ii, 0, 0, %stack.4.iv.addr, 0, 0, %stack.0.n.addr, 0, 0, %stack.2.nn1.addr, 0, 0, %stack.1.nz.addr, 0, 0, %stack.5.nzv, 0, 0, %stack.3.v.addr, 0, 0, %stack.8.vecelt, 0, 0, %stack.9.vecloc, 0, 0, %stack.10.was_gen, 0, %10:fr64, implicit-def dead early-clobber $r11, debug-location !1115 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4); cg.c:817:16
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1115; cg.c:817:16
640B	  %11:fr64 = COPY killed $xmm0, debug-location !1114; cg.c:817:18
656B	  MOVSDmr %stack.9.vecloc, 1, $noreg, 0, $noreg, %11:fr64, debug-location !1115 :: (store 8 into %ir.vecloc); cg.c:817:16
672B	  %12:gr32 = MOV32rm %stack.2.nn1.addr, 1, $noreg, 0, $noreg, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
688B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1118; cg.c:818:13
704B	  $xmm0 = COPY %11:fr64, debug-location !1118; cg.c:818:13
720B	  $edi = COPY %12:gr32, debug-location !1118; cg.c:818:13
736B	  CALL64pcrel32 @icnvrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !1118; cg.c:818:13
752B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1118; cg.c:818:13
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1119; cg.c:818:33
784B	  PCN_STACKMAP 2, 0, 0, %stack.7.i, 0, 0, %stack.6.ii, 0, 0, %stack.4.iv.addr, 0, 0, %stack.0.n.addr, 0, 0, %stack.2.nn1.addr, 0, 0, %stack.1.nz.addr, 0, 0, %stack.5.nzv, 0, 0, %stack.3.v.addr, 0, 0, %stack.8.vecelt, 0, 0, %stack.9.vecloc, 0, 0, %stack.10.was_gen, 0, %11:fr64, %12:gr32, implicit-def dead early-clobber $r11, debug-location !1119 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4); cg.c:818:33
800B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1119; cg.c:818:33
816B	  %14:gr32 = COPY killed $eax, debug-location !1118; cg.c:818:13
848B	  %14:gr32 = nsw INC32r %14:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1119; cg.c:818:33
864B	  MOV32mr %stack.7.i, 1, $noreg, 0, $noreg, %14:gr32, debug-location !1120 :: (store 4 into %ir.i); cg.c:818:11
880B	  CMP32rm %14:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1124 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:15
896B	  JCC_1 %bb.1, 15, implicit killed $eflags, debug-location !1125; cg.c:819:13
912B	  JMP_1 %bb.3, debug-location !1125; cg.c:819:13

928B	bb.3.if.end:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

944B	  MOV32mi %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
960B	  MOV32mi %stack.6.ii, 1, $noreg, 0, $noreg, 0, debug-location !1128 :: (store 4 into %ir.ii); cg.c:826:17

976B	bb.4.for.cond:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

992B	  %16:gr32 = MOV32rm %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1131 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
1008B	  CMP32rm %16:gr32, %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1134 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:25
1024B	  JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1135; cg.c:826:9
1040B	  JMP_1 %bb.5, debug-location !1135; cg.c:826:9

1056B	bb.5.for.body:
	; predecessors: %bb.4
	  successors: %bb.6(0x04000000), %bb.7(0x7c000000); %bb.6(3.12%), %bb.7(96.88%)

1072B	  %18:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
1088B	  %19:gr64_nosp = MOVSX64rm32 %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1139 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
1104B	  %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1136 :: (load 4 from %ir.arrayidx); cg.c:827:17
1120B	  CMP32rm %20:gr32, %stack.7.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1141 :: (dereferenceable load 4 from %ir.i); cg.c:827:24
1136B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !1142; cg.c:827:17
1152B	  JMP_1 %bb.6, debug-location !1142; cg.c:827:17

1168B	bb.6.if.then6:
	; predecessors: %bb.5
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

1184B	  MOV32mr %stack.10.was_gen, 1, $noreg, 0, $noreg, %22:gr32, debug-location !1143 :: (store 4 into %ir.was_gen); cg.c:828:25
1200B	  JMP_1 %bb.8, debug-location !1145; cg.c:829:17

1216B	bb.7.if.end7:
	; predecessors: %bb.5
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

1232B	  INC32m %stack.6.ii, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1146 :: (store 4 into %ir.ii), (dereferenceable load 4 from %ir.ii); cg.c:826:34
1248B	  JMP_1 %bb.4, debug-location !1147; cg.c:826:9

1264B	bb.8.for.end:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.1(0x40000000), %bb.9(0x40000000); %bb.1(50.00%), %bb.9(50.00%)

1280B	  CMP32mi8 %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1150 :: (dereferenceable load 4 from %ir.was_gen); cg.c:832:13
1296B	  JCC_1 %bb.1, 5, implicit killed $eflags, debug-location !1152; cg.c:832:13
1312B	  JMP_1 %bb.9, debug-location !1152; cg.c:832:13

1328B	bb.9.if.end9:
	; predecessors: %bb.8
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

1344B	  %23:fr64 = MOVSDrm_alt %stack.8.vecelt, 1, $noreg, 0, $noreg, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
1360B	  %24:gr64 = MOV64rm %stack.3.v.addr, 1, $noreg, 0, $noreg, debug-location !1154 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
1376B	  %25:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1155 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
1392B	  MOVSDmr %24:gr64, 8, %25:gr64_nosp, 0, $noreg, %23:fr64, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
1408B	  %26:gr32 = MOV32rm %stack.7.i, 1, $noreg, 0, $noreg, debug-location !1157 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
1424B	  %27:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1158 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
1440B	  %28:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1159 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
1456B	  MOV32mr %27:gr64, 4, %28:gr64_nosp, 0, $noreg, %26:gr32, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
1472B	  INC32m %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1163 :: (store 4 into %ir.nzv), (dereferenceable load 4 from %ir.nzv); cg.c:836:13
1488B	  JMP_1 %bb.1, debug-location !1105; cg.c:811:5

1504B	bb.10.while.end:
	; predecessors: %bb.1

1520B	  RET 0, debug-location !1164; cg.c:838:1

# End machine code for function sprnvc.

Before MISched:
# Machine code for function vecset: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $rsi in %1, $rdx in %2, $rcx in %3, $r8d in %4, $xmm0 in %5

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $rsi, $rdx, $rcx, $r8d, $xmm0
  %5:fr64 = COPY $xmm0
  %4:gr32 = COPY $r8d
  %3:gr64 = COPY $rcx
  %2:gr64 = COPY $rdx
  %1:gr64 = COPY $rsi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
  MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
  MOV64mr %stack.2.iv.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.iv.addr)
  MOV64mr %stack.3.nzv.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.nzv.addr)
  MOV32mr %stack.4.i.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.i.addr)
  MOVSDmr %stack.5.val.addr, 1, $noreg, 0, $noreg, %5:fr64 :: (store 8 into %ir.val.addr)
  MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 0, debug-location !1184 :: (store 4 into %ir.set); cg.c:854:9
  MOV32mi %stack.6.k, 1, $noreg, 0, $noreg, 0, debug-location !1185 :: (store 4 into %ir.k); cg.c:855:12
  %25:gr32 = MOV32ri 1

bb.1.for.cond:
; predecessors: %bb.0, %bb.4
  successors: %bb.2(0x7c000000), %bb.5(0x04000000); %bb.2(96.88%), %bb.5(3.12%)

  %6:gr32 = MOV32rm %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  %7:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  CMP32rm %6:gr32, %7:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1192 :: (load 4 from %ir.1); cg.c:855:19
  JCC_1 %bb.5, 13, implicit killed $eflags, debug-location !1193; cg.c:855:5
  JMP_1 %bb.2, debug-location !1193; cg.c:855:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

  %18:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  %19:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1197 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1194 :: (load 4 from %ir.arrayidx); cg.c:856:13
  CMP32rm %20:gr32, %stack.4.i.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1199 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:19
  JCC_1 %bb.4, 5, implicit killed $eflags, debug-location !1200; cg.c:856:13
  JMP_1 %bb.3, debug-location !1200; cg.c:856:13

bb.3.if.then:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %22:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  %23:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1203 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  %24:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1204 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1205 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  MOV32mr %stack.7.set, 1, $noreg, 0, $noreg, %25:gr32, debug-location !1206 :: (store 4 into %ir.set); cg.c:858:17

bb.4.if.end:
; predecessors: %bb.2, %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  INC32m %stack.6.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1208 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:855:28
  JMP_1 %bb.1, debug-location !1209; cg.c:855:5

bb.5.for.end:
; predecessors: %bb.1
  successors: %bb.6(0x30000000), %bb.7(0x50000000); %bb.6(37.50%), %bb.7(62.50%)

  CMP32mi8 %stack.7.set, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1214 :: (dereferenceable load 4 from %ir.set); cg.c:861:13
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !1215; cg.c:861:9
  JMP_1 %bb.6, debug-location !1215; cg.c:861:9

bb.6.if.then5:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %9:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  %10:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1218 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  %11:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
  %12:gr64_nosp = MOVSX64rm32 %11:gr64, 1, $noreg, 0, $noreg, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
  MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  %13:gr32 = MOV32rm %stack.4.i.addr, 1, $noreg, 0, $noreg, debug-location !1222 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  %14:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1223 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
  %15:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  %16:gr64_nosp = MOVSX64rm32 %15:gr64, 1, $noreg, 0, $noreg, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
  MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  %17:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1227 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  INC32m %17:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1231 :: (store 4 into %ir.22), (load 4 from %ir.20); cg.c:864:14

bb.7.if.end10:
; predecessors: %bb.5, %bb.6

  RET 0, debug-location !1233; cg.c:866:1

# End machine code for function vecset.

********** MI Scheduling **********
vecset:%bb.0 entry
  From: %5:fr64 = COPY $xmm0
    To: End RegionInstrs: 15
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=1
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
FR32X=1
GR16=10
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH XMM0 
Live Out: %25 
Live Thru: 
  LiveReg: %25
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=1
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
FR32X=1
GR16=7
Bottom Pressure:
GR16=2
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:fr64 = COPY $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%5
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %4:gr32 = COPY $r8d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%4
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR32temp+GR64_TC 1    GR8+GR32temp 1    GR16 -1
  Single Issue       : false;
SU(2):   %3:gr64 = COPY $rcx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%3
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR32temp 2
  Single Issue       : false;
SU(3):   %2:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%2
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR32temp 2    GR32temp+GR32_DIBP 2
  Single Issue       : false;
SU(4):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1
  Single Issue       : false;
SU(5):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%0
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(6):   MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV64mr %stack.2.iv.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.iv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV64mr %stack.3.nzv.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.nzv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mr %stack.4.i.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.i.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOVSDmr %stack.5.val.addr, 1, $noreg, 0, $noreg, %5:fr64 :: (store 8 into %ir.val.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(12):   MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 0, debug-location !1184 :: (store 4 into %ir.set); cg.c:854:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   MOV32mi %stack.6.k, 1, $noreg, 0, $noreg, 0, debug-location !1185 :: (store 4 into %ir.k); cg.c:855:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %25:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %25:gr32 = MOV32ri 1
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 13 12 11 10 9 8 7 
  Cand SU(6) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV32mi %stack.6.k, 1, $noreg, 0, $noreg, 0, debug-location !1185 :: (store 4 into %ir.k); cg.c:855:12
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 12 11 10 9 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 0, debug-location !1184 :: (store 4 into %ir.set); cg.c:854:9
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 11 10 9 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOVSDmr %stack.5.val.addr, 1, $noreg, 0, $noreg, %5:fr64 :: (store 8 into %ir.val.addr)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %5
  UpdateRegP: SU(11) MOVSDmr %stack.5.val.addr, 1, $noreg, 0, $noreg, %5:fr64 :: (store 8 into %ir.val.addr)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 10 0 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV32mr %stack.4.i.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.i.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %4
  UpdateRegP: SU(10) MOV32mr %stack.4.i.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.i.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 0 1 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV64mr %stack.3.nzv.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.nzv.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %3
  UpdateRegP: SU(9) MOV64mr %stack.3.nzv.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.nzv.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 1 0 2 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV64mr %stack.2.iv.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.iv.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %2
  UpdateRegP: SU(8) MOV64mr %stack.2.iv.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.iv.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 2 1 0 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %1
  UpdateRegP: SU(7) MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 2 1 0 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %0
  UpdateRegP: SU(6) MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %0:gr32 = COPY $edi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
FR32X=1
GR16=9
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %1:gr64 = COPY $rsi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=1
GR16=8
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %2:gr64 = COPY $rdx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=1
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
FR32X=1
GR16=8
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %3:gr64 = COPY $rcx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=1
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
FR32X=1
GR16=8
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %4:gr32 = COPY $r8d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=1
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
FR32X=1
GR16=7
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:fr64 = COPY $xmm0
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=1
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
FR32X=1
GR16=7
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:fr64 = COPY $xmm0
SU(1):   %4:gr32 = COPY $r8d
SU(2):   %3:gr64 = COPY $rcx
SU(3):   %2:gr64 = COPY $rdx
SU(4):   %1:gr64 = COPY $rsi
SU(5):   %0:gr32 = COPY $edi
SU(6):   MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
SU(7):   MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
SU(8):   MOV64mr %stack.2.iv.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.iv.addr)
SU(9):   MOV64mr %stack.3.nzv.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.nzv.addr)
SU(10):   MOV32mr %stack.4.i.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.i.addr)
SU(11):   MOVSDmr %stack.5.val.addr, 1, $noreg, 0, $noreg, %5:fr64 :: (store 8 into %ir.val.addr)
SU(12):   MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 0, debug-location !1184 :: (store 4 into %ir.set); cg.c:854:9
SU(13):   MOV32mi %stack.6.k, 1, $noreg, 0, $noreg, 0, debug-location !1185 :: (store 4 into %ir.k); cg.c:855:12
SU(14):   %25:gr32 = MOV32ri 1

********** MI Scheduling **********
vecset:%bb.1 for.cond
  From: %6:gr32 = MOV32rm %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
    To: JCC_1 %bb.5, 13, implicit killed $eflags, debug-location !1193; cg.c:855:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %6:gr32 = MOV32rm %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%6
  Single Issue       : false;
SU(1):   %7:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%7
  Single Issue       : false;
SU(2):   CMP32rm %6:gr32, %7:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1192 :: (load 4 from %ir.1); cg.c:855:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%7
    SU(0): Data Latency=4 Reg=%6
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.5, 13, implicit killed $eflags, debug-location !1193; cg.c:855:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32rm %6:gr32, %7:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1192 :: (load 4 from %ir.1); cg.c:855:19
  Ready @4c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %7:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %6:gr32 = MOV32rm %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %6:gr32 = MOV32rm %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
SU(1):   %7:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
SU(2):   CMP32rm %6:gr32, %7:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1192 :: (load 4 from %ir.1); cg.c:855:19

********** MI Scheduling **********
vecset:%bb.2 for.body
  From: %18:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
    To: JCC_1 %bb.4, 5, implicit killed $eflags, debug-location !1200; cg.c:856:13
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %18:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%18
  Single Issue       : false;
SU(1):   %19:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1197 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%19
  Single Issue       : false;
SU(2):   %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1194 :: (load 4 from %ir.arrayidx); cg.c:856:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%19
    SU(0): Data Latency=4 Reg=%18
  Successors:
    SU(3): Data Latency=4 Reg=%20
  Single Issue       : false;
SU(3):   CMP32rm %20:gr32, %stack.4.i.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1199 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%20
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.4, 5, implicit killed $eflags, debug-location !1200; cg.c:856:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %20:gr32, %stack.4.i.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1199 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:19
  Ready @4c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1194 :: (load 4 from %ir.arrayidx); cg.c:856:13
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %19:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1197 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %18:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  Ready @12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %18:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
SU(1):   %19:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1197 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
SU(2):   %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1194 :: (load 4 from %ir.arrayidx); cg.c:856:13
SU(3):   CMP32rm %20:gr32, %stack.4.i.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1199 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:19

********** MI Scheduling **********
vecset:%bb.3 if.then
  From: %22:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %22:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%22
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %23:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1203 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%23
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %24:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1204 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%24
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1205 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%24
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%23
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%22
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mr %stack.7.set, 1, $noreg, 0, $noreg, %25:gr32, debug-location !1206 :: (store 4 into %ir.set); cg.c:858:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.7.set, 1, $noreg, 0, $noreg, %25:gr32, debug-location !1206 :: (store 4 into %ir.set); cg.c:858:17
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1205 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %24:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1204 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %23:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1203 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %22:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %22:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
SU(1):   %23:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1203 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
SU(2):   %24:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1204 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
SU(3):   MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1205 :: (store 8 into %ir.arrayidx3); cg.c:857:18
SU(4):   MOV32mr %stack.7.set, 1, $noreg, 0, $noreg, %25:gr32, debug-location !1206 :: (store 4 into %ir.set); cg.c:858:17

********** MI Scheduling **********
vecset:%bb.6 if.then5
  From: %9:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
    To: End RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %9:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(4): Data Latency=4 Reg=%9
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %10:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1218 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(4): Data Latency=4 Reg=%10
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %11:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
    SU(3): Data Latency=4 Reg=%11
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %12:gr64_nosp = MOVSX64rm32 %11:gr64, 1, $noreg, 0, $noreg, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 21
  Predecessors:
    SU(2): Data Latency=4 Reg=%11
  Successors:
    SU(4): Data Latency=4 Reg=%12
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  # preds left       : 7
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 17
  Predecessors:
    SU(3): Data Latency=4 Reg=%12
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%10
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%9
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(10): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(5):   %13:gr32 = MOV32rm %stack.4.i.addr, 1, $noreg, 0, $noreg, debug-location !1222 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 12
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%13
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %14:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1223 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 12
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%14
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %15:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 16
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%15
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %16:gr64_nosp = MOVSX64rm32 %15:gr64, 1, $noreg, 0, $noreg, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 12
  Predecessors:
    SU(7): Data Latency=4 Reg=%15
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%16
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  # preds left       : 12
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 8
  Predecessors:
    SU(8): Data Latency=4 Reg=%16
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Data Latency=4 Reg=%14
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%13
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(10):   %17:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1227 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 7
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(11): Data Latency=4 Reg=%17
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   INC32m %17:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1231 :: (store 4 into %ir.22), (load 4 from %ir.20); cg.c:864:14
  # preds left       : 12
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 3
  Predecessors:
    SU(10): Data Latency=4 Reg=%17
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 2
  Single Issue       : false;
Critical Path(GS-RR ): 25
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) INC32m %17:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1231 :: (store 4 into %ir.22), (load 4 from %ir.20); cg.c:864:14
Bottom Pressure:
GR16=2
  LiveReg: %17
  UpdateRegP: SU(11) INC32m %17:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1231 :: (store 4 into %ir.22), (load 4 from %ir.20); cg.c:864:14
              to 
  Ready @3c
  BotQ.A TopLatency SU(11) 22c
  BotQ.A BotLatency SU(11) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %17:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1227 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
Bottom Pressure:

  Ready @7c
  BotQ.A BotLatency SU(10) 7c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
Bottom Pressure:
GR16=6
  LiveReg: %14
  UpdateRegP: SU(9) MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
              to GR16 4
  LiveReg: %16
  UpdateRegP: SU(9) MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
              to GR16 2
  LiveReg: %13
  UpdateRegP: SU(9) MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
              to 
  Ready @8c
  BotQ.A BotLatency SU(9) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 5 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %16:gr64_nosp = MOVSX64rm32 %15:gr64, 1, $noreg, 0, $noreg, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
Bottom Pressure:
GR16=6
  LiveReg: %15
  UpdateRegP: SU(8) %16:gr64_nosp = MOVSX64rm32 %15:gr64, 1, $noreg, 0, $noreg, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
              to GR16 -2
  Ready @12c
  BotQ.A BotLatency SU(8) 12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %15:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
Bottom Pressure:
GR16=4
  Ready @16c
  BotQ.A BotLatency SU(7) 16c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %14:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1223 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
Bottom Pressure:
GR16=2
  Ready @12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %13:gr32 = MOV32rm %stack.4.i.addr, 1, $noreg, 0, $noreg, debug-location !1222 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
Bottom Pressure:

  Ready @12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %10
  UpdateRegP: SU(4) MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %12
  UpdateRegP: SU(4) MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
              to FR32 1    FR32X 1
  LiveReg: %9
  UpdateRegP: SU(4) MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
              to 
  Ready @17c
  BotQ.A BotLatency SU(4) 17c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %12:gr64_nosp = MOVSX64rm32 %11:gr64, 1, $noreg, 0, $noreg, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %11
  UpdateRegP: SU(3) %12:gr64_nosp = MOVSX64rm32 %11:gr64, 1, $noreg, 0, $noreg, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
              to GR16 -2
  Ready @21c
  BotQ.A BotLatency SU(3) 21c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %11:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @25c
  BotQ.A BotLatency SU(2) 25c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %10:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1218 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
Bottom Pressure:
FR32=1
FR32X=1
  Ready @21c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
Bottom Pressure:

  Ready @21c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %9:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
SU(1):   %10:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1218 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
SU(2):   %11:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
SU(3):   %12:gr64_nosp = MOVSX64rm32 %11:gr64, 1, $noreg, 0, $noreg, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
SU(4):   MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
SU(5):   %13:gr32 = MOV32rm %stack.4.i.addr, 1, $noreg, 0, $noreg, debug-location !1222 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
SU(6):   %14:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1223 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
SU(7):   %15:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
SU(8):   %16:gr64_nosp = MOVSX64rm32 %15:gr64, 1, $noreg, 0, $noreg, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
SU(9):   MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
SU(10):   %17:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1227 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
SU(11):   INC32m %17:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1231 :: (store 4 into %ir.22), (load 4 from %ir.20); cg.c:864:14

********** INTERVALS **********
CH [0B,48r:0)  0@0B-phi
CL [0B,48r:0)  0@0B-phi
DH [0B,64r:0)  0@0B-phi
DIL [0B,96r:0)  0@0B-phi
DIH [0B,96r:0)  0@0B-phi
DL [0B,64r:0)  0@0B-phi
HCX [0B,48r:0)  0@0B-phi
HDI [0B,96r:0)  0@0B-phi
HDX [0B,64r:0)  0@0B-phi
SIL [0B,80r:0)  0@0B-phi
SIH [0B,80r:0)  0@0B-phi
HSI [0B,80r:0)  0@0B-phi
R8B [0B,32r:0)  0@0B-phi
R8BH [0B,32r:0)  0@0B-phi
R8WH [0B,32r:0)  0@0B-phi
XMM0 [0B,16r:0)  0@0B-phi
%0 [96r,112r:0)  0@96r weight:0.000000e+00
%1 [80r,128r:0)  0@80r weight:0.000000e+00
%2 [64r,144r:0)  0@64r weight:0.000000e+00
%3 [48r,160r:0)  0@48r weight:0.000000e+00
%4 [32r,176r:0)  0@32r weight:0.000000e+00
%5 [16r,192r:0)  0@16r weight:0.000000e+00
%6 [272r,304r:0)  0@272r weight:0.000000e+00
%7 [288r,304r:0)  0@288r weight:0.000000e+00
%9 [688r,752r:0)  0@688r weight:0.000000e+00
%10 [704r,752r:0)  0@704r weight:0.000000e+00
%11 [720r,736r:0)  0@720r weight:0.000000e+00
%12 [736r,752r:0)  0@736r weight:0.000000e+00
%13 [768r,832r:0)  0@768r weight:0.000000e+00
%14 [784r,832r:0)  0@784r weight:0.000000e+00
%15 [800r,816r:0)  0@800r weight:0.000000e+00
%16 [816r,832r:0)  0@816r weight:0.000000e+00
%17 [848r,864r:0)  0@848r weight:0.000000e+00
%18 [368r,400r:0)  0@368r weight:0.000000e+00
%19 [384r,400r:0)  0@384r weight:0.000000e+00
%20 [400r,416r:0)  0@400r weight:0.000000e+00
%22 [480r,528r:0)  0@480r weight:0.000000e+00
%23 [496r,528r:0)  0@496r weight:0.000000e+00
%24 [512r,528r:0)  0@512r weight:0.000000e+00
%25 [240r,608B:0)  0@240r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function vecset: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $rsi in %1, $rdx in %2, $rcx in %3, $r8d in %4, $xmm0 in %5

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $rsi, $rdx, $rcx, $r8d, $xmm0
16B	  %5:fr64 = COPY $xmm0
32B	  %4:gr32 = COPY $r8d
48B	  %3:gr64 = COPY $rcx
64B	  %2:gr64 = COPY $rdx
80B	  %1:gr64 = COPY $rsi
96B	  %0:gr32 = COPY $edi
112B	  MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
128B	  MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
144B	  MOV64mr %stack.2.iv.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.iv.addr)
160B	  MOV64mr %stack.3.nzv.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.nzv.addr)
176B	  MOV32mr %stack.4.i.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.i.addr)
192B	  MOVSDmr %stack.5.val.addr, 1, $noreg, 0, $noreg, %5:fr64 :: (store 8 into %ir.val.addr)
208B	  MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 0, debug-location !1184 :: (store 4 into %ir.set); cg.c:854:9
224B	  MOV32mi %stack.6.k, 1, $noreg, 0, $noreg, 0, debug-location !1185 :: (store 4 into %ir.k); cg.c:855:12
240B	  %25:gr32 = MOV32ri 1

256B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.4
	  successors: %bb.2(0x7c000000), %bb.5(0x04000000); %bb.2(96.88%), %bb.5(3.12%)

272B	  %6:gr32 = MOV32rm %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
288B	  %7:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
304B	  CMP32rm %6:gr32, %7:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1192 :: (load 4 from %ir.1); cg.c:855:19
320B	  JCC_1 %bb.5, 13, implicit killed $eflags, debug-location !1193; cg.c:855:5
336B	  JMP_1 %bb.2, debug-location !1193; cg.c:855:5

352B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

368B	  %18:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
384B	  %19:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1197 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
400B	  %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1194 :: (load 4 from %ir.arrayidx); cg.c:856:13
416B	  CMP32rm %20:gr32, %stack.4.i.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1199 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:19
432B	  JCC_1 %bb.4, 5, implicit killed $eflags, debug-location !1200; cg.c:856:13
448B	  JMP_1 %bb.3, debug-location !1200; cg.c:856:13

464B	bb.3.if.then:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

480B	  %22:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
496B	  %23:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1203 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
512B	  %24:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1204 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
528B	  MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1205 :: (store 8 into %ir.arrayidx3); cg.c:857:18
544B	  MOV32mr %stack.7.set, 1, $noreg, 0, $noreg, %25:gr32, debug-location !1206 :: (store 4 into %ir.set); cg.c:858:17

560B	bb.4.if.end:
	; predecessors: %bb.2, %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

576B	  INC32m %stack.6.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1208 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:855:28
592B	  JMP_1 %bb.1, debug-location !1209; cg.c:855:5

608B	bb.5.for.end:
	; predecessors: %bb.1
	  successors: %bb.6(0x30000000), %bb.7(0x50000000); %bb.6(37.50%), %bb.7(62.50%)

624B	  CMP32mi8 %stack.7.set, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1214 :: (dereferenceable load 4 from %ir.set); cg.c:861:13
640B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !1215; cg.c:861:9
656B	  JMP_1 %bb.6, debug-location !1215; cg.c:861:9

672B	bb.6.if.then5:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

688B	  %9:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
704B	  %10:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1218 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
720B	  %11:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
736B	  %12:gr64_nosp = MOVSX64rm32 %11:gr64, 1, $noreg, 0, $noreg, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
752B	  MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
768B	  %13:gr32 = MOV32rm %stack.4.i.addr, 1, $noreg, 0, $noreg, debug-location !1222 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
784B	  %14:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1223 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
800B	  %15:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
816B	  %16:gr64_nosp = MOVSX64rm32 %15:gr64, 1, $noreg, 0, $noreg, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
832B	  MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
848B	  %17:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1227 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
864B	  INC32m %17:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1231 :: (store 4 into %ir.22), (load 4 from %ir.20); cg.c:864:14

880B	bb.7.if.end10:
	; predecessors: %bb.5, %bb.6

896B	  RET 0, debug-location !1233; cg.c:866:1

# End machine code for function vecset.

Before MISched:
# Machine code for function sparse: NoPHIs, TracksLiveness
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP+48]
  fi#-5: size=4, align=16, fixed, at location [SP+40]
  fi#-4: size=4, align=8, fixed, at location [SP+32]
  fi#-3: size=8, align=16, fixed, at location [SP+24]
  fi#-2: size=8, align=8, fixed, at location [SP+16]
  fi#-1: size=8, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: size=8, align=8, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=4, align=4, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=4, align=4, at location [SP+8]
  fi#22: size=4, align=4, at location [SP+8]
  fi#23: size=4, align=4, at location [SP+8]
  fi#24: size=8, align=8, at location [SP+8]
  fi#25: size=8, align=8, at location [SP+8]
  fi#26: size=8, align=8, at location [SP+8]
  fi#27: size=8, align=8, at location [SP+8]
  fi#28: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
Function Live Ins: $rdi in %0, $rsi in %1, $rdx in %2, $ecx in %3, $r8d in %4, $r9d in %5, $xmm0 in %6, $xmm1 in %7

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $rdi, $rsi, $rdx, $ecx, $r8d, $r9d, $xmm0, $xmm1
  %7:fr64 = COPY $xmm1
  %6:fr64 = COPY $xmm0
  %5:gr32 = COPY $r9d
  %4:gr32 = COPY $r8d
  %3:gr32 = COPY $ecx
  %2:gr64 = COPY $rdx
  %1:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  MOV64mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.a.addr)
  MOV64mr %stack.1.colidx.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.colidx.addr)
  MOV64mr %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.rowstr.addr)
  MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n.addr)
  MOV32mr %stack.4.nz.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.nz.addr)
  MOV32mr %stack.5.nozer.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.nozer.addr)
  MOVSDmr %stack.12.rcond.addr, 1, $noreg, 0, $noreg, %6:fr64 :: (store 8 into %ir.rcond.addr)
  MOVSDmr %stack.13.shift.addr, 1, $noreg, 0, $noreg, %7:fr64 :: (store 8 into %ir.shift.addr)
  %10:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1295 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
  %10:gr32 = nsw SUB32rm %10:gr32(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1297 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:21
  %10:gr32 = nsw INC32r %10:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1298; cg.c:659:32
  MOV32mr %stack.14.nrows, 1, $noreg, 0, $noreg, %10:gr32, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1300 :: (store 4 into %ir.j); cg.c:664:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %13:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1306; cg.c:664:27
  CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !1307 :: (dereferenceable load 4 from %ir.j); cg.c:664:19
  JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !1308; cg.c:664:5
  JMP_1 %bb.2, debug-location !1308; cg.c:664:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %214:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  %215:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1311 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  MOV32mi %214:gr64, 4, %215:gr64_nosp, 0, $noreg, 0, debug-location !1312 :: (store 4 into %ir.arrayidx); cg.c:665:19
  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1313 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:664:33
  JMP_1 %bb.1, debug-location !1314; cg.c:664:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
  %204:gr64 = MOV32ri64 56

bb.4.for.cond2:
; predecessors: %bb.3, %bb.8
  successors: %bb.5(0x7c000000), %bb.9(0x04000000); %bb.5(96.88%), %bb.9(3.12%)

  %15:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  CMP32rm %15:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1323 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:19
  JCC_1 %bb.9, 13, implicit killed $eflags, debug-location !1324; cg.c:668:5
  JMP_1 %bb.5, debug-location !1324; cg.c:668:5

bb.5.for.body4:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  MOV32mi %stack.19.nza, 1, $noreg, 0, $noreg, 0, debug-location !1325 :: (store 4 into %ir.nza); cg.c:669:18

bb.6.for.cond5:
; predecessors: %bb.5, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  %199:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  %200:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
  %201:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1332 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  CMP32rm %199:gr32, %200:gr64, 4, %201:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1333 :: (load 4 from %ir.arrayidx7); cg.c:669:27
  JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1334; cg.c:669:9
  JMP_1 %bb.7, debug-location !1334; cg.c:669:9

bb.7.for.body9:
; predecessors: %bb.6
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %203:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
  %206:gr64_nosp = COPY %203:gr64_nosp, debug-location !1335; cg.c:670:17
  %206:gr64_nosp = IMUL64rr %206:gr64_nosp(tied-def 0), %204:gr64, implicit-def dead $eflags, debug-location !1335; cg.c:670:17
  %206:gr64_nosp = ADD64rm %206:gr64_nosp(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
  %207:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1338 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
  %216:gr64_nosp = MOVSX64rm32 %206:gr64_nosp, 4, %207:gr64_nosp, 0, $noreg, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
  %210:gr32 = LEA64_32r %216:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1339; cg.c:670:30
  MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %210:gr32, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
  %211:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1341 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
  %212:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1343 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
  %213:gr32 = MOV32rm %212:gr64, 4, %203:gr64_nosp, 0, $noreg, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
  ADD32mr %211:gr64, 4, %216:gr64_nosp, 4, $noreg, %213:gr32, implicit-def dead $eflags, debug-location !1348 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
  INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1349 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:669:41
  JMP_1 %bb.6, debug-location !1350; cg.c:669:9

bb.8.for.end24:
; predecessors: %bb.6
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  INC32m %stack.15.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1353 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:668:25
  JMP_1 %bb.4, debug-location !1354; cg.c:668:5

bb.9.for.end27:
; predecessors: %bb.4
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %17:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  MOV32mi %17:gr64, 1, $noreg, 0, $noreg, 0, debug-location !1358 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  %18:gr32 = MOV32ri 1
  MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %18:gr32, debug-location !1359 :: (store 4 into %ir.j); cg.c:676:12

bb.10.for.cond29:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

  %21:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  %21:gr32 = nsw INC32r %21:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1365; cg.c:676:27
  CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %21:gr32, implicit-def $eflags, debug-location !1366 :: (dereferenceable load 4 from %ir.j); cg.c:676:19
  JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !1367; cg.c:676:5
  JMP_1 %bb.11, debug-location !1367; cg.c:676:5

bb.11.for.body32:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %196:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
  %197:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1370 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  %198:gr32 = MOV32rm %196:gr64, 4, %197:gr64_nosp, -4, $noreg, debug-location !1371 :: (load 4 from %ir.arrayidx37); cg.c:677:33
  ADD32mr %196:gr64, 4, %197:gr64_nosp, 0, $noreg, %198:gr32, implicit-def dead $eflags, debug-location !1377 :: (store 4 into %ir.arrayidx40), (load 4 from %ir.arrayidx34); cg.c:677:19
  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1378 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:676:33
  JMP_1 %bb.10, debug-location !1379; cg.c:676:5

bb.12.for.end43:
; predecessors: %bb.10
  successors: %bb.13(0x40000000), %bb.14(0x40000000); %bb.13(50.00%), %bb.14(50.00%)

  %23:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
  %24:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1383 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  %26:gr32 = MOV32rm %23:gr64, 4, %24:gr64_nosp, 0, $noreg, debug-location !1382 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  %26:gr32 = DEC32r %26:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1384; cg.c:679:25
  MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %26:gr32, debug-location !1385 :: (store 4 into %ir.nza); cg.c:679:9
  CMP32rm %26:gr32, %stack.4.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1389 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:13
  JCC_1 %bb.14, 14, implicit killed $eflags, debug-location !1390; cg.c:685:9
  JMP_1 %bb.13, debug-location !1390; cg.c:685:9

bb.13.if.then:
; predecessors: %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1391; cg.c:686:9
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_37_Space_for_, $noreg, debug-location !1391; cg.c:686:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1391; cg.c:686:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1391; cg.c:686:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1391; cg.c:686:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1393; cg.c:687:41
  PCN_STACKMAP 0, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.4.nz.addr, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, implicit-def dead early-clobber $r11, debug-location !1393 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.4.nz.addr, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:687:41
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1393; cg.c:687:41
  %32:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  %33:gr32 = MOV32rm %stack.4.nz.addr, 1, $noreg, 0, $noreg, debug-location !1394 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1395; cg.c:687:9
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_38_nza__nzmax, $noreg, debug-location !1395; cg.c:687:9
  $esi = COPY %32:gr32, debug-location !1395; cg.c:687:9
  $edx = COPY %33:gr32, debug-location !1395; cg.c:687:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1395; cg.c:687:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1395; cg.c:687:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1395; cg.c:687:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1396; cg.c:689:5
  PCN_STACKMAP 1, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, %32:gr32, %33:gr32, implicit-def dead early-clobber $r11, debug-location !1396 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:689:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1396; cg.c:689:5

bb.14.if.end:
; predecessors: %bb.12, %bb.13
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
  %195:gr32 = MOV32ri -1

bb.15.for.cond49:
; predecessors: %bb.14, %bb.19
  successors: %bb.16(0x7c000000), %bb.20(0x04000000); %bb.16(96.88%), %bb.20(3.12%)

  %36:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  CMP32rm %36:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1403 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:19
  JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !1404; cg.c:694:5
  JMP_1 %bb.16, debug-location !1404; cg.c:694:5

bb.16.for.body51:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %182:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  %183:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1408 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  %184:gr32 = MOV32rm %182:gr64, 4, %183:gr64_nosp, 0, $noreg, debug-location !1405 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %184:gr32, debug-location !1409 :: (store 4 into %ir.k); cg.c:695:16

bb.17.for.cond54:
; predecessors: %bb.16, %bb.18
  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)

  %185:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  %186:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1413 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  %187:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1414 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  CMP32rm %185:gr32, %186:gr64, 4, %187:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1416 :: (load 4 from %ir.arrayidx57); cg.c:695:31
  JCC_1 %bb.19, 13, implicit killed $eflags, debug-location !1417; cg.c:695:9
  JMP_1 %bb.18, debug-location !1417; cg.c:695:9

bb.18.for.body59:
; predecessors: %bb.17
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %191:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  %192:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  MOV64mi32 %191:gr64, 8, %192:gr64_nosp, 0, $noreg, 0, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  %193:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1422 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  %194:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1423 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  MOV32mr %193:gr64, 4, %194:gr64_nosp, 0, $noreg, %195:gr32, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1425 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:695:49
  JMP_1 %bb.17, debug-location !1426; cg.c:695:9

bb.19.for.end66:
; predecessors: %bb.17
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %189:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  %190:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1430 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  MOV32mi %189:gr64, 4, %190:gr64_nosp, 0, $noreg, 0, debug-location !1431 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1432 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:694:29
  JMP_1 %bb.15, debug-location !1433; cg.c:694:5

bb.20.for.end71:
; predecessors: %bb.15
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %38:gr64 = MOV64ri 4607182418800017408
  MOV64mr %stack.24.size, 1, $noreg, 0, $noreg, %38:gr64, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
  %39:fr64 = MOVSDrm_alt %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1437 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  %40:fr64 = CVTSI2SDrm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  %42:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %40:fr64, debug-location !1440; cg.c:706:29
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1441; cg.c:706:13
  $xmm0 = COPY %39:fr64, debug-location !1441; cg.c:706:13
  $xmm1 = COPY %42:fr64, debug-location !1441; cg.c:706:13
  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1441; cg.c:706:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1441; cg.c:706:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1442; cg.c:706:11
  PCN_STACKMAP 2, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, %42:fr64, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, %39:fr64, implicit-def dead early-clobber $r11, debug-location !1442 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:706:11
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1442; cg.c:706:11
  %43:fr64 = COPY $xmm0, debug-location !1441; cg.c:706:13
  MOVSDmr %stack.26.ratio, 1, $noreg, 0, $noreg, %43:fr64, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
  MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1443 :: (store 4 into %ir.i); cg.c:708:12
  %96:gr64 = MOV32ri64 56
  %102:gr64 = MOV32ri64 112
  %164:gr32 = MOV32ri 1

bb.21.for.cond73:
; predecessors: %bb.20, %bb.47
  successors: %bb.22(0x7c000000), %bb.48(0x04000000); %bb.22(96.88%), %bb.48(3.12%)

  %44:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  CMP32rm %44:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1449 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:19
  JCC_1 %bb.48, 13, implicit killed $eflags, debug-location !1450; cg.c:708:5
  JMP_1 %bb.22, debug-location !1450; cg.c:708:5

bb.22.for.body76:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  MOV32mi %stack.19.nza, 1, $noreg, 0, $noreg, 0, debug-location !1451 :: (store 4 into %ir.nza); cg.c:709:18

bb.23.for.cond77:
; predecessors: %bb.22, %bb.46
  successors: %bb.24(0x7c000000), %bb.47(0x04000000); %bb.24(96.88%), %bb.47(3.12%)

  %89:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  %90:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
  %91:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1458 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  CMP32rm %89:gr32, %90:gr64, 4, %91:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1459 :: (load 4 from %ir.arrayidx79); cg.c:709:27
  JCC_1 %bb.47, 13, implicit killed $eflags, debug-location !1460; cg.c:709:9
  JMP_1 %bb.24, debug-location !1460; cg.c:709:9

bb.24.for.body82:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %104:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  %98:gr64 = COPY %104:gr64, debug-location !1461; cg.c:710:17
  %98:gr64 = IMUL64rr %98:gr64(tied-def 0), %96:gr64, implicit-def dead $eflags, debug-location !1461; cg.c:710:17
  %98:gr64 = ADD64rm %98:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
  %99:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1464 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  %100:gr32 = MOV32rm %98:gr64, 4, %99:gr64_nosp, 0, $noreg, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %100:gr32, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
  %105:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1466 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  %104:gr64 = IMUL64rr %104:gr64(tied-def 0), %102:gr64, implicit-def dead $eflags, debug-location !1467; cg.c:712:28
  %104:gr64 = ADD64rm %104:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1467 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
  %105:fr64 = MULSDrm %105:fr64(tied-def 0), %104:gr64, 8, %99:gr64_nosp, 0, $noreg, debug-location !1470 :: (load 8 from %ir.arrayidx90); cg.c:712:26
  MOVSDmr %stack.25.scale, 1, $noreg, 0, $noreg, %105:fr64, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
  MOV32mi %stack.22.nzrow, 1, $noreg, 0, $noreg, 0, debug-location !1472 :: (store 4 into %ir.nzrow); cg.c:713:24

bb.25.for.cond91:
; predecessors: %bb.24, %bb.45
  successors: %bb.26(0x7c000000), %bb.46(0x04000000); %bb.26(96.88%), %bb.46(3.12%)

  %106:gr32 = MOV32rm %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  %107:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
  %108:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1478 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  CMP32rm %106:gr32, %107:gr64, 4, %108:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1479 :: (load 4 from %ir.arrayidx93); cg.c:713:35
  JCC_1 %bb.46, 13, implicit killed $eflags, debug-location !1480; cg.c:713:13
  JMP_1 %bb.26, debug-location !1480; cg.c:713:13

bb.26.for.body96:
; predecessors: %bb.25
  successors: %bb.27(0x40000000), %bb.29(0x40000000); %bb.27(50.00%), %bb.29(50.00%)

  %118:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  %113:gr64 = COPY %118:gr64, debug-location !1481; cg.c:714:24
  %113:gr64 = IMUL64rr %113:gr64(tied-def 0), %96:gr64, implicit-def dead $eflags, debug-location !1481; cg.c:714:24
  %113:gr64 = ADD64rm %113:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
  %114:gr64_nosp = MOVSX64rm32 %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1484 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  %115:gr32 = MOV32rm %113:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  MOV32mr %stack.23.jcol, 1, $noreg, 0, $noreg, %115:gr32, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
  %118:gr64 = IMUL64rr %118:gr64(tied-def 0), %102:gr64, implicit-def dead $eflags, debug-location !1486; cg.c:715:22
  %118:gr64 = ADD64rm %118:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1486 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
  %120:fr64 = MOVSDrm_alt %118:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  %120:fr64 = MULSDrm %120:fr64(tied-def 0), %stack.25.scale, 1, $noreg, 0, $noreg, debug-location !1490 :: (dereferenceable load 8 from %ir.scale); cg.c:715:37
  MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %120:fr64, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20
  CMP32rm %115:gr32, %stack.16.j, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1495 :: (dereferenceable load 4 from %ir.j); cg.c:721:26
  JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1496; cg.c:721:31
  JMP_1 %bb.27, debug-location !1496; cg.c:721:31

bb.27.land.lhs.true:
; predecessors: %bb.26
  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)

  %122:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1497 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
  CMP32rm %122:gr32, %stack.15.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1499 :: (dereferenceable load 4 from %ir.i); cg.c:721:36
  JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1500; cg.c:721:21
  JMP_1 %bb.28, debug-location !1500; cg.c:721:21

bb.28.if.then110:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  %126:fr64 = MOVSDrm_alt %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  %126:fr64 = ADDSDrm %126:fr64(tied-def 0), %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1504 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:29
  %126:fr64 = SUBSDrm %126:fr64(tied-def 0), %stack.13.shift.addr, 1, $noreg, 0, $noreg, debug-location !1506 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:37
  MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %126:fr64, debug-location !1507 :: (store 8 into %ir.va); cg.c:722:24

bb.29.if.end113:
; predecessors: %bb.26, %bb.27, %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 0, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
  %127:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  %128:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1512 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  %129:gr32 = MOV32rm %127:gr64, 4, %128:gr64_nosp, 0, $noreg, debug-location !1510 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %129:gr32, debug-location !1513 :: (store 4 into %ir.k); cg.c:726:24

bb.30.for.cond116:
; predecessors: %bb.29, %bb.42
  successors: %bb.31(0x7c000000), %bb.43(0x04000000); %bb.31(96.88%), %bb.43(3.12%)

  %130:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  %131:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1517 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  %132:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1518 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  CMP32rm %130:gr32, %131:gr64, 4, %132:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1520 :: (load 4 from %ir.arrayidx119); cg.c:726:39
  JCC_1 %bb.43, 13, implicit killed $eflags, debug-location !1521; cg.c:726:17
  JMP_1 %bb.31, debug-location !1521; cg.c:726:17

bb.31.for.body122:
; predecessors: %bb.30
  successors: %bb.32(0x04000000), %bb.38(0x7c000000); %bb.32(3.12%), %bb.38(96.88%)

  %134:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  %135:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1525 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  %136:gr32 = MOV32rm %134:gr64, 4, %135:gr64_nosp, 0, $noreg, debug-location !1522 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  CMP32rm %136:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1527 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:35
  JCC_1 %bb.38, 14, implicit killed $eflags, debug-location !1528; cg.c:727:25
  JMP_1 %bb.32, debug-location !1528; cg.c:727:25

bb.32.if.then127:
; predecessors: %bb.31
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  %153:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  %154:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1532 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  %156:gr32 = MOV32rm %153:gr64, 4, %154:gr64_nosp, 4, $noreg, debug-location !1529 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  %156:gr32 = ADD32ri8 %156:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !1534; cg.c:731:49
  MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %156:gr32, debug-location !1535 :: (store 4 into %ir.kk); cg.c:731:33

bb.33.for.cond132:
; predecessors: %bb.32, %bb.36
  successors: %bb.34(0x7c000000), %bb.37(0x04000000); %bb.34(96.88%), %bb.37(3.12%)

  %157:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1537 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
  CMP32rm %157:gr32, %stack.20.k, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1540 :: (dereferenceable load 4 from %ir.k); cg.c:731:57
  JCC_1 %bb.37, 12, implicit killed $eflags, debug-location !1541; cg.c:731:25
  JMP_1 %bb.34, debug-location !1541; cg.c:731:25

bb.34.for.body135:
; predecessors: %bb.33
  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

  %174:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  %175:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1545 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  CMP32mi8 %174:gr64, 4, %175:gr64_nosp, 0, $noreg, 0, implicit-def $eflags, debug-location !1546 :: (load 4 from %ir.arrayidx137); cg.c:732:44
  JCC_1 %bb.36, 8, implicit killed $eflags, debug-location !1547; cg.c:732:33
  JMP_1 %bb.35, debug-location !1547; cg.c:732:33

bb.35.if.then140:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  %176:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  %177:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1550 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  %178:fr64 = MOVSDrm_alt %176:gr64, 8, %177:gr64_nosp, 0, $noreg, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  MOVSDmr %176:gr64, 8, %177:gr64_nosp, 8, $noreg, %178:fr64, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  %179:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1555 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  %180:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1556 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  %181:gr32 = MOV32rm %179:gr64, 4, %180:gr64_nosp, 0, $noreg, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  MOV32mr %179:gr64, 4, %180:gr64_nosp, 4, $noreg, %181:gr32, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48

bb.36.if.end151:
; predecessors: %bb.34, %bb.35
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  DEC32m %stack.21.kk, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1562 :: (store 4 into %ir.kk), (dereferenceable load 4 from %ir.kk); cg.c:731:65
  JMP_1 %bb.33, debug-location !1563; cg.c:731:25

bb.37.for.end153:
; predecessors: %bb.33
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %159:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  %160:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1567 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  %161:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  MOV32mr %160:gr64, 4, %161:gr64_nosp, 0, $noreg, %159:gr32, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  %162:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1570 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  %163:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1571 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  MOV64mi32 %162:gr64, 8, %163:gr64_nosp, 0, $noreg, 0, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
  MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1573 :: (store 4 into %ir.cont40); cg.c:739:32
  JMP_1 %bb.43, debug-location !1574; cg.c:740:25

bb.38.if.else:
; predecessors: %bb.31
  successors: %bb.39(0x04000000), %bb.40(0x7c000000); %bb.39(3.12%), %bb.40(96.88%)

  %138:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  %139:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1577 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  CMP32mi8 %138:gr64, 4, %139:gr64_nosp, 0, $noreg, -1, implicit-def $eflags, debug-location !1578 :: (load 4 from %ir.arrayidx159); cg.c:742:40
  JCC_1 %bb.40, 5, implicit killed $eflags, debug-location !1579; cg.c:742:30
  JMP_1 %bb.39, debug-location !1579; cg.c:742:30

bb.39.if.then162:
; predecessors: %bb.38
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %149:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  %150:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1582 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  %151:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1583 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  MOV32mr %150:gr64, 4, %151:gr64_nosp, 0, $noreg, %149:gr32, debug-location !1584 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1585 :: (store 4 into %ir.cont40); cg.c:744:32
  JMP_1 %bb.43, debug-location !1586; cg.c:745:25

bb.40.if.else165:
; predecessors: %bb.38
  successors: %bb.41(0x04000000), %bb.42(0x7c000000); %bb.41(3.12%), %bb.42(96.88%)

  %142:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  %143:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1589 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  %144:gr32 = MOV32rm %142:gr64, 4, %143:gr64_nosp, 0, $noreg, debug-location !1587 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  CMP32rm %144:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1591 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:40
  JCC_1 %bb.42, 5, implicit killed $eflags, debug-location !1592; cg.c:747:30
  JMP_1 %bb.41, debug-location !1592; cg.c:747:30

bb.41.if.then170:
; predecessors: %bb.40
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %146:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  %147:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  INC32m %146:gr64, 4, %147:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1599 :: (store 4 into %ir.arrayidx175), (load 4 from %ir.arrayidx172); cg.c:751:34
  MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1600 :: (store 4 into %ir.cont40); cg.c:752:32
  JMP_1 %bb.43, debug-location !1601; cg.c:753:25

bb.42.if.end176:
; predecessors: %bb.40
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1602 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:726:57
  JMP_1 %bb.30, debug-location !1603; cg.c:726:17

bb.43.for.end181:
; predecessors: %bb.30, %bb.41, %bb.39, %bb.37
  successors: %bb.44(0x30000000), %bb.45(0x50000000); %bb.44(37.50%), %bb.45(62.50%)

  CMP32mi8 %stack.28.cont40, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1608 :: (dereferenceable load 4 from %ir.cont40); cg.c:756:28
  JCC_1 %bb.45, 5, implicit killed $eflags, debug-location !1609; cg.c:756:21
  JMP_1 %bb.44, debug-location !1609; cg.c:756:21

bb.44.if.then184:
; predecessors: %bb.43
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  %165:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1610 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1612; cg.c:757:21
  $rdi = LEA64r $rip, 1, $noreg, @cg__str_39_internal_e, $noreg, debug-location !1612; cg.c:757:21
  $esi = COPY %165:gr32, debug-location !1612; cg.c:757:21
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1612; cg.c:757:21
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1612; cg.c:757:21
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1612; cg.c:757:21
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1613; cg.c:760:17
  PCN_STACKMAP 3, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, %165:gr32, implicit-def dead early-clobber $r11, debug-location !1613 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:760:17
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1613; cg.c:760:17

bb.45.if.end186:
; predecessors: %bb.43, %bb.44
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %170:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  %171:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  %173:fr64 = MOVSDrm_alt %170:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  %173:fr64 = ADDSDrm %173:fr64(tied-def 0), %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1617 :: (dereferenceable load 8 from %ir.va); cg.c:761:29
  MOVSDmr %170:gr64, 8, %171:gr64_nosp, 0, $noreg, %173:fr64, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  INC32m %stack.22.nzrow, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1621 :: (store 4 into %ir.nzrow), (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  JMP_1 %bb.25, debug-location !1622; cg.c:713:13

bb.46.for.end194:
; predecessors: %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1625 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:709:41
  JMP_1 %bb.23, debug-location !1626; cg.c:709:9

bb.47.for.end197:
; predecessors: %bb.23
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %94:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  %94:fr64 = MULSDrm %94:fr64(tied-def 0), %stack.26.ratio, 1, $noreg, 0, $noreg, debug-location !1631 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:21
  MOVSDmr %stack.24.size, 1, $noreg, 0, $noreg, %94:fr64, debug-location !1632 :: (store 8 into %ir.size); cg.c:764:14
  INC32m %stack.15.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1633 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:708:25
  JMP_1 %bb.21, debug-location !1634; cg.c:708:5

bb.48.for.end201:
; predecessors: %bb.21
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  %46:gr32 = MOV32ri 1
  MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %46:gr32, debug-location !1637 :: (store 4 into %ir.j); cg.c:770:12

bb.49.for.cond202:
; predecessors: %bb.48, %bb.50
  successors: %bb.50(0x7c000000), %bb.51(0x04000000); %bb.50(96.88%), %bb.51(3.12%)

  %47:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1640 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
  CMP32rm %47:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1643 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:19
  JCC_1 %bb.51, 13, implicit killed $eflags, debug-location !1644; cg.c:770:5
  JMP_1 %bb.50, debug-location !1644; cg.c:770:5

bb.50.for.body205:
; predecessors: %bb.49
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  %86:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  %87:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1647 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  %88:gr32 = MOV32rm %86:gr64, 4, %87:gr64_nosp, -4, $noreg, debug-location !1648 :: (load 4 from %ir.arrayidx210); cg.c:771:31
  ADD32mr %86:gr64, 4, %87:gr64_nosp, 0, $noreg, %88:gr32, implicit-def dead $eflags, debug-location !1654 :: (store 4 into %ir.arrayidx213), (load 4 from %ir.arrayidx207); cg.c:771:18
  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1655 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:770:29
  JMP_1 %bb.49, debug-location !1656; cg.c:770:5

bb.51.for.end216:
; predecessors: %bb.49
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1659 :: (store 4 into %ir.j); cg.c:774:12

bb.52.for.cond217:
; predecessors: %bb.51, %bb.59
  successors: %bb.53(0x7c000000), %bb.60(0x04000000); %bb.53(96.88%), %bb.60(3.12%)

  %49:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  CMP32rm %49:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1665 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:19
  JCC_1 %bb.60, 13, implicit killed $eflags, debug-location !1666; cg.c:774:5
  JMP_1 %bb.53, debug-location !1666; cg.c:774:5

bb.53.for.body220:
; predecessors: %bb.52
  successors: %bb.54(0x50000000), %bb.55(0x30000000); %bb.54(62.50%), %bb.55(37.50%)

  CMP32mi8 %stack.16.j, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1670 :: (dereferenceable load 4 from %ir.j); cg.c:775:15
  JCC_1 %bb.55, 14, implicit killed $eflags, debug-location !1671; cg.c:775:13
  JMP_1 %bb.54, debug-location !1671; cg.c:775:13

bb.54.if.then223:
; predecessors: %bb.53
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  %64:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  %65:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  %68:gr32 = MOV32rm %64:gr64, 4, %65:gr64_nosp, 0, $noreg, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  %67:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1675 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  %68:gr32 = nsw SUB32rm %68:gr32(tied-def 0), %67:gr64, 4, %65:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !1678 :: (load 4 from %ir.arrayidx228); cg.c:776:28
  MOV32mr %stack.17.j1, 1, $noreg, 0, $noreg, %68:gr32, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16
  JMP_1 %bb.56, debug-location !1680; cg.c:777:9

bb.55.if.else230:
; predecessors: %bb.53
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  MOV32mi %stack.17.j1, 1, $noreg, 0, $noreg, 0, debug-location !1681 :: (store 4 into %ir.j1); cg.c:779:16

bb.56.if.end231:
; predecessors: %bb.55, %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  %69:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  %70:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  %73:gr32 = MOV32rm %69:gr64, 4, %70:gr64_nosp, 4, $noreg, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  %72:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1686 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  %73:gr32 = nsw SUB32rm %73:gr32(tied-def 0), %72:gr64, 4, %70:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1688 :: (load 4 from %ir.arrayidx236); cg.c:781:28
  MOV32mr %stack.18.j2, 1, $noreg, 0, $noreg, %73:gr32, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
  %74:gr32 = MOV32rm %69:gr64, 4, %70:gr64_nosp, 0, $noreg, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %74:gr32, debug-location !1692 :: (store 4 into %ir.nza); cg.c:782:13
  %75:gr32 = MOV32rm %stack.17.j1, 1, $noreg, 0, $noreg, debug-location !1693 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
  MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %75:gr32, debug-location !1695 :: (store 4 into %ir.k); cg.c:783:16

bb.57.for.cond240:
; predecessors: %bb.56, %bb.58
  successors: %bb.58(0x7c000000), %bb.59(0x04000000); %bb.58(96.88%), %bb.59(3.12%)

  %76:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
  CMP32rm %76:gr32, %stack.18.j2, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1700 :: (dereferenceable load 4 from %ir.j2); cg.c:783:24
  JCC_1 %bb.59, 13, implicit killed $eflags, debug-location !1701; cg.c:783:9
  JMP_1 %bb.58, debug-location !1701; cg.c:783:9

bb.58.for.body243:
; predecessors: %bb.57
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  %78:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
  %79:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
  %80:fr64 = MOVSDrm_alt %78:gr64, 8, %79:gr64_nosp, 0, $noreg, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
  %81:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1706 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
  MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %80:fr64, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
  %82:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1708 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
  %83:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1709 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
  %84:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 0, $noreg, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
  %85:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1711 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
  MOV32mr %82:gr64, 4, %85:gr64_nosp, 0, $noreg, %84:gr32, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
  INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1715 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:786:17
  INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1716 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:783:31
  JMP_1 %bb.57, debug-location !1717; cg.c:783:9

bb.59.for.end255:
; predecessors: %bb.57
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1720 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:774:29
  JMP_1 %bb.52, debug-location !1721; cg.c:774:5

bb.60.for.end258:
; predecessors: %bb.52
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  %51:gr32 = MOV32ri 1
  MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %51:gr32, debug-location !1724 :: (store 4 into %ir.j); cg.c:789:12

bb.61.for.cond259:
; predecessors: %bb.60, %bb.62
  successors: %bb.62(0x7c000000), %bb.63(0x04000000); %bb.62(96.88%), %bb.63(3.12%)

  %54:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  %54:gr32 = nsw INC32r %54:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1730; cg.c:789:27
  CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %54:gr32, implicit-def $eflags, debug-location !1731 :: (dereferenceable load 4 from %ir.j); cg.c:789:19
  JCC_1 %bb.63, 13, implicit killed $eflags, debug-location !1732; cg.c:789:5
  JMP_1 %bb.62, debug-location !1732; cg.c:789:5

bb.62.for.body263:
; predecessors: %bb.61
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  %60:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
  %61:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  %62:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1736 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  %63:gr32 = MOV32rm %62:gr64, 4, %61:gr64_nosp, -4, $noreg, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  SUB32mr %60:gr64, 4, %61:gr64_nosp, 0, $noreg, %63:gr32, implicit-def dead $eflags, debug-location !1742 :: (store 4 into %ir.arrayidx271), (load 4 from %ir.arrayidx265); cg.c:790:19
  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1743 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:789:33
  JMP_1 %bb.61, debug-location !1744; cg.c:789:5

bb.63.for.end274:
; predecessors: %bb.61

  %56:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
  %57:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1748 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  %59:gr32 = MOV32rm %56:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !1747 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1749; cg.c:792:25
  MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %59:gr32, debug-location !1750 :: (store 4 into %ir.nza); cg.c:792:9
  RET 0, debug-location !1751; cg.c:793:1

# End machine code for function sparse.

********** MI Scheduling **********
sparse:%bb.0 entry
  From: %7:fr64 = COPY $xmm1
    To: End RegionInstrs: 21
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH XMM0 XMM1 
Live Out: 
Live Thru: 
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=8
Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %7:fr64 = COPY $xmm1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(15): Data Latency=0 Reg=%7
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %6:fr64 = COPY $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(14): Data Latency=0 Reg=%6
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %5:gr32 = COPY $r9d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(13): Data Latency=0 Reg=%5
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR32temp+GR64_TC 1    GR8+GR32temp 1    GR16 -1
  Single Issue       : false;
SU(3):   %4:gr32 = COPY $r8d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(12): Data Latency=0 Reg=%4
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR32temp+GR64_TC 1    GR8+GR32temp 1    GR16 -1
  Single Issue       : false;
SU(4):   %3:gr32 = COPY $ecx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%3
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR32temp 2
  Single Issue       : false;
SU(5):   %2:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%2
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR32temp 2    GR32temp+GR32_DIBP 2
  Single Issue       : false;
SU(6):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1
  Single Issue       : false;
SU(7):   %0:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%0
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(8):   MOV64mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(7): Data Latency=0 Reg=%0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV64mr %stack.1.colidx.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.colidx.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(6): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV64mr %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   MOV32mr %stack.4.nz.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.nz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   MOV32mr %stack.5.nozer.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.nozer.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   MOVSDmr %stack.12.rcond.addr, 1, $noreg, 0, $noreg, %6:fr64 :: (store 8 into %ir.rcond.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%6
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(15):   MOVSDmr %stack.13.shift.addr, 1, $noreg, 0, $noreg, %7:fr64 :: (store 8 into %ir.shift.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%7
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(16):   %10:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1295 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(17): Data Latency=4 Reg=%10
    SU(17): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(17):   %10:gr32 = nsw SUB32rm %10:gr32(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1297 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(16): Data Latency=4 Reg=%10
    SU(16): Out  Latency=0
  Successors:
    SU(18): Data Latency=4 Reg=%10
    SU(18): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %10:gr32 = nsw INC32r %10:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1298; cg.c:659:32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(17): Data Latency=4 Reg=%10
    SU(17): Out  Latency=0
  Successors:
    SU(19): Data Latency=1 Reg=%10
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   MOV32mr %stack.14.nrows, 1, $noreg, 0, $noreg, %10:gr32, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%10
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(20):   MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1300 :: (store 4 into %ir.j); cg.c:664:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 19 15 14 13 12 11 10 9 8 
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1300 :: (store 4 into %ir.j); cg.c:664:12
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 19 15 14 13 12 11 10 9 
  Cand SU(8) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) MOV32mr %stack.14.nrows, 1, $noreg, 0, $noreg, %10:gr32, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
Bottom Pressure:
GR16=2
  LiveReg: %10
  UpdateRegP: SU(19) MOV32mr %stack.14.nrows, 1, $noreg, 0, $noreg, %10:gr32, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
              to 
  Ready @0c
  BotQ.A TopLatency SU(19) 9c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 15 14 13 12 11 10 18 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %10:gr32 = nsw INC32r %10:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1298; cg.c:659:32
Bottom Pressure:
GR16=2
  LiveReg: %10
  UpdateRegP: SU(18) %10:gr32 = nsw INC32r %10:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1298; cg.c:659:32
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(18) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 15 14 13 12 11 10 17 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %10:gr32 = nsw SUB32rm %10:gr32(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1297 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:21
Bottom Pressure:
GR16=2
  LiveReg: %10
  UpdateRegP: SU(17) %10:gr32 = nsw SUB32rm %10:gr32(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1297 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:21
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(17) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 15 14 13 12 11 10 16 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %10:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1295 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
Bottom Pressure:

  Ready @9c
  BotQ.A BotLatency SU(16) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 15 14 13 12 11 10 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOVSDmr %stack.13.shift.addr, 1, $noreg, 0, $noreg, %7:fr64 :: (store 8 into %ir.shift.addr)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %7
  UpdateRegP: SU(15) MOVSDmr %stack.13.shift.addr, 1, $noreg, 0, $noreg, %7:fr64 :: (store 8 into %ir.shift.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 14 13 12 11 0 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(14) MOVSDmr %stack.12.rcond.addr, 1, $noreg, 0, $noreg, %6:fr64 :: (store 8 into %ir.rcond.addr)
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %6
  UpdateRegP: SU(14) MOVSDmr %stack.12.rcond.addr, 1, $noreg, 0, $noreg, %6:fr64 :: (store 8 into %ir.rcond.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 0 13 12 11 1 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(13) MOV32mr %stack.5.nozer.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.nozer.addr)
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %5
  UpdateRegP: SU(13) MOV32mr %stack.5.nozer.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.nozer.addr)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 0 1 12 11 2 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(12) MOV32mr %stack.4.nz.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.nz.addr)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %4
  UpdateRegP: SU(12) MOV32mr %stack.4.nz.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.nz.addr)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 0 1 2 11 3 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(11) MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n.addr)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %3
  UpdateRegP: SU(11) MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n.addr)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 0 1 2 3 4 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV64mr %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.rowstr.addr)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %2
  UpdateRegP: SU(10) MOV64mr %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.rowstr.addr)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 4 0 1 2 3 5 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV64mr %stack.1.colidx.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.colidx.addr)
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  LiveReg: %1
  UpdateRegP: SU(9) MOV64mr %stack.1.colidx.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.colidx.addr)
              to 
  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 4 0 1 2 3 6 
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV64mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.a.addr)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %0
  UpdateRegP: SU(8) MOV64mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.a.addr)
              to 
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 0 1 2 3 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %0:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
FR32X=2
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 0 1 2 3 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %1:gr64 = COPY $rsi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 4 0 1 2 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %2:gr64 = COPY $rdx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
FR32X=2
GR16=10
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 4 0 1 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %3:gr32 = COPY $ecx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
FR32X=2
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %4:gr32 = COPY $r8d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
FR32X=2
GR16=9
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %5:gr32 = COPY $r9d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=8
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %6:fr64 = COPY $xmm0
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=8
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %7:fr64 = COPY $xmm1
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=8
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %7:fr64 = COPY $xmm1
SU(1):   %6:fr64 = COPY $xmm0
SU(2):   %5:gr32 = COPY $r9d
SU(3):   %4:gr32 = COPY $r8d
SU(4):   %3:gr32 = COPY $ecx
SU(5):   %2:gr64 = COPY $rdx
SU(6):   %1:gr64 = COPY $rsi
SU(7):   %0:gr64 = COPY $rdi
SU(8):   MOV64mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.a.addr)
SU(9):   MOV64mr %stack.1.colidx.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.colidx.addr)
SU(10):   MOV64mr %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.rowstr.addr)
SU(11):   MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n.addr)
SU(12):   MOV32mr %stack.4.nz.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.nz.addr)
SU(13):   MOV32mr %stack.5.nozer.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.nozer.addr)
SU(14):   MOVSDmr %stack.12.rcond.addr, 1, $noreg, 0, $noreg, %6:fr64 :: (store 8 into %ir.rcond.addr)
SU(15):   MOVSDmr %stack.13.shift.addr, 1, $noreg, 0, $noreg, %7:fr64 :: (store 8 into %ir.shift.addr)
SU(16):   %10:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1295 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
SU(17):   %10:gr32 = nsw SUB32rm %10:gr32(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1297 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:21
SU(18):   %10:gr32 = nsw INC32r %10:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1298; cg.c:659:32
SU(19):   MOV32mr %stack.14.nrows, 1, $noreg, 0, $noreg, %10:gr32, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
SU(20):   MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1300 :: (store 4 into %ir.j); cg.c:664:12

********** MI Scheduling **********
sparse:%bb.1 for.cond
  From: %13:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
    To: JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !1308; cg.c:664:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %13:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%13
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1306; cg.c:664:27
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%13
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%13
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !1307 :: (dereferenceable load 4 from %ir.j); cg.c:664:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%13
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !1308; cg.c:664:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !1307 :: (dereferenceable load 4 from %ir.j); cg.c:664:19
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1306; cg.c:664:27
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %13:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %13:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
SU(1):   %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1306; cg.c:664:27
SU(2):   CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !1307 :: (dereferenceable load 4 from %ir.j); cg.c:664:19

********** MI Scheduling **********
sparse:%bb.2 for.body
  From: %214:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
    To: JMP_1 %bb.1, debug-location !1314; cg.c:664:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %214:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%214
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %215:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1311 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%215
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOV32mi %214:gr64, 4, %215:gr64_nosp, 0, $noreg, 0, debug-location !1312 :: (store 4 into %ir.arrayidx); cg.c:665:19
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%215
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%214
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1313 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:664:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1, debug-location !1314; cg.c:664:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1313 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:664:33
  Ready @3c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mi %214:gr64, 4, %215:gr64_nosp, 0, $noreg, 0, debug-location !1312 :: (store 4 into %ir.arrayidx); cg.c:665:19
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %215:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1311 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %214:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %214:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
SU(1):   %215:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1311 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
SU(2):   MOV32mi %214:gr64, 4, %215:gr64_nosp, 0, $noreg, 0, debug-location !1312 :: (store 4 into %ir.arrayidx); cg.c:665:19
SU(3):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1313 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:664:33

********** MI Scheduling **********
sparse:%bb.3 for.end
  From: MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %204:gr64 = MOV32ri64 56
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %204:gr64 = MOV32ri64 56
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
SU(1):   %204:gr64 = MOV32ri64 56

********** MI Scheduling **********
sparse:%bb.4 for.cond2
  From: %15:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
    To: JCC_1 %bb.9, 13, implicit killed $eflags, debug-location !1324; cg.c:668:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %15:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%15
  Single Issue       : false;
SU(1):   CMP32rm %15:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1323 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%15
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.9, 13, implicit killed $eflags, debug-location !1324; cg.c:668:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %15:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1323 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %15:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %15:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
SU(1):   CMP32rm %15:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1323 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:19

********** MI Scheduling **********
sparse:%bb.6 for.cond5
  From: %199:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
    To: JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1334; cg.c:669:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %199:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%199
  Single Issue       : false;
SU(1):   %200:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%200
  Single Issue       : false;
SU(2):   %201:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1332 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%201
  Single Issue       : false;
SU(3):   CMP32rm %199:gr32, %200:gr64, 4, %201:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1333 :: (load 4 from %ir.arrayidx7); cg.c:669:27
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%201
    SU(1): Data Latency=4 Reg=%200
    SU(0): Data Latency=4 Reg=%199
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1334; cg.c:669:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %199:gr32, %200:gr64, 4, %201:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1333 :: (load 4 from %ir.arrayidx7); cg.c:669:27
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %201:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1332 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %200:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %199:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %199:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
SU(1):   %200:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
SU(2):   %201:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1332 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
SU(3):   CMP32rm %199:gr32, %200:gr64, 4, %201:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1333 :: (load 4 from %ir.arrayidx7); cg.c:669:27

********** MI Scheduling **********
sparse:%bb.7 for.body9
  From: %203:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
    To: JMP_1 %bb.6, debug-location !1350; cg.c:669:9
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=10
Live In: %204 
Live Out: %204 
Live Thru: GR16=2
  LiveReg: %204
  UpdateRegP: SU(2) %206:gr64_nosp = IMUL64rr %206:gr64_nosp(tied-def 0), %204:gr64, implicit-def dead $eflags, debug-location !1335; cg.c:670:17
              to 
Top Pressure:
GR16=2
Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   %203:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(10): Data Latency=4 Reg=%203
    SU(1): Data Latency=4 Reg=%203
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %206:gr64_nosp = COPY %203:gr64_nosp, debug-location !1335; cg.c:670:17
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(0): Data Latency=4 Reg=%203
  Successors:
    SU(2): Data Latency=0 Reg=%206
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %206:gr64_nosp = IMUL64rr %206:gr64_nosp(tied-def 0), %204:gr64, implicit-def dead $eflags, debug-location !1335; cg.c:670:17
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(1): Data Latency=0 Reg=%206
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%206
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %206:gr64_nosp = ADD64rm %206:gr64_nosp(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(2): Data Latency=1 Reg=%206
    SU(2): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%206
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %207:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1338 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(5): Data Latency=4 Reg=%207
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %216:gr64_nosp = MOVSX64rm32 %206:gr64_nosp, 4, %207:gr64_nosp, 0, $noreg, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 13
  Predecessors:
    SU(3): Data Latency=4 Reg=%206
    SU(4): Data Latency=4 Reg=%207
  Successors:
    SU(11): Data Latency=4 Reg=%216
    SU(6): Data Latency=4 Reg=%216
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %210:gr32 = LEA64_32r %216:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1339; cg.c:670:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 9
  Predecessors:
    SU(5): Data Latency=4 Reg=%216
  Successors:
    SU(7): Data Latency=1 Reg=%210
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %210:gr32, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 8
  Predecessors:
    SU(6): Data Latency=1 Reg=%210
    SU(5): Ord  Latency=0 Memory
  Successors:
    SU(10): Ord  Latency=1 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %211:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1341 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(11): Data Latency=4 Reg=%211
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %212:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1343 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(10): Data Latency=4 Reg=%212
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %213:gr32 = MOV32rm %212:gr64, 4, %203:gr64_nosp, 0, $noreg, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 7
  Predecessors:
    SU(9): Data Latency=4 Reg=%212
    SU(7): Ord  Latency=1 Memory
    SU(0): Data Latency=4 Reg=%203
  Successors:
    SU(11): Data Latency=4 Reg=%213
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   ADD32mr %211:gr64, 4, %216:gr64_nosp, 4, $noreg, %213:gr32, implicit-def dead $eflags, debug-location !1348 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
  # preds left       : 11
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 3
  Predecessors:
    SU(10): Data Latency=4 Reg=%213
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%211
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%216
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(12):   INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1349 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:669:41
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 3
  Predecessors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.6, debug-location !1350; cg.c:669:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(12): Ord  Latency=3 Artificial
    SU(11): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 22
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1349 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:669:41
Bottom Pressure:
GR16=2
  Ready @3c
  BotQ.A TopLatency SU(12) 19c
  BotQ.A BotLatency SU(12) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) ADD32mr %211:gr64, 4, %216:gr64_nosp, 4, $noreg, %213:gr32, implicit-def dead $eflags, debug-location !1348 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
Bottom Pressure:
GR16=8
  LiveReg: %211
  UpdateRegP: SU(11) ADD32mr %211:gr64, 4, %216:gr64_nosp, 4, $noreg, %213:gr32, implicit-def dead $eflags, debug-location !1348 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
              to GR16 4
  LiveReg: %216
  UpdateRegP: SU(6) %210:gr32 = LEA64_32r %216:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1339; cg.c:670:30
              to GR16 -2
  UpdateRegP: SU(11) ADD32mr %211:gr64, 4, %216:gr64_nosp, 4, $noreg, %213:gr32, implicit-def dead $eflags, debug-location !1348 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
              to GR16 2
  LiveReg: %213
  UpdateRegP: SU(11) ADD32mr %211:gr64, 4, %216:gr64_nosp, 4, $noreg, %213:gr32, implicit-def dead $eflags, debug-location !1348 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %213:gr32 = MOV32rm %212:gr64, 4, %203:gr64_nosp, 0, $noreg, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
Bottom Pressure:
GR16=10
  LiveReg: %212
  UpdateRegP: SU(10) %213:gr32 = MOV32rm %212:gr64, 4, %203:gr64_nosp, 0, $noreg, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
              to 
  LiveReg: %203
  UpdateRegP: SU(1) %206:gr64_nosp = COPY %203:gr64_nosp, debug-location !1335; cg.c:670:17
              to GR16 -2
  UpdateRegP: SU(10) %213:gr32 = MOV32rm %212:gr64, 4, %203:gr64_nosp, 0, $noreg, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(10) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 7 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(9) %212:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1343 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
Bottom Pressure:
GR16=8
  Ready @11c
  BotQ.A BotLatency SU(9) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %211:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1341 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
Bottom Pressure:
GR16=6
  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %210:gr32, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
Bottom Pressure:
GR16=8
  LiveReg: %210
  UpdateRegP: SU(7) MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %210:gr32, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
              to 
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %210:gr32 = LEA64_32r %216:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1339; cg.c:670:30
Bottom Pressure:
GR16=6
  Ready @9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %216:gr64_nosp = MOVSX64rm32 %206:gr64_nosp, 4, %207:gr64_nosp, 0, $noreg, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
Bottom Pressure:
GR16=8
  LiveReg: %206
  UpdateRegP: SU(5) %216:gr64_nosp = MOVSX64rm32 %206:gr64_nosp, 4, %207:gr64_nosp, 0, $noreg, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
              to 
  LiveReg: %207
  UpdateRegP: SU(5) %216:gr64_nosp = MOVSX64rm32 %206:gr64_nosp, 4, %207:gr64_nosp, 0, $noreg, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(5) 13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %207:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1338 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
Bottom Pressure:
GR16=6
  Ready @17c
  BotQ.A BotLatency SU(4) 17c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %206:gr64_nosp = ADD64rm %206:gr64_nosp(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
Bottom Pressure:
GR16=6
  LiveReg: %206
  UpdateRegP: SU(3) %206:gr64_nosp = ADD64rm %206:gr64_nosp(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
              to GR16 -2
  Ready @17c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %206:gr64_nosp = IMUL64rr %206:gr64_nosp(tied-def 0), %204:gr64, implicit-def dead $eflags, debug-location !1335; cg.c:670:17
Bottom Pressure:
GR16=6
  LiveReg: %206
  UpdateRegP: SU(2) %206:gr64_nosp = IMUL64rr %206:gr64_nosp(tied-def 0), %204:gr64, implicit-def dead $eflags, debug-location !1335; cg.c:670:17
              to GR16 -2
  Ready @18c
  BotQ.A BotLatency SU(2) 18c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %206:gr64_nosp = COPY %203:gr64_nosp, debug-location !1335; cg.c:670:17
Bottom Pressure:
GR16=4
  Ready @18c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %203:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
Bottom Pressure:
GR16=2
  Ready @22c
  BotQ.A BotLatency SU(0) 22c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %203:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
SU(1):   %206:gr64_nosp = COPY %203:gr64_nosp, debug-location !1335; cg.c:670:17
SU(2):   %206:gr64_nosp = IMUL64rr %206:gr64_nosp(tied-def 0), %204:gr64, implicit-def dead $eflags, debug-location !1335; cg.c:670:17
SU(3):   %206:gr64_nosp = ADD64rm %206:gr64_nosp(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
SU(4):   %207:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1338 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
SU(5):   %216:gr64_nosp = MOVSX64rm32 %206:gr64_nosp, 4, %207:gr64_nosp, 0, $noreg, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
SU(6):   %210:gr32 = LEA64_32r %216:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1339; cg.c:670:30
SU(7):   MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %210:gr32, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
SU(8):   %211:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1341 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
SU(9):   %212:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1343 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
SU(10):   %213:gr32 = MOV32rm %212:gr64, 4, %203:gr64_nosp, 0, $noreg, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
SU(11):   ADD32mr %211:gr64, 4, %216:gr64_nosp, 4, $noreg, %213:gr32, implicit-def dead $eflags, debug-location !1348 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
SU(12):   INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1349 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:669:41

********** MI Scheduling **********
sparse:%bb.9 for.end27
  From: %17:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %17:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%17
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV32mi %17:gr64, 1, $noreg, 0, $noreg, 0, debug-location !1358 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%17
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %18:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%18
  Single Issue       : false;
SU(3):   MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %18:gr32, debug-location !1359 :: (store 4 into %ir.j); cg.c:676:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%18
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %18:gr32, debug-location !1359 :: (store 4 into %ir.j); cg.c:676:12
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %18:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mi %17:gr64, 1, $noreg, 0, $noreg, 0, debug-location !1358 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %17:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %17:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
SU(1):   MOV32mi %17:gr64, 1, $noreg, 0, $noreg, 0, debug-location !1358 :: (store 4 into %ir.arrayidx281); cg.c:675:15
SU(2):   %18:gr32 = MOV32ri 1
SU(3):   MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %18:gr32, debug-location !1359 :: (store 4 into %ir.j); cg.c:676:12

********** MI Scheduling **********
sparse:%bb.10 for.cond29
  From: %21:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
    To: JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !1367; cg.c:676:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %21:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%21
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %21:gr32 = nsw INC32r %21:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1365; cg.c:676:27
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%21
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%21
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %21:gr32, implicit-def $eflags, debug-location !1366 :: (dereferenceable load 4 from %ir.j); cg.c:676:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%21
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !1367; cg.c:676:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %21:gr32, implicit-def $eflags, debug-location !1366 :: (dereferenceable load 4 from %ir.j); cg.c:676:19
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %21:gr32 = nsw INC32r %21:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1365; cg.c:676:27
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %21:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %21:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
SU(1):   %21:gr32 = nsw INC32r %21:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1365; cg.c:676:27
SU(2):   CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %21:gr32, implicit-def $eflags, debug-location !1366 :: (dereferenceable load 4 from %ir.j); cg.c:676:19

********** MI Scheduling **********
sparse:%bb.11 for.body32
  From: %196:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
    To: JMP_1 %bb.10, debug-location !1379; cg.c:676:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %196:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%196
    SU(2): Data Latency=4 Reg=%196
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %197:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1370 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%197
    SU(2): Data Latency=4 Reg=%197
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %198:gr32 = MOV32rm %196:gr64, 4, %197:gr64_nosp, -4, $noreg, debug-location !1371 :: (load 4 from %ir.arrayidx37); cg.c:677:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%197
    SU(0): Data Latency=4 Reg=%196
  Successors:
    SU(3): Data Latency=4 Reg=%198
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   ADD32mr %196:gr64, 4, %197:gr64_nosp, 0, $noreg, %198:gr32, implicit-def dead $eflags, debug-location !1377 :: (store 4 into %ir.arrayidx40), (load 4 from %ir.arrayidx34); cg.c:677:19
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%198
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%197
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%196
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1378 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:676:33
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.10, debug-location !1379; cg.c:676:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1378 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:676:33
  Ready @3c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) ADD32mr %196:gr64, 4, %197:gr64_nosp, 0, $noreg, %198:gr32, implicit-def dead $eflags, debug-location !1377 :: (store 4 into %ir.arrayidx40), (load 4 from %ir.arrayidx34); cg.c:677:19
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %198:gr32 = MOV32rm %196:gr64, 4, %197:gr64_nosp, -4, $noreg, debug-location !1371 :: (load 4 from %ir.arrayidx37); cg.c:677:33
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %197:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1370 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  Ready @11c
  BotQ.A BotLatency SU(1) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %196:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
  Ready @11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %196:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
SU(1):   %197:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1370 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
SU(2):   %198:gr32 = MOV32rm %196:gr64, 4, %197:gr64_nosp, -4, $noreg, debug-location !1371 :: (load 4 from %ir.arrayidx37); cg.c:677:33
SU(3):   ADD32mr %196:gr64, 4, %197:gr64_nosp, 0, $noreg, %198:gr32, implicit-def dead $eflags, debug-location !1377 :: (store 4 into %ir.arrayidx40), (load 4 from %ir.arrayidx34); cg.c:677:19
SU(4):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1378 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:676:33

********** MI Scheduling **********
sparse:%bb.12 for.end43
  From: %23:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
    To: JCC_1 %bb.14, 14, implicit killed $eflags, debug-location !1390; cg.c:685:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %23:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(2): Data Latency=4 Reg=%23
  Single Issue       : false;
SU(1):   %24:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1383 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(2): Data Latency=4 Reg=%24
  Single Issue       : false;
SU(2):   %26:gr32 = MOV32rm %23:gr64, 4, %24:gr64_nosp, 0, $noreg, debug-location !1382 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(1): Data Latency=4 Reg=%24
    SU(0): Data Latency=4 Reg=%23
  Successors:
    SU(3): Data Latency=4 Reg=%26
    SU(3): Out  Latency=0
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %26:gr32 = DEC32r %26:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1384; cg.c:679:25
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%26
    SU(2): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%26
    SU(4): Data Latency=1 Reg=%26
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(4):   MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %26:gr32, debug-location !1385 :: (store 4 into %ir.nza); cg.c:679:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%26
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   CMP32rm %26:gr32, %stack.4.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1389 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%26
    SU(3): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.14, 14, implicit killed $eflags, debug-location !1390; cg.c:685:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) CMP32rm %26:gr32, %stack.4.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1389 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:13
  Ready @4c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %26:gr32, debug-location !1385 :: (store 4 into %ir.nza); cg.c:679:9
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %26:gr32 = DEC32r %26:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1384; cg.c:679:25
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %26:gr32 = MOV32rm %23:gr64, 4, %24:gr64_nosp, 0, $noreg, debug-location !1382 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %24:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1383 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  Ready @13c
  BotQ.A BotLatency SU(1) 13c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %23:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
  Ready @13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %23:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
SU(1):   %24:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1383 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
SU(2):   %26:gr32 = MOV32rm %23:gr64, 4, %24:gr64_nosp, 0, $noreg, debug-location !1382 :: (load 4 from %ir.arrayidx45); cg.c:679:11
SU(3):   %26:gr32 = DEC32r %26:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1384; cg.c:679:25
SU(4):   MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %26:gr32, debug-location !1385 :: (store 4 into %ir.nza); cg.c:679:9
SU(5):   CMP32rm %26:gr32, %stack.4.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1389 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:13

********** MI Scheduling **********
sparse:%bb.13 if.then
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_38_nza__nzmax, $noreg, debug-location !1395; cg.c:687:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1395; cg.c:687:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_38_nza__nzmax, $noreg, debug-location !1395; cg.c:687:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %32:gr32, debug-location !1395; cg.c:687:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %33:gr32, debug-location !1395; cg.c:687:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1395; cg.c:687:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1395; cg.c:687:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1395; cg.c:687:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = COPY %33:gr32, debug-location !1395; cg.c:687:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %32:gr32, debug-location !1395; cg.c:687:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_38_nza__nzmax, $noreg, debug-location !1395; cg.c:687:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_38_nza__nzmax, $noreg, debug-location !1395; cg.c:687:9
SU(1):   $esi = COPY %32:gr32, debug-location !1395; cg.c:687:9
SU(2):   $edx = COPY %33:gr32, debug-location !1395; cg.c:687:9
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1395; cg.c:687:9

********** MI Scheduling **********
sparse:%bb.13 if.then
  From: %32:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1395; cg.c:687:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %32:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %33:gr32 = MOV32rm %stack.4.nz.addr, 1, $noreg, 0, $noreg, debug-location !1394 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1395; cg.c:687:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %33:gr32 = MOV32rm %stack.4.nz.addr, 1, $noreg, 0, $noreg, debug-location !1394 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %32:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %32:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
SU(1):   %33:gr32 = MOV32rm %stack.4.nz.addr, 1, $noreg, 0, $noreg, debug-location !1394 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46

********** MI Scheduling **********
sparse:%bb.13 if.then
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_37_Space_for_, $noreg, debug-location !1391; cg.c:686:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1391; cg.c:686:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_37_Space_for_, $noreg, debug-location !1391; cg.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1391; cg.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1391; cg.c:686:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1391; cg.c:686:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_37_Space_for_, $noreg, debug-location !1391; cg.c:686:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_37_Space_for_, $noreg, debug-location !1391; cg.c:686:9
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1391; cg.c:686:9

********** MI Scheduling **********
sparse:%bb.14 if.end
  From: MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %195:gr32 = MOV32ri -1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %195:gr32 = MOV32ri -1
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
SU(1):   %195:gr32 = MOV32ri -1

********** MI Scheduling **********
sparse:%bb.15 for.cond49
  From: %36:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
    To: JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !1404; cg.c:694:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %36:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%36
  Single Issue       : false;
SU(1):   CMP32rm %36:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1403 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%36
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !1404; cg.c:694:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %36:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1403 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %36:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %36:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
SU(1):   CMP32rm %36:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1403 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:19

********** MI Scheduling **********
sparse:%bb.16 for.body51
  From: %182:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %182:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%182
  Single Issue       : false;
SU(1):   %183:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1408 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%183
  Single Issue       : false;
SU(2):   %184:gr32 = MOV32rm %182:gr64, 4, %183:gr64_nosp, 0, $noreg, debug-location !1405 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%183
    SU(0): Data Latency=4 Reg=%182
  Successors:
    SU(3): Data Latency=4 Reg=%184
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %184:gr32, debug-location !1409 :: (store 4 into %ir.k); cg.c:695:16
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%184
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %184:gr32, debug-location !1409 :: (store 4 into %ir.k); cg.c:695:16
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %184:gr32 = MOV32rm %182:gr64, 4, %183:gr64_nosp, 0, $noreg, debug-location !1405 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %183:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1408 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %182:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %182:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
SU(1):   %183:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1408 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
SU(2):   %184:gr32 = MOV32rm %182:gr64, 4, %183:gr64_nosp, 0, $noreg, debug-location !1405 :: (load 4 from %ir.arrayidx53); cg.c:695:18
SU(3):   MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %184:gr32, debug-location !1409 :: (store 4 into %ir.k); cg.c:695:16

********** MI Scheduling **********
sparse:%bb.17 for.cond54
  From: %185:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
    To: JCC_1 %bb.19, 13, implicit killed $eflags, debug-location !1417; cg.c:695:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %185:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%185
  Single Issue       : false;
SU(1):   %186:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1413 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%186
  Single Issue       : false;
SU(2):   %187:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1414 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%187
  Single Issue       : false;
SU(3):   CMP32rm %185:gr32, %186:gr64, 4, %187:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1416 :: (load 4 from %ir.arrayidx57); cg.c:695:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%187
    SU(1): Data Latency=4 Reg=%186
    SU(0): Data Latency=4 Reg=%185
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.19, 13, implicit killed $eflags, debug-location !1417; cg.c:695:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %185:gr32, %186:gr64, 4, %187:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1416 :: (load 4 from %ir.arrayidx57); cg.c:695:31
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %187:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1414 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %186:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1413 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %185:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %185:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
SU(1):   %186:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1413 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
SU(2):   %187:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1414 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
SU(3):   CMP32rm %185:gr32, %186:gr64, 4, %187:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1416 :: (load 4 from %ir.arrayidx57); cg.c:695:31

********** MI Scheduling **********
sparse:%bb.18 for.body59
  From: %191:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
    To: JMP_1 %bb.17, debug-location !1426; cg.c:695:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %191:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%191
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %192:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%192
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOV64mi32 %191:gr64, 8, %192:gr64_nosp, 0, $noreg, 0, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%192
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%191
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=1 Memory
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(3):   %193:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1422 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%193
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %194:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1423 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%194
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   MOV32mr %193:gr64, 4, %194:gr64_nosp, 0, $noreg, %195:gr32, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Data Latency=4 Reg=%194
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%193
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1425 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:695:49
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.17, debug-location !1426; cg.c:695:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1425 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:695:49
  Ready @3c
  BotQ.A TopLatency SU(6) 9c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV32mr %193:gr64, 4, %194:gr64_nosp, 0, $noreg, %195:gr32, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %194:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1423 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  Ready @7c
  BotQ.A BotLatency SU(4) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %193:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1422 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV64mi32 %191:gr64, 8, %192:gr64_nosp, 0, $noreg, 0, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %192:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %191:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  Ready @12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %191:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
SU(1):   %192:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
SU(2):   MOV64mi32 %191:gr64, 8, %192:gr64_nosp, 0, $noreg, 0, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
SU(3):   %193:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1422 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
SU(4):   %194:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1423 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
SU(5):   MOV32mr %193:gr64, 4, %194:gr64_nosp, 0, $noreg, %195:gr32, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
SU(6):   INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1425 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:695:49

********** MI Scheduling **********
sparse:%bb.19 for.end66
  From: %189:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
    To: JMP_1 %bb.15, debug-location !1433; cg.c:694:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %189:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%189
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %190:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1430 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%190
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOV32mi %189:gr64, 4, %190:gr64_nosp, 0, $noreg, 0, debug-location !1431 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%190
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%189
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1432 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:694:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.15, debug-location !1433; cg.c:694:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1432 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:694:29
  Ready @3c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mi %189:gr64, 4, %190:gr64_nosp, 0, $noreg, 0, debug-location !1431 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %190:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1430 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %189:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %189:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
SU(1):   %190:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1430 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
SU(2):   MOV32mi %189:gr64, 4, %190:gr64_nosp, 0, $noreg, 0, debug-location !1431 :: (store 4 into %ir.arrayidx68); cg.c:699:18
SU(3):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1432 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:694:29

********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: %43:fr64 = COPY $xmm0, debug-location !1441; cg.c:706:13
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %43:fr64 = COPY $xmm0, debug-location !1441; cg.c:706:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%43
  Single Issue       : false;
SU(1):   MOVSDmr %stack.26.ratio, 1, $noreg, 0, $noreg, %43:fr64, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%43
  Single Issue       : false;
SU(2):   MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1443 :: (store 4 into %ir.i); cg.c:708:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %96:gr64 = MOV32ri64 56
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %102:gr64 = MOV32ri64 112
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %164:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %164:gr32 = MOV32ri 1
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 2 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %102:gr64 = MOV32ri64 112
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %96:gr64 = MOV32ri64 56
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1443 :: (store 4 into %ir.i); cg.c:708:12
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.26.ratio, 1, $noreg, 0, $noreg, %43:fr64, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %43:fr64 = COPY $xmm0, debug-location !1441; cg.c:706:13
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %43:fr64 = COPY $xmm0, debug-location !1441; cg.c:706:13
SU(1):   MOVSDmr %stack.26.ratio, 1, $noreg, 0, $noreg, %43:fr64, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
SU(2):   MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1443 :: (store 4 into %ir.i); cg.c:708:12
SU(3):   %96:gr64 = MOV32ri64 56
SU(4):   %102:gr64 = MOV32ri64 112
SU(5):   %164:gr32 = MOV32ri 1

********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: $xmm0 = COPY %39:fr64, debug-location !1441; cg.c:706:13
    To: CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1441; cg.c:706:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $xmm0 = COPY %39:fr64, debug-location !1441; cg.c:706:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $xmm1 = COPY %42:fr64, debug-location !1441; cg.c:706:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1441; cg.c:706:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $xmm1 = COPY %42:fr64, debug-location !1441; cg.c:706:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $xmm0 = COPY %39:fr64, debug-location !1441; cg.c:706:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   $xmm0 = COPY %39:fr64, debug-location !1441; cg.c:706:13
SU(1):   $xmm1 = COPY %42:fr64, debug-location !1441; cg.c:706:13

********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: %38:gr64 = MOV64ri 4607182418800017408
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1441; cg.c:706:13
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %38:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%38
  Single Issue       : false;
SU(1):   MOV64mr %stack.24.size, 1, $noreg, 0, $noreg, %38:gr64, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%38
  Single Issue       : false;
SU(2):   %39:fr64 = MOVSDrm_alt %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1437 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %40:fr64 = CVTSI2SDrm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(5): Data Latency=4 Reg=%40
  Single Issue       : false;
SU(4):   %42:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(5): Data Latency=4 Reg=%42
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %40:fr64, debug-location !1440; cg.c:706:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(4): Data Latency=4 Reg=%42
    SU(4): Out  Latency=0
    SU(3): Data Latency=4 Reg=%40
  Successors:
    ExitSU: Ord  Latency=9 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1441; cg.c:706:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=9 Artificial
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 2 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %40:fr64, debug-location !1440; cg.c:706:29
  Ready @9c
  BotQ.A TopLatency SU(5) 4c
  BotQ.A BotLatency SU(5) 9c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 4 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %42:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @13c
  BotQ.A BotLatency SU(4) 13c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %40:fr64 = CVTSI2SDrm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  Ready @13c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %39:fr64 = MOVSDrm_alt %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1437 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.24.size, 1, $noreg, 0, $noreg, %38:gr64, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %38:gr64 = MOV64ri 4607182418800017408
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %38:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr %stack.24.size, 1, $noreg, 0, $noreg, %38:gr64, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
SU(2):   %39:fr64 = MOVSDrm_alt %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1437 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
SU(3):   %40:fr64 = CVTSI2SDrm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
SU(4):   %42:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(5):   %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %40:fr64, debug-location !1440; cg.c:706:29

********** MI Scheduling **********
sparse:%bb.21 for.cond73
  From: %44:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
    To: JCC_1 %bb.48, 13, implicit killed $eflags, debug-location !1450; cg.c:708:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %44:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%44
  Single Issue       : false;
SU(1):   CMP32rm %44:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1449 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%44
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.48, 13, implicit killed $eflags, debug-location !1450; cg.c:708:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %44:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1449 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %44:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %44:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
SU(1):   CMP32rm %44:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1449 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:19

********** MI Scheduling **********
sparse:%bb.23 for.cond77
  From: %89:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
    To: JCC_1 %bb.47, 13, implicit killed $eflags, debug-location !1460; cg.c:709:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %89:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%89
  Single Issue       : false;
SU(1):   %90:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%90
  Single Issue       : false;
SU(2):   %91:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1458 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%91
  Single Issue       : false;
SU(3):   CMP32rm %89:gr32, %90:gr64, 4, %91:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1459 :: (load 4 from %ir.arrayidx79); cg.c:709:27
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%91
    SU(1): Data Latency=4 Reg=%90
    SU(0): Data Latency=4 Reg=%89
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.47, 13, implicit killed $eflags, debug-location !1460; cg.c:709:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %89:gr32, %90:gr64, 4, %91:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1459 :: (load 4 from %ir.arrayidx79); cg.c:709:27
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %91:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1458 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %90:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %89:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %89:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
SU(1):   %90:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
SU(2):   %91:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1458 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
SU(3):   CMP32rm %89:gr32, %90:gr64, 4, %91:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1459 :: (load 4 from %ir.arrayidx79); cg.c:709:27

********** MI Scheduling **********
sparse:%bb.24 for.body82
  From: %104:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=10
Live In: %102 %96 
Live Out: %102 %96 
Live Thru: GR16=4
  LiveReg: %102
  UpdateRegP: SU(8) %104:gr64 = IMUL64rr %104:gr64(tied-def 0), %102:gr64, implicit-def dead $eflags, debug-location !1467; cg.c:712:28
              to 
  LiveReg: %96
  UpdateRegP: SU(2) %98:gr64 = IMUL64rr %98:gr64(tied-def 0), %96:gr64, implicit-def dead $eflags, debug-location !1461; cg.c:710:17
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %104:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(8): Data Latency=4 Reg=%104
    SU(1): Data Latency=4 Reg=%104
    SU(8): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %98:gr64 = COPY %104:gr64, debug-location !1461; cg.c:710:17
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(0): Data Latency=4 Reg=%104
  Successors:
    SU(2): Data Latency=0 Reg=%98
    SU(2): Out  Latency=0
    SU(8): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %98:gr64 = IMUL64rr %98:gr64(tied-def 0), %96:gr64, implicit-def dead $eflags, debug-location !1461; cg.c:710:17
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(1): Data Latency=0 Reg=%98
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%98
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %98:gr64 = ADD64rm %98:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 13
  Predecessors:
    SU(2): Data Latency=1 Reg=%98
    SU(2): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%98
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %99:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1464 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(10): Data Latency=4 Reg=%99
    SU(5): Data Latency=4 Reg=%99
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %100:gr32 = MOV32rm %98:gr64, 4, %99:gr64_nosp, 0, $noreg, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 9
  Predecessors:
    SU(3): Data Latency=4 Reg=%98
    SU(4): Data Latency=4 Reg=%99
  Successors:
    SU(6): Data Latency=4 Reg=%100
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %100:gr32, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 5
  Predecessors:
    SU(5): Data Latency=4 Reg=%100
    SU(5): Ord  Latency=0 Memory
  Successors:
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %105:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1466 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(10): Data Latency=4 Reg=%105
    SU(10): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(8):   %104:gr64 = IMUL64rr %104:gr64(tied-def 0), %102:gr64, implicit-def dead $eflags, debug-location !1467; cg.c:712:28
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Data Latency=4 Reg=%104
    SU(0): Out  Latency=0
  Successors:
    SU(9): Data Latency=1 Reg=%104
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %104:gr64 = ADD64rm %104:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1467 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(8): Data Latency=1 Reg=%104
    SU(8): Out  Latency=0
  Successors:
    SU(10): Data Latency=4 Reg=%104
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %105:fr64 = MULSDrm %105:fr64(tied-def 0), %104:gr64, 8, %99:gr64_nosp, 0, $noreg, debug-location !1470 :: (load 8 from %ir.arrayidx90); cg.c:712:26
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 4
  Predecessors:
    SU(9): Data Latency=4 Reg=%104
    SU(7): Data Latency=4 Reg=%105
    SU(7): Out  Latency=0
    SU(6): Ord  Latency=1 Memory
    SU(4): Data Latency=4 Reg=%99
  Successors:
    SU(11): Data Latency=4 Reg=%105
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(11):   MOVSDmr %stack.25.scale, 1, $noreg, 0, $noreg, %105:fr64, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 0
  Predecessors:
    SU(10): Data Latency=4 Reg=%105
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(12):   MOV32mi %stack.22.nzrow, 1, $noreg, 0, $noreg, 0, debug-location !1472 :: (store 4 into %ir.nzrow); cg.c:713:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 18
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) MOV32mi %stack.22.nzrow, 1, $noreg, 0, $noreg, 0, debug-location !1472 :: (store 4 into %ir.nzrow); cg.c:713:24
Bottom Pressure:
GR16=4
  Ready @0c
  BotQ.A TopLatency SU(12) 14c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) MOVSDmr %stack.25.scale, 1, $noreg, 0, $noreg, %105:fr64, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %105
  UpdateRegP: SU(11) MOVSDmr %stack.25.scale, 1, $noreg, 0, $noreg, %105:fr64, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
              to 
  Ready @0c
  BotQ.A TopLatency SU(11) 18c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %105:fr64 = MULSDrm %105:fr64(tied-def 0), %104:gr64, 8, %99:gr64_nosp, 0, $noreg, debug-location !1470 :: (load 8 from %ir.arrayidx90); cg.c:712:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %105
  UpdateRegP: SU(10) %105:fr64 = MULSDrm %105:fr64(tied-def 0), %104:gr64, 8, %99:gr64_nosp, 0, $noreg, debug-location !1470 :: (load 8 from %ir.arrayidx90); cg.c:712:26
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %104
  UpdateRegP: SU(10) %105:fr64 = MULSDrm %105:fr64(tied-def 0), %104:gr64, 8, %99:gr64_nosp, 0, $noreg, debug-location !1470 :: (load 8 from %ir.arrayidx90); cg.c:712:26
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %99
  UpdateRegP: SU(5) %100:gr32 = MOV32rm %98:gr64, 4, %99:gr64_nosp, 0, $noreg, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
              to 
  UpdateRegP: SU(10) %105:fr64 = MULSDrm %105:fr64(tied-def 0), %104:gr64, 8, %99:gr64_nosp, 0, $noreg, debug-location !1470 :: (load 8 from %ir.arrayidx90); cg.c:712:26
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(10) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 6 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %104:gr64 = ADD64rm %104:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1467 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %104
  UpdateRegP: SU(9) %104:gr64 = ADD64rm %104:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1467 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
              to GR16 -2
  Ready @8c
  BotQ.A BotLatency SU(9) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %104:gr64 = IMUL64rr %104:gr64(tied-def 0), %102:gr64, implicit-def dead $eflags, debug-location !1467; cg.c:712:28
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %104
  UpdateRegP: SU(1) %98:gr64 = COPY %104:gr64, debug-location !1461; cg.c:710:17
              to GR16 -2
  UpdateRegP: SU(8) %104:gr64 = IMUL64rr %104:gr64(tied-def 0), %102:gr64, implicit-def dead $eflags, debug-location !1467; cg.c:712:28
              to GR16 -2
  Ready @9c
  BotQ.A BotLatency SU(8) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %105:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1466 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
Bottom Pressure:
GR16=8
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %100:gr32, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
Bottom Pressure:
GR16=10
  LiveReg: %100
  UpdateRegP: SU(6) MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %100:gr32, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
              to 
  Ready @5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %100:gr32 = MOV32rm %98:gr64, 4, %99:gr64_nosp, 0, $noreg, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
Bottom Pressure:
GR16=10
  LiveReg: %98
  UpdateRegP: SU(5) %100:gr32 = MOV32rm %98:gr64, 4, %99:gr64_nosp, 0, $noreg, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
              to GR16 -2
  Ready @9c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %99:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1464 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
Bottom Pressure:
GR16=8
  Ready @13c
  BotQ.A BotLatency SU(4) 13c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %98:gr64 = ADD64rm %98:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
Bottom Pressure:
GR16=8
  LiveReg: %98
  UpdateRegP: SU(3) %98:gr64 = ADD64rm %98:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
              to GR16 -2
  Ready @13c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %98:gr64 = IMUL64rr %98:gr64(tied-def 0), %96:gr64, implicit-def dead $eflags, debug-location !1461; cg.c:710:17
Bottom Pressure:
GR16=8
  LiveReg: %98
  UpdateRegP: SU(2) %98:gr64 = IMUL64rr %98:gr64(tied-def 0), %96:gr64, implicit-def dead $eflags, debug-location !1461; cg.c:710:17
              to GR16 -2
  Ready @14c
  BotQ.A BotLatency SU(2) 14c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %98:gr64 = COPY %104:gr64, debug-location !1461; cg.c:710:17
Bottom Pressure:
GR16=6
  Ready @14c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %104:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
Bottom Pressure:
GR16=4
  Ready @18c
  BotQ.A BotLatency SU(0) 18c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %104:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
SU(1):   %98:gr64 = COPY %104:gr64, debug-location !1461; cg.c:710:17
SU(2):   %98:gr64 = IMUL64rr %98:gr64(tied-def 0), %96:gr64, implicit-def dead $eflags, debug-location !1461; cg.c:710:17
SU(3):   %98:gr64 = ADD64rm %98:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
SU(4):   %99:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1464 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
SU(5):   %100:gr32 = MOV32rm %98:gr64, 4, %99:gr64_nosp, 0, $noreg, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
SU(6):   MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %100:gr32, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
SU(7):   %105:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1466 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
SU(8):   %104:gr64 = IMUL64rr %104:gr64(tied-def 0), %102:gr64, implicit-def dead $eflags, debug-location !1467; cg.c:712:28
SU(9):   %104:gr64 = ADD64rm %104:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1467 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
SU(10):   %105:fr64 = MULSDrm %105:fr64(tied-def 0), %104:gr64, 8, %99:gr64_nosp, 0, $noreg, debug-location !1470 :: (load 8 from %ir.arrayidx90); cg.c:712:26
SU(11):   MOVSDmr %stack.25.scale, 1, $noreg, 0, $noreg, %105:fr64, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
SU(12):   MOV32mi %stack.22.nzrow, 1, $noreg, 0, $noreg, 0, debug-location !1472 :: (store 4 into %ir.nzrow); cg.c:713:24

********** MI Scheduling **********
sparse:%bb.25 for.cond91
  From: %106:gr32 = MOV32rm %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
    To: JCC_1 %bb.46, 13, implicit killed $eflags, debug-location !1480; cg.c:713:13
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %106:gr32 = MOV32rm %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%106
  Single Issue       : false;
SU(1):   %107:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%107
  Single Issue       : false;
SU(2):   %108:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1478 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%108
  Single Issue       : false;
SU(3):   CMP32rm %106:gr32, %107:gr64, 4, %108:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1479 :: (load 4 from %ir.arrayidx93); cg.c:713:35
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%108
    SU(1): Data Latency=4 Reg=%107
    SU(0): Data Latency=4 Reg=%106
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.46, 13, implicit killed $eflags, debug-location !1480; cg.c:713:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %106:gr32, %107:gr64, 4, %108:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1479 :: (load 4 from %ir.arrayidx93); cg.c:713:35
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %108:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1478 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %107:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %106:gr32 = MOV32rm %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %106:gr32 = MOV32rm %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
SU(1):   %107:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
SU(2):   %108:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1478 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
SU(3):   CMP32rm %106:gr32, %107:gr64, 4, %108:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1479 :: (load 4 from %ir.arrayidx93); cg.c:713:35

********** MI Scheduling **********
sparse:%bb.26 for.body96
  From: %118:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
    To: JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1496; cg.c:721:31
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=10
Live In: %102 %96 
Live Out: %102 %96 
Live Thru: GR16=4
  LiveReg: %102
  UpdateRegP: SU(7) %118:gr64 = IMUL64rr %118:gr64(tied-def 0), %102:gr64, implicit-def dead $eflags, debug-location !1486; cg.c:715:22
              to 
  LiveReg: %96
  UpdateRegP: SU(2) %113:gr64 = IMUL64rr %113:gr64(tied-def 0), %96:gr64, implicit-def dead $eflags, debug-location !1481; cg.c:714:24
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %118:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(7): Data Latency=4 Reg=%118
    SU(1): Data Latency=4 Reg=%118
    SU(7): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %113:gr64 = COPY %118:gr64, debug-location !1481; cg.c:714:24
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(0): Data Latency=4 Reg=%118
  Successors:
    SU(2): Data Latency=0 Reg=%113
    SU(2): Out  Latency=0
    SU(7): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %113:gr64 = IMUL64rr %113:gr64(tied-def 0), %96:gr64, implicit-def dead $eflags, debug-location !1481; cg.c:714:24
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(1): Data Latency=0 Reg=%113
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%113
    SU(3): Out  Latency=0
    SU(12): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %113:gr64 = ADD64rm %113:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(2): Data Latency=1 Reg=%113
    SU(2): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%113
    SU(12): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %114:gr64_nosp = MOVSX64rm32 %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1484 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(9): Data Latency=4 Reg=%114
    SU(5): Data Latency=4 Reg=%114
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %115:gr32 = MOV32rm %113:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 13
  Predecessors:
    SU(3): Data Latency=4 Reg=%113
    SU(4): Data Latency=4 Reg=%114
  Successors:
    SU(12): Data Latency=4 Reg=%115
    SU(6): Data Latency=4 Reg=%115
    SU(11): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   MOV32mr %stack.23.jcol, 1, $noreg, 0, $noreg, %115:gr32, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 9
  Predecessors:
    SU(5): Data Latency=4 Reg=%115
    SU(5): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=1 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %118:gr64 = IMUL64rr %118:gr64(tied-def 0), %102:gr64, implicit-def dead $eflags, debug-location !1486; cg.c:715:22
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Data Latency=4 Reg=%118
    SU(0): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%118
    SU(8): Out  Latency=0
    SU(12): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %118:gr64 = ADD64rm %118:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1486 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(7): Data Latency=1 Reg=%118
    SU(7): Out  Latency=0
  Successors:
    SU(9): Data Latency=4 Reg=%118
    SU(12): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %120:fr64 = MOVSDrm_alt %118:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 8
  Predecessors:
    SU(8): Data Latency=4 Reg=%118
    SU(6): Ord  Latency=1 Memory
    SU(4): Data Latency=4 Reg=%114
  Successors:
    SU(10): Data Latency=4 Reg=%120
    SU(10): Out  Latency=0
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(10):   %120:fr64 = MULSDrm %120:fr64(tied-def 0), %stack.25.scale, 1, $noreg, 0, $noreg, debug-location !1490 :: (dereferenceable load 8 from %ir.scale); cg.c:715:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 4
  Predecessors:
    SU(9): Data Latency=4 Reg=%120
    SU(9): Out  Latency=0
  Successors:
    SU(11): Data Latency=4 Reg=%120
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %120:fr64, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(10): Data Latency=4 Reg=%120
    SU(9): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(12):   CMP32rm %115:gr32, %stack.16.j, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1495 :: (dereferenceable load 4 from %ir.j); cg.c:721:26
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 4
  Predecessors:
    SU(8): Out  Latency=0
    SU(7): Out  Latency=0
    SU(5): Data Latency=4 Reg=%115
    SU(3): Out  Latency=0
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1496; cg.c:721:31
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(12): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 22
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 12 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) CMP32rm %115:gr32, %stack.16.j, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1495 :: (dereferenceable load 4 from %ir.j); cg.c:721:26
Bottom Pressure:
GR16=6
  LiveReg: %115
  UpdateRegP: SU(6) MOV32mr %stack.23.jcol, 1, $noreg, 0, $noreg, %115:gr32, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
              to 
  UpdateRegP: SU(12) CMP32rm %115:gr32, %stack.16.j, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1495 :: (dereferenceable load 4 from %ir.j); cg.c:721:26
              to 
  Ready @4c
  BotQ.A TopLatency SU(12) 13c
  BotQ.A BotLatency SU(12) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %120:fr64, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %120
  UpdateRegP: SU(11) MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %120:fr64, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20
              to 
  Ready @0c
  BotQ.A TopLatency SU(11) 22c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %120:fr64 = MULSDrm %120:fr64(tied-def 0), %stack.25.scale, 1, $noreg, 0, $noreg, debug-location !1490 :: (dereferenceable load 8 from %ir.scale); cg.c:715:37
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %120
  UpdateRegP: SU(10) %120:fr64 = MULSDrm %120:fr64(tied-def 0), %stack.25.scale, 1, $noreg, 0, $noreg, debug-location !1490 :: (dereferenceable load 8 from %ir.scale); cg.c:715:37
              to FR32 -1    FR32X -1
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %120:fr64 = MOVSDrm_alt %118:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
Bottom Pressure:
GR16=10
  LiveReg: %118
  UpdateRegP: SU(9) %120:fr64 = MOVSDrm_alt %118:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %114
  UpdateRegP: SU(5) %115:gr32 = MOV32rm %113:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
              to 
  UpdateRegP: SU(9) %120:fr64 = MOVSDrm_alt %118:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(9) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %118:gr64 = ADD64rm %118:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1486 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
Bottom Pressure:
GR16=10
  LiveReg: %118
  UpdateRegP: SU(8) %118:gr64 = ADD64rm %118:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1486 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
              to GR16 -2
  Ready @12c
  BotQ.A BotLatency SU(8) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %118:gr64 = IMUL64rr %118:gr64(tied-def 0), %102:gr64, implicit-def dead $eflags, debug-location !1486; cg.c:715:22
Bottom Pressure:
GR16=10
  LiveReg: %118
  UpdateRegP: SU(1) %113:gr64 = COPY %118:gr64, debug-location !1481; cg.c:714:24
              to GR16 -2
  UpdateRegP: SU(7) %118:gr64 = IMUL64rr %118:gr64(tied-def 0), %102:gr64, implicit-def dead $eflags, debug-location !1486; cg.c:715:22
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(7) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV32mr %stack.23.jcol, 1, $noreg, 0, $noreg, %115:gr32, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
Bottom Pressure:
GR16=10
  Ready @9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %115:gr32 = MOV32rm %113:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
Bottom Pressure:
GR16=10
  LiveReg: %113
  UpdateRegP: SU(5) %115:gr32 = MOV32rm %113:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
              to GR16 -2
  Ready @13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %114:gr64_nosp = MOVSX64rm32 %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1484 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
Bottom Pressure:
GR16=8
  Ready @17c
  BotQ.A BotLatency SU(4) 17c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %113:gr64 = ADD64rm %113:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
Bottom Pressure:
GR16=8
  LiveReg: %113
  UpdateRegP: SU(3) %113:gr64 = ADD64rm %113:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
              to GR16 -2
  Ready @17c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %113:gr64 = IMUL64rr %113:gr64(tied-def 0), %96:gr64, implicit-def dead $eflags, debug-location !1481; cg.c:714:24
Bottom Pressure:
GR16=8
  LiveReg: %113
  UpdateRegP: SU(2) %113:gr64 = IMUL64rr %113:gr64(tied-def 0), %96:gr64, implicit-def dead $eflags, debug-location !1481; cg.c:714:24
              to GR16 -2
  Ready @18c
  BotQ.A BotLatency SU(2) 18c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %113:gr64 = COPY %118:gr64, debug-location !1481; cg.c:714:24
Bottom Pressure:
GR16=6
  Ready @18c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %118:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
Bottom Pressure:
GR16=4
  Ready @22c
  BotQ.A BotLatency SU(0) 22c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %118:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
SU(1):   %113:gr64 = COPY %118:gr64, debug-location !1481; cg.c:714:24
SU(2):   %113:gr64 = IMUL64rr %113:gr64(tied-def 0), %96:gr64, implicit-def dead $eflags, debug-location !1481; cg.c:714:24
SU(3):   %113:gr64 = ADD64rm %113:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
SU(4):   %114:gr64_nosp = MOVSX64rm32 %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1484 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
SU(5):   %115:gr32 = MOV32rm %113:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
SU(6):   MOV32mr %stack.23.jcol, 1, $noreg, 0, $noreg, %115:gr32, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
SU(7):   %118:gr64 = IMUL64rr %118:gr64(tied-def 0), %102:gr64, implicit-def dead $eflags, debug-location !1486; cg.c:715:22
SU(8):   %118:gr64 = ADD64rm %118:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1486 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
SU(9):   %120:fr64 = MOVSDrm_alt %118:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
SU(10):   %120:fr64 = MULSDrm %120:fr64(tied-def 0), %stack.25.scale, 1, $noreg, 0, $noreg, debug-location !1490 :: (dereferenceable load 8 from %ir.scale); cg.c:715:37
SU(11):   MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %120:fr64, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20
SU(12):   CMP32rm %115:gr32, %stack.16.j, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1495 :: (dereferenceable load 4 from %ir.j); cg.c:721:26

********** MI Scheduling **********
sparse:%bb.27 land.lhs.true
  From: %122:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1497 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
    To: JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1500; cg.c:721:21
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %122:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1497 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%122
  Single Issue       : false;
SU(1):   CMP32rm %122:gr32, %stack.15.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1499 :: (dereferenceable load 4 from %ir.i); cg.c:721:36
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%122
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1500; cg.c:721:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %122:gr32, %stack.15.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1499 :: (dereferenceable load 4 from %ir.i); cg.c:721:36
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %122:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1497 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %122:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1497 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
SU(1):   CMP32rm %122:gr32, %stack.15.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1499 :: (dereferenceable load 4 from %ir.i); cg.c:721:36

********** MI Scheduling **********
sparse:%bb.28 if.then110
  From: %126:fr64 = MOVSDrm_alt %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %126:fr64 = MOVSDrm_alt %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(1): Data Latency=4 Reg=%126
    SU(1): Out  Latency=0
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %126:fr64 = ADDSDrm %126:fr64(tied-def 0), %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1504 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:29
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%126
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%126
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %126:fr64 = SUBSDrm %126:fr64(tied-def 0), %stack.13.shift.addr, 1, $noreg, 0, $noreg, debug-location !1506 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%126
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%126
  Single Issue       : false;
SU(3):   MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %126:fr64, debug-location !1507 :: (store 8 into %ir.va); cg.c:722:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%126
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %126:fr64, debug-location !1507 :: (store 8 into %ir.va); cg.c:722:24
  Ready @0c
  BotQ.A TopLatency SU(3) 12c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %126:fr64 = SUBSDrm %126:fr64(tied-def 0), %stack.13.shift.addr, 1, $noreg, 0, $noreg, debug-location !1506 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:37
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %126:fr64 = ADDSDrm %126:fr64(tied-def 0), %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1504 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:29
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %126:fr64 = MOVSDrm_alt %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %126:fr64 = MOVSDrm_alt %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
SU(1):   %126:fr64 = ADDSDrm %126:fr64(tied-def 0), %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1504 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:29
SU(2):   %126:fr64 = SUBSDrm %126:fr64(tied-def 0), %stack.13.shift.addr, 1, $noreg, 0, $noreg, debug-location !1506 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:37
SU(3):   MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %126:fr64, debug-location !1507 :: (store 8 into %ir.va); cg.c:722:24

********** MI Scheduling **********
sparse:%bb.29 if.end113
  From: MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 0, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 0, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(1):   %127:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%127
  Single Issue       : false;
SU(2):   %128:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1512 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%128
  Single Issue       : false;
SU(3):   %129:gr32 = MOV32rm %127:gr64, 4, %128:gr64_nosp, 0, $noreg, debug-location !1510 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%128
    SU(1): Data Latency=4 Reg=%127
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%129
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %129:gr32, debug-location !1513 :: (store 4 into %ir.k); cg.c:726:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%129
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %129:gr32, debug-location !1513 :: (store 4 into %ir.k); cg.c:726:24
  Ready @0c
  BotQ.A TopLatency SU(4) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %129:gr32 = MOV32rm %127:gr64, 4, %128:gr64_nosp, 0, $noreg, debug-location !1510 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %128:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1512 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %127:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 0, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 0, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
SU(1):   %127:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
SU(2):   %128:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1512 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
SU(3):   %129:gr32 = MOV32rm %127:gr64, 4, %128:gr64_nosp, 0, $noreg, debug-location !1510 :: (load 4 from %ir.arrayidx115); cg.c:726:26
SU(4):   MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %129:gr32, debug-location !1513 :: (store 4 into %ir.k); cg.c:726:24

********** MI Scheduling **********
sparse:%bb.30 for.cond116
  From: %130:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
    To: JCC_1 %bb.43, 13, implicit killed $eflags, debug-location !1521; cg.c:726:17
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %130:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%130
  Single Issue       : false;
SU(1):   %131:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1517 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%131
  Single Issue       : false;
SU(2):   %132:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1518 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%132
  Single Issue       : false;
SU(3):   CMP32rm %130:gr32, %131:gr64, 4, %132:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1520 :: (load 4 from %ir.arrayidx119); cg.c:726:39
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%132
    SU(1): Data Latency=4 Reg=%131
    SU(0): Data Latency=4 Reg=%130
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.43, 13, implicit killed $eflags, debug-location !1521; cg.c:726:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %130:gr32, %131:gr64, 4, %132:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1520 :: (load 4 from %ir.arrayidx119); cg.c:726:39
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %132:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1518 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %131:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1517 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %130:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %130:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
SU(1):   %131:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1517 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
SU(2):   %132:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1518 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
SU(3):   CMP32rm %130:gr32, %131:gr64, 4, %132:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1520 :: (load 4 from %ir.arrayidx119); cg.c:726:39

********** MI Scheduling **********
sparse:%bb.31 for.body122
  From: %134:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
    To: JCC_1 %bb.38, 14, implicit killed $eflags, debug-location !1528; cg.c:727:25
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %134:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%134
  Single Issue       : false;
SU(1):   %135:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1525 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%135
  Single Issue       : false;
SU(2):   %136:gr32 = MOV32rm %134:gr64, 4, %135:gr64_nosp, 0, $noreg, debug-location !1522 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%135
    SU(0): Data Latency=4 Reg=%134
  Successors:
    SU(3): Data Latency=4 Reg=%136
  Single Issue       : false;
SU(3):   CMP32rm %136:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1527 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%136
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.38, 14, implicit killed $eflags, debug-location !1528; cg.c:727:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %136:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1527 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:35
  Ready @4c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %136:gr32 = MOV32rm %134:gr64, 4, %135:gr64_nosp, 0, $noreg, debug-location !1522 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %135:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1525 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %134:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  Ready @12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %134:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
SU(1):   %135:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1525 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
SU(2):   %136:gr32 = MOV32rm %134:gr64, 4, %135:gr64_nosp, 0, $noreg, debug-location !1522 :: (load 4 from %ir.arrayidx124); cg.c:727:25
SU(3):   CMP32rm %136:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1527 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:35

********** MI Scheduling **********
sparse:%bb.32 if.then127
  From: %153:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %153:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%153
  Single Issue       : false;
SU(1):   %154:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1532 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%154
  Single Issue       : false;
SU(2):   %156:gr32 = MOV32rm %153:gr64, 4, %154:gr64_nosp, 4, $noreg, debug-location !1529 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%154
    SU(0): Data Latency=4 Reg=%153
  Successors:
    SU(3): Data Latency=4 Reg=%156
    SU(3): Out  Latency=0
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %156:gr32 = ADD32ri8 %156:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !1534; cg.c:731:49
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%156
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%156
  Single Issue       : false;
SU(4):   MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %156:gr32, debug-location !1535 :: (store 4 into %ir.kk); cg.c:731:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%156
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %156:gr32, debug-location !1535 :: (store 4 into %ir.kk); cg.c:731:33
  Ready @0c
  BotQ.A TopLatency SU(4) 9c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %156:gr32 = ADD32ri8 %156:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !1534; cg.c:731:49
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %156:gr32 = MOV32rm %153:gr64, 4, %154:gr64_nosp, 4, $noreg, debug-location !1529 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %154:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1532 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %153:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  Ready @9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %153:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
SU(1):   %154:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1532 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
SU(2):   %156:gr32 = MOV32rm %153:gr64, 4, %154:gr64_nosp, 4, $noreg, debug-location !1529 :: (load 4 from %ir.arrayidx130); cg.c:731:35
SU(3):   %156:gr32 = ADD32ri8 %156:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !1534; cg.c:731:49
SU(4):   MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %156:gr32, debug-location !1535 :: (store 4 into %ir.kk); cg.c:731:33

********** MI Scheduling **********
sparse:%bb.33 for.cond132
  From: %157:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1537 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
    To: JCC_1 %bb.37, 12, implicit killed $eflags, debug-location !1541; cg.c:731:25
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %157:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1537 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%157
  Single Issue       : false;
SU(1):   CMP32rm %157:gr32, %stack.20.k, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1540 :: (dereferenceable load 4 from %ir.k); cg.c:731:57
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%157
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.37, 12, implicit killed $eflags, debug-location !1541; cg.c:731:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %157:gr32, %stack.20.k, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1540 :: (dereferenceable load 4 from %ir.k); cg.c:731:57
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %157:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1537 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %157:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1537 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
SU(1):   CMP32rm %157:gr32, %stack.20.k, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1540 :: (dereferenceable load 4 from %ir.k); cg.c:731:57

********** MI Scheduling **********
sparse:%bb.34 for.body135
  From: %174:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
    To: JCC_1 %bb.36, 8, implicit killed $eflags, debug-location !1547; cg.c:732:33
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %174:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%174
  Single Issue       : false;
SU(1):   %175:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1545 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%175
  Single Issue       : false;
SU(2):   CMP32mi8 %174:gr64, 4, %175:gr64_nosp, 0, $noreg, 0, implicit-def $eflags, debug-location !1546 :: (load 4 from %ir.arrayidx137); cg.c:732:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%175
    SU(0): Data Latency=4 Reg=%174
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.36, 8, implicit killed $eflags, debug-location !1547; cg.c:732:33
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mi8 %174:gr64, 4, %175:gr64_nosp, 0, $noreg, 0, implicit-def $eflags, debug-location !1546 :: (load 4 from %ir.arrayidx137); cg.c:732:44
  Ready @4c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %175:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1545 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %174:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %174:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
SU(1):   %175:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1545 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
SU(2):   CMP32mi8 %174:gr64, 4, %175:gr64_nosp, 0, $noreg, 0, implicit-def $eflags, debug-location !1546 :: (load 4 from %ir.arrayidx137); cg.c:732:44

********** MI Scheduling **********
sparse:%bb.35 if.then140
  From: %176:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
    To: End RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %176:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(3): Data Latency=4 Reg=%176
    SU(2): Data Latency=4 Reg=%176
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %177:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1550 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(3): Data Latency=4 Reg=%177
    SU(2): Data Latency=4 Reg=%177
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %178:fr64 = MOVSDrm_alt %176:gr64, 8, %177:gr64_nosp, 0, $noreg, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%177
    SU(0): Data Latency=4 Reg=%176
  Successors:
    SU(3): Data Latency=4 Reg=%178
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   MOVSDmr %176:gr64, 8, %177:gr64_nosp, 8, $noreg, %178:fr64, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 9
  Predecessors:
    SU(2): Data Latency=4 Reg=%178
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%177
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%176
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(4):   %179:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1555 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 8
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%179
    SU(6): Data Latency=4 Reg=%179
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %180:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1556 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 8
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%180
    SU(6): Data Latency=4 Reg=%180
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %181:gr32 = MOV32rm %179:gr64, 4, %180:gr64_nosp, 0, $noreg, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 4
  Predecessors:
    SU(5): Data Latency=4 Reg=%180
    SU(4): Data Latency=4 Reg=%179
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%181
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %179:gr64, 4, %180:gr64_nosp, 4, $noreg, %181:gr32, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=%181
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%180
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=%179
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV32mr %179:gr64, 4, %180:gr64_nosp, 4, $noreg, %181:gr32, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48
Bottom Pressure:
GR16=6
  LiveReg: %179
  UpdateRegP: SU(6) %181:gr32 = MOV32rm %179:gr64, 4, %180:gr64_nosp, 0, $noreg, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
              to 
  UpdateRegP: SU(7) MOV32mr %179:gr64, 4, %180:gr64_nosp, 4, $noreg, %181:gr32, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48
              to GR16 4
  LiveReg: %180
  UpdateRegP: SU(6) %181:gr32 = MOV32rm %179:gr64, 4, %180:gr64_nosp, 0, $noreg, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
              to GR16 -2
  UpdateRegP: SU(7) MOV32mr %179:gr64, 4, %180:gr64_nosp, 4, $noreg, %181:gr32, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48
              to GR16 2
  LiveReg: %181
  UpdateRegP: SU(7) MOV32mr %179:gr64, 4, %180:gr64_nosp, 4, $noreg, %181:gr32, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 17c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %181:gr32 = MOV32rm %179:gr64, 4, %180:gr64_nosp, 0, $noreg, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
Bottom Pressure:
GR16=4
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %180:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1556 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
Bottom Pressure:
GR16=2
  Ready @8c
  BotQ.A BotLatency SU(5) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %179:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1555 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
Bottom Pressure:

  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %176:gr64, 8, %177:gr64_nosp, 8, $noreg, %178:fr64, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %176
  UpdateRegP: SU(2) %178:fr64 = MOVSDrm_alt %176:gr64, 8, %177:gr64_nosp, 0, $noreg, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(3) MOVSDmr %176:gr64, 8, %177:gr64_nosp, 8, $noreg, %178:fr64, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %177
  UpdateRegP: SU(2) %178:fr64 = MOVSDrm_alt %176:gr64, 8, %177:gr64_nosp, 0, $noreg, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
              to FR32 -1    FR32X -1
  UpdateRegP: SU(3) MOVSDmr %176:gr64, 8, %177:gr64_nosp, 8, $noreg, %178:fr64, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
              to FR32 1    FR32X 1
  LiveReg: %178
  UpdateRegP: SU(3) MOVSDmr %176:gr64, 8, %177:gr64_nosp, 8, $noreg, %178:fr64, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
              to 
  Ready @9c
  BotQ.A BotLatency SU(3) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %178:fr64 = MOVSDrm_alt %176:gr64, 8, %177:gr64_nosp, 0, $noreg, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
Bottom Pressure:
GR16=4
  Ready @13c
  BotQ.A BotLatency SU(2) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %177:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1550 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
Bottom Pressure:
GR16=2
  Ready @17c
  BotQ.A BotLatency SU(1) 17c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %176:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
Bottom Pressure:

  Ready @17c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %176:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
SU(1):   %177:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1550 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
SU(2):   %178:fr64 = MOVSDrm_alt %176:gr64, 8, %177:gr64_nosp, 0, $noreg, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
SU(3):   MOVSDmr %176:gr64, 8, %177:gr64_nosp, 8, $noreg, %178:fr64, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
SU(4):   %179:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1555 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
SU(5):   %180:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1556 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
SU(6):   %181:gr32 = MOV32rm %179:gr64, 4, %180:gr64_nosp, 0, $noreg, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
SU(7):   MOV32mr %179:gr64, 4, %180:gr64_nosp, 4, $noreg, %181:gr32, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48

********** MI Scheduling **********
sparse:%bb.37 for.end153
  From: %159:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
    To: JMP_1 %bb.43, debug-location !1574; cg.c:740:25
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=8
Live In: %164 
Live Out: %164 
Live Thru: GR16=2
  LiveReg: %164
  UpdateRegP: SU(7) MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1573 :: (store 4 into %ir.cont40); cg.c:739:32
              to 
Top Pressure:
GR16=2
Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   %159:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%159
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %160:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1567 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%160
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %161:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%161
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV32mr %160:gr64, 4, %161:gr64_nosp, 0, $noreg, %159:gr32, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%161
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%160
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%159
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(4):   %162:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1570 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=%162
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %163:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1571 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=%163
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   MOV64mi32 %162:gr64, 8, %163:gr64_nosp, 0, $noreg, 0, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
  # preds left       : 8
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=%163
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=%162
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(7):   MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1573 :: (store 4 into %ir.cont40); cg.c:739:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.43, debug-location !1574; cg.c:740:25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1573 :: (store 4 into %ir.cont40); cg.c:739:32
Bottom Pressure:
GR16=2
  Ready @0c
  BotQ.A TopLatency SU(7) 9c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV64mi32 %162:gr64, 8, %163:gr64_nosp, 0, $noreg, 0, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
Bottom Pressure:
GR16=6
  LiveReg: %162
  UpdateRegP: SU(6) MOV64mi32 %162:gr64, 8, %163:gr64_nosp, 0, $noreg, 0, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
              to GR16 2
  LiveReg: %163
  UpdateRegP: SU(6) MOV64mi32 %162:gr64, 8, %163:gr64_nosp, 0, $noreg, 0, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %163:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1571 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
Bottom Pressure:
GR16=4
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %162:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1570 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
Bottom Pressure:
GR16=2
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %160:gr64, 4, %161:gr64_nosp, 0, $noreg, %159:gr32, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
Bottom Pressure:
GR16=8
  LiveReg: %160
  UpdateRegP: SU(3) MOV32mr %160:gr64, 4, %161:gr64_nosp, 0, $noreg, %159:gr32, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
              to GR16 4
  LiveReg: %161
  UpdateRegP: SU(3) MOV32mr %160:gr64, 4, %161:gr64_nosp, 0, $noreg, %159:gr32, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
              to GR16 2
  LiveReg: %159
  UpdateRegP: SU(3) MOV32mr %160:gr64, 4, %161:gr64_nosp, 0, $noreg, %159:gr32, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
              to 
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %161:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
Bottom Pressure:
GR16=6
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %160:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1567 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
Bottom Pressure:
GR16=4
  Ready @9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %159:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
Bottom Pressure:
GR16=2
  Ready @9c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %159:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
SU(1):   %160:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1567 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
SU(2):   %161:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
SU(3):   MOV32mr %160:gr64, 4, %161:gr64_nosp, 0, $noreg, %159:gr32, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
SU(4):   %162:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1570 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
SU(5):   %163:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1571 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
SU(6):   MOV64mi32 %162:gr64, 8, %163:gr64_nosp, 0, $noreg, 0, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
SU(7):   MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1573 :: (store 4 into %ir.cont40); cg.c:739:32

********** MI Scheduling **********
sparse:%bb.38 if.else
  From: %138:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
    To: JCC_1 %bb.40, 5, implicit killed $eflags, debug-location !1579; cg.c:742:30
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %138:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%138
  Single Issue       : false;
SU(1):   %139:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1577 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%139
  Single Issue       : false;
SU(2):   CMP32mi8 %138:gr64, 4, %139:gr64_nosp, 0, $noreg, -1, implicit-def $eflags, debug-location !1578 :: (load 4 from %ir.arrayidx159); cg.c:742:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%139
    SU(0): Data Latency=4 Reg=%138
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.40, 5, implicit killed $eflags, debug-location !1579; cg.c:742:30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mi8 %138:gr64, 4, %139:gr64_nosp, 0, $noreg, -1, implicit-def $eflags, debug-location !1578 :: (load 4 from %ir.arrayidx159); cg.c:742:40
  Ready @4c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %139:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1577 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %138:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %138:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
SU(1):   %139:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1577 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
SU(2):   CMP32mi8 %138:gr64, 4, %139:gr64_nosp, 0, $noreg, -1, implicit-def $eflags, debug-location !1578 :: (load 4 from %ir.arrayidx159); cg.c:742:40

********** MI Scheduling **********
sparse:%bb.39 if.then162
  From: %149:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
    To: JMP_1 %bb.43, debug-location !1586; cg.c:745:25
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %149:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%149
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %150:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1582 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%150
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %151:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1583 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%151
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOV32mr %150:gr64, 4, %151:gr64_nosp, 0, $noreg, %149:gr32, debug-location !1584 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%151
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%150
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%149
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1585 :: (store 4 into %ir.cont40); cg.c:744:32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.43, debug-location !1586; cg.c:745:25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1585 :: (store 4 into %ir.cont40); cg.c:744:32
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %150:gr64, 4, %151:gr64_nosp, 0, $noreg, %149:gr32, debug-location !1584 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %151:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1583 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %150:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1582 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %149:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %149:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
SU(1):   %150:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1582 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
SU(2):   %151:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1583 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
SU(3):   MOV32mr %150:gr64, 4, %151:gr64_nosp, 0, $noreg, %149:gr32, debug-location !1584 :: (store 4 into %ir.arrayidx164); cg.c:743:35
SU(4):   MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1585 :: (store 4 into %ir.cont40); cg.c:744:32

********** MI Scheduling **********
sparse:%bb.40 if.else165
  From: %142:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
    To: JCC_1 %bb.42, 5, implicit killed $eflags, debug-location !1592; cg.c:747:30
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %142:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%142
  Single Issue       : false;
SU(1):   %143:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1589 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%143
  Single Issue       : false;
SU(2):   %144:gr32 = MOV32rm %142:gr64, 4, %143:gr64_nosp, 0, $noreg, debug-location !1587 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%143
    SU(0): Data Latency=4 Reg=%142
  Successors:
    SU(3): Data Latency=4 Reg=%144
  Single Issue       : false;
SU(3):   CMP32rm %144:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1591 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%144
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.42, 5, implicit killed $eflags, debug-location !1592; cg.c:747:30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %144:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1591 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:40
  Ready @4c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %144:gr32 = MOV32rm %142:gr64, 4, %143:gr64_nosp, 0, $noreg, debug-location !1587 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %143:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1589 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %142:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  Ready @12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %142:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
SU(1):   %143:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1589 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
SU(2):   %144:gr32 = MOV32rm %142:gr64, 4, %143:gr64_nosp, 0, $noreg, debug-location !1587 :: (load 4 from %ir.arrayidx167); cg.c:747:30
SU(3):   CMP32rm %144:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1591 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:40

********** MI Scheduling **********
sparse:%bb.41 if.then170
  From: %146:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
    To: JMP_1 %bb.43, debug-location !1601; cg.c:753:25
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %146:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%146
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %147:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%147
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   INC32m %146:gr64, 4, %147:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1599 :: (store 4 into %ir.arrayidx175), (load 4 from %ir.arrayidx172); cg.c:751:34
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%147
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%146
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1600 :: (store 4 into %ir.cont40); cg.c:752:32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.43, debug-location !1601; cg.c:753:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1600 :: (store 4 into %ir.cont40); cg.c:752:32
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) INC32m %146:gr64, 4, %147:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1599 :: (store 4 into %ir.arrayidx175), (load 4 from %ir.arrayidx172); cg.c:751:34
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %147:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %146:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %146:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
SU(1):   %147:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
SU(2):   INC32m %146:gr64, 4, %147:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1599 :: (store 4 into %ir.arrayidx175), (load 4 from %ir.arrayidx172); cg.c:751:34
SU(3):   MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1600 :: (store 4 into %ir.cont40); cg.c:752:32

********** MI Scheduling **********
sparse:%bb.44 if.then184
  From: $rdi = LEA64r $rip, 1, $noreg, @cg__str_39_internal_e, $noreg, debug-location !1612; cg.c:757:21
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1612; cg.c:757:21
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_39_internal_e, $noreg, debug-location !1612; cg.c:757:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %165:gr32, debug-location !1612; cg.c:757:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1612; cg.c:757:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1612; cg.c:757:21
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1612; cg.c:757:21
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %165:gr32, debug-location !1612; cg.c:757:21
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @cg__str_39_internal_e, $noreg, debug-location !1612; cg.c:757:21
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @cg__str_39_internal_e, $noreg, debug-location !1612; cg.c:757:21
SU(1):   $esi = COPY %165:gr32, debug-location !1612; cg.c:757:21
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1612; cg.c:757:21

********** MI Scheduling **********
sparse:%bb.45 if.end186
  From: %170:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
    To: JMP_1 %bb.25, debug-location !1622; cg.c:713:13
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %170:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Data Latency=4 Reg=%170
    SU(2): Data Latency=4 Reg=%170
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %171:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Data Latency=4 Reg=%171
    SU(2): Data Latency=4 Reg=%171
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %173:fr64 = MOVSDrm_alt %170:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=%171
    SU(0): Data Latency=4 Reg=%170
  Successors:
    SU(3): Data Latency=4 Reg=%173
    SU(3): Out  Latency=0
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %173:fr64 = ADDSDrm %173:fr64(tied-def 0), %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1617 :: (dereferenceable load 8 from %ir.va); cg.c:761:29
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(2): Data Latency=4 Reg=%173
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%173
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOVSDmr %170:gr64, 8, %171:gr64_nosp, 0, $noreg, %173:fr64, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%173
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%171
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%170
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   INC32m %stack.22.nzrow, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1621 :: (store 4 into %ir.nzrow), (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.25, debug-location !1622; cg.c:713:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) INC32m %stack.22.nzrow, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1621 :: (store 4 into %ir.nzrow), (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  Ready @3c
  BotQ.A TopLatency SU(5) 12c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOVSDmr %170:gr64, 8, %171:gr64_nosp, 0, $noreg, %173:fr64, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %173:fr64 = ADDSDrm %173:fr64(tied-def 0), %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1617 :: (dereferenceable load 8 from %ir.va); cg.c:761:29
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %173:fr64 = MOVSDrm_alt %170:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  Ready @11c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %171:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  Ready @15c
  BotQ.A BotLatency SU(1) 15c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %170:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  Ready @15c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %170:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
SU(1):   %171:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
SU(2):   %173:fr64 = MOVSDrm_alt %170:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
SU(3):   %173:fr64 = ADDSDrm %173:fr64(tied-def 0), %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1617 :: (dereferenceable load 8 from %ir.va); cg.c:761:29
SU(4):   MOVSDmr %170:gr64, 8, %171:gr64_nosp, 0, $noreg, %173:fr64, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
SU(5):   INC32m %stack.22.nzrow, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1621 :: (store 4 into %ir.nzrow), (dereferenceable load 4 from %ir.nzrow); cg.c:713:51

********** MI Scheduling **********
sparse:%bb.47 for.end197
  From: %94:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
    To: JMP_1 %bb.21, debug-location !1634; cg.c:708:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %94:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%94
    SU(1): Out  Latency=0
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %94:fr64 = MULSDrm %94:fr64(tied-def 0), %stack.26.ratio, 1, $noreg, 0, $noreg, debug-location !1631 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%94
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%94
  Single Issue       : false;
SU(2):   MOVSDmr %stack.24.size, 1, $noreg, 0, $noreg, %94:fr64, debug-location !1632 :: (store 8 into %ir.size); cg.c:764:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%94
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   INC32m %stack.15.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1633 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:708:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.21, debug-location !1634; cg.c:708:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) INC32m %stack.15.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1633 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:708:25
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.24.size, 1, $noreg, 0, $noreg, %94:fr64, debug-location !1632 :: (store 8 into %ir.size); cg.c:764:14
  Ready @0c
  BotQ.A TopLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %94:fr64 = MULSDrm %94:fr64(tied-def 0), %stack.26.ratio, 1, $noreg, 0, $noreg, debug-location !1631 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:21
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %94:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   %94:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
SU(1):   %94:fr64 = MULSDrm %94:fr64(tied-def 0), %stack.26.ratio, 1, $noreg, 0, $noreg, debug-location !1631 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:21
SU(2):   MOVSDmr %stack.24.size, 1, $noreg, 0, $noreg, %94:fr64, debug-location !1632 :: (store 8 into %ir.size); cg.c:764:14
SU(3):   INC32m %stack.15.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1633 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:708:25

********** MI Scheduling **********
sparse:%bb.48 for.end201
  From: %46:gr32 = MOV32ri 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %46:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%46
  Single Issue       : false;
SU(1):   MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %46:gr32, debug-location !1637 :: (store 4 into %ir.j); cg.c:770:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%46
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %46:gr32, debug-location !1637 :: (store 4 into %ir.j); cg.c:770:12
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %46:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %46:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %46:gr32, debug-location !1637 :: (store 4 into %ir.j); cg.c:770:12

********** MI Scheduling **********
sparse:%bb.49 for.cond202
  From: %47:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1640 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
    To: JCC_1 %bb.51, 13, implicit killed $eflags, debug-location !1644; cg.c:770:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %47:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1640 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%47
  Single Issue       : false;
SU(1):   CMP32rm %47:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1643 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%47
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.51, 13, implicit killed $eflags, debug-location !1644; cg.c:770:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %47:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1643 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %47:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1640 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %47:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1640 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
SU(1):   CMP32rm %47:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1643 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:19

********** MI Scheduling **********
sparse:%bb.50 for.body205
  From: %86:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
    To: JMP_1 %bb.49, debug-location !1656; cg.c:770:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %86:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%86
    SU(2): Data Latency=4 Reg=%86
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %87:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1647 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%87
    SU(2): Data Latency=4 Reg=%87
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %88:gr32 = MOV32rm %86:gr64, 4, %87:gr64_nosp, -4, $noreg, debug-location !1648 :: (load 4 from %ir.arrayidx210); cg.c:771:31
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%87
    SU(0): Data Latency=4 Reg=%86
  Successors:
    SU(3): Data Latency=4 Reg=%88
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   ADD32mr %86:gr64, 4, %87:gr64_nosp, 0, $noreg, %88:gr32, implicit-def dead $eflags, debug-location !1654 :: (store 4 into %ir.arrayidx213), (load 4 from %ir.arrayidx207); cg.c:771:18
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%88
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%87
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%86
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1655 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:770:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.49, debug-location !1656; cg.c:770:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1655 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:770:29
  Ready @3c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) ADD32mr %86:gr64, 4, %87:gr64_nosp, 0, $noreg, %88:gr32, implicit-def dead $eflags, debug-location !1654 :: (store 4 into %ir.arrayidx213), (load 4 from %ir.arrayidx207); cg.c:771:18
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %88:gr32 = MOV32rm %86:gr64, 4, %87:gr64_nosp, -4, $noreg, debug-location !1648 :: (load 4 from %ir.arrayidx210); cg.c:771:31
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %87:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1647 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  Ready @11c
  BotQ.A BotLatency SU(1) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %86:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  Ready @11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %86:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
SU(1):   %87:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1647 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
SU(2):   %88:gr32 = MOV32rm %86:gr64, 4, %87:gr64_nosp, -4, $noreg, debug-location !1648 :: (load 4 from %ir.arrayidx210); cg.c:771:31
SU(3):   ADD32mr %86:gr64, 4, %87:gr64_nosp, 0, $noreg, %88:gr32, implicit-def dead $eflags, debug-location !1654 :: (store 4 into %ir.arrayidx213), (load 4 from %ir.arrayidx207); cg.c:771:18
SU(4):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1655 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:770:29

********** MI Scheduling **********
sparse:%bb.52 for.cond217
  From: %49:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
    To: JCC_1 %bb.60, 13, implicit killed $eflags, debug-location !1666; cg.c:774:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %49:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%49
  Single Issue       : false;
SU(1):   CMP32rm %49:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1665 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%49
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.60, 13, implicit killed $eflags, debug-location !1666; cg.c:774:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %49:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1665 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %49:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %49:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
SU(1):   CMP32rm %49:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1665 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:19

********** MI Scheduling **********
sparse:%bb.54 if.then223
  From: %64:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
    To: JMP_1 %bb.56, debug-location !1680; cg.c:777:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %64:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%64
  Single Issue       : false;
SU(1):   %65:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(4): Data Latency=4 Reg=%65
    SU(2): Data Latency=4 Reg=%65
  Single Issue       : false;
SU(2):   %68:gr32 = MOV32rm %64:gr64, 4, %65:gr64_nosp, 0, $noreg, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%65
    SU(0): Data Latency=4 Reg=%64
  Successors:
    SU(4): Data Latency=4 Reg=%68
    SU(4): Out  Latency=0
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %67:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1675 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=4 Reg=%67
  Single Issue       : false;
SU(4):   %68:gr32 = nsw SUB32rm %68:gr32(tied-def 0), %67:gr64, 4, %65:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !1678 :: (load 4 from %ir.arrayidx228); cg.c:776:28
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%68
    SU(3): Data Latency=4 Reg=%67
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%65
  Successors:
    SU(5): Data Latency=4 Reg=%68
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   MOV32mr %stack.17.j1, 1, $noreg, 0, $noreg, %68:gr32, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%68
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.56, debug-location !1680; cg.c:777:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV32mr %stack.17.j1, 1, $noreg, 0, $noreg, %68:gr32, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16
  Ready @0c
  BotQ.A TopLatency SU(5) 12c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %68:gr32 = nsw SUB32rm %68:gr32(tied-def 0), %67:gr64, 4, %65:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !1678 :: (load 4 from %ir.arrayidx228); cg.c:776:28
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %67:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1675 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  Ready @8c
  BotQ.A BotLatency SU(3) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %68:gr32 = MOV32rm %64:gr64, 4, %65:gr64_nosp, 0, $noreg, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %65:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %64:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  Ready @12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   %64:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
SU(1):   %65:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
SU(2):   %68:gr32 = MOV32rm %64:gr64, 4, %65:gr64_nosp, 0, $noreg, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
SU(3):   %67:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1675 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
SU(4):   %68:gr32 = nsw SUB32rm %68:gr32(tied-def 0), %67:gr64, 4, %65:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !1678 :: (load 4 from %ir.arrayidx228); cg.c:776:28
SU(5):   MOV32mr %stack.17.j1, 1, $noreg, 0, $noreg, %68:gr32, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16

********** MI Scheduling **********
sparse:%bb.56 if.end231
  From: %69:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
    To: End RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=8
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %69:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(6): Data Latency=4 Reg=%69
    SU(2): Data Latency=4 Reg=%69
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %70:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(6): Data Latency=4 Reg=%70
    SU(4): Data Latency=4 Reg=%70
    SU(2): Data Latency=4 Reg=%70
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %73:gr32 = MOV32rm %69:gr64, 4, %70:gr64_nosp, 4, $noreg, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%70
    SU(0): Data Latency=4 Reg=%69
  Successors:
    SU(4): Data Latency=4 Reg=%73
    SU(4): Out  Latency=0
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(3):   %72:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1686 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(4): Data Latency=4 Reg=%72
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %73:gr32 = nsw SUB32rm %73:gr32(tied-def 0), %72:gr64, 4, %70:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1688 :: (load 4 from %ir.arrayidx236); cg.c:781:28
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 9
  Predecessors:
    SU(2): Data Latency=4 Reg=%73
    SU(3): Data Latency=4 Reg=%72
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%70
  Successors:
    SU(5): Data Latency=4 Reg=%73
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(5):   MOV32mr %stack.18.j2, 1, $noreg, 0, $noreg, %73:gr32, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 5
  Predecessors:
    SU(4): Data Latency=4 Reg=%73
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=1 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %74:gr32 = MOV32rm %69:gr64, 4, %70:gr64_nosp, 0, $noreg, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 4
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(1): Data Latency=4 Reg=%70
    SU(0): Data Latency=4 Reg=%69
  Successors:
    SU(7): Data Latency=4 Reg=%74
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %74:gr32, debug-location !1692 :: (store 4 into %ir.nza); cg.c:782:13
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=%74
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %75:gr32 = MOV32rm %stack.17.j1, 1, $noreg, 0, $noreg, debug-location !1693 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Data Latency=4 Reg=%75
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %75:gr32, debug-location !1695 :: (store 4 into %ir.k); cg.c:783:16
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(8): Data Latency=4 Reg=%75
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %75:gr32, debug-location !1695 :: (store 4 into %ir.k); cg.c:783:16
Bottom Pressure:
GR16=2
  LiveReg: %75
  UpdateRegP: SU(9) MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %75:gr32, debug-location !1695 :: (store 4 into %ir.k); cg.c:783:16
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 13c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %75:gr32 = MOV32rm %stack.17.j1, 1, $noreg, 0, $noreg, debug-location !1693 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
Bottom Pressure:

  Ready @4c
  BotQ.A BotLatency SU(8) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %74:gr32, debug-location !1692 :: (store 4 into %ir.nza); cg.c:782:13
Bottom Pressure:
GR16=2
  LiveReg: %74
  UpdateRegP: SU(7) MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %74:gr32, debug-location !1692 :: (store 4 into %ir.nza); cg.c:782:13
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 17c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %74:gr32 = MOV32rm %69:gr64, 4, %70:gr64_nosp, 0, $noreg, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
Bottom Pressure:
GR16=4
  LiveReg: %69
  UpdateRegP: SU(2) %73:gr32 = MOV32rm %69:gr64, 4, %70:gr64_nosp, 4, $noreg, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
              to 
  UpdateRegP: SU(6) %74:gr32 = MOV32rm %69:gr64, 4, %70:gr64_nosp, 0, $noreg, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
              to 
  LiveReg: %70
  UpdateRegP: SU(2) %73:gr32 = MOV32rm %69:gr64, 4, %70:gr64_nosp, 4, $noreg, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
              to GR16 -2
  UpdateRegP: SU(4) %73:gr32 = nsw SUB32rm %73:gr32(tied-def 0), %72:gr64, 4, %70:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1688 :: (load 4 from %ir.arrayidx236); cg.c:781:28
              to GR16 2
  UpdateRegP: SU(6) %74:gr32 = MOV32rm %69:gr64, 4, %70:gr64_nosp, 0, $noreg, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
              to GR16 -2
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV32mr %stack.18.j2, 1, $noreg, 0, $noreg, %73:gr32, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
Bottom Pressure:
GR16=6
  LiveReg: %73
  UpdateRegP: SU(5) MOV32mr %stack.18.j2, 1, $noreg, 0, $noreg, %73:gr32, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
              to 
  Ready @5c
  BotQ.A BotLatency SU(5) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %73:gr32 = nsw SUB32rm %73:gr32(tied-def 0), %72:gr64, 4, %70:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1688 :: (load 4 from %ir.arrayidx236); cg.c:781:28
Bottom Pressure:
GR16=8
  LiveReg: %73
  UpdateRegP: SU(4) %73:gr32 = nsw SUB32rm %73:gr32(tied-def 0), %72:gr64, 4, %70:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1688 :: (load 4 from %ir.arrayidx236); cg.c:781:28
              to 
  LiveReg: %72
  UpdateRegP: SU(4) %73:gr32 = nsw SUB32rm %73:gr32(tied-def 0), %72:gr64, 4, %70:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1688 :: (load 4 from %ir.arrayidx236); cg.c:781:28
              to GR16 -2
  Ready @9c
  BotQ.A BotLatency SU(4) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %72:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1686 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
Bottom Pressure:
GR16=6
  Ready @13c
  BotQ.A BotLatency SU(3) 13c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %73:gr32 = MOV32rm %69:gr64, 4, %70:gr64_nosp, 4, $noreg, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
Bottom Pressure:
GR16=4
  Ready @13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %70:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
Bottom Pressure:
GR16=2
  Ready @17c
  BotQ.A BotLatency SU(1) 17c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %69:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
Bottom Pressure:

  Ready @17c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.56 ***
SU(0):   %69:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
SU(1):   %70:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
SU(2):   %73:gr32 = MOV32rm %69:gr64, 4, %70:gr64_nosp, 4, $noreg, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
SU(3):   %72:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1686 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
SU(4):   %73:gr32 = nsw SUB32rm %73:gr32(tied-def 0), %72:gr64, 4, %70:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1688 :: (load 4 from %ir.arrayidx236); cg.c:781:28
SU(5):   MOV32mr %stack.18.j2, 1, $noreg, 0, $noreg, %73:gr32, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
SU(6):   %74:gr32 = MOV32rm %69:gr64, 4, %70:gr64_nosp, 0, $noreg, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
SU(7):   MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %74:gr32, debug-location !1692 :: (store 4 into %ir.nza); cg.c:782:13
SU(8):   %75:gr32 = MOV32rm %stack.17.j1, 1, $noreg, 0, $noreg, debug-location !1693 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
SU(9):   MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %75:gr32, debug-location !1695 :: (store 4 into %ir.k); cg.c:783:16

********** MI Scheduling **********
sparse:%bb.57 for.cond240
  From: %76:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
    To: JCC_1 %bb.59, 13, implicit killed $eflags, debug-location !1701; cg.c:783:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %76:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%76
  Single Issue       : false;
SU(1):   CMP32rm %76:gr32, %stack.18.j2, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1700 :: (dereferenceable load 4 from %ir.j2); cg.c:783:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%76
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.59, 13, implicit killed $eflags, debug-location !1701; cg.c:783:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %76:gr32, %stack.18.j2, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1700 :: (dereferenceable load 4 from %ir.j2); cg.c:783:24
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %76:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %76:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
SU(1):   CMP32rm %76:gr32, %stack.18.j2, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1700 :: (dereferenceable load 4 from %ir.j2); cg.c:783:24

********** MI Scheduling **********
sparse:%bb.58 for.body243
  From: %78:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
    To: JMP_1 %bb.57, debug-location !1717; cg.c:783:9
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %78:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(4): Data Latency=4 Reg=%78
    SU(2): Data Latency=4 Reg=%78
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %79:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(2): Data Latency=4 Reg=%79
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %80:fr64 = MOVSDrm_alt %78:gr64, 8, %79:gr64_nosp, 0, $noreg, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(1): Data Latency=4 Reg=%79
    SU(0): Data Latency=4 Reg=%78
  Successors:
    SU(4): Data Latency=4 Reg=%80
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   %81:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1706 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(4): Data Latency=4 Reg=%81
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %80:fr64, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
  # preds left       : 7
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(2): Data Latency=4 Reg=%80
    SU(3): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%81
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%78
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(5):   %82:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1708 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%82
    SU(7): Data Latency=4 Reg=%82
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %83:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1709 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%83
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %84:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 0, $noreg, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 7
  Predecessors:
    SU(6): Data Latency=4 Reg=%83
    SU(5): Data Latency=4 Reg=%82
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%84
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %85:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1711 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%85
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV32mr %82:gr64, 4, %85:gr64_nosp, 0, $noreg, %84:gr32, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
  # preds left       : 12
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 3
  Predecessors:
    SU(7): Data Latency=4 Reg=%84
    SU(8): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%85
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%82
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(10):   INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1715 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:786:17
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 3
  Predecessors:
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1716 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:783:31
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 3
  Predecessors:
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.57, debug-location !1717; cg.c:783:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=3 Artificial
    SU(10): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 20
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1716 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:783:31
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(11) 17c
  BotQ.A BotLatency SU(11) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1715 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:786:17
Bottom Pressure:

  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOV32mr %82:gr64, 4, %85:gr64_nosp, 0, $noreg, %84:gr32, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
Bottom Pressure:
GR16=6
  LiveReg: %82
  UpdateRegP: SU(7) %84:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 0, $noreg, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
              to 
  UpdateRegP: SU(9) MOV32mr %82:gr64, 4, %85:gr64_nosp, 0, $noreg, %84:gr32, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
              to GR16 4
  LiveReg: %85
  UpdateRegP: SU(9) MOV32mr %82:gr64, 4, %85:gr64_nosp, 0, $noreg, %84:gr32, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
              to GR16 2
  LiveReg: %84
  UpdateRegP: SU(9) MOV32mr %82:gr64, 4, %85:gr64_nosp, 0, $noreg, %84:gr32, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
              to 
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %85:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1711 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
Bottom Pressure:
GR16=4
  Ready @7c
  BotQ.A BotLatency SU(8) 7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %84:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 0, $noreg, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
Bottom Pressure:
GR16=4
  LiveReg: %83
  UpdateRegP: SU(7) %84:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 0, $noreg, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
              to GR16 -2
  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %83:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1709 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
Bottom Pressure:
GR16=2
  Ready @11c
  BotQ.A BotLatency SU(6) 11c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %82:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1708 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
Bottom Pressure:

  Ready @11c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %80:fr64, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %78
  UpdateRegP: SU(2) %80:fr64 = MOVSDrm_alt %78:gr64, 8, %79:gr64_nosp, 0, $noreg, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(4) MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %80:fr64, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %81
  UpdateRegP: SU(4) MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %80:fr64, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
              to FR32 1    FR32X 1
  LiveReg: %80
  UpdateRegP: SU(4) MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %80:fr64, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
              to 
  Ready @12c
  BotQ.A BotLatency SU(4) 12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %81:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1706 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @16c
  BotQ.A BotLatency SU(3) 16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %80:fr64 = MOVSDrm_alt %78:gr64, 8, %79:gr64_nosp, 0, $noreg, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
Bottom Pressure:
GR16=4
  LiveReg: %79
  UpdateRegP: SU(2) %80:fr64 = MOVSDrm_alt %78:gr64, 8, %79:gr64_nosp, 0, $noreg, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
              to FR32 -1    FR32X -1
  Ready @16c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %79:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
Bottom Pressure:
GR16=2
  Ready @20c
  BotQ.A BotLatency SU(1) 20c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %78:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
Bottom Pressure:

  Ready @20c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   %78:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
SU(1):   %79:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
SU(2):   %80:fr64 = MOVSDrm_alt %78:gr64, 8, %79:gr64_nosp, 0, $noreg, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
SU(3):   %81:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1706 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
SU(4):   MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %80:fr64, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
SU(5):   %82:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1708 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
SU(6):   %83:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1709 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
SU(7):   %84:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 0, $noreg, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
SU(8):   %85:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1711 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
SU(9):   MOV32mr %82:gr64, 4, %85:gr64_nosp, 0, $noreg, %84:gr32, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
SU(10):   INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1715 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:786:17
SU(11):   INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1716 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:783:31

********** MI Scheduling **********
sparse:%bb.60 for.end258
  From: %51:gr32 = MOV32ri 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %51:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%51
  Single Issue       : false;
SU(1):   MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %51:gr32, debug-location !1724 :: (store 4 into %ir.j); cg.c:789:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%51
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %51:gr32, debug-location !1724 :: (store 4 into %ir.j); cg.c:789:12
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %51:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   %51:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %51:gr32, debug-location !1724 :: (store 4 into %ir.j); cg.c:789:12

********** MI Scheduling **********
sparse:%bb.61 for.cond259
  From: %54:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
    To: JCC_1 %bb.63, 13, implicit killed $eflags, debug-location !1732; cg.c:789:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %54:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%54
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %54:gr32 = nsw INC32r %54:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1730; cg.c:789:27
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%54
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%54
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %54:gr32, implicit-def $eflags, debug-location !1731 :: (dereferenceable load 4 from %ir.j); cg.c:789:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%54
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.63, 13, implicit killed $eflags, debug-location !1732; cg.c:789:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %54:gr32, implicit-def $eflags, debug-location !1731 :: (dereferenceable load 4 from %ir.j); cg.c:789:19
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %54:gr32 = nsw INC32r %54:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1730; cg.c:789:27
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %54:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.61 ***
SU(0):   %54:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
SU(1):   %54:gr32 = nsw INC32r %54:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1730; cg.c:789:27
SU(2):   CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %54:gr32, implicit-def $eflags, debug-location !1731 :: (dereferenceable load 4 from %ir.j); cg.c:789:19

********** MI Scheduling **********
sparse:%bb.62 for.body263
  From: %60:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
    To: JMP_1 %bb.61, debug-location !1744; cg.c:789:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %60:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%60
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %61:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(4): Data Latency=4 Reg=%61
    SU(3): Data Latency=4 Reg=%61
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %62:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1736 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%62
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %63:gr32 = MOV32rm %62:gr64, 4, %61:gr64_nosp, -4, $noreg, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(2): Data Latency=4 Reg=%62
    SU(1): Data Latency=4 Reg=%61
  Successors:
    SU(4): Data Latency=4 Reg=%63
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   SUB32mr %60:gr64, 4, %61:gr64_nosp, 0, $noreg, %63:gr32, implicit-def dead $eflags, debug-location !1742 :: (store 4 into %ir.arrayidx271), (load 4 from %ir.arrayidx265); cg.c:790:19
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%63
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%61
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%60
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1743 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:789:33
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.61, debug-location !1744; cg.c:789:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1743 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:789:33
  Ready @3c
  BotQ.A TopLatency SU(5) 8c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) SUB32mr %60:gr64, 4, %61:gr64_nosp, 0, $noreg, %63:gr32, implicit-def dead $eflags, debug-location !1742 :: (store 4 into %ir.arrayidx271), (load 4 from %ir.arrayidx265); cg.c:790:19
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %63:gr32 = MOV32rm %62:gr64, 4, %61:gr64_nosp, -4, $noreg, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %62:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1736 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  Ready @11c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %61:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  Ready @11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %60:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
  Ready @7c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   %60:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
SU(1):   %61:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
SU(2):   %62:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1736 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
SU(3):   %63:gr32 = MOV32rm %62:gr64, 4, %61:gr64_nosp, -4, $noreg, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
SU(4):   SUB32mr %60:gr64, 4, %61:gr64_nosp, 0, $noreg, %63:gr32, implicit-def dead $eflags, debug-location !1742 :: (store 4 into %ir.arrayidx271), (load 4 from %ir.arrayidx265); cg.c:790:19
SU(5):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1743 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:789:33

********** MI Scheduling **********
sparse:%bb.63 for.end274
  From: %56:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
    To: RET 0, debug-location !1751; cg.c:793:1
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %56:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%56
  Single Issue       : false;
SU(1):   %57:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1748 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%57
  Single Issue       : false;
SU(2):   %59:gr32 = MOV32rm %56:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !1747 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%57
    SU(0): Data Latency=4 Reg=%56
  Successors:
    SU(3): Data Latency=4 Reg=%59
    SU(3): Out  Latency=0
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1749; cg.c:792:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%59
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%59
  Single Issue       : false;
SU(4):   MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %59:gr32, debug-location !1750 :: (store 4 into %ir.nza); cg.c:792:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%59
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   RET 0, debug-location !1751; cg.c:793:1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %59:gr32, debug-location !1750 :: (store 4 into %ir.nza); cg.c:792:9
  Ready @0c
  BotQ.A TopLatency SU(4) 9c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1749; cg.c:792:25
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %59:gr32 = MOV32rm %56:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !1747 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %57:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1748 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %56:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
  Ready @9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.63 ***
SU(0):   %56:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
SU(1):   %57:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1748 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
SU(2):   %59:gr32 = MOV32rm %56:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !1747 :: (load 4 from %ir.arrayidx276); cg.c:792:11
SU(3):   %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1749; cg.c:792:25
SU(4):   MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %59:gr32, debug-location !1750 :: (store 4 into %ir.nza); cg.c:792:9

********** INTERVALS **********
CH [0B,80r:0)  0@0B-phi
CL [0B,80r:0)  0@0B-phi
DH [0B,96r:0)[1952r,1984r:1)  0@0B-phi 1@1952r
DIL [0B,128r:0)[1744r,1776r:3)[1920r,1984r:2)[5696r,5744r:1)  0@0B-phi 1@5696r 2@1920r 3@1744r
DIH [0B,128r:0)[1744r,1776r:3)[1920r,1984r:2)[5696r,5744r:1)  0@0B-phi 1@5696r 2@1920r 3@1744r
DL [0B,96r:0)[1952r,1984r:1)  0@0B-phi 1@1952r
HCX [0B,80r:0)  0@0B-phi
HDI [0B,128r:0)[1744r,1776r:3)[1920r,1984r:2)[5696r,5744r:1)  0@0B-phi 1@5696r 2@1920r 3@1744r
HDX [0B,96r:0)[1952r,1984r:1)  0@0B-phi 1@1952r
SIL [0B,112r:0)[1936r,1984r:2)[5712r,5744r:1)  0@0B-phi 1@5712r 2@1936r
SIH [0B,112r:0)[1936r,1984r:2)[5712r,5744r:1)  0@0B-phi 1@5712r 2@1936r
HSI [0B,112r:0)[1936r,1984r:2)[5712r,5744r:1)  0@0B-phi 1@5712r 2@1936r
R8B [0B,64r:0)  0@0B-phi
R8BH [0B,64r:0)  0@0B-phi
R8WH [0B,64r:0)  0@0B-phi
R9B [0B,48r:0)  0@0B-phi
R9BH [0B,48r:0)  0@0B-phi
R9WH [0B,48r:0)  0@0B-phi
XMM0 [0B,32r:0)[2768r,2800r:2)[2800r,2880r:1)  0@0B-phi 1@2800r 2@2768r
XMM1 [0B,16r:0)[2784r,2800r:1)  0@0B-phi 1@2784r
%0 [128r,144r:0)  0@128r weight:0.000000e+00
%1 [112r,160r:0)  0@112r weight:0.000000e+00
%2 [96r,176r:0)  0@96r weight:0.000000e+00
%3 [80r,192r:0)  0@80r weight:0.000000e+00
%4 [64r,208r:0)  0@64r weight:0.000000e+00
%5 [48r,224r:0)  0@48r weight:0.000000e+00
%6 [32r,240r:0)  0@32r weight:0.000000e+00
%7 [16r,256r:0)  0@16r weight:0.000000e+00
%10 [272r,304r:2)[304r,336r:0)[336r,352r:1)  0@304r 1@336r 2@272r weight:0.000000e+00
%13 [400r,432r:0)[432r,448r:1)  0@400r 1@432r weight:0.000000e+00
%15 [656r,672r:0)  0@656r weight:0.000000e+00
%17 [1216r,1232r:0)  0@1216r weight:0.000000e+00
%18 [1248r,1264r:0)  0@1248r weight:0.000000e+00
%21 [1296r,1328r:0)[1328r,1344r:1)  0@1296r 1@1328r weight:0.000000e+00
%23 [1520r,1552r:0)  0@1520r weight:0.000000e+00
%24 [1536r,1552r:0)  0@1536r weight:0.000000e+00
%26 [1552r,1584r:0)[1584r,1616r:1)  0@1552r 1@1584r weight:0.000000e+00
%32 [1856r,2032r:0)  0@1856r weight:0.000000e+00
%33 [1872r,2032r:0)  0@1872r weight:0.000000e+00
%36 [2128r,2144r:0)  0@2128r weight:0.000000e+00
%38 [2640r,2656r:0)  0@2640r weight:0.000000e+00
%39 [2672r,2848r:0)  0@2672r weight:0.000000e+00
%40 [2688r,2736r:0)  0@2688r weight:0.000000e+00
%42 [2704r,2736r:0)[2736r,2848r:1)  0@2704r 1@2736r weight:0.000000e+00
%43 [2880r,2896r:0)  0@2880r weight:0.000000e+00
%44 [3024r,3040r:0)  0@3024r weight:0.000000e+00
%46 [6144r,6160r:0)  0@6144r weight:0.000000e+00
%47 [6192r,6208r:0)  0@6192r weight:0.000000e+00
%49 [6416r,6432r:0)  0@6416r weight:0.000000e+00
%51 [7280r,7296r:0)  0@7280r weight:0.000000e+00
%54 [7328r,7360r:0)[7360r,7376r:1)  0@7328r 1@7360r weight:0.000000e+00
%56 [7568r,7600r:0)  0@7568r weight:0.000000e+00
%57 [7584r,7600r:0)  0@7584r weight:0.000000e+00
%59 [7600r,7632r:0)[7632r,7648r:1)  0@7600r 1@7632r weight:0.000000e+00
%60 [7440r,7504r:0)  0@7440r weight:0.000000e+00
%61 [7456r,7504r:0)  0@7456r weight:0.000000e+00
%62 [7472r,7488r:0)  0@7472r weight:0.000000e+00
%63 [7488r,7504r:0)  0@7488r weight:0.000000e+00
%64 [6560r,6592r:0)  0@6560r weight:0.000000e+00
%65 [6576r,6640r:0)  0@6576r weight:0.000000e+00
%67 [6608r,6640r:0)  0@6608r weight:0.000000e+00
%68 [6592r,6640r:0)[6640r,6656r:1)  0@6592r 1@6640r weight:0.000000e+00
%69 [6736r,6848r:0)  0@6736r weight:0.000000e+00
%70 [6752r,6848r:0)  0@6752r weight:0.000000e+00
%72 [6784r,6816r:0)  0@6784r weight:0.000000e+00
%73 [6768r,6816r:0)[6816r,6832r:1)  0@6768r 1@6816r weight:0.000000e+00
%74 [6848r,6864r:0)  0@6848r weight:0.000000e+00
%75 [6880r,6896r:0)  0@6880r weight:0.000000e+00
%76 [6928r,6944r:0)  0@6928r weight:0.000000e+00
%78 [7008r,7072r:0)  0@7008r weight:0.000000e+00
%79 [7024r,7040r:0)  0@7024r weight:0.000000e+00
%80 [7040r,7072r:0)  0@7040r weight:0.000000e+00
%81 [7056r,7072r:0)  0@7056r weight:0.000000e+00
%82 [7088r,7152r:0)  0@7088r weight:0.000000e+00
%83 [7104r,7120r:0)  0@7104r weight:0.000000e+00
%84 [7120r,7152r:0)  0@7120r weight:0.000000e+00
%85 [7136r,7152r:0)  0@7136r weight:0.000000e+00
%86 [6272r,6320r:0)  0@6272r weight:0.000000e+00
%87 [6288r,6320r:0)  0@6288r weight:0.000000e+00
%88 [6304r,6320r:0)  0@6304r weight:0.000000e+00
%89 [3136r,3184r:0)  0@3136r weight:0.000000e+00
%90 [3152r,3184r:0)  0@3152r weight:0.000000e+00
%91 [3168r,3184r:0)  0@3168r weight:0.000000e+00
%94 [6032r,6064r:0)[6064r,6080r:1)  0@6032r 1@6064r weight:0.000000e+00
%96 [2928r,6128B:0)  0@2928r weight:0.000000e+00
%98 [3264r,3280r:2)[3280r,3312r:0)[3312r,3344r:1)  0@3280r 1@3312r 2@3264r weight:0.000000e+00
%99 [3328r,3472r:0)  0@3328r weight:0.000000e+00
%100 [3344r,3360r:0)  0@3344r weight:0.000000e+00
%102 [2944r,6128B:0)  0@2944r weight:0.000000e+00
%104 [3248r,3408r:2)[3408r,3440r:0)[3440r,3472r:1)  0@3408r 1@3440r 2@3248r weight:0.000000e+00
%105 [3376r,3472r:0)[3472r,3488r:1)  0@3376r 1@3472r weight:0.000000e+00
%106 [3536r,3584r:0)  0@3536r weight:0.000000e+00
%107 [3552r,3584r:0)  0@3552r weight:0.000000e+00
%108 [3568r,3584r:0)  0@3568r weight:0.000000e+00
%113 [3664r,3680r:2)[3680r,3712r:0)[3712r,3744r:1)  0@3680r 1@3712r 2@3664r weight:0.000000e+00
%114 [3728r,3840r:0)  0@3728r weight:0.000000e+00
%115 [3744r,3904r:0)  0@3744r weight:0.000000e+00
%118 [3648r,3792r:2)[3792r,3824r:0)[3824r,3840r:1)  0@3792r 1@3824r 2@3648r weight:0.000000e+00
%120 [3840r,3872r:0)[3872r,3888r:1)  0@3840r 1@3872r weight:0.000000e+00
%122 [3968r,3984r:0)  0@3968r weight:0.000000e+00
%126 [4048r,4080r:2)[4080r,4112r:0)[4112r,4128r:1)  0@4080r 1@4112r 2@4048r weight:0.000000e+00
%127 [4176r,4208r:0)  0@4176r weight:0.000000e+00
%128 [4192r,4208r:0)  0@4192r weight:0.000000e+00
%129 [4208r,4224r:0)  0@4208r weight:0.000000e+00
%130 [4256r,4304r:0)  0@4256r weight:0.000000e+00
%131 [4272r,4304r:0)  0@4272r weight:0.000000e+00
%132 [4288r,4304r:0)  0@4288r weight:0.000000e+00
%134 [4368r,4400r:0)  0@4368r weight:0.000000e+00
%135 [4384r,4400r:0)  0@4384r weight:0.000000e+00
%136 [4400r,4416r:0)  0@4400r weight:0.000000e+00
%138 [5120r,5152r:0)  0@5120r weight:0.000000e+00
%139 [5136r,5152r:0)  0@5136r weight:0.000000e+00
%142 [5328r,5360r:0)  0@5328r weight:0.000000e+00
%143 [5344r,5360r:0)  0@5344r weight:0.000000e+00
%144 [5360r,5376r:0)  0@5360r weight:0.000000e+00
%146 [5440r,5472r:0)  0@5440r weight:0.000000e+00
%147 [5456r,5472r:0)  0@5456r weight:0.000000e+00
%149 [5216r,5264r:0)  0@5216r weight:0.000000e+00
%150 [5232r,5264r:0)  0@5232r weight:0.000000e+00
%151 [5248r,5264r:0)  0@5248r weight:0.000000e+00
%153 [4480r,4512r:0)  0@4480r weight:0.000000e+00
%154 [4496r,4512r:0)  0@4496r weight:0.000000e+00
%156 [4512r,4544r:0)[4544r,4560r:1)  0@4512r 1@4544r weight:0.000000e+00
%157 [4592r,4608r:0)  0@4592r weight:0.000000e+00
%159 [4960r,5008r:0)  0@4960r weight:0.000000e+00
%160 [4976r,5008r:0)  0@4976r weight:0.000000e+00
%161 [4992r,5008r:0)  0@4992r weight:0.000000e+00
%162 [5024r,5056r:0)  0@5024r weight:0.000000e+00
%163 [5040r,5056r:0)  0@5040r weight:0.000000e+00
%164 [2960r,6128B:0)  0@2960r weight:0.000000e+00
%165 [5648r,5792r:0)  0@5648r weight:0.000000e+00
%170 [5840r,5920r:0)  0@5840r weight:0.000000e+00
%171 [5856r,5920r:0)  0@5856r weight:0.000000e+00
%173 [5872r,5904r:0)[5904r,5920r:1)  0@5872r 1@5904r weight:0.000000e+00
%174 [4672r,4704r:0)  0@4672r weight:0.000000e+00
%175 [4688r,4704r:0)  0@4688r weight:0.000000e+00
%176 [4768r,4816r:0)  0@4768r weight:0.000000e+00
%177 [4784r,4816r:0)  0@4784r weight:0.000000e+00
%178 [4800r,4816r:0)  0@4800r weight:0.000000e+00
%179 [4832r,4880r:0)  0@4832r weight:0.000000e+00
%180 [4848r,4880r:0)  0@4848r weight:0.000000e+00
%181 [4864r,4880r:0)  0@4864r weight:0.000000e+00
%182 [2208r,2240r:0)  0@2208r weight:0.000000e+00
%183 [2224r,2240r:0)  0@2224r weight:0.000000e+00
%184 [2240r,2256r:0)  0@2240r weight:0.000000e+00
%185 [2288r,2336r:0)  0@2288r weight:0.000000e+00
%186 [2304r,2336r:0)  0@2304r weight:0.000000e+00
%187 [2320r,2336r:0)  0@2320r weight:0.000000e+00
%189 [2544r,2576r:0)  0@2544r weight:0.000000e+00
%190 [2560r,2576r:0)  0@2560r weight:0.000000e+00
%191 [2400r,2432r:0)  0@2400r weight:0.000000e+00
%192 [2416r,2432r:0)  0@2416r weight:0.000000e+00
%193 [2448r,2480r:0)  0@2448r weight:0.000000e+00
%194 [2464r,2480r:0)  0@2464r weight:0.000000e+00
%195 [2096r,2624B:0)  0@2096r weight:0.000000e+00
%196 [1408r,1456r:0)  0@1408r weight:0.000000e+00
%197 [1424r,1456r:0)  0@1424r weight:0.000000e+00
%198 [1440r,1456r:0)  0@1440r weight:0.000000e+00
%199 [768r,816r:0)  0@768r weight:0.000000e+00
%200 [784r,816r:0)  0@784r weight:0.000000e+00
%201 [800r,816r:0)  0@800r weight:0.000000e+00
%203 [880r,1088r:0)  0@880r weight:0.000000e+00
%204 [624r,1200B:0)  0@624r weight:0.000000e+00
%206 [896r,912r:2)[912r,944r:0)[944r,976r:1)  0@912r 1@944r 2@896r weight:0.000000e+00
%207 [960r,976r:0)  0@960r weight:0.000000e+00
%210 [1024r,1040r:0)  0@1024r weight:0.000000e+00
%211 [1056r,1104r:0)  0@1056r weight:0.000000e+00
%212 [1072r,1088r:0)  0@1072r weight:0.000000e+00
%213 [1088r,1104r:0)  0@1088r weight:0.000000e+00
%214 [512r,544r:0)  0@512r weight:0.000000e+00
%215 [528r,544r:0)  0@528r weight:0.000000e+00
%216 [976r,1104r:0)  0@976r weight:0.000000e+00
RegMasks: 1776r 1984r 2800r 5744r
********** MACHINEINSTRS **********
# Machine code for function sparse: NoPHIs, TracksLiveness
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP+48]
  fi#-5: size=4, align=16, fixed, at location [SP+40]
  fi#-4: size=4, align=8, fixed, at location [SP+32]
  fi#-3: size=8, align=16, fixed, at location [SP+24]
  fi#-2: size=8, align=8, fixed, at location [SP+16]
  fi#-1: size=8, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: size=8, align=8, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=4, align=4, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=4, align=4, at location [SP+8]
  fi#22: size=4, align=4, at location [SP+8]
  fi#23: size=4, align=4, at location [SP+8]
  fi#24: size=8, align=8, at location [SP+8]
  fi#25: size=8, align=8, at location [SP+8]
  fi#26: size=8, align=8, at location [SP+8]
  fi#27: size=8, align=8, at location [SP+8]
  fi#28: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
Function Live Ins: $rdi in %0, $rsi in %1, $rdx in %2, $ecx in %3, $r8d in %4, $r9d in %5, $xmm0 in %6, $xmm1 in %7

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $rdi, $rsi, $rdx, $ecx, $r8d, $r9d, $xmm0, $xmm1
16B	  %7:fr64 = COPY $xmm1
32B	  %6:fr64 = COPY $xmm0
48B	  %5:gr32 = COPY $r9d
64B	  %4:gr32 = COPY $r8d
80B	  %3:gr32 = COPY $ecx
96B	  %2:gr64 = COPY $rdx
112B	  %1:gr64 = COPY $rsi
128B	  %0:gr64 = COPY $rdi
144B	  MOV64mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.a.addr)
160B	  MOV64mr %stack.1.colidx.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.colidx.addr)
176B	  MOV64mr %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.rowstr.addr)
192B	  MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n.addr)
208B	  MOV32mr %stack.4.nz.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.nz.addr)
224B	  MOV32mr %stack.5.nozer.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.nozer.addr)
240B	  MOVSDmr %stack.12.rcond.addr, 1, $noreg, 0, $noreg, %6:fr64 :: (store 8 into %ir.rcond.addr)
256B	  MOVSDmr %stack.13.shift.addr, 1, $noreg, 0, $noreg, %7:fr64 :: (store 8 into %ir.shift.addr)
272B	  %10:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1295 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
304B	  %10:gr32 = nsw SUB32rm %10:gr32(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1297 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:21
336B	  %10:gr32 = nsw INC32r %10:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1298; cg.c:659:32
352B	  MOV32mr %stack.14.nrows, 1, $noreg, 0, $noreg, %10:gr32, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
368B	  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1300 :: (store 4 into %ir.j); cg.c:664:12

384B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

400B	  %13:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
432B	  %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1306; cg.c:664:27
448B	  CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !1307 :: (dereferenceable load 4 from %ir.j); cg.c:664:19
464B	  JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !1308; cg.c:664:5
480B	  JMP_1 %bb.2, debug-location !1308; cg.c:664:5

496B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

512B	  %214:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
528B	  %215:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1311 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
544B	  MOV32mi %214:gr64, 4, %215:gr64_nosp, 0, $noreg, 0, debug-location !1312 :: (store 4 into %ir.arrayidx); cg.c:665:19
560B	  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1313 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:664:33
576B	  JMP_1 %bb.1, debug-location !1314; cg.c:664:5

592B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

608B	  MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
624B	  %204:gr64 = MOV32ri64 56

640B	bb.4.for.cond2:
	; predecessors: %bb.3, %bb.8
	  successors: %bb.5(0x7c000000), %bb.9(0x04000000); %bb.5(96.88%), %bb.9(3.12%)

656B	  %15:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
672B	  CMP32rm %15:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1323 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:19
688B	  JCC_1 %bb.9, 13, implicit killed $eflags, debug-location !1324; cg.c:668:5
704B	  JMP_1 %bb.5, debug-location !1324; cg.c:668:5

720B	bb.5.for.body4:
	; predecessors: %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

736B	  MOV32mi %stack.19.nza, 1, $noreg, 0, $noreg, 0, debug-location !1325 :: (store 4 into %ir.nza); cg.c:669:18

752B	bb.6.for.cond5:
	; predecessors: %bb.5, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

768B	  %199:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
784B	  %200:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
800B	  %201:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1332 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
816B	  CMP32rm %199:gr32, %200:gr64, 4, %201:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1333 :: (load 4 from %ir.arrayidx7); cg.c:669:27
832B	  JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1334; cg.c:669:9
848B	  JMP_1 %bb.7, debug-location !1334; cg.c:669:9

864B	bb.7.for.body9:
	; predecessors: %bb.6
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

880B	  %203:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
896B	  %206:gr64_nosp = COPY %203:gr64_nosp, debug-location !1335; cg.c:670:17
912B	  %206:gr64_nosp = IMUL64rr %206:gr64_nosp(tied-def 0), %204:gr64, implicit-def dead $eflags, debug-location !1335; cg.c:670:17
944B	  %206:gr64_nosp = ADD64rm %206:gr64_nosp(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
960B	  %207:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1338 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
976B	  %216:gr64_nosp = MOVSX64rm32 %206:gr64_nosp, 4, %207:gr64_nosp, 0, $noreg, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
1024B	  %210:gr32 = LEA64_32r %216:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1339; cg.c:670:30
1040B	  MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %210:gr32, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
1056B	  %211:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1341 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
1072B	  %212:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1343 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
1088B	  %213:gr32 = MOV32rm %212:gr64, 4, %203:gr64_nosp, 0, $noreg, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
1104B	  ADD32mr %211:gr64, 4, %216:gr64_nosp, 4, $noreg, %213:gr32, implicit-def dead $eflags, debug-location !1348 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
1120B	  INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1349 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:669:41
1136B	  JMP_1 %bb.6, debug-location !1350; cg.c:669:9

1152B	bb.8.for.end24:
	; predecessors: %bb.6
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

1168B	  INC32m %stack.15.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1353 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:668:25
1184B	  JMP_1 %bb.4, debug-location !1354; cg.c:668:5

1200B	bb.9.for.end27:
	; predecessors: %bb.4
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1216B	  %17:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
1232B	  MOV32mi %17:gr64, 1, $noreg, 0, $noreg, 0, debug-location !1358 :: (store 4 into %ir.arrayidx281); cg.c:675:15
1248B	  %18:gr32 = MOV32ri 1
1264B	  MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %18:gr32, debug-location !1359 :: (store 4 into %ir.j); cg.c:676:12

1280B	bb.10.for.cond29:
	; predecessors: %bb.9, %bb.11
	  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

1296B	  %21:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
1328B	  %21:gr32 = nsw INC32r %21:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1365; cg.c:676:27
1344B	  CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %21:gr32, implicit-def $eflags, debug-location !1366 :: (dereferenceable load 4 from %ir.j); cg.c:676:19
1360B	  JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !1367; cg.c:676:5
1376B	  JMP_1 %bb.11, debug-location !1367; cg.c:676:5

1392B	bb.11.for.body32:
	; predecessors: %bb.10
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1408B	  %196:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
1424B	  %197:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1370 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
1440B	  %198:gr32 = MOV32rm %196:gr64, 4, %197:gr64_nosp, -4, $noreg, debug-location !1371 :: (load 4 from %ir.arrayidx37); cg.c:677:33
1456B	  ADD32mr %196:gr64, 4, %197:gr64_nosp, 0, $noreg, %198:gr32, implicit-def dead $eflags, debug-location !1377 :: (store 4 into %ir.arrayidx40), (load 4 from %ir.arrayidx34); cg.c:677:19
1472B	  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1378 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:676:33
1488B	  JMP_1 %bb.10, debug-location !1379; cg.c:676:5

1504B	bb.12.for.end43:
	; predecessors: %bb.10
	  successors: %bb.13(0x40000000), %bb.14(0x40000000); %bb.13(50.00%), %bb.14(50.00%)

1520B	  %23:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
1536B	  %24:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1383 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
1552B	  %26:gr32 = MOV32rm %23:gr64, 4, %24:gr64_nosp, 0, $noreg, debug-location !1382 :: (load 4 from %ir.arrayidx45); cg.c:679:11
1584B	  %26:gr32 = DEC32r %26:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1384; cg.c:679:25
1600B	  MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %26:gr32, debug-location !1385 :: (store 4 into %ir.nza); cg.c:679:9
1616B	  CMP32rm %26:gr32, %stack.4.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1389 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:13
1632B	  JCC_1 %bb.14, 14, implicit killed $eflags, debug-location !1390; cg.c:685:9
1648B	  JMP_1 %bb.13, debug-location !1390; cg.c:685:9

1664B	bb.13.if.then:
	; predecessors: %bb.12
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

1680B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1391; cg.c:686:9
1744B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_37_Space_for_, $noreg, debug-location !1391; cg.c:686:9
1760B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1391; cg.c:686:9
1776B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1391; cg.c:686:9
1792B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1391; cg.c:686:9
1808B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1393; cg.c:687:41
1824B	  PCN_STACKMAP 0, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.4.nz.addr, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, implicit-def dead early-clobber $r11, debug-location !1393 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.4.nz.addr, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:687:41
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1393; cg.c:687:41
1856B	  %32:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
1872B	  %33:gr32 = MOV32rm %stack.4.nz.addr, 1, $noreg, 0, $noreg, debug-location !1394 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
1888B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1395; cg.c:687:9
1920B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_38_nza__nzmax, $noreg, debug-location !1395; cg.c:687:9
1936B	  $esi = COPY %32:gr32, debug-location !1395; cg.c:687:9
1952B	  $edx = COPY %33:gr32, debug-location !1395; cg.c:687:9
1968B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1395; cg.c:687:9
1984B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1395; cg.c:687:9
2000B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1395; cg.c:687:9
2016B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1396; cg.c:689:5
2032B	  PCN_STACKMAP 1, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, %32:gr32, %33:gr32, implicit-def dead early-clobber $r11, debug-location !1396 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:689:5
2048B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1396; cg.c:689:5

2064B	bb.14.if.end:
	; predecessors: %bb.12, %bb.13
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2080B	  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
2096B	  %195:gr32 = MOV32ri -1

2112B	bb.15.for.cond49:
	; predecessors: %bb.14, %bb.19
	  successors: %bb.16(0x7c000000), %bb.20(0x04000000); %bb.16(96.88%), %bb.20(3.12%)

2128B	  %36:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
2144B	  CMP32rm %36:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1403 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:19
2160B	  JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !1404; cg.c:694:5
2176B	  JMP_1 %bb.16, debug-location !1404; cg.c:694:5

2192B	bb.16.for.body51:
	; predecessors: %bb.15
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2208B	  %182:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
2224B	  %183:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1408 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
2240B	  %184:gr32 = MOV32rm %182:gr64, 4, %183:gr64_nosp, 0, $noreg, debug-location !1405 :: (load 4 from %ir.arrayidx53); cg.c:695:18
2256B	  MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %184:gr32, debug-location !1409 :: (store 4 into %ir.k); cg.c:695:16

2272B	bb.17.for.cond54:
	; predecessors: %bb.16, %bb.18
	  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)

2288B	  %185:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
2304B	  %186:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1413 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
2320B	  %187:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1414 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
2336B	  CMP32rm %185:gr32, %186:gr64, 4, %187:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1416 :: (load 4 from %ir.arrayidx57); cg.c:695:31
2352B	  JCC_1 %bb.19, 13, implicit killed $eflags, debug-location !1417; cg.c:695:9
2368B	  JMP_1 %bb.18, debug-location !1417; cg.c:695:9

2384B	bb.18.for.body59:
	; predecessors: %bb.17
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2400B	  %191:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
2416B	  %192:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
2432B	  MOV64mi32 %191:gr64, 8, %192:gr64_nosp, 0, $noreg, 0, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
2448B	  %193:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1422 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
2464B	  %194:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1423 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
2480B	  MOV32mr %193:gr64, 4, %194:gr64_nosp, 0, $noreg, %195:gr32, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
2496B	  INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1425 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:695:49
2512B	  JMP_1 %bb.17, debug-location !1426; cg.c:695:9

2528B	bb.19.for.end66:
	; predecessors: %bb.17
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2544B	  %189:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
2560B	  %190:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1430 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
2576B	  MOV32mi %189:gr64, 4, %190:gr64_nosp, 0, $noreg, 0, debug-location !1431 :: (store 4 into %ir.arrayidx68); cg.c:699:18
2592B	  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1432 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:694:29
2608B	  JMP_1 %bb.15, debug-location !1433; cg.c:694:5

2624B	bb.20.for.end71:
	; predecessors: %bb.15
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

2640B	  %38:gr64 = MOV64ri 4607182418800017408
2656B	  MOV64mr %stack.24.size, 1, $noreg, 0, $noreg, %38:gr64, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
2672B	  %39:fr64 = MOVSDrm_alt %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1437 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
2688B	  %40:fr64 = CVTSI2SDrm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
2704B	  %42:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
2736B	  %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %40:fr64, debug-location !1440; cg.c:706:29
2752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1441; cg.c:706:13
2768B	  $xmm0 = COPY %39:fr64, debug-location !1441; cg.c:706:13
2784B	  $xmm1 = COPY %42:fr64, debug-location !1441; cg.c:706:13
2800B	  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1441; cg.c:706:13
2816B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1441; cg.c:706:13
2832B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1442; cg.c:706:11
2848B	  PCN_STACKMAP 2, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, %42:fr64, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, %39:fr64, implicit-def dead early-clobber $r11, debug-location !1442 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:706:11
2864B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1442; cg.c:706:11
2880B	  %43:fr64 = COPY $xmm0, debug-location !1441; cg.c:706:13
2896B	  MOVSDmr %stack.26.ratio, 1, $noreg, 0, $noreg, %43:fr64, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
2912B	  MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1443 :: (store 4 into %ir.i); cg.c:708:12
2928B	  %96:gr64 = MOV32ri64 56
2944B	  %102:gr64 = MOV32ri64 112
2960B	  %164:gr32 = MOV32ri 1

3008B	bb.21.for.cond73:
	; predecessors: %bb.20, %bb.47
	  successors: %bb.22(0x7c000000), %bb.48(0x04000000); %bb.22(96.88%), %bb.48(3.12%)

3024B	  %44:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
3040B	  CMP32rm %44:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1449 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:19
3056B	  JCC_1 %bb.48, 13, implicit killed $eflags, debug-location !1450; cg.c:708:5
3072B	  JMP_1 %bb.22, debug-location !1450; cg.c:708:5

3088B	bb.22.for.body76:
	; predecessors: %bb.21
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

3104B	  MOV32mi %stack.19.nza, 1, $noreg, 0, $noreg, 0, debug-location !1451 :: (store 4 into %ir.nza); cg.c:709:18

3120B	bb.23.for.cond77:
	; predecessors: %bb.22, %bb.46
	  successors: %bb.24(0x7c000000), %bb.47(0x04000000); %bb.24(96.88%), %bb.47(3.12%)

3136B	  %89:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
3152B	  %90:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
3168B	  %91:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1458 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
3184B	  CMP32rm %89:gr32, %90:gr64, 4, %91:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1459 :: (load 4 from %ir.arrayidx79); cg.c:709:27
3200B	  JCC_1 %bb.47, 13, implicit killed $eflags, debug-location !1460; cg.c:709:9
3216B	  JMP_1 %bb.24, debug-location !1460; cg.c:709:9

3232B	bb.24.for.body82:
	; predecessors: %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

3248B	  %104:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
3264B	  %98:gr64 = COPY %104:gr64, debug-location !1461; cg.c:710:17
3280B	  %98:gr64 = IMUL64rr %98:gr64(tied-def 0), %96:gr64, implicit-def dead $eflags, debug-location !1461; cg.c:710:17
3312B	  %98:gr64 = ADD64rm %98:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
3328B	  %99:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1464 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
3344B	  %100:gr32 = MOV32rm %98:gr64, 4, %99:gr64_nosp, 0, $noreg, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
3360B	  MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %100:gr32, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
3376B	  %105:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1466 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
3408B	  %104:gr64 = IMUL64rr %104:gr64(tied-def 0), %102:gr64, implicit-def dead $eflags, debug-location !1467; cg.c:712:28
3440B	  %104:gr64 = ADD64rm %104:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1467 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
3472B	  %105:fr64 = MULSDrm %105:fr64(tied-def 0), %104:gr64, 8, %99:gr64_nosp, 0, $noreg, debug-location !1470 :: (load 8 from %ir.arrayidx90); cg.c:712:26
3488B	  MOVSDmr %stack.25.scale, 1, $noreg, 0, $noreg, %105:fr64, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
3504B	  MOV32mi %stack.22.nzrow, 1, $noreg, 0, $noreg, 0, debug-location !1472 :: (store 4 into %ir.nzrow); cg.c:713:24

3520B	bb.25.for.cond91:
	; predecessors: %bb.24, %bb.45
	  successors: %bb.26(0x7c000000), %bb.46(0x04000000); %bb.26(96.88%), %bb.46(3.12%)

3536B	  %106:gr32 = MOV32rm %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
3552B	  %107:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
3568B	  %108:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1478 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
3584B	  CMP32rm %106:gr32, %107:gr64, 4, %108:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1479 :: (load 4 from %ir.arrayidx93); cg.c:713:35
3600B	  JCC_1 %bb.46, 13, implicit killed $eflags, debug-location !1480; cg.c:713:13
3616B	  JMP_1 %bb.26, debug-location !1480; cg.c:713:13

3632B	bb.26.for.body96:
	; predecessors: %bb.25
	  successors: %bb.27(0x40000000), %bb.29(0x40000000); %bb.27(50.00%), %bb.29(50.00%)

3648B	  %118:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
3664B	  %113:gr64 = COPY %118:gr64, debug-location !1481; cg.c:714:24
3680B	  %113:gr64 = IMUL64rr %113:gr64(tied-def 0), %96:gr64, implicit-def dead $eflags, debug-location !1481; cg.c:714:24
3712B	  %113:gr64 = ADD64rm %113:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
3728B	  %114:gr64_nosp = MOVSX64rm32 %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1484 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
3744B	  %115:gr32 = MOV32rm %113:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
3760B	  MOV32mr %stack.23.jcol, 1, $noreg, 0, $noreg, %115:gr32, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
3792B	  %118:gr64 = IMUL64rr %118:gr64(tied-def 0), %102:gr64, implicit-def dead $eflags, debug-location !1486; cg.c:715:22
3824B	  %118:gr64 = ADD64rm %118:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1486 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
3840B	  %120:fr64 = MOVSDrm_alt %118:gr64, 8, %114:gr64_nosp, 0, $noreg, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
3872B	  %120:fr64 = MULSDrm %120:fr64(tied-def 0), %stack.25.scale, 1, $noreg, 0, $noreg, debug-location !1490 :: (dereferenceable load 8 from %ir.scale); cg.c:715:37
3888B	  MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %120:fr64, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20
3904B	  CMP32rm %115:gr32, %stack.16.j, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1495 :: (dereferenceable load 4 from %ir.j); cg.c:721:26
3920B	  JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1496; cg.c:721:31
3936B	  JMP_1 %bb.27, debug-location !1496; cg.c:721:31

3952B	bb.27.land.lhs.true:
	; predecessors: %bb.26
	  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)

3968B	  %122:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1497 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
3984B	  CMP32rm %122:gr32, %stack.15.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1499 :: (dereferenceable load 4 from %ir.i); cg.c:721:36
4000B	  JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1500; cg.c:721:21
4016B	  JMP_1 %bb.28, debug-location !1500; cg.c:721:21

4032B	bb.28.if.then110:
	; predecessors: %bb.27
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

4048B	  %126:fr64 = MOVSDrm_alt %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
4080B	  %126:fr64 = ADDSDrm %126:fr64(tied-def 0), %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1504 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:29
4112B	  %126:fr64 = SUBSDrm %126:fr64(tied-def 0), %stack.13.shift.addr, 1, $noreg, 0, $noreg, debug-location !1506 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:37
4128B	  MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %126:fr64, debug-location !1507 :: (store 8 into %ir.va); cg.c:722:24

4144B	bb.29.if.end113:
	; predecessors: %bb.26, %bb.27, %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

4160B	  MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 0, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
4176B	  %127:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
4192B	  %128:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1512 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
4208B	  %129:gr32 = MOV32rm %127:gr64, 4, %128:gr64_nosp, 0, $noreg, debug-location !1510 :: (load 4 from %ir.arrayidx115); cg.c:726:26
4224B	  MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %129:gr32, debug-location !1513 :: (store 4 into %ir.k); cg.c:726:24

4240B	bb.30.for.cond116:
	; predecessors: %bb.29, %bb.42
	  successors: %bb.31(0x7c000000), %bb.43(0x04000000); %bb.31(96.88%), %bb.43(3.12%)

4256B	  %130:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
4272B	  %131:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1517 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
4288B	  %132:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1518 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
4304B	  CMP32rm %130:gr32, %131:gr64, 4, %132:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1520 :: (load 4 from %ir.arrayidx119); cg.c:726:39
4320B	  JCC_1 %bb.43, 13, implicit killed $eflags, debug-location !1521; cg.c:726:17
4336B	  JMP_1 %bb.31, debug-location !1521; cg.c:726:17

4352B	bb.31.for.body122:
	; predecessors: %bb.30
	  successors: %bb.32(0x04000000), %bb.38(0x7c000000); %bb.32(3.12%), %bb.38(96.88%)

4368B	  %134:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
4384B	  %135:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1525 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
4400B	  %136:gr32 = MOV32rm %134:gr64, 4, %135:gr64_nosp, 0, $noreg, debug-location !1522 :: (load 4 from %ir.arrayidx124); cg.c:727:25
4416B	  CMP32rm %136:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1527 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:35
4432B	  JCC_1 %bb.38, 14, implicit killed $eflags, debug-location !1528; cg.c:727:25
4448B	  JMP_1 %bb.32, debug-location !1528; cg.c:727:25

4464B	bb.32.if.then127:
	; predecessors: %bb.31
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

4480B	  %153:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
4496B	  %154:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1532 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
4512B	  %156:gr32 = MOV32rm %153:gr64, 4, %154:gr64_nosp, 4, $noreg, debug-location !1529 :: (load 4 from %ir.arrayidx130); cg.c:731:35
4544B	  %156:gr32 = ADD32ri8 %156:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !1534; cg.c:731:49
4560B	  MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %156:gr32, debug-location !1535 :: (store 4 into %ir.kk); cg.c:731:33

4576B	bb.33.for.cond132:
	; predecessors: %bb.32, %bb.36
	  successors: %bb.34(0x7c000000), %bb.37(0x04000000); %bb.34(96.88%), %bb.37(3.12%)

4592B	  %157:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1537 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
4608B	  CMP32rm %157:gr32, %stack.20.k, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1540 :: (dereferenceable load 4 from %ir.k); cg.c:731:57
4624B	  JCC_1 %bb.37, 12, implicit killed $eflags, debug-location !1541; cg.c:731:25
4640B	  JMP_1 %bb.34, debug-location !1541; cg.c:731:25

4656B	bb.34.for.body135:
	; predecessors: %bb.33
	  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

4672B	  %174:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
4688B	  %175:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1545 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
4704B	  CMP32mi8 %174:gr64, 4, %175:gr64_nosp, 0, $noreg, 0, implicit-def $eflags, debug-location !1546 :: (load 4 from %ir.arrayidx137); cg.c:732:44
4720B	  JCC_1 %bb.36, 8, implicit killed $eflags, debug-location !1547; cg.c:732:33
4736B	  JMP_1 %bb.35, debug-location !1547; cg.c:732:33

4752B	bb.35.if.then140:
	; predecessors: %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

4768B	  %176:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
4784B	  %177:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1550 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
4800B	  %178:fr64 = MOVSDrm_alt %176:gr64, 8, %177:gr64_nosp, 0, $noreg, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
4816B	  MOVSDmr %176:gr64, 8, %177:gr64_nosp, 8, $noreg, %178:fr64, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
4832B	  %179:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1555 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
4848B	  %180:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1556 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
4864B	  %181:gr32 = MOV32rm %179:gr64, 4, %180:gr64_nosp, 0, $noreg, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
4880B	  MOV32mr %179:gr64, 4, %180:gr64_nosp, 4, $noreg, %181:gr32, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48

4896B	bb.36.if.end151:
	; predecessors: %bb.34, %bb.35
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

4912B	  DEC32m %stack.21.kk, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1562 :: (store 4 into %ir.kk), (dereferenceable load 4 from %ir.kk); cg.c:731:65
4928B	  JMP_1 %bb.33, debug-location !1563; cg.c:731:25

4944B	bb.37.for.end153:
	; predecessors: %bb.33
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

4960B	  %159:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
4976B	  %160:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1567 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
4992B	  %161:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
5008B	  MOV32mr %160:gr64, 4, %161:gr64_nosp, 0, $noreg, %159:gr32, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
5024B	  %162:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1570 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
5040B	  %163:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1571 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
5056B	  MOV64mi32 %162:gr64, 8, %163:gr64_nosp, 0, $noreg, 0, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
5072B	  MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1573 :: (store 4 into %ir.cont40); cg.c:739:32
5088B	  JMP_1 %bb.43, debug-location !1574; cg.c:740:25

5104B	bb.38.if.else:
	; predecessors: %bb.31
	  successors: %bb.39(0x04000000), %bb.40(0x7c000000); %bb.39(3.12%), %bb.40(96.88%)

5120B	  %138:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
5136B	  %139:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1577 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
5152B	  CMP32mi8 %138:gr64, 4, %139:gr64_nosp, 0, $noreg, -1, implicit-def $eflags, debug-location !1578 :: (load 4 from %ir.arrayidx159); cg.c:742:40
5168B	  JCC_1 %bb.40, 5, implicit killed $eflags, debug-location !1579; cg.c:742:30
5184B	  JMP_1 %bb.39, debug-location !1579; cg.c:742:30

5200B	bb.39.if.then162:
	; predecessors: %bb.38
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

5216B	  %149:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
5232B	  %150:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1582 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
5248B	  %151:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1583 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
5264B	  MOV32mr %150:gr64, 4, %151:gr64_nosp, 0, $noreg, %149:gr32, debug-location !1584 :: (store 4 into %ir.arrayidx164); cg.c:743:35
5280B	  MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1585 :: (store 4 into %ir.cont40); cg.c:744:32
5296B	  JMP_1 %bb.43, debug-location !1586; cg.c:745:25

5312B	bb.40.if.else165:
	; predecessors: %bb.38
	  successors: %bb.41(0x04000000), %bb.42(0x7c000000); %bb.41(3.12%), %bb.42(96.88%)

5328B	  %142:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
5344B	  %143:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1589 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
5360B	  %144:gr32 = MOV32rm %142:gr64, 4, %143:gr64_nosp, 0, $noreg, debug-location !1587 :: (load 4 from %ir.arrayidx167); cg.c:747:30
5376B	  CMP32rm %144:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1591 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:40
5392B	  JCC_1 %bb.42, 5, implicit killed $eflags, debug-location !1592; cg.c:747:30
5408B	  JMP_1 %bb.41, debug-location !1592; cg.c:747:30

5424B	bb.41.if.then170:
	; predecessors: %bb.40
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

5440B	  %146:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
5456B	  %147:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
5472B	  INC32m %146:gr64, 4, %147:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1599 :: (store 4 into %ir.arrayidx175), (load 4 from %ir.arrayidx172); cg.c:751:34
5488B	  MOV32mr %stack.28.cont40, 1, $noreg, 0, $noreg, %164:gr32, debug-location !1600 :: (store 4 into %ir.cont40); cg.c:752:32
5504B	  JMP_1 %bb.43, debug-location !1601; cg.c:753:25

5520B	bb.42.if.end176:
	; predecessors: %bb.40
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

5536B	  INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1602 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:726:57
5552B	  JMP_1 %bb.30, debug-location !1603; cg.c:726:17

5568B	bb.43.for.end181:
	; predecessors: %bb.30, %bb.41, %bb.39, %bb.37
	  successors: %bb.44(0x30000000), %bb.45(0x50000000); %bb.44(37.50%), %bb.45(62.50%)

5584B	  CMP32mi8 %stack.28.cont40, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1608 :: (dereferenceable load 4 from %ir.cont40); cg.c:756:28
5600B	  JCC_1 %bb.45, 5, implicit killed $eflags, debug-location !1609; cg.c:756:21
5616B	  JMP_1 %bb.44, debug-location !1609; cg.c:756:21

5632B	bb.44.if.then184:
	; predecessors: %bb.43
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

5648B	  %165:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1610 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
5664B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1612; cg.c:757:21
5696B	  $rdi = LEA64r $rip, 1, $noreg, @cg__str_39_internal_e, $noreg, debug-location !1612; cg.c:757:21
5712B	  $esi = COPY %165:gr32, debug-location !1612; cg.c:757:21
5728B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1612; cg.c:757:21
5744B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1612; cg.c:757:21
5760B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1612; cg.c:757:21
5776B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !1613; cg.c:760:17
5792B	  PCN_STACKMAP 3, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, %165:gr32, implicit-def dead early-clobber $r11, debug-location !1613 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:760:17
5808B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1613; cg.c:760:17

5824B	bb.45.if.end186:
	; predecessors: %bb.43, %bb.44
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

5840B	  %170:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
5856B	  %171:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
5872B	  %173:fr64 = MOVSDrm_alt %170:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
5904B	  %173:fr64 = ADDSDrm %173:fr64(tied-def 0), %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1617 :: (dereferenceable load 8 from %ir.va); cg.c:761:29
5920B	  MOVSDmr %170:gr64, 8, %171:gr64_nosp, 0, $noreg, %173:fr64, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
5936B	  INC32m %stack.22.nzrow, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1621 :: (store 4 into %ir.nzrow), (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
5952B	  JMP_1 %bb.25, debug-location !1622; cg.c:713:13

5968B	bb.46.for.end194:
	; predecessors: %bb.25
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

5984B	  INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1625 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:709:41
6000B	  JMP_1 %bb.23, debug-location !1626; cg.c:709:9

6016B	bb.47.for.end197:
	; predecessors: %bb.23
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

6032B	  %94:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
6064B	  %94:fr64 = MULSDrm %94:fr64(tied-def 0), %stack.26.ratio, 1, $noreg, 0, $noreg, debug-location !1631 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:21
6080B	  MOVSDmr %stack.24.size, 1, $noreg, 0, $noreg, %94:fr64, debug-location !1632 :: (store 8 into %ir.size); cg.c:764:14
6096B	  INC32m %stack.15.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1633 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:708:25
6112B	  JMP_1 %bb.21, debug-location !1634; cg.c:708:5

6128B	bb.48.for.end201:
	; predecessors: %bb.21
	  successors: %bb.49(0x80000000); %bb.49(100.00%)

6144B	  %46:gr32 = MOV32ri 1
6160B	  MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %46:gr32, debug-location !1637 :: (store 4 into %ir.j); cg.c:770:12

6176B	bb.49.for.cond202:
	; predecessors: %bb.48, %bb.50
	  successors: %bb.50(0x7c000000), %bb.51(0x04000000); %bb.50(96.88%), %bb.51(3.12%)

6192B	  %47:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1640 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
6208B	  CMP32rm %47:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1643 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:19
6224B	  JCC_1 %bb.51, 13, implicit killed $eflags, debug-location !1644; cg.c:770:5
6240B	  JMP_1 %bb.50, debug-location !1644; cg.c:770:5

6256B	bb.50.for.body205:
	; predecessors: %bb.49
	  successors: %bb.49(0x80000000); %bb.49(100.00%)

6272B	  %86:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
6288B	  %87:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1647 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
6304B	  %88:gr32 = MOV32rm %86:gr64, 4, %87:gr64_nosp, -4, $noreg, debug-location !1648 :: (load 4 from %ir.arrayidx210); cg.c:771:31
6320B	  ADD32mr %86:gr64, 4, %87:gr64_nosp, 0, $noreg, %88:gr32, implicit-def dead $eflags, debug-location !1654 :: (store 4 into %ir.arrayidx213), (load 4 from %ir.arrayidx207); cg.c:771:18
6336B	  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1655 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:770:29
6352B	  JMP_1 %bb.49, debug-location !1656; cg.c:770:5

6368B	bb.51.for.end216:
	; predecessors: %bb.49
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

6384B	  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1659 :: (store 4 into %ir.j); cg.c:774:12

6400B	bb.52.for.cond217:
	; predecessors: %bb.51, %bb.59
	  successors: %bb.53(0x7c000000), %bb.60(0x04000000); %bb.53(96.88%), %bb.60(3.12%)

6416B	  %49:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
6432B	  CMP32rm %49:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1665 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:19
6448B	  JCC_1 %bb.60, 13, implicit killed $eflags, debug-location !1666; cg.c:774:5
6464B	  JMP_1 %bb.53, debug-location !1666; cg.c:774:5

6480B	bb.53.for.body220:
	; predecessors: %bb.52
	  successors: %bb.54(0x50000000), %bb.55(0x30000000); %bb.54(62.50%), %bb.55(37.50%)

6496B	  CMP32mi8 %stack.16.j, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1670 :: (dereferenceable load 4 from %ir.j); cg.c:775:15
6512B	  JCC_1 %bb.55, 14, implicit killed $eflags, debug-location !1671; cg.c:775:13
6528B	  JMP_1 %bb.54, debug-location !1671; cg.c:775:13

6544B	bb.54.if.then223:
	; predecessors: %bb.53
	  successors: %bb.56(0x80000000); %bb.56(100.00%)

6560B	  %64:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
6576B	  %65:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
6592B	  %68:gr32 = MOV32rm %64:gr64, 4, %65:gr64_nosp, 0, $noreg, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
6608B	  %67:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1675 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
6640B	  %68:gr32 = nsw SUB32rm %68:gr32(tied-def 0), %67:gr64, 4, %65:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !1678 :: (load 4 from %ir.arrayidx228); cg.c:776:28
6656B	  MOV32mr %stack.17.j1, 1, $noreg, 0, $noreg, %68:gr32, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16
6672B	  JMP_1 %bb.56, debug-location !1680; cg.c:777:9

6688B	bb.55.if.else230:
	; predecessors: %bb.53
	  successors: %bb.56(0x80000000); %bb.56(100.00%)

6704B	  MOV32mi %stack.17.j1, 1, $noreg, 0, $noreg, 0, debug-location !1681 :: (store 4 into %ir.j1); cg.c:779:16

6720B	bb.56.if.end231:
	; predecessors: %bb.55, %bb.54
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

6736B	  %69:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
6752B	  %70:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
6768B	  %73:gr32 = MOV32rm %69:gr64, 4, %70:gr64_nosp, 4, $noreg, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
6784B	  %72:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1686 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
6816B	  %73:gr32 = nsw SUB32rm %73:gr32(tied-def 0), %72:gr64, 4, %70:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1688 :: (load 4 from %ir.arrayidx236); cg.c:781:28
6832B	  MOV32mr %stack.18.j2, 1, $noreg, 0, $noreg, %73:gr32, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
6848B	  %74:gr32 = MOV32rm %69:gr64, 4, %70:gr64_nosp, 0, $noreg, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
6864B	  MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %74:gr32, debug-location !1692 :: (store 4 into %ir.nza); cg.c:782:13
6880B	  %75:gr32 = MOV32rm %stack.17.j1, 1, $noreg, 0, $noreg, debug-location !1693 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
6896B	  MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %75:gr32, debug-location !1695 :: (store 4 into %ir.k); cg.c:783:16

6912B	bb.57.for.cond240:
	; predecessors: %bb.56, %bb.58
	  successors: %bb.58(0x7c000000), %bb.59(0x04000000); %bb.58(96.88%), %bb.59(3.12%)

6928B	  %76:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
6944B	  CMP32rm %76:gr32, %stack.18.j2, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1700 :: (dereferenceable load 4 from %ir.j2); cg.c:783:24
6960B	  JCC_1 %bb.59, 13, implicit killed $eflags, debug-location !1701; cg.c:783:9
6976B	  JMP_1 %bb.58, debug-location !1701; cg.c:783:9

6992B	bb.58.for.body243:
	; predecessors: %bb.57
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

7008B	  %78:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
7024B	  %79:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
7040B	  %80:fr64 = MOVSDrm_alt %78:gr64, 8, %79:gr64_nosp, 0, $noreg, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
7056B	  %81:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1706 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
7072B	  MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %80:fr64, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
7088B	  %82:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1708 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
7104B	  %83:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1709 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
7120B	  %84:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 0, $noreg, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
7136B	  %85:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1711 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
7152B	  MOV32mr %82:gr64, 4, %85:gr64_nosp, 0, $noreg, %84:gr32, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
7168B	  INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1715 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:786:17
7184B	  INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1716 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:783:31
7200B	  JMP_1 %bb.57, debug-location !1717; cg.c:783:9

7216B	bb.59.for.end255:
	; predecessors: %bb.57
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

7232B	  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1720 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:774:29
7248B	  JMP_1 %bb.52, debug-location !1721; cg.c:774:5

7264B	bb.60.for.end258:
	; predecessors: %bb.52
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

7280B	  %51:gr32 = MOV32ri 1
7296B	  MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %51:gr32, debug-location !1724 :: (store 4 into %ir.j); cg.c:789:12

7312B	bb.61.for.cond259:
	; predecessors: %bb.60, %bb.62
	  successors: %bb.62(0x7c000000), %bb.63(0x04000000); %bb.62(96.88%), %bb.63(3.12%)

7328B	  %54:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
7360B	  %54:gr32 = nsw INC32r %54:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1730; cg.c:789:27
7376B	  CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %54:gr32, implicit-def $eflags, debug-location !1731 :: (dereferenceable load 4 from %ir.j); cg.c:789:19
7392B	  JCC_1 %bb.63, 13, implicit killed $eflags, debug-location !1732; cg.c:789:5
7408B	  JMP_1 %bb.62, debug-location !1732; cg.c:789:5

7424B	bb.62.for.body263:
	; predecessors: %bb.61
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

7440B	  %60:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
7456B	  %61:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
7472B	  %62:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1736 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
7488B	  %63:gr32 = MOV32rm %62:gr64, 4, %61:gr64_nosp, -4, $noreg, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
7504B	  SUB32mr %60:gr64, 4, %61:gr64_nosp, 0, $noreg, %63:gr32, implicit-def dead $eflags, debug-location !1742 :: (store 4 into %ir.arrayidx271), (load 4 from %ir.arrayidx265); cg.c:790:19
7520B	  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1743 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:789:33
7536B	  JMP_1 %bb.61, debug-location !1744; cg.c:789:5

7552B	bb.63.for.end274:
	; predecessors: %bb.61

7568B	  %56:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
7584B	  %57:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1748 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
7600B	  %59:gr32 = MOV32rm %56:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !1747 :: (load 4 from %ir.arrayidx276); cg.c:792:11
7632B	  %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1749; cg.c:792:25
7648B	  MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %59:gr32, debug-location !1750 :: (store 4 into %ir.nza); cg.c:792:9
7664B	  RET 0, debug-location !1751; cg.c:793:1

# End machine code for function sparse.

Before MISched:
# Machine code for function icnvrt: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $xmm0 in %0, $edi in %1

bb.0.entry:
  liveins: $xmm0, $edi
  %1:gr32 = COPY $edi
  %0:fr64 = COPY $xmm0
  MOVSDmr %stack.0.x.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.x.addr)
  MOV32mr %stack.1.ipwr2.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.ipwr2.addr)
  %3:fr64 = CVTSI2SDrr %1:gr32, debug-location !1759; cg.c:843:55
  %3:fr64 = MULSDrr %3:fr64(tied-def 0), %0:fr64, debug-location !1761; cg.c:843:61
  %4:gr32 = CVTTSD2SIrr %3:fr64, debug-location !1762; cg.c:843:49
  $eax = COPY %4:gr32, debug-location !1763; cg.c:843:42
  RET 0, killed $eax, debug-location !1763; cg.c:843:42

# End machine code for function icnvrt.

********** MI Scheduling **********
icnvrt:%bb.0 entry
  From: %1:gr32 = COPY $edi
    To: RET 0, killed $eax, debug-location !1763; cg.c:843:42
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=2
GR16=2
Live In: XMM0 DIL DIH HDI 
Live Out: 
Live Thru: 
Top Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
FR32X=1
GR16=1
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
GR16=2
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
    SU(4): Data Latency=0 Reg=%1
    SU(3): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(1):   %0:fr64 = COPY $xmm0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Data Latency=0 Reg=%0
    SU(2): Data Latency=0 Reg=%0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOVSDmr %stack.0.x.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.x.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.ipwr2.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.ipwr2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %3:fr64 = CVTSI2SDrr %1:gr32, debug-location !1759; cg.c:843:55
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Successors:
    SU(5): Data Latency=1 Reg=%3
    SU(5): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(5):   %3:fr64 = MULSDrr %3:fr64(tied-def 0), %0:fr64, debug-location !1761; cg.c:843:61
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%3
    SU(4): Out  Latency=0
    SU(1): Data Latency=0 Reg=%0
  Successors:
    SU(6): Data Latency=1 Reg=%3
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %4:gr32 = CVTTSD2SIrr %3:fr64, debug-location !1762; cg.c:843:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%3
  Successors:
    SU(7): Data Latency=1 Reg=%4
  Pressure Diff      : FR32 1    FR32X 1    GR16 -2
  Single Issue       : false;
SU(7):   $eax = COPY %4:gr32, debug-location !1763; cg.c:843:42
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%4
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Single Issue       : false;
ExitSU:   RET 0, killed $eax, debug-location !1763; cg.c:843:42
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 7 
  Cand SU(3) ORDER                              
  Cand SU(2) REG-MAX                            
  Cand SU(7) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(7) $eax = COPY %4:gr32, debug-location !1763; cg.c:843:42
Bottom Pressure:
GR16=2
  LiveReg: %4
  UpdateRegP: SU(7) $eax = COPY %4:gr32, debug-location !1763; cg.c:843:42
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Ready @0c
  BotQ.A TopLatency SU(7) 3c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 6 
  Cand SU(3) ORDER                              
  Cand SU(2) REG-MAX                            
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %4:gr32 = CVTTSD2SIrr %3:fr64, debug-location !1762; cg.c:843:49
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %3
  UpdateRegP: SU(6) %4:gr32 = CVTTSD2SIrr %3:fr64, debug-location !1762; cg.c:843:49
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %3:fr64 = MULSDrr %3:fr64(tied-def 0), %0:fr64, debug-location !1761; cg.c:843:61
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %3
  UpdateRegP: SU(5) %3:fr64 = MULSDrr %3:fr64(tied-def 0), %0:fr64, debug-location !1761; cg.c:843:61
              to 
  LiveReg: %0
  UpdateRegP: SU(2) MOVSDmr %stack.0.x.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.x.addr)
              to 
  UpdateRegP: SU(5) %3:fr64 = MULSDrr %3:fr64(tied-def 0), %0:fr64, debug-location !1761; cg.c:843:61
              to FR32 -1    FR32X -1
  Ready @2c
  BotQ.A BotLatency SU(5) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %3:fr64 = CVTSI2SDrr %1:gr32, debug-location !1759; cg.c:843:55
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %1
  UpdateRegP: SU(3) MOV32mr %stack.1.ipwr2.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.ipwr2.addr)
              to 
  UpdateRegP: SU(4) %3:fr64 = CVTSI2SDrr %1:gr32, debug-location !1759; cg.c:843:55
              to FR32 -1    FR32X -1
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.1.ipwr2.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.ipwr2.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOVSDmr %stack.0.x.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.x.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %0:fr64 = COPY $xmm0
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @2c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:gr32 = COPY $edi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
FR32X=1
GR16=1
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gr32 = COPY $edi
SU(1):   %0:fr64 = COPY $xmm0
SU(2):   MOVSDmr %stack.0.x.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.x.addr)
SU(3):   MOV32mr %stack.1.ipwr2.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.ipwr2.addr)
SU(4):   %3:fr64 = CVTSI2SDrr %1:gr32, debug-location !1759; cg.c:843:55
SU(5):   %3:fr64 = MULSDrr %3:fr64(tied-def 0), %0:fr64, debug-location !1761; cg.c:843:61
SU(6):   %4:gr32 = CVTTSD2SIrr %3:fr64, debug-location !1762; cg.c:843:49
SU(7):   $eax = COPY %4:gr32, debug-location !1763; cg.c:843:42

********** INTERVALS **********
DIL [0B,16r:0)  0@0B-phi
DIH [0B,16r:0)  0@0B-phi
HDI [0B,16r:0)  0@0B-phi
XMM0 [0B,32r:0)  0@0B-phi
%0 [32r,112r:0)  0@32r weight:0.000000e+00
%1 [16r,80r:0)  0@16r weight:0.000000e+00
%3 [80r,112r:0)[112r,128r:1)  0@80r 1@112r weight:0.000000e+00
%4 [128r,144r:0)  0@128r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function icnvrt: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $xmm0 in %0, $edi in %1

0B	bb.0.entry:
	  liveins: $xmm0, $edi
16B	  %1:gr32 = COPY $edi
32B	  %0:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0.x.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.x.addr)
64B	  MOV32mr %stack.1.ipwr2.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.ipwr2.addr)
80B	  %3:fr64 = CVTSI2SDrr %1:gr32, debug-location !1759; cg.c:843:55
112B	  %3:fr64 = MULSDrr %3:fr64(tied-def 0), %0:fr64, debug-location !1761; cg.c:843:61
128B	  %4:gr32 = CVTTSD2SIrr %3:fr64, debug-location !1762; cg.c:843:49
144B	  $eax = COPY %4:gr32, debug-location !1763; cg.c:843:42
160B	  RET 0, killed $eax, debug-location !1763; cg.c:843:42

# End machine code for function icnvrt.

